// mojo/public/interfaces/bindings/interface_control_messages.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom-shared.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "base/component_export.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace interface_control {
namespace blink {







// @generated_from: mojo.interface_control.QueryVersion
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) QueryVersion {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<QueryVersion, T>::value>;
  using DataView = QueryVersionDataView;
  using Data_ = internal::QueryVersion_Data;

  template <typename... Args>
  static QueryVersionPtr New(Args&&... args) {
    return QueryVersionPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static QueryVersionPtr From(const U& u) {
    return mojo::TypeConverter<QueryVersionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, QueryVersion>::Convert(*this);
  }


  QueryVersion();

  ~QueryVersion();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = QueryVersionPtr>
  QueryVersionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        QueryVersion::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        QueryVersion::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::QueryVersion_UnserializedMessageContext<
            UserType, QueryVersion::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<QueryVersion::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return QueryVersion::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::QueryVersion_UnserializedMessageContext<
            UserType, QueryVersion::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<QueryVersion::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, QueryVersion::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.QueryVersionResult
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) QueryVersionResult {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<QueryVersionResult, T>::value>;
  using DataView = QueryVersionResultDataView;
  using Data_ = internal::QueryVersionResult_Data;

  template <typename... Args>
  static QueryVersionResultPtr New(Args&&... args) {
    return QueryVersionResultPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static QueryVersionResultPtr From(const U& u) {
    return mojo::TypeConverter<QueryVersionResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, QueryVersionResult>::Convert(*this);
  }


  QueryVersionResult();

  explicit QueryVersionResult(
      uint32_t version);

  ~QueryVersionResult();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = QueryVersionResultPtr>
  QueryVersionResultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        QueryVersionResult::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        QueryVersionResult::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::QueryVersionResult_UnserializedMessageContext<
            UserType, QueryVersionResult::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<QueryVersionResult::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return QueryVersionResult::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::QueryVersionResult_UnserializedMessageContext<
            UserType, QueryVersionResult::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<QueryVersionResult::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.QueryVersionResult.version
  uint32_t version;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, QueryVersionResult::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.FlushForTesting
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) FlushForTesting {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FlushForTesting, T>::value>;
  using DataView = FlushForTestingDataView;
  using Data_ = internal::FlushForTesting_Data;

  template <typename... Args>
  static FlushForTestingPtr New(Args&&... args) {
    return FlushForTestingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FlushForTestingPtr From(const U& u) {
    return mojo::TypeConverter<FlushForTestingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlushForTesting>::Convert(*this);
  }


  FlushForTesting();

  ~FlushForTesting();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FlushForTestingPtr>
  FlushForTestingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        FlushForTesting::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FlushForTesting::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FlushForTesting_UnserializedMessageContext<
            UserType, FlushForTesting::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<FlushForTesting::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return FlushForTesting::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FlushForTesting_UnserializedMessageContext<
            UserType, FlushForTesting::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FlushForTesting::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FlushForTesting::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.interface_control.RequireVersion
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RequireVersion {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<RequireVersion, T>::value>;
  using DataView = RequireVersionDataView;
  using Data_ = internal::RequireVersion_Data;

  template <typename... Args>
  static RequireVersionPtr New(Args&&... args) {
    return RequireVersionPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static RequireVersionPtr From(const U& u) {
    return mojo::TypeConverter<RequireVersionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RequireVersion>::Convert(*this);
  }


  RequireVersion();

  explicit RequireVersion(
      uint32_t version);

  ~RequireVersion();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = RequireVersionPtr>
  RequireVersionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        RequireVersion::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RequireVersion::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::RequireVersion_UnserializedMessageContext<
            UserType, RequireVersion::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<RequireVersion::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return RequireVersion::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::RequireVersion_UnserializedMessageContext<
            UserType, RequireVersion::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<RequireVersion::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.RequireVersion.version
  uint32_t version;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, RequireVersion::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.EnableIdleTracking
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) EnableIdleTracking {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<EnableIdleTracking, T>::value>;
  using DataView = EnableIdleTrackingDataView;
  using Data_ = internal::EnableIdleTracking_Data;

  template <typename... Args>
  static EnableIdleTrackingPtr New(Args&&... args) {
    return EnableIdleTrackingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static EnableIdleTrackingPtr From(const U& u) {
    return mojo::TypeConverter<EnableIdleTrackingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, EnableIdleTracking>::Convert(*this);
  }


  EnableIdleTracking();

  explicit EnableIdleTracking(
      int64_t timeout_in_microseconds);

  ~EnableIdleTracking();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = EnableIdleTrackingPtr>
  EnableIdleTrackingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        EnableIdleTracking::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        EnableIdleTracking::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::EnableIdleTracking_UnserializedMessageContext<
            UserType, EnableIdleTracking::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<EnableIdleTracking::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return EnableIdleTracking::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::EnableIdleTracking_UnserializedMessageContext<
            UserType, EnableIdleTracking::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<EnableIdleTracking::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.EnableIdleTracking.timeout_in_microseconds
  int64_t timeout_in_microseconds;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, EnableIdleTracking::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.MessageAck
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) MessageAck {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MessageAck, T>::value>;
  using DataView = MessageAckDataView;
  using Data_ = internal::MessageAck_Data;

  template <typename... Args>
  static MessageAckPtr New(Args&&... args) {
    return MessageAckPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MessageAckPtr From(const U& u) {
    return mojo::TypeConverter<MessageAckPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MessageAck>::Convert(*this);
  }


  MessageAck();

  ~MessageAck();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MessageAckPtr>
  MessageAckPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MessageAck::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MessageAck::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MessageAck_UnserializedMessageContext<
            UserType, MessageAck::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MessageAck::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MessageAck::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MessageAck_UnserializedMessageContext<
            UserType, MessageAck::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MessageAck::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MessageAck::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.NotifyIdle
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) NotifyIdle {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<NotifyIdle, T>::value>;
  using DataView = NotifyIdleDataView;
  using Data_ = internal::NotifyIdle_Data;

  template <typename... Args>
  static NotifyIdlePtr New(Args&&... args) {
    return NotifyIdlePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static NotifyIdlePtr From(const U& u) {
    return mojo::TypeConverter<NotifyIdlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NotifyIdle>::Convert(*this);
  }


  NotifyIdle();

  ~NotifyIdle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = NotifyIdlePtr>
  NotifyIdlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        NotifyIdle::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        NotifyIdle::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::NotifyIdle_UnserializedMessageContext<
            UserType, NotifyIdle::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<NotifyIdle::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return NotifyIdle::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::NotifyIdle_UnserializedMessageContext<
            UserType, NotifyIdle::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<NotifyIdle::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, NotifyIdle::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.RunInput
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunInput {
 public:
  using DataView = RunInputDataView;
  using Data_ = internal::RunInput_Data;
  using Tag = Data_::RunInput_Tag;

  static RunInputPtr New() {
    return RunInputPtr(base::in_place);
  }
  // Construct an instance holding |query_version|.
  static RunInputPtr
  NewQueryVersion(
      QueryVersionPtr query_version) {
    auto result = RunInputPtr(base::in_place);
    result->set_query_version(std::move(query_version));
    return result;
  }
  // Construct an instance holding |flush_for_testing|.
  static RunInputPtr
  NewFlushForTesting(
      FlushForTestingPtr flush_for_testing) {
    auto result = RunInputPtr(base::in_place);
    result->set_flush_for_testing(std::move(flush_for_testing));
    return result;
  }

  template <typename U>
  static RunInputPtr From(const U& u) {
    return mojo::TypeConverter<RunInputPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunInput>::Convert(*this);
  }

  RunInput();
  ~RunInput();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = RunInputPtr>
  RunInputPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunInput>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunInput>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.interface_control.RunInput.query_version
  bool is_query_version() const { return tag_ == Tag::QUERY_VERSION; }

  
// @generated_from: mojo.interface_control.RunInput.query_version
  QueryVersionPtr& get_query_version() const {
    DCHECK(tag_ == Tag::QUERY_VERSION);
    return *(data_.query_version);
  }

  
// @generated_from: mojo.interface_control.RunInput.query_version
  void set_query_version(
      QueryVersionPtr query_version);
  
// @generated_from: mojo.interface_control.RunInput.flush_for_testing
  bool is_flush_for_testing() const { return tag_ == Tag::FLUSH_FOR_TESTING; }

  
// @generated_from: mojo.interface_control.RunInput.flush_for_testing
  FlushForTestingPtr& get_flush_for_testing() const {
    DCHECK(tag_ == Tag::FLUSH_FOR_TESTING);
    return *(data_.flush_for_testing);
  }

  
// @generated_from: mojo.interface_control.RunInput.flush_for_testing
  void set_flush_for_testing(
      FlushForTestingPtr flush_for_testing);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunInput::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<RunInput::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    QueryVersionPtr* query_version;
    FlushForTestingPtr* flush_for_testing;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



// @generated_from: mojo.interface_control.RunOutput
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunOutput {
 public:
  using DataView = RunOutputDataView;
  using Data_ = internal::RunOutput_Data;
  using Tag = Data_::RunOutput_Tag;

  static RunOutputPtr New() {
    return RunOutputPtr(base::in_place);
  }
  // Construct an instance holding |query_version_result|.
  static RunOutputPtr
  NewQueryVersionResult(
      QueryVersionResultPtr query_version_result) {
    auto result = RunOutputPtr(base::in_place);
    result->set_query_version_result(std::move(query_version_result));
    return result;
  }

  template <typename U>
  static RunOutputPtr From(const U& u) {
    return mojo::TypeConverter<RunOutputPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOutput>::Convert(*this);
  }

  RunOutput();
  ~RunOutput();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = RunOutputPtr>
  RunOutputPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOutput>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOutput>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.interface_control.RunOutput.query_version_result
  bool is_query_version_result() const { return tag_ == Tag::QUERY_VERSION_RESULT; }

  
// @generated_from: mojo.interface_control.RunOutput.query_version_result
  QueryVersionResultPtr& get_query_version_result() const {
    DCHECK(tag_ == Tag::QUERY_VERSION_RESULT);
    return *(data_.query_version_result);
  }

  
// @generated_from: mojo.interface_control.RunOutput.query_version_result
  void set_query_version_result(
      QueryVersionResultPtr query_version_result);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunOutput::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<RunOutput::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    QueryVersionResultPtr* query_version_result;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



// @generated_from: mojo.interface_control.RunOrClosePipeInput
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunOrClosePipeInput {
 public:
  using DataView = RunOrClosePipeInputDataView;
  using Data_ = internal::RunOrClosePipeInput_Data;
  using Tag = Data_::RunOrClosePipeInput_Tag;

  static RunOrClosePipeInputPtr New() {
    return RunOrClosePipeInputPtr(base::in_place);
  }
  // Construct an instance holding |require_version|.
  static RunOrClosePipeInputPtr
  NewRequireVersion(
      RequireVersionPtr require_version) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_require_version(std::move(require_version));
    return result;
  }
  // Construct an instance holding |enable_idle_tracking|.
  static RunOrClosePipeInputPtr
  NewEnableIdleTracking(
      EnableIdleTrackingPtr enable_idle_tracking) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_enable_idle_tracking(std::move(enable_idle_tracking));
    return result;
  }
  // Construct an instance holding |message_ack|.
  static RunOrClosePipeInputPtr
  NewMessageAck(
      MessageAckPtr message_ack) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_message_ack(std::move(message_ack));
    return result;
  }
  // Construct an instance holding |notify_idle|.
  static RunOrClosePipeInputPtr
  NewNotifyIdle(
      NotifyIdlePtr notify_idle) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_notify_idle(std::move(notify_idle));
    return result;
  }

  template <typename U>
  static RunOrClosePipeInputPtr From(const U& u) {
    return mojo::TypeConverter<RunOrClosePipeInputPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOrClosePipeInput>::Convert(*this);
  }

  RunOrClosePipeInput();
  ~RunOrClosePipeInput();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = RunOrClosePipeInputPtr>
  RunOrClosePipeInputPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOrClosePipeInput>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOrClosePipeInput>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.require_version
  bool is_require_version() const { return tag_ == Tag::REQUIRE_VERSION; }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.require_version
  RequireVersionPtr& get_require_version() const {
    DCHECK(tag_ == Tag::REQUIRE_VERSION);
    return *(data_.require_version);
  }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.require_version
  void set_require_version(
      RequireVersionPtr require_version);
  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.enable_idle_tracking
  bool is_enable_idle_tracking() const { return tag_ == Tag::ENABLE_IDLE_TRACKING; }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.enable_idle_tracking
  EnableIdleTrackingPtr& get_enable_idle_tracking() const {
    DCHECK(tag_ == Tag::ENABLE_IDLE_TRACKING);
    return *(data_.enable_idle_tracking);
  }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.enable_idle_tracking
  void set_enable_idle_tracking(
      EnableIdleTrackingPtr enable_idle_tracking);
  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.message_ack
  bool is_message_ack() const { return tag_ == Tag::MESSAGE_ACK; }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.message_ack
  MessageAckPtr& get_message_ack() const {
    DCHECK(tag_ == Tag::MESSAGE_ACK);
    return *(data_.message_ack);
  }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.message_ack
  void set_message_ack(
      MessageAckPtr message_ack);
  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.notify_idle
  bool is_notify_idle() const { return tag_ == Tag::NOTIFY_IDLE; }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.notify_idle
  NotifyIdlePtr& get_notify_idle() const {
    DCHECK(tag_ == Tag::NOTIFY_IDLE);
    return *(data_.notify_idle);
  }

  
// @generated_from: mojo.interface_control.RunOrClosePipeInput.notify_idle
  void set_notify_idle(
      NotifyIdlePtr notify_idle);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunOrClosePipeInput::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<RunOrClosePipeInput::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    RequireVersionPtr* require_version;
    EnableIdleTrackingPtr* enable_idle_tracking;
    MessageAckPtr* message_ack;
    NotifyIdlePtr* notify_idle;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: mojo.interface_control.RunMessageParams
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunMessageParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<RunMessageParams, T>::value>;
  using DataView = RunMessageParamsDataView;
  using Data_ = internal::RunMessageParams_Data;

  template <typename... Args>
  static RunMessageParamsPtr New(Args&&... args) {
    return RunMessageParamsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static RunMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunMessageParams>::Convert(*this);
  }


  RunMessageParams();

  explicit RunMessageParams(
      RunInputPtr input);

  ~RunMessageParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = RunMessageParamsPtr>
  RunMessageParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        RunMessageParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunMessageParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::RunMessageParams_UnserializedMessageContext<
            UserType, RunMessageParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<RunMessageParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return RunMessageParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::RunMessageParams_UnserializedMessageContext<
            UserType, RunMessageParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<RunMessageParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.RunMessageParams.input
  RunInputPtr input;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(RunMessageParams);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, RunMessageParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.interface_control.RunResponseMessageParams
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunResponseMessageParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<RunResponseMessageParams, T>::value>;
  using DataView = RunResponseMessageParamsDataView;
  using Data_ = internal::RunResponseMessageParams_Data;

  template <typename... Args>
  static RunResponseMessageParamsPtr New(Args&&... args) {
    return RunResponseMessageParamsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static RunResponseMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunResponseMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunResponseMessageParams>::Convert(*this);
  }


  RunResponseMessageParams();

  explicit RunResponseMessageParams(
      RunOutputPtr output);

  ~RunResponseMessageParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = RunResponseMessageParamsPtr>
  RunResponseMessageParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        RunResponseMessageParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunResponseMessageParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::RunResponseMessageParams_UnserializedMessageContext<
            UserType, RunResponseMessageParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<RunResponseMessageParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return RunResponseMessageParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::RunResponseMessageParams_UnserializedMessageContext<
            UserType, RunResponseMessageParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<RunResponseMessageParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.RunResponseMessageParams.output
  RunOutputPtr output;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(RunResponseMessageParams);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, RunResponseMessageParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








// @generated_from: mojo.interface_control.RunOrClosePipeMessageParams
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunOrClosePipeMessageParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<RunOrClosePipeMessageParams, T>::value>;
  using DataView = RunOrClosePipeMessageParamsDataView;
  using Data_ = internal::RunOrClosePipeMessageParams_Data;

  template <typename... Args>
  static RunOrClosePipeMessageParamsPtr New(Args&&... args) {
    return RunOrClosePipeMessageParamsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static RunOrClosePipeMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunOrClosePipeMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOrClosePipeMessageParams>::Convert(*this);
  }


  RunOrClosePipeMessageParams();

  explicit RunOrClosePipeMessageParams(
      RunOrClosePipeInputPtr input);

  ~RunOrClosePipeMessageParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = RunOrClosePipeMessageParamsPtr>
  RunOrClosePipeMessageParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        RunOrClosePipeMessageParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunOrClosePipeMessageParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::RunOrClosePipeMessageParams_UnserializedMessageContext<
            UserType, RunOrClosePipeMessageParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<RunOrClosePipeMessageParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return RunOrClosePipeMessageParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::RunOrClosePipeMessageParams_UnserializedMessageContext<
            UserType, RunOrClosePipeMessageParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<RunOrClosePipeMessageParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.interface_control.RunOrClosePipeMessageParams.input
  RunOrClosePipeInputPtr input;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(RunOrClosePipeMessageParams);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





template <typename UnionPtrType>
RunInputPtr RunInput::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::QUERY_VERSION:
      rv->set_query_version(mojo::Clone(*data_.query_version));
      break;
    case Tag::FLUSH_FOR_TESTING:
      rv->set_flush_for_testing(mojo::Clone(*data_.flush_for_testing));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, RunInput>::value>::type*>
bool RunInput::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::QUERY_VERSION:
      return mojo::Equals(*(data_.query_version), *(other.data_.query_version));
    case Tag::FLUSH_FOR_TESTING:
      return mojo::Equals(*(data_.flush_for_testing), *(other.data_.flush_for_testing));
  }

  return false;
}
template <typename UnionPtrType>
RunOutputPtr RunOutput::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::QUERY_VERSION_RESULT:
      rv->set_query_version_result(mojo::Clone(*data_.query_version_result));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, RunOutput>::value>::type*>
bool RunOutput::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::QUERY_VERSION_RESULT:
      return mojo::Equals(*(data_.query_version_result), *(other.data_.query_version_result));
  }

  return false;
}
template <typename UnionPtrType>
RunOrClosePipeInputPtr RunOrClosePipeInput::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::REQUIRE_VERSION:
      rv->set_require_version(mojo::Clone(*data_.require_version));
      break;
    case Tag::ENABLE_IDLE_TRACKING:
      rv->set_enable_idle_tracking(mojo::Clone(*data_.enable_idle_tracking));
      break;
    case Tag::MESSAGE_ACK:
      rv->set_message_ack(mojo::Clone(*data_.message_ack));
      break;
    case Tag::NOTIFY_IDLE:
      rv->set_notify_idle(mojo::Clone(*data_.notify_idle));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, RunOrClosePipeInput>::value>::type*>
bool RunOrClosePipeInput::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::REQUIRE_VERSION:
      return mojo::Equals(*(data_.require_version), *(other.data_.require_version));
    case Tag::ENABLE_IDLE_TRACKING:
      return mojo::Equals(*(data_.enable_idle_tracking), *(other.data_.enable_idle_tracking));
    case Tag::MESSAGE_ACK:
      return mojo::Equals(*(data_.message_ack), *(other.data_.message_ack));
    case Tag::NOTIFY_IDLE:
      return mojo::Equals(*(data_.notify_idle), *(other.data_.notify_idle));
  }

  return false;
}
template <typename StructPtrType>
RunMessageParamsPtr RunMessageParams::Clone() const {
  return New(
      mojo::Clone(input)
  );
}

template <typename T, RunMessageParams::EnableIfSame<T>*>
bool RunMessageParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->input, other_struct.input))
    return false;
  return true;
}

template <typename T, RunMessageParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.input < rhs.input)
    return true;
  if (rhs.input < lhs.input)
    return false;
  return false;
}
template <typename StructPtrType>
RunResponseMessageParamsPtr RunResponseMessageParams::Clone() const {
  return New(
      mojo::Clone(output)
  );
}

template <typename T, RunResponseMessageParams::EnableIfSame<T>*>
bool RunResponseMessageParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->output, other_struct.output))
    return false;
  return true;
}

template <typename T, RunResponseMessageParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.output < rhs.output)
    return true;
  if (rhs.output < lhs.output)
    return false;
  return false;
}
template <typename StructPtrType>
QueryVersionPtr QueryVersion::Clone() const {
  return New(
  );
}

template <typename T, QueryVersion::EnableIfSame<T>*>
bool QueryVersion::Equals(const T& other_struct) const {
  return true;
}

template <typename T, QueryVersion::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
QueryVersionResultPtr QueryVersionResult::Clone() const {
  return New(
      mojo::Clone(version)
  );
}

template <typename T, QueryVersionResult::EnableIfSame<T>*>
bool QueryVersionResult::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->version, other_struct.version))
    return false;
  return true;
}

template <typename T, QueryVersionResult::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.version < rhs.version)
    return true;
  if (rhs.version < lhs.version)
    return false;
  return false;
}
template <typename StructPtrType>
FlushForTestingPtr FlushForTesting::Clone() const {
  return New(
  );
}

template <typename T, FlushForTesting::EnableIfSame<T>*>
bool FlushForTesting::Equals(const T& other_struct) const {
  return true;
}

template <typename T, FlushForTesting::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
RunOrClosePipeMessageParamsPtr RunOrClosePipeMessageParams::Clone() const {
  return New(
      mojo::Clone(input)
  );
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>*>
bool RunOrClosePipeMessageParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->input, other_struct.input))
    return false;
  return true;
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.input < rhs.input)
    return true;
  if (rhs.input < lhs.input)
    return false;
  return false;
}
template <typename StructPtrType>
RequireVersionPtr RequireVersion::Clone() const {
  return New(
      mojo::Clone(version)
  );
}

template <typename T, RequireVersion::EnableIfSame<T>*>
bool RequireVersion::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->version, other_struct.version))
    return false;
  return true;
}

template <typename T, RequireVersion::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.version < rhs.version)
    return true;
  if (rhs.version < lhs.version)
    return false;
  return false;
}
template <typename StructPtrType>
EnableIdleTrackingPtr EnableIdleTracking::Clone() const {
  return New(
      mojo::Clone(timeout_in_microseconds)
  );
}

template <typename T, EnableIdleTracking::EnableIfSame<T>*>
bool EnableIdleTracking::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->timeout_in_microseconds, other_struct.timeout_in_microseconds))
    return false;
  return true;
}

template <typename T, EnableIdleTracking::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.timeout_in_microseconds < rhs.timeout_in_microseconds)
    return true;
  if (rhs.timeout_in_microseconds < lhs.timeout_in_microseconds)
    return false;
  return false;
}
template <typename StructPtrType>
MessageAckPtr MessageAck::Clone() const {
  return New(
  );
}

template <typename T, MessageAck::EnableIfSame<T>*>
bool MessageAck::Equals(const T& other_struct) const {
  return true;
}

template <typename T, MessageAck::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
NotifyIdlePtr NotifyIdle::Clone() const {
  return New(
  );
}

template <typename T, NotifyIdle::EnableIfSame<T>*>
bool NotifyIdle::Equals(const T& other_struct) const {
  return true;
}

template <typename T, NotifyIdle::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}


}  // namespace blink
}  // namespace interface_control
}  // namespace mojo

namespace mojo {


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::RunMessageParams::DataView,
                                         ::mojo::interface_control::blink::RunMessageParamsPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunMessageParamsPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunMessageParamsPtr* output) { output->reset(); }

  static const decltype(::mojo::interface_control::blink::RunMessageParams::input)& input(
      const ::mojo::interface_control::blink::RunMessageParamsPtr& input) {
    return input->input;
  }

  static bool Read(::mojo::interface_control::blink::RunMessageParams::DataView input, ::mojo::interface_control::blink::RunMessageParamsPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::RunResponseMessageParams::DataView,
                                         ::mojo::interface_control::blink::RunResponseMessageParamsPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunResponseMessageParamsPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunResponseMessageParamsPtr* output) { output->reset(); }

  static const decltype(::mojo::interface_control::blink::RunResponseMessageParams::output)& output(
      const ::mojo::interface_control::blink::RunResponseMessageParamsPtr& input) {
    return input->output;
  }

  static bool Read(::mojo::interface_control::blink::RunResponseMessageParams::DataView input, ::mojo::interface_control::blink::RunResponseMessageParamsPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::QueryVersion::DataView,
                                         ::mojo::interface_control::blink::QueryVersionPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::QueryVersionPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::QueryVersionPtr* output) { output->reset(); }

  static bool Read(::mojo::interface_control::blink::QueryVersion::DataView input, ::mojo::interface_control::blink::QueryVersionPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::QueryVersionResult::DataView,
                                         ::mojo::interface_control::blink::QueryVersionResultPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::QueryVersionResultPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::QueryVersionResultPtr* output) { output->reset(); }

  static decltype(::mojo::interface_control::blink::QueryVersionResult::version) version(
      const ::mojo::interface_control::blink::QueryVersionResultPtr& input) {
    return input->version;
  }

  static bool Read(::mojo::interface_control::blink::QueryVersionResult::DataView input, ::mojo::interface_control::blink::QueryVersionResultPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::FlushForTesting::DataView,
                                         ::mojo::interface_control::blink::FlushForTestingPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::FlushForTestingPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::FlushForTestingPtr* output) { output->reset(); }

  static bool Read(::mojo::interface_control::blink::FlushForTesting::DataView input, ::mojo::interface_control::blink::FlushForTestingPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::RunOrClosePipeMessageParams::DataView,
                                         ::mojo::interface_control::blink::RunOrClosePipeMessageParamsPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunOrClosePipeMessageParamsPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunOrClosePipeMessageParamsPtr* output) { output->reset(); }

  static const decltype(::mojo::interface_control::blink::RunOrClosePipeMessageParams::input)& input(
      const ::mojo::interface_control::blink::RunOrClosePipeMessageParamsPtr& input) {
    return input->input;
  }

  static bool Read(::mojo::interface_control::blink::RunOrClosePipeMessageParams::DataView input, ::mojo::interface_control::blink::RunOrClosePipeMessageParamsPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::RequireVersion::DataView,
                                         ::mojo::interface_control::blink::RequireVersionPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RequireVersionPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RequireVersionPtr* output) { output->reset(); }

  static decltype(::mojo::interface_control::blink::RequireVersion::version) version(
      const ::mojo::interface_control::blink::RequireVersionPtr& input) {
    return input->version;
  }

  static bool Read(::mojo::interface_control::blink::RequireVersion::DataView input, ::mojo::interface_control::blink::RequireVersionPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::EnableIdleTracking::DataView,
                                         ::mojo::interface_control::blink::EnableIdleTrackingPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::EnableIdleTrackingPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::EnableIdleTrackingPtr* output) { output->reset(); }

  static decltype(::mojo::interface_control::blink::EnableIdleTracking::timeout_in_microseconds) timeout_in_microseconds(
      const ::mojo::interface_control::blink::EnableIdleTrackingPtr& input) {
    return input->timeout_in_microseconds;
  }

  static bool Read(::mojo::interface_control::blink::EnableIdleTracking::DataView input, ::mojo::interface_control::blink::EnableIdleTrackingPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::MessageAck::DataView,
                                         ::mojo::interface_control::blink::MessageAckPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::MessageAckPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::MessageAckPtr* output) { output->reset(); }

  static bool Read(::mojo::interface_control::blink::MessageAck::DataView input, ::mojo::interface_control::blink::MessageAckPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::interface_control::blink::NotifyIdle::DataView,
                                         ::mojo::interface_control::blink::NotifyIdlePtr> {
  static bool IsNull(const ::mojo::interface_control::blink::NotifyIdlePtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::NotifyIdlePtr* output) { output->reset(); }

  static bool Read(::mojo::interface_control::blink::NotifyIdle::DataView input, ::mojo::interface_control::blink::NotifyIdlePtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) UnionTraits<::mojo::interface_control::blink::RunInput::DataView,
                                        ::mojo::interface_control::blink::RunInputPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunInputPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunInputPtr* output) { output->reset(); }

  static ::mojo::interface_control::blink::RunInput::Tag GetTag(const ::mojo::interface_control::blink::RunInputPtr& input) {
    return input->which();
  }

  static const ::mojo::interface_control::blink::QueryVersionPtr& query_version(const ::mojo::interface_control::blink::RunInputPtr& input) {
    return input->get_query_version();
  }

  static const ::mojo::interface_control::blink::FlushForTestingPtr& flush_for_testing(const ::mojo::interface_control::blink::RunInputPtr& input) {
    return input->get_flush_for_testing();
  }

  static bool Read(::mojo::interface_control::blink::RunInput::DataView input, ::mojo::interface_control::blink::RunInputPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) UnionTraits<::mojo::interface_control::blink::RunOutput::DataView,
                                        ::mojo::interface_control::blink::RunOutputPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunOutputPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunOutputPtr* output) { output->reset(); }

  static ::mojo::interface_control::blink::RunOutput::Tag GetTag(const ::mojo::interface_control::blink::RunOutputPtr& input) {
    return input->which();
  }

  static const ::mojo::interface_control::blink::QueryVersionResultPtr& query_version_result(const ::mojo::interface_control::blink::RunOutputPtr& input) {
    return input->get_query_version_result();
  }

  static bool Read(::mojo::interface_control::blink::RunOutput::DataView input, ::mojo::interface_control::blink::RunOutputPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) UnionTraits<::mojo::interface_control::blink::RunOrClosePipeInput::DataView,
                                        ::mojo::interface_control::blink::RunOrClosePipeInputPtr> {
  static bool IsNull(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) { return !input; }
  static void SetToNull(::mojo::interface_control::blink::RunOrClosePipeInputPtr* output) { output->reset(); }

  static ::mojo::interface_control::blink::RunOrClosePipeInput::Tag GetTag(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) {
    return input->which();
  }

  static const ::mojo::interface_control::blink::RequireVersionPtr& require_version(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_require_version();
  }

  static const ::mojo::interface_control::blink::EnableIdleTrackingPtr& enable_idle_tracking(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_enable_idle_tracking();
  }

  static const ::mojo::interface_control::blink::MessageAckPtr& message_ack(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_message_ack();
  }

  static const ::mojo::interface_control::blink::NotifyIdlePtr& notify_idle(const ::mojo::interface_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_notify_idle();
  }

  static bool Read(::mojo::interface_control::blink::RunOrClosePipeInput::DataView input, ::mojo::interface_control::blink::RunOrClosePipeInputPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTc3MCwgImJlZ2luIjogMTc1OCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wuUXVlcnlWZXJz
aW9uIn19LCB7ImVuZCI6IDYzNzEsICJiZWdpbiI6IDYzNTMsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlF1ZXJ5VmVyc2lv
blJlc3VsdCJ9fSwgeyJlbmQiOiAxMDE2NCwgImJlZ2luIjogMTAxNTcsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlF1ZXJ5
VmVyc2lvblJlc3VsdC52ZXJzaW9uIn19LCB7ImVuZCI6IDExMjc4LCAiYmVnaW4iOiAxMTI2Mywg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNl
X2NvbnRyb2wuRmx1c2hGb3JUZXN0aW5nIn19LCB7ImVuZCI6IDE1OTUzLCAiYmVnaW4iOiAxNTkz
OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJm
YWNlX2NvbnRyb2wuUmVxdWlyZVZlcnNpb24ifX0sIHsiZW5kIjogMTk2NDYsICJiZWdpbiI6IDE5
NjM5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRl
cmZhY2VfY29udHJvbC5SZXF1aXJlVmVyc2lvbi52ZXJzaW9uIn19LCB7ImVuZCI6IDIwNzUwLCAi
YmVnaW4iOiAyMDczMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8uaW50ZXJmYWNlX2NvbnRyb2wuRW5hYmxlSWRsZVRyYWNraW5nIn19LCB7ImVuZCI6IDI0
NTg5LCAiYmVnaW4iOiAyNDU2NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wuRW5hYmxlSWRsZVRyYWNraW5nLnRpbWVvdXRf
aW5fbWljcm9zZWNvbmRzIn19LCB7ImVuZCI6IDI1NjkzLCAiYmVnaW4iOiAyNTY4MywgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRy
b2wuTWVzc2FnZUFjayJ9fSwgeyJlbmQiOiAzMDIyNCwgImJlZ2luIjogMzAyMTQsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9s
Lk5vdGlmeUlkbGUifX0sIHsiZW5kIjogMzQ3NTEsICJiZWdpbiI6IDM0NzQzLCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5S
dW5JbnB1dCJ9fSwgeyJlbmQiOiAzNjc1OCwgImJlZ2luIjogMzY3NDIsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bklu
cHV0LnF1ZXJ5X3ZlcnNpb24ifX0sIHsiZW5kIjogMzY5MTIsICJiZWdpbiI6IDM2ODk1LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29u
dHJvbC5SdW5JbnB1dC5xdWVyeV92ZXJzaW9uIn19LCB7ImVuZCI6IDM3MDk2LCAiYmVnaW4iOiAz
NzA3OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50
ZXJmYWNlX2NvbnRyb2wuUnVuSW5wdXQucXVlcnlfdmVyc2lvbiJ9fSwgeyJlbmQiOiAzNzIzNiwg
ImJlZ2luIjogMzcyMTYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bklucHV0LmZsdXNoX2Zvcl90ZXN0aW5nIn19LCB7
ImVuZCI6IDM3NDA1LCAiYmVnaW4iOiAzNzM4NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wuUnVuSW5wdXQuZmx1c2hfZm9y
X3Rlc3RpbmcifX0sIHsiZW5kIjogMzc2MDUsICJiZWdpbiI6IDM3NTg0LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5J
bnB1dC5mbHVzaF9mb3JfdGVzdGluZyJ9fSwgeyJlbmQiOiAzODU2NiwgImJlZ2luIjogMzg1NTcs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFj
ZV9jb250cm9sLlJ1bk91dHB1dCJ9fSwgeyJlbmQiOiA0MDM2NCwgImJlZ2luIjogNDAzNDEsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9j
b250cm9sLlJ1bk91dHB1dC5xdWVyeV92ZXJzaW9uX3Jlc3VsdCJ9fSwgeyJlbmQiOiA0MDU0Niwg
ImJlZ2luIjogNDA1MjIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk91dHB1dC5xdWVyeV92ZXJzaW9uX3Jlc3VsdCJ9
fSwgeyJlbmQiOiA0MDc1OSwgImJlZ2luIjogNDA3MzUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk91dHB1dC5xdWVy
eV92ZXJzaW9uX3Jlc3VsdCJ9fSwgeyJlbmQiOiA0MTcxOCwgImJlZ2luIjogNDE2OTksICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250
cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQifX0sIHsiZW5kIjogNDQ1MDQsICJiZWdpbiI6IDQ0NDg2
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZh
Y2VfY29udHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LnJlcXVpcmVfdmVyc2lvbiJ9fSwgeyJlbmQi
OiA0NDY3NywgImJlZ2luIjogNDQ2NTgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQucmVx
dWlyZV92ZXJzaW9uIn19LCB7ImVuZCI6IDQ0ODgwLCAiYmVnaW4iOiA0NDg2MSwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wu
UnVuT3JDbG9zZVBpcGVJbnB1dC5yZXF1aXJlX3ZlcnNpb24ifX0sIHsiZW5kIjogNDUwNDEsICJi
ZWdpbiI6IDQ1MDE4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LmVuYWJsZV9pZGxlX3Ry
YWNraW5nIn19LCB7ImVuZCI6IDQ1MjMzLCAiYmVnaW4iOiA0NTIwOSwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wuUnVuT3JD
bG9zZVBpcGVJbnB1dC5lbmFibGVfaWRsZV90cmFja2luZyJ9fSwgeyJlbmQiOiA0NTQ1NiwgImJl
Z2luIjogNDU0MzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQuZW5hYmxlX2lkbGVfdHJh
Y2tpbmcifX0sIHsiZW5kIjogNDU2MDgsICJiZWdpbiI6IDQ1NTk0LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5PckNs
b3NlUGlwZUlucHV0Lm1lc3NhZ2VfYWNrIn19LCB7ImVuZCI6IDQ1NzY1LCAiYmVnaW4iOiA0NTc1
MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJm
YWNlX2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5tZXNzYWdlX2FjayJ9fSwgeyJlbmQiOiA0
NTk1MiwgImJlZ2luIjogNDU5MzcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQubWVzc2Fn
ZV9hY2sifX0sIHsiZW5kIjogNDYwODcsICJiZWdpbiI6IDQ2MDczLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5PckNs
b3NlUGlwZUlucHV0Lm5vdGlmeV9pZGxlIn19LCB7ImVuZCI6IDQ2MjQ0LCAiYmVnaW4iOiA0NjIy
OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJm
YWNlX2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5ub3RpZnlfaWRsZSJ9fSwgeyJlbmQiOiA0
NjQzMSwgImJlZ2luIjogNDY0MTYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLmludGVyZmFjZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQubm90aWZ5
X2lkbGUifX0sIHsiZW5kIjogNDc0OTMsICJiZWdpbiI6IDQ3NDc3LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5NZXNz
YWdlUGFyYW1zIn19LCB7ImVuZCI6IDUxMjM2LCAiYmVnaW4iOiA1MTIzMSwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8uaW50ZXJmYWNlX2NvbnRyb2wuUnVu
TWVzc2FnZVBhcmFtcy5pbnB1dCJ9fSwgeyJlbmQiOiA1MjQwNiwgImJlZ2luIjogNTIzODIsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLmludGVyZmFjZV9j
b250cm9sLlJ1blJlc3BvbnNlTWVzc2FnZVBhcmFtcyJ9fSwgeyJlbmQiOiA1NjMyMCwgImJlZ2lu
IjogNTYzMTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LmludGVyZmFjZV9jb250cm9sLlJ1blJlc3BvbnNlTWVzc2FnZVBhcmFtcy5vdXRwdXQifX0sIHsi
ZW5kIjogNTc1MzksICJiZWdpbiI6IDU3NTEyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5PckNsb3NlUGlwZU1lc3Nh
Z2VQYXJhbXMifX0sIHsiZW5kIjogNjE1NzksICJiZWdpbiI6IDYxNTc0LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5pbnRlcmZhY2VfY29udHJvbC5SdW5P
ckNsb3NlUGlwZU1lc3NhZ2VQYXJhbXMuaW5wdXQifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/