// mojo/public/interfaces/bindings/pipe_control_messages.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.




/**
 * @const { !number }
 */
export const RUN_OR_CLOSE_PIPE_MESSAGE_ID = 0xFFFFFFFE;



/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RunOrClosePipeMessageParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DisconnectReasonSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PeerAssociatedEndpointClosedEventSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PauseUntilFlushCompletesSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FlushAsyncSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const RunOrClosePipeInputSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    RunOrClosePipeMessageParamsSpec.$,
    'RunOrClosePipeMessageParams',
    [
      mojo.internal.StructField(
        'input', 0,
        0,
        RunOrClosePipeInputSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const RunOrClosePipeMessageParams = class {
  constructor() {
    /** @type { !RunOrClosePipeInput } */
    this.input;
  }
};



mojo.internal.Struct(
    DisconnectReasonSpec.$,
    'DisconnectReason',
    [
      mojo.internal.StructField(
        'customReason', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'description', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const DisconnectReason = class {
  constructor() {
    /** @type { !number } */
    this.customReason;
    /** @type { !string } */
    this.description;
  }
};



mojo.internal.Struct(
    PeerAssociatedEndpointClosedEventSpec.$,
    'PeerAssociatedEndpointClosedEvent',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'disconnectReason', 8,
        0,
        DisconnectReasonSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const PeerAssociatedEndpointClosedEvent = class {
  constructor() {
    /** @type { !number } */
    this.id;
    /** @type { (DisconnectReason|undefined) } */
    this.disconnectReason;
  }
};



mojo.internal.Struct(
    PauseUntilFlushCompletesSpec.$,
    'PauseUntilFlushCompletes',
    [
      mojo.internal.StructField(
        'flushPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PauseUntilFlushCompletes = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.flushPipe;
  }
};



mojo.internal.Struct(
    FlushAsyncSpec.$,
    'FlushAsync',
    [
      mojo.internal.StructField(
        'flusherPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const FlushAsync = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.flusherPipe;
  }
};

mojo.internal.Union(
    RunOrClosePipeInputSpec.$, 'RunOrClosePipeInput',
    {
      'peerAssociatedEndpointClosedEvent': {
        'ordinal': 0,
        'type': PeerAssociatedEndpointClosedEventSpec.$,
      },
      'pauseUntilFlushCompletes': {
        'ordinal': 1,
        'type': PauseUntilFlushCompletesSpec.$,
      },
      'flushAsync': {
        'ordinal': 2,
        'type': FlushAsyncSpec.$,
      },
    });

/**
 * @typedef { {
 *   peerAssociatedEndpointClosedEvent: (!PeerAssociatedEndpointClosedEvent|undefined),
 *   pauseUntilFlushCompletes: (!PauseUntilFlushCompletes|undefined),
 *   flushAsync: (!FlushAsync|undefined),
 * } }
 */
export const RunOrClosePipeInput = {};
