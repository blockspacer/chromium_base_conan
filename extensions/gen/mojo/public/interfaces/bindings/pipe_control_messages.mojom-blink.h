// mojo/public/interfaces/bindings/pipe_control_messages.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/pipe_control_messages.mojom-shared.h"
#include "mojo/public/interfaces/bindings/pipe_control_messages.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "base/component_export.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace pipe_control {
namespace blink {






// @generated_from: mojo.pipe_control.DisconnectReason
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) DisconnectReason {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DisconnectReason, T>::value>;
  using DataView = DisconnectReasonDataView;
  using Data_ = internal::DisconnectReason_Data;

  template <typename... Args>
  static DisconnectReasonPtr New(Args&&... args) {
    return DisconnectReasonPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DisconnectReasonPtr From(const U& u) {
    return mojo::TypeConverter<DisconnectReasonPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DisconnectReason>::Convert(*this);
  }


  DisconnectReason();

  DisconnectReason(
      uint32_t custom_reason,
      const WTF::String& description);

  ~DisconnectReason();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DisconnectReasonPtr>
  DisconnectReasonPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DisconnectReason::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DisconnectReason::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DisconnectReason_UnserializedMessageContext<
            UserType, DisconnectReason::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<DisconnectReason::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return DisconnectReason::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DisconnectReason_UnserializedMessageContext<
            UserType, DisconnectReason::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DisconnectReason::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.pipe_control.DisconnectReason.custom_reason
  uint32_t custom_reason;
  
// @generated_from: mojo.pipe_control.DisconnectReason.description
  WTF::String description;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DisconnectReason::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








// @generated_from: mojo.pipe_control.RunOrClosePipeInput
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunOrClosePipeInput {
 public:
  using DataView = RunOrClosePipeInputDataView;
  using Data_ = internal::RunOrClosePipeInput_Data;
  using Tag = Data_::RunOrClosePipeInput_Tag;

  static RunOrClosePipeInputPtr New() {
    return RunOrClosePipeInputPtr(base::in_place);
  }
  // Construct an instance holding |peer_associated_endpoint_closed_event|.
  static RunOrClosePipeInputPtr
  NewPeerAssociatedEndpointClosedEvent(
      PeerAssociatedEndpointClosedEventPtr peer_associated_endpoint_closed_event) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_peer_associated_endpoint_closed_event(std::move(peer_associated_endpoint_closed_event));
    return result;
  }
  // Construct an instance holding |pause_until_flush_completes|.
  static RunOrClosePipeInputPtr
  NewPauseUntilFlushCompletes(
      PauseUntilFlushCompletesPtr pause_until_flush_completes) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_pause_until_flush_completes(std::move(pause_until_flush_completes));
    return result;
  }
  // Construct an instance holding |flush_async|.
  static RunOrClosePipeInputPtr
  NewFlushAsync(
      FlushAsyncPtr flush_async) {
    auto result = RunOrClosePipeInputPtr(base::in_place);
    result->set_flush_async(std::move(flush_async));
    return result;
  }

  template <typename U>
  static RunOrClosePipeInputPtr From(const U& u) {
    return mojo::TypeConverter<RunOrClosePipeInputPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOrClosePipeInput>::Convert(*this);
  }

  RunOrClosePipeInput();
  ~RunOrClosePipeInput();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = RunOrClosePipeInputPtr>
  RunOrClosePipeInputPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOrClosePipeInput>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, RunOrClosePipeInput>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.peer_associated_endpoint_closed_event
  bool is_peer_associated_endpoint_closed_event() const { return tag_ == Tag::PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT; }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.peer_associated_endpoint_closed_event
  PeerAssociatedEndpointClosedEventPtr& get_peer_associated_endpoint_closed_event() const {
    DCHECK(tag_ == Tag::PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT);
    return *(data_.peer_associated_endpoint_closed_event);
  }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.peer_associated_endpoint_closed_event
  void set_peer_associated_endpoint_closed_event(
      PeerAssociatedEndpointClosedEventPtr peer_associated_endpoint_closed_event);
  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.pause_until_flush_completes
  bool is_pause_until_flush_completes() const { return tag_ == Tag::PAUSE_UNTIL_FLUSH_COMPLETES; }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.pause_until_flush_completes
  PauseUntilFlushCompletesPtr& get_pause_until_flush_completes() const {
    DCHECK(tag_ == Tag::PAUSE_UNTIL_FLUSH_COMPLETES);
    return *(data_.pause_until_flush_completes);
  }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.pause_until_flush_completes
  void set_pause_until_flush_completes(
      PauseUntilFlushCompletesPtr pause_until_flush_completes);
  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.flush_async
  bool is_flush_async() const { return tag_ == Tag::FLUSH_ASYNC; }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.flush_async
  FlushAsyncPtr& get_flush_async() const {
    DCHECK(tag_ == Tag::FLUSH_ASYNC);
    return *(data_.flush_async);
  }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.flush_async
  void set_flush_async(
      FlushAsyncPtr flush_async);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunOrClosePipeInput::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<RunOrClosePipeInput::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    PeerAssociatedEndpointClosedEventPtr* peer_associated_endpoint_closed_event;
    PauseUntilFlushCompletesPtr* pause_until_flush_completes;
    FlushAsyncPtr* flush_async;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: mojo.pipe_control.RunOrClosePipeMessageParams
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) RunOrClosePipeMessageParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<RunOrClosePipeMessageParams, T>::value>;
  using DataView = RunOrClosePipeMessageParamsDataView;
  using Data_ = internal::RunOrClosePipeMessageParams_Data;

  template <typename... Args>
  static RunOrClosePipeMessageParamsPtr New(Args&&... args) {
    return RunOrClosePipeMessageParamsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static RunOrClosePipeMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunOrClosePipeMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOrClosePipeMessageParams>::Convert(*this);
  }


  RunOrClosePipeMessageParams();

  explicit RunOrClosePipeMessageParams(
      RunOrClosePipeInputPtr input);

  ~RunOrClosePipeMessageParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = RunOrClosePipeMessageParamsPtr>
  RunOrClosePipeMessageParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        RunOrClosePipeMessageParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::RunOrClosePipeMessageParams_UnserializedMessageContext<
            UserType, RunOrClosePipeMessageParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<RunOrClosePipeMessageParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return RunOrClosePipeMessageParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::RunOrClosePipeMessageParams_UnserializedMessageContext<
            UserType, RunOrClosePipeMessageParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<RunOrClosePipeMessageParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.pipe_control.RunOrClosePipeMessageParams.input
  RunOrClosePipeInputPtr input;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(RunOrClosePipeMessageParams);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.pipe_control.PeerAssociatedEndpointClosedEvent
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) PeerAssociatedEndpointClosedEvent {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PeerAssociatedEndpointClosedEvent, T>::value>;
  using DataView = PeerAssociatedEndpointClosedEventDataView;
  using Data_ = internal::PeerAssociatedEndpointClosedEvent_Data;

  template <typename... Args>
  static PeerAssociatedEndpointClosedEventPtr New(Args&&... args) {
    return PeerAssociatedEndpointClosedEventPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PeerAssociatedEndpointClosedEventPtr From(const U& u) {
    return mojo::TypeConverter<PeerAssociatedEndpointClosedEventPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PeerAssociatedEndpointClosedEvent>::Convert(*this);
  }


  PeerAssociatedEndpointClosedEvent();

  PeerAssociatedEndpointClosedEvent(
      uint32_t id,
      DisconnectReasonPtr disconnect_reason);

  ~PeerAssociatedEndpointClosedEvent();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PeerAssociatedEndpointClosedEventPtr>
  PeerAssociatedEndpointClosedEventPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PeerAssociatedEndpointClosedEvent::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PeerAssociatedEndpointClosedEvent::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PeerAssociatedEndpointClosedEvent_UnserializedMessageContext<
            UserType, PeerAssociatedEndpointClosedEvent::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PeerAssociatedEndpointClosedEvent::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PeerAssociatedEndpointClosedEvent::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PeerAssociatedEndpointClosedEvent_UnserializedMessageContext<
            UserType, PeerAssociatedEndpointClosedEvent::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PeerAssociatedEndpointClosedEvent::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.pipe_control.PeerAssociatedEndpointClosedEvent.id
  uint32_t id;
  
// @generated_from: mojo.pipe_control.PeerAssociatedEndpointClosedEvent.disconnect_reason
  DisconnectReasonPtr disconnect_reason;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(PeerAssociatedEndpointClosedEvent);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.pipe_control.PauseUntilFlushCompletes
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) PauseUntilFlushCompletes {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PauseUntilFlushCompletes, T>::value>;
  using DataView = PauseUntilFlushCompletesDataView;
  using Data_ = internal::PauseUntilFlushCompletes_Data;

  template <typename... Args>
  static PauseUntilFlushCompletesPtr New(Args&&... args) {
    return PauseUntilFlushCompletesPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PauseUntilFlushCompletesPtr From(const U& u) {
    return mojo::TypeConverter<PauseUntilFlushCompletesPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PauseUntilFlushCompletes>::Convert(*this);
  }


  PauseUntilFlushCompletes();

  explicit PauseUntilFlushCompletes(
      ::mojo::ScopedMessagePipeHandle flush_pipe);

  ~PauseUntilFlushCompletes();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PauseUntilFlushCompletesPtr>
  PauseUntilFlushCompletesPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PauseUntilFlushCompletes::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PauseUntilFlushCompletes_UnserializedMessageContext<
            UserType, PauseUntilFlushCompletes::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PauseUntilFlushCompletes::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PauseUntilFlushCompletes::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PauseUntilFlushCompletes_UnserializedMessageContext<
            UserType, PauseUntilFlushCompletes::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PauseUntilFlushCompletes::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.pipe_control.PauseUntilFlushCompletes.flush_pipe
  ::mojo::ScopedMessagePipeHandle flush_pipe;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(PauseUntilFlushCompletes);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.pipe_control.FlushAsync
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) FlushAsync {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FlushAsync, T>::value>;
  using DataView = FlushAsyncDataView;
  using Data_ = internal::FlushAsync_Data;

  template <typename... Args>
  static FlushAsyncPtr New(Args&&... args) {
    return FlushAsyncPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FlushAsyncPtr From(const U& u) {
    return mojo::TypeConverter<FlushAsyncPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlushAsync>::Convert(*this);
  }


  FlushAsync();

  explicit FlushAsync(
      ::mojo::ScopedMessagePipeHandle flusher_pipe);

  ~FlushAsync();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FlushAsyncPtr>
  FlushAsyncPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FlushAsync::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FlushAsync_UnserializedMessageContext<
            UserType, FlushAsync::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<FlushAsync::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return FlushAsync::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FlushAsync_UnserializedMessageContext<
            UserType, FlushAsync::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FlushAsync::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.pipe_control.FlushAsync.flusher_pipe
  ::mojo::ScopedMessagePipeHandle flusher_pipe;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(FlushAsync);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FlushAsync::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
RunOrClosePipeInputPtr RunOrClosePipeInput::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT:
      rv->set_peer_associated_endpoint_closed_event(mojo::Clone(*data_.peer_associated_endpoint_closed_event));
      break;
    case Tag::PAUSE_UNTIL_FLUSH_COMPLETES:
      rv->set_pause_until_flush_completes(mojo::Clone(*data_.pause_until_flush_completes));
      break;
    case Tag::FLUSH_ASYNC:
      rv->set_flush_async(mojo::Clone(*data_.flush_async));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, RunOrClosePipeInput>::value>::type*>
bool RunOrClosePipeInput::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT:
      return mojo::Equals(*(data_.peer_associated_endpoint_closed_event), *(other.data_.peer_associated_endpoint_closed_event));
    case Tag::PAUSE_UNTIL_FLUSH_COMPLETES:
      return mojo::Equals(*(data_.pause_until_flush_completes), *(other.data_.pause_until_flush_completes));
    case Tag::FLUSH_ASYNC:
      return mojo::Equals(*(data_.flush_async), *(other.data_.flush_async));
  }

  return false;
}
template <typename StructPtrType>
RunOrClosePipeMessageParamsPtr RunOrClosePipeMessageParams::Clone() const {
  return New(
      mojo::Clone(input)
  );
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>*>
bool RunOrClosePipeMessageParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->input, other_struct.input))
    return false;
  return true;
}

template <typename T, RunOrClosePipeMessageParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.input < rhs.input)
    return true;
  if (rhs.input < lhs.input)
    return false;
  return false;
}
template <typename StructPtrType>
DisconnectReasonPtr DisconnectReason::Clone() const {
  return New(
      mojo::Clone(custom_reason),
      mojo::Clone(description)
  );
}

template <typename T, DisconnectReason::EnableIfSame<T>*>
bool DisconnectReason::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->custom_reason, other_struct.custom_reason))
    return false;
  if (!mojo::Equals(this->description, other_struct.description))
    return false;
  return true;
}

template <typename T, DisconnectReason::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.custom_reason < rhs.custom_reason)
    return true;
  if (rhs.custom_reason < lhs.custom_reason)
    return false;
  if (lhs.description < rhs.description)
    return true;
  if (rhs.description < lhs.description)
    return false;
  return false;
}
template <typename StructPtrType>
PeerAssociatedEndpointClosedEventPtr PeerAssociatedEndpointClosedEvent::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(disconnect_reason)
  );
}

template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>*>
bool PeerAssociatedEndpointClosedEvent::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->disconnect_reason, other_struct.disconnect_reason))
    return false;
  return true;
}

template <typename T, PeerAssociatedEndpointClosedEvent::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.disconnect_reason < rhs.disconnect_reason)
    return true;
  if (rhs.disconnect_reason < lhs.disconnect_reason)
    return false;
  return false;
}
template <typename StructPtrType>
PauseUntilFlushCompletesPtr PauseUntilFlushCompletes::Clone() const {
  return New(
      mojo::Clone(flush_pipe)
  );
}

template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>*>
bool PauseUntilFlushCompletes::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->flush_pipe, other_struct.flush_pipe))
    return false;
  return true;
}

template <typename T, PauseUntilFlushCompletes::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.flush_pipe < rhs.flush_pipe)
    return true;
  if (rhs.flush_pipe < lhs.flush_pipe)
    return false;
  return false;
}
template <typename StructPtrType>
FlushAsyncPtr FlushAsync::Clone() const {
  return New(
      mojo::Clone(flusher_pipe)
  );
}

template <typename T, FlushAsync::EnableIfSame<T>*>
bool FlushAsync::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->flusher_pipe, other_struct.flusher_pipe))
    return false;
  return true;
}

template <typename T, FlushAsync::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.flusher_pipe < rhs.flusher_pipe)
    return true;
  if (rhs.flusher_pipe < lhs.flusher_pipe)
    return false;
  return false;
}


}  // namespace blink
}  // namespace pipe_control
}  // namespace mojo

namespace mojo {


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::pipe_control::blink::RunOrClosePipeMessageParams::DataView,
                                         ::mojo::pipe_control::blink::RunOrClosePipeMessageParamsPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::RunOrClosePipeMessageParamsPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::RunOrClosePipeMessageParamsPtr* output) { output->reset(); }

  static  decltype(::mojo::pipe_control::blink::RunOrClosePipeMessageParams::input)& input(
       ::mojo::pipe_control::blink::RunOrClosePipeMessageParamsPtr& input) {
    return input->input;
  }

  static bool Read(::mojo::pipe_control::blink::RunOrClosePipeMessageParams::DataView input, ::mojo::pipe_control::blink::RunOrClosePipeMessageParamsPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::pipe_control::blink::DisconnectReason::DataView,
                                         ::mojo::pipe_control::blink::DisconnectReasonPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::DisconnectReasonPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::DisconnectReasonPtr* output) { output->reset(); }

  static decltype(::mojo::pipe_control::blink::DisconnectReason::custom_reason) custom_reason(
      const ::mojo::pipe_control::blink::DisconnectReasonPtr& input) {
    return input->custom_reason;
  }

  static const decltype(::mojo::pipe_control::blink::DisconnectReason::description)& description(
      const ::mojo::pipe_control::blink::DisconnectReasonPtr& input) {
    return input->description;
  }

  static bool Read(::mojo::pipe_control::blink::DisconnectReason::DataView input, ::mojo::pipe_control::blink::DisconnectReasonPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEvent::DataView,
                                         ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr* output) { output->reset(); }

  static decltype(::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEvent::id) id(
      const ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr& input) {
    return input->id;
  }

  static const decltype(::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEvent::disconnect_reason)& disconnect_reason(
      const ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr& input) {
    return input->disconnect_reason;
  }

  static bool Read(::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEvent::DataView input, ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::pipe_control::blink::PauseUntilFlushCompletes::DataView,
                                         ::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr* output) { output->reset(); }

  static  decltype(::mojo::pipe_control::blink::PauseUntilFlushCompletes::flush_pipe)& flush_pipe(
       ::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr& input) {
    return input->flush_pipe;
  }

  static bool Read(::mojo::pipe_control::blink::PauseUntilFlushCompletes::DataView input, ::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) StructTraits<::mojo::pipe_control::blink::FlushAsync::DataView,
                                         ::mojo::pipe_control::blink::FlushAsyncPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::FlushAsyncPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::FlushAsyncPtr* output) { output->reset(); }

  static  decltype(::mojo::pipe_control::blink::FlushAsync::flusher_pipe)& flusher_pipe(
       ::mojo::pipe_control::blink::FlushAsyncPtr& input) {
    return input->flusher_pipe;
  }

  static bool Read(::mojo::pipe_control::blink::FlushAsync::DataView input, ::mojo::pipe_control::blink::FlushAsyncPtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_BLINK) UnionTraits<::mojo::pipe_control::blink::RunOrClosePipeInput::DataView,
                                        ::mojo::pipe_control::blink::RunOrClosePipeInputPtr> {
  static bool IsNull(const ::mojo::pipe_control::blink::RunOrClosePipeInputPtr& input) { return !input; }
  static void SetToNull(::mojo::pipe_control::blink::RunOrClosePipeInputPtr* output) { output->reset(); }

  static ::mojo::pipe_control::blink::RunOrClosePipeInput::Tag GetTag(const ::mojo::pipe_control::blink::RunOrClosePipeInputPtr& input) {
    return input->which();
  }

  static const ::mojo::pipe_control::blink::PeerAssociatedEndpointClosedEventPtr& peer_associated_endpoint_closed_event(const ::mojo::pipe_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_peer_associated_endpoint_closed_event();
  }

  static  ::mojo::pipe_control::blink::PauseUntilFlushCompletesPtr& pause_until_flush_completes( ::mojo::pipe_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_pause_until_flush_completes();
  }

  static  ::mojo::pipe_control::blink::FlushAsyncPtr& flush_async( ::mojo::pipe_control::blink::RunOrClosePipeInputPtr& input) {
    return input->get_flush_async();
  }

  static bool Read(::mojo::pipe_control::blink::RunOrClosePipeInput::DataView input, ::mojo::pipe_control::blink::RunOrClosePipeInputPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTc0MiwgImJlZ2luIjogMTcyNiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250cm9sLkRpc2Nvbm5lY3RSZWFz
b24ifX0sIHsiZW5kIjogNTUyNywgImJlZ2luIjogNTUxNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250cm9sLkRpc2Nvbm5lY3RSZWFzb24u
Y3VzdG9tX3JlYXNvbiJ9fSwgeyJlbmQiOiA1NjI0LCAiYmVnaW4iOiA1NjEzLCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5waXBlX2NvbnRyb2wuRGlzY29u
bmVjdFJlYXNvbi5kZXNjcmlwdGlvbiJ9fSwgeyJlbmQiOiA2NzM2LCAiYmVnaW4iOiA2NzE3LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5waXBlX2NvbnRy
b2wuUnVuT3JDbG9zZVBpcGVJbnB1dCJ9fSwgeyJlbmQiOiA5NDI1LCAiYmVnaW4iOiA5Mzg1LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5waXBlX2NvbnRy
b2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5wZWVyX2Fzc29jaWF0ZWRfZW5kcG9pbnRfY2xvc2VkX2V2
ZW50In19LCB7ImVuZCI6IDk2NzgsICJiZWdpbiI6IDk2MzcsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVfY29udHJvbC5SdW5PckNsb3NlUGlwZUlu
cHV0LnBlZXJfYXNzb2NpYXRlZF9lbmRwb2ludF9jbG9zZWRfZXZlbnQifX0sIHsiZW5kIjogOTk2
NCwgImJlZ2luIjogOTkyMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8ucGlwZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQucGVlcl9hc3NvY2lhdGVk
X2VuZHBvaW50X2Nsb3NlZF9ldmVudCJ9fSwgeyJlbmQiOiAxMDE3NSwgImJlZ2luIjogMTAxNDUs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVfY29u
dHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LnBhdXNlX3VudGlsX2ZsdXNoX2NvbXBsZXRlcyJ9fSwg
eyJlbmQiOiAxMDM4OSwgImJlZ2luIjogMTAzNTgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVfY29udHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LnBh
dXNlX3VudGlsX2ZsdXNoX2NvbXBsZXRlcyJ9fSwgeyJlbmQiOiAxMDYzNSwgImJlZ2luIjogMTA2
MDQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVf
Y29udHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LnBhdXNlX3VudGlsX2ZsdXNoX2NvbXBsZXRlcyJ9
fSwgeyJlbmQiOiAxMDc5NSwgImJlZ2luIjogMTA3ODEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVfY29udHJvbC5SdW5PckNsb3NlUGlwZUlucHV0
LmZsdXNoX2FzeW5jIn19LCB7ImVuZCI6IDEwOTQ3LCAiYmVnaW4iOiAxMDkzMiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250cm9sLlJ1bk9y
Q2xvc2VQaXBlSW5wdXQuZmx1c2hfYXN5bmMifX0sIHsiZW5kIjogMTExMjksICJiZWdpbiI6IDEx
MTE0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby5waXBl
X2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5mbHVzaF9hc3luYyJ9fSwgeyJlbmQiOiAxMjIz
MCwgImJlZ2luIjogMTIyMDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnBpcGVfY29udHJvbC5SdW5PckNsb3NlUGlwZU1lc3NhZ2VQYXJhbXMifX0sIHsi
ZW5kIjogMTYwMTgsICJiZWdpbiI6IDE2MDEzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby5waXBlX2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVNZXNzYWdlUGFy
YW1zLmlucHV0In19LCB7ImVuZCI6IDE3MjU3LCAiYmVnaW4iOiAxNzIyNCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250cm9sLlBlZXJBc3Nv
Y2lhdGVkRW5kcG9pbnRDbG9zZWRFdmVudCJ9fSwgeyJlbmQiOiAyMTQwNywgImJlZ2luIjogMjE0
MDUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVf
Y29udHJvbC5QZWVyQXNzb2NpYXRlZEVuZHBvaW50Q2xvc2VkRXZlbnQuaWQifX0sIHsiZW5kIjog
MjE1NDEsICJiZWdpbiI6IDIxNTI0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby5waXBlX2NvbnRyb2wuUGVlckFzc29jaWF0ZWRFbmRwb2ludENsb3NlZEV2
ZW50LmRpc2Nvbm5lY3RfcmVhc29uIn19LCB7ImVuZCI6IDIyNzkxLCAiYmVnaW4iOiAyMjc2Nywg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250
cm9sLlBhdXNlVW50aWxGbHVzaENvbXBsZXRlcyJ9fSwgeyJlbmQiOiAyNjU0MCwgImJlZ2luIjog
MjY1MzAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBp
cGVfY29udHJvbC5QYXVzZVVudGlsRmx1c2hDb21wbGV0ZXMuZmx1c2hfcGlwZSJ9fSwgeyJlbmQi
OiAyNzcxNywgImJlZ2luIjogMjc3MDcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnBpcGVfY29udHJvbC5GbHVzaEFzeW5jIn19LCB7ImVuZCI6IDMxMTM2
LCAiYmVnaW4iOiAzMTEyNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8ucGlwZV9jb250cm9sLkZsdXNoQXN5bmMuZmx1c2hlcl9waXBlIn19XSwgInR5cGUi
OiAia3l0aGUwIn0=
*/