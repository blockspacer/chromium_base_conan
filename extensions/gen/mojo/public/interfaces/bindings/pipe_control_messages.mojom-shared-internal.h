// mojo/public/interfaces/bindings/pipe_control_messages.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_SHARED_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "base/component_export.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif

namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace mojo {
namespace pipe_control {
namespace internal {
class RunOrClosePipeMessageParams_Data;
class DisconnectReason_Data;
class PeerAssociatedEndpointClosedEvent_Data;
class PauseUntilFlushCompletes_Data;
class FlushAsync_Data;
class RunOrClosePipeInput_Data;

#pragma pack(push, 1)


class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) RunOrClosePipeInput_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  RunOrClosePipeInput_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~RunOrClosePipeInput_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<RunOrClosePipeInput_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class RunOrClosePipeInput_Tag : uint32_t {

    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.peer_associated_endpoint_closed_event
    PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT,
    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.peer_associated_endpoint_closed_event
    kPeerAssociatedEndpointClosedEvent = PEER_ASSOCIATED_ENDPOINT_CLOSED_EVENT,
    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.pause_until_flush_completes
    PAUSE_UNTIL_FLUSH_COMPLETES,
    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.pause_until_flush_completes
    kPauseUntilFlushCompletes = PAUSE_UNTIL_FLUSH_COMPLETES,
    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.flush_async
    FLUSH_ASYNC,
    
// @generated_from: mojo.pipe_control.RunOrClosePipeInput.flush_async
    kFlushAsync = FLUSH_ASYNC,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::PeerAssociatedEndpointClosedEvent_Data> f_peer_associated_endpoint_closed_event;
    mojo::internal::Pointer<internal::PauseUntilFlushCompletes_Data> f_pause_until_flush_completes;
    mojo::internal::Pointer<internal::FlushAsync_Data> f_flush_async;
    uint64_t unknown;
  };

  uint32_t size;
  RunOrClosePipeInput_Tag tag;
  Union_ data;
};
static_assert(sizeof(RunOrClosePipeInput_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(RunOrClosePipeInput_Data)");
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) RunOrClosePipeMessageParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::RunOrClosePipeInput_Data input;

 private:
  friend class mojo::internal::MessageFragment<RunOrClosePipeMessageParams_Data>;

  RunOrClosePipeMessageParams_Data();
  ~RunOrClosePipeMessageParams_Data() = delete;
};
static_assert(sizeof(RunOrClosePipeMessageParams_Data) == 24,
              "Bad sizeof(RunOrClosePipeMessageParams_Data)");
// Used by RunOrClosePipeMessageParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct RunOrClosePipeMessageParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  RunOrClosePipeMessageParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~RunOrClosePipeMessageParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<RunOrClosePipeMessageParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    RunOrClosePipeMessageParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) DisconnectReason_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t custom_reason;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> description;

 private:
  friend class mojo::internal::MessageFragment<DisconnectReason_Data>;

  DisconnectReason_Data();
  ~DisconnectReason_Data() = delete;
};
static_assert(sizeof(DisconnectReason_Data) == 24,
              "Bad sizeof(DisconnectReason_Data)");
// Used by DisconnectReason::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DisconnectReason_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DisconnectReason_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DisconnectReason_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<DisconnectReason_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DisconnectReason_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) PeerAssociatedEndpointClosedEvent_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::DisconnectReason_Data> disconnect_reason;

 private:
  friend class mojo::internal::MessageFragment<PeerAssociatedEndpointClosedEvent_Data>;

  PeerAssociatedEndpointClosedEvent_Data();
  ~PeerAssociatedEndpointClosedEvent_Data() = delete;
};
static_assert(sizeof(PeerAssociatedEndpointClosedEvent_Data) == 24,
              "Bad sizeof(PeerAssociatedEndpointClosedEvent_Data)");
// Used by PeerAssociatedEndpointClosedEvent::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PeerAssociatedEndpointClosedEvent_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PeerAssociatedEndpointClosedEvent_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PeerAssociatedEndpointClosedEvent_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PeerAssociatedEndpointClosedEvent_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PeerAssociatedEndpointClosedEvent_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) PauseUntilFlushCompletes_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data flush_pipe;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PauseUntilFlushCompletes_Data>;

  PauseUntilFlushCompletes_Data();
  ~PauseUntilFlushCompletes_Data() = delete;
};
static_assert(sizeof(PauseUntilFlushCompletes_Data) == 16,
              "Bad sizeof(PauseUntilFlushCompletes_Data)");
// Used by PauseUntilFlushCompletes::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PauseUntilFlushCompletes_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PauseUntilFlushCompletes_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PauseUntilFlushCompletes_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PauseUntilFlushCompletes_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PauseUntilFlushCompletes_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJO_MOJOM_BINDINGS_SHARED) FlushAsync_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data flusher_pipe;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FlushAsync_Data>;

  FlushAsync_Data();
  ~FlushAsync_Data() = delete;
};
static_assert(sizeof(FlushAsync_Data) == 16,
              "Bad sizeof(FlushAsync_Data)");
// Used by FlushAsync::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FlushAsync_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FlushAsync_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FlushAsync_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FlushAsync_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FlushAsync_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace pipe_control
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_PIPE_CONTROL_MESSAGES_MOJOM_SHARED_INTERNAL_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjM5MCwgImJlZ2luIjogMjM1MywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBl
SW5wdXQucGVlcl9hc3NvY2lhdGVkX2VuZHBvaW50X2Nsb3NlZF9ldmVudCJ9fSwgeyJlbmQiOiAy
NTcxLCAiYmVnaW4iOiAyNTM0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby5waXBlX2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5wZWVyX2Fzc29jaWF0
ZWRfZW5kcG9pbnRfY2xvc2VkX2V2ZW50In19LCB7ImVuZCI6IDI2OTUsICJiZWdpbiI6IDI2Njgs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnBpcGVfY29u
dHJvbC5SdW5PckNsb3NlUGlwZUlucHV0LnBhdXNlX3VudGlsX2ZsdXNoX2NvbXBsZXRlcyJ9fSwg
eyJlbmQiOiAyODQ3LCAiYmVnaW4iOiAyODIwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby5waXBlX2NvbnRyb2wuUnVuT3JDbG9zZVBpcGVJbnB1dC5wYXVz
ZV91bnRpbF9mbHVzaF9jb21wbGV0ZXMifX0sIHsiZW5kIjogMjkzOSwgImJlZ2luIjogMjkyOCwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8ucGlwZV9jb250
cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQuZmx1c2hfYXN5bmMifX0sIHsiZW5kIjogMzA0NSwgImJl
Z2luIjogMzAzNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8ucGlwZV9jb250cm9sLlJ1bk9yQ2xvc2VQaXBlSW5wdXQuZmx1c2hfYXN5bmMifX1dLCAidHlw
ZSI6ICJreXRoZTAifQ==
*/