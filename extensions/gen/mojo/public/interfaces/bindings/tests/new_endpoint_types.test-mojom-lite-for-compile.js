// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserver');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserverReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserverCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserverInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserverRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserverPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetObserverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.WidgetObserver.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.WidgetObserverInterface = class {
  
  /**
   */

  onClick() {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.WidgetObserverInterface }
 */
mojo.test.newEndpointTypes.mojom.WidgetObserverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.WidgetObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.WidgetObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.WidgetObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onClick() {
    this.proxy.sendMessage(
        295399853,
        mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the WidgetObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetObserverReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.WidgetObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.WidgetObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.WidgetObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        295399853,
        mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec.$,
        null,
        impl.onClick.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.WidgetObserver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.WidgetObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.WidgetObserverRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.WidgetObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the WidgetObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetObserverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.WidgetObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onClick =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        295399853,
        mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec.$,
        null,
        this.onClick.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.Widget');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.Widget.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.WidgetInterface = class {
  
  /**
   */

  click() {}
  
  /**
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetObserverRemote } observer
   */

  addObserver(observer) {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.WidgetInterface }
 */
mojo.test.newEndpointTypes.mojom.WidgetRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  click() {
    this.proxy.sendMessage(
        1563767203,
        mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetObserverRemote } observer
   */

  addObserver(
      observer) {
    this.proxy.sendMessage(
        1998895132,
        mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec.$,
        null,
        [
          observer
        ]);
  }
};

/**
 * An object which receives request messages for the Widget
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.WidgetInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.WidgetRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.WidgetRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1563767203,
        mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec.$,
        null,
        impl.click.bind(impl));
    this.helper_internal_.registerHandler(
        1998895132,
        mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec.$,
        null,
        impl.addObserver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.Widget = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.Widget";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.WidgetRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.WidgetRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Widget
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.WidgetRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.click =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1563767203,
        mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec.$,
        null,
        this.click.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addObserver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1998895132,
        mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec.$,
        null,
        this.addObserver.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClient');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClientReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClientCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClientInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClientRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.WidgetClient.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.WidgetClientInterface = class {
  
  /**
   */

  onInitialized() {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.WidgetClientInterface }
 */
mojo.test.newEndpointTypes.mojom.WidgetClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.WidgetClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.WidgetClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.WidgetClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onInitialized() {
    this.proxy.sendMessage(
        181678311,
        mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the WidgetClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetClientReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.WidgetClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.WidgetClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.WidgetClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        181678311,
        mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec.$,
        null,
        impl.onInitialized.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.WidgetClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.WidgetClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.WidgetClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.WidgetClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the WidgetClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.WidgetClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onInitialized =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        181678311,
        mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec.$,
        null,
        this.onInitialized.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactory');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactoryReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactoryCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactoryInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactoryPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.WidgetFactory.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.WidgetFactoryInterface = class {
  
  /**
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver } receiver
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetClientRemote } client
   */

  createWidget(receiver, client) {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.WidgetFactoryInterface }
 */
mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.WidgetFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.WidgetFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.WidgetFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver } receiver
   * @param { !mojo.test.newEndpointTypes.mojom.WidgetClientRemote } client
   */

  createWidget(
      receiver,
      client) {
    this.proxy.sendMessage(
        731996353,
        mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec.$,
        null,
        [
          receiver,
          client
        ]);
  }
};

/**
 * An object which receives request messages for the WidgetFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetFactoryReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.WidgetFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        731996353,
        mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec.$,
        null,
        impl.createWidget.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.WidgetFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.WidgetFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the WidgetFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.WidgetFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createWidget =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        731996353,
        mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec.$,
        null,
        this.createWidget.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.Pinger');
goog.provide('mojo.test.newEndpointTypes.mojom.PingerReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.PingerCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.PingerInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.PingerRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.PingerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.PingerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.Pinger.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.PingerInterface = class {
  
  /**
   * @return {!Promise}
   */

  ping() {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.PingerInterface }
 */
mojo.test.newEndpointTypes.mojom.PingerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.PingerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.PingerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.PingerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        773139529,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec.$,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the Pinger
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.PingerReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.PingerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.PingerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.PingerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.PingerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        773139529,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec.$,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.Pinger = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.Pinger";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.PingerRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.PingerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Pinger
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.PingerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.PingerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.PingerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        773139529,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec.$,
        mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHost');
goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHostReceiver');
goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHostCallbackRouter');
goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHostInterface');
goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote');
goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.newEndpointTypes.mojom.AssociatedPingerHost.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHostInterface = class {
  
  /**
   * @param { !Object } receiver
   * @param { !Object } remote
   */

  addEndpoints(receiver, remote) {}
};

/**
 * @export
 * @implements { mojo.test.newEndpointTypes.mojom.AssociatedPingerHostInterface }
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.newEndpointTypes.mojom.AssociatedPingerHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   * @param { !Object } remote
   */

  addEndpoints(
      receiver,
      remote) {
    this.proxy.sendMessage(
        2009758958,
        mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec.$,
        null,
        [
          receiver,
          remote
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedPingerHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHostReceiver = class {
  /**
   * @param {!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        2009758958,
        mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec.$,
        null,
        impl.addEndpoints.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.new_endpoint_types.mojom.AssociatedPingerHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedPingerHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.newEndpointTypes.mojom.AssociatedPingerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addEndpoints =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2009758958,
        mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec.$,
        null,
        this.addEndpoints.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_ParamsSpec.$,
    'WidgetObserver_OnClick_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.WidgetObserver_OnClick_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.Widget_Click_ParamsSpec.$,
    'Widget_Click_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.newEndpointTypes.mojom.Widget_Click_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.Widget_Click_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.Widget_AddObserver_ParamsSpec.$,
    'Widget_AddObserver_Params',
    [
      mojo.internal.StructField(
        'observer', 0,
        0,
        mojo.internal.InterfaceProxy(mojo.test.newEndpointTypes.mojom.WidgetObserverRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.newEndpointTypes.mojom.Widget_AddObserver_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.Widget_AddObserver_Params = class {
  constructor() {
    /** @export { !mojo.test.newEndpointTypes.mojom.WidgetObserverRemote } */
    this.observer;
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_ParamsSpec.$,
    'WidgetClient_OnInitialized_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.WidgetClient_OnInitialized_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_ParamsSpec.$,
    'WidgetFactory_CreateWidget_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'client', 4,
        0,
        mojo.internal.InterfaceProxy(mojo.test.newEndpointTypes.mojom.WidgetClientRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.WidgetFactory_CreateWidget_Params = class {
  constructor() {
    /** @export { !mojo.test.newEndpointTypes.mojom.WidgetPendingReceiver } */
    this.receiver;
    /** @export { !mojo.test.newEndpointTypes.mojom.WidgetClientRemote } */
    this.client;
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.Pinger_Ping_ParamsSpec.$,
    'Pinger_Ping_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.newEndpointTypes.mojom.Pinger_Ping_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.Pinger_Ping_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParamsSpec.$,
    'Pinger_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParams');

/** @record */
mojo.test.newEndpointTypes.mojom.Pinger_Ping_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_ParamsSpec.$,
    'AssociatedPingerHost_AddEndpoints_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.newEndpointTypes.mojom.PingerPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'remote', 4,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.newEndpointTypes.mojom.PingerRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_Params');

/** @record */
mojo.test.newEndpointTypes.mojom.AssociatedPingerHost_AddEndpoints_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
    /** @export { !Object } */
    this.remote;
  }
};


