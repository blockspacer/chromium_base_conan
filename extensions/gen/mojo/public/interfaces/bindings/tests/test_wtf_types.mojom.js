// mojo/public/interfaces/bindings/tests/test_wtf_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/test_wtf_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');


  var TopLevelEnum = {};
  TopLevelEnum.E0 = 0;
  TopLevelEnum.E1 = 1;
  TopLevelEnum.MIN_VALUE = 0;
  TopLevelEnum.MAX_VALUE = 1;

  TopLevelEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TopLevelEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TopLevelEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TestWTFCodeGeneration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTFCodeGeneration.prototype.initDefaults_ = function() {
    this.str = null;
    this.nullableStr = null;
    this.strs = null;
    this.nullableStrs = null;
    this.arrays = null;
    this.bools = null;
    this.handles = null;
    this.strMap = null;
    this.arrayMap = null;
    this.handleMap = null;
    this.strMaps = null;
  };
  TestWTFCodeGeneration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTFCodeGeneration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 96}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.str
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.nullableStr
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.strs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.nullableStrs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, codec.NullableString, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.arrays
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.ArrayOf(codec.Int32), false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.bools
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 1, codec.PackedBool, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.handles
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 4, codec.Handle, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.strMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, false, codec.String, codec.NullableString, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.arrayMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 64, false, codec.Int32, new codec.ArrayOf(codec.Int32), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.handleMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 72, false, codec.Int32, codec.Handle, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFCodeGeneration.strMaps
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 8, new codec.MapOf(codec.String, codec.NullableString), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTFCodeGeneration.encodedSize = codec.kStructHeaderSize + 88;

  TestWTFCodeGeneration.decode = function(decoder) {
    var packed;
    var val = new TestWTFCodeGeneration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.str =
        decoder.decodeStruct(codec.String);
    val.nullableStr =
        decoder.decodeStruct(codec.NullableString);
    val.strs =
        decoder.decodeArrayPointer(codec.String);
    val.nullableStrs =
        decoder.decodeArrayPointer(codec.NullableString);
    val.arrays =
        decoder.decodeArrayPointer(new codec.ArrayOf(codec.Int32));
    val.bools =
        decoder.decodeArrayPointer(codec.PackedBool);
    val.handles =
        decoder.decodeArrayPointer(codec.Handle);
    val.strMap =
        decoder.decodeMapPointer(codec.String, codec.NullableString);
    val.arrayMap =
        decoder.decodeMapPointer(codec.Int32, new codec.ArrayOf(codec.Int32));
    val.handleMap =
        decoder.decodeMapPointer(codec.Int32, codec.Handle);
    val.strMaps =
        decoder.decodeArrayPointer(new codec.MapOf(codec.String, codec.NullableString));
    return val;
  };

  TestWTFCodeGeneration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTFCodeGeneration.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.str);
    encoder.encodeStruct(codec.NullableString, val.nullableStr);
    encoder.encodeArrayPointer(codec.String, val.strs);
    encoder.encodeArrayPointer(codec.NullableString, val.nullableStrs);
    encoder.encodeArrayPointer(new codec.ArrayOf(codec.Int32), val.arrays);
    encoder.encodeArrayPointer(codec.PackedBool, val.bools);
    encoder.encodeArrayPointer(codec.Handle, val.handles);
    encoder.encodeMapPointer(codec.String, codec.NullableString, val.strMap);
    encoder.encodeMapPointer(codec.Int32, new codec.ArrayOf(codec.Int32), val.arrayMap);
    encoder.encodeMapPointer(codec.Int32, codec.Handle, val.handleMap);
    encoder.encodeArrayPointer(new codec.MapOf(codec.String, codec.NullableString), val.strMaps);
  };
  function TestWTFStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  TestWTFStruct.NestedEnum = {};
  TestWTFStruct.NestedEnum.E0 = 0;
  TestWTFStruct.NestedEnum.E1 = 1;
  TestWTFStruct.NestedEnum.MIN_VALUE = 0;
  TestWTFStruct.NestedEnum.MAX_VALUE = 1;

  TestWTFStruct.NestedEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestWTFStruct.NestedEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestWTFStruct.NestedEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  TestWTFStruct.prototype.initDefaults_ = function() {
    this.str = null;
    this.integer = 0;
  };
  TestWTFStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTFStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFStruct.str
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestWTFStruct.encodedSize = codec.kStructHeaderSize + 16;

  TestWTFStruct.decode = function(decoder) {
    var packed;
    var val = new TestWTFStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.str =
        decoder.decodeStruct(codec.String);
    val.integer =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestWTFStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTFStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.str);
    encoder.encodeStruct(codec.Int32, val.integer);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestWTFStructWrapper(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTFStructWrapper.prototype.initDefaults_ = function() {
    this.nestedStruct = null;
    this.arrayStruct = null;
    this.mapStruct = null;
  };
  TestWTFStructWrapper.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTFStructWrapper.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFStructWrapper.nestedStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestWTFStruct, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFStructWrapper.arrayStruct
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(TestWTFStruct), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTFStructWrapper.mapStruct
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, new codec.PointerTo(TestWTFStruct), new codec.PointerTo(TestWTFStruct), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTFStructWrapper.encodedSize = codec.kStructHeaderSize + 24;

  TestWTFStructWrapper.decode = function(decoder) {
    var packed;
    var val = new TestWTFStructWrapper();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nestedStruct =
        decoder.decodeStructPointer(TestWTFStruct);
    val.arrayStruct =
        decoder.decodeArrayPointer(new codec.PointerTo(TestWTFStruct));
    val.mapStruct =
        decoder.decodeMapPointer(new codec.PointerTo(TestWTFStruct), new codec.PointerTo(TestWTFStruct));
    return val;
  };

  TestWTFStructWrapper.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTFStructWrapper.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestWTFStruct, val.nestedStruct);
    encoder.encodeArrayPointer(new codec.PointerTo(TestWTFStruct), val.arrayStruct);
    encoder.encodeMapPointer(new codec.PointerTo(TestWTFStruct), new codec.PointerTo(TestWTFStruct), val.mapStruct);
  };
  function TestWTF_EchoString_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoString_Params.prototype.initDefaults_ = function() {
    this.str = null;
  };
  TestWTF_EchoString_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoString_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoString_Params.str
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoString_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoString_Params.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoString_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.str =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  TestWTF_EchoString_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoString_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.str);
  };
  function TestWTF_EchoString_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoString_ResponseParams.prototype.initDefaults_ = function() {
    this.str = null;
  };
  TestWTF_EchoString_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoString_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoString_ResponseParams.str
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoString_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoString_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoString_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.str =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  TestWTF_EchoString_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoString_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.str);
  };
  function TestWTF_EchoStringArray_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoStringArray_Params.prototype.initDefaults_ = function() {
    this.arr = null;
  };
  TestWTF_EchoStringArray_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoStringArray_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoStringArray_Params.arr
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.NullableString, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoStringArray_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoStringArray_Params.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoStringArray_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arr =
        decoder.decodeArrayPointer(codec.NullableString);
    return val;
  };

  TestWTF_EchoStringArray_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoStringArray_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.NullableString, val.arr);
  };
  function TestWTF_EchoStringArray_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoStringArray_ResponseParams.prototype.initDefaults_ = function() {
    this.arr = null;
  };
  TestWTF_EchoStringArray_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoStringArray_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoStringArray_ResponseParams.arr
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.NullableString, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoStringArray_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoStringArray_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoStringArray_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arr =
        decoder.decodeArrayPointer(codec.NullableString);
    return val;
  };

  TestWTF_EchoStringArray_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoStringArray_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.NullableString, val.arr);
  };
  function TestWTF_EchoStringMap_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoStringMap_Params.prototype.initDefaults_ = function() {
    this.strMap = null;
  };
  TestWTF_EchoStringMap_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoStringMap_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoStringMap_Params.strMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, true, codec.String, codec.NullableString, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoStringMap_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoStringMap_Params.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoStringMap_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.strMap =
        decoder.decodeMapPointer(codec.String, codec.NullableString);
    return val;
  };

  TestWTF_EchoStringMap_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoStringMap_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, codec.NullableString, val.strMap);
  };
  function TestWTF_EchoStringMap_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestWTF_EchoStringMap_ResponseParams.prototype.initDefaults_ = function() {
    this.strMap = null;
  };
  TestWTF_EchoStringMap_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestWTF_EchoStringMap_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestWTF_EchoStringMap_ResponseParams.strMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, true, codec.String, codec.NullableString, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestWTF_EchoStringMap_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestWTF_EchoStringMap_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestWTF_EchoStringMap_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.strMap =
        decoder.decodeMapPointer(codec.String, codec.NullableString);
    return val;
  };

  TestWTF_EchoStringMap_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestWTF_EchoStringMap_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, codec.NullableString, val.strMap);
  };

  function TestWTFCodeGeneration2(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  TestWTFCodeGeneration2.Tags = {
    str: 0,
    strs: 1,
    strMap: 2,
  };

  TestWTFCodeGeneration2.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  TestWTFCodeGeneration2.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "str",
        "strs",
        "strMap",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a TestWTFCodeGeneration2 member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(TestWTFCodeGeneration2.prototype, "str", {
    get: function() {
      if (this.$tag != TestWTFCodeGeneration2.Tags.str) {
        throw new ReferenceError(
            "TestWTFCodeGeneration2.str is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TestWTFCodeGeneration2.Tags.str;
      this.$data = value;
    }
  });
  Object.defineProperty(TestWTFCodeGeneration2.prototype, "strs", {
    get: function() {
      if (this.$tag != TestWTFCodeGeneration2.Tags.strs) {
        throw new ReferenceError(
            "TestWTFCodeGeneration2.strs is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TestWTFCodeGeneration2.Tags.strs;
      this.$data = value;
    }
  });
  Object.defineProperty(TestWTFCodeGeneration2.prototype, "strMap", {
    get: function() {
      if (this.$tag != TestWTFCodeGeneration2.Tags.strMap) {
        throw new ReferenceError(
            "TestWTFCodeGeneration2.strMap is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TestWTFCodeGeneration2.Tags.strMap;
      this.$data = value;
    }
  });


    TestWTFCodeGeneration2.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case TestWTFCodeGeneration2.Tags.str:
          encoder.encodeStruct(codec.String, val.str);
          break;
        case TestWTFCodeGeneration2.Tags.strs:
          encoder.encodeArrayPointer(codec.String, val.strs);
          break;
        case TestWTFCodeGeneration2.Tags.strMap:
          encoder.encodeMapPointer(codec.String, codec.NullableString, val.strMap);
          break;
      }
      encoder.align();
    };


    TestWTFCodeGeneration2.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new TestWTFCodeGeneration2();
      var tag = decoder.readUint32();
      switch (tag) {
        case TestWTFCodeGeneration2.Tags.str:
          result.str = decoder.decodeStruct(codec.String);
          break;
        case TestWTFCodeGeneration2.Tags.strs:
          result.strs = decoder.decodeArrayPointer(codec.String);
          break;
        case TestWTFCodeGeneration2.Tags.strMap:
          result.strMap = decoder.decodeMapPointer(codec.String, codec.NullableString);
          break;
      }
      decoder.align();

      return result;
    };


    TestWTFCodeGeneration2.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case TestWTFCodeGeneration2.Tags.str:
          

    // validate TestWTFCodeGeneration2.str
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case TestWTFCodeGeneration2.Tags.strs:
          

    // validate TestWTFCodeGeneration2.strs
    err = messageValidator.validateArrayPointer(data_offset, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case TestWTFCodeGeneration2.Tags.strMap:
          

    // validate TestWTFCodeGeneration2.strMap
    err = messageValidator.validateMapPointer(data_offset, false, codec.String, codec.NullableString, true);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  TestWTFCodeGeneration2.encodedSize = 16;
  var kTestWTF_EchoString_Name = 1213665199;
  var kTestWTF_EchoStringArray_Name = 1249773810;
  var kTestWTF_EchoStringMap_Name = 787768058;

  function TestWTFPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestWTF,
                                                   handleOrPtrInfo);
  }

  function TestWTFAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestWTF, associatedInterfacePtrInfo);
  }

  TestWTFAssociatedPtr.prototype =
      Object.create(TestWTFPtr.prototype);
  TestWTFAssociatedPtr.prototype.constructor =
      TestWTFAssociatedPtr;

  function TestWTFProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestWTFPtr.prototype.echoString = function() {
    return TestWTFProxy.prototype.echoString
        .apply(this.ptr.getProxy(), arguments);
  };

  TestWTFProxy.prototype.echoString = function(str) {
    var params_ = new TestWTF_EchoString_Params();
    params_.str = str;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestWTF_EchoString_Name,
          codec.align(TestWTF_EchoString_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestWTF_EchoString_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestWTF_EchoString_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestWTFPtr.prototype.echoStringArray = function() {
    return TestWTFProxy.prototype.echoStringArray
        .apply(this.ptr.getProxy(), arguments);
  };

  TestWTFProxy.prototype.echoStringArray = function(arr) {
    var params_ = new TestWTF_EchoStringArray_Params();
    params_.arr = arr;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestWTF_EchoStringArray_Name,
          codec.align(TestWTF_EchoStringArray_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestWTF_EchoStringArray_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestWTF_EchoStringArray_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestWTFPtr.prototype.echoStringMap = function() {
    return TestWTFProxy.prototype.echoStringMap
        .apply(this.ptr.getProxy(), arguments);
  };

  TestWTFProxy.prototype.echoStringMap = function(strMap) {
    var params_ = new TestWTF_EchoStringMap_Params();
    params_.strMap = strMap;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestWTF_EchoStringMap_Name,
          codec.align(TestWTF_EchoStringMap_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestWTF_EchoStringMap_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestWTF_EchoStringMap_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestWTFStub(delegate) {
    this.delegate_ = delegate;
  }
  TestWTFStub.prototype.echoString = function(str) {
    return this.delegate_ && this.delegate_.echoString && this.delegate_.echoString(str);
  }
  TestWTFStub.prototype.echoStringArray = function(arr) {
    return this.delegate_ && this.delegate_.echoStringArray && this.delegate_.echoStringArray(arr);
  }
  TestWTFStub.prototype.echoStringMap = function(strMap) {
    return this.delegate_ && this.delegate_.echoStringMap && this.delegate_.echoStringMap(strMap);
  }

  TestWTFStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestWTFStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestWTF_EchoString_Name:
      var params = reader.decodeStruct(TestWTF_EchoString_Params);
      this.echoString(params.str).then(function(response) {
        var responseParams =
            new TestWTF_EchoString_ResponseParams();
        responseParams.str = response.str;
        var builder = new codec.MessageV1Builder(
            kTestWTF_EchoString_Name,
            codec.align(TestWTF_EchoString_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestWTF_EchoString_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestWTF_EchoStringArray_Name:
      var params = reader.decodeStruct(TestWTF_EchoStringArray_Params);
      this.echoStringArray(params.arr).then(function(response) {
        var responseParams =
            new TestWTF_EchoStringArray_ResponseParams();
        responseParams.arr = response.arr;
        var builder = new codec.MessageV1Builder(
            kTestWTF_EchoStringArray_Name,
            codec.align(TestWTF_EchoStringArray_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestWTF_EchoStringArray_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestWTF_EchoStringMap_Name:
      var params = reader.decodeStruct(TestWTF_EchoStringMap_Params);
      this.echoStringMap(params.strMap).then(function(response) {
        var responseParams =
            new TestWTF_EchoStringMap_ResponseParams();
        responseParams.strMap = response.strMap;
        var builder = new codec.MessageV1Builder(
            kTestWTF_EchoStringMap_Name,
            codec.align(TestWTF_EchoStringMap_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestWTF_EchoStringMap_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestWTFRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestWTF_EchoString_Name:
        if (message.expectsResponse())
          paramsClass = TestWTF_EchoString_Params;
      break;
      case kTestWTF_EchoStringArray_Name:
        if (message.expectsResponse())
          paramsClass = TestWTF_EchoStringArray_Params;
      break;
      case kTestWTF_EchoStringMap_Name:
        if (message.expectsResponse())
          paramsClass = TestWTF_EchoStringMap_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestWTFResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestWTF_EchoString_Name:
        if (message.isResponse())
          paramsClass = TestWTF_EchoString_ResponseParams;
        break;
      case kTestWTF_EchoStringArray_Name:
        if (message.isResponse())
          paramsClass = TestWTF_EchoStringArray_ResponseParams;
        break;
      case kTestWTF_EchoStringMap_Name:
        if (message.isResponse())
          paramsClass = TestWTF_EchoStringMap_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestWTF = {
    name: 'mojo.test.TestWTF',
    kVersion: 0,
    ptrClass: TestWTFPtr,
    proxyClass: TestWTFProxy,
    stubClass: TestWTFStub,
    validateRequest: validateTestWTFRequest,
    validateResponse: validateTestWTFResponse,
  };
  TestWTF.NestedEnum = {};
  TestWTF.NestedEnum.E0 = 0;
  TestWTF.NestedEnum.E1 = 1;
  TestWTF.NestedEnum.MIN_VALUE = 0;
  TestWTF.NestedEnum.MAX_VALUE = 1;

  TestWTF.NestedEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestWTF.NestedEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestWTF.NestedEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  TestWTFStub.prototype.validator = validateTestWTFRequest;
  TestWTFProxy.prototype.validator = validateTestWTFResponse;
  exports.TopLevelEnum = TopLevelEnum;
  exports.TestWTFCodeGeneration = TestWTFCodeGeneration;
  exports.TestWTFStruct = TestWTFStruct;
  exports.TestWTFStructWrapper = TestWTFStructWrapper;
  exports.TestWTFCodeGeneration2 = TestWTFCodeGeneration2;
  exports.TestWTF = TestWTF;
  exports.TestWTFPtr = TestWTFPtr;
  exports.TestWTFAssociatedPtr = TestWTFAssociatedPtr;
})();