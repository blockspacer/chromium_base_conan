// mojo/public/interfaces/bindings/tests/regression_tests.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace WTF {
struct regression_tests_internal_EnumWithReference_DataHashFn {
  static unsigned GetHash(const ::regression_tests::EnumWithReference& value) {
    using utype = std::underlying_type<::regression_tests::EnumWithReference>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::regression_tests::EnumWithReference& left, const ::regression_tests::EnumWithReference& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::regression_tests::EnumWithReference>
    : public GenericHashTraits<::regression_tests::EnumWithReference> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::regression_tests::EnumWithReference& value) {
    return value == static_cast<::regression_tests::EnumWithReference>(-1000000);
  }
  static void ConstructDeletedValue(::regression_tests::EnumWithReference& slot, bool) {
    slot = static_cast<::regression_tests::EnumWithReference>(-1000001);
  }
  static bool IsDeletedValue(const ::regression_tests::EnumWithReference& value) {
    return value == static_cast<::regression_tests::EnumWithReference>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct regression_tests_internal_EnumWithLowercase_DataHashFn {
  static unsigned GetHash(const ::regression_tests::EnumWithLowercase& value) {
    using utype = std::underlying_type<::regression_tests::EnumWithLowercase>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::regression_tests::EnumWithLowercase& left, const ::regression_tests::EnumWithLowercase& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::regression_tests::EnumWithLowercase>
    : public GenericHashTraits<::regression_tests::EnumWithLowercase> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::regression_tests::EnumWithLowercase& value) {
    return value == static_cast<::regression_tests::EnumWithLowercase>(-1000000);
  }
  static void ConstructDeletedValue(::regression_tests::EnumWithLowercase& slot, bool) {
    slot = static_cast<::regression_tests::EnumWithLowercase>(-1000001);
  }
  static bool IsDeletedValue(const ::regression_tests::EnumWithLowercase& value) {
    return value == static_cast<::regression_tests::EnumWithLowercase>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct regression_tests_internal_EnumWithNumbers_DataHashFn {
  static unsigned GetHash(const ::regression_tests::EnumWithNumbers& value) {
    using utype = std::underlying_type<::regression_tests::EnumWithNumbers>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::regression_tests::EnumWithNumbers& left, const ::regression_tests::EnumWithNumbers& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::regression_tests::EnumWithNumbers>
    : public GenericHashTraits<::regression_tests::EnumWithNumbers> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::regression_tests::EnumWithNumbers& value) {
    return value == static_cast<::regression_tests::EnumWithNumbers>(-1000000);
  }
  static void ConstructDeletedValue(::regression_tests::EnumWithNumbers& slot, bool) {
    slot = static_cast<::regression_tests::EnumWithNumbers>(-1000001);
  }
  static bool IsDeletedValue(const ::regression_tests::EnumWithNumbers& value) {
    return value == static_cast<::regression_tests::EnumWithNumbers>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct regression_tests_internal_EnumWithK_DataHashFn {
  static unsigned GetHash(const ::regression_tests::EnumWithK& value) {
    using utype = std::underlying_type<::regression_tests::EnumWithK>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::regression_tests::EnumWithK& left, const ::regression_tests::EnumWithK& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::regression_tests::EnumWithK>
    : public GenericHashTraits<::regression_tests::EnumWithK> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::regression_tests::EnumWithK& value) {
    return value == static_cast<::regression_tests::EnumWithK>(-1000000);
  }
  static void ConstructDeletedValue(::regression_tests::EnumWithK& slot, bool) {
    slot = static_cast<::regression_tests::EnumWithK>(-1000001);
  }
  static bool IsDeletedValue(const ::regression_tests::EnumWithK& value) {
    return value == static_cast<::regression_tests::EnumWithK>(-1000001);
  }
};
}  // namespace WTF


namespace regression_tests {
namespace blink {

class CheckMethodWithEmptyResponseProxy;

template <typename ImplRefTraits>
class CheckMethodWithEmptyResponseStub;

class CheckMethodWithEmptyResponseRequestValidator;
class CheckMethodWithEmptyResponseResponseValidator;


// @generated_from: regression_tests.CheckMethodWithEmptyResponse
class  CheckMethodWithEmptyResponse
    : public CheckMethodWithEmptyResponseInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = CheckMethodWithEmptyResponseInterfaceBase;
  using Proxy_ = CheckMethodWithEmptyResponseProxy;

  template <typename ImplRefTraits>
  using Stub_ = CheckMethodWithEmptyResponseStub<ImplRefTraits>;

  using RequestValidator_ = CheckMethodWithEmptyResponseRequestValidator;
  using ResponseValidator_ = CheckMethodWithEmptyResponseResponseValidator;
  enum MethodMinVersions : uint32_t {
    kWithouParameterAndEmptyResponseMinVersion = 0,
    kWithParameterAndEmptyResponseMinVersion = 0,
  };
  virtual ~CheckMethodWithEmptyResponse() {}


  using WithouParameterAndEmptyResponseCallback = base::OnceCallback<void()>;
  
// @generated_from: regression_tests.CheckMethodWithEmptyResponse.WithouParameterAndEmptyResponse
  virtual void WithouParameterAndEmptyResponse(WithouParameterAndEmptyResponseCallback callback) = 0;


  using WithParameterAndEmptyResponseCallback = base::OnceCallback<void()>;
  
// @generated_from: regression_tests.CheckMethodWithEmptyResponse.WithParameterAndEmptyResponse
  virtual void WithParameterAndEmptyResponse(bool b, WithParameterAndEmptyResponseCallback callback) = 0;
};

class CheckNameCollisionProxy;

template <typename ImplRefTraits>
class CheckNameCollisionStub;

class CheckNameCollisionRequestValidator;
class CheckNameCollisionResponseValidator;


// @generated_from: regression_tests.CheckNameCollision
class  CheckNameCollision
    : public CheckNameCollisionInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = CheckNameCollisionInterfaceBase;
  using Proxy_ = CheckNameCollisionProxy;

  template <typename ImplRefTraits>
  using Stub_ = CheckNameCollisionStub<ImplRefTraits>;

  using RequestValidator_ = CheckNameCollisionRequestValidator;
  using ResponseValidator_ = CheckNameCollisionResponseValidator;
  enum MethodMinVersions : uint32_t {
    kWithNameCollisionMinVersion = 0,
  };
  virtual ~CheckNameCollision() {}


  using WithNameCollisionCallback = base::OnceCallback<void(bool, bool)>;
  
// @generated_from: regression_tests.CheckNameCollision.WithNameCollision
  virtual void WithNameCollision(bool message, bool response, WithNameCollisionCallback callback) = 0;
};

class HandlesNameCollisionInterfaceProxy;

template <typename ImplRefTraits>
class HandlesNameCollisionInterfaceStub;

class HandlesNameCollisionInterfaceRequestValidator;
class HandlesNameCollisionInterfaceResponseValidator;


// @generated_from: regression_tests.HandlesNameCollisionInterface
class  HandlesNameCollisionInterface
    : public HandlesNameCollisionInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = HandlesNameCollisionInterfaceInterfaceBase;
  using Proxy_ = HandlesNameCollisionInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = HandlesNameCollisionInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = HandlesNameCollisionInterfaceRequestValidator;
  using ResponseValidator_ = HandlesNameCollisionInterfaceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kMethodMinVersion = 0,
  };
  virtual ~HandlesNameCollisionInterface() {}


  using MethodCallback = base::OnceCallback<void(::mojo::ScopedHandle)>;
  
// @generated_from: regression_tests.HandlesNameCollisionInterface.Method
  virtual void Method(EmptyStructPtr handles, MethodCallback callback) = 0;
};



// @generated_from: regression_tests.CheckMethodWithEmptyResponse
class  CheckMethodWithEmptyResponseProxy
    : public CheckMethodWithEmptyResponse {
 public:
  using InterfaceType = CheckMethodWithEmptyResponse;

  explicit CheckMethodWithEmptyResponseProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: regression_tests.CheckMethodWithEmptyResponse.WithouParameterAndEmptyResponse
  void WithouParameterAndEmptyResponse(WithouParameterAndEmptyResponseCallback callback) final;
  
// @generated_from: regression_tests.CheckMethodWithEmptyResponse.WithParameterAndEmptyResponse
  void WithParameterAndEmptyResponse(bool b, WithParameterAndEmptyResponseCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: regression_tests.CheckNameCollision
class  CheckNameCollisionProxy
    : public CheckNameCollision {
 public:
  using InterfaceType = CheckNameCollision;

  explicit CheckNameCollisionProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: regression_tests.CheckNameCollision.WithNameCollision
  void WithNameCollision(bool message, bool response, WithNameCollisionCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: regression_tests.HandlesNameCollisionInterface
class  HandlesNameCollisionInterfaceProxy
    : public HandlesNameCollisionInterface {
 public:
  using InterfaceType = HandlesNameCollisionInterface;

  explicit HandlesNameCollisionInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: regression_tests.HandlesNameCollisionInterface.Method
  void Method(EmptyStructPtr handles, MethodCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  CheckMethodWithEmptyResponseStubDispatch {
 public:
  static bool Accept(CheckMethodWithEmptyResponse* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CheckMethodWithEmptyResponse* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CheckMethodWithEmptyResponse>>
class CheckMethodWithEmptyResponseStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CheckMethodWithEmptyResponseStub() {}
  ~CheckMethodWithEmptyResponseStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CheckMethodWithEmptyResponseStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CheckMethodWithEmptyResponseStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  CheckNameCollisionStubDispatch {
 public:
  static bool Accept(CheckNameCollision* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CheckNameCollision* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CheckNameCollision>>
class CheckNameCollisionStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CheckNameCollisionStub() {}
  ~CheckNameCollisionStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CheckNameCollisionStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CheckNameCollisionStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  HandlesNameCollisionInterfaceStubDispatch {
 public:
  static bool Accept(HandlesNameCollisionInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      HandlesNameCollisionInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<HandlesNameCollisionInterface>>
class HandlesNameCollisionInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  HandlesNameCollisionInterfaceStub() {}
  ~HandlesNameCollisionInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return HandlesNameCollisionInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return HandlesNameCollisionInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  CheckMethodWithEmptyResponseRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  CheckNameCollisionRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  HandlesNameCollisionInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  CheckMethodWithEmptyResponseResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  CheckNameCollisionResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  HandlesNameCollisionInterfaceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};







// @generated_from: regression_tests.EmptyStruct
class  EmptyStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<EmptyStruct, T>::value>;
  using DataView = EmptyStructDataView;
  using Data_ = internal::EmptyStruct_Data;

  template <typename... Args>
  static EmptyStructPtr New(Args&&... args) {
    return EmptyStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static EmptyStructPtr From(const U& u) {
    return mojo::TypeConverter<EmptyStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, EmptyStruct>::Convert(*this);
  }


  EmptyStruct();

  ~EmptyStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = EmptyStructPtr>
  EmptyStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        EmptyStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        EmptyStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::EmptyStruct_UnserializedMessageContext<
            UserType, EmptyStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<EmptyStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return EmptyStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::EmptyStruct_UnserializedMessageContext<
            UserType, EmptyStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<EmptyStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}










// @generated_from: regression_tests.HandlesNameCollisionUnion
class  HandlesNameCollisionUnion {
 public:
  using DataView = HandlesNameCollisionUnionDataView;
  using Data_ = internal::HandlesNameCollisionUnion_Data;
  using Tag = Data_::HandlesNameCollisionUnion_Tag;

  static HandlesNameCollisionUnionPtr New() {
    return HandlesNameCollisionUnionPtr(base::in_place);
  }
  // Construct an instance holding |handles|.
  static HandlesNameCollisionUnionPtr
  NewHandles(
      int32_t handles) {
    auto result = HandlesNameCollisionUnionPtr(base::in_place);
    result->set_handles(std::move(handles));
    return result;
  }

  template <typename U>
  static HandlesNameCollisionUnionPtr From(const U& u) {
    return mojo::TypeConverter<HandlesNameCollisionUnionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HandlesNameCollisionUnion>::Convert(*this);
  }

  HandlesNameCollisionUnion();
  ~HandlesNameCollisionUnion();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = HandlesNameCollisionUnionPtr>
  HandlesNameCollisionUnionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, HandlesNameCollisionUnion>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, HandlesNameCollisionUnion>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: regression_tests.HandlesNameCollisionUnion.handles
  bool is_handles() const { return tag_ == Tag::HANDLES; }

  
// @generated_from: regression_tests.HandlesNameCollisionUnion.handles
  int32_t get_handles() const {
    DCHECK(tag_ == Tag::HANDLES);
    return data_.handles;
  }

  
// @generated_from: regression_tests.HandlesNameCollisionUnion.handles
  void set_handles(
      int32_t handles);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HandlesNameCollisionUnion::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<HandlesNameCollisionUnion::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    int32_t handles;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: regression_tests.Edge
class  Edge {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Edge, T>::value>;
  using DataView = EdgeDataView;
  using Data_ = internal::Edge_Data;

  template <typename... Args>
  static EdgePtr New(Args&&... args) {
    return EdgePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static EdgePtr From(const U& u) {
    return mojo::TypeConverter<EdgePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Edge>::Convert(*this);
  }


  Edge();

  explicit Edge(
      VertexPtr v);

  ~Edge();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = EdgePtr>
  EdgePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Edge::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Edge::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Edge::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Edge::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Edge_UnserializedMessageContext<
            UserType, Edge::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Edge::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return Edge::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Edge_UnserializedMessageContext<
            UserType, Edge::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Edge::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.Edge.v
  VertexPtr v;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Edge);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Edge::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Edge::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Edge::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Edge::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: regression_tests.Vertex
class  Vertex {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Vertex, T>::value>;
  using DataView = VertexDataView;
  using Data_ = internal::Vertex_Data;

  template <typename... Args>
  static VertexPtr New(Args&&... args) {
    return VertexPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VertexPtr From(const U& u) {
    return mojo::TypeConverter<VertexPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Vertex>::Convert(*this);
  }


  Vertex();

  explicit Vertex(
      EmptyStructPtr e);

  ~Vertex();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VertexPtr>
  VertexPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Vertex::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Vertex::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Vertex::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Vertex::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Vertex_UnserializedMessageContext<
            UserType, Vertex::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Vertex::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return Vertex::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Vertex_UnserializedMessageContext<
            UserType, Vertex::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Vertex::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.Vertex.e
  EmptyStructPtr e;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Vertex);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Vertex::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Vertex::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Vertex::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Vertex::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: regression_tests.A
class  A {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<A, T>::value>;
  using DataView = ADataView;
  using Data_ = internal::A_Data;

  template <typename... Args>
  static APtr New(Args&&... args) {
    return APtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static APtr From(const U& u) {
    return mojo::TypeConverter<APtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, A>::Convert(*this);
  }


  A();

  explicit A(
      BPtr b);

  ~A();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = APtr>
  APtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, A::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, A::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        A::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        A::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::A_UnserializedMessageContext<
            UserType, A::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<A::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return A::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::A_UnserializedMessageContext<
            UserType, A::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<A::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.A.b
  BPtr b;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(A);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, A::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, A::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, A::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, A::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: regression_tests.B
class  B {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<B, T>::value>;
  using DataView = BDataView;
  using Data_ = internal::B_Data;

  template <typename... Args>
  static BPtr New(Args&&... args) {
    return BPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BPtr From(const U& u) {
    return mojo::TypeConverter<BPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, B>::Convert(*this);
  }


  B();

  explicit B(
      APtr a);

  ~B();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BPtr>
  BPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, B::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, B::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        B::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        B::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::B_UnserializedMessageContext<
            UserType, B::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<B::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return B::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::B_UnserializedMessageContext<
            UserType, B::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<B::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.B.a
  APtr a;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(B);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, B::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, B::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, B::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, B::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: regression_tests.HandlesNameCollisionStruct
class  HandlesNameCollisionStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HandlesNameCollisionStruct, T>::value>;
  using DataView = HandlesNameCollisionStructDataView;
  using Data_ = internal::HandlesNameCollisionStruct_Data;

  template <typename... Args>
  static HandlesNameCollisionStructPtr New(Args&&... args) {
    return HandlesNameCollisionStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HandlesNameCollisionStructPtr From(const U& u) {
    return mojo::TypeConverter<HandlesNameCollisionStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HandlesNameCollisionStruct>::Convert(*this);
  }


  HandlesNameCollisionStruct();

  explicit HandlesNameCollisionStruct(
      EmptyStructPtr handles);

  ~HandlesNameCollisionStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HandlesNameCollisionStructPtr>
  HandlesNameCollisionStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HandlesNameCollisionStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HandlesNameCollisionStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HandlesNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesNameCollisionStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HandlesNameCollisionStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return HandlesNameCollisionStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HandlesNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesNameCollisionStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HandlesNameCollisionStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.HandlesNameCollisionStruct.handles
  EmptyStructPtr handles;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(HandlesNameCollisionStruct);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: regression_tests.HandlesHandleNameCollisionStruct
class  HandlesHandleNameCollisionStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HandlesHandleNameCollisionStruct, T>::value>;
  using DataView = HandlesHandleNameCollisionStructDataView;
  using Data_ = internal::HandlesHandleNameCollisionStruct_Data;

  template <typename... Args>
  static HandlesHandleNameCollisionStructPtr New(Args&&... args) {
    return HandlesHandleNameCollisionStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HandlesHandleNameCollisionStructPtr From(const U& u) {
    return mojo::TypeConverter<HandlesHandleNameCollisionStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HandlesHandleNameCollisionStruct>::Convert(*this);
  }


  HandlesHandleNameCollisionStruct();

  explicit HandlesHandleNameCollisionStruct(
      ::mojo::ScopedHandle handles);

  ~HandlesHandleNameCollisionStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HandlesHandleNameCollisionStructPtr>
  HandlesHandleNameCollisionStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HandlesHandleNameCollisionStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HandlesHandleNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesHandleNameCollisionStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HandlesHandleNameCollisionStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return HandlesHandleNameCollisionStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HandlesHandleNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesHandleNameCollisionStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HandlesHandleNameCollisionStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.HandlesHandleNameCollisionStruct.handles
  ::mojo::ScopedHandle handles;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(HandlesHandleNameCollisionStruct);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: regression_tests.HandlesUnionNameCollisionStruct
class  HandlesUnionNameCollisionStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HandlesUnionNameCollisionStruct, T>::value>;
  using DataView = HandlesUnionNameCollisionStructDataView;
  using Data_ = internal::HandlesUnionNameCollisionStruct_Data;

  template <typename... Args>
  static HandlesUnionNameCollisionStructPtr New(Args&&... args) {
    return HandlesUnionNameCollisionStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HandlesUnionNameCollisionStructPtr From(const U& u) {
    return mojo::TypeConverter<HandlesUnionNameCollisionStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HandlesUnionNameCollisionStruct>::Convert(*this);
  }


  HandlesUnionNameCollisionStruct();

  explicit HandlesUnionNameCollisionStruct(
      HandlesNameCollisionUnionPtr handles);

  ~HandlesUnionNameCollisionStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HandlesUnionNameCollisionStructPtr>
  HandlesUnionNameCollisionStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HandlesUnionNameCollisionStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HandlesUnionNameCollisionStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HandlesUnionNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesUnionNameCollisionStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HandlesUnionNameCollisionStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return HandlesUnionNameCollisionStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HandlesUnionNameCollisionStruct_UnserializedMessageContext<
            UserType, HandlesUnionNameCollisionStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HandlesUnionNameCollisionStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: regression_tests.HandlesUnionNameCollisionStruct.handles
  HandlesNameCollisionUnionPtr handles;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(HandlesUnionNameCollisionStruct);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
HandlesNameCollisionUnionPtr HandlesNameCollisionUnion::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::HANDLES:
      rv->set_handles(mojo::Clone(data_.handles));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, HandlesNameCollisionUnion>::value>::type*>
bool HandlesNameCollisionUnion::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::HANDLES:
      return mojo::Equals(data_.handles, other.data_.handles);
  }

  return false;
}
template <typename StructPtrType>
EdgePtr Edge::Clone() const {
  return New(
      mojo::Clone(v)
  );
}

template <typename T, Edge::EnableIfSame<T>*>
bool Edge::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->v, other_struct.v))
    return false;
  return true;
}

template <typename T, Edge::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.v < rhs.v)
    return true;
  if (rhs.v < lhs.v)
    return false;
  return false;
}
template <typename StructPtrType>
VertexPtr Vertex::Clone() const {
  return New(
      mojo::Clone(e)
  );
}

template <typename T, Vertex::EnableIfSame<T>*>
bool Vertex::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->e, other_struct.e))
    return false;
  return true;
}

template <typename T, Vertex::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.e < rhs.e)
    return true;
  if (rhs.e < lhs.e)
    return false;
  return false;
}
template <typename StructPtrType>
EmptyStructPtr EmptyStruct::Clone() const {
  return New(
  );
}

template <typename T, EmptyStruct::EnableIfSame<T>*>
bool EmptyStruct::Equals(const T& other_struct) const {
  return true;
}

template <typename T, EmptyStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
APtr A::Clone() const {
  return New(
      mojo::Clone(b)
  );
}

template <typename T, A::EnableIfSame<T>*>
bool A::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->b, other_struct.b))
    return false;
  return true;
}

template <typename T, A::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.b < rhs.b)
    return true;
  if (rhs.b < lhs.b)
    return false;
  return false;
}
template <typename StructPtrType>
BPtr B::Clone() const {
  return New(
      mojo::Clone(a)
  );
}

template <typename T, B::EnableIfSame<T>*>
bool B::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->a, other_struct.a))
    return false;
  return true;
}

template <typename T, B::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.a < rhs.a)
    return true;
  if (rhs.a < lhs.a)
    return false;
  return false;
}
template <typename StructPtrType>
HandlesNameCollisionStructPtr HandlesNameCollisionStruct::Clone() const {
  return New(
      mojo::Clone(handles)
  );
}

template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>*>
bool HandlesNameCollisionStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->handles, other_struct.handles))
    return false;
  return true;
}

template <typename T, HandlesNameCollisionStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.handles < rhs.handles)
    return true;
  if (rhs.handles < lhs.handles)
    return false;
  return false;
}
template <typename StructPtrType>
HandlesHandleNameCollisionStructPtr HandlesHandleNameCollisionStruct::Clone() const {
  return New(
      mojo::Clone(handles)
  );
}

template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>*>
bool HandlesHandleNameCollisionStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->handles, other_struct.handles))
    return false;
  return true;
}

template <typename T, HandlesHandleNameCollisionStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.handles < rhs.handles)
    return true;
  if (rhs.handles < lhs.handles)
    return false;
  return false;
}
template <typename StructPtrType>
HandlesUnionNameCollisionStructPtr HandlesUnionNameCollisionStruct::Clone() const {
  return New(
      mojo::Clone(handles)
  );
}

template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>*>
bool HandlesUnionNameCollisionStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->handles, other_struct.handles))
    return false;
  return true;
}

template <typename T, HandlesUnionNameCollisionStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.handles < rhs.handles)
    return true;
  if (rhs.handles < lhs.handles)
    return false;
  return false;
}


}  // namespace blink
}  // namespace regression_tests

namespace mojo {


template <>
struct  StructTraits<::regression_tests::blink::Edge::DataView,
                                         ::regression_tests::blink::EdgePtr> {
  static bool IsNull(const ::regression_tests::blink::EdgePtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::EdgePtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::Edge::v)& v(
      const ::regression_tests::blink::EdgePtr& input) {
    return input->v;
  }

  static bool Read(::regression_tests::blink::Edge::DataView input, ::regression_tests::blink::EdgePtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::Vertex::DataView,
                                         ::regression_tests::blink::VertexPtr> {
  static bool IsNull(const ::regression_tests::blink::VertexPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::VertexPtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::Vertex::e)& e(
      const ::regression_tests::blink::VertexPtr& input) {
    return input->e;
  }

  static bool Read(::regression_tests::blink::Vertex::DataView input, ::regression_tests::blink::VertexPtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::EmptyStruct::DataView,
                                         ::regression_tests::blink::EmptyStructPtr> {
  static bool IsNull(const ::regression_tests::blink::EmptyStructPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::EmptyStructPtr* output) { output->reset(); }

  static bool Read(::regression_tests::blink::EmptyStruct::DataView input, ::regression_tests::blink::EmptyStructPtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::A::DataView,
                                         ::regression_tests::blink::APtr> {
  static bool IsNull(const ::regression_tests::blink::APtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::APtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::A::b)& b(
      const ::regression_tests::blink::APtr& input) {
    return input->b;
  }

  static bool Read(::regression_tests::blink::A::DataView input, ::regression_tests::blink::APtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::B::DataView,
                                         ::regression_tests::blink::BPtr> {
  static bool IsNull(const ::regression_tests::blink::BPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::BPtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::B::a)& a(
      const ::regression_tests::blink::BPtr& input) {
    return input->a;
  }

  static bool Read(::regression_tests::blink::B::DataView input, ::regression_tests::blink::BPtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::HandlesNameCollisionStruct::DataView,
                                         ::regression_tests::blink::HandlesNameCollisionStructPtr> {
  static bool IsNull(const ::regression_tests::blink::HandlesNameCollisionStructPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::HandlesNameCollisionStructPtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::HandlesNameCollisionStruct::handles)& handles(
      const ::regression_tests::blink::HandlesNameCollisionStructPtr& input) {
    return input->handles;
  }

  static bool Read(::regression_tests::blink::HandlesNameCollisionStruct::DataView input, ::regression_tests::blink::HandlesNameCollisionStructPtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::HandlesHandleNameCollisionStruct::DataView,
                                         ::regression_tests::blink::HandlesHandleNameCollisionStructPtr> {
  static bool IsNull(const ::regression_tests::blink::HandlesHandleNameCollisionStructPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::HandlesHandleNameCollisionStructPtr* output) { output->reset(); }

  static  decltype(::regression_tests::blink::HandlesHandleNameCollisionStruct::handles)& handles(
       ::regression_tests::blink::HandlesHandleNameCollisionStructPtr& input) {
    return input->handles;
  }

  static bool Read(::regression_tests::blink::HandlesHandleNameCollisionStruct::DataView input, ::regression_tests::blink::HandlesHandleNameCollisionStructPtr* output);
};


template <>
struct  StructTraits<::regression_tests::blink::HandlesUnionNameCollisionStruct::DataView,
                                         ::regression_tests::blink::HandlesUnionNameCollisionStructPtr> {
  static bool IsNull(const ::regression_tests::blink::HandlesUnionNameCollisionStructPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::HandlesUnionNameCollisionStructPtr* output) { output->reset(); }

  static const decltype(::regression_tests::blink::HandlesUnionNameCollisionStruct::handles)& handles(
      const ::regression_tests::blink::HandlesUnionNameCollisionStructPtr& input) {
    return input->handles;
  }

  static bool Read(::regression_tests::blink::HandlesUnionNameCollisionStruct::DataView input, ::regression_tests::blink::HandlesUnionNameCollisionStructPtr* output);
};


template <>
struct  UnionTraits<::regression_tests::blink::HandlesNameCollisionUnion::DataView,
                                        ::regression_tests::blink::HandlesNameCollisionUnionPtr> {
  static bool IsNull(const ::regression_tests::blink::HandlesNameCollisionUnionPtr& input) { return !input; }
  static void SetToNull(::regression_tests::blink::HandlesNameCollisionUnionPtr* output) { output->reset(); }

  static ::regression_tests::blink::HandlesNameCollisionUnion::Tag GetTag(const ::regression_tests::blink::HandlesNameCollisionUnionPtr& input) {
    return input->which();
  }

  static  int32_t handles(const ::regression_tests::blink::HandlesNameCollisionUnionPtr& input) {
    return input->get_handles();
  }

  static bool Read(::regression_tests::blink::HandlesNameCollisionUnion::DataView input, ::regression_tests::blink::HandlesNameCollisionUnionPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogNzgxMCwgImJlZ2luIjogNzc4MiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuQ2hlY2tNZXRob2RXaXRo
RW1wdHlSZXNwb25zZSJ9fSwgeyJlbmQiOiA4ODM1LCAiYmVnaW4iOiA4ODA0LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5DaGVja01l
dGhvZFdpdGhFbXB0eVJlc3BvbnNlLldpdGhvdVBhcmFtZXRlckFuZEVtcHR5UmVzcG9uc2UifX0s
IHsiZW5kIjogOTExMiwgImJlZ2luIjogOTA4MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuQ2hlY2tNZXRob2RXaXRoRW1wdHlSZXNw
b25zZS5XaXRoUGFyYW1ldGVyQW5kRW1wdHlSZXNwb25zZSJ9fSwgeyJlbmQiOiA5NDQzLCAiYmVn
aW4iOiA5NDI1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVn
cmVzc2lvbl90ZXN0cy5DaGVja05hbWVDb2xsaXNpb24ifX0sIHsiZW5kIjogMTAyOTIsICJiZWdp
biI6IDEwMjc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVn
cmVzc2lvbl90ZXN0cy5DaGVja05hbWVDb2xsaXNpb24uV2l0aE5hbWVDb2xsaXNpb24ifX0sIHsi
ZW5kIjogMTA2OTgsICJiZWdpbiI6IDEwNjY5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5IYW5kbGVzTmFtZUNvbGxpc2lvbkludGVy
ZmFjZSJ9fSwgeyJlbmQiOiAxMTYwMSwgImJlZ2luIjogMTE1OTUsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rlc3RzLkhhbmRsZXNOYW1lQ29s
bGlzaW9uSW50ZXJmYWNlLk1ldGhvZCJ9fSwgeyJlbmQiOiAxMjEwOCwgImJlZ2luIjogMTIwNzcs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rl
c3RzLkNoZWNrTWV0aG9kV2l0aEVtcHR5UmVzcG9uc2UuV2l0aG91UGFyYW1ldGVyQW5kRW1wdHlS
ZXNwb25zZSJ9fSwgeyJlbmQiOiAxMjMwMSwgImJlZ2luIjogMTIyNzIsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rlc3RzLkNoZWNrTWV0aG9k
V2l0aEVtcHR5UmVzcG9uc2UuV2l0aFBhcmFtZXRlckFuZEVtcHR5UmVzcG9uc2UifX0sIHsiZW5k
IjogMTI3ODksICJiZWdpbiI6IDEyNzcyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5DaGVja05hbWVDb2xsaXNpb24uV2l0aE5hbWVD
b2xsaXNpb24ifX0sIHsiZW5kIjogMTMzMzAsICJiZWdpbiI6IDEzMzI0LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5IYW5kbGVzTmFt
ZUNvbGxpc2lvbkludGVyZmFjZS5NZXRob2QifX0sIHsiZW5kIjogMTg1MzcsICJiZWdpbiI6IDE4
NTI2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lv
bl90ZXN0cy5FbXB0eVN0cnVjdCJ9fSwgeyJlbmQiOiAyMzA4MSwgImJlZ2luIjogMjMwNTYsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rlc3Rz
LkhhbmRsZXNOYW1lQ29sbGlzaW9uVW5pb24ifX0sIHsiZW5kIjogMjUwNDIsICJiZWdpbiI6IDI1
MDMyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lv
bl90ZXN0cy5IYW5kbGVzTmFtZUNvbGxpc2lvblVuaW9uLmhhbmRsZXMifX0sIHsiZW5kIjogMjUx
ODAsICJiZWdpbiI6IDI1MTY5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAicmVncmVzc2lvbl90ZXN0cy5IYW5kbGVzTmFtZUNvbGxpc2lvblVuaW9uLmhhbmRsZXMi
fX0sIHsiZW5kIjogMjUzNDgsICJiZWdpbiI6IDI1MzM3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5IYW5kbGVzTmFtZUNvbGxpc2lv
blVuaW9uLmhhbmRsZXMifX0sIHsiZW5kIjogMjYyMDcsICJiZWdpbiI6IDI2MjAzLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90ZXN0cy5FZGdl
In19LCB7ImVuZCI6IDI5NTk0LCAiYmVnaW4iOiAyOTU5MywgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuRWRnZS52In19LCB7ImVuZCI6
IDMwNjE5LCAiYmVnaW4iOiAzMDYxMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuVmVydGV4In19LCB7ImVuZCI6IDM0MDY2LCAiYmVn
aW4iOiAzNDA2NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInJl
Z3Jlc3Npb25fdGVzdHMuVmVydGV4LmUifX0sIHsiZW5kIjogMzUwOTIsICJiZWdpbiI6IDM1MDkx
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVncmVzc2lvbl90
ZXN0cy5BIn19LCB7ImVuZCI6IDM4MzkyLCAiYmVnaW4iOiAzODM4OCwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuQS5iIn19LCB7ImVu
ZCI6IDM5Mzk0LCAiYmVnaW4iOiAzOTM5MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuQiJ9fSwgeyJlbmQiOiA0MjY5NCwgImJlZ2lu
IjogNDI2OTAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdy
ZXNzaW9uX3Rlc3RzLkIuYSJ9fSwgeyJlbmQiOiA0Mzc0NiwgImJlZ2luIjogNDM3MjAsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rlc3RzLkhh
bmRsZXNOYW1lQ29sbGlzaW9uU3RydWN0In19LCB7ImVuZCI6IDQ3NzQ1LCAiYmVnaW4iOiA0Nzcz
OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25f
dGVzdHMuSGFuZGxlc05hbWVDb2xsaXNpb25TdHJ1Y3QuaGFuZGxlcyJ9fSwgeyJlbmQiOiA0ODkz
MiwgImJlZ2luIjogNDg5MDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJyZWdyZXNzaW9uX3Rlc3RzLkhhbmRsZXNIYW5kbGVOYW1lQ29sbGlzaW9uU3RydWN0In19
LCB7ImVuZCI6IDUyODQxLCAiYmVnaW4iOiA1MjgzNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogInJlZ3Jlc3Npb25fdGVzdHMuSGFuZGxlc0hhbmRsZU5hbWVDb2xs
aXNpb25TdHJ1Y3QuaGFuZGxlcyJ9fSwgeyJlbmQiOiA1NDA1NiwgImJlZ2luIjogNTQwMjUsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJyZWdyZXNzaW9uX3Rlc3Rz
LkhhbmRsZXNVbmlvbk5hbWVDb2xsaXNpb25TdHJ1Y3QifX0sIHsiZW5kIjogNTgyMDgsICJiZWdp
biI6IDU4MjAxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAicmVn
cmVzc2lvbl90ZXN0cy5IYW5kbGVzVW5pb25OYW1lQ29sbGlzaW9uU3RydWN0LmhhbmRsZXMifX1d
LCAidHlwZSI6ICJreXRoZTAifQ==
*/