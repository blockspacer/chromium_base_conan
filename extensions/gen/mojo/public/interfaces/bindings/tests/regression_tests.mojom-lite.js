// mojo/public/interfaces/bindings/tests/regression_tests.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('regressionTests');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
regressionTests.EnumWithReferenceSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
regressionTests.EnumWithReference = {
  
  k_STEREO_AND_KEYBOARD_MIC: 30,
  k_MAX: 30,
  MIN_VALUE: 30,
  MAX_VALUE: 30,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
regressionTests.EnumWithLowercaseSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
regressionTests.EnumWithLowercase = {
  
  PlanarF16: 0,
  PlanarF32: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
regressionTests.EnumWithNumbersSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
regressionTests.EnumWithNumbers = {
  
  k_2_1: 4,
  MIN_VALUE: 4,
  MAX_VALUE: 4,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
regressionTests.EnumWithKSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
regressionTests.EnumWithK = {
  
  K: 0,
  MIN_VALUE: 0,
  MAX_VALUE: 0,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
regressionTests.CheckMethodWithEmptyResponsePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        regressionTests.CheckMethodWithEmptyResponse.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { regressionTests.CheckMethodWithEmptyResponseInterface }
 */
regressionTests.CheckMethodWithEmptyResponseRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!regressionTests.CheckMethodWithEmptyResponsePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          regressionTests.CheckMethodWithEmptyResponsePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!regressionTests.CheckMethodWithEmptyResponsePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  withouParameterAndEmptyResponse() {
    return this.proxy.sendMessage(
        0,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !boolean } b
   * @return {!Promise}
   */

  withParameterAndEmptyResponse(
      b) {
    return this.proxy.sendMessage(
        1,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParamsSpec.$,
        [
          b
        ]);
  }
};

/**
 * An object which receives request messages for the CheckMethodWithEmptyResponse
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
regressionTests.CheckMethodWithEmptyResponseReceiver = class {
  /**
   * @param {!regressionTests.CheckMethodWithEmptyResponseInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!regressionTests.CheckMethodWithEmptyResponseRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        regressionTests.CheckMethodWithEmptyResponseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.CheckMethodWithEmptyResponseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParamsSpec.$,
        impl.withouParameterAndEmptyResponse.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParamsSpec.$,
        impl.withParameterAndEmptyResponse.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
regressionTests.CheckMethodWithEmptyResponse = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "regression_tests.CheckMethodWithEmptyResponse";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!regressionTests.CheckMethodWithEmptyResponseRemote}
   * @export
   */
  static getRemote() {
    let remote = new regressionTests.CheckMethodWithEmptyResponseRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CheckMethodWithEmptyResponse
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
regressionTests.CheckMethodWithEmptyResponseCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      regressionTests.CheckMethodWithEmptyResponseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.CheckMethodWithEmptyResponseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.withouParameterAndEmptyResponse =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParamsSpec.$,
        this.withouParameterAndEmptyResponse.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.withParameterAndEmptyResponse =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ParamsSpec.$,
        regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParamsSpec.$,
        this.withParameterAndEmptyResponse.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
regressionTests.CheckNameCollisionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        regressionTests.CheckNameCollision.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { regressionTests.CheckNameCollisionInterface }
 */
regressionTests.CheckNameCollisionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!regressionTests.CheckNameCollisionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          regressionTests.CheckNameCollisionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!regressionTests.CheckNameCollisionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } message
   * @param { !boolean } response
   * @return {!Promise<{
        message: !boolean,
        response: !boolean,
   *  }>}
   */

  withNameCollision(
      message,
      response) {
    return this.proxy.sendMessage(
        0,
        regressionTests.CheckNameCollision_WithNameCollision_ParamsSpec.$,
        regressionTests.CheckNameCollision_WithNameCollision_ResponseParamsSpec.$,
        [
          message,
          response
        ]);
  }
};

/**
 * An object which receives request messages for the CheckNameCollision
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
regressionTests.CheckNameCollisionReceiver = class {
  /**
   * @param {!regressionTests.CheckNameCollisionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!regressionTests.CheckNameCollisionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        regressionTests.CheckNameCollisionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.CheckNameCollisionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        regressionTests.CheckNameCollision_WithNameCollision_ParamsSpec.$,
        regressionTests.CheckNameCollision_WithNameCollision_ResponseParamsSpec.$,
        impl.withNameCollision.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
regressionTests.CheckNameCollision = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "regression_tests.CheckNameCollision";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!regressionTests.CheckNameCollisionRemote}
   * @export
   */
  static getRemote() {
    let remote = new regressionTests.CheckNameCollisionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CheckNameCollision
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
regressionTests.CheckNameCollisionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      regressionTests.CheckNameCollisionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.CheckNameCollisionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.withNameCollision =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        regressionTests.CheckNameCollision_WithNameCollision_ParamsSpec.$,
        regressionTests.CheckNameCollision_WithNameCollision_ResponseParamsSpec.$,
        this.withNameCollision.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
regressionTests.HandlesNameCollisionInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        regressionTests.HandlesNameCollisionInterface.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { regressionTests.HandlesNameCollisionInterfaceInterface }
 */
regressionTests.HandlesNameCollisionInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!regressionTests.HandlesNameCollisionInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          regressionTests.HandlesNameCollisionInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!regressionTests.HandlesNameCollisionInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !regressionTests.EmptyStruct } handles
   * @return {!Promise<{
        handles: !MojoHandle,
   *  }>}
   */

  method(
      handles) {
    return this.proxy.sendMessage(
        0,
        regressionTests.HandlesNameCollisionInterface_Method_ParamsSpec.$,
        regressionTests.HandlesNameCollisionInterface_Method_ResponseParamsSpec.$,
        [
          handles
        ]);
  }
};

/**
 * An object which receives request messages for the HandlesNameCollisionInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
regressionTests.HandlesNameCollisionInterfaceReceiver = class {
  /**
   * @param {!regressionTests.HandlesNameCollisionInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!regressionTests.HandlesNameCollisionInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        regressionTests.HandlesNameCollisionInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.HandlesNameCollisionInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        regressionTests.HandlesNameCollisionInterface_Method_ParamsSpec.$,
        regressionTests.HandlesNameCollisionInterface_Method_ResponseParamsSpec.$,
        impl.method.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
regressionTests.HandlesNameCollisionInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "regression_tests.HandlesNameCollisionInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!regressionTests.HandlesNameCollisionInterfaceRemote}
   * @export
   */
  static getRemote() {
    let remote = new regressionTests.HandlesNameCollisionInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the HandlesNameCollisionInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
regressionTests.HandlesNameCollisionInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      regressionTests.HandlesNameCollisionInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!regressionTests.HandlesNameCollisionInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        regressionTests.HandlesNameCollisionInterface_Method_ParamsSpec.$,
        regressionTests.HandlesNameCollisionInterface_Method_ResponseParamsSpec.$,
        this.method.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.EdgeSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.VertexSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.EmptyStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.ASpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.BSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.HandlesNameCollisionStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.HandlesHandleNameCollisionStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.HandlesUnionNameCollisionStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckNameCollision_WithNameCollision_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.CheckNameCollision_WithNameCollision_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.HandlesNameCollisionInterface_Method_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
regressionTests.HandlesNameCollisionInterface_Method_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
regressionTests.HandlesNameCollisionUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    regressionTests.EdgeSpec.$,
    'Edge',
    [
      mojo.internal.StructField(
        'v', 0,
        0,
        regressionTests.VertexSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.Edge = class {
  constructor() {
    /** @export { (regressionTests.Vertex|undefined) } */
    this.v;
  }
};




mojo.internal.Struct(
    regressionTests.VertexSpec.$,
    'Vertex',
    [
      mojo.internal.StructField(
        'e', 0,
        0,
        regressionTests.EmptyStructSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.Vertex = class {
  constructor() {
    /** @export { (regressionTests.EmptyStruct|undefined) } */
    this.e;
  }
};




mojo.internal.Struct(
    regressionTests.EmptyStructSpec.$,
    'EmptyStruct',
    [
    ],
    [[0, 8],]);





/** @record */
regressionTests.EmptyStruct = class {
  constructor() {
  }
};




mojo.internal.Struct(
    regressionTests.ASpec.$,
    'A',
    [
      mojo.internal.StructField(
        'b', 0,
        0,
        regressionTests.BSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.A = class {
  constructor() {
    /** @export { (regressionTests.B|undefined) } */
    this.b;
  }
};




mojo.internal.Struct(
    regressionTests.BSpec.$,
    'B',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        regressionTests.ASpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.B = class {
  constructor() {
    /** @export { (regressionTests.A|undefined) } */
    this.a;
  }
};




mojo.internal.Struct(
    regressionTests.HandlesNameCollisionStructSpec.$,
    'HandlesNameCollisionStruct',
    [
      mojo.internal.StructField(
        'handles', 0,
        0,
        regressionTests.EmptyStructSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.HandlesNameCollisionStruct = class {
  constructor() {
    /** @export { !regressionTests.EmptyStruct } */
    this.handles;
  }
};




mojo.internal.Struct(
    regressionTests.HandlesHandleNameCollisionStructSpec.$,
    'HandlesHandleNameCollisionStruct',
    [
      mojo.internal.StructField(
        'handles', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.HandlesHandleNameCollisionStruct = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.handles;
  }
};




mojo.internal.Struct(
    regressionTests.HandlesUnionNameCollisionStructSpec.$,
    'HandlesUnionNameCollisionStruct',
    [
      mojo.internal.StructField(
        'handles', 0,
        0,
        regressionTests.HandlesNameCollisionUnionSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
regressionTests.HandlesUnionNameCollisionStruct = class {
  constructor() {
    /** @export { !regressionTests.HandlesNameCollisionUnion } */
    this.handles;
  }
};




mojo.internal.Struct(
    regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ParamsSpec.$,
    'CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_Params',
    [
    ],
    [[0, 8],]);





/** @record */
regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParamsSpec.$,
    'CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
regressionTests.CheckMethodWithEmptyResponse_WithouParameterAndEmptyResponse_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ParamsSpec.$,
    'CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params',
    [
      mojo.internal.StructField(
        'b', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.b;
  }
};




mojo.internal.Struct(
    regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParamsSpec.$,
    'CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
regressionTests.CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    regressionTests.CheckNameCollision_WithNameCollision_ParamsSpec.$,
    'CheckNameCollision_WithNameCollision_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'response', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.CheckNameCollision_WithNameCollision_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.message;
    /** @export { !boolean } */
    this.response;
  }
};




mojo.internal.Struct(
    regressionTests.CheckNameCollision_WithNameCollision_ResponseParamsSpec.$,
    'CheckNameCollision_WithNameCollision_ResponseParams',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'response', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.CheckNameCollision_WithNameCollision_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.message;
    /** @export { !boolean } */
    this.response;
  }
};




mojo.internal.Struct(
    regressionTests.HandlesNameCollisionInterface_Method_ParamsSpec.$,
    'HandlesNameCollisionInterface_Method_Params',
    [
      mojo.internal.StructField(
        'handles', 0,
        0,
        regressionTests.EmptyStructSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.HandlesNameCollisionInterface_Method_Params = class {
  constructor() {
    /** @export { !regressionTests.EmptyStruct } */
    this.handles;
  }
};




mojo.internal.Struct(
    regressionTests.HandlesNameCollisionInterface_Method_ResponseParamsSpec.$,
    'HandlesNameCollisionInterface_Method_ResponseParams',
    [
      mojo.internal.StructField(
        'handles', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
regressionTests.HandlesNameCollisionInterface_Method_ResponseParams = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.handles;
  }
};




mojo.internal.Union(
    regressionTests.HandlesNameCollisionUnionSpec.$, 'HandlesNameCollisionUnion',
    {
      'handles': {
        'ordinal': 0,
        'type': mojo.internal.Int32,
      },
    });

/**
 * @typedef { {
 *   handles: (!number|undefined),
 * } }
 */
regressionTests.HandlesNameCollisionUnion;
