// mojo/public/interfaces/bindings/tests/ping_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/ping_service.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/ping_service.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

class PingServiceProxy;

template <typename ImplRefTraits>
class PingServiceStub;

class PingServiceRequestValidator;
class PingServiceResponseValidator;


// @generated_from: mojo.test.PingService
class  PingService
    : public PingServiceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = PingServiceInterfaceBase;
  using Proxy_ = PingServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = PingServiceStub<ImplRefTraits>;

  using RequestValidator_ = PingServiceRequestValidator;
  using ResponseValidator_ = PingServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
  };
  virtual ~PingService() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.PingService.Ping
  virtual bool Ping();

  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.PingService.Ping
  virtual void Ping(PingCallback callback) = 0;
};

class EchoServiceProxy;

template <typename ImplRefTraits>
class EchoServiceStub;

class EchoServiceRequestValidator;
class EchoServiceResponseValidator;


// @generated_from: mojo.test.EchoService
class  EchoService
    : public EchoServiceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = EchoServiceInterfaceBase;
  using Proxy_ = EchoServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = EchoServiceStub<ImplRefTraits>;

  using RequestValidator_ = EchoServiceRequestValidator;
  using ResponseValidator_ = EchoServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoMinVersion = 0,
  };
  virtual ~EchoService() {}


  using EchoCallback = base::OnceCallback<void(const std::string&)>;
  
// @generated_from: mojo.test.EchoService.Echo
  virtual void Echo(const std::string& test_data, EchoCallback callback) = 0;
};

class HandleTrampolineProxy;

template <typename ImplRefTraits>
class HandleTrampolineStub;

class HandleTrampolineRequestValidator;
class HandleTrampolineResponseValidator;


// @generated_from: mojo.test.HandleTrampoline
class  HandleTrampoline
    : public HandleTrampolineInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = HandleTrampolineInterfaceBase;
  using Proxy_ = HandleTrampolineProxy;

  template <typename ImplRefTraits>
  using Stub_ = HandleTrampolineStub<ImplRefTraits>;

  using RequestValidator_ = HandleTrampolineRequestValidator;
  using ResponseValidator_ = HandleTrampolineResponseValidator;
  enum MethodMinVersions : uint32_t {
    kBounceOneMinVersion = 0,
    kBounceTwoMinVersion = 0,
  };
  virtual ~HandleTrampoline() {}


  using BounceOneCallback = base::OnceCallback<void(::mojo::ScopedMessagePipeHandle)>;
  
// @generated_from: mojo.test.HandleTrampoline.BounceOne
  virtual void BounceOne(::mojo::ScopedMessagePipeHandle one, BounceOneCallback callback) = 0;


  using BounceTwoCallback = base::OnceCallback<void(::mojo::ScopedMessagePipeHandle, ::mojo::ScopedMessagePipeHandle)>;
  
// @generated_from: mojo.test.HandleTrampoline.BounceTwo
  virtual void BounceTwo(::mojo::ScopedMessagePipeHandle one, ::mojo::ScopedMessagePipeHandle two, BounceTwoCallback callback) = 0;
};



// @generated_from: mojo.test.PingService
class  PingServiceProxy
    : public PingService {
 public:
  using InterfaceType = PingService;

  explicit PingServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.PingService.Ping
  bool Ping() final;
  
// @generated_from: mojo.test.PingService.Ping
  void Ping(PingCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.EchoService
class  EchoServiceProxy
    : public EchoService {
 public:
  using InterfaceType = EchoService;

  explicit EchoServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.EchoService.Echo
  void Echo(const std::string& test_data, EchoCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.HandleTrampoline
class  HandleTrampolineProxy
    : public HandleTrampoline {
 public:
  using InterfaceType = HandleTrampoline;

  explicit HandleTrampolineProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.HandleTrampoline.BounceOne
  void BounceOne(::mojo::ScopedMessagePipeHandle one, BounceOneCallback callback) final;
  
// @generated_from: mojo.test.HandleTrampoline.BounceTwo
  void BounceTwo(::mojo::ScopedMessagePipeHandle one, ::mojo::ScopedMessagePipeHandle two, BounceTwoCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PingServiceStubDispatch {
 public:
  static bool Accept(PingService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PingService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PingService>>
class PingServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PingServiceStub() {}
  ~PingServiceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  EchoServiceStubDispatch {
 public:
  static bool Accept(EchoService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      EchoService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<EchoService>>
class EchoServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  EchoServiceStub() {}
  ~EchoServiceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return EchoServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return EchoServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  HandleTrampolineStubDispatch {
 public:
  static bool Accept(HandleTrampoline* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      HandleTrampoline* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<HandleTrampoline>>
class HandleTrampolineStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  HandleTrampolineStub() {}
  ~HandleTrampolineStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return HandleTrampolineStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return HandleTrampolineStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PingServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  EchoServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  HandleTrampolineRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  EchoServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  HandleTrampolineResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTg4MCwgImJlZ2luIjogMTg2OSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5QaW5nU2VydmljZSJ9fSwgeyJlbmQi
OiAyNjg2LCAiYmVnaW4iOiAyNjgyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LlBpbmdTZXJ2aWNlLlBpbmcifX0sIHsiZW5kIjogMjgxMSwgImJl
Z2luIjogMjgwNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5QaW5nU2VydmljZS5QaW5nIn19LCB7ImVuZCI6IDMwNjAsICJiZWdpbiI6IDMwNDks
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuRWNo
b1NlcnZpY2UifX0sIHsiZW5kIjogMzgwMiwgImJlZ2luIjogMzc5OCwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5FY2hvU2VydmljZS5FY2hvIn19
LCB7ImVuZCI6IDQxMTEsICJiZWdpbiI6IDQwOTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVHJhbXBvbGluZSJ9fSwgeyJlbmQiOiA0
OTU2LCAiYmVnaW4iOiA0OTQ3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LkhhbmRsZVRyYW1wb2xpbmUuQm91bmNlT25lIn19LCB7ImVuZCI6IDUy
MzMsICJiZWdpbiI6IDUyMjQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuSGFuZGxlVHJhbXBvbGluZS5Cb3VuY2VUd28ifX0sIHsiZW5kIjogNTYy
MywgImJlZ2luIjogNTYxOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5QaW5nU2VydmljZS5QaW5nIn19LCB7ImVuZCI6IDU2OTQsICJiZWdpbiI6
IDU2OTAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuUGluZ1NlcnZpY2UuUGluZyJ9fSwgeyJlbmQiOiA2MDY3LCAiYmVnaW4iOiA2MDYzLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkVjaG9TZXJ2
aWNlLkVjaG8ifX0sIHsiZW5kIjogNjUxMCwgImJlZ2luIjogNjUwMSwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5IYW5kbGVUcmFtcG9saW5lLkJv
dW5jZU9uZSJ9fSwgeyJlbmQiOiA2NjU5LCAiYmVnaW4iOiA2NjUwLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkhhbmRsZVRyYW1wb2xpbmUuQm91
bmNlVHdvIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/