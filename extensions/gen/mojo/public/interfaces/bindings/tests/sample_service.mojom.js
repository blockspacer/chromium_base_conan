// mojo/public/interfaces/bindings/tests/sample_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/sample_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('sample');
  var sample_import$ =
      mojo.internal.exposeNamespace('imported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/interfaces/bindings/tests/sample_import.mojom', 'sample_import.mojom.js');
  }
  var sample_import2$ =
      mojo.internal.exposeNamespace('imported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/interfaces/bindings/tests/sample_import2.mojom', 'sample_import2.mojom.js');
  }


  var TWELVE = 12;

  function Bar(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  Bar.Type = {};
  Bar.Type.VERTICAL = 1;
  Bar.Type.HORIZONTAL = 2;
  Bar.Type.BOTH = 3;
  Bar.Type.INVALID = 4;
  Bar.Type.MIN_VALUE = 1;
  Bar.Type.MAX_VALUE = 4;

  Bar.Type.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  Bar.Type.toKnownEnumValue = function(value) {
    return value;
  };

  Bar.Type.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  Bar.prototype.initDefaults_ = function() {
    this.alpha = 0xff;
    this.beta = 0;
    this.gamma = 0;
    this.type = Bar.Type.VERTICAL;
  };
  Bar.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Bar.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate Bar.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, Bar.Type);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Bar.encodedSize = codec.kStructHeaderSize + 8;

  Bar.decode = function(decoder) {
    var packed;
    var val = new Bar();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.alpha =
        decoder.decodeStruct(codec.Uint8);
    val.beta =
        decoder.decodeStruct(codec.Uint8);
    val.gamma =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.type =
        decoder.decodeStruct(new codec.Enum(Bar.Type));
    return val;
  };

  Bar.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Bar.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.alpha);
    encoder.encodeStruct(codec.Uint8, val.beta);
    encoder.encodeStruct(codec.Uint8, val.gamma);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.type);
  };
  function Foo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Foo.FOOBY = "Fooby";
  Foo.prototype.initDefaults_ = function() {
    this.x = 0;
    this.y = 0;
    this.a = true;
    this.b = false;
    this.c = false;
    this.source = null;
    this.bar = null;
    this.data = null;
    this.extraBars = null;
    this.name = Foo.FOOBY;
    this.inputStreams = null;
    this.outputStreams = null;
    this.arrayOfArrayOfBools = null;
    this.multiArrayOfStrings = null;
    this.arrayOfBools = null;
  };
  Foo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Foo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 96}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;







    // validate Foo.bar
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, Bar, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.extraBars
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(Bar), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.source
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 12, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.inputStreams
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 4, codec.Handle, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.outputStreams
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 56, 4, codec.Handle, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.arrayOfArrayOfBools
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 64, 8, new codec.ArrayOf(codec.PackedBool), true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.multiArrayOfStrings
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 72, 8, new codec.ArrayOf(new codec.ArrayOf(codec.String)), true, [0, 0, 0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo.arrayOfBools
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 1, codec.PackedBool, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Foo.encodedSize = codec.kStructHeaderSize + 88;

  Foo.decode = function(decoder) {
    var packed;
    var val = new Foo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeStruct(codec.Int32);
    val.y =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.a = (packed >> 0) & 1 ? true : false;
    val.b = (packed >> 1) & 1 ? true : false;
    val.c = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.source =
        decoder.decodeStruct(codec.NullableHandle);
    val.bar =
        decoder.decodeStructPointer(Bar);
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    val.extraBars =
        decoder.decodeArrayPointer(new codec.PointerTo(Bar));
    val.name =
        decoder.decodeStruct(codec.String);
    val.inputStreams =
        decoder.decodeArrayPointer(codec.Handle);
    val.outputStreams =
        decoder.decodeArrayPointer(codec.Handle);
    val.arrayOfArrayOfBools =
        decoder.decodeArrayPointer(new codec.ArrayOf(codec.PackedBool));
    val.multiArrayOfStrings =
        decoder.decodeArrayPointer(new codec.ArrayOf(new codec.ArrayOf(codec.String)));
    val.arrayOfBools =
        decoder.decodeArrayPointer(codec.PackedBool);
    return val;
  };

  Foo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Foo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.x);
    encoder.encodeStruct(codec.Int32, val.y);
    packed = 0;
    packed |= (val.a & 1) << 0
    packed |= (val.b & 1) << 1
    packed |= (val.c & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableHandle, val.source);
    encoder.encodeStructPointer(Bar, val.bar);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
    encoder.encodeArrayPointer(new codec.PointerTo(Bar), val.extraBars);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeArrayPointer(codec.Handle, val.inputStreams);
    encoder.encodeArrayPointer(codec.Handle, val.outputStreams);
    encoder.encodeArrayPointer(new codec.ArrayOf(codec.PackedBool), val.arrayOfArrayOfBools);
    encoder.encodeArrayPointer(new codec.ArrayOf(new codec.ArrayOf(codec.String)), val.multiArrayOfStrings);
    encoder.encodeArrayPointer(codec.PackedBool, val.arrayOfBools);
  };
  function DefaultsTest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DefaultsTest.prototype.initDefaults_ = function() {
    this.a0 = -12;
    this.a1 = TWELVE;
    this.a2 = 1234;
    this.a3 = 34567;
    this.a11 = true;
    this.a12 = false;
    this.a4 = 123456;
    this.a5 = 3456789012;
    this.a6 = -111111111111;
    this.a7 = 9999999999999999999;
    this.a8 = 0x12345;
    this.a9 = -0x12345;
    this.a10 = +1234;
    this.a13 = 123.25;
    this.a14 = 1234567890.123;
    this.a15 = 1E10;
    this.a16 = -1.2E+20;
    this.a17 = +1.23E-20;
    this.a18 = null;
    this.a19 = null;
    this.a20 = Bar.Type.BOTH;
    this.a29 = Infinity;
    this.a21 = null;
    this.a22 = new sample_import2$.Thing();
    this.a23 = 0xFFFFFFFFFFFFFFFF;
    this.a24 = 0x123456789;
    this.a25 = -0x123456789;
    this.a26 = Infinity;
    this.a27 = -Infinity;
    this.a28 = NaN;
    this.a30 = -Infinity;
    this.a31 = NaN;
  };
  DefaultsTest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DefaultsTest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 184}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




















    // validate DefaultsTest.a18
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsTest.a19
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 88, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsTest.a20
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 96, Bar.Type);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsTest.a21
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, sample_import$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsTest.a22
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 112, sample_import2$.Thing, false);
    if (err !== validator.validationError.NONE)
        return err;










    return validator.validationError.NONE;
  };

  DefaultsTest.encodedSize = codec.kStructHeaderSize + 176;

  DefaultsTest.decode = function(decoder) {
    var packed;
    var val = new DefaultsTest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a0 =
        decoder.decodeStruct(codec.Int8);
    val.a1 =
        decoder.decodeStruct(codec.Uint8);
    val.a2 =
        decoder.decodeStruct(codec.Int16);
    val.a3 =
        decoder.decodeStruct(codec.Uint16);
    packed = decoder.readUint8();
    val.a11 = (packed >> 0) & 1 ? true : false;
    val.a12 = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    val.a4 =
        decoder.decodeStruct(codec.Int32);
    val.a5 =
        decoder.decodeStruct(codec.Uint32);
    val.a6 =
        decoder.decodeStruct(codec.Int64);
    val.a7 =
        decoder.decodeStruct(codec.Uint64);
    val.a8 =
        decoder.decodeStruct(codec.Int32);
    val.a9 =
        decoder.decodeStruct(codec.Int32);
    val.a10 =
        decoder.decodeStruct(codec.Int32);
    val.a13 =
        decoder.decodeStruct(codec.Float);
    val.a14 =
        decoder.decodeStruct(codec.Double);
    val.a15 =
        decoder.decodeStruct(codec.Double);
    val.a16 =
        decoder.decodeStruct(codec.Double);
    val.a17 =
        decoder.decodeStruct(codec.Double);
    val.a18 =
        decoder.decodeArrayPointer(codec.Uint8);
    val.a19 =
        decoder.decodeStruct(codec.String);
    val.a20 =
        decoder.decodeStruct(new codec.Enum(Bar.Type));
    val.a29 =
        decoder.decodeStruct(codec.Float);
    val.a21 =
        decoder.decodeStructPointer(sample_import$.Point);
    val.a22 =
        decoder.decodeStructPointer(sample_import2$.Thing);
    val.a23 =
        decoder.decodeStruct(codec.Uint64);
    val.a24 =
        decoder.decodeStruct(codec.Int64);
    val.a25 =
        decoder.decodeStruct(codec.Int64);
    val.a26 =
        decoder.decodeStruct(codec.Double);
    val.a27 =
        decoder.decodeStruct(codec.Double);
    val.a28 =
        decoder.decodeStruct(codec.Double);
    val.a30 =
        decoder.decodeStruct(codec.Float);
    val.a31 =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  DefaultsTest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DefaultsTest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.a0);
    encoder.encodeStruct(codec.Uint8, val.a1);
    encoder.encodeStruct(codec.Int16, val.a2);
    encoder.encodeStruct(codec.Uint16, val.a3);
    packed = 0;
    packed |= (val.a11 & 1) << 0
    packed |= (val.a12 & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.a4);
    encoder.encodeStruct(codec.Uint32, val.a5);
    encoder.encodeStruct(codec.Int64, val.a6);
    encoder.encodeStruct(codec.Uint64, val.a7);
    encoder.encodeStruct(codec.Int32, val.a8);
    encoder.encodeStruct(codec.Int32, val.a9);
    encoder.encodeStruct(codec.Int32, val.a10);
    encoder.encodeStruct(codec.Float, val.a13);
    encoder.encodeStruct(codec.Double, val.a14);
    encoder.encodeStruct(codec.Double, val.a15);
    encoder.encodeStruct(codec.Double, val.a16);
    encoder.encodeStruct(codec.Double, val.a17);
    encoder.encodeArrayPointer(codec.Uint8, val.a18);
    encoder.encodeStruct(codec.String, val.a19);
    encoder.encodeStruct(codec.Int32, val.a20);
    encoder.encodeStruct(codec.Float, val.a29);
    encoder.encodeStructPointer(sample_import$.Point, val.a21);
    encoder.encodeStructPointer(sample_import2$.Thing, val.a22);
    encoder.encodeStruct(codec.Uint64, val.a23);
    encoder.encodeStruct(codec.Int64, val.a24);
    encoder.encodeStruct(codec.Int64, val.a25);
    encoder.encodeStruct(codec.Double, val.a26);
    encoder.encodeStruct(codec.Double, val.a27);
    encoder.encodeStruct(codec.Double, val.a28);
    encoder.encodeStruct(codec.Float, val.a30);
    encoder.encodeStruct(codec.Float, val.a31);
  };
  function StructWithHoleV1(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithHoleV1.prototype.initDefaults_ = function() {
    this.v1 = 1;
    this.v2 = 2;
  };
  StructWithHoleV1.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithHoleV1.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  StructWithHoleV1.encodedSize = codec.kStructHeaderSize + 16;

  StructWithHoleV1.decode = function(decoder) {
    var packed;
    var val = new StructWithHoleV1();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.v1 =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.v2 =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  StructWithHoleV1.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithHoleV1.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.v1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.v2);
  };
  function StructWithHoleV2(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithHoleV2.prototype.initDefaults_ = function() {
    this.v1 = 1;
    this.v3 = 3;
    this.v2 = 2;
  };
  StructWithHoleV2.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithHoleV2.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  StructWithHoleV2.encodedSize = codec.kStructHeaderSize + 16;

  StructWithHoleV2.decode = function(decoder) {
    var packed;
    var val = new StructWithHoleV2();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.v1 =
        decoder.decodeStruct(codec.Int32);
    val.v3 =
        decoder.decodeStruct(codec.Int32);
    val.v2 =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  StructWithHoleV2.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithHoleV2.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.v1);
    encoder.encodeStruct(codec.Int32, val.v3);
    encoder.encodeStruct(codec.Int64, val.v2);
  };
  function DefaultsSender_SendBar_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DefaultsSender_SendBar_Params.prototype.initDefaults_ = function() {
    this.bar = null;
  };
  DefaultsSender_SendBar_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DefaultsSender_SendBar_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsSender_SendBar_Params.bar
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Bar, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DefaultsSender_SendBar_Params.encodedSize = codec.kStructHeaderSize + 8;

  DefaultsSender_SendBar_Params.decode = function(decoder) {
    var packed;
    var val = new DefaultsSender_SendBar_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bar =
        decoder.decodeStructPointer(Bar);
    return val;
  };

  DefaultsSender_SendBar_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DefaultsSender_SendBar_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Bar, val.bar);
  };
  function DefaultsSender_SendFoo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DefaultsSender_SendFoo_Params.prototype.initDefaults_ = function() {
    this.foo = null;
  };
  DefaultsSender_SendFoo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DefaultsSender_SendFoo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsSender_SendFoo_Params.foo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Foo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DefaultsSender_SendFoo_Params.encodedSize = codec.kStructHeaderSize + 8;

  DefaultsSender_SendFoo_Params.decode = function(decoder) {
    var packed;
    var val = new DefaultsSender_SendFoo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.foo =
        decoder.decodeStructPointer(Foo);
    return val;
  };

  DefaultsSender_SendFoo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DefaultsSender_SendFoo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Foo, val.foo);
  };
  function DefaultsSender_SendDefaultsTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DefaultsSender_SendDefaultsTest_Params.prototype.initDefaults_ = function() {
    this.defaults = null;
  };
  DefaultsSender_SendDefaultsTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DefaultsSender_SendDefaultsTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DefaultsSender_SendDefaultsTest_Params.defaults
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DefaultsTest, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DefaultsSender_SendDefaultsTest_Params.encodedSize = codec.kStructHeaderSize + 8;

  DefaultsSender_SendDefaultsTest_Params.decode = function(decoder) {
    var packed;
    var val = new DefaultsSender_SendDefaultsTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.defaults =
        decoder.decodeStructPointer(DefaultsTest);
    return val;
  };

  DefaultsSender_SendDefaultsTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DefaultsSender_SendDefaultsTest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DefaultsTest, val.defaults);
  };
  function Service_Frobinate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Service_Frobinate_Params.prototype.initDefaults_ = function() {
    this.foo = null;
    this.baz = 0;
    this.port = new PortPtr();
  };
  Service_Frobinate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Service_Frobinate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Service_Frobinate_Params.foo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Foo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Service_Frobinate_Params.baz
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, Service.BazOptions);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Service_Frobinate_Params.port
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Service_Frobinate_Params.encodedSize = codec.kStructHeaderSize + 24;

  Service_Frobinate_Params.decode = function(decoder) {
    var packed;
    var val = new Service_Frobinate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.foo =
        decoder.decodeStructPointer(Foo);
    val.baz =
        decoder.decodeStruct(new codec.Enum(Service.BazOptions));
    val.port =
        decoder.decodeStruct(new codec.NullableInterface(PortPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Service_Frobinate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Service_Frobinate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Foo, val.foo);
    encoder.encodeStruct(codec.Int32, val.baz);
    encoder.encodeStruct(new codec.NullableInterface(PortPtr), val.port);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Service_Frobinate_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Service_Frobinate_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  Service_Frobinate_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Service_Frobinate_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Service_Frobinate_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Service_Frobinate_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Service_Frobinate_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Service_Frobinate_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Service_Frobinate_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Service_GetPort_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Service_GetPort_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  Service_GetPort_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Service_GetPort_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Service_GetPort_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Service_GetPort_Params.encodedSize = codec.kStructHeaderSize + 8;

  Service_GetPort_Params.decode = function(decoder) {
    var packed;
    var val = new Service_GetPort_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Service_GetPort_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Service_GetPort_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Port_PostMessageToPort_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Port_PostMessageToPort_Params.prototype.initDefaults_ = function() {
    this.messageText = null;
    this.port = new PortPtr();
  };
  Port_PostMessageToPort_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Port_PostMessageToPort_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Port_PostMessageToPort_Params.messageText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Port_PostMessageToPort_Params.port
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Port_PostMessageToPort_Params.encodedSize = codec.kStructHeaderSize + 16;

  Port_PostMessageToPort_Params.decode = function(decoder) {
    var packed;
    var val = new Port_PostMessageToPort_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.messageText =
        decoder.decodeStruct(codec.String);
    val.port =
        decoder.decodeStruct(new codec.Interface(PortPtr));
    return val;
  };

  Port_PostMessageToPort_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Port_PostMessageToPort_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.messageText);
    encoder.encodeStruct(new codec.Interface(PortPtr), val.port);
  };
  var kDefaultsSender_SendBar_Name = 0;
  var kDefaultsSender_SendFoo_Name = 1;
  var kDefaultsSender_SendDefaultsTest_Name = 2;

  function DefaultsSenderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DefaultsSender,
                                                   handleOrPtrInfo);
  }

  function DefaultsSenderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DefaultsSender, associatedInterfacePtrInfo);
  }

  DefaultsSenderAssociatedPtr.prototype =
      Object.create(DefaultsSenderPtr.prototype);
  DefaultsSenderAssociatedPtr.prototype.constructor =
      DefaultsSenderAssociatedPtr;

  function DefaultsSenderProxy(receiver) {
    this.receiver_ = receiver;
  }
  DefaultsSenderPtr.prototype.sendBar = function() {
    return DefaultsSenderProxy.prototype.sendBar
        .apply(this.ptr.getProxy(), arguments);
  };

  DefaultsSenderProxy.prototype.sendBar = function(bar) {
    var params_ = new DefaultsSender_SendBar_Params();
    params_.bar = bar;
    var builder = new codec.MessageV0Builder(
        kDefaultsSender_SendBar_Name,
        codec.align(DefaultsSender_SendBar_Params.encodedSize));
    builder.encodeStruct(DefaultsSender_SendBar_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DefaultsSenderPtr.prototype.sendFoo = function() {
    return DefaultsSenderProxy.prototype.sendFoo
        .apply(this.ptr.getProxy(), arguments);
  };

  DefaultsSenderProxy.prototype.sendFoo = function(foo) {
    var params_ = new DefaultsSender_SendFoo_Params();
    params_.foo = foo;
    var builder = new codec.MessageV0Builder(
        kDefaultsSender_SendFoo_Name,
        codec.align(DefaultsSender_SendFoo_Params.encodedSize));
    builder.encodeStruct(DefaultsSender_SendFoo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DefaultsSenderPtr.prototype.sendDefaultsTest = function() {
    return DefaultsSenderProxy.prototype.sendDefaultsTest
        .apply(this.ptr.getProxy(), arguments);
  };

  DefaultsSenderProxy.prototype.sendDefaultsTest = function(defaults) {
    var params_ = new DefaultsSender_SendDefaultsTest_Params();
    params_.defaults = defaults;
    var builder = new codec.MessageV0Builder(
        kDefaultsSender_SendDefaultsTest_Name,
        codec.align(DefaultsSender_SendDefaultsTest_Params.encodedSize));
    builder.encodeStruct(DefaultsSender_SendDefaultsTest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DefaultsSenderStub(delegate) {
    this.delegate_ = delegate;
  }
  DefaultsSenderStub.prototype.sendBar = function(bar) {
    return this.delegate_ && this.delegate_.sendBar && this.delegate_.sendBar(bar);
  }
  DefaultsSenderStub.prototype.sendFoo = function(foo) {
    return this.delegate_ && this.delegate_.sendFoo && this.delegate_.sendFoo(foo);
  }
  DefaultsSenderStub.prototype.sendDefaultsTest = function(defaults) {
    return this.delegate_ && this.delegate_.sendDefaultsTest && this.delegate_.sendDefaultsTest(defaults);
  }

  DefaultsSenderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDefaultsSender_SendBar_Name:
      var params = reader.decodeStruct(DefaultsSender_SendBar_Params);
      this.sendBar(params.bar);
      return true;
    case kDefaultsSender_SendFoo_Name:
      var params = reader.decodeStruct(DefaultsSender_SendFoo_Params);
      this.sendFoo(params.foo);
      return true;
    case kDefaultsSender_SendDefaultsTest_Name:
      var params = reader.decodeStruct(DefaultsSender_SendDefaultsTest_Params);
      this.sendDefaultsTest(params.defaults);
      return true;
    default:
      return false;
    }
  };

  DefaultsSenderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDefaultsSenderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDefaultsSender_SendBar_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DefaultsSender_SendBar_Params;
      break;
      case kDefaultsSender_SendFoo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DefaultsSender_SendFoo_Params;
      break;
      case kDefaultsSender_SendDefaultsTest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DefaultsSender_SendDefaultsTest_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDefaultsSenderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DefaultsSender = {
    name: 'sample.DefaultsSender',
    kVersion: 0,
    ptrClass: DefaultsSenderPtr,
    proxyClass: DefaultsSenderProxy,
    stubClass: DefaultsSenderStub,
    validateRequest: validateDefaultsSenderRequest,
    validateResponse: null,
  };
  DefaultsSenderStub.prototype.validator = validateDefaultsSenderRequest;
  DefaultsSenderProxy.prototype.validator = null;
  var kService_Frobinate_Name = 0;
  var kService_GetPort_Name = 1;

  function ServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Service,
                                                   handleOrPtrInfo);
  }

  function ServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Service, associatedInterfacePtrInfo);
  }

  ServiceAssociatedPtr.prototype =
      Object.create(ServicePtr.prototype);
  ServiceAssociatedPtr.prototype.constructor =
      ServiceAssociatedPtr;

  function ServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServicePtr.prototype.frobinate = function() {
    return ServiceProxy.prototype.frobinate
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceProxy.prototype.frobinate = function(foo, baz, port) {
    var params_ = new Service_Frobinate_Params();
    params_.foo = foo;
    params_.baz = baz;
    params_.port = port;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kService_Frobinate_Name,
          codec.align(Service_Frobinate_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Service_Frobinate_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Service_Frobinate_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServicePtr.prototype.getPort = function() {
    return ServiceProxy.prototype.getPort
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceProxy.prototype.getPort = function(receiver) {
    var params_ = new Service_GetPort_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kService_GetPort_Name,
        codec.align(Service_GetPort_Params.encodedSize));
    builder.encodeStruct(Service_GetPort_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceStub.prototype.frobinate = function(foo, baz, port) {
    return this.delegate_ && this.delegate_.frobinate && this.delegate_.frobinate(foo, baz, port);
  }
  ServiceStub.prototype.getPort = function(receiver) {
    return this.delegate_ && this.delegate_.getPort && this.delegate_.getPort(receiver);
  }

  ServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kService_GetPort_Name:
      var params = reader.decodeStruct(Service_GetPort_Params);
      this.getPort(params.receiver);
      return true;
    default:
      return false;
    }
  };

  ServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kService_Frobinate_Name:
      var params = reader.decodeStruct(Service_Frobinate_Params);
      this.frobinate(params.foo, params.baz, params.port).then(function(response) {
        var responseParams =
            new Service_Frobinate_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kService_Frobinate_Name,
            codec.align(Service_Frobinate_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Service_Frobinate_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kService_Frobinate_Name:
        if (message.expectsResponse())
          paramsClass = Service_Frobinate_Params;
      break;
      case kService_GetPort_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Service_GetPort_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kService_Frobinate_Name:
        if (message.isResponse())
          paramsClass = Service_Frobinate_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Service = {
    name: 'sample.Service',
    kVersion: 0,
    ptrClass: ServicePtr,
    proxyClass: ServiceProxy,
    stubClass: ServiceStub,
    validateRequest: validateServiceRequest,
    validateResponse: validateServiceResponse,
  };
  Service.FAVORITE_BAZ = 1,
  Service.BazOptions = {};
  Service.BazOptions.REGULAR = 0;
  Service.BazOptions.EXTRA = 1;
  Service.BazOptions.MIN_VALUE = 0;
  Service.BazOptions.MAX_VALUE = 1;

  Service.BazOptions.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Service.BazOptions.toKnownEnumValue = function(value) {
    return value;
  };

  Service.BazOptions.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  ServiceStub.prototype.validator = validateServiceRequest;
  ServiceProxy.prototype.validator = validateServiceResponse;
  var kPort_PostMessageToPort_Name = 0;

  function PortPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Port,
                                                   handleOrPtrInfo);
  }

  function PortAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Port, associatedInterfacePtrInfo);
  }

  PortAssociatedPtr.prototype =
      Object.create(PortPtr.prototype);
  PortAssociatedPtr.prototype.constructor =
      PortAssociatedPtr;

  function PortProxy(receiver) {
    this.receiver_ = receiver;
  }
  PortPtr.prototype.postMessageToPort = function() {
    return PortProxy.prototype.postMessageToPort
        .apply(this.ptr.getProxy(), arguments);
  };

  PortProxy.prototype.postMessageToPort = function(messageText, port) {
    var params_ = new Port_PostMessageToPort_Params();
    params_.messageText = messageText;
    params_.port = port;
    var builder = new codec.MessageV0Builder(
        kPort_PostMessageToPort_Name,
        codec.align(Port_PostMessageToPort_Params.encodedSize));
    builder.encodeStruct(Port_PostMessageToPort_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PortStub(delegate) {
    this.delegate_ = delegate;
  }
  PortStub.prototype.postMessageToPort = function(messageText, port) {
    return this.delegate_ && this.delegate_.postMessageToPort && this.delegate_.postMessageToPort(messageText, port);
  }

  PortStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPort_PostMessageToPort_Name:
      var params = reader.decodeStruct(Port_PostMessageToPort_Params);
      this.postMessageToPort(params.messageText, params.port);
      return true;
    default:
      return false;
    }
  };

  PortStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePortRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPort_PostMessageToPort_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Port_PostMessageToPort_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePortResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Port = {
    name: 'sample.Port',
    kVersion: 0,
    ptrClass: PortPtr,
    proxyClass: PortProxy,
    stubClass: PortStub,
    validateRequest: validatePortRequest,
    validateResponse: null,
  };
  PortStub.prototype.validator = validatePortRequest;
  PortProxy.prototype.validator = null;
  exports.TWELVE = TWELVE;
  exports.Bar = Bar;
  exports.Foo = Foo;
  exports.DefaultsTest = DefaultsTest;
  exports.StructWithHoleV1 = StructWithHoleV1;
  exports.StructWithHoleV2 = StructWithHoleV2;
  exports.DefaultsSender = DefaultsSender;
  exports.DefaultsSenderPtr = DefaultsSenderPtr;
  exports.DefaultsSenderAssociatedPtr = DefaultsSenderAssociatedPtr;
  exports.Service = Service;
  exports.ServicePtr = ServicePtr;
  exports.ServiceAssociatedPtr = ServiceAssociatedPtr;
  exports.Port = Port;
  exports.PortPtr = PortPtr;
  exports.PortAssociatedPtr = PortAssociatedPtr;
})();