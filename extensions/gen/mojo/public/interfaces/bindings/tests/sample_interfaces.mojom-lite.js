// mojo/public/interfaces/bindings/tests/sample_interfaces.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('sample');




/**
 * @const { !bigint }
 * @export
 */
sample.LONG = BigInt('4405');


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
sample.EnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
sample.Enum = {
  
  VALUE: 0,
  MIN_VALUE: 0,
  MAX_VALUE: 0,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
sample.PingTestPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        sample.PingTest.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { sample.PingTestInterface }
 */
sample.PingTestRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!sample.PingTestPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          sample.PingTestPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!sample.PingTestPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        0,
        sample.PingTest_Ping_ParamsSpec.$,
        sample.PingTest_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PingTest
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
sample.PingTestReceiver = class {
  /**
   * @param {!sample.PingTestInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!sample.PingTestRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        sample.PingTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.PingTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        sample.PingTest_Ping_ParamsSpec.$,
        sample.PingTest_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
sample.PingTest = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.PingTest";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!sample.PingTestRemote}
   * @export
   */
  static getRemote() {
    let remote = new sample.PingTestRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PingTest
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
sample.PingTestCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      sample.PingTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.PingTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        sample.PingTest_Ping_ParamsSpec.$,
        sample.PingTest_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
sample.ProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        sample.Provider.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { sample.ProviderInterface }
 */
sample.ProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!sample.ProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          sample.ProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!sample.ProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } a
   * @return {!Promise<{
        a: !string,
   *  }>}
   */

  echoString(
      a) {
    return this.proxy.sendMessage(
        0,
        sample.Provider_EchoString_ParamsSpec.$,
        sample.Provider_EchoString_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { !string } a
   * @param { !string } b
   * @return {!Promise<{
        a: !string,
        b: !string,
   *  }>}
   */

  echoStrings(
      a,
      b) {
    return this.proxy.sendMessage(
        1,
        sample.Provider_EchoStrings_ParamsSpec.$,
        sample.Provider_EchoStrings_ResponseParamsSpec.$,
        [
          a,
          b
        ]);
  }

  
  /**
   * @param { !MojoHandle } a
   * @return {!Promise<{
        a: !MojoHandle,
   *  }>}
   */

  echoMessagePipeHandle(
      a) {
    return this.proxy.sendMessage(
        2,
        sample.Provider_EchoMessagePipeHandle_ParamsSpec.$,
        sample.Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { !sample.Enum } a
   * @return {!Promise<{
        a: !sample.Enum,
   *  }>}
   */

  echoEnum(
      a) {
    return this.proxy.sendMessage(
        3,
        sample.Provider_EchoEnum_ParamsSpec.$,
        sample.Provider_EchoEnum_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { !number } a
   * @return {!Promise<{
        a: !number,
   *  }>}
   */

  echoInt(
      a) {
    return this.proxy.sendMessage(
        4,
        sample.Provider_EchoInt_ParamsSpec.$,
        sample.Provider_EchoInt_ResponseParamsSpec.$,
        [
          a
        ]);
  }
};

/**
 * An object which receives request messages for the Provider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
sample.ProviderReceiver = class {
  /**
   * @param {!sample.ProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!sample.ProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        sample.ProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.ProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        sample.Provider_EchoString_ParamsSpec.$,
        sample.Provider_EchoString_ResponseParamsSpec.$,
        impl.echoString.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        sample.Provider_EchoStrings_ParamsSpec.$,
        sample.Provider_EchoStrings_ResponseParamsSpec.$,
        impl.echoStrings.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        sample.Provider_EchoMessagePipeHandle_ParamsSpec.$,
        sample.Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        impl.echoMessagePipeHandle.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        sample.Provider_EchoEnum_ParamsSpec.$,
        sample.Provider_EchoEnum_ResponseParamsSpec.$,
        impl.echoEnum.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        sample.Provider_EchoInt_ParamsSpec.$,
        sample.Provider_EchoInt_ResponseParamsSpec.$,
        impl.echoInt.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
sample.Provider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.Provider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!sample.ProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new sample.ProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Provider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
sample.ProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      sample.ProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.ProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoString =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        sample.Provider_EchoString_ParamsSpec.$,
        sample.Provider_EchoString_ResponseParamsSpec.$,
        this.echoString.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoStrings =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        sample.Provider_EchoStrings_ParamsSpec.$,
        sample.Provider_EchoStrings_ResponseParamsSpec.$,
        this.echoStrings.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoMessagePipeHandle =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        sample.Provider_EchoMessagePipeHandle_ParamsSpec.$,
        sample.Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        this.echoMessagePipeHandle.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoEnum =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        sample.Provider_EchoEnum_ParamsSpec.$,
        sample.Provider_EchoEnum_ResponseParamsSpec.$,
        this.echoEnum.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoInt =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        sample.Provider_EchoInt_ParamsSpec.$,
        sample.Provider_EchoInt_ResponseParamsSpec.$,
        this.echoInt.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
sample.IntegerAccessorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        sample.IntegerAccessor.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { sample.IntegerAccessorInterface }
 */
sample.IntegerAccessorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!sample.IntegerAccessorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          sample.IntegerAccessorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!sample.IntegerAccessorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        data: !bigint,
        type: !sample.Enum,
   *  }>}
   */

  getInteger() {
    return this.proxy.sendMessage(
        0,
        sample.IntegerAccessor_GetInteger_ParamsSpec.$,
        sample.IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !bigint } data
   * @param { !sample.Enum } type
   */

  setInteger(
      data,
      type) {
    this.proxy.sendMessage(
        1,
        sample.IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        [
          data,
          type
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerAccessor
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
sample.IntegerAccessorReceiver = class {
  /**
   * @param {!sample.IntegerAccessorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!sample.IntegerAccessorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        sample.IntegerAccessorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.IntegerAccessorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        sample.IntegerAccessor_GetInteger_ParamsSpec.$,
        sample.IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        impl.getInteger.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        sample.IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        impl.setInteger.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
sample.IntegerAccessor = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.IntegerAccessor";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!sample.IntegerAccessorRemote}
   * @export
   */
  static getRemote() {
    let remote = new sample.IntegerAccessorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerAccessor
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
sample.IntegerAccessorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      sample.IntegerAccessorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.IntegerAccessorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getInteger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        sample.IntegerAccessor_GetInteger_ParamsSpec.$,
        sample.IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        this.getInteger.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setInteger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        sample.IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        this.setInteger.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
sample.InterfaceFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        sample.InterfaceFactory.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { sample.InterfaceFactoryInterface }
 */
sample.InterfaceFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!sample.InterfaceFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          sample.InterfaceFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!sample.InterfaceFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase.mojom.GenericPendingReceiver } receiver
   */

  bindInterface(
      receiver) {
    this.proxy.sendMessage(
        0,
        sample.InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the InterfaceFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
sample.InterfaceFactoryReceiver = class {
  /**
   * @param {!sample.InterfaceFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!sample.InterfaceFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        sample.InterfaceFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.InterfaceFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        sample.InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        impl.bindInterface.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
sample.InterfaceFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.InterfaceFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!sample.InterfaceFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new sample.InterfaceFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfaceFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
sample.InterfaceFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      sample.InterfaceFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!sample.InterfaceFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bindInterface =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        sample.InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        this.bindInterface.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.PingTest_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.PingTest_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoString_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoString_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoStrings_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoStrings_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoMessagePipeHandle_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoMessagePipeHandle_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoEnum_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoEnum_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoInt_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.Provider_EchoInt_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.IntegerAccessor_GetInteger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.IntegerAccessor_GetInteger_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.IntegerAccessor_SetInteger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
sample.InterfaceFactory_BindInterface_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    sample.PingTest_Ping_ParamsSpec.$,
    'PingTest_Ping_Params',
    [
    ],
    [[0, 8],]);





/** @record */
sample.PingTest_Ping_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    sample.PingTest_Ping_ResponseParamsSpec.$,
    'PingTest_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
sample.PingTest_Ping_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    sample.Provider_EchoString_ParamsSpec.$,
    'Provider_EchoString_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoString_Params = class {
  constructor() {
    /** @export { !string } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoString_ResponseParamsSpec.$,
    'Provider_EchoString_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoString_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoStrings_ParamsSpec.$,
    'Provider_EchoStrings_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'b', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
sample.Provider_EchoStrings_Params = class {
  constructor() {
    /** @export { !string } */
    this.a;
    /** @export { !string } */
    this.b;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoStrings_ResponseParamsSpec.$,
    'Provider_EchoStrings_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'b', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
sample.Provider_EchoStrings_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.a;
    /** @export { !string } */
    this.b;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoMessagePipeHandle_ParamsSpec.$,
    'Provider_EchoMessagePipeHandle_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoMessagePipeHandle_Params = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
    'Provider_EchoMessagePipeHandle_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoMessagePipeHandle_ResponseParams = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoEnum_ParamsSpec.$,
    'Provider_EchoEnum_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        sample.EnumSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoEnum_Params = class {
  constructor() {
    /** @export { !sample.Enum } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoEnum_ResponseParamsSpec.$,
    'Provider_EchoEnum_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        sample.EnumSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoEnum_ResponseParams = class {
  constructor() {
    /** @export { !sample.Enum } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoInt_ParamsSpec.$,
    'Provider_EchoInt_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoInt_Params = class {
  constructor() {
    /** @export { !number } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.Provider_EchoInt_ResponseParamsSpec.$,
    'Provider_EchoInt_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.Provider_EchoInt_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.a;
  }
};




mojo.internal.Struct(
    sample.IntegerAccessor_GetInteger_ParamsSpec.$,
    'IntegerAccessor_GetInteger_Params',
    [
    ],
    [[0, 8],]);





/** @record */
sample.IntegerAccessor_GetInteger_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    sample.IntegerAccessor_GetInteger_ResponseParamsSpec.$,
    'IntegerAccessor_GetInteger_ResponseParams',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'type', 8,
        0,
        sample.EnumSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],[2, 24],]);





/** @record */
sample.IntegerAccessor_GetInteger_ResponseParams = class {
  constructor() {
    /** @export { !bigint } */
    this.data;
    /** @export { !sample.Enum } */
    this.type;
  }
};




mojo.internal.Struct(
    sample.IntegerAccessor_SetInteger_ParamsSpec.$,
    'IntegerAccessor_SetInteger_Params',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'type', 8,
        0,
        sample.EnumSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],[3, 24],]);





/** @record */
sample.IntegerAccessor_SetInteger_Params = class {
  constructor() {
    /** @export { !bigint } */
    this.data;
    /** @export { !sample.Enum } */
    this.type;
  }
};




mojo.internal.Struct(
    sample.InterfaceFactory_BindInterface_ParamsSpec.$,
    'InterfaceFactory_BindInterface_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojoBase.mojom.GenericPendingReceiverSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
sample.InterfaceFactory_BindInterface_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.GenericPendingReceiver } */
    this.receiver;
  }
};


