// mojo/public/interfaces/bindings/tests/test_constants.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/test_constants.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');


  var BOOL_VALUE = true;
  var INT8_VALUE = -2;
  var UINT8_VALUE = 128;
  var INT16_VALUE = -233;
  var UINT16_VALUE = 44204;
  var INT32_VALUE = -44204;
  var UINT32_VALUE = 4294967295;
  var INT64_VALUE = -9223372036854775807;
  var UINT64_VALUE = 9999999999999999999;
  var DOUBLE_VALUE = 3.14159;
  var DOUBLE_INFINITY = Infinity;
  var DOUBLE_NEGATIVE_INFINITY = -Infinity;
  var DOUBLE_NA_N = NaN;
  var FLOAT_VALUE = 2.71828;
  var FLOAT_INFINITY = Infinity;
  var FLOAT_NEGATIVE_INFINITY = -Infinity;
  var FLOAT_NA_N = NaN;
  var STRING_VALUE = "test string contents";

  function StructWithConstants(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithConstants.INT8_VALUE = 5;
  StructWithConstants.FLOAT_VALUE = 765.432;
  StructWithConstants.STRING_VALUE = "struct test string contents";
  StructWithConstants.prototype.initDefaults_ = function() {
  };
  StructWithConstants.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithConstants.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithConstants.encodedSize = codec.kStructHeaderSize + 0;

  StructWithConstants.decode = function(decoder) {
    var packed;
    var val = new StructWithConstants();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StructWithConstants.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithConstants.encodedSize);
    encoder.writeUint32(0);
  };

  function InterfaceWithConstantsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfaceWithConstants,
                                                   handleOrPtrInfo);
  }

  function InterfaceWithConstantsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfaceWithConstants, associatedInterfacePtrInfo);
  }

  InterfaceWithConstantsAssociatedPtr.prototype =
      Object.create(InterfaceWithConstantsPtr.prototype);
  InterfaceWithConstantsAssociatedPtr.prototype.constructor =
      InterfaceWithConstantsAssociatedPtr;

  function InterfaceWithConstantsProxy(receiver) {
    this.receiver_ = receiver;
  }

  function InterfaceWithConstantsStub(delegate) {
    this.delegate_ = delegate;
  }

  InterfaceWithConstantsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InterfaceWithConstantsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateInterfaceWithConstantsRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateInterfaceWithConstantsResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var InterfaceWithConstants = {
    name: 'mojo.test.InterfaceWithConstants',
    kVersion: 0,
    ptrClass: InterfaceWithConstantsPtr,
    proxyClass: InterfaceWithConstantsProxy,
    stubClass: InterfaceWithConstantsStub,
    validateRequest: validateInterfaceWithConstantsRequest,
    validateResponse: null,
  };
  InterfaceWithConstants.UINT32_VALUE = 20100722,
  InterfaceWithConstants.DOUBLE_VALUE = 12.34567,
  InterfaceWithConstants.STRING_VALUE = "interface test string contents",
  InterfaceWithConstantsStub.prototype.validator = validateInterfaceWithConstantsRequest;
  InterfaceWithConstantsProxy.prototype.validator = null;
  exports.BOOL_VALUE = BOOL_VALUE;
  exports.INT8_VALUE = INT8_VALUE;
  exports.UINT8_VALUE = UINT8_VALUE;
  exports.INT16_VALUE = INT16_VALUE;
  exports.UINT16_VALUE = UINT16_VALUE;
  exports.INT32_VALUE = INT32_VALUE;
  exports.UINT32_VALUE = UINT32_VALUE;
  exports.INT64_VALUE = INT64_VALUE;
  exports.UINT64_VALUE = UINT64_VALUE;
  exports.DOUBLE_VALUE = DOUBLE_VALUE;
  exports.DOUBLE_INFINITY = DOUBLE_INFINITY;
  exports.DOUBLE_NEGATIVE_INFINITY = DOUBLE_NEGATIVE_INFINITY;
  exports.DOUBLE_NA_N = DOUBLE_NA_N;
  exports.FLOAT_VALUE = FLOAT_VALUE;
  exports.FLOAT_INFINITY = FLOAT_INFINITY;
  exports.FLOAT_NEGATIVE_INFINITY = FLOAT_NEGATIVE_INFINITY;
  exports.FLOAT_NA_N = FLOAT_NA_N;
  exports.STRING_VALUE = STRING_VALUE;
  exports.StructWithConstants = StructWithConstants;
  exports.InterfaceWithConstants = InterfaceWithConstants;
  exports.InterfaceWithConstantsPtr = InterfaceWithConstantsPtr;
  exports.InterfaceWithConstantsAssociatedPtr = InterfaceWithConstantsAssociatedPtr;
})();