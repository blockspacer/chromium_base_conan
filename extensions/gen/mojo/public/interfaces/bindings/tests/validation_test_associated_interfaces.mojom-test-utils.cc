// mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_JUMBO_H_
#endif


namespace mojo {
namespace test {


InterfaceXAsyncWaiter::InterfaceXAsyncWaiter(
    InterfaceX* proxy) : proxy_(proxy) {}

InterfaceXAsyncWaiter::~InterfaceXAsyncWaiter() = default;




void AssociatedConformanceTestInterfaceInterceptorForTesting::Method0(::mojo::PendingAssociatedRemote<InterfaceX> param0) {
  GetForwardingInterface()->Method0(std::move(param0));
}
void AssociatedConformanceTestInterfaceInterceptorForTesting::Method1(::mojo::PendingAssociatedReceiver<InterfaceX> param0) {
  GetForwardingInterface()->Method1(std::move(param0));
}
void AssociatedConformanceTestInterfaceInterceptorForTesting::Method2(::mojo::PendingAssociatedRemote<InterfaceX> param0) {
  GetForwardingInterface()->Method2(std::move(param0));
}
void AssociatedConformanceTestInterfaceInterceptorForTesting::Method3(std::vector<::mojo::PendingAssociatedRemote<InterfaceX>> param0) {
  GetForwardingInterface()->Method3(std::move(param0));
}
AssociatedConformanceTestInterfaceAsyncWaiter::AssociatedConformanceTestInterfaceAsyncWaiter(
    AssociatedConformanceTestInterface* proxy) : proxy_(proxy) {}

AssociatedConformanceTestInterfaceAsyncWaiter::~AssociatedConformanceTestInterfaceAsyncWaiter() = default;






}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif