// mojo/public/interfaces/bindings/tests/echo.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/echo.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/echo.mojom-params-data.h"
#include "mojo/public/interfaces/bindings/tests/echo.mojom-shared-message-ids.h"

#include "mojo/public/interfaces/bindings/tests/echo.mojom-import-headers.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_ECHO_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_ECHO_MOJOM_JUMBO_H_
#endif
namespace test {
namespace echo {
namespace mojom {
const char Echo::Name_[] = "test.echo.mojom.Echo";

class Echo_EchoPoint_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Echo_EchoPoint_ForwardToCallback(
      Echo::EchoPointCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Echo::EchoPointCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Echo_EchoPoint_ForwardToCallback);
};

EchoProxy::EchoProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void EchoProxy::EchoPoint(
    ::test::echo_import::mojom::PointPtr in_point, EchoPointCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "test::echo::mojom::Echo::EchoPoint", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("point"), in_point, 
                        "<value of type ::test::echo_import::mojom::PointPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kEcho_EchoPoint_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::test::echo::mojom::internal::Echo_EchoPoint_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->point)::BaseType> point_fragment(
          params.message());
  mojo::internal::Serialize<::test::echo_import::mojom::PointDataView>(
      in_point, point_fragment);
  params->point.Set(
      point_fragment.is_null() ? nullptr : point_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->point.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null point in Echo.EchoPoint request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Echo::Name_);
  message.set_method_name("EchoPoint");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Echo_EchoPoint_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Echo_EchoPoint_ProxyToResponder {
 public:
  static Echo::EchoPointCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Echo_EchoPoint_ProxyToResponder> proxy(
        new Echo_EchoPoint_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Echo_EchoPoint_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Echo_EchoPoint_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Echo_EchoPoint_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Echo::EchoPointCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::test::echo_import::mojom::PointPtr in_result);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Echo_EchoPoint_ProxyToResponder);
};

bool Echo_EchoPoint_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "test::echo::mojom::Echo::EchoPointCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::Echo_EchoPoint_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Echo_EchoPoint_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::test::echo_import::mojom::PointPtr p_result{};
  Echo_EchoPoint_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Echo::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void Echo_EchoPoint_ProxyToResponder::Run(
    ::test::echo_import::mojom::PointPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)test::echo::mojom::Echo::EchoPointCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result, 
                        "<value of type ::test::echo_import::mojom::PointPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kEcho_EchoPoint_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::test::echo::mojom::internal::Echo_EchoPoint_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->result)::BaseType> result_fragment(
          params.message());
  mojo::internal::Serialize<::test::echo_import::mojom::PointDataView>(
      in_result, result_fragment);
  params->result.Set(
      result_fragment.is_null() ? nullptr : result_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)test::echo::mojom::Echo::EchoPointCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Echo::Name_);
  message.set_method_name("EchoPoint");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool EchoStubDispatch::Accept(
    Echo* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kEcho_EchoPoint_Name: {
      break;
    }
  }
  return false;
}

// static
bool EchoStubDispatch::AcceptWithResponder(
    Echo* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kEcho_EchoPoint_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::echo::mojom::Echo::EchoPoint",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::echo::mojom::Echo::EchoPoint");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::Echo_EchoPoint_Params_Data* params =
          reinterpret_cast<
              internal::Echo_EchoPoint_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::test::echo_import::mojom::PointPtr p_point{};
      Echo_EchoPoint_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPoint(&p_point))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Echo::Name_, 0, false);
        return false;
      }
      Echo::EchoPointCallback callback =
          Echo_EchoPoint_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoPoint(
std::move(p_point), std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kEchoValidationInfo[] = {
    {internal::kEcho_EchoPoint_Name,
     {&internal::Echo_EchoPoint_Params_Data::Validate,
      &internal::Echo_EchoPoint_ResponseParams_Data::Validate}},
};

bool EchoRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::echo::mojom::Echo::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kEchoValidationInfo);
}

bool EchoResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::test::echo::mojom::Echo::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kEchoValidationInfo);

}
}  // namespace mojom
}  // namespace echo
}  // namespace test

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif