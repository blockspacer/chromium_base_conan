// mojo/public/interfaces/bindings/tests/sample_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace sample {
namespace internal {
class  DefaultsSender_SendBar_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Bar_Data> bar;

 private:
  friend class mojo::internal::MessageFragment<DefaultsSender_SendBar_Params_Data>;

  DefaultsSender_SendBar_Params_Data();
  ~DefaultsSender_SendBar_Params_Data() = delete;
};
static_assert(sizeof(DefaultsSender_SendBar_Params_Data) == 16,
              "Bad sizeof(DefaultsSender_SendBar_Params_Data)");
class  DefaultsSender_SendFoo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Foo_Data> foo;

 private:
  friend class mojo::internal::MessageFragment<DefaultsSender_SendFoo_Params_Data>;

  DefaultsSender_SendFoo_Params_Data();
  ~DefaultsSender_SendFoo_Params_Data() = delete;
};
static_assert(sizeof(DefaultsSender_SendFoo_Params_Data) == 16,
              "Bad sizeof(DefaultsSender_SendFoo_Params_Data)");
class  DefaultsSender_SendDefaultsTest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DefaultsTest_Data> defaults;

 private:
  friend class mojo::internal::MessageFragment<DefaultsSender_SendDefaultsTest_Params_Data>;

  DefaultsSender_SendDefaultsTest_Params_Data();
  ~DefaultsSender_SendDefaultsTest_Params_Data() = delete;
};
static_assert(sizeof(DefaultsSender_SendDefaultsTest_Params_Data) == 16,
              "Bad sizeof(DefaultsSender_SendDefaultsTest_Params_Data)");
class  Service_Frobinate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Foo_Data> foo;
  int32_t baz;
  mojo::internal::Interface_Data port;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Service_Frobinate_Params_Data>;

  Service_Frobinate_Params_Data();
  ~Service_Frobinate_Params_Data() = delete;
};
static_assert(sizeof(Service_Frobinate_Params_Data) == 32,
              "Bad sizeof(Service_Frobinate_Params_Data)");
class  Service_Frobinate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Service_Frobinate_ResponseParams_Data>;

  Service_Frobinate_ResponseParams_Data();
  ~Service_Frobinate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Service_Frobinate_ResponseParams_Data) == 16,
              "Bad sizeof(Service_Frobinate_ResponseParams_Data)");
class  Service_GetPort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Service_GetPort_Params_Data>;

  Service_GetPort_Params_Data();
  ~Service_GetPort_Params_Data() = delete;
};
static_assert(sizeof(Service_GetPort_Params_Data) == 16,
              "Bad sizeof(Service_GetPort_Params_Data)");
class  Port_PostMessageToPort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message_text;
  mojo::internal::Interface_Data port;

 private:
  friend class mojo::internal::MessageFragment<Port_PostMessageToPort_Params_Data>;

  Port_PostMessageToPort_Params_Data();
  ~Port_PostMessageToPort_Params_Data() = delete;
};
static_assert(sizeof(Port_PostMessageToPort_Params_Data) == 24,
              "Bad sizeof(Port_PostMessageToPort_Params_Data)");

}  // namespace internal


class DefaultsSender_SendBar_ParamsDataView {
 public:
  DefaultsSender_SendBar_ParamsDataView() {}

  DefaultsSender_SendBar_ParamsDataView(
      internal::DefaultsSender_SendBar_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBarDataView(
      BarDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBar(UserType* output) {
    
    auto* pointer = data_->bar.Get();
    return mojo::internal::Deserialize<::sample::BarDataView>(
        pointer, output, message_);
  }
 private:
  internal::DefaultsSender_SendBar_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DefaultsSender_SendFoo_ParamsDataView {
 public:
  DefaultsSender_SendFoo_ParamsDataView() {}

  DefaultsSender_SendFoo_ParamsDataView(
      internal::DefaultsSender_SendFoo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFooDataView(
      FooDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFoo(UserType* output) {
    
    auto* pointer = data_->foo.Get();
    return mojo::internal::Deserialize<::sample::FooDataView>(
        pointer, output, message_);
  }
 private:
  internal::DefaultsSender_SendFoo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DefaultsSender_SendDefaultsTest_ParamsDataView {
 public:
  DefaultsSender_SendDefaultsTest_ParamsDataView() {}

  DefaultsSender_SendDefaultsTest_ParamsDataView(
      internal::DefaultsSender_SendDefaultsTest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDefaultsDataView(
      DefaultsTestDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDefaults(UserType* output) {
    
    auto* pointer = data_->defaults.Get();
    return mojo::internal::Deserialize<::sample::DefaultsTestDataView>(
        pointer, output, message_);
  }
 private:
  internal::DefaultsSender_SendDefaultsTest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Service_Frobinate_ParamsDataView {
 public:
  Service_Frobinate_ParamsDataView() {}

  Service_Frobinate_ParamsDataView(
      internal::Service_Frobinate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFooDataView(
      FooDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFoo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::sample::FooDataView, UserType>(),
    "Attempting to read the optional `foo` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFoo` instead "
    "of `ReadFoo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->foo.Get();
    return mojo::internal::Deserialize<::sample::FooDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBaz(UserType* output) const {
    auto data_value = data_->baz;
    return mojo::internal::Deserialize<::sample::Service_BazOptions>(
        data_value, output);
  }
  Service_BazOptions baz() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::sample::Service_BazOptions>(data_->baz));
  }
  template <typename UserType>
  UserType TakePort() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::sample::PortInterfaceBase>>(
            &data_->port, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Service_Frobinate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Service_Frobinate_ResponseParamsDataView {
 public:
  Service_Frobinate_ResponseParamsDataView() {}

  Service_Frobinate_ResponseParamsDataView(
      internal::Service_Frobinate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::Service_Frobinate_ResponseParams_Data* data_ = nullptr;
};



class Service_GetPort_ParamsDataView {
 public:
  Service_GetPort_ParamsDataView() {}

  Service_GetPort_ParamsDataView(
      internal::Service_GetPort_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::sample::PortInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Service_GetPort_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Port_PostMessageToPort_ParamsDataView {
 public:
  Port_PostMessageToPort_ParamsDataView() {}

  Port_PostMessageToPort_ParamsDataView(
      internal::Port_PostMessageToPort_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessageText(UserType* output) {
    
    auto* pointer = data_->message_text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakePort() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::sample::PortInterfaceBase>>(
            &data_->port, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Port_PostMessageToPort_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void DefaultsSender_SendBar_ParamsDataView::GetBarDataView(
    BarDataView* output) {
  auto pointer = data_->bar.Get();
  *output = BarDataView(pointer, message_);
}


inline void DefaultsSender_SendFoo_ParamsDataView::GetFooDataView(
    FooDataView* output) {
  auto pointer = data_->foo.Get();
  *output = FooDataView(pointer, message_);
}


inline void DefaultsSender_SendDefaultsTest_ParamsDataView::GetDefaultsDataView(
    DefaultsTestDataView* output) {
  auto pointer = data_->defaults.Get();
  *output = DefaultsTestDataView(pointer, message_);
}


inline void Service_Frobinate_ParamsDataView::GetFooDataView(
    FooDataView* output) {
  auto pointer = data_->foo.Get();
  *output = FooDataView(pointer, message_);
}






inline void Port_PostMessageToPort_ParamsDataView::GetMessageTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message_text.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace sample

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_PARAMS_DATA_H_