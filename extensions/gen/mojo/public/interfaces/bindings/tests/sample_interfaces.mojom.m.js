// mojo/public/interfaces/bindings/tests/sample_interfaces.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';

import {
  GenericPendingReceiver as mojoBase_mojom_GenericPendingReceiver,
  GenericPendingReceiverSpec as mojoBase_mojom_GenericPendingReceiverSpec
} from '../../../mojom/base/generic_pending_receiver.mojom.m.js';


/**
 * @const { !bigint }
 */
export const LONG = BigInt('4405');


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const EnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const Enum = {
  
  VALUE: 0,
  MIN_VALUE: 0,
  MAX_VALUE: 0,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const PingTestPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'sample.PingTest', scope);
  }
};

/** @interface */
export const PingTestInterface = class {
  
  /**
   * @return {!Promise}
   */

  ping() {}
};

/**
 * @implements { PingTestInterface }
 */
export const PingTestRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PingTestPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PingTestPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PingTestPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        0,
        PingTest_Ping_ParamsSpec.$,
        PingTest_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PingTest
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const PingTestReceiver = class {
  /**
   * @param {!PingTestInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PingTestRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PingTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PingTest_Ping_ParamsSpec.$,
        PingTest_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const PingTest = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.PingTest";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PingTestRemote}
   */
  static getRemote() {
    let remote = new PingTestRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PingTest
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const PingTestCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PingTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PingTest_Ping_ParamsSpec.$,
        PingTest_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const ProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'sample.Provider', scope);
  }
};

/** @interface */
export const ProviderInterface = class {
  
  /**
   * @param { !string } a
   * @return {!Promise<{
        a: !string,
   *  }>}
   */

  echoString(a) {}
  
  /**
   * @param { !string } a
   * @param { !string } b
   * @return {!Promise<{
        a: !string,
        b: !string,
   *  }>}
   */

  echoStrings(a, b) {}
  
  /**
   * @param { !MojoHandle } a
   * @return {!Promise<{
        a: !MojoHandle,
   *  }>}
   */

  echoMessagePipeHandle(a) {}
  
  /**
   * @param { number } a
   * @return {!Promise<{
        a: number,
   *  }>}
   */

  echoEnum(a) {}
  
  /**
   * @param { !number } a
   * @return {!Promise<{
        a: !number,
   *  }>}
   */

  echoInt(a) {}
};

/**
 * @implements { ProviderInterface }
 */
export const ProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } a
   * @return {!Promise<{
        a: !string,
   *  }>}
   */

  echoString(
      a) {
    return this.proxy.sendMessage(
        0,
        Provider_EchoString_ParamsSpec.$,
        Provider_EchoString_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { !string } a
   * @param { !string } b
   * @return {!Promise<{
        a: !string,
        b: !string,
   *  }>}
   */

  echoStrings(
      a,
      b) {
    return this.proxy.sendMessage(
        1,
        Provider_EchoStrings_ParamsSpec.$,
        Provider_EchoStrings_ResponseParamsSpec.$,
        [
          a,
          b
        ]);
  }

  
  /**
   * @param { !MojoHandle } a
   * @return {!Promise<{
        a: !MojoHandle,
   *  }>}
   */

  echoMessagePipeHandle(
      a) {
    return this.proxy.sendMessage(
        2,
        Provider_EchoMessagePipeHandle_ParamsSpec.$,
        Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { number } a
   * @return {!Promise<{
        a: number,
   *  }>}
   */

  echoEnum(
      a) {
    return this.proxy.sendMessage(
        3,
        Provider_EchoEnum_ParamsSpec.$,
        Provider_EchoEnum_ResponseParamsSpec.$,
        [
          a
        ]);
  }

  
  /**
   * @param { !number } a
   * @return {!Promise<{
        a: !number,
   *  }>}
   */

  echoInt(
      a) {
    return this.proxy.sendMessage(
        4,
        Provider_EchoInt_ParamsSpec.$,
        Provider_EchoInt_ResponseParamsSpec.$,
        [
          a
        ]);
  }
};

/**
 * An object which receives request messages for the Provider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const ProviderReceiver = class {
  /**
   * @param {!ProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        Provider_EchoString_ParamsSpec.$,
        Provider_EchoString_ResponseParamsSpec.$,
        impl.echoString.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        Provider_EchoStrings_ParamsSpec.$,
        Provider_EchoStrings_ResponseParamsSpec.$,
        impl.echoStrings.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        Provider_EchoMessagePipeHandle_ParamsSpec.$,
        Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        impl.echoMessagePipeHandle.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        Provider_EchoEnum_ParamsSpec.$,
        Provider_EchoEnum_ResponseParamsSpec.$,
        impl.echoEnum.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        Provider_EchoInt_ParamsSpec.$,
        Provider_EchoInt_ResponseParamsSpec.$,
        impl.echoInt.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const Provider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.Provider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ProviderRemote}
   */
  static getRemote() {
    let remote = new ProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Provider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const ProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoString =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        Provider_EchoString_ParamsSpec.$,
        Provider_EchoString_ResponseParamsSpec.$,
        this.echoString.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoStrings =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        Provider_EchoStrings_ParamsSpec.$,
        Provider_EchoStrings_ResponseParamsSpec.$,
        this.echoStrings.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoMessagePipeHandle =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        Provider_EchoMessagePipeHandle_ParamsSpec.$,
        Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
        this.echoMessagePipeHandle.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoEnum =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        Provider_EchoEnum_ParamsSpec.$,
        Provider_EchoEnum_ResponseParamsSpec.$,
        this.echoEnum.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echoInt =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        Provider_EchoInt_ParamsSpec.$,
        Provider_EchoInt_ResponseParamsSpec.$,
        this.echoInt.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IntegerAccessorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'sample.IntegerAccessor', scope);
  }
};

/** @interface */
export const IntegerAccessorInterface = class {
  
  /**
   * @return {!Promise<{
        data: !bigint,
        type: number,
   *  }>}
   */

  getInteger() {}
  
  /**
   * @param { !bigint } data
   * @param { number } type
   */

  setInteger(data, type) {}
};

/**
 * @implements { IntegerAccessorInterface }
 */
export const IntegerAccessorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IntegerAccessorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IntegerAccessorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IntegerAccessorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        data: !bigint,
        type: number,
   *  }>}
   */

  getInteger() {
    return this.proxy.sendMessage(
        0,
        IntegerAccessor_GetInteger_ParamsSpec.$,
        IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !bigint } data
   * @param { number } type
   */

  setInteger(
      data,
      type) {
    this.proxy.sendMessage(
        1,
        IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        [
          data,
          type
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerAccessor
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IntegerAccessorReceiver = class {
  /**
   * @param {!IntegerAccessorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IntegerAccessorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IntegerAccessorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerAccessorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        IntegerAccessor_GetInteger_ParamsSpec.$,
        IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        impl.getInteger.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        impl.setInteger.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IntegerAccessor = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.IntegerAccessor";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IntegerAccessorRemote}
   */
  static getRemote() {
    let remote = new IntegerAccessorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerAccessor
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IntegerAccessorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IntegerAccessorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerAccessorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getInteger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        IntegerAccessor_GetInteger_ParamsSpec.$,
        IntegerAccessor_GetInteger_ResponseParamsSpec.$,
        this.getInteger.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setInteger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        IntegerAccessor_SetInteger_ParamsSpec.$,
        null,
        this.setInteger.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const InterfaceFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'sample.InterfaceFactory', scope);
  }
};

/** @interface */
export const InterfaceFactoryInterface = class {
  
  /**
   * @param { !mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindInterface(receiver) {}
};

/**
 * @implements { InterfaceFactoryInterface }
 */
export const InterfaceFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!InterfaceFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          InterfaceFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!InterfaceFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindInterface(
      receiver) {
    this.proxy.sendMessage(
        0,
        InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the InterfaceFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const InterfaceFactoryReceiver = class {
  /**
   * @param {!InterfaceFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!InterfaceFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        InterfaceFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        impl.bindInterface.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const InterfaceFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "sample.InterfaceFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!InterfaceFactoryRemote}
   */
  static getRemote() {
    let remote = new InterfaceFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfaceFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const InterfaceFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      InterfaceFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bindInterface =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        InterfaceFactory_BindInterface_ParamsSpec.$,
        null,
        this.bindInterface.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingTest_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingTest_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoString_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoString_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoStrings_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoStrings_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoMessagePipeHandle_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoMessagePipeHandle_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoEnum_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoEnum_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoInt_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Provider_EchoInt_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerAccessor_GetInteger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerAccessor_GetInteger_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerAccessor_SetInteger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfaceFactory_BindInterface_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    PingTest_Ping_ParamsSpec.$,
    'PingTest_Ping_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingTest_Ping_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    PingTest_Ping_ResponseParamsSpec.$,
    'PingTest_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingTest_Ping_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    Provider_EchoString_ParamsSpec.$,
    'Provider_EchoString_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoString_Params = class {
  constructor() {
    /** @type { !string } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoString_ResponseParamsSpec.$,
    'Provider_EchoString_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoString_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoStrings_ParamsSpec.$,
    'Provider_EchoStrings_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'b', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const Provider_EchoStrings_Params = class {
  constructor() {
    /** @type { !string } */
    this.a;
    /** @type { !string } */
    this.b;
  }
};



mojo.internal.Struct(
    Provider_EchoStrings_ResponseParamsSpec.$,
    'Provider_EchoStrings_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'b', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const Provider_EchoStrings_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.a;
    /** @type { !string } */
    this.b;
  }
};



mojo.internal.Struct(
    Provider_EchoMessagePipeHandle_ParamsSpec.$,
    'Provider_EchoMessagePipeHandle_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoMessagePipeHandle_Params = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoMessagePipeHandle_ResponseParamsSpec.$,
    'Provider_EchoMessagePipeHandle_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoMessagePipeHandle_ResponseParams = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoEnum_ParamsSpec.$,
    'Provider_EchoEnum_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        EnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoEnum_Params = class {
  constructor() {
    /** @type { !Enum } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoEnum_ResponseParamsSpec.$,
    'Provider_EchoEnum_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        EnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoEnum_ResponseParams = class {
  constructor() {
    /** @type { !Enum } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoInt_ParamsSpec.$,
    'Provider_EchoInt_Params',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoInt_Params = class {
  constructor() {
    /** @type { !number } */
    this.a;
  }
};



mojo.internal.Struct(
    Provider_EchoInt_ResponseParamsSpec.$,
    'Provider_EchoInt_ResponseParams',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Provider_EchoInt_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.a;
  }
};



mojo.internal.Struct(
    IntegerAccessor_GetInteger_ParamsSpec.$,
    'IntegerAccessor_GetInteger_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const IntegerAccessor_GetInteger_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    IntegerAccessor_GetInteger_ResponseParamsSpec.$,
    'IntegerAccessor_GetInteger_ResponseParams',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'type', 8,
        0,
        EnumSpec.$,
        0,
        false /* nullable */,
        2),
    ],
    [[0, 16],[2, 24],]);



/**
 * @record
 */
export const IntegerAccessor_GetInteger_ResponseParams = class {
  constructor() {
    /** @type { !bigint } */
    this.data;
    /** @type { !Enum } */
    this.type;
  }
};



mojo.internal.Struct(
    IntegerAccessor_SetInteger_ParamsSpec.$,
    'IntegerAccessor_SetInteger_Params',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'type', 8,
        0,
        EnumSpec.$,
        0,
        false /* nullable */,
        3),
    ],
    [[0, 16],[3, 24],]);



/**
 * @record
 */
export const IntegerAccessor_SetInteger_Params = class {
  constructor() {
    /** @type { !bigint } */
    this.data;
    /** @type { !Enum } */
    this.type;
  }
};



mojo.internal.Struct(
    InterfaceFactory_BindInterface_ParamsSpec.$,
    'InterfaceFactory_BindInterface_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojoBase_mojom_GenericPendingReceiverSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const InterfaceFactory_BindInterface_Params = class {
  constructor() {
    /** @type { !mojoBase_mojom_GenericPendingReceiver } */
    this.receiver;
  }
};

