// mojo/public/interfaces/bindings/tests/test_unions.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SHARED_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif

namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace mojo {
namespace test {
namespace internal {
class WrapperStruct_Data;
class DummyStruct_Data;
class SmallStruct_Data;
class SmallStructNonNullableUnion_Data;
class SmallObjStruct_Data;
class TryNonNullStruct_Data;
class ImportedUnionStruct_Data;
class PodUnion_Data;
class ObjectUnion_Data;
class HandleUnion_Data;
class OldUnion_Data;
class NewUnion_Data;
class ImportedUnionUnion_Data;
class UnionWithStringForFirstField_Data;

struct AnEnum_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct AnExtensibleEnum_Data {
 public:
  static bool constexpr kIsExtensible = true;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)


class  PodUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  PodUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~PodUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<PodUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class PodUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.PodUnion.f_int8
    F_INT8,
    
// @generated_from: mojo.test.PodUnion.f_int8
    kFInt8 = F_INT8,
    
// @generated_from: mojo.test.PodUnion.f_int8_other
    F_INT8_OTHER,
    
// @generated_from: mojo.test.PodUnion.f_int8_other
    kFInt8Other = F_INT8_OTHER,
    
// @generated_from: mojo.test.PodUnion.f_uint8
    F_UINT8,
    
// @generated_from: mojo.test.PodUnion.f_uint8
    kFUint8 = F_UINT8,
    
// @generated_from: mojo.test.PodUnion.f_int16
    F_INT16,
    
// @generated_from: mojo.test.PodUnion.f_int16
    kFInt16 = F_INT16,
    
// @generated_from: mojo.test.PodUnion.f_uint16
    F_UINT16,
    
// @generated_from: mojo.test.PodUnion.f_uint16
    kFUint16 = F_UINT16,
    
// @generated_from: mojo.test.PodUnion.f_int32
    F_INT32,
    
// @generated_from: mojo.test.PodUnion.f_int32
    kFInt32 = F_INT32,
    
// @generated_from: mojo.test.PodUnion.f_uint32
    F_UINT32,
    
// @generated_from: mojo.test.PodUnion.f_uint32
    kFUint32 = F_UINT32,
    
// @generated_from: mojo.test.PodUnion.f_int64
    F_INT64,
    
// @generated_from: mojo.test.PodUnion.f_int64
    kFInt64 = F_INT64,
    
// @generated_from: mojo.test.PodUnion.f_uint64
    F_UINT64,
    
// @generated_from: mojo.test.PodUnion.f_uint64
    kFUint64 = F_UINT64,
    
// @generated_from: mojo.test.PodUnion.f_float
    F_FLOAT,
    
// @generated_from: mojo.test.PodUnion.f_float
    kFFloat = F_FLOAT,
    
// @generated_from: mojo.test.PodUnion.f_double
    F_DOUBLE,
    
// @generated_from: mojo.test.PodUnion.f_double
    kFDouble = F_DOUBLE,
    
// @generated_from: mojo.test.PodUnion.f_bool
    F_BOOL,
    
// @generated_from: mojo.test.PodUnion.f_bool
    kFBool = F_BOOL,
    
// @generated_from: mojo.test.PodUnion.f_enum
    F_ENUM,
    
// @generated_from: mojo.test.PodUnion.f_enum
    kFEnum = F_ENUM,
    
// @generated_from: mojo.test.PodUnion.f_extensible_enum
    F_EXTENSIBLE_ENUM,
    
// @generated_from: mojo.test.PodUnion.f_extensible_enum
    kFExtensibleEnum = F_EXTENSIBLE_ENUM,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int8_t f_f_int8;
    int8_t f_f_int8_other;
    uint8_t f_f_uint8;
    int16_t f_f_int16;
    uint16_t f_f_uint16;
    int32_t f_f_int32;
    uint32_t f_f_uint32;
    int64_t f_f_int64;
    uint64_t f_f_uint64;
    float f_f_float;
    double f_f_double;
    uint8_t f_f_bool : 1;
    int32_t f_f_enum;
    int32_t f_f_extensible_enum;
    uint64_t unknown;
  };

  uint32_t size;
  PodUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(PodUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(PodUnion_Data)");


class  ObjectUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  ObjectUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~ObjectUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<ObjectUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class ObjectUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.ObjectUnion.f_int8
    F_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_int8
    kFInt8 = F_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_string
    F_STRING,
    
// @generated_from: mojo.test.ObjectUnion.f_string
    kFString = F_STRING,
    
// @generated_from: mojo.test.ObjectUnion.f_dummy
    F_DUMMY,
    
// @generated_from: mojo.test.ObjectUnion.f_dummy
    kFDummy = F_DUMMY,
    
// @generated_from: mojo.test.ObjectUnion.f_nullable
    F_NULLABLE,
    
// @generated_from: mojo.test.ObjectUnion.f_nullable
    kFNullable = F_NULLABLE,
    
// @generated_from: mojo.test.ObjectUnion.f_array_int8
    F_ARRAY_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_array_int8
    kFArrayInt8 = F_ARRAY_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_map_int8
    F_MAP_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_map_int8
    kFMapInt8 = F_MAP_INT8,
    
// @generated_from: mojo.test.ObjectUnion.f_pod_union
    F_POD_UNION,
    
// @generated_from: mojo.test.ObjectUnion.f_pod_union
    kFPodUnion = F_POD_UNION,
    
// @generated_from: mojo.test.ObjectUnion.f_small_structs
    F_SMALL_STRUCTS,
    
// @generated_from: mojo.test.ObjectUnion.f_small_structs
    kFSmallStructs = F_SMALL_STRUCTS,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int8_t f_f_int8;
    mojo::internal::Pointer<mojo::internal::String_Data> f_f_string;
    mojo::internal::Pointer<internal::DummyStruct_Data> f_f_dummy;
    mojo::internal::Pointer<internal::DummyStruct_Data> f_f_nullable;
    mojo::internal::Pointer<mojo::internal::Array_Data<int8_t>> f_f_array_int8;
    mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, int8_t>> f_f_map_int8;
    mojo::internal::Pointer<internal::PodUnion_Data> f_f_pod_union;
    mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SmallStruct_Data>>> f_f_small_structs;
    uint64_t unknown;
  };

  uint32_t size;
  ObjectUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(ObjectUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(ObjectUnion_Data)");


class  HandleUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  HandleUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~HandleUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<HandleUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class HandleUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.HandleUnion.f_handle
    F_HANDLE,
    
// @generated_from: mojo.test.HandleUnion.f_handle
    kFHandle = F_HANDLE,
    
// @generated_from: mojo.test.HandleUnion.f_message_pipe
    F_MESSAGE_PIPE,
    
// @generated_from: mojo.test.HandleUnion.f_message_pipe
    kFMessagePipe = F_MESSAGE_PIPE,
    
// @generated_from: mojo.test.HandleUnion.f_data_pipe_consumer
    F_DATA_PIPE_CONSUMER,
    
// @generated_from: mojo.test.HandleUnion.f_data_pipe_consumer
    kFDataPipeConsumer = F_DATA_PIPE_CONSUMER,
    
// @generated_from: mojo.test.HandleUnion.f_data_pipe_producer
    F_DATA_PIPE_PRODUCER,
    
// @generated_from: mojo.test.HandleUnion.f_data_pipe_producer
    kFDataPipeProducer = F_DATA_PIPE_PRODUCER,
    
// @generated_from: mojo.test.HandleUnion.f_shared_buffer
    F_SHARED_BUFFER,
    
// @generated_from: mojo.test.HandleUnion.f_shared_buffer
    kFSharedBuffer = F_SHARED_BUFFER,
    
// @generated_from: mojo.test.HandleUnion.f_platform
    F_PLATFORM,
    
// @generated_from: mojo.test.HandleUnion.f_platform
    kFPlatform = F_PLATFORM,
    
// @generated_from: mojo.test.HandleUnion.f_small_cache
    F_SMALL_CACHE,
    
// @generated_from: mojo.test.HandleUnion.f_small_cache
    kFSmallCache = F_SMALL_CACHE,
    
// @generated_from: mojo.test.HandleUnion.f_small_cache_receiver
    F_SMALL_CACHE_RECEIVER,
    
// @generated_from: mojo.test.HandleUnion.f_small_cache_receiver
    kFSmallCacheReceiver = F_SMALL_CACHE_RECEIVER,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Handle_Data f_f_handle;
    mojo::internal::Handle_Data f_f_message_pipe;
    mojo::internal::Handle_Data f_f_data_pipe_consumer;
    mojo::internal::Handle_Data f_f_data_pipe_producer;
    mojo::internal::Handle_Data f_f_shared_buffer;
    mojo::internal::Handle_Data f_f_platform;
    mojo::internal::Interface_Data f_f_small_cache;
    mojo::internal::Handle_Data f_f_small_cache_receiver;
    uint64_t unknown;
  };

  uint32_t size;
  HandleUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(HandleUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(HandleUnion_Data)");


class  OldUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  OldUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~OldUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<OldUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class OldUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.OldUnion.f_int8
    F_INT8,
    
// @generated_from: mojo.test.OldUnion.f_int8
    kFInt8 = F_INT8,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int8_t f_f_int8;
    uint64_t unknown;
  };

  uint32_t size;
  OldUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(OldUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(OldUnion_Data)");


class  NewUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  NewUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~NewUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<NewUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class NewUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.NewUnion.f_int8
    F_INT8,
    
// @generated_from: mojo.test.NewUnion.f_int8
    kFInt8 = F_INT8,
    
// @generated_from: mojo.test.NewUnion.f_int16
    F_INT16,
    
// @generated_from: mojo.test.NewUnion.f_int16
    kFInt16 = F_INT16,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int8_t f_f_int8;
    int16_t f_f_int16;
    uint64_t unknown;
  };

  uint32_t size;
  NewUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(NewUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(NewUnion_Data)");


class  ImportedUnionUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  ImportedUnionUnion_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~ImportedUnionUnion_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<ImportedUnionUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class ImportedUnionUnion_Tag : uint32_t {

    
// @generated_from: mojo.test.ImportedUnionUnion.point_or_shape
    POINT_OR_SHAPE,
    
// @generated_from: mojo.test.ImportedUnionUnion.point_or_shape
    kPointOrShape = POINT_OR_SHAPE,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<::imported::internal::PointOrShape_Data> f_point_or_shape;
    uint64_t unknown;
  };

  uint32_t size;
  ImportedUnionUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(ImportedUnionUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(ImportedUnionUnion_Data)");


class  UnionWithStringForFirstField_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  UnionWithStringForFirstField_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~UnionWithStringForFirstField_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<UnionWithStringForFirstField_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class UnionWithStringForFirstField_Tag : uint32_t {

    
// @generated_from: mojo.test.UnionWithStringForFirstField.s
    S,
    
// @generated_from: mojo.test.UnionWithStringForFirstField.s
    kS = S,
    
// @generated_from: mojo.test.UnionWithStringForFirstField.i
    I,
    
// @generated_from: mojo.test.UnionWithStringForFirstField.i
    kI = I,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<mojo::internal::String_Data> f_s;
    int32_t f_i;
    uint64_t unknown;
  };

  uint32_t size;
  UnionWithStringForFirstField_Tag tag;
  Union_ data;
};
static_assert(sizeof(UnionWithStringForFirstField_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(UnionWithStringForFirstField_Data)");
class  WrapperStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::ObjectUnion_Data object_union;
  internal::PodUnion_Data pod_union;
  internal::HandleUnion_Data handle_union;

 private:
  friend class mojo::internal::MessageFragment<WrapperStruct_Data>;

  WrapperStruct_Data();
  ~WrapperStruct_Data() = delete;
};
static_assert(sizeof(WrapperStruct_Data) == 56,
              "Bad sizeof(WrapperStruct_Data)");
// Used by WrapperStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WrapperStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WrapperStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WrapperStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WrapperStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WrapperStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DummyStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int8_t f_int8;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<DummyStruct_Data>;

  DummyStruct_Data();
  ~DummyStruct_Data() = delete;
};
static_assert(sizeof(DummyStruct_Data) == 16,
              "Bad sizeof(DummyStruct_Data)");
// Used by DummyStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DummyStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DummyStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DummyStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<DummyStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DummyStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SmallStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DummyStruct_Data> dummy_struct;
  internal::PodUnion_Data pod_union;
  mojo::internal::Pointer<mojo::internal::Array_Data<internal::PodUnion_Data>> pod_union_array;
  mojo::internal::Pointer<mojo::internal::Array_Data<internal::PodUnion_Data>> nullable_pod_union_array;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::DummyStruct_Data>>> s_array;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, internal::PodUnion_Data>> pod_union_map;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, internal::PodUnion_Data>> nullable_pod_union_map;

 private:
  friend class mojo::internal::MessageFragment<SmallStruct_Data>;

  SmallStruct_Data();
  ~SmallStruct_Data() = delete;
};
static_assert(sizeof(SmallStruct_Data) == 72,
              "Bad sizeof(SmallStruct_Data)");
// Used by SmallStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SmallStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SmallStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SmallStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SmallStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SmallStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SmallStructNonNullableUnion_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::PodUnion_Data pod_union;

 private:
  friend class mojo::internal::MessageFragment<SmallStructNonNullableUnion_Data>;

  SmallStructNonNullableUnion_Data();
  ~SmallStructNonNullableUnion_Data() = delete;
};
static_assert(sizeof(SmallStructNonNullableUnion_Data) == 24,
              "Bad sizeof(SmallStructNonNullableUnion_Data)");
// Used by SmallStructNonNullableUnion::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SmallStructNonNullableUnion_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SmallStructNonNullableUnion_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SmallStructNonNullableUnion_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SmallStructNonNullableUnion_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SmallStructNonNullableUnion_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SmallObjStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::ObjectUnion_Data obj_union;
  int8_t f_int8;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SmallObjStruct_Data>;

  SmallObjStruct_Data();
  ~SmallObjStruct_Data() = delete;
};
static_assert(sizeof(SmallObjStruct_Data) == 32,
              "Bad sizeof(SmallObjStruct_Data)");
// Used by SmallObjStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SmallObjStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SmallObjStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SmallObjStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SmallObjStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SmallObjStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  TryNonNullStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DummyStruct_Data> nullable;
  mojo::internal::Pointer<internal::DummyStruct_Data> non_nullable;

 private:
  friend class mojo::internal::MessageFragment<TryNonNullStruct_Data>;

  TryNonNullStruct_Data();
  ~TryNonNullStruct_Data() = delete;
};
static_assert(sizeof(TryNonNullStruct_Data) == 24,
              "Bad sizeof(TryNonNullStruct_Data)");
// Used by TryNonNullStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TryNonNullStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TryNonNullStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TryNonNullStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TryNonNullStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TryNonNullStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ImportedUnionStruct_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::imported::internal::PointOrShape_Data point_or_shape;

 private:
  friend class mojo::internal::MessageFragment<ImportedUnionStruct_Data>;

  ImportedUnionStruct_Data();
  ~ImportedUnionStruct_Data() = delete;
};
static_assert(sizeof(ImportedUnionStruct_Data) == 24,
              "Bad sizeof(ImportedUnionStruct_Data)");
// Used by ImportedUnionStruct::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ImportedUnionStruct_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ImportedUnionStruct_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ImportedUnionStruct_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ImportedUnionStruct_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ImportedUnionStruct_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SHARED_INTERNAL_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMzY5NywgImJlZ2luIjogMzY5MSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX2ludDgifX0sIHsi
ZW5kIjogMzc2OSwgImJlZ2luIjogMzc2MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX2ludDgifX0sIHsiZW5kIjogMzg0NCwg
ImJlZ2luIjogMzgzMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5Qb2RVbmlvbi5mX2ludDhfb3RoZXIifX0sIHsiZW5kIjogMzkzMywgImJlZ2lu
IjogMzkyMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5Qb2RVbmlvbi5mX2ludDhfb3RoZXIifX0sIHsiZW5kIjogMzk5OCwgImJlZ2luIjogMzk5
MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Q
b2RVbmlvbi5mX3VpbnQ4In19LCB7ImVuZCI6IDQwNzMsICJiZWdpbiI6IDQwNjYsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUG9kVW5pb24uZl91
aW50OCJ9fSwgeyJlbmQiOiA0MTM4LCAiYmVnaW4iOiA0MTMxLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9uLmZfaW50MTYifX0sIHsi
ZW5kIjogNDIxMywgImJlZ2luIjogNDIwNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX2ludDE2In19LCB7ImVuZCI6IDQyODAs
ICJiZWdpbiI6IDQyNzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuUG9kVW5pb24uZl91aW50MTYifX0sIHsiZW5kIjogNDM1OCwgImJlZ2luIjog
NDM1MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5Qb2RVbmlvbi5mX3VpbnQxNiJ9fSwgeyJlbmQiOiA0NDIzLCAiYmVnaW4iOiA0NDE2LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9u
LmZfaW50MzIifX0sIHsiZW5kIjogNDQ5OCwgImJlZ2luIjogNDQ5MSwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX2ludDMyIn19
LCB7ImVuZCI6IDQ1NjUsICJiZWdpbiI6IDQ1NTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUG9kVW5pb24uZl91aW50MzIifX0sIHsiZW5kIjog
NDY0MywgImJlZ2luIjogNDYzNSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX3VpbnQzMiJ9fSwgeyJlbmQiOiA0NzA4LCAiYmVn
aW4iOiA0NzAxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LlBvZFVuaW9uLmZfaW50NjQifX0sIHsiZW5kIjogNDc4MywgImJlZ2luIjogNDc3Niwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RV
bmlvbi5mX2ludDY0In19LCB7ImVuZCI6IDQ4NTAsICJiZWdpbiI6IDQ4NDIsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUG9kVW5pb24uZl91aW50
NjQifX0sIHsiZW5kIjogNDkyOCwgImJlZ2luIjogNDkyMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5mX3VpbnQ2NCJ9fSwgeyJl
bmQiOiA0OTkzLCAiYmVnaW4iOiA0OTg2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9uLmZfZmxvYXQifX0sIHsiZW5kIjogNTA2OCwg
ImJlZ2luIjogNTA2MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5Qb2RVbmlvbi5mX2Zsb2F0In19LCB7ImVuZCI6IDUxMzUsICJiZWdpbiI6IDUx
MjcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
UG9kVW5pb24uZl9kb3VibGUifX0sIHsiZW5kIjogNTIxMywgImJlZ2luIjogNTIwNSwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Qb2RVbmlvbi5m
X2RvdWJsZSJ9fSwgeyJlbmQiOiA1Mjc2LCAiYmVnaW4iOiA1MjcwLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9uLmZfYm9vbCJ9fSwg
eyJlbmQiOiA1MzQ4LCAiYmVnaW4iOiA1MzQyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9uLmZfYm9vbCJ9fSwgeyJlbmQiOiA1NDEx
LCAiYmVnaW4iOiA1NDA1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlBvZFVuaW9uLmZfZW51bSJ9fSwgeyJlbmQiOiA1NDgzLCAiYmVnaW4iOiA1
NDc3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LlBvZFVuaW9uLmZfZW51bSJ9fSwgeyJlbmQiOiA1NTY4LCAiYmVnaW4iOiA1NTUxLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBvZFVuaW9uLmZf
ZXh0ZW5zaWJsZV9lbnVtIn19LCB7ImVuZCI6IDU2NzIsICJiZWdpbiI6IDU2NTUsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUG9kVW5pb24uZl9l
eHRlbnNpYmxlX2VudW0ifX0sIHsiZW5kIjogNzQ4OSwgImJlZ2luIjogNzQ4MywgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmplY3RVbmlvbi5m
X2ludDgifX0sIHsiZW5kIjogNzU2NCwgImJlZ2luIjogNzU1OCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmplY3RVbmlvbi5mX2ludDgifX0s
IHsiZW5kIjogNzYzNCwgImJlZ2luIjogNzYyNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmplY3RVbmlvbi5mX3N0cmluZyJ9fSwgeyJlbmQi
OiA3NzE1LCAiYmVnaW4iOiA3NzA3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZfc3RyaW5nIn19LCB7ImVuZCI6IDc3ODMs
ICJiZWdpbiI6IDc3NzYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuT2JqZWN0VW5pb24uZl9kdW1teSJ9fSwgeyJlbmQiOiA3ODYxLCAiYmVnaW4i
OiA3ODU0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0Lk9iamVjdFVuaW9uLmZfZHVtbXkifX0sIHsiZW5kIjogNzkzNSwgImJlZ2luIjogNzkyNSwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmpl
Y3RVbmlvbi5mX251bGxhYmxlIn19LCB7ImVuZCI6IDgwMjIsICJiZWdpbiI6IDgwMTIsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuT2JqZWN0VW5p
b24uZl9udWxsYWJsZSJ9fSwgeyJlbmQiOiA4MTAwLCAiYmVnaW4iOiA4MDg4LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZf
YXJyYXlfaW50OCJ9fSwgeyJlbmQiOiA4MTkyLCAiYmVnaW4iOiA4MTgwLCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZfYXJy
YXlfaW50OCJ9fSwgeyJlbmQiOiA4MjY2LCAiYmVnaW4iOiA4MjU2LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZfbWFwX2lu
dDgifX0sIHsiZW5kIjogODM1MiwgImJlZ2luIjogODM0MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmplY3RVbmlvbi5mX21hcF9pbnQ4In19
LCB7ImVuZCI6IDg0MjgsICJiZWdpbiI6IDg0MTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuT2JqZWN0VW5pb24uZl9wb2RfdW5pb24ifX0sIHsi
ZW5kIjogODUxNywgImJlZ2luIjogODUwNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5PYmplY3RVbmlvbi5mX3BvZF91bmlvbiJ9fSwgeyJlbmQi
OiA4NjAxLCAiYmVnaW4iOiA4NTg2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZfc21hbGxfc3RydWN0cyJ9fSwgeyJlbmQi
OiA4NzAyLCAiYmVnaW4iOiA4Njg3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0Lk9iamVjdFVuaW9uLmZfc21hbGxfc3RydWN0cyJ9fSwgeyJlbmQi
OiAxMDgyNSwgImJlZ2luIjogMTA4MTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9oYW5kbGUifX0sIHsiZW5kIjogMTA5
MDYsICJiZWdpbiI6IDEwODk4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LkhhbmRsZVVuaW9uLmZfaGFuZGxlIn19LCB7ImVuZCI6IDEwOTg4LCAi
YmVnaW4iOiAxMDk3NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5IYW5kbGVVbmlvbi5mX21lc3NhZ2VfcGlwZSJ9fSwgeyJlbmQiOiAxMTA4Niwg
ImJlZ2luIjogMTEwNzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9tZXNzYWdlX3BpcGUifX0sIHsiZW5kIjogMTExODAs
ICJiZWdpbiI6IDExMTYwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LkhhbmRsZVVuaW9uLmZfZGF0YV9waXBlX2NvbnN1bWVyIn19LCB7ImVuZCI6
IDExMjk1LCAiYmVnaW4iOiAxMTI3NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5IYW5kbGVVbmlvbi5mX2RhdGFfcGlwZV9jb25zdW1lciJ9fSwg
eyJlbmQiOiAxMTM4OSwgImJlZ2luIjogMTEzNjksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9kYXRhX3BpcGVfcHJvZHVj
ZXIifX0sIHsiZW5kIjogMTE1MDQsICJiZWdpbiI6IDExNDg0LCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkhhbmRsZVVuaW9uLmZfZGF0YV9waXBl
X3Byb2R1Y2VyIn19LCB7ImVuZCI6IDExNTg4LCAiYmVnaW4iOiAxMTU3MywgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5IYW5kbGVVbmlvbi5mX3No
YXJlZF9idWZmZXIifX0sIHsiZW5kIjogMTE2ODksICJiZWdpbiI6IDExNjc0LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkhhbmRsZVVuaW9uLmZf
c2hhcmVkX2J1ZmZlciJ9fSwgeyJlbmQiOiAxMTc2MywgImJlZ2luIjogMTE3NTMsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24u
Zl9wbGF0Zm9ybSJ9fSwgeyJlbmQiOiAxMTg1MCwgImJlZ2luIjogMTE4NDAsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9w
bGF0Zm9ybSJ9fSwgeyJlbmQiOiAxMTkzMCwgImJlZ2luIjogMTE5MTcsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9zbWFs
bF9jYWNoZSJ9fSwgeyJlbmQiOiAxMjAyNSwgImJlZ2luIjogMTIwMTIsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9zbWFs
bF9jYWNoZSJ9fSwgeyJlbmQiOiAxMjEyMywgImJlZ2luIjogMTIxMDEsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5pb24uZl9zbWFs
bF9jYWNoZV9yZWNlaXZlciJ9fSwgeyJlbmQiOiAxMjI0NCwgImJlZ2luIjogMTIyMjIsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSGFuZGxlVW5p
b24uZl9zbWFsbF9jYWNoZV9yZWNlaXZlciJ9fSwgeyJlbmQiOiAxNDEyNSwgImJlZ2luIjogMTQx
MTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
T2xkVW5pb24uZl9pbnQ4In19LCB7ImVuZCI6IDE0MTk3LCAiYmVnaW4iOiAxNDE5MSwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5PbGRVbmlvbi5m
X2ludDgifX0sIHsiZW5kIjogMTU2NzcsICJiZWdpbiI6IDE1NjcxLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lk5ld1VuaW9uLmZfaW50OCJ9fSwg
eyJlbmQiOiAxNTc0OSwgImJlZ2luIjogMTU3NDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuTmV3VW5pb24uZl9pbnQ4In19LCB7ImVuZCI6IDE1
ODE0LCAiYmVnaW4iOiAxNTgwNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5OZXdVbmlvbi5mX2ludDE2In19LCB7ImVuZCI6IDE1ODg5LCAiYmVn
aW4iOiAxNTg4MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5OZXdVbmlvbi5mX2ludDE2In19LCB7ImVuZCI6IDE3NDY4LCAiYmVnaW4iOiAxNzQ1
NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5J
bXBvcnRlZFVuaW9uVW5pb24ucG9pbnRfb3Jfc2hhcGUifX0sIHsiZW5kIjogMTc1NzMsICJiZWdp
biI6IDE3NTU5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LkltcG9ydGVkVW5pb25Vbmlvbi5wb2ludF9vcl9zaGFwZSJ9fSwgeyJlbmQiOiAxOTI1
OSwgImJlZ2luIjogMTkyNTgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuVW5pb25XaXRoU3RyaW5nRm9yRmlyc3RGaWVsZC5zIn19LCB7ImVuZCI6
IDE5MzM3LCAiYmVnaW4iOiAxOTMzNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5VbmlvbldpdGhTdHJpbmdGb3JGaXJzdEZpZWxkLnMifX0sIHsi
ZW5kIjogMTk0MTAsICJiZWdpbiI6IDE5NDA5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlVuaW9uV2l0aFN0cmluZ0ZvckZpcnN0RmllbGQuaSJ9
fSwgeyJlbmQiOiAxOTQ4OCwgImJlZ2luIjogMTk0ODcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25XaXRoU3RyaW5nRm9yRmlyc3RGaWVs
ZC5pIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/