// mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const InterfaceXPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.InterfaceX', scope);
  }
};

/** @interface */
export const InterfaceXInterface = class {
};

/**
 * @implements { InterfaceXInterface }
 */
export const InterfaceXRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!InterfaceXPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          InterfaceXPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!InterfaceXPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the InterfaceX
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const InterfaceXReceiver = class {
  /**
   * @param {!InterfaceXInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!InterfaceXRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        InterfaceXRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceXRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const InterfaceX = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.InterfaceX";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!InterfaceXRemote}
   */
  static getRemote() {
    let remote = new InterfaceXRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfaceX
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const InterfaceXCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      InterfaceXRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceXRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const AssociatedConformanceTestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.AssociatedConformanceTestInterface', scope);
  }
};

/** @interface */
export const AssociatedConformanceTestInterfaceInterface = class {
  
  /**
   * @param { !Object } param0
   */

  method0(param0) {}
  
  /**
   * @param { !Object } param0
   */

  method1(param0) {}
  
  /**
   * @param { Object } param0
   */

  method2(param0) {}
  
  /**
   * @param { !Array<!Object> } param0
   */

  method3(param0) {}
};

/**
 * @implements { AssociatedConformanceTestInterfaceInterface }
 */
export const AssociatedConformanceTestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!AssociatedConformanceTestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          AssociatedConformanceTestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!AssociatedConformanceTestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } param0
   */

  method0(
      param0) {
    this.proxy.sendMessage(
        0,
        AssociatedConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !Object } param0
   */

  method1(
      param0) {
    this.proxy.sendMessage(
        1,
        AssociatedConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { Object } param0
   */

  method2(
      param0) {
    this.proxy.sendMessage(
        2,
        AssociatedConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !Array<!Object> } param0
   */

  method3(
      param0) {
    this.proxy.sendMessage(
        3,
        AssociatedConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedConformanceTestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const AssociatedConformanceTestInterfaceReceiver = class {
  /**
   * @param {!AssociatedConformanceTestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!AssociatedConformanceTestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        AssociatedConformanceTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedConformanceTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        AssociatedConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        impl.method0.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        AssociatedConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        impl.method1.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        AssociatedConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        impl.method2.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        AssociatedConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        impl.method3.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const AssociatedConformanceTestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.AssociatedConformanceTestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!AssociatedConformanceTestInterfaceRemote}
   */
  static getRemote() {
    let remote = new AssociatedConformanceTestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedConformanceTestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const AssociatedConformanceTestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      AssociatedConformanceTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedConformanceTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method0 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        AssociatedConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        this.method0.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        AssociatedConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        this.method1.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method2 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        AssociatedConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        this.method2.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method3 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        AssociatedConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        this.method3.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedConformanceTestInterface_Method0_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedConformanceTestInterface_Method1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedConformanceTestInterface_Method2_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedConformanceTestInterface_Method3_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    AssociatedConformanceTestInterface_Method0_ParamsSpec.$,
    'AssociatedConformanceTestInterface_Method0_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(InterfaceXRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedConformanceTestInterface_Method0_Params = class {
  constructor() {
    /** @type { !Object } */
    this.param0;
  }
};



mojo.internal.Struct(
    AssociatedConformanceTestInterface_Method1_ParamsSpec.$,
    'AssociatedConformanceTestInterface_Method1_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(InterfaceXPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedConformanceTestInterface_Method1_Params = class {
  constructor() {
    /** @type { !Object } */
    this.param0;
  }
};



mojo.internal.Struct(
    AssociatedConformanceTestInterface_Method2_ParamsSpec.$,
    'AssociatedConformanceTestInterface_Method2_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(InterfaceXRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedConformanceTestInterface_Method2_Params = class {
  constructor() {
    /** @type { (Object|undefined) } */
    this.param0;
  }
};



mojo.internal.Struct(
    AssociatedConformanceTestInterface_Method3_ParamsSpec.$,
    'AssociatedConformanceTestInterface_Method3_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceProxy(InterfaceXRemote), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedConformanceTestInterface_Method3_Params = class {
  constructor() {
    /** @type { !Array<!Object> } */
    this.param0;
  }
};

