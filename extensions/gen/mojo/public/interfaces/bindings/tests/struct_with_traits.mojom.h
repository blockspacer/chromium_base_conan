// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "mojo/public/cpp/bindings/tests/struct_with_traits_impl_traits.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

class TraitsTestServiceProxy;

template <typename ImplRefTraits>
class TraitsTestServiceStub;

class TraitsTestServiceRequestValidator;
class TraitsTestServiceResponseValidator;


// @generated_from: mojo.test.TraitsTestService
class  TraitsTestService
    : public TraitsTestServiceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TraitsTestServiceInterfaceBase;
  using Proxy_ = TraitsTestServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = TraitsTestServiceStub<ImplRefTraits>;

  using RequestValidator_ = TraitsTestServiceRequestValidator;
  using ResponseValidator_ = TraitsTestServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoStructWithTraitsMinVersion = 0,
    kEchoTrivialStructWithTraitsMinVersion = 0,
    kEchoMoveOnlyStructWithTraitsMinVersion = 0,
    kEchoNullableMoveOnlyStructWithTraitsMinVersion = 0,
    kEchoEnumWithTraitsMinVersion = 0,
    kEchoStructWithTraitsForUniquePtrMinVersion = 0,
    kEchoNullableStructWithTraitsForUniquePtrMinVersion = 0,
    kEchoUnionWithTraitsMinVersion = 0,
  };
  virtual ~TraitsTestService() {}


  using EchoStructWithTraitsCallback = base::OnceCallback<void(const ::mojo::test::StructWithTraitsImpl&)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoStructWithTraits
  virtual void EchoStructWithTraits(const ::mojo::test::StructWithTraitsImpl& s, EchoStructWithTraitsCallback callback) = 0;


  using EchoTrivialStructWithTraitsCallback = base::OnceCallback<void(::mojo::test::TrivialStructWithTraitsImpl)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoTrivialStructWithTraits
  virtual void EchoTrivialStructWithTraits(::mojo::test::TrivialStructWithTraitsImpl s, EchoTrivialStructWithTraitsCallback callback) = 0;


  using EchoMoveOnlyStructWithTraitsCallback = base::OnceCallback<void(::mojo::test::MoveOnlyStructWithTraitsImpl)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoMoveOnlyStructWithTraits
  virtual void EchoMoveOnlyStructWithTraits(::mojo::test::MoveOnlyStructWithTraitsImpl s, EchoMoveOnlyStructWithTraitsCallback callback) = 0;


  using EchoNullableMoveOnlyStructWithTraitsCallback = base::OnceCallback<void(base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl>)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoNullableMoveOnlyStructWithTraits
  virtual void EchoNullableMoveOnlyStructWithTraits(base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, EchoNullableMoveOnlyStructWithTraitsCallback callback) = 0;


  using EchoEnumWithTraitsCallback = base::OnceCallback<void(::mojo::test::EnumWithTraitsImpl)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoEnumWithTraits
  virtual void EchoEnumWithTraits(::mojo::test::EnumWithTraitsImpl e, EchoEnumWithTraitsCallback callback) = 0;


  using EchoStructWithTraitsForUniquePtrCallback = base::OnceCallback<void(::std::unique_ptr<int>)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoStructWithTraitsForUniquePtr
  virtual void EchoStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoStructWithTraitsForUniquePtrCallback callback) = 0;


  using EchoNullableStructWithTraitsForUniquePtrCallback = base::OnceCallback<void(::std::unique_ptr<int>)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoNullableStructWithTraitsForUniquePtr
  virtual void EchoNullableStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoNullableStructWithTraitsForUniquePtrCallback callback) = 0;


  using EchoUnionWithTraitsCallback = base::OnceCallback<void(::std::unique_ptr<::mojo::test::UnionWithTraitsBase>)>;
  
// @generated_from: mojo.test.TraitsTestService.EchoUnionWithTraits
  virtual void EchoUnionWithTraits(::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, EchoUnionWithTraitsCallback callback) = 0;
};

class TestUnserializedStructProxy;

template <typename ImplRefTraits>
class TestUnserializedStructStub;

class TestUnserializedStructRequestValidator;
class TestUnserializedStructResponseValidator;


// @generated_from: mojo.test.TestUnserializedStruct
class  TestUnserializedStruct
    : public TestUnserializedStructInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestUnserializedStructInterfaceBase;
  using Proxy_ = TestUnserializedStructProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestUnserializedStructStub<ImplRefTraits>;

  using RequestValidator_ = TestUnserializedStructRequestValidator;
  using ResponseValidator_ = TestUnserializedStructResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPassUnserializedStructMinVersion = 0,
  };
  virtual ~TestUnserializedStruct() {}


  using PassUnserializedStructCallback = base::OnceCallback<void(const ::mojo::test::StructWithUnreachableTraitsImpl&)>;
  
// @generated_from: mojo.test.TestUnserializedStruct.PassUnserializedStruct
  virtual void PassUnserializedStruct(const ::mojo::test::StructWithUnreachableTraitsImpl& s, PassUnserializedStructCallback callback) = 0;
};

class ForceSerializeTesterProxy;

template <typename ImplRefTraits>
class ForceSerializeTesterStub;

class ForceSerializeTesterRequestValidator;
class ForceSerializeTesterResponseValidator;


// @generated_from: mojo.test.ForceSerializeTester
class  ForceSerializeTester
    : public ForceSerializeTesterInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = ForceSerializeTesterInterfaceBase;
  using Proxy_ = ForceSerializeTesterProxy;

  template <typename ImplRefTraits>
  using Stub_ = ForceSerializeTesterStub<ImplRefTraits>;

  using RequestValidator_ = ForceSerializeTesterRequestValidator;
  using ResponseValidator_ = ForceSerializeTesterResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSendForceSerializedStructMinVersion = 0,
    kSendNestedForceSerializedStructMinVersion = 0,
  };
  virtual ~ForceSerializeTester() {}


  using SendForceSerializedStructCallback = base::OnceCallback<void(const ::mojo::test::StructForceSerializeImpl&)>;
  
// @generated_from: mojo.test.ForceSerializeTester.SendForceSerializedStruct
  virtual void SendForceSerializedStruct(const ::mojo::test::StructForceSerializeImpl& s, SendForceSerializedStructCallback callback) = 0;


  using SendNestedForceSerializedStructCallback = base::OnceCallback<void(const ::mojo::test::StructNestedForceSerializeImpl&)>;
  
// @generated_from: mojo.test.ForceSerializeTester.SendNestedForceSerializedStruct
  virtual void SendNestedForceSerializedStruct(const ::mojo::test::StructNestedForceSerializeImpl& s, SendNestedForceSerializedStructCallback callback) = 0;
};



// @generated_from: mojo.test.TraitsTestService
class  TraitsTestServiceProxy
    : public TraitsTestService {
 public:
  using InterfaceType = TraitsTestService;

  explicit TraitsTestServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TraitsTestService.EchoStructWithTraits
  void EchoStructWithTraits(const ::mojo::test::StructWithTraitsImpl& s, EchoStructWithTraitsCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoTrivialStructWithTraits
  void EchoTrivialStructWithTraits(::mojo::test::TrivialStructWithTraitsImpl s, EchoTrivialStructWithTraitsCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoMoveOnlyStructWithTraits
  void EchoMoveOnlyStructWithTraits(::mojo::test::MoveOnlyStructWithTraitsImpl s, EchoMoveOnlyStructWithTraitsCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoNullableMoveOnlyStructWithTraits
  void EchoNullableMoveOnlyStructWithTraits(base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, EchoNullableMoveOnlyStructWithTraitsCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoEnumWithTraits
  void EchoEnumWithTraits(::mojo::test::EnumWithTraitsImpl e, EchoEnumWithTraitsCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoStructWithTraitsForUniquePtr
  void EchoStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoStructWithTraitsForUniquePtrCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoNullableStructWithTraitsForUniquePtr
  void EchoNullableStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoNullableStructWithTraitsForUniquePtrCallback callback) final;
  
// @generated_from: mojo.test.TraitsTestService.EchoUnionWithTraits
  void EchoUnionWithTraits(::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, EchoUnionWithTraitsCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.TestUnserializedStruct
class  TestUnserializedStructProxy
    : public TestUnserializedStruct {
 public:
  using InterfaceType = TestUnserializedStruct;

  explicit TestUnserializedStructProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestUnserializedStruct.PassUnserializedStruct
  void PassUnserializedStruct(const ::mojo::test::StructWithUnreachableTraitsImpl& s, PassUnserializedStructCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.ForceSerializeTester
class  ForceSerializeTesterProxy
    : public ForceSerializeTester {
 public:
  using InterfaceType = ForceSerializeTester;

  explicit ForceSerializeTesterProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.ForceSerializeTester.SendForceSerializedStruct
  void SendForceSerializedStruct(const ::mojo::test::StructForceSerializeImpl& s, SendForceSerializedStructCallback callback) final;
  
// @generated_from: mojo.test.ForceSerializeTester.SendNestedForceSerializedStruct
  void SendNestedForceSerializedStruct(const ::mojo::test::StructNestedForceSerializeImpl& s, SendNestedForceSerializedStructCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TraitsTestServiceStubDispatch {
 public:
  static bool Accept(TraitsTestService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TraitsTestService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TraitsTestService>>
class TraitsTestServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TraitsTestServiceStub() {}
  ~TraitsTestServiceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TraitsTestServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TraitsTestServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestUnserializedStructStubDispatch {
 public:
  static bool Accept(TestUnserializedStruct* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestUnserializedStruct* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestUnserializedStruct>>
class TestUnserializedStructStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestUnserializedStructStub() {}
  ~TestUnserializedStructStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestUnserializedStructStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestUnserializedStructStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ForceSerializeTesterStubDispatch {
 public:
  static bool Accept(ForceSerializeTester* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ForceSerializeTester* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ForceSerializeTester>>
class ForceSerializeTesterStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ForceSerializeTesterStub() {}
  ~ForceSerializeTesterStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ForceSerializeTesterStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ForceSerializeTesterStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TraitsTestServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestUnserializedStructRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ForceSerializeTesterRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TraitsTestServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestUnserializedStructResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ForceSerializeTesterResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: mojo.test.NestedStructWithTraits
class  NestedStructWithTraits {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<NestedStructWithTraits, T>::value>;
  using DataView = NestedStructWithTraitsDataView;
  using Data_ = internal::NestedStructWithTraits_Data;

  template <typename... Args>
  static NestedStructWithTraitsPtr New(Args&&... args) {
    return NestedStructWithTraitsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static NestedStructWithTraitsPtr From(const U& u) {
    return mojo::TypeConverter<NestedStructWithTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NestedStructWithTraits>::Convert(*this);
  }


  NestedStructWithTraits();

  explicit NestedStructWithTraits(
      int32_t value);

  ~NestedStructWithTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = NestedStructWithTraitsPtr>
  NestedStructWithTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        NestedStructWithTraits::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        NestedStructWithTraits::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::NestedStructWithTraits_UnserializedMessageContext<
            UserType, NestedStructWithTraits::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<NestedStructWithTraits::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return NestedStructWithTraits::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::NestedStructWithTraits_UnserializedMessageContext<
            UserType, NestedStructWithTraits::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<NestedStructWithTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.NestedStructWithTraits.value
  int32_t value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, NestedStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.StructWithUnreachableTraits
class  StructWithUnreachableTraits {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithUnreachableTraits, T>::value>;
  using DataView = StructWithUnreachableTraitsDataView;
  using Data_ = internal::StructWithUnreachableTraits_Data;

  template <typename... Args>
  static StructWithUnreachableTraitsPtr New(Args&&... args) {
    return StructWithUnreachableTraitsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithUnreachableTraitsPtr From(const U& u) {
    return mojo::TypeConverter<StructWithUnreachableTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithUnreachableTraits>::Convert(*this);
  }


  StructWithUnreachableTraits();

  explicit StructWithUnreachableTraits(
      bool ignore_me);

  ~StructWithUnreachableTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithUnreachableTraitsPtr>
  StructWithUnreachableTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithUnreachableTraits::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithUnreachableTraits::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithUnreachableTraits_UnserializedMessageContext<
            UserType, StructWithUnreachableTraits::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithUnreachableTraits::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithUnreachableTraits::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithUnreachableTraits_UnserializedMessageContext<
            UserType, StructWithUnreachableTraits::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithUnreachableTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructWithUnreachableTraits.ignore_me
  bool ignore_me;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithUnreachableTraits::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.TrivialStructWithTraits
class  TrivialStructWithTraits {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TrivialStructWithTraits, T>::value>;
  using DataView = TrivialStructWithTraitsDataView;
  using Data_ = internal::TrivialStructWithTraits_Data;

  template <typename... Args>
  static TrivialStructWithTraitsPtr New(Args&&... args) {
    return TrivialStructWithTraitsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TrivialStructWithTraitsPtr From(const U& u) {
    return mojo::TypeConverter<TrivialStructWithTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TrivialStructWithTraits>::Convert(*this);
  }


  TrivialStructWithTraits();

  explicit TrivialStructWithTraits(
      int32_t value);

  ~TrivialStructWithTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TrivialStructWithTraitsPtr>
  TrivialStructWithTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        TrivialStructWithTraits::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TrivialStructWithTraits::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TrivialStructWithTraits_UnserializedMessageContext<
            UserType, TrivialStructWithTraits::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TrivialStructWithTraits::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return TrivialStructWithTraits::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TrivialStructWithTraits_UnserializedMessageContext<
            UserType, TrivialStructWithTraits::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TrivialStructWithTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.TrivialStructWithTraits.value
  int32_t value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TrivialStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







// @generated_from: mojo.test.StructWithTraitsForUniquePtr
class  StructWithTraitsForUniquePtr {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithTraitsForUniquePtr, T>::value>;
  using DataView = StructWithTraitsForUniquePtrDataView;
  using Data_ = internal::StructWithTraitsForUniquePtr_Data;

  template <typename... Args>
  static StructWithTraitsForUniquePtrPtr New(Args&&... args) {
    return StructWithTraitsForUniquePtrPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithTraitsForUniquePtrPtr From(const U& u) {
    return mojo::TypeConverter<StructWithTraitsForUniquePtrPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithTraitsForUniquePtr>::Convert(*this);
  }


  StructWithTraitsForUniquePtr();

  explicit StructWithTraitsForUniquePtr(
      int32_t f_int32);

  ~StructWithTraitsForUniquePtr();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithTraitsForUniquePtrPtr>
  StructWithTraitsForUniquePtrPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithTraitsForUniquePtr::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithTraitsForUniquePtr::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithTraitsForUniquePtr_UnserializedMessageContext<
            UserType, StructWithTraitsForUniquePtr::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithTraitsForUniquePtr::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithTraitsForUniquePtr::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithTraitsForUniquePtr_UnserializedMessageContext<
            UserType, StructWithTraitsForUniquePtr::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithTraitsForUniquePtr::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructWithTraitsForUniquePtr.f_int32
  int32_t f_int32;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.EnumWithTraitsContainer
class  EnumWithTraitsContainer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<EnumWithTraitsContainer, T>::value>;
  using DataView = EnumWithTraitsContainerDataView;
  using Data_ = internal::EnumWithTraitsContainer_Data;

  template <typename... Args>
  static EnumWithTraitsContainerPtr New(Args&&... args) {
    return EnumWithTraitsContainerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static EnumWithTraitsContainerPtr From(const U& u) {
    return mojo::TypeConverter<EnumWithTraitsContainerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, EnumWithTraitsContainer>::Convert(*this);
  }


  EnumWithTraitsContainer();

  explicit EnumWithTraitsContainer(
      ::mojo::test::EnumWithTraitsImpl f_field);

  ~EnumWithTraitsContainer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = EnumWithTraitsContainerPtr>
  EnumWithTraitsContainerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        EnumWithTraitsContainer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        EnumWithTraitsContainer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::EnumWithTraitsContainer_UnserializedMessageContext<
            UserType, EnumWithTraitsContainer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<EnumWithTraitsContainer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return EnumWithTraitsContainer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::EnumWithTraitsContainer_UnserializedMessageContext<
            UserType, EnumWithTraitsContainer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<EnumWithTraitsContainer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.EnumWithTraitsContainer.f_field
  ::mojo::test::EnumWithTraitsImpl f_field;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, EnumWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.StructForceSerialize
class  StructForceSerialize {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructForceSerialize, T>::value>;
  using DataView = StructForceSerializeDataView;
  using Data_ = internal::StructForceSerialize_Data;

  template <typename... Args>
  static StructForceSerializePtr New(Args&&... args) {
    return StructForceSerializePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructForceSerializePtr From(const U& u) {
    return mojo::TypeConverter<StructForceSerializePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructForceSerialize>::Convert(*this);
  }


  StructForceSerialize();

  explicit StructForceSerialize(
      int32_t value);

  ~StructForceSerialize();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructForceSerializePtr>
  StructForceSerializePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructForceSerialize::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructForceSerialize::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructForceSerialize_UnserializedMessageContext<
            UserType, StructForceSerialize::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructForceSerialize::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructForceSerialize::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructForceSerialize_UnserializedMessageContext<
            UserType, StructForceSerialize::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructForceSerialize::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructForceSerialize.value
  int32_t value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructForceSerialize::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.UnionWithTraits
class  UnionWithTraits {
 public:
  using DataView = UnionWithTraitsDataView;
  using Data_ = internal::UnionWithTraits_Data;
  using Tag = Data_::UnionWithTraits_Tag;

  static UnionWithTraitsPtr New() {
    return UnionWithTraitsPtr(base::in_place);
  }
  // Construct an instance holding |f_int32|.
  static UnionWithTraitsPtr
  NewFInt32(
      int32_t f_int32) {
    auto result = UnionWithTraitsPtr(base::in_place);
    result->set_f_int32(std::move(f_int32));
    return result;
  }
  // Construct an instance holding |f_struct|.
  static UnionWithTraitsPtr
  NewFStruct(
      const ::mojo::test::NestedStructWithTraitsImpl& f_struct) {
    auto result = UnionWithTraitsPtr(base::in_place);
    result->set_f_struct(std::move(f_struct));
    return result;
  }

  template <typename U>
  static UnionWithTraitsPtr From(const U& u) {
    return mojo::TypeConverter<UnionWithTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionWithTraits>::Convert(*this);
  }

  UnionWithTraits();
  ~UnionWithTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionWithTraitsPtr>
  UnionWithTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithTraits>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithTraits>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.UnionWithTraits.f_int32
  bool is_f_int32() const { return tag_ == Tag::F_INT32; }

  
// @generated_from: mojo.test.UnionWithTraits.f_int32
  int32_t get_f_int32() const {
    DCHECK(tag_ == Tag::F_INT32);
    return data_.f_int32;
  }

  
// @generated_from: mojo.test.UnionWithTraits.f_int32
  void set_f_int32(
      int32_t f_int32);
  
// @generated_from: mojo.test.UnionWithTraits.f_struct
  bool is_f_struct() const { return tag_ == Tag::F_STRUCT; }

  
// @generated_from: mojo.test.UnionWithTraits.f_struct
  ::mojo::test::NestedStructWithTraitsImpl& get_f_struct() const {
    DCHECK(tag_ == Tag::F_STRUCT);
    return *(data_.f_struct);
  }

  
// @generated_from: mojo.test.UnionWithTraits.f_struct
  void set_f_struct(
      const ::mojo::test::NestedStructWithTraitsImpl& f_struct);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionWithTraits::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionWithTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    int32_t f_int32;
    ::mojo::test::NestedStructWithTraitsImpl* f_struct;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};






// @generated_from: mojo.test.StructWithTraits
class  StructWithTraits {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithTraits, T>::value>;
  using DataView = StructWithTraitsDataView;
  using Data_ = internal::StructWithTraits_Data;

  template <typename... Args>
  static StructWithTraitsPtr New(Args&&... args) {
    return StructWithTraitsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithTraitsPtr From(const U& u) {
    return mojo::TypeConverter<StructWithTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithTraits>::Convert(*this);
  }


  StructWithTraits();

  StructWithTraits(
      ::mojo::test::EnumWithTraitsImpl f_enum,
      bool f_bool,
      uint32_t f_uint32,
      uint64_t f_uint64,
      const std::string& f_string,
      const std::string& f_string2,
      std::vector<std::string> f_string_array,
      std::vector<std::string> f_string_set,
      const ::mojo::test::NestedStructWithTraitsImpl& f_struct,
      std::vector<::mojo::test::NestedStructWithTraitsImpl> f_struct_array,
      const base::flat_map<std::string, ::mojo::test::NestedStructWithTraitsImpl>& f_struct_map);

  ~StructWithTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithTraitsPtr>
  StructWithTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithTraits::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithTraits::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithTraits_UnserializedMessageContext<
            UserType, StructWithTraits::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithTraits::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithTraits::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithTraits_UnserializedMessageContext<
            UserType, StructWithTraits::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructWithTraits.f_enum
  ::mojo::test::EnumWithTraitsImpl f_enum;
  
// @generated_from: mojo.test.StructWithTraits.f_bool
  bool f_bool;
  
// @generated_from: mojo.test.StructWithTraits.f_uint32
  uint32_t f_uint32;
  
// @generated_from: mojo.test.StructWithTraits.f_uint64
  uint64_t f_uint64;
  
// @generated_from: mojo.test.StructWithTraits.f_string
  std::string f_string;
  
// @generated_from: mojo.test.StructWithTraits.f_string2
  std::string f_string2;
  
// @generated_from: mojo.test.StructWithTraits.f_string_array
  std::vector<std::string> f_string_array;
  
// @generated_from: mojo.test.StructWithTraits.f_string_set
  std::vector<std::string> f_string_set;
  
// @generated_from: mojo.test.StructWithTraits.f_struct
  ::mojo::test::NestedStructWithTraitsImpl f_struct;
  
// @generated_from: mojo.test.StructWithTraits.f_struct_array
  std::vector<::mojo::test::NestedStructWithTraitsImpl> f_struct_array;
  
// @generated_from: mojo.test.StructWithTraits.f_struct_map
  base::flat_map<std::string, ::mojo::test::NestedStructWithTraitsImpl> f_struct_map;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.StructWithTraitsContainer
class  StructWithTraitsContainer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithTraitsContainer, T>::value>;
  using DataView = StructWithTraitsContainerDataView;
  using Data_ = internal::StructWithTraitsContainer_Data;

  template <typename... Args>
  static StructWithTraitsContainerPtr New(Args&&... args) {
    return StructWithTraitsContainerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithTraitsContainerPtr From(const U& u) {
    return mojo::TypeConverter<StructWithTraitsContainerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithTraitsContainer>::Convert(*this);
  }


  StructWithTraitsContainer();

  explicit StructWithTraitsContainer(
      const ::mojo::test::StructWithTraitsImpl& f_struct);

  ~StructWithTraitsContainer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithTraitsContainerPtr>
  StructWithTraitsContainerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithTraitsContainer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithTraitsContainer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithTraitsContainer_UnserializedMessageContext<
            UserType, StructWithTraitsContainer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithTraitsContainer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithTraitsContainer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithTraitsContainer_UnserializedMessageContext<
            UserType, StructWithTraitsContainer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithTraitsContainer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructWithTraitsContainer.f_struct
  ::mojo::test::StructWithTraitsImpl f_struct;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.MoveOnlyStructWithTraits
class  MoveOnlyStructWithTraits {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MoveOnlyStructWithTraits, T>::value>;
  using DataView = MoveOnlyStructWithTraitsDataView;
  using Data_ = internal::MoveOnlyStructWithTraits_Data;

  template <typename... Args>
  static MoveOnlyStructWithTraitsPtr New(Args&&... args) {
    return MoveOnlyStructWithTraitsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MoveOnlyStructWithTraitsPtr From(const U& u) {
    return mojo::TypeConverter<MoveOnlyStructWithTraitsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MoveOnlyStructWithTraits>::Convert(*this);
  }


  MoveOnlyStructWithTraits();

  explicit MoveOnlyStructWithTraits(
      ::mojo::ScopedHandle f_handle);

  ~MoveOnlyStructWithTraits();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MoveOnlyStructWithTraitsPtr>
  MoveOnlyStructWithTraitsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MoveOnlyStructWithTraits::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MoveOnlyStructWithTraits_UnserializedMessageContext<
            UserType, MoveOnlyStructWithTraits::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MoveOnlyStructWithTraits::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return MoveOnlyStructWithTraits::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MoveOnlyStructWithTraits_UnserializedMessageContext<
            UserType, MoveOnlyStructWithTraits::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MoveOnlyStructWithTraits::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.MoveOnlyStructWithTraits.f_handle
  ::mojo::ScopedHandle f_handle;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(MoveOnlyStructWithTraits);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.MoveOnlyStructWithTraitsContainer
class  MoveOnlyStructWithTraitsContainer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MoveOnlyStructWithTraitsContainer, T>::value>;
  using DataView = MoveOnlyStructWithTraitsContainerDataView;
  using Data_ = internal::MoveOnlyStructWithTraitsContainer_Data;

  template <typename... Args>
  static MoveOnlyStructWithTraitsContainerPtr New(Args&&... args) {
    return MoveOnlyStructWithTraitsContainerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MoveOnlyStructWithTraitsContainerPtr From(const U& u) {
    return mojo::TypeConverter<MoveOnlyStructWithTraitsContainerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MoveOnlyStructWithTraitsContainer>::Convert(*this);
  }


  MoveOnlyStructWithTraitsContainer();

  explicit MoveOnlyStructWithTraitsContainer(
      ::mojo::test::MoveOnlyStructWithTraitsImpl f_struct);

  ~MoveOnlyStructWithTraitsContainer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MoveOnlyStructWithTraitsContainerPtr>
  MoveOnlyStructWithTraitsContainerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MoveOnlyStructWithTraitsContainer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MoveOnlyStructWithTraitsContainer_UnserializedMessageContext<
            UserType, MoveOnlyStructWithTraitsContainer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MoveOnlyStructWithTraitsContainer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return MoveOnlyStructWithTraitsContainer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MoveOnlyStructWithTraitsContainer_UnserializedMessageContext<
            UserType, MoveOnlyStructWithTraitsContainer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MoveOnlyStructWithTraitsContainer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.MoveOnlyStructWithTraitsContainer.f_struct
  ::mojo::test::MoveOnlyStructWithTraitsImpl f_struct;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(MoveOnlyStructWithTraitsContainer);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








// @generated_from: mojo.test.StructNestedForceSerialize
class  StructNestedForceSerialize {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructNestedForceSerialize, T>::value>;
  using DataView = StructNestedForceSerializeDataView;
  using Data_ = internal::StructNestedForceSerialize_Data;

  template <typename... Args>
  static StructNestedForceSerializePtr New(Args&&... args) {
    return StructNestedForceSerializePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructNestedForceSerializePtr From(const U& u) {
    return mojo::TypeConverter<StructNestedForceSerializePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructNestedForceSerialize>::Convert(*this);
  }


  StructNestedForceSerialize();

  explicit StructNestedForceSerialize(
      const ::mojo::test::StructForceSerializeImpl& force);

  ~StructNestedForceSerialize();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructNestedForceSerializePtr>
  StructNestedForceSerializePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructNestedForceSerialize::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructNestedForceSerialize::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructNestedForceSerialize_UnserializedMessageContext<
            UserType, StructNestedForceSerialize::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructNestedForceSerialize::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructNestedForceSerialize::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructNestedForceSerialize_UnserializedMessageContext<
            UserType, StructNestedForceSerialize::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructNestedForceSerialize::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructNestedForceSerialize.force
  ::mojo::test::StructForceSerializeImpl force;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructNestedForceSerialize::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
UnionWithTraitsPtr UnionWithTraits::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::F_INT32:
      rv->set_f_int32(mojo::Clone(data_.f_int32));
      break;
    case Tag::F_STRUCT:
      rv->set_f_struct(mojo::Clone(*data_.f_struct));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionWithTraits>::value>::type*>
bool UnionWithTraits::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::F_INT32:
      return mojo::Equals(data_.f_int32, other.data_.f_int32);
    case Tag::F_STRUCT:
      return mojo::Equals(*(data_.f_struct), *(other.data_.f_struct));
  }

  return false;
}
template <typename StructPtrType>
NestedStructWithTraitsPtr NestedStructWithTraits::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, NestedStructWithTraits::EnableIfSame<T>*>
bool NestedStructWithTraits::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, NestedStructWithTraits::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithTraitsPtr StructWithTraits::Clone() const {
  return New(
      mojo::Clone(f_enum),
      mojo::Clone(f_bool),
      mojo::Clone(f_uint32),
      mojo::Clone(f_uint64),
      mojo::Clone(f_string),
      mojo::Clone(f_string2),
      mojo::Clone(f_string_array),
      mojo::Clone(f_string_set),
      mojo::Clone(f_struct),
      mojo::Clone(f_struct_array),
      mojo::Clone(f_struct_map)
  );
}

template <typename T, StructWithTraits::EnableIfSame<T>*>
bool StructWithTraits::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_enum, other_struct.f_enum))
    return false;
  if (!mojo::Equals(this->f_bool, other_struct.f_bool))
    return false;
  if (!mojo::Equals(this->f_uint32, other_struct.f_uint32))
    return false;
  if (!mojo::Equals(this->f_uint64, other_struct.f_uint64))
    return false;
  if (!mojo::Equals(this->f_string, other_struct.f_string))
    return false;
  if (!mojo::Equals(this->f_string2, other_struct.f_string2))
    return false;
  if (!mojo::Equals(this->f_string_array, other_struct.f_string_array))
    return false;
  if (!mojo::Equals(this->f_string_set, other_struct.f_string_set))
    return false;
  if (!mojo::Equals(this->f_struct, other_struct.f_struct))
    return false;
  if (!mojo::Equals(this->f_struct_array, other_struct.f_struct_array))
    return false;
  if (!mojo::Equals(this->f_struct_map, other_struct.f_struct_map))
    return false;
  return true;
}

template <typename T, StructWithTraits::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_enum < rhs.f_enum)
    return true;
  if (rhs.f_enum < lhs.f_enum)
    return false;
  if (lhs.f_bool < rhs.f_bool)
    return true;
  if (rhs.f_bool < lhs.f_bool)
    return false;
  if (lhs.f_uint32 < rhs.f_uint32)
    return true;
  if (rhs.f_uint32 < lhs.f_uint32)
    return false;
  if (lhs.f_uint64 < rhs.f_uint64)
    return true;
  if (rhs.f_uint64 < lhs.f_uint64)
    return false;
  if (lhs.f_string < rhs.f_string)
    return true;
  if (rhs.f_string < lhs.f_string)
    return false;
  if (lhs.f_string2 < rhs.f_string2)
    return true;
  if (rhs.f_string2 < lhs.f_string2)
    return false;
  if (lhs.f_string_array < rhs.f_string_array)
    return true;
  if (rhs.f_string_array < lhs.f_string_array)
    return false;
  if (lhs.f_string_set < rhs.f_string_set)
    return true;
  if (rhs.f_string_set < lhs.f_string_set)
    return false;
  if (lhs.f_struct < rhs.f_struct)
    return true;
  if (rhs.f_struct < lhs.f_struct)
    return false;
  if (lhs.f_struct_array < rhs.f_struct_array)
    return true;
  if (rhs.f_struct_array < lhs.f_struct_array)
    return false;
  if (lhs.f_struct_map < rhs.f_struct_map)
    return true;
  if (rhs.f_struct_map < lhs.f_struct_map)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithUnreachableTraitsPtr StructWithUnreachableTraits::Clone() const {
  return New(
      mojo::Clone(ignore_me)
  );
}

template <typename T, StructWithUnreachableTraits::EnableIfSame<T>*>
bool StructWithUnreachableTraits::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->ignore_me, other_struct.ignore_me))
    return false;
  return true;
}

template <typename T, StructWithUnreachableTraits::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.ignore_me < rhs.ignore_me)
    return true;
  if (rhs.ignore_me < lhs.ignore_me)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithTraitsContainerPtr StructWithTraitsContainer::Clone() const {
  return New(
      mojo::Clone(f_struct)
  );
}

template <typename T, StructWithTraitsContainer::EnableIfSame<T>*>
bool StructWithTraitsContainer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_struct, other_struct.f_struct))
    return false;
  return true;
}

template <typename T, StructWithTraitsContainer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_struct < rhs.f_struct)
    return true;
  if (rhs.f_struct < lhs.f_struct)
    return false;
  return false;
}
template <typename StructPtrType>
TrivialStructWithTraitsPtr TrivialStructWithTraits::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, TrivialStructWithTraits::EnableIfSame<T>*>
bool TrivialStructWithTraits::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, TrivialStructWithTraits::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
MoveOnlyStructWithTraitsPtr MoveOnlyStructWithTraits::Clone() const {
  return New(
      mojo::Clone(f_handle)
  );
}

template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>*>
bool MoveOnlyStructWithTraits::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_handle, other_struct.f_handle))
    return false;
  return true;
}

template <typename T, MoveOnlyStructWithTraits::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_handle < rhs.f_handle)
    return true;
  if (rhs.f_handle < lhs.f_handle)
    return false;
  return false;
}
template <typename StructPtrType>
MoveOnlyStructWithTraitsContainerPtr MoveOnlyStructWithTraitsContainer::Clone() const {
  return New(
      mojo::Clone(f_struct)
  );
}

template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>*>
bool MoveOnlyStructWithTraitsContainer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_struct, other_struct.f_struct))
    return false;
  return true;
}

template <typename T, MoveOnlyStructWithTraitsContainer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_struct < rhs.f_struct)
    return true;
  if (rhs.f_struct < lhs.f_struct)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithTraitsForUniquePtrPtr StructWithTraitsForUniquePtr::Clone() const {
  return New(
      mojo::Clone(f_int32)
  );
}

template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>*>
bool StructWithTraitsForUniquePtr::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_int32, other_struct.f_int32))
    return false;
  return true;
}

template <typename T, StructWithTraitsForUniquePtr::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_int32 < rhs.f_int32)
    return true;
  if (rhs.f_int32 < lhs.f_int32)
    return false;
  return false;
}
template <typename StructPtrType>
EnumWithTraitsContainerPtr EnumWithTraitsContainer::Clone() const {
  return New(
      mojo::Clone(f_field)
  );
}

template <typename T, EnumWithTraitsContainer::EnableIfSame<T>*>
bool EnumWithTraitsContainer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_field, other_struct.f_field))
    return false;
  return true;
}

template <typename T, EnumWithTraitsContainer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_field < rhs.f_field)
    return true;
  if (rhs.f_field < lhs.f_field)
    return false;
  return false;
}
template <typename StructPtrType>
StructForceSerializePtr StructForceSerialize::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructForceSerialize::EnableIfSame<T>*>
bool StructForceSerialize::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructForceSerialize::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructNestedForceSerializePtr StructNestedForceSerialize::Clone() const {
  return New(
      mojo::Clone(force)
  );
}

template <typename T, StructNestedForceSerialize::EnableIfSame<T>*>
bool StructNestedForceSerialize::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->force, other_struct.force))
    return false;
  return true;
}

template <typename T, StructNestedForceSerialize::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.force < rhs.force)
    return true;
  if (rhs.force < lhs.force)
    return false;
  return false;
}


}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::NestedStructWithTraits::DataView,
                                         ::mojo::test::NestedStructWithTraitsPtr> {
  static bool IsNull(const ::mojo::test::NestedStructWithTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::NestedStructWithTraitsPtr* output) { output->reset(); }

  static decltype(::mojo::test::NestedStructWithTraits::value) value(
      const ::mojo::test::NestedStructWithTraitsPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::NestedStructWithTraits::DataView input, ::mojo::test::NestedStructWithTraitsPtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructWithTraits::DataView,
                                         ::mojo::test::StructWithTraitsPtr> {
  static bool IsNull(const ::mojo::test::StructWithTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructWithTraitsPtr* output) { output->reset(); }

  static decltype(::mojo::test::StructWithTraits::f_enum) f_enum(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_enum;
  }

  static decltype(::mojo::test::StructWithTraits::f_bool) f_bool(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_bool;
  }

  static decltype(::mojo::test::StructWithTraits::f_uint32) f_uint32(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_uint32;
  }

  static decltype(::mojo::test::StructWithTraits::f_uint64) f_uint64(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_uint64;
  }

  static const decltype(::mojo::test::StructWithTraits::f_string)& f_string(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_string;
  }

  static const decltype(::mojo::test::StructWithTraits::f_string2)& f_string2(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_string2;
  }

  static const decltype(::mojo::test::StructWithTraits::f_string_array)& f_string_array(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_string_array;
  }

  static const decltype(::mojo::test::StructWithTraits::f_string_set)& f_string_set(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_string_set;
  }

  static const decltype(::mojo::test::StructWithTraits::f_struct)& f_struct(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_struct;
  }

  static const decltype(::mojo::test::StructWithTraits::f_struct_array)& f_struct_array(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_struct_array;
  }

  static const decltype(::mojo::test::StructWithTraits::f_struct_map)& f_struct_map(
      const ::mojo::test::StructWithTraitsPtr& input) {
    return input->f_struct_map;
  }

  static bool Read(::mojo::test::StructWithTraits::DataView input, ::mojo::test::StructWithTraitsPtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructWithUnreachableTraits::DataView,
                                         ::mojo::test::StructWithUnreachableTraitsPtr> {
  static bool IsNull(const ::mojo::test::StructWithUnreachableTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructWithUnreachableTraitsPtr* output) { output->reset(); }

  static decltype(::mojo::test::StructWithUnreachableTraits::ignore_me) ignore_me(
      const ::mojo::test::StructWithUnreachableTraitsPtr& input) {
    return input->ignore_me;
  }

  static bool Read(::mojo::test::StructWithUnreachableTraits::DataView input, ::mojo::test::StructWithUnreachableTraitsPtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructWithTraitsContainer::DataView,
                                         ::mojo::test::StructWithTraitsContainerPtr> {
  static bool IsNull(const ::mojo::test::StructWithTraitsContainerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructWithTraitsContainerPtr* output) { output->reset(); }

  static const decltype(::mojo::test::StructWithTraitsContainer::f_struct)& f_struct(
      const ::mojo::test::StructWithTraitsContainerPtr& input) {
    return input->f_struct;
  }

  static bool Read(::mojo::test::StructWithTraitsContainer::DataView input, ::mojo::test::StructWithTraitsContainerPtr* output);
};


template <>
struct  StructTraits<::mojo::test::TrivialStructWithTraits::DataView,
                                         ::mojo::test::TrivialStructWithTraitsPtr> {
  static bool IsNull(const ::mojo::test::TrivialStructWithTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::TrivialStructWithTraitsPtr* output) { output->reset(); }

  static decltype(::mojo::test::TrivialStructWithTraits::value) value(
      const ::mojo::test::TrivialStructWithTraitsPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::TrivialStructWithTraits::DataView input, ::mojo::test::TrivialStructWithTraitsPtr* output);
};


template <>
struct  StructTraits<::mojo::test::MoveOnlyStructWithTraits::DataView,
                                         ::mojo::test::MoveOnlyStructWithTraitsPtr> {
  static bool IsNull(const ::mojo::test::MoveOnlyStructWithTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::MoveOnlyStructWithTraitsPtr* output) { output->reset(); }

  static  decltype(::mojo::test::MoveOnlyStructWithTraits::f_handle)& f_handle(
       ::mojo::test::MoveOnlyStructWithTraitsPtr& input) {
    return input->f_handle;
  }

  static bool Read(::mojo::test::MoveOnlyStructWithTraits::DataView input, ::mojo::test::MoveOnlyStructWithTraitsPtr* output);
};


template <>
struct  StructTraits<::mojo::test::MoveOnlyStructWithTraitsContainer::DataView,
                                         ::mojo::test::MoveOnlyStructWithTraitsContainerPtr> {
  static bool IsNull(const ::mojo::test::MoveOnlyStructWithTraitsContainerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::MoveOnlyStructWithTraitsContainerPtr* output) { output->reset(); }

  static  decltype(::mojo::test::MoveOnlyStructWithTraitsContainer::f_struct)& f_struct(
       ::mojo::test::MoveOnlyStructWithTraitsContainerPtr& input) {
    return input->f_struct;
  }

  static bool Read(::mojo::test::MoveOnlyStructWithTraitsContainer::DataView input, ::mojo::test::MoveOnlyStructWithTraitsContainerPtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructWithTraitsForUniquePtr::DataView,
                                         ::mojo::test::StructWithTraitsForUniquePtrPtr> {
  static bool IsNull(const ::mojo::test::StructWithTraitsForUniquePtrPtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructWithTraitsForUniquePtrPtr* output) { output->reset(); }

  static decltype(::mojo::test::StructWithTraitsForUniquePtr::f_int32) f_int32(
      const ::mojo::test::StructWithTraitsForUniquePtrPtr& input) {
    return input->f_int32;
  }

  static bool Read(::mojo::test::StructWithTraitsForUniquePtr::DataView input, ::mojo::test::StructWithTraitsForUniquePtrPtr* output);
};


template <>
struct  StructTraits<::mojo::test::EnumWithTraitsContainer::DataView,
                                         ::mojo::test::EnumWithTraitsContainerPtr> {
  static bool IsNull(const ::mojo::test::EnumWithTraitsContainerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::EnumWithTraitsContainerPtr* output) { output->reset(); }

  static decltype(::mojo::test::EnumWithTraitsContainer::f_field) f_field(
      const ::mojo::test::EnumWithTraitsContainerPtr& input) {
    return input->f_field;
  }

  static bool Read(::mojo::test::EnumWithTraitsContainer::DataView input, ::mojo::test::EnumWithTraitsContainerPtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructForceSerialize::DataView,
                                         ::mojo::test::StructForceSerializePtr> {
  static bool IsNull(const ::mojo::test::StructForceSerializePtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructForceSerializePtr* output) { output->reset(); }

  static decltype(::mojo::test::StructForceSerialize::value) value(
      const ::mojo::test::StructForceSerializePtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::StructForceSerialize::DataView input, ::mojo::test::StructForceSerializePtr* output);
};


template <>
struct  StructTraits<::mojo::test::StructNestedForceSerialize::DataView,
                                         ::mojo::test::StructNestedForceSerializePtr> {
  static bool IsNull(const ::mojo::test::StructNestedForceSerializePtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructNestedForceSerializePtr* output) { output->reset(); }

  static const decltype(::mojo::test::StructNestedForceSerialize::force)& force(
      const ::mojo::test::StructNestedForceSerializePtr& input) {
    return input->force;
  }

  static bool Read(::mojo::test::StructNestedForceSerialize::DataView input, ::mojo::test::StructNestedForceSerializePtr* output);
};


template <>
struct  UnionTraits<::mojo::test::UnionWithTraits::DataView,
                                        ::mojo::test::UnionWithTraitsPtr> {
  static bool IsNull(const ::mojo::test::UnionWithTraitsPtr& input) { return !input; }
  static void SetToNull(::mojo::test::UnionWithTraitsPtr* output) { output->reset(); }

  static ::mojo::test::UnionWithTraits::Tag GetTag(const ::mojo::test::UnionWithTraitsPtr& input) {
    return input->which();
  }

  static  int32_t f_int32(const ::mojo::test::UnionWithTraitsPtr& input) {
    return input->get_f_int32();
  }

  static const ::mojo::test::NestedStructWithTraitsImpl& f_struct(const ::mojo::test::UnionWithTraitsPtr& input) {
    return input->get_f_struct();
  }

  static bool Read(::mojo::test::UnionWithTraits::DataView input, ::mojo::test::UnionWithTraitsPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjAyMSwgImJlZ2luIjogMjAwNCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UcmFpdHNUZXN0U2VydmljZSJ9fSwg
eyJlbmQiOiAzMjQ1LCAiYmVnaW4iOiAzMjI1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2aWNlLkVjaG9TdHJ1Y3RXaXRo
VHJhaXRzIn19LCB7ImVuZCI6IDM1NzMsICJiZWdpbiI6IDM1NDYsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVHJhaXRzVGVzdFNlcnZpY2UuRWNo
b1RyaXZpYWxTdHJ1Y3RXaXRoVHJhaXRzIn19LCB7ImVuZCI6IDM5MTIsICJiZWdpbiI6IDM4ODQs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVHJh
aXRzVGVzdFNlcnZpY2UuRWNob01vdmVPbmx5U3RydWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA0
MjkzLCAiYmVnaW4iOiA0MjU3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2aWNlLkVjaG9OdWxsYWJsZU1vdmVPbmx5U3Ry
dWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA0NjE4LCAiYmVnaW4iOiA0NjAwLCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2
aWNlLkVjaG9FbnVtV2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA0OTMxLCAiYmVnaW4iOiA0ODk5LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0
c1Rlc3RTZXJ2aWNlLkVjaG9TdHJ1Y3RXaXRoVHJhaXRzRm9yVW5pcXVlUHRyIn19LCB7ImVuZCI6
IDUyNzIsICJiZWdpbiI6IDUyMzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuVHJhaXRzVGVzdFNlcnZpY2UuRWNob051bGxhYmxlU3RydWN0V2l0
aFRyYWl0c0ZvclVuaXF1ZVB0ciJ9fSwgeyJlbmQiOiA1NTg4LCAiYmVnaW4iOiA1NTY5LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rl
c3RTZXJ2aWNlLkVjaG9VbmlvbldpdGhUcmFpdHMifX0sIHsiZW5kIjogNTk3NCwgImJlZ2luIjog
NTk1MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5UZXN0VW5zZXJpYWxpemVkU3RydWN0In19LCB7ImVuZCI6IDY5MTAsICJiZWdpbiI6IDY4ODgs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVz
dFVuc2VyaWFsaXplZFN0cnVjdC5QYXNzVW5zZXJpYWxpemVkU3RydWN0In19LCB7ImVuZCI6IDcy
ODcsICJiZWdpbiI6IDcyNjcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuRm9yY2VTZXJpYWxpemVUZXN0ZXIifX0sIHsiZW5kIjogODI2NCwgImJl
Z2luIjogODIzOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5Gb3JjZVNlcmlhbGl6ZVRlc3Rlci5TZW5kRm9yY2VTZXJpYWxpemVkU3RydWN0In19
LCB7ImVuZCI6IDg2MjYsICJiZWdpbiI6IDg1OTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuRm9yY2VTZXJpYWxpemVUZXN0ZXIuU2VuZE5lc3Rl
ZEZvcmNlU2VyaWFsaXplZFN0cnVjdCJ9fSwgeyJlbmQiOiA5MDg3LCAiYmVnaW4iOiA5MDY3LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0
c1Rlc3RTZXJ2aWNlLkVjaG9TdHJ1Y3RXaXRoVHJhaXRzIn19LCB7ImVuZCI6IDkyOTIsICJiZWdp
biI6IDkyNjUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuVHJhaXRzVGVzdFNlcnZpY2UuRWNob1RyaXZpYWxTdHJ1Y3RXaXRoVHJhaXRzIn19LCB7
ImVuZCI6IDk1MDYsICJiZWdpbiI6IDk0NzgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVHJhaXRzVGVzdFNlcnZpY2UuRWNob01vdmVPbmx5U3Ry
dWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA5NzM4LCAiYmVnaW4iOiA5NzAyLCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2
aWNlLkVjaG9OdWxsYWJsZU1vdmVPbmx5U3RydWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA5OTU4
LCAiYmVnaW4iOiA5OTQwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2aWNlLkVjaG9FbnVtV2l0aFRyYWl0cyJ9fSwgeyJl
bmQiOiAxMDE2MiwgImJlZ2luIjogMTAxMzAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVHJhaXRzVGVzdFNlcnZpY2UuRWNob1N0cnVjdFdpdGhU
cmFpdHNGb3JVbmlxdWVQdHIifX0sIHsiZW5kIjogMTAzODYsICJiZWdpbiI6IDEwMzQ2LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rl
c3RTZXJ2aWNlLkVjaG9OdWxsYWJsZVN0cnVjdFdpdGhUcmFpdHNGb3JVbmlxdWVQdHIifX0sIHsi
ZW5kIjogMTA1NzYsICJiZWdpbiI6IDEwNTU3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRyYWl0c1Rlc3RTZXJ2aWNlLkVjaG9VbmlvbldpdGhU
cmFpdHMifX0sIHsiZW5kIjogMTExMjIsICJiZWdpbiI6IDExMTAwLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RVbnNlcmlhbGl6ZWRTdHJ1
Y3QuUGFzc1Vuc2VyaWFsaXplZFN0cnVjdCJ9fSwgeyJlbmQiOiAxMTY2NSwgImJlZ2luIjogMTE2
NDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
Rm9yY2VTZXJpYWxpemVUZXN0ZXIuU2VuZEZvcmNlU2VyaWFsaXplZFN0cnVjdCJ9fSwgeyJlbmQi
OiAxMTg5MCwgImJlZ2luIjogMTE4NTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuRm9yY2VTZXJpYWxpemVUZXN0ZXIuU2VuZE5lc3RlZEZvcmNl
U2VyaWFsaXplZFN0cnVjdCJ9fSwgeyJlbmQiOiAxNjk5MCwgImJlZ2luIjogMTY5NjgsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuTmVzdGVkU3Ry
dWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiAyMDgyOCwgImJlZ2luIjogMjA4MjMsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuTmVzdGVkU3RydWN0
V2l0aFRyYWl0cy52YWx1ZSJ9fSwgeyJlbmQiOiAyMTkyNywgImJlZ2luIjogMjE5MDAsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0V2l0
aFVucmVhY2hhYmxlVHJhaXRzIn19LCB7ImVuZCI6IDI1ODk2LCAiYmVnaW4iOiAyNTg4NywgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3RX
aXRoVW5yZWFjaGFibGVUcmFpdHMuaWdub3JlX21lIn19LCB7ImVuZCI6IDI3MDA3LCAiYmVnaW4i
OiAyNjk4NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5Ucml2aWFsU3RydWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiAzMDg3MCwgImJlZ2luIjog
MzA4NjUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuVHJpdmlhbFN0cnVjdFdpdGhUcmFpdHMudmFsdWUifX0sIHsiZW5kIjogMzE5NzYsICJiZWdp
biI6IDMxOTQ4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LlN0cnVjdFdpdGhUcmFpdHNGb3JVbmlxdWVQdHIifX0sIHsiZW5kIjogMzU5NzAsICJi
ZWdpbiI6IDM1OTYzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0LlN0cnVjdFdpdGhUcmFpdHNGb3JVbmlxdWVQdHIuZl9pbnQzMiJ9fSwgeyJlbmQi
OiAzNzA4NCwgImJlZ2luIjogMzcwNjEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuRW51bVdpdGhUcmFpdHNDb250YWluZXIifX0sIHsiZW5kIjog
NDEwMDMsICJiZWdpbiI6IDQwOTk2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LkVudW1XaXRoVHJhaXRzQ29udGFpbmVyLmZfZmllbGQifX0sIHsi
ZW5kIjogNDIwOTEsICJiZWdpbiI6IDQyMDcxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdEZvcmNlU2VyaWFsaXplIn19LCB7ImVuZCI6
IDQ1ODc5LCAiYmVnaW4iOiA0NTg3NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3RGb3JjZVNlcmlhbGl6ZS52YWx1ZSJ9fSwgeyJlbmQi
OiA0Njk0NiwgImJlZ2luIjogNDY5MzEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25XaXRoVHJhaXRzIn19LCB7ImVuZCI6IDQ4OTc0LCAi
YmVnaW4iOiA0ODk2NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5VbmlvbldpdGhUcmFpdHMuZl9pbnQzMiJ9fSwgeyJlbmQiOiA0OTA5NSwgImJl
Z2luIjogNDkwODQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvLnRlc3QuVW5pb25XaXRoVHJhaXRzLmZfaW50MzIifX0sIHsiZW5kIjogNDkyNDYsICJiZWdp
biI6IDQ5MjM1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LlVuaW9uV2l0aFRyYWl0cy5mX2ludDMyIn19LCB7ImVuZCI6IDQ5MzQ4LCAiYmVnaW4i
OiA0OTMzNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5VbmlvbldpdGhUcmFpdHMuZl9zdHJ1Y3QifX0sIHsiZW5kIjogNDk1MDYsICJiZWdpbiI6
IDQ5NDk0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LlVuaW9uV2l0aFRyYWl0cy5mX3N0cnVjdCJ9fSwgeyJlbmQiOiA0OTY2NCwgImJlZ2luIjog
NDk2NTIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuVW5pb25XaXRoVHJhaXRzLmZfc3RydWN0In19LCB7ImVuZCI6IDUwNjE4LCAiYmVnaW4iOiA1
MDYwMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5TdHJ1Y3RXaXRoVHJhaXRzIn19LCB7ImVuZCI6IDU0ODE5LCAiYmVnaW4iOiA1NDgxMywgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3RX
aXRoVHJhaXRzLmZfZW51bSJ9fSwgeyJlbmQiOiA1NDg5MSwgImJlZ2luIjogNTQ4ODUsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0V2l0
aFRyYWl0cy5mX2Jvb2wifX0sIHsiZW5kIjogNTQ5NzEsICJiZWdpbiI6IDU0OTYzLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdFdpdGhU
cmFpdHMuZl91aW50MzIifX0sIHsiZW5kIjogNTUwNTEsICJiZWdpbiI6IDU1MDQzLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdFdpdGhU
cmFpdHMuZl91aW50NjQifX0sIHsiZW5kIjogNTUxMzQsICJiZWdpbiI6IDU1MTI2LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdFdpdGhU
cmFpdHMuZl9zdHJpbmcifX0sIHsiZW5kIjogNTUyMTksICJiZWdpbiI6IDU1MjEwLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdFdpdGhU
cmFpdHMuZl9zdHJpbmcyIn19LCB7ImVuZCI6IDU1MzI3LCAiYmVnaW4iOiA1NTMxMywgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3RXaXRo
VHJhaXRzLmZfc3RyaW5nX2FycmF5In19LCB7ImVuZCI6IDU1NDMxLCAiYmVnaW4iOiA1NTQxOSwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1
Y3RXaXRoVHJhaXRzLmZfc3RyaW5nX3NldCJ9fSwgeyJlbmQiOiA1NTU0MywgImJlZ2luIjogNTU1
MzUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
U3RydWN0V2l0aFRyYWl0cy5mX3N0cnVjdCJ9fSwgeyJlbmQiOiA1NTY4MCwgImJlZ2luIjogNTU2
NjYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
U3RydWN0V2l0aFRyYWl0cy5mX3N0cnVjdF9hcnJheSJ9fSwgeyJlbmQiOiA1NTgyOSwgImJlZ2lu
IjogNTU4MTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuU3RydWN0V2l0aFRyYWl0cy5mX3N0cnVjdF9tYXAifX0sIHsiZW5kIjogNTY5MDAsICJi
ZWdpbiI6IDU2ODc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0LlN0cnVjdFdpdGhUcmFpdHNDb250YWluZXIifX0sIHsiZW5kIjogNjA4ODMsICJi
ZWdpbiI6IDYwODc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0LlN0cnVjdFdpdGhUcmFpdHNDb250YWluZXIuZl9zdHJ1Y3QifX0sIHsiZW5kIjog
NjE5ODgsICJiZWdpbiI6IDYxOTY0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0Lk1vdmVPbmx5U3RydWN0V2l0aFRyYWl0cyJ9fSwgeyJlbmQiOiA2
NTcwMSwgImJlZ2luIjogNjU2OTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuTW92ZU9ubHlTdHJ1Y3RXaXRoVHJhaXRzLmZfaGFuZGxlIn19LCB7
ImVuZCI6IDY2ODczLCAiYmVnaW4iOiA2Njg0MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Nb3ZlT25seVN0cnVjdFdpdGhUcmFpdHNDb250YWlu
ZXIifX0sIHsiZW5kIjogNzA4NDYsICJiZWdpbiI6IDcwODM4LCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lk1vdmVPbmx5U3RydWN0V2l0aFRyYWl0
c0NvbnRhaW5lci5mX3N0cnVjdCJ9fSwgeyJlbmQiOiA3MjA1MiwgImJlZ2luIjogNzIwMjYsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0
TmVzdGVkRm9yY2VTZXJpYWxpemUifX0sIHsiZW5kIjogNzYwNTksICJiZWdpbiI6IDc2MDU0LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVj
dE5lc3RlZEZvcmNlU2VyaWFsaXplLmZvcmNlIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/