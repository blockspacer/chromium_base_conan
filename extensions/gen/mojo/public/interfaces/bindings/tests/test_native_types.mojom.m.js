// mojo/public/interfaces/bindings/tests/test_native_types.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';

import {
  TypemappedRect as mojo_test_TypemappedRect,
  TypemappedRectSpec as mojo_test_TypemappedRectSpec,
  SharedTypemappedRect as mojo_test_SharedTypemappedRect,
  SharedTypemappedRectSpec as mojo_test_SharedTypemappedRectSpec
} from './rect.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const PickledEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const PickledEnum = {
  
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const PicklePasserPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.PicklePasser', scope);
  }
};

/** @interface */
export const PicklePasserInterface = class {
  
  /**
   * @param { !PickledStruct } pickle
   * @return {!Promise<{
        passed: !PickledStruct,
   *  }>}
   */

  passPickledStruct(pickle) {}
  
  /**
   * @param { number } pickle
   * @return {!Promise<{
        passed: number,
   *  }>}
   */

  passPickledEnum(pickle) {}
  
  /**
   * @param { !PickleContainer } container
   * @return {!Promise<{
        passed: !PickleContainer,
   *  }>}
   */

  passPickleContainer(container) {}
  
  /**
   * @param { !Array<!PickledStruct> } pickles
   * @return {!Promise<{
        passed: !Array<!PickledStruct>,
   *  }>}
   */

  passPickles(pickles) {}
  
  /**
   * @param { !Array<!Array<!PickledStruct>> } pickleArrays
   * @return {!Promise<{
        passed: !Array<!Array<!PickledStruct>>,
   *  }>}
   */

  passPickleArrays(pickleArrays) {}
};

/**
 * @implements { PicklePasserInterface }
 */
export const PicklePasserRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PicklePasserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PicklePasserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PicklePasserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !PickledStruct } pickle
   * @return {!Promise<{
        passed: !PickledStruct,
   *  }>}
   */

  passPickledStruct(
      pickle) {
    return this.proxy.sendMessage(
        0,
        PicklePasser_PassPickledStruct_ParamsSpec.$,
        PicklePasser_PassPickledStruct_ResponseParamsSpec.$,
        [
          pickle
        ]);
  }

  
  /**
   * @param { number } pickle
   * @return {!Promise<{
        passed: number,
   *  }>}
   */

  passPickledEnum(
      pickle) {
    return this.proxy.sendMessage(
        1,
        PicklePasser_PassPickledEnum_ParamsSpec.$,
        PicklePasser_PassPickledEnum_ResponseParamsSpec.$,
        [
          pickle
        ]);
  }

  
  /**
   * @param { !PickleContainer } container
   * @return {!Promise<{
        passed: !PickleContainer,
   *  }>}
   */

  passPickleContainer(
      container) {
    return this.proxy.sendMessage(
        2,
        PicklePasser_PassPickleContainer_ParamsSpec.$,
        PicklePasser_PassPickleContainer_ResponseParamsSpec.$,
        [
          container
        ]);
  }

  
  /**
   * @param { !Array<!PickledStruct> } pickles
   * @return {!Promise<{
        passed: !Array<!PickledStruct>,
   *  }>}
   */

  passPickles(
      pickles) {
    return this.proxy.sendMessage(
        3,
        PicklePasser_PassPickles_ParamsSpec.$,
        PicklePasser_PassPickles_ResponseParamsSpec.$,
        [
          pickles
        ]);
  }

  
  /**
   * @param { !Array<!Array<!PickledStruct>> } pickleArrays
   * @return {!Promise<{
        passed: !Array<!Array<!PickledStruct>>,
   *  }>}
   */

  passPickleArrays(
      pickleArrays) {
    return this.proxy.sendMessage(
        4,
        PicklePasser_PassPickleArrays_ParamsSpec.$,
        PicklePasser_PassPickleArrays_ResponseParamsSpec.$,
        [
          pickleArrays
        ]);
  }
};

/**
 * An object which receives request messages for the PicklePasser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const PicklePasserReceiver = class {
  /**
   * @param {!PicklePasserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PicklePasserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PicklePasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PicklePasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PicklePasser_PassPickledStruct_ParamsSpec.$,
        PicklePasser_PassPickledStruct_ResponseParamsSpec.$,
        impl.passPickledStruct.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        PicklePasser_PassPickledEnum_ParamsSpec.$,
        PicklePasser_PassPickledEnum_ResponseParamsSpec.$,
        impl.passPickledEnum.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        PicklePasser_PassPickleContainer_ParamsSpec.$,
        PicklePasser_PassPickleContainer_ResponseParamsSpec.$,
        impl.passPickleContainer.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        PicklePasser_PassPickles_ParamsSpec.$,
        PicklePasser_PassPickles_ResponseParamsSpec.$,
        impl.passPickles.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        PicklePasser_PassPickleArrays_ParamsSpec.$,
        PicklePasser_PassPickleArrays_ResponseParamsSpec.$,
        impl.passPickleArrays.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const PicklePasser = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.PicklePasser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PicklePasserRemote}
   */
  static getRemote() {
    let remote = new PicklePasserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PicklePasser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const PicklePasserCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PicklePasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PicklePasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passPickledStruct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PicklePasser_PassPickledStruct_ParamsSpec.$,
        PicklePasser_PassPickledStruct_ResponseParamsSpec.$,
        this.passPickledStruct.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passPickledEnum =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        PicklePasser_PassPickledEnum_ParamsSpec.$,
        PicklePasser_PassPickledEnum_ResponseParamsSpec.$,
        this.passPickledEnum.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passPickleContainer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        PicklePasser_PassPickleContainer_ParamsSpec.$,
        PicklePasser_PassPickleContainer_ResponseParamsSpec.$,
        this.passPickleContainer.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passPickles =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        PicklePasser_PassPickles_ParamsSpec.$,
        PicklePasser_PassPickles_ResponseParamsSpec.$,
        this.passPickles.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passPickleArrays =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        PicklePasser_PassPickleArrays_ParamsSpec.$,
        PicklePasser_PassPickleArrays_ResponseParamsSpec.$,
        this.passPickleArrays.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const RectServicePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.RectService', scope);
  }
};

/** @interface */
export const RectServiceInterface = class {
  
  /**
   * @param { !mojo_test_TypemappedRect } r
   */

  addRect(r) {}
  
  /**
   * @return {!Promise<{
        largest: !mojo_test_TypemappedRect,
   *  }>}
   */

  getLargestRect() {}
  
  /**
   * @param { !mojo_test_SharedTypemappedRect } r
   * @return {!Promise<{
        passed: !mojo_test_SharedTypemappedRect,
   *  }>}
   */

  passSharedRect(r) {}
};

/**
 * @implements { RectServiceInterface }
 */
export const RectServiceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RectServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RectServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RectServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojo_test_TypemappedRect } r
   */

  addRect(
      r) {
    this.proxy.sendMessage(
        0,
        RectService_AddRect_ParamsSpec.$,
        null,
        [
          r
        ]);
  }

  
  /**
   * @return {!Promise<{
        largest: !mojo_test_TypemappedRect,
   *  }>}
   */

  getLargestRect() {
    return this.proxy.sendMessage(
        1,
        RectService_GetLargestRect_ParamsSpec.$,
        RectService_GetLargestRect_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !mojo_test_SharedTypemappedRect } r
   * @return {!Promise<{
        passed: !mojo_test_SharedTypemappedRect,
   *  }>}
   */

  passSharedRect(
      r) {
    return this.proxy.sendMessage(
        2,
        RectService_PassSharedRect_ParamsSpec.$,
        RectService_PassSharedRect_ResponseParamsSpec.$,
        [
          r
        ]);
  }
};

/**
 * An object which receives request messages for the RectService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const RectServiceReceiver = class {
  /**
   * @param {!RectServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RectServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RectServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RectServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RectService_AddRect_ParamsSpec.$,
        null,
        impl.addRect.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RectService_GetLargestRect_ParamsSpec.$,
        RectService_GetLargestRect_ResponseParamsSpec.$,
        impl.getLargestRect.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        RectService_PassSharedRect_ParamsSpec.$,
        RectService_PassSharedRect_ResponseParamsSpec.$,
        impl.passSharedRect.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const RectService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.RectService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RectServiceRemote}
   */
  static getRemote() {
    let remote = new RectServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RectService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const RectServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RectServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RectServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addRect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RectService_AddRect_ParamsSpec.$,
        null,
        this.addRect.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLargestRect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RectService_GetLargestRect_ParamsSpec.$,
        RectService_GetLargestRect_ResponseParamsSpec.$,
        this.getLargestRect.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passSharedRect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        RectService_PassSharedRect_ParamsSpec.$,
        RectService_PassSharedRect_ResponseParamsSpec.$,
        this.passSharedRect.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const NativeTypeTesterPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.NativeTypeTester', scope);
  }
};

/** @interface */
export const NativeTypeTesterInterface = class {
  
  /**
   * @param { !TestNativeStructMojom } s
   * @return {!Promise<{
        passed: !TestNativeStructMojom,
   *  }>}
   */

  passNativeStruct(s) {}
  
  /**
   * @param { !TestNativeStructWithAttachmentsMojom } s
   * @return {!Promise<{
        s: !TestNativeStructWithAttachmentsMojom,
   *  }>}
   */

  passNativeStructWithAttachments(s) {}
};

/**
 * @implements { NativeTypeTesterInterface }
 */
export const NativeTypeTesterRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!NativeTypeTesterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          NativeTypeTesterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!NativeTypeTesterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !TestNativeStructMojom } s
   * @return {!Promise<{
        passed: !TestNativeStructMojom,
   *  }>}
   */

  passNativeStruct(
      s) {
    return this.proxy.sendMessage(
        0,
        NativeTypeTester_PassNativeStruct_ParamsSpec.$,
        NativeTypeTester_PassNativeStruct_ResponseParamsSpec.$,
        [
          s
        ]);
  }

  
  /**
   * @param { !TestNativeStructWithAttachmentsMojom } s
   * @return {!Promise<{
        s: !TestNativeStructWithAttachmentsMojom,
   *  }>}
   */

  passNativeStructWithAttachments(
      s) {
    return this.proxy.sendMessage(
        1,
        NativeTypeTester_PassNativeStructWithAttachments_ParamsSpec.$,
        NativeTypeTester_PassNativeStructWithAttachments_ResponseParamsSpec.$,
        [
          s
        ]);
  }
};

/**
 * An object which receives request messages for the NativeTypeTester
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const NativeTypeTesterReceiver = class {
  /**
   * @param {!NativeTypeTesterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!NativeTypeTesterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        NativeTypeTesterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeTypeTesterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        NativeTypeTester_PassNativeStruct_ParamsSpec.$,
        NativeTypeTester_PassNativeStruct_ResponseParamsSpec.$,
        impl.passNativeStruct.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        NativeTypeTester_PassNativeStructWithAttachments_ParamsSpec.$,
        NativeTypeTester_PassNativeStructWithAttachments_ResponseParamsSpec.$,
        impl.passNativeStructWithAttachments.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const NativeTypeTester = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.NativeTypeTester";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!NativeTypeTesterRemote}
   */
  static getRemote() {
    let remote = new NativeTypeTesterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the NativeTypeTester
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const NativeTypeTesterCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      NativeTypeTesterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeTypeTesterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passNativeStruct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        NativeTypeTester_PassNativeStruct_ParamsSpec.$,
        NativeTypeTester_PassNativeStruct_ResponseParamsSpec.$,
        this.passNativeStruct.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passNativeStructWithAttachments =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        NativeTypeTester_PassNativeStructWithAttachments_ParamsSpec.$,
        NativeTypeTester_PassNativeStructWithAttachments_ResponseParamsSpec.$,
        this.passNativeStructWithAttachments.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PickledStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PickleContainerSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestNativeStructMojomSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestNativeStructWithAttachmentsMojomSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickledStruct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickledStruct_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickledEnum_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickledEnum_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickleContainer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickleContainer_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickles_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickles_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickleArrays_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PicklePasser_PassPickleArrays_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RectService_AddRect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RectService_GetLargestRect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RectService_GetLargestRect_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RectService_PassSharedRect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RectService_PassSharedRect_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeTypeTester_PassNativeStruct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeTypeTester_PassNativeStruct_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeTypeTester_PassNativeStructWithAttachments_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeTypeTester_PassNativeStructWithAttachments_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    PickledStructSpec.$,
    'PickledStruct',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PickledStruct = class {
  constructor() {
  }
};



mojo.internal.Struct(
    PickleContainerSpec.$,
    'PickleContainer',
    [
      mojo.internal.StructField(
        'fStruct', 0,
        0,
        PickledStructSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fEnum', 8,
        0,
        PickledEnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const PickleContainer = class {
  constructor() {
    /** @type { !PickledStruct } */
    this.fStruct;
    /** @type { !PickledEnum } */
    this.fEnum;
  }
};



mojo.internal.Struct(
    TestNativeStructMojomSpec.$,
    'TestNativeStructMojom',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const TestNativeStructMojom = class {
  constructor() {
  }
};



mojo.internal.Struct(
    TestNativeStructWithAttachmentsMojomSpec.$,
    'TestNativeStructWithAttachmentsMojom',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const TestNativeStructWithAttachmentsMojom = class {
  constructor() {
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickledStruct_ParamsSpec.$,
    'PicklePasser_PassPickledStruct_Params',
    [
      mojo.internal.StructField(
        'pickle', 0,
        0,
        PickledStructSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickledStruct_Params = class {
  constructor() {
    /** @type { !PickledStruct } */
    this.pickle;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickledStruct_ResponseParamsSpec.$,
    'PicklePasser_PassPickledStruct_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        PickledStructSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickledStruct_ResponseParams = class {
  constructor() {
    /** @type { !PickledStruct } */
    this.passed;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickledEnum_ParamsSpec.$,
    'PicklePasser_PassPickledEnum_Params',
    [
      mojo.internal.StructField(
        'pickle', 0,
        0,
        PickledEnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickledEnum_Params = class {
  constructor() {
    /** @type { !PickledEnum } */
    this.pickle;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickledEnum_ResponseParamsSpec.$,
    'PicklePasser_PassPickledEnum_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        PickledEnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickledEnum_ResponseParams = class {
  constructor() {
    /** @type { !PickledEnum } */
    this.passed;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickleContainer_ParamsSpec.$,
    'PicklePasser_PassPickleContainer_Params',
    [
      mojo.internal.StructField(
        'container', 0,
        0,
        PickleContainerSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickleContainer_Params = class {
  constructor() {
    /** @type { !PickleContainer } */
    this.container;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickleContainer_ResponseParamsSpec.$,
    'PicklePasser_PassPickleContainer_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        PickleContainerSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickleContainer_ResponseParams = class {
  constructor() {
    /** @type { !PickleContainer } */
    this.passed;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickles_ParamsSpec.$,
    'PicklePasser_PassPickles_Params',
    [
      mojo.internal.StructField(
        'pickles', 0,
        0,
        mojo.internal.Array(PickledStructSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickles_Params = class {
  constructor() {
    /** @type { !Array<!PickledStruct> } */
    this.pickles;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickles_ResponseParamsSpec.$,
    'PicklePasser_PassPickles_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        mojo.internal.Array(PickledStructSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickles_ResponseParams = class {
  constructor() {
    /** @type { !Array<!PickledStruct> } */
    this.passed;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickleArrays_ParamsSpec.$,
    'PicklePasser_PassPickleArrays_Params',
    [
      mojo.internal.StructField(
        'pickleArrays', 0,
        0,
        mojo.internal.Array(mojo.internal.Array(PickledStructSpec.$, false), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickleArrays_Params = class {
  constructor() {
    /** @type { !Array<!Array<!PickledStruct>> } */
    this.pickleArrays;
  }
};



mojo.internal.Struct(
    PicklePasser_PassPickleArrays_ResponseParamsSpec.$,
    'PicklePasser_PassPickleArrays_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        mojo.internal.Array(mojo.internal.Array(PickledStructSpec.$, false), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const PicklePasser_PassPickleArrays_ResponseParams = class {
  constructor() {
    /** @type { !Array<!Array<!PickledStruct>> } */
    this.passed;
  }
};



mojo.internal.Struct(
    RectService_AddRect_ParamsSpec.$,
    'RectService_AddRect_Params',
    [
      mojo.internal.StructField(
        'r', 0,
        0,
        mojo_test_TypemappedRectSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const RectService_AddRect_Params = class {
  constructor() {
    /** @type { !mojo_test_TypemappedRect } */
    this.r;
  }
};



mojo.internal.Struct(
    RectService_GetLargestRect_ParamsSpec.$,
    'RectService_GetLargestRect_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const RectService_GetLargestRect_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    RectService_GetLargestRect_ResponseParamsSpec.$,
    'RectService_GetLargestRect_ResponseParams',
    [
      mojo.internal.StructField(
        'largest', 0,
        0,
        mojo_test_TypemappedRectSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const RectService_GetLargestRect_ResponseParams = class {
  constructor() {
    /** @type { !mojo_test_TypemappedRect } */
    this.largest;
  }
};



mojo.internal.Struct(
    RectService_PassSharedRect_ParamsSpec.$,
    'RectService_PassSharedRect_Params',
    [
      mojo.internal.StructField(
        'r', 0,
        0,
        mojo_test_SharedTypemappedRectSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const RectService_PassSharedRect_Params = class {
  constructor() {
    /** @type { !mojo_test_SharedTypemappedRect } */
    this.r;
  }
};



mojo.internal.Struct(
    RectService_PassSharedRect_ResponseParamsSpec.$,
    'RectService_PassSharedRect_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        mojo_test_SharedTypemappedRectSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const RectService_PassSharedRect_ResponseParams = class {
  constructor() {
    /** @type { !mojo_test_SharedTypemappedRect } */
    this.passed;
  }
};



mojo.internal.Struct(
    NativeTypeTester_PassNativeStruct_ParamsSpec.$,
    'NativeTypeTester_PassNativeStruct_Params',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        TestNativeStructMojomSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const NativeTypeTester_PassNativeStruct_Params = class {
  constructor() {
    /** @type { !TestNativeStructMojom } */
    this.s;
  }
};



mojo.internal.Struct(
    NativeTypeTester_PassNativeStruct_ResponseParamsSpec.$,
    'NativeTypeTester_PassNativeStruct_ResponseParams',
    [
      mojo.internal.StructField(
        'passed', 0,
        0,
        TestNativeStructMojomSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const NativeTypeTester_PassNativeStruct_ResponseParams = class {
  constructor() {
    /** @type { !TestNativeStructMojom } */
    this.passed;
  }
};



mojo.internal.Struct(
    NativeTypeTester_PassNativeStructWithAttachments_ParamsSpec.$,
    'NativeTypeTester_PassNativeStructWithAttachments_Params',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        TestNativeStructWithAttachmentsMojomSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const NativeTypeTester_PassNativeStructWithAttachments_Params = class {
  constructor() {
    /** @type { !TestNativeStructWithAttachmentsMojom } */
    this.s;
  }
};



mojo.internal.Struct(
    NativeTypeTester_PassNativeStructWithAttachments_ResponseParamsSpec.$,
    'NativeTypeTester_PassNativeStructWithAttachments_ResponseParams',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        TestNativeStructWithAttachmentsMojomSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const NativeTypeTester_PassNativeStructWithAttachments_ResponseParams = class {
  constructor() {
    /** @type { !TestNativeStructWithAttachmentsMojom } */
    this.s;
  }
};

