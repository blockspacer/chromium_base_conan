// mojo/public/interfaces/bindings/tests/sample_import.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_SHARED_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace imported {
class PointDataView;

class PointOrShapeDataView;


}  // namespace imported

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::imported::PointDataView> {
  using Data = ::imported::internal::Point_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::imported::PointOrShapeDataView> {
  using Data = ::imported::internal::PointOrShape_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace imported {


// @generated_from: imported.Shape
enum class Shape : int32_t {
  
// @generated_from: imported.Shape.RECTANGLE
  RECTANGLE = 1,
  
// @generated_from: imported.Shape.CIRCLE
  CIRCLE = 2,
  
// @generated_from: imported.Shape.TRIANGLE
  TRIANGLE = 3,
  
// @generated_from: imported.Shape.LAST
  LAST = 3,
  kMinValue = 1,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, Shape value);
inline bool IsKnownEnumValue(Shape value) {
  return internal::Shape_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: imported.AnotherShape
enum class AnotherShape : int32_t {
  
// @generated_from: imported.AnotherShape.RECTANGLE
  RECTANGLE = 10,
  
// @generated_from: imported.AnotherShape.CIRCLE
  CIRCLE = 11,
  
// @generated_from: imported.AnotherShape.TRIANGLE
  TRIANGLE = 12,
  kMinValue = 10,
  kMaxValue = 12,
};

 std::ostream& operator<<(std::ostream& os, AnotherShape value);
inline bool IsKnownEnumValue(AnotherShape value) {
  return internal::AnotherShape_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: imported.YetAnotherShape
enum class YetAnotherShape : int32_t {
  
// @generated_from: imported.YetAnotherShape.RECTANGLE
  RECTANGLE = 20,
  
// @generated_from: imported.YetAnotherShape.CIRCLE
  CIRCLE = 21,
  
// @generated_from: imported.YetAnotherShape.TRIANGLE
  TRIANGLE = 22,
  kMinValue = 20,
  kMaxValue = 22,
};

 std::ostream& operator<<(std::ostream& os, YetAnotherShape value);
inline bool IsKnownEnumValue(YetAnotherShape value) {
  return internal::YetAnotherShape_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ImportedInterfaceInterfaceBase {};

using ImportedInterfacePtrDataView =
    mojo::InterfacePtrDataView<ImportedInterfaceInterfaceBase>;
using ImportedInterfaceRequestDataView =
    mojo::InterfaceRequestDataView<ImportedInterfaceInterfaceBase>;
using ImportedInterfaceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ImportedInterfaceInterfaceBase>;
using ImportedInterfaceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ImportedInterfaceInterfaceBase>;


class PointDataView {
 public:
  PointDataView() {}

  PointDataView(
      internal::Point_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t x() const {
    return data_->x;
  }
  int32_t y() const {
    return data_->y;
  }
 private:
  internal::Point_Data* data_ = nullptr;
};



class PointOrShapeDataView {
 public:
  using Tag = internal::PointOrShape_Data::PointOrShape_Tag;

  PointOrShapeDataView() {}

  PointOrShapeDataView(
      internal::PointOrShape_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_point() const { return data_->tag == Tag::POINT; }
  inline void GetPointDataView(
      PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPoint(UserType* output) {
    
    DCHECK(is_point());
    return mojo::internal::Deserialize<::imported::PointDataView>(
        data_->data.f_point.Get(), output, message_);
  }
  bool is_shape() const { return data_->tag == Tag::SHAPE; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShape(UserType* output) const {
    DCHECK(is_shape());
    return mojo::internal::Deserialize<::imported::Shape>(
        data_->data.f_shape, output);
  }
  Shape shape() const {
    DCHECK(is_shape());
    // TODO(dcheng): This seems incorrect, as it bypasses enum traits.
    return ::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::imported::Shape>(data_->data.f_shape));
  }

 private:
  internal::PointOrShape_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace imported

namespace std {

template <>
struct hash<::imported::Shape>
    : public mojo::internal::EnumHashImpl<::imported::Shape> {};

template <>
struct hash<::imported::AnotherShape>
    : public mojo::internal::EnumHashImpl<::imported::AnotherShape> {};

template <>
struct hash<::imported::YetAnotherShape>
    : public mojo::internal::EnumHashImpl<::imported::YetAnotherShape> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::imported::Shape, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::imported::Shape, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::imported::Shape>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::imported::AnotherShape, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::imported::AnotherShape, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::imported::AnotherShape>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::imported::YetAnotherShape, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::imported::YetAnotherShape, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::imported::YetAnotherShape>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::imported::PointDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::imported::PointDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::imported::internal::Point_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->x = Traits::x(input);
    fragment->y = Traits::y(input);
  }

  static bool Deserialize(::imported::internal::Point_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::imported::PointDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::imported::PointOrShapeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::imported::PointOrShapeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::imported::internal::PointOrShape_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::imported::PointOrShapeDataView::Tag::POINT: {
        decltype(Traits::point(input))
            in_point = Traits::point(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_point)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::imported::PointDataView>(
            in_point, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null point in PointOrShape union");
        fragment->data.f_point.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::imported::PointOrShapeDataView::Tag::SHAPE: {
        decltype(Traits::shape(input))
            in_shape = Traits::shape(input);
        mojo::internal::Serialize<::imported::Shape>(
            in_shape, &fragment->data.f_shape);
        break;
      }
    }
  }

  static bool Deserialize(::imported::internal::PointOrShape_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::imported::PointOrShapeDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace imported {



inline void PointOrShapeDataView::GetPointDataView(
    PointDataView* output) {
  DCHECK(is_point());
  *output = PointDataView(data_->data.f_point.Get(), message_);
}


}  // namespace imported

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::imported::Shape> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::imported::Shape value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::imported::AnotherShape> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::imported::AnotherShape value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::imported::YetAnotherShape> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::imported::YetAnotherShape value);
};

} // namespace perfetto

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjA3MiwgImJlZ2luIjogMjA2NywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogImltcG9ydGVkLlNoYXBlIn19LCB7ImVuZCI6IDIxNDQs
ICJiZWdpbiI6IDIxMzUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJpbXBvcnRlZC5TaGFwZS5SRUNUQU5HTEUifX0sIHsiZW5kIjogMjIwMywgImJlZ2luIjogMjE5
NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogImltcG9ydGVkLlNo
YXBlLkNJUkNMRSJ9fSwgeyJlbmQiOiAyMjY2LCAiYmVnaW4iOiAyMjU4LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiaW1wb3J0ZWQuU2hhcGUuVFJJQU5HTEUifX0s
IHsiZW5kIjogMjMyMSwgImJlZ2luIjogMjMxNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogImltcG9ydGVkLlNoYXBlLkxBU1QifX0sIHsiZW5kIjogMjYxNywgImJl
Z2luIjogMjYwNSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogImlt
cG9ydGVkLkFub3RoZXJTaGFwZSJ9fSwgeyJlbmQiOiAyNjk2LCAiYmVnaW4iOiAyNjg3LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiaW1wb3J0ZWQuQW5vdGhlclNo
YXBlLlJFQ1RBTkdMRSJ9fSwgeyJlbmQiOiAyNzYzLCAiYmVnaW4iOiAyNzU3LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiaW1wb3J0ZWQuQW5vdGhlclNoYXBlLkNJ
UkNMRSJ9fSwgeyJlbmQiOiAyODM0LCAiYmVnaW4iOiAyODI2LCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiaW1wb3J0ZWQuQW5vdGhlclNoYXBlLlRSSUFOR0xFIn19
LCB7ImVuZCI6IDMxNjAsICJiZWdpbiI6IDMxNDUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJpbXBvcnRlZC5ZZXRBbm90aGVyU2hhcGUifX0sIHsiZW5kIjogMzI0
MiwgImJlZ2luIjogMzIzMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogImltcG9ydGVkLllldEFub3RoZXJTaGFwZS5SRUNUQU5HTEUifX0sIHsiZW5kIjogMzMxMiwg
ImJlZ2luIjogMzMwNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
ImltcG9ydGVkLllldEFub3RoZXJTaGFwZS5DSVJDTEUifX0sIHsiZW5kIjogMzM4NiwgImJlZ2lu
IjogMzM3OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogImltcG9y
dGVkLllldEFub3RoZXJTaGFwZS5UUklBTkdMRSJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/