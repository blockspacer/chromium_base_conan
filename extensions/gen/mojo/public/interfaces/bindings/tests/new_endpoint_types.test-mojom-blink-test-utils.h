// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_TEST_UTILS_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_TEST_UTILS_H_

#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-blink.h"


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {
namespace blink {


class  WidgetObserverInterceptorForTesting : public WidgetObserver {
  virtual WidgetObserver* GetForwardingInterface() = 0;
  void OnClick() override;
};
class  WidgetObserverAsyncWaiter {
 public:
  explicit WidgetObserverAsyncWaiter(WidgetObserver* proxy);
  ~WidgetObserverAsyncWaiter();

 private:
  WidgetObserver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WidgetObserverAsyncWaiter);
};


class  WidgetInterceptorForTesting : public Widget {
  virtual Widget* GetForwardingInterface() = 0;
  void Click() override;
  void AddObserver(::mojo::PendingRemote<WidgetObserver> observer) override;
};
class  WidgetAsyncWaiter {
 public:
  explicit WidgetAsyncWaiter(Widget* proxy);
  ~WidgetAsyncWaiter();

 private:
  Widget* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WidgetAsyncWaiter);
};


class  WidgetClientInterceptorForTesting : public WidgetClient {
  virtual WidgetClient* GetForwardingInterface() = 0;
  void OnInitialized() override;
};
class  WidgetClientAsyncWaiter {
 public:
  explicit WidgetClientAsyncWaiter(WidgetClient* proxy);
  ~WidgetClientAsyncWaiter();

 private:
  WidgetClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WidgetClientAsyncWaiter);
};


class  WidgetFactoryInterceptorForTesting : public WidgetFactory {
  virtual WidgetFactory* GetForwardingInterface() = 0;
  void CreateWidget(::mojo::PendingReceiver<Widget> receiver, ::mojo::PendingRemote<WidgetClient> client) override;
};
class  WidgetFactoryAsyncWaiter {
 public:
  explicit WidgetFactoryAsyncWaiter(WidgetFactory* proxy);
  ~WidgetFactoryAsyncWaiter();

 private:
  WidgetFactory* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WidgetFactoryAsyncWaiter);
};


class  PingerInterceptorForTesting : public Pinger {
  virtual Pinger* GetForwardingInterface() = 0;
  void Ping(PingCallback callback) override;
};
class  PingerAsyncWaiter {
 public:
  explicit PingerAsyncWaiter(Pinger* proxy);
  ~PingerAsyncWaiter();
  void Ping(
      );

 private:
  Pinger* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PingerAsyncWaiter);
};


class  AssociatedPingerHostInterceptorForTesting : public AssociatedPingerHost {
  virtual AssociatedPingerHost* GetForwardingInterface() = 0;
  void AddEndpoints(::mojo::PendingAssociatedReceiver<Pinger> receiver, ::mojo::PendingAssociatedRemote<Pinger> remote) override;
};
class  AssociatedPingerHostAsyncWaiter {
 public:
  explicit AssociatedPingerHostAsyncWaiter(AssociatedPingerHost* proxy);
  ~AssociatedPingerHostAsyncWaiter();

 private:
  AssociatedPingerHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AssociatedPingerHostAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_TEST_UTILS_H_