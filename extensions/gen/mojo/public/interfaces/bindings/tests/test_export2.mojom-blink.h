// mojo/public/interfaces/bindings/tests/test_export2.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_EXPORT2_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_EXPORT2_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_export2.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_export2.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"





#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace test_export2 {
namespace blink {





// @generated_from: mojo.test.test_export2.StringPair
class  StringPair {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StringPair, T>::value>;
  using DataView = StringPairDataView;
  using Data_ = internal::StringPair_Data;

  template <typename... Args>
  static StringPairPtr New(Args&&... args) {
    return StringPairPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StringPairPtr From(const U& u) {
    return mojo::TypeConverter<StringPairPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StringPair>::Convert(*this);
  }


  StringPair();

  StringPair(
      const WTF::String& s1,
      const WTF::String& s2);

  ~StringPair();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StringPairPtr>
  StringPairPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StringPair::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StringPair::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StringPair::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StringPair::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StringPair_UnserializedMessageContext<
            UserType, StringPair::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StringPair::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StringPair::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StringPair_UnserializedMessageContext<
            UserType, StringPair::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StringPair::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.test_export2.StringPair.s1
  WTF::String s1;
  
// @generated_from: mojo.test.test_export2.StringPair.s2
  WTF::String s2;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StringPair::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StringPair::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StringPair::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StringPair::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}




template <typename StructPtrType>
StringPairPtr StringPair::Clone() const {
  return New(
      mojo::Clone(s1),
      mojo::Clone(s2)
  );
}

template <typename T, StringPair::EnableIfSame<T>*>
bool StringPair::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->s1, other_struct.s1))
    return false;
  if (!mojo::Equals(this->s2, other_struct.s2))
    return false;
  return true;
}

template <typename T, StringPair::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.s1 < rhs.s1)
    return true;
  if (rhs.s1 < lhs.s1)
    return false;
  if (lhs.s2 < rhs.s2)
    return true;
  if (rhs.s2 < lhs.s2)
    return false;
  return false;
}


}  // namespace blink
}  // namespace test_export2
}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::test_export2::blink::StringPair::DataView,
                                         ::mojo::test::test_export2::blink::StringPairPtr> {
  static bool IsNull(const ::mojo::test::test_export2::blink::StringPairPtr& input) { return !input; }
  static void SetToNull(::mojo::test::test_export2::blink::StringPairPtr* output) { output->reset(); }

  static const decltype(::mojo::test::test_export2::blink::StringPair::s1)& s1(
      const ::mojo::test::test_export2::blink::StringPairPtr& input) {
    return input->s1;
  }

  static const decltype(::mojo::test::test_export2::blink::StringPair::s2)& s2(
      const ::mojo::test::test_export2::blink::StringPairPtr& input) {
    return input->s2;
  }

  static bool Read(::mojo::test::test_export2::blink::StringPair::DataView input, ::mojo::test::test_export2::blink::StringPairPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_EXPORT2_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTY1OCwgImJlZ2luIjogMTY0OCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC50ZXN0X2V4cG9ydDIuU3RyaW5nUGFp
ciJ9fSwgeyJlbmQiOiA1MjY5LCAiYmVnaW4iOiA1MjY3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnRlc3RfZXhwb3J0Mi5TdHJpbmdQYWlyLnMx
In19LCB7ImVuZCI6IDUzNDcsICJiZWdpbiI6IDUzNDUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QudGVzdF9leHBvcnQyLlN0cmluZ1BhaXIuczIi
fX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/