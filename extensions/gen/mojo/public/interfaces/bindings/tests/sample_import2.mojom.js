// mojo/public/interfaces/bindings/tests/sample_import2.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/sample_import2.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('imported');
  var sample_import$ =
      mojo.internal.exposeNamespace('imported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/interfaces/bindings/tests/sample_import.mojom', 'sample_import.mojom.js');
  }


  var Color = {};
  Color.RED = 0;
  Color.BLACK = 1;
  Color.MIN_VALUE = 0;
  Color.MAX_VALUE = 1;

  Color.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Color.toKnownEnumValue = function(value) {
    return value;
  };

  Color.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Size(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Size.prototype.initDefaults_ = function() {
    this.width = 0;
    this.height = 0;
  };
  Size.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Size.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Size.encodedSize = codec.kStructHeaderSize + 8;

  Size.decode = function(decoder) {
    var packed;
    var val = new Size();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.width =
        decoder.decodeStruct(codec.Int32);
    val.height =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  Size.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Size.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.width);
    encoder.encodeStruct(codec.Int32, val.height);
  };
  function Thing(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Thing.prototype.initDefaults_ = function() {
    this.shape = sample_import$.Shape.RECTANGLE;
    this.color = Color.BLACK;
    this.location = null;
    this.size = null;
  };
  Thing.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Thing.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Thing.shape
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, sample_import$.Shape);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Thing.color
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, Color);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Thing.location
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, sample_import$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Thing.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Thing.encodedSize = codec.kStructHeaderSize + 24;

  Thing.decode = function(decoder) {
    var packed;
    var val = new Thing();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.shape =
        decoder.decodeStruct(new codec.Enum(sample_import$.Shape));
    val.color =
        decoder.decodeStruct(new codec.Enum(Color));
    val.location =
        decoder.decodeStructPointer(sample_import$.Point);
    val.size =
        decoder.decodeStructPointer(Size);
    return val;
  };

  Thing.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Thing.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.shape);
    encoder.encodeStruct(codec.Int32, val.color);
    encoder.encodeStructPointer(sample_import$.Point, val.location);
    encoder.encodeStructPointer(Size, val.size);
  };
  exports.Color = Color;
  exports.Size = Size;
  exports.Thing = Thing;
})();