// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_JUMBO_H_
#endif


namespace mojo {
namespace test {


void TraitsTestServiceInterceptorForTesting::EchoStructWithTraits(const ::mojo::test::StructWithTraitsImpl& s, EchoStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoTrivialStructWithTraits(::mojo::test::TrivialStructWithTraitsImpl s, EchoTrivialStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoTrivialStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoMoveOnlyStructWithTraits(::mojo::test::MoveOnlyStructWithTraitsImpl s, EchoMoveOnlyStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoMoveOnlyStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoNullableMoveOnlyStructWithTraits(base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, EchoNullableMoveOnlyStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoNullableMoveOnlyStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoEnumWithTraits(::mojo::test::EnumWithTraitsImpl e, EchoEnumWithTraitsCallback callback) {
  GetForwardingInterface()->EchoEnumWithTraits(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoStructWithTraitsForUniquePtrCallback callback) {
  GetForwardingInterface()->EchoStructWithTraitsForUniquePtr(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoNullableStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoNullableStructWithTraitsForUniquePtrCallback callback) {
  GetForwardingInterface()->EchoNullableStructWithTraitsForUniquePtr(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoUnionWithTraits(::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, EchoUnionWithTraitsCallback callback) {
  GetForwardingInterface()->EchoUnionWithTraits(std::move(u), std::move(callback));
}
TraitsTestServiceAsyncWaiter::TraitsTestServiceAsyncWaiter(
    TraitsTestService* proxy) : proxy_(proxy) {}

TraitsTestServiceAsyncWaiter::~TraitsTestServiceAsyncWaiter() = default;

void TraitsTestServiceAsyncWaiter::EchoStructWithTraits(
    const ::mojo::test::StructWithTraitsImpl& s, ::mojo::test::StructWithTraitsImpl* out_passed) {
  base::RunLoop loop;
  proxy_->EchoStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::StructWithTraitsImpl* out_passed
,
             const ::mojo::test::StructWithTraitsImpl& passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoTrivialStructWithTraits(
    ::mojo::test::TrivialStructWithTraitsImpl s, ::mojo::test::TrivialStructWithTraitsImpl* out_passed) {
  base::RunLoop loop;
  proxy_->EchoTrivialStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::TrivialStructWithTraitsImpl* out_passed
,
             ::mojo::test::TrivialStructWithTraitsImpl passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoMoveOnlyStructWithTraits(
    ::mojo::test::MoveOnlyStructWithTraitsImpl s, ::mojo::test::MoveOnlyStructWithTraitsImpl* out_passed) {
  base::RunLoop loop;
  proxy_->EchoMoveOnlyStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::MoveOnlyStructWithTraitsImpl* out_passed
,
             ::mojo::test::MoveOnlyStructWithTraitsImpl passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoNullableMoveOnlyStructWithTraits(
    base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl>* out_passed) {
  base::RunLoop loop;
  proxy_->EchoNullableMoveOnlyStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl>* out_passed
,
             base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoEnumWithTraits(
    ::mojo::test::EnumWithTraitsImpl e, ::mojo::test::EnumWithTraitsImpl* out_passed) {
  base::RunLoop loop;
  proxy_->EchoEnumWithTraits(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::EnumWithTraitsImpl* out_passed
,
             ::mojo::test::EnumWithTraitsImpl passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoStructWithTraitsForUniquePtr(
    ::std::unique_ptr<int> e, ::std::unique_ptr<int>* out_passed) {
  base::RunLoop loop;
  proxy_->EchoStructWithTraitsForUniquePtr(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::std::unique_ptr<int>* out_passed
,
             ::std::unique_ptr<int> passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoNullableStructWithTraitsForUniquePtr(
    ::std::unique_ptr<int> e, ::std::unique_ptr<int>* out_passed) {
  base::RunLoop loop;
  proxy_->EchoNullableStructWithTraitsForUniquePtr(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::std::unique_ptr<int>* out_passed
,
             ::std::unique_ptr<int> passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoUnionWithTraits(
    ::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, ::std::unique_ptr<::mojo::test::UnionWithTraitsBase>* out_passed) {
  base::RunLoop loop;
  proxy_->EchoUnionWithTraits(std::move(u),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::std::unique_ptr<::mojo::test::UnionWithTraitsBase>* out_passed
,
             ::std::unique_ptr<::mojo::test::UnionWithTraitsBase> passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}



void TestUnserializedStructInterceptorForTesting::PassUnserializedStruct(const ::mojo::test::StructWithUnreachableTraitsImpl& s, PassUnserializedStructCallback callback) {
  GetForwardingInterface()->PassUnserializedStruct(std::move(s), std::move(callback));
}
TestUnserializedStructAsyncWaiter::TestUnserializedStructAsyncWaiter(
    TestUnserializedStruct* proxy) : proxy_(proxy) {}

TestUnserializedStructAsyncWaiter::~TestUnserializedStructAsyncWaiter() = default;

void TestUnserializedStructAsyncWaiter::PassUnserializedStruct(
    const ::mojo::test::StructWithUnreachableTraitsImpl& s, ::mojo::test::StructWithUnreachableTraitsImpl* out_passed) {
  base::RunLoop loop;
  proxy_->PassUnserializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::StructWithUnreachableTraitsImpl* out_passed
,
             const ::mojo::test::StructWithUnreachableTraitsImpl& passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}



void ForceSerializeTesterInterceptorForTesting::SendForceSerializedStruct(const ::mojo::test::StructForceSerializeImpl& s, SendForceSerializedStructCallback callback) {
  GetForwardingInterface()->SendForceSerializedStruct(std::move(s), std::move(callback));
}
void ForceSerializeTesterInterceptorForTesting::SendNestedForceSerializedStruct(const ::mojo::test::StructNestedForceSerializeImpl& s, SendNestedForceSerializedStructCallback callback) {
  GetForwardingInterface()->SendNestedForceSerializedStruct(std::move(s), std::move(callback));
}
ForceSerializeTesterAsyncWaiter::ForceSerializeTesterAsyncWaiter(
    ForceSerializeTester* proxy) : proxy_(proxy) {}

ForceSerializeTesterAsyncWaiter::~ForceSerializeTesterAsyncWaiter() = default;

void ForceSerializeTesterAsyncWaiter::SendForceSerializedStruct(
    const ::mojo::test::StructForceSerializeImpl& s, ::mojo::test::StructForceSerializeImpl* out_passed) {
  base::RunLoop loop;
  proxy_->SendForceSerializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::StructForceSerializeImpl* out_passed
,
             const ::mojo::test::StructForceSerializeImpl& passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void ForceSerializeTesterAsyncWaiter::SendNestedForceSerializedStruct(
    const ::mojo::test::StructNestedForceSerializeImpl& s, ::mojo::test::StructNestedForceSerializeImpl* out_passed) {
  base::RunLoop loop;
  proxy_->SendNestedForceSerializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::test::StructNestedForceSerializeImpl* out_passed
,
             const ::mojo::test::StructNestedForceSerializeImpl& passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}





}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif