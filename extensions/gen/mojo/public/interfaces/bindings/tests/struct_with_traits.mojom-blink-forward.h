// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_FORWARD_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

enum class EnumWithTraits : int32_t;
class TraitsTestServiceInterfaceBase;
class TestUnserializedStructInterfaceBase;
class ForceSerializeTesterInterfaceBase;
}  // namespace mojo
}  // namespace test


namespace mojo {
namespace test {
namespace blink {
// Aliases for definition in the parent namespace.
using EnumWithTraits = EnumWithTraits;
using TraitsTestServiceInterfaceBase = TraitsTestServiceInterfaceBase;
using TestUnserializedStructInterfaceBase = TestUnserializedStructInterfaceBase;
using ForceSerializeTesterInterfaceBase = ForceSerializeTesterInterfaceBase;
class NestedStructWithTraits;
using NestedStructWithTraitsPtr = mojo::InlinedStructPtr<NestedStructWithTraits>;

class StructWithTraits;
using StructWithTraitsPtr = mojo::StructPtr<StructWithTraits>;

class StructWithUnreachableTraits;
using StructWithUnreachableTraitsPtr = mojo::InlinedStructPtr<StructWithUnreachableTraits>;

class StructWithTraitsContainer;
using StructWithTraitsContainerPtr = mojo::StructPtr<StructWithTraitsContainer>;

class TrivialStructWithTraits;
using TrivialStructWithTraitsPtr = mojo::InlinedStructPtr<TrivialStructWithTraits>;

class MoveOnlyStructWithTraits;
using MoveOnlyStructWithTraitsPtr = mojo::StructPtr<MoveOnlyStructWithTraits>;

class MoveOnlyStructWithTraitsContainer;
using MoveOnlyStructWithTraitsContainerPtr = mojo::StructPtr<MoveOnlyStructWithTraitsContainer>;

class StructWithTraitsForUniquePtr;
using StructWithTraitsForUniquePtrPtr = mojo::InlinedStructPtr<StructWithTraitsForUniquePtr>;

class EnumWithTraitsContainer;
using EnumWithTraitsContainerPtr = mojo::InlinedStructPtr<EnumWithTraitsContainer>;

class StructForceSerialize;
using StructForceSerializePtr = mojo::InlinedStructPtr<StructForceSerialize>;

class StructNestedForceSerialize;
using StructNestedForceSerializePtr = mojo::StructPtr<StructNestedForceSerialize>;

class UnionWithTraits;

typedef mojo::StructPtr<UnionWithTraits> UnionWithTraitsPtr;

class TraitsTestService;

// @generated_from: mojo.test.TraitsTestService
using TraitsTestServicePtr = mojo::InterfacePtr<TraitsTestService>;
using TraitsTestServicePtrInfo = mojo::InterfacePtrInfo<TraitsTestService>;

// @generated_from: mojo.test.TraitsTestService
using TraitsTestServiceRequest = mojo::InterfaceRequest<TraitsTestService>;
using TraitsTestServiceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<TraitsTestService>;

// @generated_from: mojo.test.TraitsTestService
using TraitsTestServiceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<TraitsTestService>;

class TestUnserializedStruct;

// @generated_from: mojo.test.TestUnserializedStruct
using TestUnserializedStructPtr = mojo::InterfacePtr<TestUnserializedStruct>;
using TestUnserializedStructPtrInfo = mojo::InterfacePtrInfo<TestUnserializedStruct>;

// @generated_from: mojo.test.TestUnserializedStruct
using TestUnserializedStructRequest = mojo::InterfaceRequest<TestUnserializedStruct>;
using TestUnserializedStructAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<TestUnserializedStruct>;

// @generated_from: mojo.test.TestUnserializedStruct
using TestUnserializedStructAssociatedRequest =
    mojo::AssociatedInterfaceRequest<TestUnserializedStruct>;

class ForceSerializeTester;

// @generated_from: mojo.test.ForceSerializeTester
using ForceSerializeTesterPtr = mojo::InterfacePtr<ForceSerializeTester>;
using ForceSerializeTesterPtrInfo = mojo::InterfacePtrInfo<ForceSerializeTester>;

// @generated_from: mojo.test.ForceSerializeTester
using ForceSerializeTesterRequest = mojo::InterfaceRequest<ForceSerializeTester>;
using ForceSerializeTesterAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ForceSerializeTester>;

// @generated_from: mojo.test.ForceSerializeTester
using ForceSerializeTesterAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ForceSerializeTester>;




}  // namespace blink
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_FORWARD_H_