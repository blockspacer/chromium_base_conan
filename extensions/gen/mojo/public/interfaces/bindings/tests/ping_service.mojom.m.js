// mojo/public/interfaces/bindings/tests/ping_service.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const PingServicePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.PingService', scope);
  }
};

/** @interface */
export const PingServiceInterface = class {
  
  /**
   * @return {!Promise}
   */

  ping() {}
};

/**
 * @implements { PingServiceInterface }
 */
export const PingServiceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PingServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PingServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PingServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        0,
        PingService_Ping_ParamsSpec.$,
        PingService_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PingService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const PingServiceReceiver = class {
  /**
   * @param {!PingServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PingServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PingServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PingService_Ping_ParamsSpec.$,
        PingService_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const PingService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.PingService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PingServiceRemote}
   */
  static getRemote() {
    let remote = new PingServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PingService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const PingServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PingServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PingService_Ping_ParamsSpec.$,
        PingService_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const EchoServicePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.EchoService', scope);
  }
};

/** @interface */
export const EchoServiceInterface = class {
  
  /**
   * @param { !string } testData
   * @return {!Promise<{
        echoData: !string,
   *  }>}
   */

  echo(testData) {}
};

/**
 * @implements { EchoServiceInterface }
 */
export const EchoServiceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!EchoServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          EchoServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!EchoServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } testData
   * @return {!Promise<{
        echoData: !string,
   *  }>}
   */

  echo(
      testData) {
    return this.proxy.sendMessage(
        0,
        EchoService_Echo_ParamsSpec.$,
        EchoService_Echo_ResponseParamsSpec.$,
        [
          testData
        ]);
  }
};

/**
 * An object which receives request messages for the EchoService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const EchoServiceReceiver = class {
  /**
   * @param {!EchoServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!EchoServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        EchoServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EchoServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        EchoService_Echo_ParamsSpec.$,
        EchoService_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const EchoService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.EchoService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!EchoServiceRemote}
   */
  static getRemote() {
    let remote = new EchoServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the EchoService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const EchoServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      EchoServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EchoServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        EchoService_Echo_ParamsSpec.$,
        EchoService_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const HandleTrampolinePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.HandleTrampoline', scope);
  }
};

/** @interface */
export const HandleTrampolineInterface = class {
  
  /**
   * @param { !MojoHandle } one
   * @return {!Promise<{
        one: !MojoHandle,
   *  }>}
   */

  bounceOne(one) {}
  
  /**
   * @param { !MojoHandle } one
   * @param { !MojoHandle } two
   * @return {!Promise<{
        one: !MojoHandle,
        two: !MojoHandle,
   *  }>}
   */

  bounceTwo(one, two) {}
};

/**
 * @implements { HandleTrampolineInterface }
 */
export const HandleTrampolineRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!HandleTrampolinePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          HandleTrampolinePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!HandleTrampolinePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !MojoHandle } one
   * @return {!Promise<{
        one: !MojoHandle,
   *  }>}
   */

  bounceOne(
      one) {
    return this.proxy.sendMessage(
        0,
        HandleTrampoline_BounceOne_ParamsSpec.$,
        HandleTrampoline_BounceOne_ResponseParamsSpec.$,
        [
          one
        ]);
  }

  
  /**
   * @param { !MojoHandle } one
   * @param { !MojoHandle } two
   * @return {!Promise<{
        one: !MojoHandle,
        two: !MojoHandle,
   *  }>}
   */

  bounceTwo(
      one,
      two) {
    return this.proxy.sendMessage(
        1,
        HandleTrampoline_BounceTwo_ParamsSpec.$,
        HandleTrampoline_BounceTwo_ResponseParamsSpec.$,
        [
          one,
          two
        ]);
  }
};

/**
 * An object which receives request messages for the HandleTrampoline
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const HandleTrampolineReceiver = class {
  /**
   * @param {!HandleTrampolineInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!HandleTrampolineRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        HandleTrampolineRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!HandleTrampolineRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        HandleTrampoline_BounceOne_ParamsSpec.$,
        HandleTrampoline_BounceOne_ResponseParamsSpec.$,
        impl.bounceOne.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        HandleTrampoline_BounceTwo_ParamsSpec.$,
        HandleTrampoline_BounceTwo_ResponseParamsSpec.$,
        impl.bounceTwo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const HandleTrampoline = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.HandleTrampoline";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!HandleTrampolineRemote}
   */
  static getRemote() {
    let remote = new HandleTrampolineRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the HandleTrampoline
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const HandleTrampolineCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      HandleTrampolineRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!HandleTrampolineRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bounceOne =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        HandleTrampoline_BounceOne_ParamsSpec.$,
        HandleTrampoline_BounceOne_ResponseParamsSpec.$,
        this.bounceOne.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bounceTwo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        HandleTrampoline_BounceTwo_ParamsSpec.$,
        HandleTrampoline_BounceTwo_ResponseParamsSpec.$,
        this.bounceTwo.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingService_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingService_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const EchoService_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const EchoService_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const HandleTrampoline_BounceOne_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const HandleTrampoline_BounceOne_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const HandleTrampoline_BounceTwo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const HandleTrampoline_BounceTwo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    PingService_Ping_ParamsSpec.$,
    'PingService_Ping_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingService_Ping_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    PingService_Ping_ResponseParamsSpec.$,
    'PingService_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingService_Ping_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    EchoService_Echo_ParamsSpec.$,
    'EchoService_Echo_Params',
    [
      mojo.internal.StructField(
        'testData', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const EchoService_Echo_Params = class {
  constructor() {
    /** @type { !string } */
    this.testData;
  }
};



mojo.internal.Struct(
    EchoService_Echo_ResponseParamsSpec.$,
    'EchoService_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'echoData', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const EchoService_Echo_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.echoData;
  }
};



mojo.internal.Struct(
    HandleTrampoline_BounceOne_ParamsSpec.$,
    'HandleTrampoline_BounceOne_Params',
    [
      mojo.internal.StructField(
        'one', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const HandleTrampoline_BounceOne_Params = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.one;
  }
};



mojo.internal.Struct(
    HandleTrampoline_BounceOne_ResponseParamsSpec.$,
    'HandleTrampoline_BounceOne_ResponseParams',
    [
      mojo.internal.StructField(
        'one', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const HandleTrampoline_BounceOne_ResponseParams = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.one;
  }
};



mojo.internal.Struct(
    HandleTrampoline_BounceTwo_ParamsSpec.$,
    'HandleTrampoline_BounceTwo_Params',
    [
      mojo.internal.StructField(
        'one', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'two', 4,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const HandleTrampoline_BounceTwo_Params = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.one;
    /** @type { !MojoHandle } */
    this.two;
  }
};



mojo.internal.Struct(
    HandleTrampoline_BounceTwo_ResponseParamsSpec.$,
    'HandleTrampoline_BounceTwo_ResponseParams',
    [
      mojo.internal.StructField(
        'one', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'two', 4,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const HandleTrampoline_BounceTwo_ResponseParams = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.one;
    /** @type { !MojoHandle } */
    this.two;
  }
};

