// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-params-data.h"
namespace mojo {
namespace test {

std::string EnumWithTraitsToString(EnumWithTraits value) {
  switch(value) {
    case EnumWithTraits::VALUE_0:
      return "VALUE_0";
    case EnumWithTraits::VALUE_1:
      return "VALUE_1";
    default:
      return base::StringPrintf("Unknown EnumWithTraits value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, EnumWithTraits value) {
  return os << EnumWithTraitsToString(value);
}

namespace internal {
// static
bool UnionWithTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const UnionWithTraits_Data* object = static_cast<const UnionWithTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case UnionWithTraits_Tag::F_INT32: {

      return true;
    }
    case UnionWithTraits_Tag::F_STRUCT: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_f_struct, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_f_struct, validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in UnionWithTraits");
      return false;
    }
  }
}


// static
bool NestedStructWithTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NestedStructWithTraits_Data* object = static_cast<const NestedStructWithTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

NestedStructWithTraits_Data::NestedStructWithTraits_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 88, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithTraits_Data* object = static_cast<const StructWithTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EnumWithTraits_Data
        ::Validate(object->f_enum, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_string, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_string_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->f_string, validation_context,
                                         &f_string_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_string2, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_string2_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->f_string2, validation_context,
                                         &f_string2_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_string_array, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_string_array_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->f_string_array, validation_context,
                                         &f_string_array_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_string_set, 8, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_string_set_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->f_string_set, validation_context,
                                         &f_string_set_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct, 9, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->f_struct, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct_array, 10, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_struct_array_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->f_struct_array, validation_context,
                                         &f_struct_array_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct_map, 11, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams f_struct_map_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->f_struct_map, validation_context,
                                         &f_struct_map_validate_params)) {
    return false;
  }

  return true;
}

StructWithTraits_Data::StructWithTraits_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithUnreachableTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithUnreachableTraits_Data* object = static_cast<const StructWithUnreachableTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

StructWithUnreachableTraits_Data::StructWithUnreachableTraits_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithTraitsContainer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithTraitsContainer_Data* object = static_cast<const StructWithTraitsContainer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->f_struct, validation_context))
    return false;

  return true;
}

StructWithTraitsContainer_Data::StructWithTraitsContainer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TrivialStructWithTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TrivialStructWithTraits_Data* object = static_cast<const TrivialStructWithTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TrivialStructWithTraits_Data::TrivialStructWithTraits_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MoveOnlyStructWithTraits_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const MoveOnlyStructWithTraits_Data* object = static_cast<const MoveOnlyStructWithTraits_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->f_handle, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->f_handle,
                                                 validation_context)) {
    return false;
  }

  return true;
}

MoveOnlyStructWithTraits_Data::MoveOnlyStructWithTraits_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MoveOnlyStructWithTraitsContainer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const MoveOnlyStructWithTraitsContainer_Data* object = static_cast<const MoveOnlyStructWithTraitsContainer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->f_struct, validation_context))
    return false;

  return true;
}

MoveOnlyStructWithTraitsContainer_Data::MoveOnlyStructWithTraitsContainer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithTraitsForUniquePtr_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithTraitsForUniquePtr_Data* object = static_cast<const StructWithTraitsForUniquePtr_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

StructWithTraitsForUniquePtr_Data::StructWithTraitsForUniquePtr_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool EnumWithTraitsContainer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const EnumWithTraitsContainer_Data* object = static_cast<const EnumWithTraitsContainer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EnumWithTraits_Data
        ::Validate(object->f_field, validation_context))
    return false;

  return true;
}

EnumWithTraitsContainer_Data::EnumWithTraitsContainer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructForceSerialize_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructForceSerialize_Data* object = static_cast<const StructForceSerialize_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

StructForceSerialize_Data::StructForceSerialize_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructNestedForceSerialize_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructNestedForceSerialize_Data* object = static_cast<const StructNestedForceSerialize_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->force, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->force, validation_context))
    return false;

  return true;
}

StructNestedForceSerialize_Data::StructNestedForceSerialize_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoStructWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoStructWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoStructWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoStructWithTraits_Params_Data::TraitsTestService_EchoStructWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoStructWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoStructWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoStructWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoStructWithTraits_ResponseParams_Data::TraitsTestService_EchoStructWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoTrivialStructWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoTrivialStructWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoTrivialStructWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoTrivialStructWithTraits_Params_Data::TraitsTestService_EchoTrivialStructWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data::TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data::TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data::TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoEnumWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoEnumWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoEnumWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EnumWithTraits_Data
        ::Validate(object->e, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoEnumWithTraits_Params_Data::TraitsTestService_EchoEnumWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoEnumWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoEnumWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoEnumWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EnumWithTraits_Data
        ::Validate(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoEnumWithTraits_ResponseParams_Data::TraitsTestService_EchoEnumWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data* object = static_cast<const TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->e, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->e, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data::TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data::TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data* object = static_cast<const TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateStruct(object->e, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoUnionWithTraits_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoUnionWithTraits_Params_Data* object = static_cast<const TraitsTestService_EchoUnionWithTraits_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->u, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->u, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoUnionWithTraits_Params_Data::TraitsTestService_EchoUnionWithTraits_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TraitsTestService_EchoUnionWithTraits_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraitsTestService_EchoUnionWithTraits_ResponseParams_Data* object = static_cast<const TraitsTestService_EchoUnionWithTraits_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->passed, validation_context))
    return false;

  return true;
}

TraitsTestService_EchoUnionWithTraits_ResponseParams_Data::TraitsTestService_EchoUnionWithTraits_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestUnserializedStruct_PassUnserializedStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestUnserializedStruct_PassUnserializedStruct_Params_Data* object = static_cast<const TestUnserializedStruct_PassUnserializedStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TestUnserializedStruct_PassUnserializedStruct_Params_Data::TestUnserializedStruct_PassUnserializedStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data* object = static_cast<const TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data::TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ForceSerializeTester_SendForceSerializedStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ForceSerializeTester_SendForceSerializedStruct_Params_Data* object = static_cast<const ForceSerializeTester_SendForceSerializedStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

ForceSerializeTester_SendForceSerializedStruct_Params_Data::ForceSerializeTester_SendForceSerializedStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data* object = static_cast<const ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data::ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data* object = static_cast<const ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data::ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data* object = static_cast<const ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data::ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace test
}  // namespace mojo

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::EnumWithTraits>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::EnumWithTraits value) {
  return std::move(context).WriteString(::mojo::test::EnumWithTraitsToString(value));
}

} // namespace perfetto
