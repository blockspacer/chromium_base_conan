// mojo/public/interfaces/bindings/tests/test_sync_methods.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_SYNC_METHODS_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_SYNC_METHODS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_sync_methods.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_sync_methods.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

class TestSyncCodeGenerationProxy;

template <typename ImplRefTraits>
class TestSyncCodeGenerationStub;

class TestSyncCodeGenerationRequestValidator;
class TestSyncCodeGenerationResponseValidator;


// @generated_from: mojo.test.TestSyncCodeGeneration
class  TestSyncCodeGeneration
    : public TestSyncCodeGenerationInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestSyncCodeGenerationInterfaceBase;
  using Proxy_ = TestSyncCodeGenerationProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestSyncCodeGenerationStub<ImplRefTraits>;

  using RequestValidator_ = TestSyncCodeGenerationRequestValidator;
  using ResponseValidator_ = TestSyncCodeGenerationResponseValidator;
  enum MethodMinVersions : uint32_t {
    kNoInputMinVersion = 0,
    kNoOutputMinVersion = 0,
    kNoInOutMinVersion = 0,
    kHaveInOutMinVersion = 0,
  };
  virtual ~TestSyncCodeGeneration() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInput
  virtual bool NoInput(int32_t* out_result);

  using NoInputCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInput
  virtual void NoInput(NoInputCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoOutput
  virtual bool NoOutput(int32_t value);

  using NoOutputCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoOutput
  virtual void NoOutput(int32_t value, NoOutputCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInOut
  virtual bool NoInOut();

  using NoInOutCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInOut
  virtual void NoInOut(NoInOutCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncCodeGeneration.HaveInOut
  virtual bool HaveInOut(int32_t value1, int32_t value2, int32_t* out_result1, int32_t* out_result2);

  using HaveInOutCallback = base::OnceCallback<void(int32_t, int32_t)>;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.HaveInOut
  virtual void HaveInOut(int32_t value1, int32_t value2, HaveInOutCallback callback) = 0;
};

class TestSyncProxy;

template <typename ImplRefTraits>
class TestSyncStub;

class TestSyncRequestValidator;
class TestSyncResponseValidator;


// @generated_from: mojo.test.TestSync
class  TestSync
    : public TestSyncInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestSyncInterfaceBase;
  using Proxy_ = TestSyncProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestSyncStub<ImplRefTraits>;

  using RequestValidator_ = TestSyncRequestValidator;
  using ResponseValidator_ = TestSyncResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
    kEchoMinVersion = 0,
    kAsyncEchoMinVersion = 0,
  };
  virtual ~TestSync() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSync.Ping
  virtual bool Ping();

  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestSync.Ping
  virtual void Ping(PingCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSync.Echo
  virtual bool Echo(int32_t value, int32_t* out_result);

  using EchoCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.TestSync.Echo
  virtual void Echo(int32_t value, EchoCallback callback) = 0;


  using AsyncEchoCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.TestSync.AsyncEcho
  virtual void AsyncEcho(int32_t value, AsyncEchoCallback callback) = 0;
};

class TestSyncPrimaryProxy;

template <typename ImplRefTraits>
class TestSyncPrimaryStub;

class TestSyncPrimaryRequestValidator;
class TestSyncPrimaryResponseValidator;


// @generated_from: mojo.test.TestSyncPrimary
class  TestSyncPrimary
    : public TestSyncPrimaryInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestSyncPrimaryInterfaceBase;
  using Proxy_ = TestSyncPrimaryProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestSyncPrimaryStub<ImplRefTraits>;

  using RequestValidator_ = TestSyncPrimaryRequestValidator;
  using ResponseValidator_ = TestSyncPrimaryResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
    kEchoMinVersion = 0,
    kAsyncEchoMinVersion = 0,
    kSendRemoteMinVersion = 0,
    kSendReceiverMinVersion = 0,
  };
  virtual ~TestSyncPrimary() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncPrimary.Ping
  virtual bool Ping();

  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestSyncPrimary.Ping
  virtual void Ping(PingCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestSyncPrimary.Echo
  virtual bool Echo(int32_t value, int32_t* out_result);

  using EchoCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.TestSyncPrimary.Echo
  virtual void Echo(int32_t value, EchoCallback callback) = 0;


  using AsyncEchoCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.TestSyncPrimary.AsyncEcho
  virtual void AsyncEcho(int32_t value, AsyncEchoCallback callback) = 0;

  
// @generated_from: mojo.test.TestSyncPrimary.SendRemote
  virtual void SendRemote(::mojo::PendingAssociatedRemote<TestSync> remote) = 0;

  
// @generated_from: mojo.test.TestSyncPrimary.SendReceiver
  virtual void SendReceiver(::mojo::PendingAssociatedReceiver<TestSync> receiver) = 0;
};



// @generated_from: mojo.test.TestSyncCodeGeneration
class  TestSyncCodeGenerationProxy
    : public TestSyncCodeGeneration {
 public:
  using InterfaceType = TestSyncCodeGeneration;

  explicit TestSyncCodeGenerationProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInput
  bool NoInput(int32_t* out_result) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInput
  void NoInput(NoInputCallback callback) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoOutput
  bool NoOutput(int32_t value) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoOutput
  void NoOutput(int32_t value, NoOutputCallback callback) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInOut
  bool NoInOut() final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.NoInOut
  void NoInOut(NoInOutCallback callback) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.HaveInOut
  bool HaveInOut(int32_t value1, int32_t value2, int32_t* out_result1, int32_t* out_result2) final;
  
// @generated_from: mojo.test.TestSyncCodeGeneration.HaveInOut
  void HaveInOut(int32_t value1, int32_t value2, HaveInOutCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.TestSync
class  TestSyncProxy
    : public TestSync {
 public:
  using InterfaceType = TestSync;

  explicit TestSyncProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestSync.Ping
  bool Ping() final;
  
// @generated_from: mojo.test.TestSync.Ping
  void Ping(PingCallback callback) final;
  
// @generated_from: mojo.test.TestSync.Echo
  bool Echo(int32_t value, int32_t* out_result) final;
  
// @generated_from: mojo.test.TestSync.Echo
  void Echo(int32_t value, EchoCallback callback) final;
  
// @generated_from: mojo.test.TestSync.AsyncEcho
  void AsyncEcho(int32_t value, AsyncEchoCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.TestSyncPrimary
class  TestSyncPrimaryProxy
    : public TestSyncPrimary {
 public:
  using InterfaceType = TestSyncPrimary;

  explicit TestSyncPrimaryProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestSyncPrimary.Ping
  bool Ping() final;
  
// @generated_from: mojo.test.TestSyncPrimary.Ping
  void Ping(PingCallback callback) final;
  
// @generated_from: mojo.test.TestSyncPrimary.Echo
  bool Echo(int32_t value, int32_t* out_result) final;
  
// @generated_from: mojo.test.TestSyncPrimary.Echo
  void Echo(int32_t value, EchoCallback callback) final;
  
// @generated_from: mojo.test.TestSyncPrimary.AsyncEcho
  void AsyncEcho(int32_t value, AsyncEchoCallback callback) final;
  
// @generated_from: mojo.test.TestSyncPrimary.SendRemote
  void SendRemote(::mojo::PendingAssociatedRemote<TestSync> remote) final;
  
// @generated_from: mojo.test.TestSyncPrimary.SendReceiver
  void SendReceiver(::mojo::PendingAssociatedReceiver<TestSync> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestSyncCodeGenerationStubDispatch {
 public:
  static bool Accept(TestSyncCodeGeneration* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestSyncCodeGeneration* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestSyncCodeGeneration>>
class TestSyncCodeGenerationStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestSyncCodeGenerationStub() {}
  ~TestSyncCodeGenerationStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncCodeGenerationStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncCodeGenerationStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestSyncStubDispatch {
 public:
  static bool Accept(TestSync* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestSync* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestSync>>
class TestSyncStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestSyncStub() {}
  ~TestSyncStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestSyncPrimaryStubDispatch {
 public:
  static bool Accept(TestSyncPrimary* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestSyncPrimary* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestSyncPrimary>>
class TestSyncPrimaryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestSyncPrimaryStub() {}
  ~TestSyncPrimaryStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncPrimaryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestSyncPrimaryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestSyncCodeGenerationRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestSyncRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestSyncPrimaryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestSyncCodeGenerationResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestSyncResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestSyncPrimaryResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_SYNC_METHODS_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTk3MSwgImJlZ2luIjogMTk0OSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luY0NvZGVHZW5lcmF0aW9u
In19LCB7ImVuZCI6IDI5NjEsICJiZWdpbiI6IDI5NTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNDb2RlR2VuZXJhdGlvbi5Ob0lu
cHV0In19LCB7ImVuZCI6IDMxMzIsICJiZWdpbiI6IDMxMjUsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNDb2RlR2VuZXJhdGlvbi5O
b0lucHV0In19LCB7ImVuZCI6IDMzODgsICJiZWdpbiI6IDMzODAsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNDb2RlR2VuZXJhdGlv
bi5Ob091dHB1dCJ9fSwgeyJlbmQiOiAzNTQ5LCAiYmVnaW4iOiAzNTQxLCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RTeW5jQ29kZUdlbmVy
YXRpb24uTm9PdXRwdXQifX0sIHsiZW5kIjogMzgxOSwgImJlZ2luIjogMzgxMiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luY0NvZGVH
ZW5lcmF0aW9uLk5vSW5PdXQifX0sIHsiZW5kIjogMzk2NCwgImJlZ2luIjogMzk1NywgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luY0Nv
ZGVHZW5lcmF0aW9uLk5vSW5PdXQifX0sIHsiZW5kIjogNDIyMiwgImJlZ2luIjogNDIxMywgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3lu
Y0NvZGVHZW5lcmF0aW9uLkhhdmVJbk91dCJ9fSwgeyJlbmQiOiA0NDYzLCAiYmVnaW4iOiA0NDU0
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRl
c3RTeW5jQ29kZUdlbmVyYXRpb24uSGF2ZUluT3V0In19LCB7ImVuZCI6IDQ3MzEsICJiZWdpbiI6
IDQ3MjMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuVGVzdFN5bmMifX0sIHsiZW5kIjogNTU2OCwgImJlZ2luIjogNTU2NCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luYy5QaW5nIn19
LCB7ImVuZCI6IDU2OTAsICJiZWdpbiI6IDU2ODYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmMuUGluZyJ9fSwgeyJlbmQiOiA1OTIx
LCAiYmVnaW4iOiA1OTE3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlRlc3RTeW5jLkVjaG8ifX0sIHsiZW5kIjogNjA4NCwgImJlZ2luIjogNjA4
MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5U
ZXN0U3luYy5FY2hvIn19LCB7ImVuZCI6IDYyNjksICJiZWdpbiI6IDYyNjAsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmMuQXN5bmNF
Y2hvIn19LCB7ImVuZCI6IDY1NjIsICJiZWdpbiI6IDY1NDcsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNQcmltYXJ5In19LCB7ImVu
ZCI6IDc1MTgsICJiZWdpbiI6IDc1MTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNQcmltYXJ5LlBpbmcifX0sIHsiZW5kIjogNzY0
NywgImJlZ2luIjogNzY0MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5UZXN0U3luY1ByaW1hcnkuUGluZyJ9fSwgeyJlbmQiOiA3ODg1LCAiYmVn
aW4iOiA3ODgxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LlRlc3RTeW5jUHJpbWFyeS5FY2hvIn19LCB7ImVuZCI6IDgwNTUsICJiZWdpbiI6IDgw
NTEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
VGVzdFN5bmNQcmltYXJ5LkVjaG8ifX0sIHsiZW5kIjogODI0NywgImJlZ2luIjogODIzOCwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3lu
Y1ByaW1hcnkuQXN5bmNFY2hvIn19LCB7ImVuZCI6IDgzODIsICJiZWdpbiI6IDgzNzIsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNQ
cmltYXJ5LlNlbmRSZW1vdGUifX0sIHsiZW5kIjogODUyOCwgImJlZ2luIjogODUxNiwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luY1By
aW1hcnkuU2VuZFJlY2VpdmVyIn19LCB7ImVuZCI6IDg5NDIsICJiZWdpbiI6IDg5MzUsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmND
b2RlR2VuZXJhdGlvbi5Ob0lucHV0In19LCB7ImVuZCI6IDkwNDksICJiZWdpbiI6IDkwNDIsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFN5
bmNDb2RlR2VuZXJhdGlvbi5Ob0lucHV0In19LCB7ImVuZCI6IDkxNjMsICJiZWdpbiI6IDkxNTUs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVz
dFN5bmNDb2RlR2VuZXJhdGlvbi5Ob091dHB1dCJ9fSwgeyJlbmQiOiA5MjY2LCAiYmVnaW4iOiA5
MjU4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LlRlc3RTeW5jQ29kZUdlbmVyYXRpb24uTm9PdXRwdXQifX0sIHsiZW5kIjogOTM5NCwgImJlZ2lu
IjogOTM4NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5UZXN0U3luY0NvZGVHZW5lcmF0aW9uLk5vSW5PdXQifX0sIHsiZW5kIjogOTQ4MiwgImJl
Z2luIjogOTQ3NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5UZXN0U3luY0NvZGVHZW5lcmF0aW9uLk5vSW5PdXQifX0sIHsiZW5kIjogOTU5OCwg
ImJlZ2luIjogOTU4OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5UZXN0U3luY0NvZGVHZW5lcmF0aW9uLkhhdmVJbk91dCJ9fSwgeyJlbmQiOiA5
NzY0LCAiYmVnaW4iOiA5NzU1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LlRlc3RTeW5jQ29kZUdlbmVyYXRpb24uSGF2ZUluT3V0In19LCB7ImVu
ZCI6IDEwMTU2LCAiYmVnaW4iOiAxMDE1MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luYy5QaW5nIn19LCB7ImVuZCI6IDEwMjI0LCAi
YmVnaW4iOiAxMDIyMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5UZXN0U3luYy5QaW5nIn19LCB7ImVuZCI6IDEwMzEzLCAiYmVnaW4iOiAxMDMw
OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5U
ZXN0U3luYy5FY2hvIn19LCB7ImVuZCI6IDEwNDE1LCAiYmVnaW4iOiAxMDQxMSwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luYy5FY2hv
In19LCB7ImVuZCI6IDEwNTI5LCAiYmVnaW4iOiAxMDUyMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luYy5Bc3luY0VjaG8ifX0sIHsi
ZW5kIjogMTA5NDYsICJiZWdpbiI6IDEwOTQyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RTeW5jUHJpbWFyeS5QaW5nIn19LCB7ImVuZCI6
IDExMDIxLCAiYmVnaW4iOiAxMTAxNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5UZXN0U3luY1ByaW1hcnkuUGluZyJ9fSwgeyJlbmQiOiAxMTEx
NywgImJlZ2luIjogMTExMTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuVGVzdFN5bmNQcmltYXJ5LkVjaG8ifX0sIHsiZW5kIjogMTEyMjYsICJi
ZWdpbiI6IDExMjIyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0LlRlc3RTeW5jUHJpbWFyeS5FY2hvIn19LCB7ImVuZCI6IDExMzQ3LCAiYmVnaW4i
OiAxMTMzOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5UZXN0U3luY1ByaW1hcnkuQXN5bmNFY2hvIn19LCB7ImVuZCI6IDExNDc1LCAiYmVnaW4i
OiAxMTQ2NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5UZXN0U3luY1ByaW1hcnkuU2VuZFJlbW90ZSJ9fSwgeyJlbmQiOiAxMTYxNCwgImJlZ2lu
IjogMTE2MDIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuVGVzdFN5bmNQcmltYXJ5LlNlbmRSZWNlaXZlciJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/