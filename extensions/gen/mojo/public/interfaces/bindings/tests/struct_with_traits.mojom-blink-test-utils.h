// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_TEST_UTILS_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_TEST_UTILS_H_

#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-blink.h"


namespace mojo {
namespace test {
namespace blink {


class  TraitsTestServiceInterceptorForTesting : public TraitsTestService {
  virtual TraitsTestService* GetForwardingInterface() = 0;
  void EchoStructWithTraits(StructWithTraitsPtr s, EchoStructWithTraitsCallback callback) override;
  void EchoTrivialStructWithTraits(TrivialStructWithTraitsPtr s, EchoTrivialStructWithTraitsCallback callback) override;
  void EchoMoveOnlyStructWithTraits(MoveOnlyStructWithTraitsPtr s, EchoMoveOnlyStructWithTraitsCallback callback) override;
  void EchoNullableMoveOnlyStructWithTraits(MoveOnlyStructWithTraitsPtr s, EchoNullableMoveOnlyStructWithTraitsCallback callback) override;
  void EchoEnumWithTraits(EnumWithTraits e, EchoEnumWithTraitsCallback callback) override;
  void EchoStructWithTraitsForUniquePtr(StructWithTraitsForUniquePtrPtr e, EchoStructWithTraitsForUniquePtrCallback callback) override;
  void EchoNullableStructWithTraitsForUniquePtr(StructWithTraitsForUniquePtrPtr e, EchoNullableStructWithTraitsForUniquePtrCallback callback) override;
  void EchoUnionWithTraits(UnionWithTraitsPtr u, EchoUnionWithTraitsCallback callback) override;
};
class  TraitsTestServiceAsyncWaiter {
 public:
  explicit TraitsTestServiceAsyncWaiter(TraitsTestService* proxy);
  ~TraitsTestServiceAsyncWaiter();
  void EchoStructWithTraits(
      StructWithTraitsPtr s, StructWithTraitsPtr* out_passed);
  void EchoTrivialStructWithTraits(
      TrivialStructWithTraitsPtr s, TrivialStructWithTraitsPtr* out_passed);
  void EchoMoveOnlyStructWithTraits(
      MoveOnlyStructWithTraitsPtr s, MoveOnlyStructWithTraitsPtr* out_passed);
  void EchoNullableMoveOnlyStructWithTraits(
      MoveOnlyStructWithTraitsPtr s, MoveOnlyStructWithTraitsPtr* out_passed);
  void EchoEnumWithTraits(
      EnumWithTraits e, EnumWithTraits* out_passed);
  void EchoStructWithTraitsForUniquePtr(
      StructWithTraitsForUniquePtrPtr e, StructWithTraitsForUniquePtrPtr* out_passed);
  void EchoNullableStructWithTraitsForUniquePtr(
      StructWithTraitsForUniquePtrPtr e, StructWithTraitsForUniquePtrPtr* out_passed);
  void EchoUnionWithTraits(
      UnionWithTraitsPtr u, UnionWithTraitsPtr* out_passed);

 private:
  TraitsTestService* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(TraitsTestServiceAsyncWaiter);
};


class  TestUnserializedStructInterceptorForTesting : public TestUnserializedStruct {
  virtual TestUnserializedStruct* GetForwardingInterface() = 0;
  void PassUnserializedStruct(StructWithUnreachableTraitsPtr s, PassUnserializedStructCallback callback) override;
};
class  TestUnserializedStructAsyncWaiter {
 public:
  explicit TestUnserializedStructAsyncWaiter(TestUnserializedStruct* proxy);
  ~TestUnserializedStructAsyncWaiter();
  void PassUnserializedStruct(
      StructWithUnreachableTraitsPtr s, StructWithUnreachableTraitsPtr* out_passed);

 private:
  TestUnserializedStruct* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(TestUnserializedStructAsyncWaiter);
};


class  ForceSerializeTesterInterceptorForTesting : public ForceSerializeTester {
  virtual ForceSerializeTester* GetForwardingInterface() = 0;
  void SendForceSerializedStruct(StructForceSerializePtr s, SendForceSerializedStructCallback callback) override;
  void SendNestedForceSerializedStruct(StructNestedForceSerializePtr s, SendNestedForceSerializedStructCallback callback) override;
};
class  ForceSerializeTesterAsyncWaiter {
 public:
  explicit ForceSerializeTesterAsyncWaiter(ForceSerializeTester* proxy);
  ~ForceSerializeTesterAsyncWaiter();
  void SendForceSerializedStruct(
      StructForceSerializePtr s, StructForceSerializePtr* out_passed);
  void SendNestedForceSerializedStruct(
      StructNestedForceSerializePtr s, StructNestedForceSerializePtr* out_passed);

 private:
  ForceSerializeTester* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ForceSerializeTesterAsyncWaiter);
};




}  // namespace blink
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_TEST_UTILS_H_