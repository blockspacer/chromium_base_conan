// mojo/public/interfaces/bindings/tests/math_calculator.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('math.Calculator');
goog.provide('math.CalculatorReceiver');
goog.provide('math.CalculatorCallbackRouter');
goog.provide('math.CalculatorInterface');
goog.provide('math.CalculatorRemote');
goog.provide('math.CalculatorPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
math.CalculatorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        math.Calculator.$interfaceName,
        scope);
  }
};

/** @interface */
math.CalculatorInterface = class {
  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  clear() {}
  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  add(value) {}
  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  multiply(value) {}
};

/**
 * @export
 * @implements { math.CalculatorInterface }
 */
math.CalculatorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!math.CalculatorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          math.CalculatorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!math.CalculatorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  clear() {
    return this.proxy.sendMessage(
        0,
        math.Calculator_Clear_ParamsSpec.$,
        math.Calculator_Clear_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  add(
      value) {
    return this.proxy.sendMessage(
        1,
        math.Calculator_Add_ParamsSpec.$,
        math.Calculator_Add_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  multiply(
      value) {
    return this.proxy.sendMessage(
        2,
        math.Calculator_Multiply_ParamsSpec.$,
        math.Calculator_Multiply_ResponseParamsSpec.$,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the Calculator
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
math.CalculatorReceiver = class {
  /**
   * @param {!math.CalculatorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!math.CalculatorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        math.CalculatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!math.CalculatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        math.Calculator_Clear_ParamsSpec.$,
        math.Calculator_Clear_ResponseParamsSpec.$,
        impl.clear.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        math.Calculator_Add_ParamsSpec.$,
        math.Calculator_Add_ResponseParamsSpec.$,
        impl.add.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        math.Calculator_Multiply_ParamsSpec.$,
        math.Calculator_Multiply_ResponseParamsSpec.$,
        impl.multiply.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
math.Calculator = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "math.Calculator";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!math.CalculatorRemote}
   * @export
   */
  static getRemote() {
    let remote = new math.CalculatorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Calculator
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
math.CalculatorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      math.CalculatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!math.CalculatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.clear =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        math.Calculator_Clear_ParamsSpec.$,
        math.Calculator_Clear_ResponseParamsSpec.$,
        this.clear.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.add =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        math.Calculator_Add_ParamsSpec.$,
        math.Calculator_Add_ResponseParamsSpec.$,
        this.add.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.multiply =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        math.Calculator_Multiply_ParamsSpec.$,
        math.Calculator_Multiply_ResponseParamsSpec.$,
        this.multiply.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('math.Calculator_Clear_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Clear_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('math.Calculator_Clear_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Clear_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('math.Calculator_Add_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Add_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('math.Calculator_Add_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Add_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('math.Calculator_Multiply_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Multiply_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('math.Calculator_Multiply_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
math.Calculator_Multiply_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    math.Calculator_Clear_ParamsSpec.$,
    'Calculator_Clear_Params',
    [
    ],
    [[0, 8],]);



goog.provide('math.Calculator_Clear_Params');

/** @record */
math.Calculator_Clear_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    math.Calculator_Clear_ResponseParamsSpec.$,
    'Calculator_Clear_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('math.Calculator_Clear_ResponseParams');

/** @record */
math.Calculator_Clear_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    math.Calculator_Add_ParamsSpec.$,
    'Calculator_Add_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('math.Calculator_Add_Params');

/** @record */
math.Calculator_Add_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    math.Calculator_Add_ResponseParamsSpec.$,
    'Calculator_Add_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('math.Calculator_Add_ResponseParams');

/** @record */
math.Calculator_Add_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    math.Calculator_Multiply_ParamsSpec.$,
    'Calculator_Multiply_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('math.Calculator_Multiply_Params');

/** @record */
math.Calculator_Multiply_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    math.Calculator_Multiply_ResponseParamsSpec.$,
    'Calculator_Multiply_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('math.Calculator_Multiply_ResponseParams');

/** @record */
math.Calculator_Multiply_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};


