// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-blink-forward.h"
#include "mojo/public/interfaces/bindings/tests/ping_service.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace blink {

class FooInterfaceProxy;

template <typename ImplRefTraits>
class FooInterfaceStub;

class FooInterfaceRequestValidator;


// @generated_from: mojo.test.FooInterface
class  FooInterface
    : public FooInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = FooInterfaceInterfaceBase;
  using Proxy_ = FooInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = FooInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = FooInterfaceRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~FooInterface() {}
};

class InterfacePassesAssociatedProxy;

template <typename ImplRefTraits>
class InterfacePassesAssociatedStub;

class InterfacePassesAssociatedRequestValidator;
class InterfacePassesAssociatedResponseValidator;


// @generated_from: mojo.test.InterfacePassesAssociated
class  InterfacePassesAssociated
    : public InterfacePassesAssociatedInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = InterfacePassesAssociatedInterfaceBase;
  using Proxy_ = InterfacePassesAssociatedProxy;

  template <typename ImplRefTraits>
  using Stub_ = InterfacePassesAssociatedStub<ImplRefTraits>;

  using RequestValidator_ = InterfacePassesAssociatedRequestValidator;
  using ResponseValidator_ = InterfacePassesAssociatedResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPassFooMinVersion = 0,
    kPassStructMinVersion = 0,
    kPassUnionMinVersion = 0,
  };
  virtual ~InterfacePassesAssociated() {}


  using PassFooCallback = base::OnceCallback<void(::mojo::PendingAssociatedRemote<FooInterface>, ::mojo::PendingAssociatedReceiver<FooInterface>)>;
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassFoo
  virtual void PassFoo(::mojo::PendingAssociatedRemote<FooInterface> foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver, PassFooCallback callback) = 0;


  using PassStructCallback = base::OnceCallback<void(StructContainsAssociatedPtr)>;
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassStruct
  virtual void PassStruct(StructContainsAssociatedPtr foo_struct, PassStructCallback callback) = 0;


  using PassUnionCallback = base::OnceCallback<void(UnionContainsAssociatedPtr)>;
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassUnion
  virtual void PassUnion(UnionContainsAssociatedPtr foo_union, PassUnionCallback callback) = 0;
};

class IntegerSenderProxy;

template <typename ImplRefTraits>
class IntegerSenderStub;

class IntegerSenderRequestValidator;
class IntegerSenderResponseValidator;


// @generated_from: mojo.test.IntegerSender
class  IntegerSender
    : public IntegerSenderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = IntegerSenderInterfaceBase;
  using Proxy_ = IntegerSenderProxy;

  template <typename ImplRefTraits>
  using Stub_ = IntegerSenderStub<ImplRefTraits>;

  using RequestValidator_ = IntegerSenderRequestValidator;
  using ResponseValidator_ = IntegerSenderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoMinVersion = 0,
    kSendMinVersion = 0,
  };
  virtual ~IntegerSender() {}


  using EchoCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.IntegerSender.Echo
  virtual void Echo(int32_t value, EchoCallback callback) = 0;

  
// @generated_from: mojo.test.IntegerSender.Send
  virtual void Send(int32_t value) = 0;
};

class StringSenderProxy;

template <typename ImplRefTraits>
class StringSenderStub;

class StringSenderRequestValidator;
class StringSenderResponseValidator;


// @generated_from: mojo.test.StringSender
class  StringSender
    : public StringSenderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = StringSenderInterfaceBase;
  using Proxy_ = StringSenderProxy;

  template <typename ImplRefTraits>
  using Stub_ = StringSenderStub<ImplRefTraits>;

  using RequestValidator_ = StringSenderRequestValidator;
  using ResponseValidator_ = StringSenderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoMinVersion = 0,
    kSendMinVersion = 0,
  };
  virtual ~StringSender() {}


  using EchoCallback = base::OnceCallback<void(const WTF::String&)>;
  
// @generated_from: mojo.test.StringSender.Echo
  virtual void Echo(const WTF::String& value, EchoCallback callback) = 0;

  
// @generated_from: mojo.test.StringSender.Send
  virtual void Send(const WTF::String& value) = 0;
};

class IntegerSenderConnectionProxy;

template <typename ImplRefTraits>
class IntegerSenderConnectionStub;

class IntegerSenderConnectionRequestValidator;
class IntegerSenderConnectionResponseValidator;


// @generated_from: mojo.test.IntegerSenderConnection
class  IntegerSenderConnection
    : public IntegerSenderConnectionInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = IntegerSenderConnectionInterfaceBase;
  using Proxy_ = IntegerSenderConnectionProxy;

  template <typename ImplRefTraits>
  using Stub_ = IntegerSenderConnectionStub<ImplRefTraits>;

  using RequestValidator_ = IntegerSenderConnectionRequestValidator;
  using ResponseValidator_ = IntegerSenderConnectionResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetSenderMinVersion = 0,
    kAsyncGetSenderMinVersion = 0,
  };
  virtual ~IntegerSenderConnection() {}

  
// @generated_from: mojo.test.IntegerSenderConnection.GetSender
  virtual void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) = 0;


  using AsyncGetSenderCallback = base::OnceCallback<void(::mojo::PendingAssociatedRemote<IntegerSender>)>;
  
// @generated_from: mojo.test.IntegerSenderConnection.AsyncGetSender
  virtual void AsyncGetSender(AsyncGetSenderCallback callback) = 0;
};

class IntegerSenderConnectionAtBothEndsProxy;

template <typename ImplRefTraits>
class IntegerSenderConnectionAtBothEndsStub;

class IntegerSenderConnectionAtBothEndsRequestValidator;
class IntegerSenderConnectionAtBothEndsResponseValidator;


// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds
class  IntegerSenderConnectionAtBothEnds
    : public IntegerSenderConnectionAtBothEndsInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = IntegerSenderConnectionAtBothEndsInterfaceBase;
  using Proxy_ = IntegerSenderConnectionAtBothEndsProxy;

  template <typename ImplRefTraits>
  using Stub_ = IntegerSenderConnectionAtBothEndsStub<ImplRefTraits>;

  using RequestValidator_ = IntegerSenderConnectionAtBothEndsRequestValidator;
  using ResponseValidator_ = IntegerSenderConnectionAtBothEndsResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetSenderMinVersion = 0,
    kSetSenderMinVersion = 0,
  };
  virtual ~IntegerSenderConnectionAtBothEnds() {}

  
// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds.GetSender
  virtual void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) = 0;


  using SetSenderCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds.SetSender
  virtual void SetSender(::mojo::PendingAssociatedRemote<IntegerSender> sender, SetSenderCallback callback) = 0;
};

class SenderConnectionProxy;

template <typename ImplRefTraits>
class SenderConnectionStub;

class SenderConnectionRequestValidator;


// @generated_from: mojo.test.SenderConnection
class  SenderConnection
    : public SenderConnectionInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = SenderConnectionInterfaceBase;
  using Proxy_ = SenderConnectionProxy;

  template <typename ImplRefTraits>
  using Stub_ = SenderConnectionStub<ImplRefTraits>;

  using RequestValidator_ = SenderConnectionRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetIntegerSenderMinVersion = 0,
    kGetStringSenderMinVersion = 0,
  };
  virtual ~SenderConnection() {}

  
// @generated_from: mojo.test.SenderConnection.GetIntegerSender
  virtual void GetIntegerSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) = 0;

  
// @generated_from: mojo.test.SenderConnection.GetStringSender
  virtual void GetStringSender(::mojo::PendingAssociatedReceiver<StringSender> receiver) = 0;
};

class AssociatedPingProviderProxy;

template <typename ImplRefTraits>
class AssociatedPingProviderStub;

class AssociatedPingProviderRequestValidator;


// @generated_from: mojo.test.AssociatedPingProvider
class  AssociatedPingProvider
    : public AssociatedPingProviderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AssociatedPingProviderInterfaceBase;
  using Proxy_ = AssociatedPingProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = AssociatedPingProviderStub<ImplRefTraits>;

  using RequestValidator_ = AssociatedPingProviderRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetPingMinVersion = 0,
  };
  virtual ~AssociatedPingProvider() {}

  
// @generated_from: mojo.test.AssociatedPingProvider.GetPing
  virtual void GetPing(::mojo::PendingAssociatedReceiver<::mojo::test::blink::PingService> receiver) = 0;
};

class AssociatedPingProviderProviderProxy;

template <typename ImplRefTraits>
class AssociatedPingProviderProviderStub;

class AssociatedPingProviderProviderRequestValidator;


// @generated_from: mojo.test.AssociatedPingProviderProvider
class  AssociatedPingProviderProvider
    : public AssociatedPingProviderProviderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AssociatedPingProviderProviderInterfaceBase;
  using Proxy_ = AssociatedPingProviderProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = AssociatedPingProviderProviderStub<ImplRefTraits>;

  using RequestValidator_ = AssociatedPingProviderProviderRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetPingProviderMinVersion = 0,
  };
  virtual ~AssociatedPingProviderProvider() {}

  
// @generated_from: mojo.test.AssociatedPingProviderProvider.GetPingProvider
  virtual void GetPingProvider(::mojo::PendingAssociatedReceiver<AssociatedPingProvider> receiver) = 0;
};



// @generated_from: mojo.test.FooInterface
class  FooInterfaceProxy
    : public FooInterface {
 public:
  using InterfaceType = FooInterface;

  explicit FooInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.InterfacePassesAssociated
class  InterfacePassesAssociatedProxy
    : public InterfacePassesAssociated {
 public:
  using InterfaceType = InterfacePassesAssociated;

  explicit InterfacePassesAssociatedProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassFoo
  void PassFoo(::mojo::PendingAssociatedRemote<FooInterface> foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver, PassFooCallback callback) final;
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassStruct
  void PassStruct(StructContainsAssociatedPtr foo_struct, PassStructCallback callback) final;
  
// @generated_from: mojo.test.InterfacePassesAssociated.PassUnion
  void PassUnion(UnionContainsAssociatedPtr foo_union, PassUnionCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.IntegerSender
class  IntegerSenderProxy
    : public IntegerSender {
 public:
  using InterfaceType = IntegerSender;

  explicit IntegerSenderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.IntegerSender.Echo
  void Echo(int32_t value, EchoCallback callback) final;
  
// @generated_from: mojo.test.IntegerSender.Send
  void Send(int32_t value) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.StringSender
class  StringSenderProxy
    : public StringSender {
 public:
  using InterfaceType = StringSender;

  explicit StringSenderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.StringSender.Echo
  void Echo(const WTF::String& value, EchoCallback callback) final;
  
// @generated_from: mojo.test.StringSender.Send
  void Send(const WTF::String& value) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.IntegerSenderConnection
class  IntegerSenderConnectionProxy
    : public IntegerSenderConnection {
 public:
  using InterfaceType = IntegerSenderConnection;

  explicit IntegerSenderConnectionProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.IntegerSenderConnection.GetSender
  void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) final;
  
// @generated_from: mojo.test.IntegerSenderConnection.AsyncGetSender
  void AsyncGetSender(AsyncGetSenderCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds
class  IntegerSenderConnectionAtBothEndsProxy
    : public IntegerSenderConnectionAtBothEnds {
 public:
  using InterfaceType = IntegerSenderConnectionAtBothEnds;

  explicit IntegerSenderConnectionAtBothEndsProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds.GetSender
  void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) final;
  
// @generated_from: mojo.test.IntegerSenderConnectionAtBothEnds.SetSender
  void SetSender(::mojo::PendingAssociatedRemote<IntegerSender> sender, SetSenderCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.SenderConnection
class  SenderConnectionProxy
    : public SenderConnection {
 public:
  using InterfaceType = SenderConnection;

  explicit SenderConnectionProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.SenderConnection.GetIntegerSender
  void GetIntegerSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) final;
  
// @generated_from: mojo.test.SenderConnection.GetStringSender
  void GetStringSender(::mojo::PendingAssociatedReceiver<StringSender> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.AssociatedPingProvider
class  AssociatedPingProviderProxy
    : public AssociatedPingProvider {
 public:
  using InterfaceType = AssociatedPingProvider;

  explicit AssociatedPingProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.AssociatedPingProvider.GetPing
  void GetPing(::mojo::PendingAssociatedReceiver<::mojo::test::blink::PingService> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.AssociatedPingProviderProvider
class  AssociatedPingProviderProviderProxy
    : public AssociatedPingProviderProvider {
 public:
  using InterfaceType = AssociatedPingProviderProvider;

  explicit AssociatedPingProviderProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.AssociatedPingProviderProvider.GetPingProvider
  void GetPingProvider(::mojo::PendingAssociatedReceiver<AssociatedPingProvider> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  FooInterfaceStubDispatch {
 public:
  static bool Accept(FooInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      FooInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<FooInterface>>
class FooInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  FooInterfaceStub() {}
  ~FooInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FooInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FooInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  InterfacePassesAssociatedStubDispatch {
 public:
  static bool Accept(InterfacePassesAssociated* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      InterfacePassesAssociated* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<InterfacePassesAssociated>>
class InterfacePassesAssociatedStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  InterfacePassesAssociatedStub() {}
  ~InterfacePassesAssociatedStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfacePassesAssociatedStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfacePassesAssociatedStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  IntegerSenderStubDispatch {
 public:
  static bool Accept(IntegerSender* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      IntegerSender* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<IntegerSender>>
class IntegerSenderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  IntegerSenderStub() {}
  ~IntegerSenderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  StringSenderStubDispatch {
 public:
  static bool Accept(StringSender* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      StringSender* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<StringSender>>
class StringSenderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  StringSenderStub() {}
  ~StringSenderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return StringSenderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return StringSenderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  IntegerSenderConnectionStubDispatch {
 public:
  static bool Accept(IntegerSenderConnection* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      IntegerSenderConnection* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<IntegerSenderConnection>>
class IntegerSenderConnectionStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  IntegerSenderConnectionStub() {}
  ~IntegerSenderConnectionStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderConnectionStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderConnectionStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  IntegerSenderConnectionAtBothEndsStubDispatch {
 public:
  static bool Accept(IntegerSenderConnectionAtBothEnds* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      IntegerSenderConnectionAtBothEnds* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<IntegerSenderConnectionAtBothEnds>>
class IntegerSenderConnectionAtBothEndsStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  IntegerSenderConnectionAtBothEndsStub() {}
  ~IntegerSenderConnectionAtBothEndsStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderConnectionAtBothEndsStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IntegerSenderConnectionAtBothEndsStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SenderConnectionStubDispatch {
 public:
  static bool Accept(SenderConnection* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SenderConnection* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SenderConnection>>
class SenderConnectionStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SenderConnectionStub() {}
  ~SenderConnectionStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SenderConnectionStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SenderConnectionStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AssociatedPingProviderStubDispatch {
 public:
  static bool Accept(AssociatedPingProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AssociatedPingProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AssociatedPingProvider>>
class AssociatedPingProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AssociatedPingProviderStub() {}
  ~AssociatedPingProviderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AssociatedPingProviderProviderStubDispatch {
 public:
  static bool Accept(AssociatedPingProviderProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AssociatedPingProviderProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AssociatedPingProviderProvider>>
class AssociatedPingProviderProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AssociatedPingProviderProviderStub() {}
  ~AssociatedPingProviderProviderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingProviderProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingProviderProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  FooInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  InterfacePassesAssociatedRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  StringSenderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderConnectionRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderConnectionAtBothEndsRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SenderConnectionRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AssociatedPingProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AssociatedPingProviderProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  InterfacePassesAssociatedResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  StringSenderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderConnectionResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IntegerSenderConnectionAtBothEndsResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};






// @generated_from: mojo.test.UnionContainsAssociated
class  UnionContainsAssociated {
 public:
  using DataView = UnionContainsAssociatedDataView;
  using Data_ = internal::UnionContainsAssociated_Data;
  using Tag = Data_::UnionContainsAssociated_Tag;

  static UnionContainsAssociatedPtr New() {
    return UnionContainsAssociatedPtr(base::in_place);
  }
  // Construct an instance holding |foo_remote|.
  static UnionContainsAssociatedPtr
  NewFooRemote(
      ::mojo::PendingAssociatedRemote<FooInterface> foo_remote) {
    auto result = UnionContainsAssociatedPtr(base::in_place);
    result->set_foo_remote(std::move(foo_remote));
    return result;
  }
  // Construct an instance holding |foo_receiver|.
  static UnionContainsAssociatedPtr
  NewFooReceiver(
      ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver) {
    auto result = UnionContainsAssociatedPtr(base::in_place);
    result->set_foo_receiver(std::move(foo_receiver));
    return result;
  }
  // Construct an instance holding |foo_remotes|.
  static UnionContainsAssociatedPtr
  NewFooRemotes(
      WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes) {
    auto result = UnionContainsAssociatedPtr(base::in_place);
    result->set_foo_remotes(std::move(foo_remotes));
    return result;
  }
  // Construct an instance holding |foo_receivers|.
  static UnionContainsAssociatedPtr
  NewFooReceivers(
      WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers) {
    auto result = UnionContainsAssociatedPtr(base::in_place);
    result->set_foo_receivers(std::move(foo_receivers));
    return result;
  }

  template <typename U>
  static UnionContainsAssociatedPtr From(const U& u) {
    return mojo::TypeConverter<UnionContainsAssociatedPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionContainsAssociated>::Convert(*this);
  }

  UnionContainsAssociated();
  ~UnionContainsAssociated();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionContainsAssociatedPtr>
  UnionContainsAssociatedPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionContainsAssociated>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionContainsAssociated>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remote
  bool is_foo_remote() const { return tag_ == Tag::FOO_REMOTE; }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remote
  ::mojo::PendingAssociatedRemote<FooInterface>& get_foo_remote() const {
    DCHECK(tag_ == Tag::FOO_REMOTE);
    return *(data_.foo_remote);
  }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remote
  void set_foo_remote(
      ::mojo::PendingAssociatedRemote<FooInterface> foo_remote);
  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receiver
  bool is_foo_receiver() const { return tag_ == Tag::FOO_RECEIVER; }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receiver
  ::mojo::PendingAssociatedReceiver<FooInterface>& get_foo_receiver() const {
    DCHECK(tag_ == Tag::FOO_RECEIVER);
    return *(data_.foo_receiver);
  }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receiver
  void set_foo_receiver(
      ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver);
  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remotes
  bool is_foo_remotes() const { return tag_ == Tag::FOO_REMOTES; }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remotes
  WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>>& get_foo_remotes() const {
    DCHECK(tag_ == Tag::FOO_REMOTES);
    return *(data_.foo_remotes);
  }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_remotes
  void set_foo_remotes(
      WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes);
  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receivers
  bool is_foo_receivers() const { return tag_ == Tag::FOO_RECEIVERS; }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receivers
  WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>>& get_foo_receivers() const {
    DCHECK(tag_ == Tag::FOO_RECEIVERS);
    return *(data_.foo_receivers);
  }

  
// @generated_from: mojo.test.UnionContainsAssociated.foo_receivers
  void set_foo_receivers(
      WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionContainsAssociated::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionContainsAssociated::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ::mojo::PendingAssociatedRemote<FooInterface>* foo_remote;
    ::mojo::PendingAssociatedReceiver<FooInterface>* foo_receiver;
    WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>>* foo_remotes;
    WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>>* foo_receivers;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: mojo.test.StructContainsAssociated
class  StructContainsAssociated {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructContainsAssociated, T>::value>;
  using DataView = StructContainsAssociatedDataView;
  using Data_ = internal::StructContainsAssociated_Data;

  template <typename... Args>
  static StructContainsAssociatedPtr New(Args&&... args) {
    return StructContainsAssociatedPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructContainsAssociatedPtr From(const U& u) {
    return mojo::TypeConverter<StructContainsAssociatedPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructContainsAssociated>::Convert(*this);
  }


  StructContainsAssociated();

  StructContainsAssociated(
      ::mojo::PendingAssociatedRemote<FooInterface> foo_remote,
      ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver,
      WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes,
      WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers);

  ~StructContainsAssociated();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructContainsAssociatedPtr>
  StructContainsAssociatedPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructContainsAssociated::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructContainsAssociated_UnserializedMessageContext<
            UserType, StructContainsAssociated::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructContainsAssociated::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructContainsAssociated::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructContainsAssociated_UnserializedMessageContext<
            UserType, StructContainsAssociated::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructContainsAssociated::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructContainsAssociated.foo_remote
  ::mojo::PendingAssociatedRemote<FooInterface> foo_remote;
  
// @generated_from: mojo.test.StructContainsAssociated.foo_receiver
  ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver;
  
// @generated_from: mojo.test.StructContainsAssociated.foo_remotes
  WTF::Vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes;
  
// @generated_from: mojo.test.StructContainsAssociated.foo_receivers
  WTF::Vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(StructContainsAssociated);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructContainsAssociated::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
UnionContainsAssociatedPtr UnionContainsAssociated::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::FOO_REMOTE:
      rv->set_foo_remote(mojo::Clone(*data_.foo_remote));
      break;
    case Tag::FOO_RECEIVER:
      rv->set_foo_receiver(mojo::Clone(*data_.foo_receiver));
      break;
    case Tag::FOO_REMOTES:
      rv->set_foo_remotes(mojo::Clone(*data_.foo_remotes));
      break;
    case Tag::FOO_RECEIVERS:
      rv->set_foo_receivers(mojo::Clone(*data_.foo_receivers));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionContainsAssociated>::value>::type*>
bool UnionContainsAssociated::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::FOO_REMOTE:
      return mojo::Equals(*(data_.foo_remote), *(other.data_.foo_remote));
    case Tag::FOO_RECEIVER:
      return mojo::Equals(*(data_.foo_receiver), *(other.data_.foo_receiver));
    case Tag::FOO_REMOTES:
      return mojo::Equals(*(data_.foo_remotes), *(other.data_.foo_remotes));
    case Tag::FOO_RECEIVERS:
      return mojo::Equals(*(data_.foo_receivers), *(other.data_.foo_receivers));
  }

  return false;
}
template <typename StructPtrType>
StructContainsAssociatedPtr StructContainsAssociated::Clone() const {
  return New(
      mojo::Clone(foo_remote),
      mojo::Clone(foo_receiver),
      mojo::Clone(foo_remotes),
      mojo::Clone(foo_receivers)
  );
}

template <typename T, StructContainsAssociated::EnableIfSame<T>*>
bool StructContainsAssociated::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->foo_remote, other_struct.foo_remote))
    return false;
  if (!mojo::Equals(this->foo_receiver, other_struct.foo_receiver))
    return false;
  if (!mojo::Equals(this->foo_remotes, other_struct.foo_remotes))
    return false;
  if (!mojo::Equals(this->foo_receivers, other_struct.foo_receivers))
    return false;
  return true;
}

template <typename T, StructContainsAssociated::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.foo_remote < rhs.foo_remote)
    return true;
  if (rhs.foo_remote < lhs.foo_remote)
    return false;
  if (lhs.foo_receiver < rhs.foo_receiver)
    return true;
  if (rhs.foo_receiver < lhs.foo_receiver)
    return false;
  if (lhs.foo_remotes < rhs.foo_remotes)
    return true;
  if (rhs.foo_remotes < lhs.foo_remotes)
    return false;
  if (lhs.foo_receivers < rhs.foo_receivers)
    return true;
  if (rhs.foo_receivers < lhs.foo_receivers)
    return false;
  return false;
}


}  // namespace blink
}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::blink::StructContainsAssociated::DataView,
                                         ::mojo::test::blink::StructContainsAssociatedPtr> {
  static bool IsNull(const ::mojo::test::blink::StructContainsAssociatedPtr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::StructContainsAssociatedPtr* output) { output->reset(); }

  static  decltype(::mojo::test::blink::StructContainsAssociated::foo_remote)& foo_remote(
       ::mojo::test::blink::StructContainsAssociatedPtr& input) {
    return input->foo_remote;
  }

  static  decltype(::mojo::test::blink::StructContainsAssociated::foo_receiver)& foo_receiver(
       ::mojo::test::blink::StructContainsAssociatedPtr& input) {
    return input->foo_receiver;
  }

  static  decltype(::mojo::test::blink::StructContainsAssociated::foo_remotes)& foo_remotes(
       ::mojo::test::blink::StructContainsAssociatedPtr& input) {
    return input->foo_remotes;
  }

  static  decltype(::mojo::test::blink::StructContainsAssociated::foo_receivers)& foo_receivers(
       ::mojo::test::blink::StructContainsAssociatedPtr& input) {
    return input->foo_receivers;
  }

  static bool Read(::mojo::test::blink::StructContainsAssociated::DataView input, ::mojo::test::blink::StructContainsAssociatedPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::blink::UnionContainsAssociated::DataView,
                                        ::mojo::test::blink::UnionContainsAssociatedPtr> {
  static bool IsNull(const ::mojo::test::blink::UnionContainsAssociatedPtr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::UnionContainsAssociatedPtr* output) { output->reset(); }

  static ::mojo::test::blink::UnionContainsAssociated::Tag GetTag(const ::mojo::test::blink::UnionContainsAssociatedPtr& input) {
    return input->which();
  }

  static  ::mojo::PendingAssociatedRemote<::mojo::test::blink::FooInterface>& foo_remote( ::mojo::test::blink::UnionContainsAssociatedPtr& input) {
    return input->get_foo_remote();
  }

  static  ::mojo::PendingAssociatedReceiver<::mojo::test::blink::FooInterface>& foo_receiver( ::mojo::test::blink::UnionContainsAssociatedPtr& input) {
    return input->get_foo_receiver();
  }

  static  WTF::Vector<::mojo::PendingAssociatedRemote<::mojo::test::blink::FooInterface>>& foo_remotes( ::mojo::test::blink::UnionContainsAssociatedPtr& input) {
    return input->get_foo_remotes();
  }

  static  WTF::Vector<::mojo::PendingAssociatedReceiver<::mojo::test::blink::FooInterface>>& foo_receivers( ::mojo::test::blink::UnionContainsAssociatedPtr& input) {
    return input->get_foo_receivers();
  }

  static bool Read(::mojo::test::blink::UnionContainsAssociated::DataView input, ::mojo::test::blink::UnionContainsAssociatedPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI1OSwgImJlZ2luIjogMjI0NywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Gb29JbnRlcmZhY2UifX0sIHsiZW5k
IjogMzE0MSwgImJlZ2luIjogMzExNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5JbnRlcmZhY2VQYXNzZXNBc3NvY2lhdGVkIn19LCB7ImVuZCI6
IDQxNDMsICJiZWdpbiI6IDQxMzYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuSW50ZXJmYWNlUGFzc2VzQXNzb2NpYXRlZC5QYXNzRm9vIn19LCB7
ImVuZCI6IDQ0NzYsICJiZWdpbiI6IDQ0NjYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZXJmYWNlUGFzc2VzQXNzb2NpYXRlZC5QYXNzU3Ry
dWN0In19LCB7ImVuZCI6IDQ3MjgsICJiZWdpbiI6IDQ3MTksICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZXJmYWNlUGFzc2VzQXNzb2NpYXRl
ZC5QYXNzVW5pb24ifX0sIHsiZW5kIjogNTAzMiwgImJlZ2luIjogNTAxOSwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlZ2VyU2VuZGVyIn19
LCB7ImVuZCI6IDU4MDQsICJiZWdpbiI6IDU4MDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlci5FY2hvIn19LCB7ImVuZCI6
IDU5MjAsICJiZWdpbiI6IDU5MTYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlci5TZW5kIn19LCB7ImVuZCI6IDYxNjcsICJi
ZWdpbiI6IDYxNTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvLnRlc3QuU3RyaW5nU2VuZGVyIn19LCB7ImVuZCI6IDY5NDIsICJiZWdpbiI6IDY5MzgsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RyaW5n
U2VuZGVyLkVjaG8ifX0sIHsiZW5kIjogNzA2OCwgImJlZ2luIjogNzA2NCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJpbmdTZW5kZXIuU2Vu
ZCJ9fSwgeyJlbmQiOiA3MzkyLCAiYmVnaW4iOiA3MzY5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkludGVnZXJTZW5kZXJDb25uZWN0aW9uIn19
LCB7ImVuZCI6IDgyMDksICJiZWdpbiI6IDgyMDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlckNvbm5lY3Rpb24uR2V0U2Vu
ZGVyIn19LCB7ImVuZCI6IDg0ODQsICJiZWdpbiI6IDg0NzAsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlckNvbm5lY3Rpb24u
QXN5bmNHZXRTZW5kZXIifX0sIHsiZW5kIjogODg3NSwgImJlZ2luIjogODg0MiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlZ2VyU2VuZGVy
Q29ubmVjdGlvbkF0Qm90aEVuZHMifX0sIHsiZW5kIjogOTc2NywgImJlZ2luIjogOTc1OCwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlZ2Vy
U2VuZGVyQ29ubmVjdGlvbkF0Qm90aEVuZHMuR2V0U2VuZGVyIn19LCB7ImVuZCI6IDk5OTgsICJi
ZWdpbiI6IDk5ODksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvLnRlc3QuSW50ZWdlclNlbmRlckNvbm5lY3Rpb25BdEJvdGhFbmRzLlNldFNlbmRlciJ9fSwg
eyJlbmQiOiAxMDI5NiwgImJlZ2luIjogMTAyODAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU2VuZGVyQ29ubmVjdGlvbiJ9fSwgeyJlbmQiOiAx
MTA2OSwgImJlZ2luIjogMTEwNTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuU2VuZGVyQ29ubmVjdGlvbi5HZXRJbnRlZ2VyU2VuZGVyIn19LCB7
ImVuZCI6IDExMjMxLCAiYmVnaW4iOiAxMTIxNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TZW5kZXJDb25uZWN0aW9uLkdldFN0cmluZ1NlbmRl
ciJ9fSwgeyJlbmQiOiAxMTUzNCwgImJlZ2luIjogMTE1MTIsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuQXNzb2NpYXRlZFBpbmdQcm92aWRlciJ9
fSwgeyJlbmQiOiAxMjI4NiwgImJlZ2luIjogMTIyNzksICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuQXNzb2NpYXRlZFBpbmdQcm92aWRlci5HZXRQ
aW5nIn19LCB7ImVuZCI6IDEyNjQ5LCAiYmVnaW4iOiAxMjYxOSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5Bc3NvY2lhdGVkUGluZ1Byb3ZpZGVy
UHJvdmlkZXIifX0sIHsiZW5kIjogMTM0ODEsICJiZWdpbiI6IDEzNDY2LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRQaW5nUHJv
dmlkZXJQcm92aWRlci5HZXRQaW5nUHJvdmlkZXIifX0sIHsiZW5kIjogMTQyMTMsICJiZWdpbiI6
IDE0MjA2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LkludGVyZmFjZVBhc3Nlc0Fzc29jaWF0ZWQuUGFzc0ZvbyJ9fSwgeyJlbmQiOiAxNDQ1NCwg
ImJlZ2luIjogMTQ0NDQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuSW50ZXJmYWNlUGFzc2VzQXNzb2NpYXRlZC5QYXNzU3RydWN0In19LCB7ImVu
ZCI6IDE0NjE2LCAiYmVnaW4iOiAxNDYwNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlcmZhY2VQYXNzZXNBc3NvY2lhdGVkLlBhc3NVbmlv
biJ9fSwgeyJlbmQiOiAxNTA0NCwgImJlZ2luIjogMTUwNDAsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlci5FY2hvIn19LCB7
ImVuZCI6IDE1MTUzLCAiYmVnaW4iOiAxNTE0OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlZ2VyU2VuZGVyLlNlbmQifX0sIHsiZW5kIjog
MTU1MjQsICJiZWdpbiI6IDE1NTIwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LlN0cmluZ1NlbmRlci5FY2hvIn19LCB7ImVuZCI6IDE1NjQzLCAi
YmVnaW4iOiAxNTYzOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5TdHJpbmdTZW5kZXIuU2VuZCJ9fSwgeyJlbmQiOiAxNjEwMSwgImJlZ2luIjog
MTYwOTIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuSW50ZWdlclNlbmRlckNvbm5lY3Rpb24uR2V0U2VuZGVyIn19LCB7ImVuZCI6IDE2MjYxLCAi
YmVnaW4iOiAxNjI0NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5JbnRlZ2VyU2VuZGVyQ29ubmVjdGlvbi5Bc3luY0dldFNlbmRlciJ9fSwgeyJl
bmQiOiAxNjc4NiwgImJlZ2luIjogMTY3NzcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlckNvbm5lY3Rpb25BdEJvdGhFbmRz
LkdldFNlbmRlciJ9fSwgeyJlbmQiOiAxNjk0NiwgImJlZ2luIjogMTY5MzcsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuSW50ZWdlclNlbmRlckNv
bm5lY3Rpb25BdEJvdGhFbmRzLlNldFNlbmRlciJ9fSwgeyJlbmQiOiAxNzQzMywgImJlZ2luIjog
MTc0MTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuU2VuZGVyQ29ubmVjdGlvbi5HZXRJbnRlZ2VyU2VuZGVyIn19LCB7ImVuZCI6IDE3NTg4LCAi
YmVnaW4iOiAxNzU3MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
Im1vam8udGVzdC5TZW5kZXJDb25uZWN0aW9uLkdldFN0cmluZ1NlbmRlciJ9fSwgeyJlbmQiOiAx
ODA2OCwgImJlZ2luIjogMTgwNjEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuQXNzb2NpYXRlZFBpbmdQcm92aWRlci5HZXRQaW5nIn19LCB7ImVu
ZCI6IDE4NjMyLCAiYmVnaW4iOiAxODYxNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5Bc3NvY2lhdGVkUGluZ1Byb3ZpZGVyUHJvdmlkZXIuR2V0
UGluZ1Byb3ZpZGVyIn19LCB7ImVuZCI6IDMyOTE5LCAiYmVnaW4iOiAzMjg5NiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5VbmlvbkNvbnRhaW5z
QXNzb2NpYXRlZCJ9fSwgeyJlbmQiOiAzNTgzMiwgImJlZ2luIjogMzU4MTksICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25Db250YWluc0Fz
c29jaWF0ZWQuZm9vX3JlbW90ZSJ9fSwgeyJlbmQiOiAzNjAwOSwgImJlZ2luIjogMzU5OTUsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25D
b250YWluc0Fzc29jaWF0ZWQuZm9vX3JlbW90ZSJ9fSwgeyJlbmQiOiAzNjE4MywgImJlZ2luIjog
MzYxNjksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuVW5pb25Db250YWluc0Fzc29jaWF0ZWQuZm9vX3JlbW90ZSJ9fSwgeyJlbmQiOiAzNjM0Miwg
ImJlZ2luIjogMzYzMjcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuVW5pb25Db250YWluc0Fzc29jaWF0ZWQuZm9vX3JlY2VpdmVyIn19LCB7ImVu
ZCI6IDM2NTI3LCAiYmVnaW4iOiAzNjUxMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5VbmlvbkNvbnRhaW5zQXNzb2NpYXRlZC5mb29fcmVjZWl2
ZXIifX0sIHsiZW5kIjogMzY3MDksICJiZWdpbiI6IDM2NjkzLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlVuaW9uQ29udGFpbnNBc3NvY2lhdGVk
LmZvb19yZWNlaXZlciJ9fSwgeyJlbmQiOiAzNjg3MCwgImJlZ2luIjogMzY4NTYsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25Db250YWlu
c0Fzc29jaWF0ZWQuZm9vX3JlbW90ZXMifX0sIHsiZW5kIjogMzcwNjMsICJiZWdpbiI6IDM3MDQ4
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlVu
aW9uQ29udGFpbnNBc3NvY2lhdGVkLmZvb19yZW1vdGVzIn19LCB7ImVuZCI6IDM3MjQxLCAiYmVn
aW4iOiAzNzIyNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5VbmlvbkNvbnRhaW5zQXNzb2NpYXRlZC5mb29fcmVtb3RlcyJ9fSwgeyJlbmQiOiAz
NzQxNiwgImJlZ2luIjogMzc0MDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuVW5pb25Db250YWluc0Fzc29jaWF0ZWQuZm9vX3JlY2VpdmVycyJ9
fSwgeyJlbmQiOiAzNzYxNywgImJlZ2luIjogMzc2MDAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25Db250YWluc0Fzc29jaWF0ZWQuZm9v
X3JlY2VpdmVycyJ9fSwgeyJlbmQiOiAzNzgwMywgImJlZ2luIjogMzc3ODYsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVW5pb25Db250YWluc0Fz
c29jaWF0ZWQuZm9vX3JlY2VpdmVycyJ9fSwgeyJlbmQiOiAzOTAxNywgImJlZ2luIjogMzg5OTMs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3Ry
dWN0Q29udGFpbnNBc3NvY2lhdGVkIn19LCB7ImVuZCI6IDQzMDA1LCAiYmVnaW4iOiA0Mjk5NSwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1
Y3RDb250YWluc0Fzc29jaWF0ZWQuZm9vX3JlbW90ZSJ9fSwgeyJlbmQiOiA0MzE0MCwgImJlZ2lu
IjogNDMxMjgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuU3RydWN0Q29udGFpbnNBc3NvY2lhdGVkLmZvb19yZWNlaXZlciJ9fSwgeyJlbmQiOiA0
MzI4NCwgImJlZ2luIjogNDMyNzMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0Q29udGFpbnNBc3NvY2lhdGVkLmZvb19yZW1vdGVzIn19
LCB7ImVuZCI6IDQzNDM0LCAiYmVnaW4iOiA0MzQyMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3RDb250YWluc0Fzc29jaWF0ZWQuZm9v
X3JlY2VpdmVycyJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/