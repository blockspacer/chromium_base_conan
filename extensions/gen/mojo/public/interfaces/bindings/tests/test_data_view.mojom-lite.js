// mojo/public/interfaces/bindings/tests/test_data_view.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('mojo.test.dataView');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mojo.test.dataView.TestEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mojo.test.dataView.TestEnum = {
  
  VALUE_0: 0,
  VALUE_1: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.dataView.TestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.dataView.TestInterface.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { mojo.test.dataView.TestInterfaceInterface }
 */
mojo.test.dataView.TestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.dataView.TestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.dataView.TestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.dataView.TestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } value
   * @return {!Promise<{
        outValue: !number,
   *  }>}
   */

  echo(
      value) {
    return this.proxy.sendMessage(
        0,
        mojo.test.dataView.TestInterface_Echo_ParamsSpec.$,
        mojo.test.dataView.TestInterface_Echo_ResponseParamsSpec.$,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the TestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.dataView.TestInterfaceReceiver = class {
  /**
   * @param {!mojo.test.dataView.TestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.dataView.TestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.dataView.TestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.dataView.TestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.dataView.TestInterface_Echo_ParamsSpec.$,
        mojo.test.dataView.TestInterface_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.dataView.TestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.data_view.TestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.dataView.TestInterfaceRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.dataView.TestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.dataView.TestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.dataView.TestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.dataView.TestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.dataView.TestInterface_Echo_ParamsSpec.$,
        mojo.test.dataView.TestInterface_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.dataView.NestedStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.dataView.TestNativeStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.dataView.TestStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.dataView.TestInterface_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.dataView.TestInterface_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
mojo.test.dataView.TestUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mojo.test.dataView.NestedStructSpec.$,
    'NestedStruct',
    [
      mojo.internal.StructField(
        'fInt32', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mojo.test.dataView.NestedStruct = class {
  constructor() {
    /** @export { !number } */
    this.fInt32;
  }
};




mojo.internal.Struct(
    mojo.test.dataView.TestNativeStructSpec.$,
    'TestNativeStruct',
    [
    ],
    [[0, 8],]);





/** @record */
mojo.test.dataView.TestNativeStruct = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.dataView.TestStructSpec.$,
    'TestStruct',
    [
      mojo.internal.StructField(
        'fString', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fStruct', 8,
        0,
        mojo.test.dataView.NestedStructSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'fNativeStruct', 16,
        0,
        mojo.test.dataView.TestNativeStructSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'fBoolArray', 24,
        0,
        mojo.internal.Array(mojo.internal.Bool, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fInt32Array', 32,
        0,
        mojo.internal.Array(mojo.internal.Int32, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fEnumArray', 40,
        0,
        mojo.internal.Array(mojo.test.dataView.TestEnumSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fInterfaceArray', 48,
        0,
        mojo.internal.Array(mojo.internal.InterfaceProxy(mojo.test.dataView.TestInterfaceRemote), false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fNestedArray', 56,
        0,
        mojo.internal.Array(mojo.internal.Array(mojo.internal.Int32, false), false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fStructArray', 64,
        0,
        mojo.internal.Array(mojo.test.dataView.NestedStructSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fUnionArray', 72,
        0,
        mojo.internal.Array(mojo.test.dataView.TestUnionSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fMap', 80,
        0,
        mojo.internal.Map(mojo.internal.String, mojo.internal.Int32, false),
        null,
        false /* nullable */),
    ],
    [[0, 96],]);





/** @record */
mojo.test.dataView.TestStruct = class {
  constructor() {
    /** @export { !string } */
    this.fString;
    /** @export { (mojo.test.dataView.NestedStruct|undefined) } */
    this.fStruct;
    /** @export { (mojo.test.dataView.TestNativeStruct|undefined) } */
    this.fNativeStruct;
    /** @export { !Array<!boolean> } */
    this.fBoolArray;
    /** @export { !Array<!number> } */
    this.fInt32Array;
    /** @export { !Array<!mojo.test.dataView.TestEnum> } */
    this.fEnumArray;
    /** @export { !Array<!mojo.test.dataView.TestInterfaceRemote> } */
    this.fInterfaceArray;
    /** @export { !Array<!Array<!number>> } */
    this.fNestedArray;
    /** @export { !Array<!mojo.test.dataView.NestedStruct> } */
    this.fStructArray;
    /** @export { !Array<!mojo.test.dataView.TestUnion> } */
    this.fUnionArray;
    /** @export { !Object<!string, !number> } */
    this.fMap;
  }
};




mojo.internal.Struct(
    mojo.test.dataView.TestInterface_Echo_ParamsSpec.$,
    'TestInterface_Echo_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mojo.test.dataView.TestInterface_Echo_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.dataView.TestInterface_Echo_ResponseParamsSpec.$,
    'TestInterface_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'outValue', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mojo.test.dataView.TestInterface_Echo_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.outValue;
  }
};




mojo.internal.Union(
    mojo.test.dataView.TestUnionSpec.$, 'TestUnion',
    {
      'fBool': {
        'ordinal': 0,
        'type': mojo.internal.Bool,
      },
      'fInt32': {
        'ordinal': 1,
        'type': mojo.internal.Int32,
      },
    });

/**
 * @typedef { {
 *   fBool: (!boolean|undefined),
 *   fInt32: (!number|undefined),
 * } }
 */
mojo.test.dataView.TestUnion;
