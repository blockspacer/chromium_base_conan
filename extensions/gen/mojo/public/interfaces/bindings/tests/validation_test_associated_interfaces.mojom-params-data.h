// mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace internal {
class  AssociatedConformanceTestInterface_Method0_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data param0;

 private:
  friend class mojo::internal::MessageFragment<AssociatedConformanceTestInterface_Method0_Params_Data>;

  AssociatedConformanceTestInterface_Method0_Params_Data();
  ~AssociatedConformanceTestInterface_Method0_Params_Data() = delete;
};
static_assert(sizeof(AssociatedConformanceTestInterface_Method0_Params_Data) == 16,
              "Bad sizeof(AssociatedConformanceTestInterface_Method0_Params_Data)");
class  AssociatedConformanceTestInterface_Method1_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data param0;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AssociatedConformanceTestInterface_Method1_Params_Data>;

  AssociatedConformanceTestInterface_Method1_Params_Data();
  ~AssociatedConformanceTestInterface_Method1_Params_Data() = delete;
};
static_assert(sizeof(AssociatedConformanceTestInterface_Method1_Params_Data) == 16,
              "Bad sizeof(AssociatedConformanceTestInterface_Method1_Params_Data)");
class  AssociatedConformanceTestInterface_Method2_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data param0;

 private:
  friend class mojo::internal::MessageFragment<AssociatedConformanceTestInterface_Method2_Params_Data>;

  AssociatedConformanceTestInterface_Method2_Params_Data();
  ~AssociatedConformanceTestInterface_Method2_Params_Data() = delete;
};
static_assert(sizeof(AssociatedConformanceTestInterface_Method2_Params_Data) == 16,
              "Bad sizeof(AssociatedConformanceTestInterface_Method2_Params_Data)");
class  AssociatedConformanceTestInterface_Method3_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::AssociatedInterface_Data>> param0;

 private:
  friend class mojo::internal::MessageFragment<AssociatedConformanceTestInterface_Method3_Params_Data>;

  AssociatedConformanceTestInterface_Method3_Params_Data();
  ~AssociatedConformanceTestInterface_Method3_Params_Data() = delete;
};
static_assert(sizeof(AssociatedConformanceTestInterface_Method3_Params_Data) == 16,
              "Bad sizeof(AssociatedConformanceTestInterface_Method3_Params_Data)");

}  // namespace internal


class AssociatedConformanceTestInterface_Method0_ParamsDataView {
 public:
  AssociatedConformanceTestInterface_Method0_ParamsDataView() {}

  AssociatedConformanceTestInterface_Method0_ParamsDataView(
      internal::AssociatedConformanceTestInterface_Method0_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeParam0() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::InterfaceXAssociatedPtrInfoDataView>(
            &data_->param0, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AssociatedConformanceTestInterface_Method0_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AssociatedConformanceTestInterface_Method1_ParamsDataView {
 public:
  AssociatedConformanceTestInterface_Method1_ParamsDataView() {}

  AssociatedConformanceTestInterface_Method1_ParamsDataView(
      internal::AssociatedConformanceTestInterface_Method1_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeParam0() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::InterfaceXAssociatedRequestDataView>(
            &data_->param0, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AssociatedConformanceTestInterface_Method1_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AssociatedConformanceTestInterface_Method2_ParamsDataView {
 public:
  AssociatedConformanceTestInterface_Method2_ParamsDataView() {}

  AssociatedConformanceTestInterface_Method2_ParamsDataView(
      internal::AssociatedConformanceTestInterface_Method2_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeParam0() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::InterfaceXAssociatedPtrInfoDataView>(
            &data_->param0, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AssociatedConformanceTestInterface_Method2_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AssociatedConformanceTestInterface_Method3_ParamsDataView {
 public:
  AssociatedConformanceTestInterface_Method3_ParamsDataView() {}

  AssociatedConformanceTestInterface_Method3_ParamsDataView(
      internal::AssociatedConformanceTestInterface_Method3_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParam0DataView(
      mojo::ArrayDataView<InterfaceXAssociatedPtrInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParam0(UserType* output) {
    
    auto* pointer = data_->param0.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo::test::InterfaceXAssociatedPtrInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AssociatedConformanceTestInterface_Method3_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void AssociatedConformanceTestInterface_Method3_ParamsDataView::GetParam0DataView(
    mojo::ArrayDataView<InterfaceXAssociatedPtrInfoDataView>* output) {
  auto pointer = data_->param0.Get();
  *output = mojo::ArrayDataView<InterfaceXAssociatedPtrInfoDataView>(pointer, message_);
}

}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_PARAMS_DATA_H_