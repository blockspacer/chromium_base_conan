// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-params-data.h"
#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared-message-ids.h"

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-import-headers.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_JUMBO_H_
#endif
namespace mojo {
namespace test {
StructContainsAssociated::StructContainsAssociated()
    : foo_remote(),
      foo_receiver(),
      foo_remotes(),
      foo_receivers() {}

StructContainsAssociated::StructContainsAssociated(
    ::mojo::PendingAssociatedRemote<FooInterface> foo_remote_in,
    ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver_in,
    std::vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes_in,
    std::vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers_in)
    : foo_remote(std::move(foo_remote_in)),
      foo_receiver(std::move(foo_receiver_in)),
      foo_remotes(std::move(foo_remotes_in)),
      foo_receivers(std::move(foo_receivers_in)) {}

StructContainsAssociated::~StructContainsAssociated() = default;

void StructContainsAssociated::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "foo_remote"), this->foo_remote,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingAssociatedRemote<FooInterface>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "foo_receiver"), this->foo_receiver,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingAssociatedReceiver<FooInterface>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "foo_remotes"), this->foo_remotes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::mojo::PendingAssociatedRemote<FooInterface>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "foo_receivers"), this->foo_receivers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::mojo::PendingAssociatedReceiver<FooInterface>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructContainsAssociated::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
UnionContainsAssociated::UnionContainsAssociated() : tag_(Tag::FOO_REMOTE) {
  data_.foo_remote = new ::mojo::PendingAssociatedRemote<FooInterface>;
}

UnionContainsAssociated::~UnionContainsAssociated() {
  DestroyActive();
}


void UnionContainsAssociated::set_foo_remote(
    ::mojo::PendingAssociatedRemote<FooInterface> foo_remote) {
  if (tag_ == Tag::FOO_REMOTE) {
    *(data_.foo_remote) = std::move(foo_remote);
  } else {
    DestroyActive();
    tag_ = Tag::FOO_REMOTE;
    data_.foo_remote = new ::mojo::PendingAssociatedRemote<FooInterface>(
        std::move(foo_remote));
  }
}
void UnionContainsAssociated::set_foo_receiver(
    ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver) {
  if (tag_ == Tag::FOO_RECEIVER) {
    *(data_.foo_receiver) = std::move(foo_receiver);
  } else {
    DestroyActive();
    tag_ = Tag::FOO_RECEIVER;
    data_.foo_receiver = new ::mojo::PendingAssociatedReceiver<FooInterface>(
        std::move(foo_receiver));
  }
}
void UnionContainsAssociated::set_foo_remotes(
    std::vector<::mojo::PendingAssociatedRemote<FooInterface>> foo_remotes) {
  if (tag_ == Tag::FOO_REMOTES) {
    *(data_.foo_remotes) = std::move(foo_remotes);
  } else {
    DestroyActive();
    tag_ = Tag::FOO_REMOTES;
    data_.foo_remotes = new std::vector<::mojo::PendingAssociatedRemote<FooInterface>>(
        std::move(foo_remotes));
  }
}
void UnionContainsAssociated::set_foo_receivers(
    std::vector<::mojo::PendingAssociatedReceiver<FooInterface>> foo_receivers) {
  if (tag_ == Tag::FOO_RECEIVERS) {
    *(data_.foo_receivers) = std::move(foo_receivers);
  } else {
    DestroyActive();
    tag_ = Tag::FOO_RECEIVERS;
    data_.foo_receivers = new std::vector<::mojo::PendingAssociatedReceiver<FooInterface>>(
        std::move(foo_receivers));
  }
}

void UnionContainsAssociated::DestroyActive() {
  switch (tag_) {

    case Tag::FOO_REMOTE:

      delete data_.foo_remote;
      break;
    case Tag::FOO_RECEIVER:

      delete data_.foo_receiver;
      break;
    case Tag::FOO_REMOTES:

      delete data_.foo_remotes;
      break;
    case Tag::FOO_RECEIVERS:

      delete data_.foo_receivers;
      break;
  }
}

bool UnionContainsAssociated::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char FooInterface::Name_[] = "mojo.test.FooInterface";

FooInterfaceProxy::FooInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool FooInterfaceStubDispatch::Accept(
    FooInterface* impl,
    mojo::Message* message) {
  return false;
}

// static
bool FooInterfaceStubDispatch::AcceptWithResponder(
    FooInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool FooInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::FooInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

const char InterfacePassesAssociated::Name_[] = "mojo.test.InterfacePassesAssociated";

class InterfacePassesAssociated_PassFoo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  InterfacePassesAssociated_PassFoo_ForwardToCallback(
      InterfacePassesAssociated::PassFooCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  InterfacePassesAssociated::PassFooCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassFoo_ForwardToCallback);
};

class InterfacePassesAssociated_PassStruct_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  InterfacePassesAssociated_PassStruct_ForwardToCallback(
      InterfacePassesAssociated::PassStructCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  InterfacePassesAssociated::PassStructCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassStruct_ForwardToCallback);
};

class InterfacePassesAssociated_PassUnion_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  InterfacePassesAssociated_PassUnion_ForwardToCallback(
      InterfacePassesAssociated::PassUnionCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  InterfacePassesAssociated::PassUnionCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassUnion_ForwardToCallback);
};

InterfacePassesAssociatedProxy::InterfacePassesAssociatedProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void InterfacePassesAssociatedProxy::PassFoo(
    ::mojo::PendingAssociatedRemote<FooInterface> in_foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> in_foo_receiver, PassFooCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::InterfacePassesAssociated::PassFoo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_remote"), in_foo_remote, 
                        "<value of type ::mojo::PendingAssociatedRemote<FooInterface>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_receiver"), in_foo_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<FooInterface>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassFoo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassFoo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
      in_foo_remote, &params->foo_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->foo_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid foo_remote in InterfacePassesAssociated.PassFoo request");
  mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
      in_foo_receiver, &params->foo_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->foo_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid foo_receiver in InterfacePassesAssociated.PassFoo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassFoo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new InterfacePassesAssociated_PassFoo_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void InterfacePassesAssociatedProxy::PassStruct(
    StructContainsAssociatedPtr in_foo_struct, PassStructCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::InterfacePassesAssociated::PassStruct", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_struct"), in_foo_struct, 
                        "<value of type StructContainsAssociatedPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassStruct_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassStruct_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->foo_struct)::BaseType> foo_struct_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::StructContainsAssociatedDataView>(
      in_foo_struct, foo_struct_fragment);
  params->foo_struct.Set(
      foo_struct_fragment.is_null() ? nullptr : foo_struct_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->foo_struct.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null foo_struct in InterfacePassesAssociated.PassStruct request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassStruct");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new InterfacePassesAssociated_PassStruct_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void InterfacePassesAssociatedProxy::PassUnion(
    UnionContainsAssociatedPtr in_foo_union, PassUnionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::InterfacePassesAssociated::PassUnion", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_union"), in_foo_union, 
                        "<value of type UnionContainsAssociatedPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassUnion_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassUnion_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->foo_union)>
      foo_union_fragment(params.message());
  foo_union_fragment.Claim(&params->foo_union);
  mojo::internal::Serialize<::mojo::test::UnionContainsAssociatedDataView>(
      in_foo_union, foo_union_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->foo_union.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null foo_union in InterfacePassesAssociated.PassUnion request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassUnion");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new InterfacePassesAssociated_PassUnion_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class InterfacePassesAssociated_PassFoo_ProxyToResponder {
 public:
  static InterfacePassesAssociated::PassFooCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<InterfacePassesAssociated_PassFoo_ProxyToResponder> proxy(
        new InterfacePassesAssociated_PassFoo_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&InterfacePassesAssociated_PassFoo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~InterfacePassesAssociated_PassFoo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  InterfacePassesAssociated_PassFoo_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "InterfacePassesAssociated::PassFooCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingAssociatedRemote<FooInterface> in_foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> in_foo_receiver);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassFoo_ProxyToResponder);
};

bool InterfacePassesAssociated_PassFoo_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::InterfacePassesAssociated::PassFooCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::InterfacePassesAssociated_PassFoo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::InterfacePassesAssociated_PassFoo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingAssociatedRemote<FooInterface> p_foo_remote{};
  ::mojo::PendingAssociatedReceiver<FooInterface> p_foo_receiver{};
  InterfacePassesAssociated_PassFoo_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_foo_remote =
        input_data_view.TakeFooRemote<decltype(p_foo_remote)>();
  }
  if (success) {
    p_foo_receiver =
        input_data_view.TakeFooReceiver<decltype(p_foo_receiver)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        InterfacePassesAssociated::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_foo_remote), 
std::move(p_foo_receiver));
  return true;
}

void InterfacePassesAssociated_PassFoo_ProxyToResponder::Run(
    ::mojo::PendingAssociatedRemote<FooInterface> in_foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> in_foo_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassFooCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_remote"), in_foo_remote, 
                        "<value of type ::mojo::PendingAssociatedRemote<FooInterface>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_receiver"), in_foo_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<FooInterface>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassFoo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassFoo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
      in_foo_remote, &params->foo_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->foo_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid foo_remote in ");
  mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
      in_foo_receiver, &params->foo_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->foo_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid foo_receiver in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassFooCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassFoo");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class InterfacePassesAssociated_PassStruct_ProxyToResponder {
 public:
  static InterfacePassesAssociated::PassStructCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<InterfacePassesAssociated_PassStruct_ProxyToResponder> proxy(
        new InterfacePassesAssociated_PassStruct_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&InterfacePassesAssociated_PassStruct_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~InterfacePassesAssociated_PassStruct_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  InterfacePassesAssociated_PassStruct_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "InterfacePassesAssociated::PassStructCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      StructContainsAssociatedPtr in_foo_struct);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassStruct_ProxyToResponder);
};

bool InterfacePassesAssociated_PassStruct_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::InterfacePassesAssociated::PassStructCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::InterfacePassesAssociated_PassStruct_ResponseParams_Data* params =
      reinterpret_cast<
          internal::InterfacePassesAssociated_PassStruct_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  StructContainsAssociatedPtr p_foo_struct{};
  InterfacePassesAssociated_PassStruct_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadFooStruct(&p_foo_struct))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        InterfacePassesAssociated::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_foo_struct));
  return true;
}

void InterfacePassesAssociated_PassStruct_ProxyToResponder::Run(
    StructContainsAssociatedPtr in_foo_struct) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassStructCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_struct"), in_foo_struct, 
                        "<value of type StructContainsAssociatedPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassStruct_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassStruct_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->foo_struct)::BaseType> foo_struct_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::StructContainsAssociatedDataView>(
      in_foo_struct, foo_struct_fragment);
  params->foo_struct.Set(
      foo_struct_fragment.is_null() ? nullptr : foo_struct_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->foo_struct.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null foo_struct in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassStructCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassStruct");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class InterfacePassesAssociated_PassUnion_ProxyToResponder {
 public:
  static InterfacePassesAssociated::PassUnionCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<InterfacePassesAssociated_PassUnion_ProxyToResponder> proxy(
        new InterfacePassesAssociated_PassUnion_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&InterfacePassesAssociated_PassUnion_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~InterfacePassesAssociated_PassUnion_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  InterfacePassesAssociated_PassUnion_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "InterfacePassesAssociated::PassUnionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      UnionContainsAssociatedPtr in_foo_union);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociated_PassUnion_ProxyToResponder);
};

bool InterfacePassesAssociated_PassUnion_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::InterfacePassesAssociated::PassUnionCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::InterfacePassesAssociated_PassUnion_ResponseParams_Data* params =
      reinterpret_cast<
          internal::InterfacePassesAssociated_PassUnion_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  UnionContainsAssociatedPtr p_foo_union{};
  InterfacePassesAssociated_PassUnion_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadFooUnion(&p_foo_union))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        InterfacePassesAssociated::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_foo_union));
  return true;
}

void InterfacePassesAssociated_PassUnion_ProxyToResponder::Run(
    UnionContainsAssociatedPtr in_foo_union) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassUnionCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("foo_union"), in_foo_union, 
                        "<value of type UnionContainsAssociatedPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kInterfacePassesAssociated_PassUnion_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::InterfacePassesAssociated_PassUnion_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->foo_union)>
      foo_union_fragment(params.message());
  foo_union_fragment.Claim(&params->foo_union);
  mojo::internal::Serialize<::mojo::test::UnionContainsAssociatedDataView>(
      in_foo_union, foo_union_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->foo_union.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null foo_union in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::InterfacePassesAssociated::PassUnionCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfacePassesAssociated::Name_);
  message.set_method_name("PassUnion");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool InterfacePassesAssociatedStubDispatch::Accept(
    InterfacePassesAssociated* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kInterfacePassesAssociated_PassFoo_Name: {
      break;
    }
    case internal::kInterfacePassesAssociated_PassStruct_Name: {
      break;
    }
    case internal::kInterfacePassesAssociated_PassUnion_Name: {
      break;
    }
  }
  return false;
}

// static
bool InterfacePassesAssociatedStubDispatch::AcceptWithResponder(
    InterfacePassesAssociated* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kInterfacePassesAssociated_PassFoo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::InterfacePassesAssociated::PassFoo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::InterfacePassesAssociated::PassFoo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::InterfacePassesAssociated_PassFoo_Params_Data* params =
          reinterpret_cast<
              internal::InterfacePassesAssociated_PassFoo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedRemote<FooInterface> p_foo_remote{};
      ::mojo::PendingAssociatedReceiver<FooInterface> p_foo_receiver{};
      InterfacePassesAssociated_PassFoo_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_foo_remote =
            input_data_view.TakeFooRemote<decltype(p_foo_remote)>();
      }
      if (success) {
        p_foo_receiver =
            input_data_view.TakeFooReceiver<decltype(p_foo_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfacePassesAssociated::Name_, 0, false);
        return false;
      }
      InterfacePassesAssociated::PassFooCallback callback =
          InterfacePassesAssociated_PassFoo_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PassFoo(
std::move(p_foo_remote), 
std::move(p_foo_receiver), std::move(callback));
      return true;
    }
    case internal::kInterfacePassesAssociated_PassStruct_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::InterfacePassesAssociated::PassStruct",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::InterfacePassesAssociated::PassStruct");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::InterfacePassesAssociated_PassStruct_Params_Data* params =
          reinterpret_cast<
              internal::InterfacePassesAssociated_PassStruct_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      StructContainsAssociatedPtr p_foo_struct{};
      InterfacePassesAssociated_PassStruct_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadFooStruct(&p_foo_struct))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfacePassesAssociated::Name_, 1, false);
        return false;
      }
      InterfacePassesAssociated::PassStructCallback callback =
          InterfacePassesAssociated_PassStruct_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PassStruct(
std::move(p_foo_struct), std::move(callback));
      return true;
    }
    case internal::kInterfacePassesAssociated_PassUnion_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::InterfacePassesAssociated::PassUnion",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::InterfacePassesAssociated::PassUnion");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::InterfacePassesAssociated_PassUnion_Params_Data* params =
          reinterpret_cast<
              internal::InterfacePassesAssociated_PassUnion_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      UnionContainsAssociatedPtr p_foo_union{};
      InterfacePassesAssociated_PassUnion_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadFooUnion(&p_foo_union))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfacePassesAssociated::Name_, 2, false);
        return false;
      }
      InterfacePassesAssociated::PassUnionCallback callback =
          InterfacePassesAssociated_PassUnion_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PassUnion(
std::move(p_foo_union), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kInterfacePassesAssociatedValidationInfo[] = {
    {&internal::InterfacePassesAssociated_PassFoo_Params_Data::Validate,
     &internal::InterfacePassesAssociated_PassFoo_ResponseParams_Data::Validate},
    {&internal::InterfacePassesAssociated_PassStruct_Params_Data::Validate,
     &internal::InterfacePassesAssociated_PassStruct_ResponseParams_Data::Validate},
    {&internal::InterfacePassesAssociated_PassUnion_Params_Data::Validate,
     &internal::InterfacePassesAssociated_PassUnion_ResponseParams_Data::Validate},
};

bool InterfacePassesAssociatedRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::InterfacePassesAssociated::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kInterfacePassesAssociatedValidationInfo);
}

bool InterfacePassesAssociatedResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::InterfacePassesAssociated::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kInterfacePassesAssociatedValidationInfo);
}
const char IntegerSender::Name_[] = "mojo.test.IntegerSender";

class IntegerSender_Echo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IntegerSender_Echo_ForwardToCallback(
      IntegerSender::EchoCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  IntegerSender::EchoCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(IntegerSender_Echo_ForwardToCallback);
};

IntegerSenderProxy::IntegerSenderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IntegerSenderProxy::Echo(
    int32_t in_value, EchoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::IntegerSender::Echo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSender_Echo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSender_Echo_Params_Data> params(
          message);
  params.Allocate();
  params->value = in_value;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSender::Name_);
  message.set_method_name("Echo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IntegerSender_Echo_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void IntegerSenderProxy::Send(
    int32_t in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::IntegerSender::Send", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSender_Send_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSender_Send_Params_Data> params(
          message);
  params.Allocate();
  params->value = in_value;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSender::Name_);
  message.set_method_name("Send");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class IntegerSender_Echo_ProxyToResponder {
 public:
  static IntegerSender::EchoCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<IntegerSender_Echo_ProxyToResponder> proxy(
        new IntegerSender_Echo_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&IntegerSender_Echo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IntegerSender_Echo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  IntegerSender_Echo_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IntegerSender::EchoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int32_t in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSender_Echo_ProxyToResponder);
};

bool IntegerSender_Echo_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::IntegerSender::EchoCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::IntegerSender_Echo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IntegerSender_Echo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int32_t p_value{};
  IntegerSender_Echo_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_value = input_data_view.value();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IntegerSender::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void IntegerSender_Echo_ProxyToResponder::Run(
    int32_t in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::IntegerSender::EchoCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type int32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSender_Echo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSender_Echo_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->value = in_value;

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::IntegerSender::EchoCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSender::Name_);
  message.set_method_name("Echo");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IntegerSenderStubDispatch::Accept(
    IntegerSender* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIntegerSender_Echo_Name: {
      break;
    }
    case internal::kIntegerSender_Send_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSender::Send",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSender::Send");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::IntegerSender_Send_Params_Data* params =
          reinterpret_cast<internal::IntegerSender_Send_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_value{};
      IntegerSender_Send_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_value = input_data_view.value();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSender::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Send(
std::move(p_value));
      return true;
    }
  }
  return false;
}

// static
bool IntegerSenderStubDispatch::AcceptWithResponder(
    IntegerSender* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kIntegerSender_Echo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSender::Echo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSender::Echo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::IntegerSender_Echo_Params_Data* params =
          reinterpret_cast<
              internal::IntegerSender_Echo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_value{};
      IntegerSender_Echo_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_value = input_data_view.value();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSender::Name_, 0, false);
        return false;
      }
      IntegerSender::EchoCallback callback =
          IntegerSender_Echo_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Echo(
std::move(p_value), std::move(callback));
      return true;
    }
    case internal::kIntegerSender_Send_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIntegerSenderValidationInfo[] = {
    {&internal::IntegerSender_Echo_Params_Data::Validate,
     &internal::IntegerSender_Echo_ResponseParams_Data::Validate},
    {&internal::IntegerSender_Send_Params_Data::Validate,
     nullptr /* no response */},
};

bool IntegerSenderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSender::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIntegerSenderValidationInfo);
}

bool IntegerSenderResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSender::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIntegerSenderValidationInfo);
}
const char StringSender::Name_[] = "mojo.test.StringSender";

class StringSender_Echo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  StringSender_Echo_ForwardToCallback(
      StringSender::EchoCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  StringSender::EchoCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(StringSender_Echo_ForwardToCallback);
};

StringSenderProxy::StringSenderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void StringSenderProxy::Echo(
    const std::string& in_value, EchoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::StringSender::Echo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kStringSender_Echo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::StringSender_Echo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in StringSender.Echo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(StringSender::Name_);
  message.set_method_name("Echo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new StringSender_Echo_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void StringSenderProxy::Send(
    const std::string& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::StringSender::Send", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kStringSender_Send_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::StringSender_Send_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in StringSender.Send request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(StringSender::Name_);
  message.set_method_name("Send");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class StringSender_Echo_ProxyToResponder {
 public:
  static StringSender::EchoCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<StringSender_Echo_ProxyToResponder> proxy(
        new StringSender_Echo_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&StringSender_Echo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~StringSender_Echo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  StringSender_Echo_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "StringSender::EchoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(StringSender_Echo_ProxyToResponder);
};

bool StringSender_Echo_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::StringSender::EchoCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::StringSender_Echo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::StringSender_Echo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::string p_value{};
  StringSender_Echo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        StringSender::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void StringSender_Echo_ProxyToResponder::Run(
    const std::string& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::StringSender::EchoCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kStringSender_Echo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::StringSender_Echo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::StringSender::EchoCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(StringSender::Name_);
  message.set_method_name("Echo");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool StringSenderStubDispatch::Accept(
    StringSender* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kStringSender_Echo_Name: {
      break;
    }
    case internal::kStringSender_Send_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::StringSender::Send",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::StringSender::Send");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::StringSender_Send_Params_Data* params =
          reinterpret_cast<internal::StringSender_Send_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_value{};
      StringSender_Send_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            StringSender::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Send(
std::move(p_value));
      return true;
    }
  }
  return false;
}

// static
bool StringSenderStubDispatch::AcceptWithResponder(
    StringSender* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kStringSender_Echo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::StringSender::Echo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::StringSender::Echo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::StringSender_Echo_Params_Data* params =
          reinterpret_cast<
              internal::StringSender_Echo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_value{};
      StringSender_Echo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            StringSender::Name_, 0, false);
        return false;
      }
      StringSender::EchoCallback callback =
          StringSender_Echo_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Echo(
std::move(p_value), std::move(callback));
      return true;
    }
    case internal::kStringSender_Send_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kStringSenderValidationInfo[] = {
    {&internal::StringSender_Echo_Params_Data::Validate,
     &internal::StringSender_Echo_ResponseParams_Data::Validate},
    {&internal::StringSender_Send_Params_Data::Validate,
     nullptr /* no response */},
};

bool StringSenderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::StringSender::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kStringSenderValidationInfo);
}

bool StringSenderResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::StringSender::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kStringSenderValidationInfo);
}
const char IntegerSenderConnection::Name_[] = "mojo.test.IntegerSenderConnection";

class IntegerSenderConnection_AsyncGetSender_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IntegerSenderConnection_AsyncGetSender_ForwardToCallback(
      IntegerSenderConnection::AsyncGetSenderCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  IntegerSenderConnection::AsyncGetSenderCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnection_AsyncGetSender_ForwardToCallback);
};

IntegerSenderConnectionProxy::IntegerSenderConnectionProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IntegerSenderConnectionProxy::GetSender(
    ::mojo::PendingAssociatedReceiver<IntegerSender> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::IntegerSenderConnection::GetSender", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<IntegerSender>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnection_GetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnection_GetSender_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::IntegerSenderAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in IntegerSenderConnection.GetSender request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnection::Name_);
  message.set_method_name("GetSender");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void IntegerSenderConnectionProxy::AsyncGetSender(
    AsyncGetSenderCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::IntegerSenderConnection::AsyncGetSender");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnection_AsyncGetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnection_AsyncGetSender_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnection::Name_);
  message.set_method_name("AsyncGetSender");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IntegerSenderConnection_AsyncGetSender_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class IntegerSenderConnection_AsyncGetSender_ProxyToResponder {
 public:
  static IntegerSenderConnection::AsyncGetSenderCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<IntegerSenderConnection_AsyncGetSender_ProxyToResponder> proxy(
        new IntegerSenderConnection_AsyncGetSender_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&IntegerSenderConnection_AsyncGetSender_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IntegerSenderConnection_AsyncGetSender_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  IntegerSenderConnection_AsyncGetSender_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IntegerSenderConnection::AsyncGetSenderCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingAssociatedRemote<IntegerSender> in_sender);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnection_AsyncGetSender_ProxyToResponder);
};

bool IntegerSenderConnection_AsyncGetSender_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::IntegerSenderConnection::AsyncGetSenderCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::IntegerSenderConnection_AsyncGetSender_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IntegerSenderConnection_AsyncGetSender_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingAssociatedRemote<IntegerSender> p_sender{};
  IntegerSenderConnection_AsyncGetSender_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_sender =
        input_data_view.TakeSender<decltype(p_sender)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IntegerSenderConnection::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_sender));
  return true;
}

void IntegerSenderConnection_AsyncGetSender_ProxyToResponder::Run(
    ::mojo::PendingAssociatedRemote<IntegerSender> in_sender) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::IntegerSenderConnection::AsyncGetSenderCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sender"), in_sender, 
                        "<value of type ::mojo::PendingAssociatedRemote<IntegerSender>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnection_AsyncGetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnection_AsyncGetSender_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::IntegerSenderAssociatedPtrInfoDataView>(
      in_sender, &params->sender, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->sender),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid sender in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::IntegerSenderConnection::AsyncGetSenderCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnection::Name_);
  message.set_method_name("AsyncGetSender");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IntegerSenderConnectionStubDispatch::Accept(
    IntegerSenderConnection* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIntegerSenderConnection_GetSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSenderConnection::GetSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSenderConnection::GetSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::IntegerSenderConnection_GetSender_Params_Data* params =
          reinterpret_cast<internal::IntegerSenderConnection_GetSender_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<IntegerSender> p_receiver{};
      IntegerSenderConnection_GetSender_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSenderConnection::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSender(
std::move(p_receiver));
      return true;
    }
    case internal::kIntegerSenderConnection_AsyncGetSender_Name: {
      break;
    }
  }
  return false;
}

// static
bool IntegerSenderConnectionStubDispatch::AcceptWithResponder(
    IntegerSenderConnection* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kIntegerSenderConnection_GetSender_Name: {
      break;
    }
    case internal::kIntegerSenderConnection_AsyncGetSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSenderConnection::AsyncGetSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSenderConnection::AsyncGetSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::IntegerSenderConnection_AsyncGetSender_Params_Data* params =
          reinterpret_cast<
              internal::IntegerSenderConnection_AsyncGetSender_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      IntegerSenderConnection_AsyncGetSender_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSenderConnection::Name_, 1, false);
        return false;
      }
      IntegerSenderConnection::AsyncGetSenderCallback callback =
          IntegerSenderConnection_AsyncGetSender_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AsyncGetSender(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIntegerSenderConnectionValidationInfo[] = {
    {&internal::IntegerSenderConnection_GetSender_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IntegerSenderConnection_AsyncGetSender_Params_Data::Validate,
     &internal::IntegerSenderConnection_AsyncGetSender_ResponseParams_Data::Validate},
};

bool IntegerSenderConnectionRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSenderConnection::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIntegerSenderConnectionValidationInfo);
}

bool IntegerSenderConnectionResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSenderConnection::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIntegerSenderConnectionValidationInfo);
}
const char IntegerSenderConnectionAtBothEnds::Name_[] = "mojo.test.IntegerSenderConnectionAtBothEnds";

class IntegerSenderConnectionAtBothEnds_SetSender_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IntegerSenderConnectionAtBothEnds_SetSender_ForwardToCallback(
      IntegerSenderConnectionAtBothEnds::SetSenderCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  IntegerSenderConnectionAtBothEnds::SetSenderCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnectionAtBothEnds_SetSender_ForwardToCallback);
};

IntegerSenderConnectionAtBothEndsProxy::IntegerSenderConnectionAtBothEndsProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IntegerSenderConnectionAtBothEndsProxy::GetSender(
    ::mojo::PendingAssociatedReceiver<IntegerSender> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::IntegerSenderConnectionAtBothEnds::GetSender", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<IntegerSender>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnectionAtBothEnds_GetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnectionAtBothEnds_GetSender_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::IntegerSenderAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in IntegerSenderConnectionAtBothEnds.GetSender request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnectionAtBothEnds::Name_);
  message.set_method_name("GetSender");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void IntegerSenderConnectionAtBothEndsProxy::SetSender(
    ::mojo::PendingAssociatedRemote<IntegerSender> in_sender, SetSenderCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::IntegerSenderConnectionAtBothEnds::SetSender", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sender"), in_sender, 
                        "<value of type ::mojo::PendingAssociatedRemote<IntegerSender>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnectionAtBothEnds_SetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnectionAtBothEnds_SetSender_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::IntegerSenderAssociatedPtrInfoDataView>(
      in_sender, &params->sender, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->sender),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid sender in IntegerSenderConnectionAtBothEnds.SetSender request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnectionAtBothEnds::Name_);
  message.set_method_name("SetSender");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IntegerSenderConnectionAtBothEnds_SetSender_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder {
 public:
  static IntegerSenderConnectionAtBothEnds::SetSenderCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder> proxy(
        new IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IntegerSenderConnectionAtBothEnds::SetSenderCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int32_t in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder);
};

bool IntegerSenderConnectionAtBothEnds_SetSender_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::IntegerSenderConnectionAtBothEnds::SetSenderCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int32_t p_value{};
  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_value = input_data_view.value();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IntegerSenderConnectionAtBothEnds::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder::Run(
    int32_t in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::SetSenderCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type int32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kIntegerSenderConnectionAtBothEnds_SetSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->value = in_value;

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::SetSenderCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IntegerSenderConnectionAtBothEnds::Name_);
  message.set_method_name("SetSender");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IntegerSenderConnectionAtBothEndsStubDispatch::Accept(
    IntegerSenderConnectionAtBothEnds* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIntegerSenderConnectionAtBothEnds_GetSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::GetSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::GetSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::IntegerSenderConnectionAtBothEnds_GetSender_Params_Data* params =
          reinterpret_cast<internal::IntegerSenderConnectionAtBothEnds_GetSender_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<IntegerSender> p_receiver{};
      IntegerSenderConnectionAtBothEnds_GetSender_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSenderConnectionAtBothEnds::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSender(
std::move(p_receiver));
      return true;
    }
    case internal::kIntegerSenderConnectionAtBothEnds_SetSender_Name: {
      break;
    }
  }
  return false;
}

// static
bool IntegerSenderConnectionAtBothEndsStubDispatch::AcceptWithResponder(
    IntegerSenderConnectionAtBothEnds* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kIntegerSenderConnectionAtBothEnds_GetSender_Name: {
      break;
    }
    case internal::kIntegerSenderConnectionAtBothEnds_SetSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::SetSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::IntegerSenderConnectionAtBothEnds::SetSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::IntegerSenderConnectionAtBothEnds_SetSender_Params_Data* params =
          reinterpret_cast<
              internal::IntegerSenderConnectionAtBothEnds_SetSender_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedRemote<IntegerSender> p_sender{};
      IntegerSenderConnectionAtBothEnds_SetSender_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_sender =
            input_data_view.TakeSender<decltype(p_sender)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IntegerSenderConnectionAtBothEnds::Name_, 1, false);
        return false;
      }
      IntegerSenderConnectionAtBothEnds::SetSenderCallback callback =
          IntegerSenderConnectionAtBothEnds_SetSender_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetSender(
std::move(p_sender), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIntegerSenderConnectionAtBothEndsValidationInfo[] = {
    {&internal::IntegerSenderConnectionAtBothEnds_GetSender_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IntegerSenderConnectionAtBothEnds_SetSender_Params_Data::Validate,
     &internal::IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data::Validate},
};

bool IntegerSenderConnectionAtBothEndsRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSenderConnectionAtBothEnds::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIntegerSenderConnectionAtBothEndsValidationInfo);
}

bool IntegerSenderConnectionAtBothEndsResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::IntegerSenderConnectionAtBothEnds::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIntegerSenderConnectionAtBothEndsValidationInfo);
}
const char SenderConnection::Name_[] = "mojo.test.SenderConnection";

SenderConnectionProxy::SenderConnectionProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SenderConnectionProxy::GetIntegerSender(
    ::mojo::PendingAssociatedReceiver<IntegerSender> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::SenderConnection::GetIntegerSender", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<IntegerSender>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSenderConnection_GetIntegerSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::SenderConnection_GetIntegerSender_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::IntegerSenderAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in SenderConnection.GetIntegerSender request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SenderConnection::Name_);
  message.set_method_name("GetIntegerSender");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SenderConnectionProxy::GetStringSender(
    ::mojo::PendingAssociatedReceiver<StringSender> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::SenderConnection::GetStringSender", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<StringSender>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSenderConnection_GetStringSender_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::SenderConnection_GetStringSender_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::StringSenderAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in SenderConnection.GetStringSender request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SenderConnection::Name_);
  message.set_method_name("GetStringSender");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool SenderConnectionStubDispatch::Accept(
    SenderConnection* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSenderConnection_GetIntegerSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::SenderConnection::GetIntegerSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::SenderConnection::GetIntegerSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::SenderConnection_GetIntegerSender_Params_Data* params =
          reinterpret_cast<internal::SenderConnection_GetIntegerSender_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<IntegerSender> p_receiver{};
      SenderConnection_GetIntegerSender_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SenderConnection::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetIntegerSender(
std::move(p_receiver));
      return true;
    }
    case internal::kSenderConnection_GetStringSender_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::SenderConnection::GetStringSender",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::SenderConnection::GetStringSender");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::SenderConnection_GetStringSender_Params_Data* params =
          reinterpret_cast<internal::SenderConnection_GetStringSender_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<StringSender> p_receiver{};
      SenderConnection_GetStringSender_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SenderConnection::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetStringSender(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool SenderConnectionStubDispatch::AcceptWithResponder(
    SenderConnection* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kSenderConnection_GetIntegerSender_Name: {
      break;
    }
    case internal::kSenderConnection_GetStringSender_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSenderConnectionValidationInfo[] = {
    {&internal::SenderConnection_GetIntegerSender_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SenderConnection_GetStringSender_Params_Data::Validate,
     nullptr /* no response */},
};

bool SenderConnectionRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::SenderConnection::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSenderConnectionValidationInfo);
}

const char AssociatedPingProvider::Name_[] = "mojo.test.AssociatedPingProvider";

AssociatedPingProviderProxy::AssociatedPingProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AssociatedPingProviderProxy::GetPing(
    ::mojo::PendingAssociatedReceiver<::mojo::test::PingService> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::AssociatedPingProvider::GetPing", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<::mojo::test::PingService>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAssociatedPingProvider_GetPing_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::AssociatedPingProvider_GetPing_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::PingServiceAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in AssociatedPingProvider.GetPing request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AssociatedPingProvider::Name_);
  message.set_method_name("GetPing");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool AssociatedPingProviderStubDispatch::Accept(
    AssociatedPingProvider* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAssociatedPingProvider_GetPing_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::AssociatedPingProvider::GetPing",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::AssociatedPingProvider::GetPing");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::AssociatedPingProvider_GetPing_Params_Data* params =
          reinterpret_cast<internal::AssociatedPingProvider_GetPing_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<::mojo::test::PingService> p_receiver{};
      AssociatedPingProvider_GetPing_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AssociatedPingProvider::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetPing(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool AssociatedPingProviderStubDispatch::AcceptWithResponder(
    AssociatedPingProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kAssociatedPingProvider_GetPing_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAssociatedPingProviderValidationInfo[] = {
    {&internal::AssociatedPingProvider_GetPing_Params_Data::Validate,
     nullptr /* no response */},
};

bool AssociatedPingProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::AssociatedPingProvider::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAssociatedPingProviderValidationInfo);
}

const char AssociatedPingProviderProvider::Name_[] = "mojo.test.AssociatedPingProviderProvider";

AssociatedPingProviderProviderProxy::AssociatedPingProviderProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AssociatedPingProviderProviderProxy::GetPingProvider(
    ::mojo::PendingAssociatedReceiver<AssociatedPingProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::AssociatedPingProviderProvider::GetPingProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<AssociatedPingProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAssociatedPingProviderProvider_GetPingProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::internal::AssociatedPingProviderProvider_GetPingProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::AssociatedPingProviderAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in AssociatedPingProviderProvider.GetPingProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AssociatedPingProviderProvider::Name_);
  message.set_method_name("GetPingProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool AssociatedPingProviderProviderStubDispatch::Accept(
    AssociatedPingProviderProvider* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAssociatedPingProviderProvider_GetPingProvider_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::AssociatedPingProviderProvider::GetPingProvider",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::AssociatedPingProviderProvider::GetPingProvider");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::AssociatedPingProviderProvider_GetPingProvider_Params_Data* params =
          reinterpret_cast<internal::AssociatedPingProviderProvider_GetPingProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<AssociatedPingProvider> p_receiver{};
      AssociatedPingProviderProvider_GetPingProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AssociatedPingProviderProvider::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetPingProvider(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool AssociatedPingProviderProviderStubDispatch::AcceptWithResponder(
    AssociatedPingProviderProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kAssociatedPingProviderProvider_GetPingProvider_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAssociatedPingProviderProviderValidationInfo[] = {
    {&internal::AssociatedPingProviderProvider_GetPingProvider_Params_Data::Validate,
     nullptr /* no response */},
};

bool AssociatedPingProviderProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::AssociatedPingProviderProvider::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAssociatedPingProviderProviderValidationInfo);
}

}  // namespace test
}  // namespace mojo

namespace mojo {


// static
bool StructTraits<::mojo::test::StructContainsAssociated::DataView, ::mojo::test::StructContainsAssociatedPtr>::Read(
    ::mojo::test::StructContainsAssociated::DataView input,
    ::mojo::test::StructContainsAssociatedPtr* output) {
  bool success = true;
  ::mojo::test::StructContainsAssociatedPtr result(::mojo::test::StructContainsAssociated::New());
  
      if (success) {
        result->foo_remote =
            input.TakeFooRemote<decltype(result->foo_remote)>();
      }
      if (success) {
        result->foo_receiver =
            input.TakeFooReceiver<decltype(result->foo_receiver)>();
      }
      if (success && !input.ReadFooRemotes(&result->foo_remotes))
        success = false;
      if (success && !input.ReadFooReceivers(&result->foo_receivers))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::mojo::test::UnionContainsAssociated::DataView, ::mojo::test::UnionContainsAssociatedPtr>::Read(
    ::mojo::test::UnionContainsAssociated::DataView input,
    ::mojo::test::UnionContainsAssociatedPtr* output) {
  using UnionType = ::mojo::test::UnionContainsAssociated;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::FOO_REMOTE: {
      *output = UnionType::NewFooRemote(
          input.TakeFooRemote<::mojo::PendingAssociatedRemote<::mojo::test::FooInterface>>());
      break;
    }
    case Tag::FOO_RECEIVER: {
      *output = UnionType::NewFooReceiver(
          input.TakeFooReceiver<::mojo::PendingAssociatedReceiver<::mojo::test::FooInterface>>());
      break;
    }
    case Tag::FOO_REMOTES: {
      std::vector<::mojo::PendingAssociatedRemote<::mojo::test::FooInterface>> result_foo_remotes;
      if (!input.ReadFooRemotes(&result_foo_remotes))
        return false;

      *output = UnionType::NewFooRemotes(
          std::move(result_foo_remotes));
      break;
    }
    case Tag::FOO_RECEIVERS: {
      std::vector<::mojo::PendingAssociatedReceiver<::mojo::test::FooInterface>> result_foo_receivers;
      if (!input.ReadFooReceivers(&result_foo_receivers))
        return false;

      *output = UnionType::NewFooReceivers(
          std::move(result_foo_receivers));
      break;
    }
    default:
      return false;
  }
  return true;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif