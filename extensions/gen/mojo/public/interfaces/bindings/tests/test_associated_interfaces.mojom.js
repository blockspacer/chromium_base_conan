// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');
  var ping_service$ =
      mojo.internal.exposeNamespace('mojo.test');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/interfaces/bindings/tests/ping_service.mojom', 'ping_service.mojom.js');
  }



  function StructContainsAssociated(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructContainsAssociated.prototype.initDefaults_ = function() {
    this.fooRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.fooReceiver = new associatedBindings.AssociatedInterfaceRequest();
    this.fooRemotes = null;
    this.fooReceivers = null;
  };
  StructContainsAssociated.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructContainsAssociated.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructContainsAssociated.fooRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructContainsAssociated.fooReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructContainsAssociated.fooRemotes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.AssociatedInterfacePtrInfo, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructContainsAssociated.fooReceivers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 4, codec.AssociatedInterfaceRequest, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructContainsAssociated.encodedSize = codec.kStructHeaderSize + 32;

  StructContainsAssociated.decode = function(decoder) {
    var packed;
    var val = new StructContainsAssociated();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooRemote =
        decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    val.fooReceiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.fooRemotes =
        decoder.decodeArrayPointer(codec.AssociatedInterfacePtrInfo);
    val.fooReceivers =
        decoder.decodeArrayPointer(codec.AssociatedInterfaceRequest);
    return val;
  };

  StructContainsAssociated.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructContainsAssociated.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.fooRemote);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.fooReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.AssociatedInterfacePtrInfo, val.fooRemotes);
    encoder.encodeArrayPointer(codec.AssociatedInterfaceRequest, val.fooReceivers);
  };
  function InterfacePassesAssociated_PassFoo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassFoo_Params.prototype.initDefaults_ = function() {
    this.fooRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.fooReceiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  InterfacePassesAssociated_PassFoo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassFoo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassFoo_Params.fooRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassFoo_Params.fooReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassFoo_Params.encodedSize = codec.kStructHeaderSize + 16;

  InterfacePassesAssociated_PassFoo_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassFoo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.fooReceiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  InterfacePassesAssociated_PassFoo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassFoo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.fooRemote);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.fooReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function InterfacePassesAssociated_PassFoo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassFoo_ResponseParams.prototype.initDefaults_ = function() {
    this.fooRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.fooReceiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  InterfacePassesAssociated_PassFoo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassFoo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassFoo_ResponseParams.fooRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassFoo_ResponseParams.fooReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassFoo_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  InterfacePassesAssociated_PassFoo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassFoo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.fooReceiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  InterfacePassesAssociated_PassFoo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassFoo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.fooRemote);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.fooReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function InterfacePassesAssociated_PassStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassStruct_Params.prototype.initDefaults_ = function() {
    this.fooStruct = null;
  };
  InterfacePassesAssociated_PassStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassStruct_Params.fooStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructContainsAssociated, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  InterfacePassesAssociated_PassStruct_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooStruct =
        decoder.decodeStructPointer(StructContainsAssociated);
    return val;
  };

  InterfacePassesAssociated_PassStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructContainsAssociated, val.fooStruct);
  };
  function InterfacePassesAssociated_PassStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.fooStruct = null;
  };
  InterfacePassesAssociated_PassStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassStruct_ResponseParams.fooStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructContainsAssociated, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  InterfacePassesAssociated_PassStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooStruct =
        decoder.decodeStructPointer(StructContainsAssociated);
    return val;
  };

  InterfacePassesAssociated_PassStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructContainsAssociated, val.fooStruct);
  };
  function InterfacePassesAssociated_PassUnion_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassUnion_Params.prototype.initDefaults_ = function() {
    this.fooUnion = null;
  };
  InterfacePassesAssociated_PassUnion_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassUnion_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassUnion_Params.fooUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionContainsAssociated, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassUnion_Params.encodedSize = codec.kStructHeaderSize + 16;

  InterfacePassesAssociated_PassUnion_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassUnion_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooUnion =
        decoder.decodeStruct(UnionContainsAssociated);
    return val;
  };

  InterfacePassesAssociated_PassUnion_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassUnion_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionContainsAssociated, val.fooUnion);
  };
  function InterfacePassesAssociated_PassUnion_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassesAssociated_PassUnion_ResponseParams.prototype.initDefaults_ = function() {
    this.fooUnion = null;
  };
  InterfacePassesAssociated_PassUnion_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassesAssociated_PassUnion_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassesAssociated_PassUnion_ResponseParams.fooUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionContainsAssociated, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassesAssociated_PassUnion_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  InterfacePassesAssociated_PassUnion_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassesAssociated_PassUnion_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fooUnion =
        decoder.decodeStruct(UnionContainsAssociated);
    return val;
  };

  InterfacePassesAssociated_PassUnion_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassesAssociated_PassUnion_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionContainsAssociated, val.fooUnion);
  };
  function IntegerSender_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSender_Echo_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  IntegerSender_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSender_Echo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IntegerSender_Echo_Params.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSender_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSender_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSender_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSender_Echo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IntegerSender_Echo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSender_Echo_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  IntegerSender_Echo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSender_Echo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IntegerSender_Echo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSender_Echo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IntegerSender_Echo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSender_Echo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSender_Echo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IntegerSender_Send_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSender_Send_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  IntegerSender_Send_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSender_Send_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IntegerSender_Send_Params.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSender_Send_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSender_Send_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSender_Send_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSender_Send_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StringSender_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StringSender_Echo_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  StringSender_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StringSender_Echo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StringSender_Echo_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StringSender_Echo_Params.encodedSize = codec.kStructHeaderSize + 8;

  StringSender_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new StringSender_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  StringSender_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StringSender_Echo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function StringSender_Echo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StringSender_Echo_ResponseParams.prototype.initDefaults_ = function() {
    this.value = null;
  };
  StringSender_Echo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StringSender_Echo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StringSender_Echo_ResponseParams.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StringSender_Echo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  StringSender_Echo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StringSender_Echo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  StringSender_Echo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StringSender_Echo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function StringSender_Send_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StringSender_Send_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  StringSender_Send_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StringSender_Send_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StringSender_Send_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StringSender_Send_Params.encodedSize = codec.kStructHeaderSize + 8;

  StringSender_Send_Params.decode = function(decoder) {
    var packed;
    var val = new StringSender_Send_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  StringSender_Send_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StringSender_Send_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function IntegerSenderConnection_GetSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnection_GetSender_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  IntegerSenderConnection_GetSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnection_GetSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IntegerSenderConnection_GetSender_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IntegerSenderConnection_GetSender_Params.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSenderConnection_GetSender_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnection_GetSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSenderConnection_GetSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnection_GetSender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IntegerSenderConnection_AsyncGetSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnection_AsyncGetSender_Params.prototype.initDefaults_ = function() {
  };
  IntegerSenderConnection_AsyncGetSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnection_AsyncGetSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IntegerSenderConnection_AsyncGetSender_Params.encodedSize = codec.kStructHeaderSize + 0;

  IntegerSenderConnection_AsyncGetSender_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnection_AsyncGetSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  IntegerSenderConnection_AsyncGetSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnection_AsyncGetSender_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function IntegerSenderConnection_AsyncGetSender_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnection_AsyncGetSender_ResponseParams.prototype.initDefaults_ = function() {
    this.sender = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  IntegerSenderConnection_AsyncGetSender_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnection_AsyncGetSender_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IntegerSenderConnection_AsyncGetSender_ResponseParams.sender
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IntegerSenderConnection_AsyncGetSender_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSenderConnection_AsyncGetSender_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnection_AsyncGetSender_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sender =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  IntegerSenderConnection_AsyncGetSender_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnection_AsyncGetSender_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.sender);
  };
  function IntegerSenderConnectionAtBothEnds_GetSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnectionAtBothEnds_GetSender_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  IntegerSenderConnectionAtBothEnds_GetSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnectionAtBothEnds_GetSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IntegerSenderConnectionAtBothEnds_GetSender_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IntegerSenderConnectionAtBothEnds_GetSender_Params.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSenderConnectionAtBothEnds_GetSender_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnectionAtBothEnds_GetSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSenderConnectionAtBothEnds_GetSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnectionAtBothEnds_GetSender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IntegerSenderConnectionAtBothEnds_SetSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnectionAtBothEnds_SetSender_Params.prototype.initDefaults_ = function() {
    this.sender = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  IntegerSenderConnectionAtBothEnds_SetSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnectionAtBothEnds_SetSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IntegerSenderConnectionAtBothEnds_SetSender_Params.sender
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IntegerSenderConnectionAtBothEnds_SetSender_Params.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSenderConnectionAtBothEnds_SetSender_Params.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnectionAtBothEnds_SetSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sender =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  IntegerSenderConnectionAtBothEnds_SetSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnectionAtBothEnds_SetSender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.sender);
  };
  function IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SenderConnection_GetIntegerSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SenderConnection_GetIntegerSender_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  SenderConnection_GetIntegerSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SenderConnection_GetIntegerSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SenderConnection_GetIntegerSender_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SenderConnection_GetIntegerSender_Params.encodedSize = codec.kStructHeaderSize + 8;

  SenderConnection_GetIntegerSender_Params.decode = function(decoder) {
    var packed;
    var val = new SenderConnection_GetIntegerSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SenderConnection_GetIntegerSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SenderConnection_GetIntegerSender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SenderConnection_GetStringSender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SenderConnection_GetStringSender_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  SenderConnection_GetStringSender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SenderConnection_GetStringSender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SenderConnection_GetStringSender_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SenderConnection_GetStringSender_Params.encodedSize = codec.kStructHeaderSize + 8;

  SenderConnection_GetStringSender_Params.decode = function(decoder) {
    var packed;
    var val = new SenderConnection_GetStringSender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SenderConnection_GetStringSender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SenderConnection_GetStringSender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AssociatedPingProvider_GetPing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedPingProvider_GetPing_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  AssociatedPingProvider_GetPing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedPingProvider_GetPing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedPingProvider_GetPing_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedPingProvider_GetPing_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedPingProvider_GetPing_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedPingProvider_GetPing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AssociatedPingProvider_GetPing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedPingProvider_GetPing_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AssociatedPingProviderProvider_GetPingProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedPingProviderProvider_GetPingProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  AssociatedPingProviderProvider_GetPingProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedPingProviderProvider_GetPingProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedPingProviderProvider_GetPingProvider_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedPingProviderProvider_GetPingProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedPingProviderProvider_GetPingProvider_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedPingProviderProvider_GetPingProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AssociatedPingProviderProvider_GetPingProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedPingProviderProvider_GetPingProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function UnionContainsAssociated(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  UnionContainsAssociated.Tags = {
    fooRemote: 0,
    fooReceiver: 1,
    fooRemotes: 2,
    fooReceivers: 3,
  };

  UnionContainsAssociated.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  UnionContainsAssociated.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fooRemote",
        "fooReceiver",
        "fooRemotes",
        "fooReceivers",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a UnionContainsAssociated member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(UnionContainsAssociated.prototype, "fooRemote", {
    get: function() {
      if (this.$tag != UnionContainsAssociated.Tags.fooRemote) {
        throw new ReferenceError(
            "UnionContainsAssociated.fooRemote is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionContainsAssociated.Tags.fooRemote;
      this.$data = value;
    }
  });
  Object.defineProperty(UnionContainsAssociated.prototype, "fooReceiver", {
    get: function() {
      if (this.$tag != UnionContainsAssociated.Tags.fooReceiver) {
        throw new ReferenceError(
            "UnionContainsAssociated.fooReceiver is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionContainsAssociated.Tags.fooReceiver;
      this.$data = value;
    }
  });
  Object.defineProperty(UnionContainsAssociated.prototype, "fooRemotes", {
    get: function() {
      if (this.$tag != UnionContainsAssociated.Tags.fooRemotes) {
        throw new ReferenceError(
            "UnionContainsAssociated.fooRemotes is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionContainsAssociated.Tags.fooRemotes;
      this.$data = value;
    }
  });
  Object.defineProperty(UnionContainsAssociated.prototype, "fooReceivers", {
    get: function() {
      if (this.$tag != UnionContainsAssociated.Tags.fooReceivers) {
        throw new ReferenceError(
            "UnionContainsAssociated.fooReceivers is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionContainsAssociated.Tags.fooReceivers;
      this.$data = value;
    }
  });


    UnionContainsAssociated.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case UnionContainsAssociated.Tags.fooRemote:
          encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.fooRemote);
          break;
        case UnionContainsAssociated.Tags.fooReceiver:
          encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.fooReceiver);
          break;
        case UnionContainsAssociated.Tags.fooRemotes:
          encoder.encodeArrayPointer(codec.AssociatedInterfacePtrInfo, val.fooRemotes);
          break;
        case UnionContainsAssociated.Tags.fooReceivers:
          encoder.encodeArrayPointer(codec.AssociatedInterfaceRequest, val.fooReceivers);
          break;
      }
      encoder.align();
    };


    UnionContainsAssociated.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new UnionContainsAssociated();
      var tag = decoder.readUint32();
      switch (tag) {
        case UnionContainsAssociated.Tags.fooRemote:
          result.fooRemote = decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
          break;
        case UnionContainsAssociated.Tags.fooReceiver:
          result.fooReceiver = decoder.decodeStruct(codec.AssociatedInterfaceRequest);
          break;
        case UnionContainsAssociated.Tags.fooRemotes:
          result.fooRemotes = decoder.decodeArrayPointer(codec.AssociatedInterfacePtrInfo);
          break;
        case UnionContainsAssociated.Tags.fooReceivers:
          result.fooReceivers = decoder.decodeArrayPointer(codec.AssociatedInterfaceRequest);
          break;
      }
      decoder.align();

      return result;
    };


    UnionContainsAssociated.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case UnionContainsAssociated.Tags.fooRemote:
          

    // validate UnionContainsAssociated.fooRemote
    err = messageValidator.validateAssociatedInterface(data_offset, true);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case UnionContainsAssociated.Tags.fooReceiver:
          

    // validate UnionContainsAssociated.fooReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case UnionContainsAssociated.Tags.fooRemotes:
          

    // validate UnionContainsAssociated.fooRemotes
    err = messageValidator.validateArrayPointer(data_offset, 8, codec.AssociatedInterfacePtrInfo, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case UnionContainsAssociated.Tags.fooReceivers:
          

    // validate UnionContainsAssociated.fooReceivers
    err = messageValidator.validateArrayPointer(data_offset, 4, codec.AssociatedInterfaceRequest, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  UnionContainsAssociated.encodedSize = 16;

  function FooInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FooInterface,
                                                   handleOrPtrInfo);
  }

  function FooInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FooInterface, associatedInterfacePtrInfo);
  }

  FooInterfaceAssociatedPtr.prototype =
      Object.create(FooInterfacePtr.prototype);
  FooInterfaceAssociatedPtr.prototype.constructor =
      FooInterfaceAssociatedPtr;

  function FooInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }

  function FooInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }

  FooInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FooInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFooInterfaceRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateFooInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FooInterface = {
    name: 'mojo.test.FooInterface',
    kVersion: 0,
    ptrClass: FooInterfacePtr,
    proxyClass: FooInterfaceProxy,
    stubClass: FooInterfaceStub,
    validateRequest: validateFooInterfaceRequest,
    validateResponse: null,
  };
  FooInterfaceStub.prototype.validator = validateFooInterfaceRequest;
  FooInterfaceProxy.prototype.validator = null;
  var kInterfacePassesAssociated_PassFoo_Name = 0;
  var kInterfacePassesAssociated_PassStruct_Name = 1;
  var kInterfacePassesAssociated_PassUnion_Name = 2;

  function InterfacePassesAssociatedPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfacePassesAssociated,
                                                   handleOrPtrInfo);
  }

  function InterfacePassesAssociatedAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfacePassesAssociated, associatedInterfacePtrInfo);
  }

  InterfacePassesAssociatedAssociatedPtr.prototype =
      Object.create(InterfacePassesAssociatedPtr.prototype);
  InterfacePassesAssociatedAssociatedPtr.prototype.constructor =
      InterfacePassesAssociatedAssociatedPtr;

  function InterfacePassesAssociatedProxy(receiver) {
    this.receiver_ = receiver;
  }
  InterfacePassesAssociatedPtr.prototype.passFoo = function() {
    return InterfacePassesAssociatedProxy.prototype.passFoo
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassesAssociatedProxy.prototype.passFoo = function(fooRemote, fooReceiver) {
    var params_ = new InterfacePassesAssociated_PassFoo_Params();
    params_.fooRemote = fooRemote;
    params_.fooReceiver = fooReceiver;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kInterfacePassesAssociated_PassFoo_Name,
          codec.align(InterfacePassesAssociated_PassFoo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(InterfacePassesAssociated_PassFoo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassesAssociated_PassFoo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfacePassesAssociatedPtr.prototype.passStruct = function() {
    return InterfacePassesAssociatedProxy.prototype.passStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassesAssociatedProxy.prototype.passStruct = function(fooStruct) {
    var params_ = new InterfacePassesAssociated_PassStruct_Params();
    params_.fooStruct = fooStruct;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kInterfacePassesAssociated_PassStruct_Name,
          codec.align(InterfacePassesAssociated_PassStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(InterfacePassesAssociated_PassStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassesAssociated_PassStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfacePassesAssociatedPtr.prototype.passUnion = function() {
    return InterfacePassesAssociatedProxy.prototype.passUnion
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassesAssociatedProxy.prototype.passUnion = function(fooUnion) {
    var params_ = new InterfacePassesAssociated_PassUnion_Params();
    params_.fooUnion = fooUnion;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kInterfacePassesAssociated_PassUnion_Name,
          codec.align(InterfacePassesAssociated_PassUnion_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(InterfacePassesAssociated_PassUnion_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassesAssociated_PassUnion_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function InterfacePassesAssociatedStub(delegate) {
    this.delegate_ = delegate;
  }
  InterfacePassesAssociatedStub.prototype.passFoo = function(fooRemote, fooReceiver) {
    return this.delegate_ && this.delegate_.passFoo && this.delegate_.passFoo(fooRemote, fooReceiver);
  }
  InterfacePassesAssociatedStub.prototype.passStruct = function(fooStruct) {
    return this.delegate_ && this.delegate_.passStruct && this.delegate_.passStruct(fooStruct);
  }
  InterfacePassesAssociatedStub.prototype.passUnion = function(fooUnion) {
    return this.delegate_ && this.delegate_.passUnion && this.delegate_.passUnion(fooUnion);
  }

  InterfacePassesAssociatedStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InterfacePassesAssociatedStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterfacePassesAssociated_PassFoo_Name:
      var params = reader.decodeStruct(InterfacePassesAssociated_PassFoo_Params);
      this.passFoo(params.fooRemote, params.fooReceiver).then(function(response) {
        var responseParams =
            new InterfacePassesAssociated_PassFoo_ResponseParams();
        responseParams.fooRemote = response.fooRemote;
        responseParams.fooReceiver = response.fooReceiver;
        var builder = new codec.MessageV2Builder(
            kInterfacePassesAssociated_PassFoo_Name,
            codec.align(InterfacePassesAssociated_PassFoo_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(InterfacePassesAssociated_PassFoo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfacePassesAssociated_PassStruct_Name:
      var params = reader.decodeStruct(InterfacePassesAssociated_PassStruct_Params);
      this.passStruct(params.fooStruct).then(function(response) {
        var responseParams =
            new InterfacePassesAssociated_PassStruct_ResponseParams();
        responseParams.fooStruct = response.fooStruct;
        var builder = new codec.MessageV2Builder(
            kInterfacePassesAssociated_PassStruct_Name,
            codec.align(InterfacePassesAssociated_PassStruct_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(InterfacePassesAssociated_PassStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfacePassesAssociated_PassUnion_Name:
      var params = reader.decodeStruct(InterfacePassesAssociated_PassUnion_Params);
      this.passUnion(params.fooUnion).then(function(response) {
        var responseParams =
            new InterfacePassesAssociated_PassUnion_ResponseParams();
        responseParams.fooUnion = response.fooUnion;
        var builder = new codec.MessageV2Builder(
            kInterfacePassesAssociated_PassUnion_Name,
            codec.align(InterfacePassesAssociated_PassUnion_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(InterfacePassesAssociated_PassUnion_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInterfacePassesAssociatedRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInterfacePassesAssociated_PassFoo_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassesAssociated_PassFoo_Params;
      break;
      case kInterfacePassesAssociated_PassStruct_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassesAssociated_PassStruct_Params;
      break;
      case kInterfacePassesAssociated_PassUnion_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassesAssociated_PassUnion_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInterfacePassesAssociatedResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInterfacePassesAssociated_PassFoo_Name:
        if (message.isResponse())
          paramsClass = InterfacePassesAssociated_PassFoo_ResponseParams;
        break;
      case kInterfacePassesAssociated_PassStruct_Name:
        if (message.isResponse())
          paramsClass = InterfacePassesAssociated_PassStruct_ResponseParams;
        break;
      case kInterfacePassesAssociated_PassUnion_Name:
        if (message.isResponse())
          paramsClass = InterfacePassesAssociated_PassUnion_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var InterfacePassesAssociated = {
    name: 'mojo.test.InterfacePassesAssociated',
    kVersion: 0,
    ptrClass: InterfacePassesAssociatedPtr,
    proxyClass: InterfacePassesAssociatedProxy,
    stubClass: InterfacePassesAssociatedStub,
    validateRequest: validateInterfacePassesAssociatedRequest,
    validateResponse: validateInterfacePassesAssociatedResponse,
  };
  InterfacePassesAssociatedStub.prototype.validator = validateInterfacePassesAssociatedRequest;
  InterfacePassesAssociatedProxy.prototype.validator = validateInterfacePassesAssociatedResponse;
  var kIntegerSender_Echo_Name = 0;
  var kIntegerSender_Send_Name = 1;

  function IntegerSenderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IntegerSender,
                                                   handleOrPtrInfo);
  }

  function IntegerSenderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IntegerSender, associatedInterfacePtrInfo);
  }

  IntegerSenderAssociatedPtr.prototype =
      Object.create(IntegerSenderPtr.prototype);
  IntegerSenderAssociatedPtr.prototype.constructor =
      IntegerSenderAssociatedPtr;

  function IntegerSenderProxy(receiver) {
    this.receiver_ = receiver;
  }
  IntegerSenderPtr.prototype.echo = function() {
    return IntegerSenderProxy.prototype.echo
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderProxy.prototype.echo = function(value) {
    var params_ = new IntegerSender_Echo_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kIntegerSender_Echo_Name,
          codec.align(IntegerSender_Echo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(IntegerSender_Echo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IntegerSender_Echo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  IntegerSenderPtr.prototype.send = function() {
    return IntegerSenderProxy.prototype.send
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderProxy.prototype.send = function(value) {
    var params_ = new IntegerSender_Send_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kIntegerSender_Send_Name,
        codec.align(IntegerSender_Send_Params.encodedSize));
    builder.encodeStruct(IntegerSender_Send_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function IntegerSenderStub(delegate) {
    this.delegate_ = delegate;
  }
  IntegerSenderStub.prototype.echo = function(value) {
    return this.delegate_ && this.delegate_.echo && this.delegate_.echo(value);
  }
  IntegerSenderStub.prototype.send = function(value) {
    return this.delegate_ && this.delegate_.send && this.delegate_.send(value);
  }

  IntegerSenderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSender_Send_Name:
      var params = reader.decodeStruct(IntegerSender_Send_Params);
      this.send(params.value);
      return true;
    default:
      return false;
    }
  };

  IntegerSenderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSender_Echo_Name:
      var params = reader.decodeStruct(IntegerSender_Echo_Params);
      this.echo(params.value).then(function(response) {
        var responseParams =
            new IntegerSender_Echo_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kIntegerSender_Echo_Name,
            codec.align(IntegerSender_Echo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(IntegerSender_Echo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateIntegerSenderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIntegerSender_Echo_Name:
        if (message.expectsResponse())
          paramsClass = IntegerSender_Echo_Params;
      break;
      case kIntegerSender_Send_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IntegerSender_Send_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIntegerSenderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kIntegerSender_Echo_Name:
        if (message.isResponse())
          paramsClass = IntegerSender_Echo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var IntegerSender = {
    name: 'mojo.test.IntegerSender',
    kVersion: 0,
    ptrClass: IntegerSenderPtr,
    proxyClass: IntegerSenderProxy,
    stubClass: IntegerSenderStub,
    validateRequest: validateIntegerSenderRequest,
    validateResponse: validateIntegerSenderResponse,
  };
  IntegerSenderStub.prototype.validator = validateIntegerSenderRequest;
  IntegerSenderProxy.prototype.validator = validateIntegerSenderResponse;
  var kStringSender_Echo_Name = 0;
  var kStringSender_Send_Name = 1;

  function StringSenderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StringSender,
                                                   handleOrPtrInfo);
  }

  function StringSenderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StringSender, associatedInterfacePtrInfo);
  }

  StringSenderAssociatedPtr.prototype =
      Object.create(StringSenderPtr.prototype);
  StringSenderAssociatedPtr.prototype.constructor =
      StringSenderAssociatedPtr;

  function StringSenderProxy(receiver) {
    this.receiver_ = receiver;
  }
  StringSenderPtr.prototype.echo = function() {
    return StringSenderProxy.prototype.echo
        .apply(this.ptr.getProxy(), arguments);
  };

  StringSenderProxy.prototype.echo = function(value) {
    var params_ = new StringSender_Echo_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStringSender_Echo_Name,
          codec.align(StringSender_Echo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StringSender_Echo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StringSender_Echo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StringSenderPtr.prototype.send = function() {
    return StringSenderProxy.prototype.send
        .apply(this.ptr.getProxy(), arguments);
  };

  StringSenderProxy.prototype.send = function(value) {
    var params_ = new StringSender_Send_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kStringSender_Send_Name,
        codec.align(StringSender_Send_Params.encodedSize));
    builder.encodeStruct(StringSender_Send_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function StringSenderStub(delegate) {
    this.delegate_ = delegate;
  }
  StringSenderStub.prototype.echo = function(value) {
    return this.delegate_ && this.delegate_.echo && this.delegate_.echo(value);
  }
  StringSenderStub.prototype.send = function(value) {
    return this.delegate_ && this.delegate_.send && this.delegate_.send(value);
  }

  StringSenderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStringSender_Send_Name:
      var params = reader.decodeStruct(StringSender_Send_Params);
      this.send(params.value);
      return true;
    default:
      return false;
    }
  };

  StringSenderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStringSender_Echo_Name:
      var params = reader.decodeStruct(StringSender_Echo_Params);
      this.echo(params.value).then(function(response) {
        var responseParams =
            new StringSender_Echo_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kStringSender_Echo_Name,
            codec.align(StringSender_Echo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StringSender_Echo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateStringSenderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStringSender_Echo_Name:
        if (message.expectsResponse())
          paramsClass = StringSender_Echo_Params;
      break;
      case kStringSender_Send_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = StringSender_Send_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStringSenderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kStringSender_Echo_Name:
        if (message.isResponse())
          paramsClass = StringSender_Echo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var StringSender = {
    name: 'mojo.test.StringSender',
    kVersion: 0,
    ptrClass: StringSenderPtr,
    proxyClass: StringSenderProxy,
    stubClass: StringSenderStub,
    validateRequest: validateStringSenderRequest,
    validateResponse: validateStringSenderResponse,
  };
  StringSenderStub.prototype.validator = validateStringSenderRequest;
  StringSenderProxy.prototype.validator = validateStringSenderResponse;
  var kIntegerSenderConnection_GetSender_Name = 0;
  var kIntegerSenderConnection_AsyncGetSender_Name = 1;

  function IntegerSenderConnectionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IntegerSenderConnection,
                                                   handleOrPtrInfo);
  }

  function IntegerSenderConnectionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IntegerSenderConnection, associatedInterfacePtrInfo);
  }

  IntegerSenderConnectionAssociatedPtr.prototype =
      Object.create(IntegerSenderConnectionPtr.prototype);
  IntegerSenderConnectionAssociatedPtr.prototype.constructor =
      IntegerSenderConnectionAssociatedPtr;

  function IntegerSenderConnectionProxy(receiver) {
    this.receiver_ = receiver;
  }
  IntegerSenderConnectionPtr.prototype.getSender = function() {
    return IntegerSenderConnectionProxy.prototype.getSender
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderConnectionProxy.prototype.getSender = function(receiver) {
    var params_ = new IntegerSenderConnection_GetSender_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kIntegerSenderConnection_GetSender_Name,
        codec.align(IntegerSenderConnection_GetSender_Params.encodedSize));
    builder.setPayload(IntegerSenderConnection_GetSender_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  IntegerSenderConnectionPtr.prototype.asyncGetSender = function() {
    return IntegerSenderConnectionProxy.prototype.asyncGetSender
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderConnectionProxy.prototype.asyncGetSender = function() {
    var params_ = new IntegerSenderConnection_AsyncGetSender_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kIntegerSenderConnection_AsyncGetSender_Name,
          codec.align(IntegerSenderConnection_AsyncGetSender_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(IntegerSenderConnection_AsyncGetSender_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IntegerSenderConnection_AsyncGetSender_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function IntegerSenderConnectionStub(delegate) {
    this.delegate_ = delegate;
  }
  IntegerSenderConnectionStub.prototype.getSender = function(receiver) {
    return this.delegate_ && this.delegate_.getSender && this.delegate_.getSender(receiver);
  }
  IntegerSenderConnectionStub.prototype.asyncGetSender = function() {
    return this.delegate_ && this.delegate_.asyncGetSender && this.delegate_.asyncGetSender();
  }

  IntegerSenderConnectionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSenderConnection_GetSender_Name:
      var params = reader.decodeStruct(IntegerSenderConnection_GetSender_Params);
      this.getSender(params.receiver);
      return true;
    default:
      return false;
    }
  };

  IntegerSenderConnectionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSenderConnection_AsyncGetSender_Name:
      var params = reader.decodeStruct(IntegerSenderConnection_AsyncGetSender_Params);
      this.asyncGetSender().then(function(response) {
        var responseParams =
            new IntegerSenderConnection_AsyncGetSender_ResponseParams();
        responseParams.sender = response.sender;
        var builder = new codec.MessageV2Builder(
            kIntegerSenderConnection_AsyncGetSender_Name,
            codec.align(IntegerSenderConnection_AsyncGetSender_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(IntegerSenderConnection_AsyncGetSender_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateIntegerSenderConnectionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIntegerSenderConnection_GetSender_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IntegerSenderConnection_GetSender_Params;
      break;
      case kIntegerSenderConnection_AsyncGetSender_Name:
        if (message.expectsResponse())
          paramsClass = IntegerSenderConnection_AsyncGetSender_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIntegerSenderConnectionResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kIntegerSenderConnection_AsyncGetSender_Name:
        if (message.isResponse())
          paramsClass = IntegerSenderConnection_AsyncGetSender_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var IntegerSenderConnection = {
    name: 'mojo.test.IntegerSenderConnection',
    kVersion: 0,
    ptrClass: IntegerSenderConnectionPtr,
    proxyClass: IntegerSenderConnectionProxy,
    stubClass: IntegerSenderConnectionStub,
    validateRequest: validateIntegerSenderConnectionRequest,
    validateResponse: validateIntegerSenderConnectionResponse,
  };
  IntegerSenderConnectionStub.prototype.validator = validateIntegerSenderConnectionRequest;
  IntegerSenderConnectionProxy.prototype.validator = validateIntegerSenderConnectionResponse;
  var kIntegerSenderConnectionAtBothEnds_GetSender_Name = 0;
  var kIntegerSenderConnectionAtBothEnds_SetSender_Name = 1;

  function IntegerSenderConnectionAtBothEndsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IntegerSenderConnectionAtBothEnds,
                                                   handleOrPtrInfo);
  }

  function IntegerSenderConnectionAtBothEndsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IntegerSenderConnectionAtBothEnds, associatedInterfacePtrInfo);
  }

  IntegerSenderConnectionAtBothEndsAssociatedPtr.prototype =
      Object.create(IntegerSenderConnectionAtBothEndsPtr.prototype);
  IntegerSenderConnectionAtBothEndsAssociatedPtr.prototype.constructor =
      IntegerSenderConnectionAtBothEndsAssociatedPtr;

  function IntegerSenderConnectionAtBothEndsProxy(receiver) {
    this.receiver_ = receiver;
  }
  IntegerSenderConnectionAtBothEndsPtr.prototype.getSender = function() {
    return IntegerSenderConnectionAtBothEndsProxy.prototype.getSender
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderConnectionAtBothEndsProxy.prototype.getSender = function(receiver) {
    var params_ = new IntegerSenderConnectionAtBothEnds_GetSender_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kIntegerSenderConnectionAtBothEnds_GetSender_Name,
        codec.align(IntegerSenderConnectionAtBothEnds_GetSender_Params.encodedSize));
    builder.setPayload(IntegerSenderConnectionAtBothEnds_GetSender_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  IntegerSenderConnectionAtBothEndsPtr.prototype.setSender = function() {
    return IntegerSenderConnectionAtBothEndsProxy.prototype.setSender
        .apply(this.ptr.getProxy(), arguments);
  };

  IntegerSenderConnectionAtBothEndsProxy.prototype.setSender = function(sender) {
    var params_ = new IntegerSenderConnectionAtBothEnds_SetSender_Params();
    params_.sender = sender;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kIntegerSenderConnectionAtBothEnds_SetSender_Name,
          codec.align(IntegerSenderConnectionAtBothEnds_SetSender_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(IntegerSenderConnectionAtBothEnds_SetSender_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function IntegerSenderConnectionAtBothEndsStub(delegate) {
    this.delegate_ = delegate;
  }
  IntegerSenderConnectionAtBothEndsStub.prototype.getSender = function(receiver) {
    return this.delegate_ && this.delegate_.getSender && this.delegate_.getSender(receiver);
  }
  IntegerSenderConnectionAtBothEndsStub.prototype.setSender = function(sender) {
    return this.delegate_ && this.delegate_.setSender && this.delegate_.setSender(sender);
  }

  IntegerSenderConnectionAtBothEndsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSenderConnectionAtBothEnds_GetSender_Name:
      var params = reader.decodeStruct(IntegerSenderConnectionAtBothEnds_GetSender_Params);
      this.getSender(params.receiver);
      return true;
    default:
      return false;
    }
  };

  IntegerSenderConnectionAtBothEndsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIntegerSenderConnectionAtBothEnds_SetSender_Name:
      var params = reader.decodeStruct(IntegerSenderConnectionAtBothEnds_SetSender_Params);
      this.setSender(params.sender).then(function(response) {
        var responseParams =
            new IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV2Builder(
            kIntegerSenderConnectionAtBothEnds_SetSender_Name,
            codec.align(IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateIntegerSenderConnectionAtBothEndsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIntegerSenderConnectionAtBothEnds_GetSender_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IntegerSenderConnectionAtBothEnds_GetSender_Params;
      break;
      case kIntegerSenderConnectionAtBothEnds_SetSender_Name:
        if (message.expectsResponse())
          paramsClass = IntegerSenderConnectionAtBothEnds_SetSender_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIntegerSenderConnectionAtBothEndsResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kIntegerSenderConnectionAtBothEnds_SetSender_Name:
        if (message.isResponse())
          paramsClass = IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var IntegerSenderConnectionAtBothEnds = {
    name: 'mojo.test.IntegerSenderConnectionAtBothEnds',
    kVersion: 0,
    ptrClass: IntegerSenderConnectionAtBothEndsPtr,
    proxyClass: IntegerSenderConnectionAtBothEndsProxy,
    stubClass: IntegerSenderConnectionAtBothEndsStub,
    validateRequest: validateIntegerSenderConnectionAtBothEndsRequest,
    validateResponse: validateIntegerSenderConnectionAtBothEndsResponse,
  };
  IntegerSenderConnectionAtBothEndsStub.prototype.validator = validateIntegerSenderConnectionAtBothEndsRequest;
  IntegerSenderConnectionAtBothEndsProxy.prototype.validator = validateIntegerSenderConnectionAtBothEndsResponse;
  var kSenderConnection_GetIntegerSender_Name = 0;
  var kSenderConnection_GetStringSender_Name = 1;

  function SenderConnectionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SenderConnection,
                                                   handleOrPtrInfo);
  }

  function SenderConnectionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SenderConnection, associatedInterfacePtrInfo);
  }

  SenderConnectionAssociatedPtr.prototype =
      Object.create(SenderConnectionPtr.prototype);
  SenderConnectionAssociatedPtr.prototype.constructor =
      SenderConnectionAssociatedPtr;

  function SenderConnectionProxy(receiver) {
    this.receiver_ = receiver;
  }
  SenderConnectionPtr.prototype.getIntegerSender = function() {
    return SenderConnectionProxy.prototype.getIntegerSender
        .apply(this.ptr.getProxy(), arguments);
  };

  SenderConnectionProxy.prototype.getIntegerSender = function(receiver) {
    var params_ = new SenderConnection_GetIntegerSender_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kSenderConnection_GetIntegerSender_Name,
        codec.align(SenderConnection_GetIntegerSender_Params.encodedSize));
    builder.setPayload(SenderConnection_GetIntegerSender_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SenderConnectionPtr.prototype.getStringSender = function() {
    return SenderConnectionProxy.prototype.getStringSender
        .apply(this.ptr.getProxy(), arguments);
  };

  SenderConnectionProxy.prototype.getStringSender = function(receiver) {
    var params_ = new SenderConnection_GetStringSender_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kSenderConnection_GetStringSender_Name,
        codec.align(SenderConnection_GetStringSender_Params.encodedSize));
    builder.setPayload(SenderConnection_GetStringSender_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SenderConnectionStub(delegate) {
    this.delegate_ = delegate;
  }
  SenderConnectionStub.prototype.getIntegerSender = function(receiver) {
    return this.delegate_ && this.delegate_.getIntegerSender && this.delegate_.getIntegerSender(receiver);
  }
  SenderConnectionStub.prototype.getStringSender = function(receiver) {
    return this.delegate_ && this.delegate_.getStringSender && this.delegate_.getStringSender(receiver);
  }

  SenderConnectionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSenderConnection_GetIntegerSender_Name:
      var params = reader.decodeStruct(SenderConnection_GetIntegerSender_Params);
      this.getIntegerSender(params.receiver);
      return true;
    case kSenderConnection_GetStringSender_Name:
      var params = reader.decodeStruct(SenderConnection_GetStringSender_Params);
      this.getStringSender(params.receiver);
      return true;
    default:
      return false;
    }
  };

  SenderConnectionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSenderConnectionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSenderConnection_GetIntegerSender_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SenderConnection_GetIntegerSender_Params;
      break;
      case kSenderConnection_GetStringSender_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SenderConnection_GetStringSender_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSenderConnectionResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SenderConnection = {
    name: 'mojo.test.SenderConnection',
    kVersion: 0,
    ptrClass: SenderConnectionPtr,
    proxyClass: SenderConnectionProxy,
    stubClass: SenderConnectionStub,
    validateRequest: validateSenderConnectionRequest,
    validateResponse: null,
  };
  SenderConnectionStub.prototype.validator = validateSenderConnectionRequest;
  SenderConnectionProxy.prototype.validator = null;
  var kAssociatedPingProvider_GetPing_Name = 0;

  function AssociatedPingProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AssociatedPingProvider,
                                                   handleOrPtrInfo);
  }

  function AssociatedPingProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AssociatedPingProvider, associatedInterfacePtrInfo);
  }

  AssociatedPingProviderAssociatedPtr.prototype =
      Object.create(AssociatedPingProviderPtr.prototype);
  AssociatedPingProviderAssociatedPtr.prototype.constructor =
      AssociatedPingProviderAssociatedPtr;

  function AssociatedPingProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  AssociatedPingProviderPtr.prototype.getPing = function() {
    return AssociatedPingProviderProxy.prototype.getPing
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedPingProviderProxy.prototype.getPing = function(receiver) {
    var params_ = new AssociatedPingProvider_GetPing_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kAssociatedPingProvider_GetPing_Name,
        codec.align(AssociatedPingProvider_GetPing_Params.encodedSize));
    builder.setPayload(AssociatedPingProvider_GetPing_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AssociatedPingProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  AssociatedPingProviderStub.prototype.getPing = function(receiver) {
    return this.delegate_ && this.delegate_.getPing && this.delegate_.getPing(receiver);
  }

  AssociatedPingProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAssociatedPingProvider_GetPing_Name:
      var params = reader.decodeStruct(AssociatedPingProvider_GetPing_Params);
      this.getPing(params.receiver);
      return true;
    default:
      return false;
    }
  };

  AssociatedPingProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAssociatedPingProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAssociatedPingProvider_GetPing_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedPingProvider_GetPing_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAssociatedPingProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AssociatedPingProvider = {
    name: 'mojo.test.AssociatedPingProvider',
    kVersion: 0,
    ptrClass: AssociatedPingProviderPtr,
    proxyClass: AssociatedPingProviderProxy,
    stubClass: AssociatedPingProviderStub,
    validateRequest: validateAssociatedPingProviderRequest,
    validateResponse: null,
  };
  AssociatedPingProviderStub.prototype.validator = validateAssociatedPingProviderRequest;
  AssociatedPingProviderProxy.prototype.validator = null;
  var kAssociatedPingProviderProvider_GetPingProvider_Name = 0;

  function AssociatedPingProviderProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AssociatedPingProviderProvider,
                                                   handleOrPtrInfo);
  }

  function AssociatedPingProviderProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AssociatedPingProviderProvider, associatedInterfacePtrInfo);
  }

  AssociatedPingProviderProviderAssociatedPtr.prototype =
      Object.create(AssociatedPingProviderProviderPtr.prototype);
  AssociatedPingProviderProviderAssociatedPtr.prototype.constructor =
      AssociatedPingProviderProviderAssociatedPtr;

  function AssociatedPingProviderProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  AssociatedPingProviderProviderPtr.prototype.getPingProvider = function() {
    return AssociatedPingProviderProviderProxy.prototype.getPingProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedPingProviderProviderProxy.prototype.getPingProvider = function(receiver) {
    var params_ = new AssociatedPingProviderProvider_GetPingProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kAssociatedPingProviderProvider_GetPingProvider_Name,
        codec.align(AssociatedPingProviderProvider_GetPingProvider_Params.encodedSize));
    builder.setPayload(AssociatedPingProviderProvider_GetPingProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AssociatedPingProviderProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  AssociatedPingProviderProviderStub.prototype.getPingProvider = function(receiver) {
    return this.delegate_ && this.delegate_.getPingProvider && this.delegate_.getPingProvider(receiver);
  }

  AssociatedPingProviderProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAssociatedPingProviderProvider_GetPingProvider_Name:
      var params = reader.decodeStruct(AssociatedPingProviderProvider_GetPingProvider_Params);
      this.getPingProvider(params.receiver);
      return true;
    default:
      return false;
    }
  };

  AssociatedPingProviderProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAssociatedPingProviderProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAssociatedPingProviderProvider_GetPingProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedPingProviderProvider_GetPingProvider_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAssociatedPingProviderProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AssociatedPingProviderProvider = {
    name: 'mojo.test.AssociatedPingProviderProvider',
    kVersion: 0,
    ptrClass: AssociatedPingProviderProviderPtr,
    proxyClass: AssociatedPingProviderProviderProxy,
    stubClass: AssociatedPingProviderProviderStub,
    validateRequest: validateAssociatedPingProviderProviderRequest,
    validateResponse: null,
  };
  AssociatedPingProviderProviderStub.prototype.validator = validateAssociatedPingProviderProviderRequest;
  AssociatedPingProviderProviderProxy.prototype.validator = null;
  exports.StructContainsAssociated = StructContainsAssociated;
  exports.UnionContainsAssociated = UnionContainsAssociated;
  exports.FooInterface = FooInterface;
  exports.FooInterfacePtr = FooInterfacePtr;
  exports.FooInterfaceAssociatedPtr = FooInterfaceAssociatedPtr;
  exports.InterfacePassesAssociated = InterfacePassesAssociated;
  exports.InterfacePassesAssociatedPtr = InterfacePassesAssociatedPtr;
  exports.InterfacePassesAssociatedAssociatedPtr = InterfacePassesAssociatedAssociatedPtr;
  exports.IntegerSender = IntegerSender;
  exports.IntegerSenderPtr = IntegerSenderPtr;
  exports.IntegerSenderAssociatedPtr = IntegerSenderAssociatedPtr;
  exports.StringSender = StringSender;
  exports.StringSenderPtr = StringSenderPtr;
  exports.StringSenderAssociatedPtr = StringSenderAssociatedPtr;
  exports.IntegerSenderConnection = IntegerSenderConnection;
  exports.IntegerSenderConnectionPtr = IntegerSenderConnectionPtr;
  exports.IntegerSenderConnectionAssociatedPtr = IntegerSenderConnectionAssociatedPtr;
  exports.IntegerSenderConnectionAtBothEnds = IntegerSenderConnectionAtBothEnds;
  exports.IntegerSenderConnectionAtBothEndsPtr = IntegerSenderConnectionAtBothEndsPtr;
  exports.IntegerSenderConnectionAtBothEndsAssociatedPtr = IntegerSenderConnectionAtBothEndsAssociatedPtr;
  exports.SenderConnection = SenderConnection;
  exports.SenderConnectionPtr = SenderConnectionPtr;
  exports.SenderConnectionAssociatedPtr = SenderConnectionAssociatedPtr;
  exports.AssociatedPingProvider = AssociatedPingProvider;
  exports.AssociatedPingProviderPtr = AssociatedPingProviderPtr;
  exports.AssociatedPingProviderAssociatedPtr = AssociatedPingProviderAssociatedPtr;
  exports.AssociatedPingProviderProvider = AssociatedPingProviderProvider;
  exports.AssociatedPingProviderProviderPtr = AssociatedPingProviderProviderPtr;
  exports.AssociatedPingProviderProviderAssociatedPtr = AssociatedPingProviderProviderAssociatedPtr;
})();