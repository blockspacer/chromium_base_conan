// mojo/public/interfaces/bindings/tests/test_native_types.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/test_native_types.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/test_native_types.mojom-params-data.h"
namespace mojo {
namespace test {

namespace internal {


// static
bool PickleContainer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PickleContainer_Data* object = static_cast<const PickleContainer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->f_struct, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->f_struct, validation_context))
    return false;


  if (!::mojo::test::internal::PickledEnum_Data
        ::Validate(object->f_enum, validation_context))
    return false;

  return true;
}

PickleContainer_Data::PickleContainer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickledStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickledStruct_Params_Data* object = static_cast<const PicklePasser_PassPickledStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->pickle, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->pickle, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickledStruct_Params_Data::PicklePasser_PassPickledStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickledStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickledStruct_ResponseParams_Data* object = static_cast<const PicklePasser_PassPickledStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickledStruct_ResponseParams_Data::PicklePasser_PassPickledStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickledEnum_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickledEnum_Params_Data* object = static_cast<const PicklePasser_PassPickledEnum_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::PickledEnum_Data
        ::Validate(object->pickle, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickledEnum_Params_Data::PicklePasser_PassPickledEnum_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickledEnum_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickledEnum_ResponseParams_Data* object = static_cast<const PicklePasser_PassPickledEnum_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::PickledEnum_Data
        ::Validate(object->passed, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickledEnum_ResponseParams_Data::PicklePasser_PassPickledEnum_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickleContainer_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickleContainer_Params_Data* object = static_cast<const PicklePasser_PassPickleContainer_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->container, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->container, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickleContainer_Params_Data::PicklePasser_PassPickleContainer_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickleContainer_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickleContainer_ResponseParams_Data* object = static_cast<const PicklePasser_PassPickleContainer_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

PicklePasser_PassPickleContainer_ResponseParams_Data::PicklePasser_PassPickleContainer_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickles_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickles_Params_Data* object = static_cast<const PicklePasser_PassPickles_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->pickles, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams pickles_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->pickles, validation_context,
                                         &pickles_validate_params)) {
    return false;
  }

  return true;
}

PicklePasser_PassPickles_Params_Data::PicklePasser_PassPickles_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickles_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickles_ResponseParams_Data* object = static_cast<const PicklePasser_PassPickles_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams passed_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->passed, validation_context,
                                         &passed_validate_params)) {
    return false;
  }

  return true;
}

PicklePasser_PassPickles_ResponseParams_Data::PicklePasser_PassPickles_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickleArrays_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickleArrays_Params_Data* object = static_cast<const PicklePasser_PassPickleArrays_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->pickle_arrays, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams pickle_arrays_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->pickle_arrays, validation_context,
                                         &pickle_arrays_validate_params)) {
    return false;
  }

  return true;
}

PicklePasser_PassPickleArrays_Params_Data::PicklePasser_PassPickleArrays_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PicklePasser_PassPickleArrays_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PicklePasser_PassPickleArrays_ResponseParams_Data* object = static_cast<const PicklePasser_PassPickleArrays_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams passed_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->passed, validation_context,
                                         &passed_validate_params)) {
    return false;
  }

  return true;
}

PicklePasser_PassPickleArrays_ResponseParams_Data::PicklePasser_PassPickleArrays_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool RectService_AddRect_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectService_AddRect_Params_Data* object = static_cast<const RectService_AddRect_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->r, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->r, validation_context))
    return false;

  return true;
}

RectService_AddRect_Params_Data::RectService_AddRect_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool RectService_GetLargestRect_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectService_GetLargestRect_Params_Data* object = static_cast<const RectService_GetLargestRect_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

RectService_GetLargestRect_Params_Data::RectService_GetLargestRect_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool RectService_GetLargestRect_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectService_GetLargestRect_ResponseParams_Data* object = static_cast<const RectService_GetLargestRect_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->largest, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->largest, validation_context))
    return false;

  return true;
}

RectService_GetLargestRect_ResponseParams_Data::RectService_GetLargestRect_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool RectService_PassSharedRect_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectService_PassSharedRect_Params_Data* object = static_cast<const RectService_PassSharedRect_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->r, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->r, validation_context))
    return false;

  return true;
}

RectService_PassSharedRect_Params_Data::RectService_PassSharedRect_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool RectService_PassSharedRect_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectService_PassSharedRect_ResponseParams_Data* object = static_cast<const RectService_PassSharedRect_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

RectService_PassSharedRect_ResponseParams_Data::RectService_PassSharedRect_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NativeTypeTester_PassNativeStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeTypeTester_PassNativeStruct_Params_Data* object = static_cast<const NativeTypeTester_PassNativeStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

NativeTypeTester_PassNativeStruct_Params_Data::NativeTypeTester_PassNativeStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NativeTypeTester_PassNativeStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeTypeTester_PassNativeStruct_ResponseParams_Data* object = static_cast<const NativeTypeTester_PassNativeStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->passed, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->passed, validation_context))
    return false;

  return true;
}

NativeTypeTester_PassNativeStruct_ResponseParams_Data::NativeTypeTester_PassNativeStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NativeTypeTester_PassNativeStructWithAttachments_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeTypeTester_PassNativeStructWithAttachments_Params_Data* object = static_cast<const NativeTypeTester_PassNativeStructWithAttachments_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

NativeTypeTester_PassNativeStructWithAttachments_Params_Data::NativeTypeTester_PassNativeStructWithAttachments_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NativeTypeTester_PassNativeStructWithAttachments_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeTypeTester_PassNativeStructWithAttachments_ResponseParams_Data* object = static_cast<const NativeTypeTester_PassNativeStructWithAttachments_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

NativeTypeTester_PassNativeStructWithAttachments_ResponseParams_Data::NativeTypeTester_PassNativeStructWithAttachments_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace test
}  // namespace mojo
