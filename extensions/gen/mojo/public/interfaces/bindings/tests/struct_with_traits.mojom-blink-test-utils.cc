// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace blink {


void TraitsTestServiceInterceptorForTesting::EchoStructWithTraits(StructWithTraitsPtr s, EchoStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoTrivialStructWithTraits(TrivialStructWithTraitsPtr s, EchoTrivialStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoTrivialStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoMoveOnlyStructWithTraits(MoveOnlyStructWithTraitsPtr s, EchoMoveOnlyStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoMoveOnlyStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoNullableMoveOnlyStructWithTraits(MoveOnlyStructWithTraitsPtr s, EchoNullableMoveOnlyStructWithTraitsCallback callback) {
  GetForwardingInterface()->EchoNullableMoveOnlyStructWithTraits(std::move(s), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoEnumWithTraits(EnumWithTraits e, EchoEnumWithTraitsCallback callback) {
  GetForwardingInterface()->EchoEnumWithTraits(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoStructWithTraitsForUniquePtr(StructWithTraitsForUniquePtrPtr e, EchoStructWithTraitsForUniquePtrCallback callback) {
  GetForwardingInterface()->EchoStructWithTraitsForUniquePtr(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoNullableStructWithTraitsForUniquePtr(StructWithTraitsForUniquePtrPtr e, EchoNullableStructWithTraitsForUniquePtrCallback callback) {
  GetForwardingInterface()->EchoNullableStructWithTraitsForUniquePtr(std::move(e), std::move(callback));
}
void TraitsTestServiceInterceptorForTesting::EchoUnionWithTraits(UnionWithTraitsPtr u, EchoUnionWithTraitsCallback callback) {
  GetForwardingInterface()->EchoUnionWithTraits(std::move(u), std::move(callback));
}
TraitsTestServiceAsyncWaiter::TraitsTestServiceAsyncWaiter(
    TraitsTestService* proxy) : proxy_(proxy) {}

TraitsTestServiceAsyncWaiter::~TraitsTestServiceAsyncWaiter() = default;

void TraitsTestServiceAsyncWaiter::EchoStructWithTraits(
    StructWithTraitsPtr s, StructWithTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructWithTraitsPtr* out_passed
,
             StructWithTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoTrivialStructWithTraits(
    TrivialStructWithTraitsPtr s, TrivialStructWithTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoTrivialStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             TrivialStructWithTraitsPtr* out_passed
,
             TrivialStructWithTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoMoveOnlyStructWithTraits(
    MoveOnlyStructWithTraitsPtr s, MoveOnlyStructWithTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoMoveOnlyStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             MoveOnlyStructWithTraitsPtr* out_passed
,
             MoveOnlyStructWithTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoNullableMoveOnlyStructWithTraits(
    MoveOnlyStructWithTraitsPtr s, MoveOnlyStructWithTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoNullableMoveOnlyStructWithTraits(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             MoveOnlyStructWithTraitsPtr* out_passed
,
             MoveOnlyStructWithTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoEnumWithTraits(
    EnumWithTraits e, EnumWithTraits* out_passed) {
  base::RunLoop loop;
  proxy_->EchoEnumWithTraits(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             EnumWithTraits* out_passed
,
             EnumWithTraits passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoStructWithTraitsForUniquePtr(
    StructWithTraitsForUniquePtrPtr e, StructWithTraitsForUniquePtrPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoStructWithTraitsForUniquePtr(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructWithTraitsForUniquePtrPtr* out_passed
,
             StructWithTraitsForUniquePtrPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoNullableStructWithTraitsForUniquePtr(
    StructWithTraitsForUniquePtrPtr e, StructWithTraitsForUniquePtrPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoNullableStructWithTraitsForUniquePtr(std::move(e),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructWithTraitsForUniquePtrPtr* out_passed
,
             StructWithTraitsForUniquePtrPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void TraitsTestServiceAsyncWaiter::EchoUnionWithTraits(
    UnionWithTraitsPtr u, UnionWithTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->EchoUnionWithTraits(std::move(u),
      base::BindOnce(
          [](base::RunLoop* loop,
             UnionWithTraitsPtr* out_passed
,
             UnionWithTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}



void TestUnserializedStructInterceptorForTesting::PassUnserializedStruct(StructWithUnreachableTraitsPtr s, PassUnserializedStructCallback callback) {
  GetForwardingInterface()->PassUnserializedStruct(std::move(s), std::move(callback));
}
TestUnserializedStructAsyncWaiter::TestUnserializedStructAsyncWaiter(
    TestUnserializedStruct* proxy) : proxy_(proxy) {}

TestUnserializedStructAsyncWaiter::~TestUnserializedStructAsyncWaiter() = default;

void TestUnserializedStructAsyncWaiter::PassUnserializedStruct(
    StructWithUnreachableTraitsPtr s, StructWithUnreachableTraitsPtr* out_passed) {
  base::RunLoop loop;
  proxy_->PassUnserializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructWithUnreachableTraitsPtr* out_passed
,
             StructWithUnreachableTraitsPtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}



void ForceSerializeTesterInterceptorForTesting::SendForceSerializedStruct(StructForceSerializePtr s, SendForceSerializedStructCallback callback) {
  GetForwardingInterface()->SendForceSerializedStruct(std::move(s), std::move(callback));
}
void ForceSerializeTesterInterceptorForTesting::SendNestedForceSerializedStruct(StructNestedForceSerializePtr s, SendNestedForceSerializedStructCallback callback) {
  GetForwardingInterface()->SendNestedForceSerializedStruct(std::move(s), std::move(callback));
}
ForceSerializeTesterAsyncWaiter::ForceSerializeTesterAsyncWaiter(
    ForceSerializeTester* proxy) : proxy_(proxy) {}

ForceSerializeTesterAsyncWaiter::~ForceSerializeTesterAsyncWaiter() = default;

void ForceSerializeTesterAsyncWaiter::SendForceSerializedStruct(
    StructForceSerializePtr s, StructForceSerializePtr* out_passed) {
  base::RunLoop loop;
  proxy_->SendForceSerializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructForceSerializePtr* out_passed
,
             StructForceSerializePtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}
void ForceSerializeTesterAsyncWaiter::SendNestedForceSerializedStruct(
    StructNestedForceSerializePtr s, StructNestedForceSerializePtr* out_passed) {
  base::RunLoop loop;
  proxy_->SendNestedForceSerializedStruct(std::move(s),
      base::BindOnce(
          [](base::RunLoop* loop,
             StructNestedForceSerializePtr* out_passed
,
             StructNestedForceSerializePtr passed) {*out_passed = std::move(passed);
            loop->Quit();
          },
          &loop,
          out_passed));
  loop.Run();
}





}  // namespace blink
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif