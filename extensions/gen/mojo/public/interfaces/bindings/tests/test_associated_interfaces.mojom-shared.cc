// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-params-data.h"
namespace mojo {
namespace test {

namespace internal {
// static
bool UnionContainsAssociated_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const UnionContainsAssociated_Data* object = static_cast<const UnionContainsAssociated_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case UnionContainsAssociated_Tag::FOO_REMOTE: {

      if (!mojo::internal::ValidateHandleOrInterface(object->data.f_foo_remote,
                                                     validation_context)) {
        return false;
      }
      return true;
    }
    case UnionContainsAssociated_Tag::FOO_RECEIVER: {

      if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
              object->data.f_foo_receiver, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateHandleOrInterface(object->data.f_foo_receiver,
                                                     validation_context)) {
        return false;
      }
      return true;
    }
    case UnionContainsAssociated_Tag::FOO_REMOTES: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_foo_remotes, 3, validation_context)) {
        return false;
      }
      const mojo::internal::ContainerValidateParams foo_remotes_validate_params(
          0, false, nullptr);
      if (!mojo::internal::ValidateContainer(object->data.f_foo_remotes, validation_context,
                                             &foo_remotes_validate_params)) {
        return false;
      }
      return true;
    }
    case UnionContainsAssociated_Tag::FOO_RECEIVERS: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_foo_receivers, 4, validation_context)) {
        return false;
      }
      const mojo::internal::ContainerValidateParams foo_receivers_validate_params(
          0, false, nullptr);
      if (!mojo::internal::ValidateContainer(object->data.f_foo_receivers, validation_context,
                                             &foo_receivers_validate_params)) {
        return false;
      }
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in UnionContainsAssociated");
      return false;
    }
  }
}


// static
bool StructContainsAssociated_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructContainsAssociated_Data* object = static_cast<const StructContainsAssociated_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterface(object->foo_remote,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->foo_receiver, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->foo_receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->foo_remotes, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams foo_remotes_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->foo_remotes, validation_context,
                                         &foo_remotes_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->foo_receivers, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams foo_receivers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->foo_receivers, validation_context,
                                         &foo_receivers_validate_params)) {
    return false;
  }

  return true;
}

StructContainsAssociated_Data::StructContainsAssociated_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassFoo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassFoo_Params_Data* object = static_cast<const InterfacePassesAssociated_PassFoo_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->foo_remote, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->foo_remote,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->foo_receiver, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->foo_receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

InterfacePassesAssociated_PassFoo_Params_Data::InterfacePassesAssociated_PassFoo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassFoo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassFoo_ResponseParams_Data* object = static_cast<const InterfacePassesAssociated_PassFoo_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->foo_remote, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->foo_remote,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->foo_receiver, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->foo_receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

InterfacePassesAssociated_PassFoo_ResponseParams_Data::InterfacePassesAssociated_PassFoo_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassStruct_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassStruct_Params_Data* object = static_cast<const InterfacePassesAssociated_PassStruct_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->foo_struct, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->foo_struct, validation_context))
    return false;

  return true;
}

InterfacePassesAssociated_PassStruct_Params_Data::InterfacePassesAssociated_PassStruct_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassStruct_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassStruct_ResponseParams_Data* object = static_cast<const InterfacePassesAssociated_PassStruct_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->foo_struct, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->foo_struct, validation_context))
    return false;

  return true;
}

InterfacePassesAssociated_PassStruct_ResponseParams_Data::InterfacePassesAssociated_PassStruct_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassUnion_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassUnion_Params_Data* object = static_cast<const InterfacePassesAssociated_PassUnion_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->foo_union, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->foo_union, validation_context))
    return false;

  return true;
}

InterfacePassesAssociated_PassUnion_Params_Data::InterfacePassesAssociated_PassUnion_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassesAssociated_PassUnion_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassesAssociated_PassUnion_ResponseParams_Data* object = static_cast<const InterfacePassesAssociated_PassUnion_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->foo_union, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->foo_union, validation_context))
    return false;

  return true;
}

InterfacePassesAssociated_PassUnion_ResponseParams_Data::InterfacePassesAssociated_PassUnion_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSender_Echo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSender_Echo_Params_Data* object = static_cast<const IntegerSender_Echo_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

IntegerSender_Echo_Params_Data::IntegerSender_Echo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSender_Echo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSender_Echo_ResponseParams_Data* object = static_cast<const IntegerSender_Echo_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

IntegerSender_Echo_ResponseParams_Data::IntegerSender_Echo_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSender_Send_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSender_Send_Params_Data* object = static_cast<const IntegerSender_Send_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

IntegerSender_Send_Params_Data::IntegerSender_Send_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StringSender_Echo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StringSender_Echo_Params_Data* object = static_cast<const StringSender_Echo_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

StringSender_Echo_Params_Data::StringSender_Echo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StringSender_Echo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StringSender_Echo_ResponseParams_Data* object = static_cast<const StringSender_Echo_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

StringSender_Echo_ResponseParams_Data::StringSender_Echo_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StringSender_Send_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StringSender_Send_Params_Data* object = static_cast<const StringSender_Send_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

StringSender_Send_Params_Data::StringSender_Send_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnection_GetSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnection_GetSender_Params_Data* object = static_cast<const IntegerSenderConnection_GetSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IntegerSenderConnection_GetSender_Params_Data::IntegerSenderConnection_GetSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnection_AsyncGetSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnection_AsyncGetSender_Params_Data* object = static_cast<const IntegerSenderConnection_AsyncGetSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

IntegerSenderConnection_AsyncGetSender_Params_Data::IntegerSenderConnection_AsyncGetSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnection_AsyncGetSender_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnection_AsyncGetSender_ResponseParams_Data* object = static_cast<const IntegerSenderConnection_AsyncGetSender_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->sender, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->sender,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IntegerSenderConnection_AsyncGetSender_ResponseParams_Data::IntegerSenderConnection_AsyncGetSender_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnectionAtBothEnds_GetSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnectionAtBothEnds_GetSender_Params_Data* object = static_cast<const IntegerSenderConnectionAtBothEnds_GetSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IntegerSenderConnectionAtBothEnds_GetSender_Params_Data::IntegerSenderConnectionAtBothEnds_GetSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnectionAtBothEnds_SetSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnectionAtBothEnds_SetSender_Params_Data* object = static_cast<const IntegerSenderConnectionAtBothEnds_SetSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->sender, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->sender,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IntegerSenderConnectionAtBothEnds_SetSender_Params_Data::IntegerSenderConnectionAtBothEnds_SetSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data* object = static_cast<const IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data::IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SenderConnection_GetIntegerSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SenderConnection_GetIntegerSender_Params_Data* object = static_cast<const SenderConnection_GetIntegerSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

SenderConnection_GetIntegerSender_Params_Data::SenderConnection_GetIntegerSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SenderConnection_GetStringSender_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SenderConnection_GetStringSender_Params_Data* object = static_cast<const SenderConnection_GetStringSender_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

SenderConnection_GetStringSender_Params_Data::SenderConnection_GetStringSender_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AssociatedPingProvider_GetPing_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const AssociatedPingProvider_GetPing_Params_Data* object = static_cast<const AssociatedPingProvider_GetPing_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

AssociatedPingProvider_GetPing_Params_Data::AssociatedPingProvider_GetPing_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AssociatedPingProviderProvider_GetPingProvider_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const AssociatedPingProviderProvider_GetPingProvider_Params_Data* object = static_cast<const AssociatedPingProviderProvider_GetPingProvider_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

AssociatedPingProviderProvider_GetPingProvider_Params_Data::AssociatedPingProviderProvider_GetPingProvider_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace test
}  // namespace mojo
