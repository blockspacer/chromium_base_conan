// mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-params-data.h"
namespace mojo {
namespace test {

std::string EnumAToString(EnumA value) {
  switch(value) {
    case EnumA::ENUM_A_0:
      return "ENUM_A_0";
    case EnumA::ENUM_A_1:
      return "ENUM_A_1";
    default:
      return base::StringPrintf("Unknown EnumA value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, EnumA value) {
  return os << EnumAToString(value);
}

std::string EnumBToString(EnumB value) {
  switch(value) {
    case EnumB::ENUM_B_0:
      return "ENUM_B_0";
    case EnumB::ENUM_B_1:
      return "ENUM_B_1";
    case EnumB::ENUM_B_2:
      return "ENUM_B_2";
    default:
      return base::StringPrintf("Unknown EnumB value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, EnumB value) {
  return os << EnumBToString(value);
}

std::string EmptyEnumToString(EmptyEnum value) {
  return base::StringPrintf("Unknown EmptyEnum value: %i", static_cast<int32_t>(value));
}

std::ostream& operator<<(std::ostream& os, EmptyEnum value) {
  return os << EmptyEnumToString(value);
}

std::string ExtensibleEmptyEnumToString(ExtensibleEmptyEnum value) {
  return base::StringPrintf("Unknown ExtensibleEmptyEnum value: %i", static_cast<int32_t>(value));
}

std::ostream& operator<<(std::ostream& os, ExtensibleEmptyEnum value) {
  return os << ExtensibleEmptyEnumToString(value);
}

std::string BasicEnumToString(BasicEnum value) {
  switch(value) {
    case BasicEnum::D:
      return "D";
    case BasicEnum::A:
      return "{A, C}";
    case BasicEnum::B:
      return "B";
    case BasicEnum::E:
      return "E";
    default:
      return base::StringPrintf("Unknown BasicEnum value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, BasicEnum value) {
  return os << BasicEnumToString(value);
}

std::string StructWithEnum_EnumWithinToString(StructWithEnum_EnumWithin value) {
  switch(value) {
    case StructWithEnum_EnumWithin::A:
      return "A";
    case StructWithEnum_EnumWithin::B:
      return "B";
    case StructWithEnum_EnumWithin::C:
      return "C";
    case StructWithEnum_EnumWithin::D:
      return "D";
    default:
      return base::StringPrintf("Unknown StructWithEnum_EnumWithin value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, StructWithEnum_EnumWithin value) {
  return os << StructWithEnum_EnumWithinToString(value);
}

namespace internal {
// static
bool UnionA_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const UnionA_Data* object = static_cast<const UnionA_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case UnionA_Tag::STRUCT_A: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_struct_a, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_struct_a, validation_context))
        return false;
      return true;
    }
    case UnionA_Tag::B: {

      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in UnionA");
      return false;
    }
  }
}


// static
bool StructA_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructA_Data* object = static_cast<const StructA_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

StructA_Data::StructA_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructB_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructB_Data* object = static_cast<const StructB_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->struct_a, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->struct_a, validation_context))
    return false;

  return true;
}

StructB_Data::StructB_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructC_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructC_Data* object = static_cast<const StructC_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  return true;
}

StructC_Data::StructC_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructD_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructD_Data* object = static_cast<const StructD_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message_pipes, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams message_pipes_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->message_pipes, validation_context,
                                         &message_pipes_validate_params)) {
    return false;
  }

  return true;
}

StructD_Data::StructD_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructE_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructE_Data* object = static_cast<const StructE_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->struct_d, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->struct_d, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->data_pipe_consumer, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->data_pipe_consumer,
                                                 validation_context)) {
    return false;
  }

  return true;
}

StructE_Data::StructE_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructF_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructF_Data* object = static_cast<const StructF_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->fixed_size_array, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams fixed_size_array_validate_params(
      3, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->fixed_size_array, validation_context,
                                         &fixed_size_array_validate_params)) {
    return false;
  }

  return true;
}

StructF_Data::StructF_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructG_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  static constexpr mojo::internal::StructVersionSize kVersionSizes[] = {
    { 0, 16 },
    { 1, 24 },
    { 3, 32 },
  };
  if (!ValidateStructHeaderAndVersionSizeAndClaimMemory(
          data, kVersionSizes, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructG_Data* object = static_cast<const StructG_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);
  if (object->header_.version < 1)
    return true;

  if (!mojo::internal::ValidateStruct(object->struct_a, validation_context))
    return false;
  if (object->header_.version < 3)
    return true;

  const mojo::internal::ContainerValidateParams str_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->str, validation_context,
                                         &str_validate_params)) {
    return false;
  }

  return true;
}

StructG_Data::StructG_Data()
    : header_({sizeof(*this), 3}) {}


// static
bool BasicStruct_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const BasicStruct_Data* object = static_cast<const BasicStruct_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

BasicStruct_Data::BasicStruct_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithEnum_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithEnum_Data* object = static_cast<const StructWithEnum_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

StructWithEnum_Data::StructWithEnum_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Recursive_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Recursive_Data* object = static_cast<const Recursive_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateStruct(object->recursive, validation_context))
    return false;

  return true;
}

Recursive_Data::Recursive_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BoundsCheckTestInterface_Method0_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const BoundsCheckTestInterface_Method0_Params_Data* object = static_cast<const BoundsCheckTestInterface_Method0_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

BoundsCheckTestInterface_Method0_Params_Data::BoundsCheckTestInterface_Method0_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BoundsCheckTestInterface_Method0_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const BoundsCheckTestInterface_Method0_ResponseParams_Data* object = static_cast<const BoundsCheckTestInterface_Method0_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

BoundsCheckTestInterface_Method0_ResponseParams_Data::BoundsCheckTestInterface_Method0_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BoundsCheckTestInterface_Method1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const BoundsCheckTestInterface_Method1_Params_Data* object = static_cast<const BoundsCheckTestInterface_Method1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

BoundsCheckTestInterface_Method1_Params_Data::BoundsCheckTestInterface_Method1_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method0_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method0_Params_Data* object = static_cast<const ConformanceTestInterface_Method0_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

ConformanceTestInterface_Method0_Params_Data::ConformanceTestInterface_Method0_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method1_Params_Data* object = static_cast<const ConformanceTestInterface_Method1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method1_Params_Data::ConformanceTestInterface_Method1_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method2_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method2_Params_Data* object = static_cast<const ConformanceTestInterface_Method2_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param1, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param1, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method2_Params_Data::ConformanceTestInterface_Method2_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method3_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method3_Params_Data* object = static_cast<const ConformanceTestInterface_Method3_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method3_Params_Data::ConformanceTestInterface_Method3_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method4_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method4_Params_Data* object = static_cast<const ConformanceTestInterface_Method4_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param1, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param1_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->param1, validation_context,
                                         &param1_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method4_Params_Data::ConformanceTestInterface_Method4_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method5_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method5_Params_Data* object = static_cast<const ConformanceTestInterface_Method5_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->param1, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->param1,
                                                 validation_context)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method5_Params_Data::ConformanceTestInterface_Method5_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method6_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method6_Params_Data* object = static_cast<const ConformanceTestInterface_Method6_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method6_Params_Data::ConformanceTestInterface_Method6_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method7_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method7_Params_Data* object = static_cast<const ConformanceTestInterface_Method7_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param1, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param1_validate_params(
      2, true, new mojo::internal::ContainerValidateParams(3, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->param1, validation_context,
                                         &param1_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method7_Params_Data::ConformanceTestInterface_Method7_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method8_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method8_Params_Data* object = static_cast<const ConformanceTestInterface_Method8_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, true, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method8_Params_Data::ConformanceTestInterface_Method8_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method9_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method9_Params_Data* object = static_cast<const ConformanceTestInterface_Method9_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, true, nullptr));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method9_Params_Data::ConformanceTestInterface_Method9_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method10_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method10_Params_Data* object = static_cast<const ConformanceTestInterface_Method10_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method10_Params_Data::ConformanceTestInterface_Method10_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method11_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method11_Params_Data* object = static_cast<const ConformanceTestInterface_Method11_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method11_Params_Data::ConformanceTestInterface_Method11_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method12_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method12_Params_Data* object = static_cast<const ConformanceTestInterface_Method12_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

ConformanceTestInterface_Method12_Params_Data::ConformanceTestInterface_Method12_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method12_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method12_ResponseParams_Data* object = static_cast<const ConformanceTestInterface_Method12_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

ConformanceTestInterface_Method12_ResponseParams_Data::ConformanceTestInterface_Method12_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method13_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method13_Params_Data* object = static_cast<const ConformanceTestInterface_Method13_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterface(object->param0,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterface(object->param2,
                                                 validation_context)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method13_Params_Data::ConformanceTestInterface_Method13_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method14_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method14_Params_Data* object = static_cast<const ConformanceTestInterface_Method14_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EnumA_Data
        ::Validate(object->param0, validation_context))
    return false;


  if (!::mojo::test::internal::EnumB_Data
        ::Validate(object->param1, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method14_Params_Data::ConformanceTestInterface_Method14_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method15_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method15_Params_Data* object = static_cast<const ConformanceTestInterface_Method15_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, ::mojo::test::internal::EnumA_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams param1_validate_params(
      0, ::mojo::test::internal::EnumB_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->param1, validation_context,
                                         &param1_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method15_Params_Data::ConformanceTestInterface_Method15_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method16_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method16_Params_Data* object = static_cast<const ConformanceTestInterface_Method16_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  const mojo::internal::ContainerValidateParams param0_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::mojo::test::internal::EnumA_Data::Validate), new mojo::internal::ContainerValidateParams(0, ::mojo::test::internal::EnumA_Data::Validate));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method16_Params_Data::ConformanceTestInterface_Method16_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method17_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method17_Params_Data* object = static_cast<const ConformanceTestInterface_Method17_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method17_Params_Data::ConformanceTestInterface_Method17_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method18_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method18_Params_Data* object = static_cast<const ConformanceTestInterface_Method18_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnion(object->param0, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method18_Params_Data::ConformanceTestInterface_Method18_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method19_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method19_Params_Data* object = static_cast<const ConformanceTestInterface_Method19_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->recursive, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->recursive, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method19_Params_Data::ConformanceTestInterface_Method19_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method20_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method20_Params_Data* object = static_cast<const ConformanceTestInterface_Method20_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

ConformanceTestInterface_Method20_Params_Data::ConformanceTestInterface_Method20_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method21_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method21_Params_Data* object = static_cast<const ConformanceTestInterface_Method21_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::ExtensibleEmptyEnum_Data
        ::Validate(object->param0, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method21_Params_Data::ConformanceTestInterface_Method21_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConformanceTestInterface_Method22_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConformanceTestInterface_Method22_Params_Data* object = static_cast<const ConformanceTestInterface_Method22_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::internal::EmptyEnum_Data
        ::Validate(object->param0, validation_context))
    return false;

  return true;
}

ConformanceTestInterface_Method22_Params_Data::ConformanceTestInterface_Method22_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegrationTestInterface_Method0_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegrationTestInterface_Method0_Params_Data* object = static_cast<const IntegrationTestInterface_Method0_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->param0, validation_context))
    return false;

  return true;
}

IntegrationTestInterface_Method0_Params_Data::IntegrationTestInterface_Method0_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntegrationTestInterface_Method0_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegrationTestInterface_Method0_ResponseParams_Data* object = static_cast<const IntegrationTestInterface_Method0_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->param0, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams param0_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->param0, validation_context,
                                         &param0_validate_params)) {
    return false;
  }

  return true;
}

IntegrationTestInterface_Method0_ResponseParams_Data::IntegrationTestInterface_Method0_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace test
}  // namespace mojo

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::EnumA>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::EnumA value) {
  return std::move(context).WriteString(::mojo::test::EnumAToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::EnumB>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::EnumB value) {
  return std::move(context).WriteString(::mojo::test::EnumBToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::EmptyEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::EmptyEnum value) {
  return std::move(context).WriteString(::mojo::test::EmptyEnumToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::ExtensibleEmptyEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::ExtensibleEmptyEnum value) {
  return std::move(context).WriteString(::mojo::test::ExtensibleEmptyEnumToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::BasicEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::BasicEnum value) {
  return std::move(context).WriteString(::mojo::test::BasicEnumToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::StructWithEnum_EnumWithin>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::StructWithEnum_EnumWithin value) {
  return std::move(context).WriteString(::mojo::test::StructWithEnum_EnumWithinToString(value));
}

} // namespace perfetto
