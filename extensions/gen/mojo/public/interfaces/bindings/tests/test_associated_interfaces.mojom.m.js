// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';

import {
  PingServiceRemote as mojo_test_PingServiceRemote,
  PingServicePendingReceiver as mojo_test_PingServicePendingReceiver
} from './ping_service.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const FooInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.FooInterface', scope);
  }
};

/** @interface */
export const FooInterfaceInterface = class {
};

/**
 * @implements { FooInterfaceInterface }
 */
export const FooInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!FooInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          FooInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!FooInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the FooInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const FooInterfaceReceiver = class {
  /**
   * @param {!FooInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!FooInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        FooInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FooInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const FooInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.FooInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!FooInterfaceRemote}
   */
  static getRemote() {
    let remote = new FooInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FooInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const FooInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      FooInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FooInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const InterfacePassesAssociatedPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.InterfacePassesAssociated', scope);
  }
};

/** @interface */
export const InterfacePassesAssociatedInterface = class {
  
  /**
   * @param { !Object } fooRemote
   * @param { !Object } fooReceiver
   * @return {!Promise<{
        fooRemote: !Object,
        fooReceiver: !Object,
   *  }>}
   */

  passFoo(fooRemote, fooReceiver) {}
  
  /**
   * @param { !StructContainsAssociated } fooStruct
   * @return {!Promise<{
        fooStruct: !StructContainsAssociated,
   *  }>}
   */

  passStruct(fooStruct) {}
  
  /**
   * @param { !UnionContainsAssociated } fooUnion
   * @return {!Promise<{
        fooUnion: !UnionContainsAssociated,
   *  }>}
   */

  passUnion(fooUnion) {}
};

/**
 * @implements { InterfacePassesAssociatedInterface }
 */
export const InterfacePassesAssociatedRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!InterfacePassesAssociatedPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          InterfacePassesAssociatedPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!InterfacePassesAssociatedPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } fooRemote
   * @param { !Object } fooReceiver
   * @return {!Promise<{
        fooRemote: !Object,
        fooReceiver: !Object,
   *  }>}
   */

  passFoo(
      fooRemote,
      fooReceiver) {
    return this.proxy.sendMessage(
        0,
        InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        [
          fooRemote,
          fooReceiver
        ]);
  }

  
  /**
   * @param { !StructContainsAssociated } fooStruct
   * @return {!Promise<{
        fooStruct: !StructContainsAssociated,
   *  }>}
   */

  passStruct(
      fooStruct) {
    return this.proxy.sendMessage(
        1,
        InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        [
          fooStruct
        ]);
  }

  
  /**
   * @param { !UnionContainsAssociated } fooUnion
   * @return {!Promise<{
        fooUnion: !UnionContainsAssociated,
   *  }>}
   */

  passUnion(
      fooUnion) {
    return this.proxy.sendMessage(
        2,
        InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        [
          fooUnion
        ]);
  }
};

/**
 * An object which receives request messages for the InterfacePassesAssociated
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const InterfacePassesAssociatedReceiver = class {
  /**
   * @param {!InterfacePassesAssociatedInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!InterfacePassesAssociatedRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        InterfacePassesAssociatedRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfacePassesAssociatedRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        impl.passFoo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        impl.passStruct.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        impl.passUnion.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const InterfacePassesAssociated = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.InterfacePassesAssociated";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!InterfacePassesAssociatedRemote}
   */
  static getRemote() {
    let remote = new InterfacePassesAssociatedRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfacePassesAssociated
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const InterfacePassesAssociatedCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      InterfacePassesAssociatedRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfacePassesAssociatedRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passFoo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        this.passFoo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passStruct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        this.passStruct.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passUnion =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        this.passUnion.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IntegerSenderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.IntegerSender', scope);
  }
};

/** @interface */
export const IntegerSenderInterface = class {
  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  echo(value) {}
  
  /**
   * @param { !number } value
   */

  send(value) {}
};

/**
 * @implements { IntegerSenderInterface }
 */
export const IntegerSenderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IntegerSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IntegerSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IntegerSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  echo(
      value) {
    return this.proxy.sendMessage(
        0,
        IntegerSender_Echo_ParamsSpec.$,
        IntegerSender_Echo_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !number } value
   */

  send(
      value) {
    this.proxy.sendMessage(
        1,
        IntegerSender_Send_ParamsSpec.$,
        null,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IntegerSenderReceiver = class {
  /**
   * @param {!IntegerSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IntegerSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IntegerSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        IntegerSender_Echo_ParamsSpec.$,
        IntegerSender_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        IntegerSender_Send_ParamsSpec.$,
        null,
        impl.send.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IntegerSender = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IntegerSenderRemote}
   */
  static getRemote() {
    let remote = new IntegerSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IntegerSenderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IntegerSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        IntegerSender_Echo_ParamsSpec.$,
        IntegerSender_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.send =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        IntegerSender_Send_ParamsSpec.$,
        null,
        this.send.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const StringSenderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.StringSender', scope);
  }
};

/** @interface */
export const StringSenderInterface = class {
  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  echo(value) {}
  
  /**
   * @param { !string } value
   */

  send(value) {}
};

/**
 * @implements { StringSenderInterface }
 */
export const StringSenderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!StringSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          StringSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!StringSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  echo(
      value) {
    return this.proxy.sendMessage(
        0,
        StringSender_Echo_ParamsSpec.$,
        StringSender_Echo_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !string } value
   */

  send(
      value) {
    this.proxy.sendMessage(
        1,
        StringSender_Send_ParamsSpec.$,
        null,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the StringSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const StringSenderReceiver = class {
  /**
   * @param {!StringSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!StringSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        StringSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StringSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        StringSender_Echo_ParamsSpec.$,
        StringSender_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        StringSender_Send_ParamsSpec.$,
        null,
        impl.send.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const StringSender = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.StringSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!StringSenderRemote}
   */
  static getRemote() {
    let remote = new StringSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the StringSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const StringSenderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      StringSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StringSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        StringSender_Echo_ParamsSpec.$,
        StringSender_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.send =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        StringSender_Send_ParamsSpec.$,
        null,
        this.send.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IntegerSenderConnectionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.IntegerSenderConnection', scope);
  }
};

/** @interface */
export const IntegerSenderConnectionInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getSender(receiver) {}
  
  /**
   * @return {!Promise<{
        sender: !Object,
   *  }>}
   */

  asyncGetSender() {}
};

/**
 * @implements { IntegerSenderConnectionInterface }
 */
export const IntegerSenderConnectionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IntegerSenderConnectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IntegerSenderConnectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IntegerSenderConnectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        sender: !Object,
   *  }>}
   */

  asyncGetSender() {
    return this.proxy.sendMessage(
        1,
        IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSenderConnection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IntegerSenderConnectionReceiver = class {
  /**
   * @param {!IntegerSenderConnectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IntegerSenderConnectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IntegerSenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        impl.getSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        impl.asyncGetSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IntegerSenderConnection = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSenderConnection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IntegerSenderConnectionRemote}
   */
  static getRemote() {
    let remote = new IntegerSenderConnectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSenderConnection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IntegerSenderConnectionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IntegerSenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        this.getSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.asyncGetSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        this.asyncGetSender.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IntegerSenderConnectionAtBothEndsPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.IntegerSenderConnectionAtBothEnds', scope);
  }
};

/** @interface */
export const IntegerSenderConnectionAtBothEndsInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getSender(receiver) {}
  
  /**
   * @param { !Object } sender
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  setSender(sender) {}
};

/**
 * @implements { IntegerSenderConnectionAtBothEndsInterface }
 */
export const IntegerSenderConnectionAtBothEndsRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IntegerSenderConnectionAtBothEndsPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IntegerSenderConnectionAtBothEndsPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IntegerSenderConnectionAtBothEndsPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Object } sender
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  setSender(
      sender) {
    return this.proxy.sendMessage(
        1,
        IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        [
          sender
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSenderConnectionAtBothEnds
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IntegerSenderConnectionAtBothEndsReceiver = class {
  /**
   * @param {!IntegerSenderConnectionAtBothEndsInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IntegerSenderConnectionAtBothEndsRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IntegerSenderConnectionAtBothEndsRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderConnectionAtBothEndsRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        impl.getSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        impl.setSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IntegerSenderConnectionAtBothEnds = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSenderConnectionAtBothEnds";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IntegerSenderConnectionAtBothEndsRemote}
   */
  static getRemote() {
    let remote = new IntegerSenderConnectionAtBothEndsRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSenderConnectionAtBothEnds
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IntegerSenderConnectionAtBothEndsCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IntegerSenderConnectionAtBothEndsRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegerSenderConnectionAtBothEndsRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        this.getSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        this.setSender.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const SenderConnectionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.SenderConnection', scope);
  }
};

/** @interface */
export const SenderConnectionInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getIntegerSender(receiver) {}
  
  /**
   * @param { !Object } receiver
   */

  getStringSender(receiver) {}
};

/**
 * @implements { SenderConnectionInterface }
 */
export const SenderConnectionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SenderConnectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SenderConnectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SenderConnectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getIntegerSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Object } receiver
   */

  getStringSender(
      receiver) {
    this.proxy.sendMessage(
        1,
        SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the SenderConnection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const SenderConnectionReceiver = class {
  /**
   * @param {!SenderConnectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SenderConnectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        impl.getIntegerSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        impl.getStringSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const SenderConnection = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.SenderConnection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SenderConnectionRemote}
   */
  static getRemote() {
    let remote = new SenderConnectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SenderConnection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const SenderConnectionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getIntegerSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        this.getIntegerSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getStringSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        this.getStringSender.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const AssociatedPingProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.AssociatedPingProvider', scope);
  }
};

/** @interface */
export const AssociatedPingProviderInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getPing(receiver) {}
};

/**
 * @implements { AssociatedPingProviderInterface }
 */
export const AssociatedPingProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!AssociatedPingProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          AssociatedPingProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!AssociatedPingProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPing(
      receiver) {
    this.proxy.sendMessage(
        0,
        AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedPingProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const AssociatedPingProviderReceiver = class {
  /**
   * @param {!AssociatedPingProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!AssociatedPingProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        AssociatedPingProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedPingProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        impl.getPing.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const AssociatedPingProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.AssociatedPingProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!AssociatedPingProviderRemote}
   */
  static getRemote() {
    let remote = new AssociatedPingProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedPingProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const AssociatedPingProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      AssociatedPingProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedPingProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPing =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        this.getPing.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const AssociatedPingProviderProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.AssociatedPingProviderProvider', scope);
  }
};

/** @interface */
export const AssociatedPingProviderProviderInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getPingProvider(receiver) {}
};

/**
 * @implements { AssociatedPingProviderProviderInterface }
 */
export const AssociatedPingProviderProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!AssociatedPingProviderProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          AssociatedPingProviderProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!AssociatedPingProviderProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPingProvider(
      receiver) {
    this.proxy.sendMessage(
        0,
        AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedPingProviderProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const AssociatedPingProviderProviderReceiver = class {
  /**
   * @param {!AssociatedPingProviderProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!AssociatedPingProviderProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        AssociatedPingProviderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedPingProviderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        impl.getPingProvider.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const AssociatedPingProviderProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.AssociatedPingProviderProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!AssociatedPingProviderProviderRemote}
   */
  static getRemote() {
    let remote = new AssociatedPingProviderProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedPingProviderProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const AssociatedPingProviderProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      AssociatedPingProviderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedPingProviderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingProvider =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        this.getPingProvider.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructContainsAssociatedSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassFoo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassFoo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassStruct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassStruct_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassUnion_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassesAssociated_PassUnion_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSender_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSender_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSender_Send_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StringSender_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StringSender_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StringSender_Send_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnection_GetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnection_AsyncGetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SenderConnection_GetIntegerSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SenderConnection_GetStringSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedPingProvider_GetPing_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedPingProviderProvider_GetPingProvider_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const UnionContainsAssociatedSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    StructContainsAssociatedSpec.$,
    'StructContainsAssociated',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fooRemotes', 16,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote), false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fooReceivers', 24,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export const StructContainsAssociated = class {
  constructor() {
    /** @type { (Object|undefined) } */
    this.fooRemote;
    /** @type { !Object } */
    this.fooReceiver;
    /** @type { !Array<!Object> } */
    this.fooRemotes;
    /** @type { !Array<!Object> } */
    this.fooReceivers;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassFoo_ParamsSpec.$,
    'InterfacePassesAssociated_PassFoo_Params',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassFoo_Params = class {
  constructor() {
    /** @type { !Object } */
    this.fooRemote;
    /** @type { !Object } */
    this.fooReceiver;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassFoo_ResponseParams',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassFoo_ResponseParams = class {
  constructor() {
    /** @type { !Object } */
    this.fooRemote;
    /** @type { !Object } */
    this.fooReceiver;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassStruct_ParamsSpec.$,
    'InterfacePassesAssociated_PassStruct_Params',
    [
      mojo.internal.StructField(
        'fooStruct', 0,
        0,
        StructContainsAssociatedSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassStruct_Params = class {
  constructor() {
    /** @type { !StructContainsAssociated } */
    this.fooStruct;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassStruct_ResponseParams',
    [
      mojo.internal.StructField(
        'fooStruct', 0,
        0,
        StructContainsAssociatedSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassStruct_ResponseParams = class {
  constructor() {
    /** @type { !StructContainsAssociated } */
    this.fooStruct;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassUnion_ParamsSpec.$,
    'InterfacePassesAssociated_PassUnion_Params',
    [
      mojo.internal.StructField(
        'fooUnion', 0,
        0,
        UnionContainsAssociatedSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassUnion_Params = class {
  constructor() {
    /** @type { !UnionContainsAssociated } */
    this.fooUnion;
  }
};



mojo.internal.Struct(
    InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassUnion_ResponseParams',
    [
      mojo.internal.StructField(
        'fooUnion', 0,
        0,
        UnionContainsAssociatedSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const InterfacePassesAssociated_PassUnion_ResponseParams = class {
  constructor() {
    /** @type { !UnionContainsAssociated } */
    this.fooUnion;
  }
};



mojo.internal.Struct(
    IntegerSender_Echo_ParamsSpec.$,
    'IntegerSender_Echo_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSender_Echo_Params = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    IntegerSender_Echo_ResponseParamsSpec.$,
    'IntegerSender_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSender_Echo_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    IntegerSender_Send_ParamsSpec.$,
    'IntegerSender_Send_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSender_Send_Params = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    StringSender_Echo_ParamsSpec.$,
    'StringSender_Echo_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StringSender_Echo_Params = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    StringSender_Echo_ResponseParamsSpec.$,
    'StringSender_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StringSender_Echo_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    StringSender_Send_ParamsSpec.$,
    'StringSender_Send_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StringSender_Send_Params = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    IntegerSenderConnection_GetSender_ParamsSpec.$,
    'IntegerSenderConnection_GetSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(IntegerSenderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSenderConnection_GetSender_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
    'IntegerSenderConnection_AsyncGetSender_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const IntegerSenderConnection_AsyncGetSender_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
    'IntegerSenderConnection_AsyncGetSender_ResponseParams',
    [
      mojo.internal.StructField(
        'sender', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(IntegerSenderRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSenderConnection_AsyncGetSender_ResponseParams = class {
  constructor() {
    /** @type { !Object } */
    this.sender;
  }
};



mojo.internal.Struct(
    IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_GetSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(IntegerSenderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSenderConnectionAtBothEnds_GetSender_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_SetSender_Params',
    [
      mojo.internal.StructField(
        'sender', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(IntegerSenderRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSenderConnectionAtBothEnds_SetSender_Params = class {
  constructor() {
    /** @type { !Object } */
    this.sender;
  }
};



mojo.internal.Struct(
    IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    SenderConnection_GetIntegerSender_ParamsSpec.$,
    'SenderConnection_GetIntegerSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(IntegerSenderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SenderConnection_GetIntegerSender_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    SenderConnection_GetStringSender_ParamsSpec.$,
    'SenderConnection_GetStringSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(StringSenderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SenderConnection_GetStringSender_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    AssociatedPingProvider_GetPing_ParamsSpec.$,
    'AssociatedPingProvider_GetPing_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo_test_PingServicePendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedPingProvider_GetPing_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
    'AssociatedPingProviderProvider_GetPingProvider_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(AssociatedPingProviderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedPingProviderProvider_GetPingProvider_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};

mojo.internal.Union(
    UnionContainsAssociatedSpec.$, 'UnionContainsAssociated',
    {
      'fooRemote': {
        'ordinal': 0,
        'type': mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote),
        'nullable': true,
      },
      'fooReceiver': {
        'ordinal': 1,
        'type': mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver),
      },
      'fooRemotes': {
        'ordinal': 2,
        'type': mojo.internal.Array(mojo.internal.AssociatedInterfaceProxy(FooInterfaceRemote), false),
      },
      'fooReceivers': {
        'ordinal': 3,
        'type': mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(FooInterfacePendingReceiver), false),
      },
    });

/**
 * @typedef { {
 *   fooRemote: (?Object|undefined),
 *   fooReceiver: (!Object|undefined),
 *   fooRemotes: (!Array<!Object>|undefined),
 *   fooReceivers: (!Array<!Object>|undefined),
 * } }
 */
export const UnionContainsAssociated = {};
