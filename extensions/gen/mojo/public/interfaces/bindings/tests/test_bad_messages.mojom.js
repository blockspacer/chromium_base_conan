// mojo/public/interfaces/bindings/tests/test_bad_messages.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/test_bad_messages.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');



  function TestBadMessages_RejectEventually_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RejectEventually_Params.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RejectEventually_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RejectEventually_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RejectEventually_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RejectEventually_Params.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RejectEventually_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RejectEventually_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RejectEventually_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RejectEventually_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RejectEventually_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RejectEventually_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RejectEventually_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RejectEventually_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RejectEventually_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RejectEventually_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RejectEventually_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RejectEventually_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RequestResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RequestResponse_Params.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RequestResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RequestResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RequestResponse_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RequestResponse_Params.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RequestResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RequestResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RequestResponse_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RequestResponse_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RequestResponse_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RequestResponse_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RequestResponse_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RequestResponse_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RequestResponse_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RequestResponse_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RequestResponse_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RequestResponse_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RejectSync_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RejectSync_Params.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RejectSync_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RejectSync_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RejectSync_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RejectSync_Params.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RejectSync_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RejectSync_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RejectSync_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RejectSync_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RejectSync_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RejectSync_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RejectSync_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RejectSync_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RejectSync_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RejectSync_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RejectSync_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RejectSync_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RequestResponseSync_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RequestResponseSync_Params.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RequestResponseSync_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RequestResponseSync_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RequestResponseSync_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RequestResponseSync_Params.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RequestResponseSync_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RequestResponseSync_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RequestResponseSync_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestBadMessages_RequestResponseSync_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestBadMessages_RequestResponseSync_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestBadMessages_RequestResponseSync_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestBadMessages_RequestResponseSync_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestBadMessages_RequestResponseSync_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestBadMessages_RequestResponseSync_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestBadMessages_RequestResponseSync_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestBadMessages_RequestResponseSync_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestBadMessages_RequestResponseSync_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kTestBadMessages_RejectEventually_Name = 0;
  var kTestBadMessages_RequestResponse_Name = 1;
  var kTestBadMessages_RejectSync_Name = 2;
  var kTestBadMessages_RequestResponseSync_Name = 3;

  function TestBadMessagesPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestBadMessages,
                                                   handleOrPtrInfo);
  }

  function TestBadMessagesAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestBadMessages, associatedInterfacePtrInfo);
  }

  TestBadMessagesAssociatedPtr.prototype =
      Object.create(TestBadMessagesPtr.prototype);
  TestBadMessagesAssociatedPtr.prototype.constructor =
      TestBadMessagesAssociatedPtr;

  function TestBadMessagesProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestBadMessagesPtr.prototype.rejectEventually = function() {
    return TestBadMessagesProxy.prototype.rejectEventually
        .apply(this.ptr.getProxy(), arguments);
  };

  TestBadMessagesProxy.prototype.rejectEventually = function() {
    var params_ = new TestBadMessages_RejectEventually_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestBadMessages_RejectEventually_Name,
          codec.align(TestBadMessages_RejectEventually_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestBadMessages_RejectEventually_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestBadMessages_RejectEventually_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestBadMessagesPtr.prototype.requestResponse = function() {
    return TestBadMessagesProxy.prototype.requestResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  TestBadMessagesProxy.prototype.requestResponse = function() {
    var params_ = new TestBadMessages_RequestResponse_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestBadMessages_RequestResponse_Name,
          codec.align(TestBadMessages_RequestResponse_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestBadMessages_RequestResponse_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestBadMessages_RequestResponse_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestBadMessagesPtr.prototype.rejectSync = function() {
    return TestBadMessagesProxy.prototype.rejectSync
        .apply(this.ptr.getProxy(), arguments);
  };

  TestBadMessagesProxy.prototype.rejectSync = function() {
    var params_ = new TestBadMessages_RejectSync_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestBadMessages_RejectSync_Name,
          codec.align(TestBadMessages_RejectSync_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestBadMessages_RejectSync_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestBadMessages_RejectSync_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestBadMessagesPtr.prototype.requestResponseSync = function() {
    return TestBadMessagesProxy.prototype.requestResponseSync
        .apply(this.ptr.getProxy(), arguments);
  };

  TestBadMessagesProxy.prototype.requestResponseSync = function() {
    var params_ = new TestBadMessages_RequestResponseSync_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestBadMessages_RequestResponseSync_Name,
          codec.align(TestBadMessages_RequestResponseSync_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestBadMessages_RequestResponseSync_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestBadMessages_RequestResponseSync_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestBadMessagesStub(delegate) {
    this.delegate_ = delegate;
  }
  TestBadMessagesStub.prototype.rejectEventually = function() {
    return this.delegate_ && this.delegate_.rejectEventually && this.delegate_.rejectEventually();
  }
  TestBadMessagesStub.prototype.requestResponse = function() {
    return this.delegate_ && this.delegate_.requestResponse && this.delegate_.requestResponse();
  }
  TestBadMessagesStub.prototype.rejectSync = function() {
    return this.delegate_ && this.delegate_.rejectSync && this.delegate_.rejectSync();
  }
  TestBadMessagesStub.prototype.requestResponseSync = function() {
    return this.delegate_ && this.delegate_.requestResponseSync && this.delegate_.requestResponseSync();
  }

  TestBadMessagesStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestBadMessagesStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestBadMessages_RejectEventually_Name:
      var params = reader.decodeStruct(TestBadMessages_RejectEventually_Params);
      this.rejectEventually().then(function(response) {
        var responseParams =
            new TestBadMessages_RejectEventually_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestBadMessages_RejectEventually_Name,
            codec.align(TestBadMessages_RejectEventually_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestBadMessages_RejectEventually_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestBadMessages_RequestResponse_Name:
      var params = reader.decodeStruct(TestBadMessages_RequestResponse_Params);
      this.requestResponse().then(function(response) {
        var responseParams =
            new TestBadMessages_RequestResponse_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestBadMessages_RequestResponse_Name,
            codec.align(TestBadMessages_RequestResponse_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestBadMessages_RequestResponse_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestBadMessages_RejectSync_Name:
      var params = reader.decodeStruct(TestBadMessages_RejectSync_Params);
      this.rejectSync().then(function(response) {
        var responseParams =
            new TestBadMessages_RejectSync_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestBadMessages_RejectSync_Name,
            codec.align(TestBadMessages_RejectSync_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestBadMessages_RejectSync_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestBadMessages_RequestResponseSync_Name:
      var params = reader.decodeStruct(TestBadMessages_RequestResponseSync_Params);
      this.requestResponseSync().then(function(response) {
        var responseParams =
            new TestBadMessages_RequestResponseSync_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestBadMessages_RequestResponseSync_Name,
            codec.align(TestBadMessages_RequestResponseSync_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestBadMessages_RequestResponseSync_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestBadMessagesRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestBadMessages_RejectEventually_Name:
        if (message.expectsResponse())
          paramsClass = TestBadMessages_RejectEventually_Params;
      break;
      case kTestBadMessages_RequestResponse_Name:
        if (message.expectsResponse())
          paramsClass = TestBadMessages_RequestResponse_Params;
      break;
      case kTestBadMessages_RejectSync_Name:
        if (message.expectsResponse())
          paramsClass = TestBadMessages_RejectSync_Params;
      break;
      case kTestBadMessages_RequestResponseSync_Name:
        if (message.expectsResponse())
          paramsClass = TestBadMessages_RequestResponseSync_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestBadMessagesResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestBadMessages_RejectEventually_Name:
        if (message.isResponse())
          paramsClass = TestBadMessages_RejectEventually_ResponseParams;
        break;
      case kTestBadMessages_RequestResponse_Name:
        if (message.isResponse())
          paramsClass = TestBadMessages_RequestResponse_ResponseParams;
        break;
      case kTestBadMessages_RejectSync_Name:
        if (message.isResponse())
          paramsClass = TestBadMessages_RejectSync_ResponseParams;
        break;
      case kTestBadMessages_RequestResponseSync_Name:
        if (message.isResponse())
          paramsClass = TestBadMessages_RequestResponseSync_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestBadMessages = {
    name: 'mojo.test.TestBadMessages',
    kVersion: 0,
    ptrClass: TestBadMessagesPtr,
    proxyClass: TestBadMessagesProxy,
    stubClass: TestBadMessagesStub,
    validateRequest: validateTestBadMessagesRequest,
    validateResponse: validateTestBadMessagesResponse,
  };
  TestBadMessagesStub.prototype.validator = validateTestBadMessagesRequest;
  TestBadMessagesProxy.prototype.validator = validateTestBadMessagesResponse;
  exports.TestBadMessages = TestBadMessages;
  exports.TestBadMessagesPtr = TestBadMessagesPtr;
  exports.TestBadMessagesAssociatedPtr = TestBadMessagesAssociatedPtr;
})();