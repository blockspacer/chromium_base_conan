// mojo/public/interfaces/bindings/tests/test_wtf_types.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_WTF_TYPES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_WTF_TYPES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_wtf_types.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_wtf_types.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace WTF {
struct mojo_test_internal_TopLevelEnum_DataHashFn {
  static unsigned GetHash(const ::mojo::test::TopLevelEnum& value) {
    using utype = std::underlying_type<::mojo::test::TopLevelEnum>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::TopLevelEnum& left, const ::mojo::test::TopLevelEnum& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::TopLevelEnum>
    : public GenericHashTraits<::mojo::test::TopLevelEnum> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::TopLevelEnum& value) {
    return value == static_cast<::mojo::test::TopLevelEnum>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::TopLevelEnum& slot, bool) {
    slot = static_cast<::mojo::test::TopLevelEnum>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::TopLevelEnum& value) {
    return value == static_cast<::mojo::test::TopLevelEnum>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct mojo_test_internal_TestWTFStruct_NestedEnum_DataHashFn {
  static unsigned GetHash(const ::mojo::test::TestWTFStruct_NestedEnum& value) {
    using utype = std::underlying_type<::mojo::test::TestWTFStruct_NestedEnum>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::TestWTFStruct_NestedEnum& left, const ::mojo::test::TestWTFStruct_NestedEnum& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::TestWTFStruct_NestedEnum>
    : public GenericHashTraits<::mojo::test::TestWTFStruct_NestedEnum> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::TestWTFStruct_NestedEnum& value) {
    return value == static_cast<::mojo::test::TestWTFStruct_NestedEnum>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::TestWTFStruct_NestedEnum& slot, bool) {
    slot = static_cast<::mojo::test::TestWTFStruct_NestedEnum>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::TestWTFStruct_NestedEnum& value) {
    return value == static_cast<::mojo::test::TestWTFStruct_NestedEnum>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct mojo_test_internal_TestWTF_NestedEnum_DataHashFn {
  static unsigned GetHash(const ::mojo::test::TestWTF_NestedEnum& value) {
    using utype = std::underlying_type<::mojo::test::TestWTF_NestedEnum>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::TestWTF_NestedEnum& left, const ::mojo::test::TestWTF_NestedEnum& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::TestWTF_NestedEnum>
    : public GenericHashTraits<::mojo::test::TestWTF_NestedEnum> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::TestWTF_NestedEnum& value) {
    return value == static_cast<::mojo::test::TestWTF_NestedEnum>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::TestWTF_NestedEnum& slot, bool) {
    slot = static_cast<::mojo::test::TestWTF_NestedEnum>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::TestWTF_NestedEnum& value) {
    return value == static_cast<::mojo::test::TestWTF_NestedEnum>(-1000001);
  }
};
}  // namespace WTF


namespace mojo {
namespace test {
namespace blink {

class TestWTFProxy;

template <typename ImplRefTraits>
class TestWTFStub;

class TestWTFRequestValidator;
class TestWTFResponseValidator;


// @generated_from: mojo.test.TestWTF
class  TestWTF
    : public TestWTFInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestWTFInterfaceBase;
  using Proxy_ = TestWTFProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestWTFStub<ImplRefTraits>;

  using RequestValidator_ = TestWTFRequestValidator;
  using ResponseValidator_ = TestWTFResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoStringMinVersion = 0,
    kEchoStringArrayMinVersion = 0,
    kEchoStringMapMinVersion = 0,
  };
  
// @generated_from: mojo.test.TestWTF.NestedEnum
  using NestedEnum = TestWTF_NestedEnum;
  virtual ~TestWTF() {}


  using EchoStringCallback = base::OnceCallback<void(const WTF::String&)>;
  
// @generated_from: mojo.test.TestWTF.EchoString
  virtual void EchoString(const WTF::String& str, EchoStringCallback callback) = 0;


  using EchoStringArrayCallback = base::OnceCallback<void(const base::Optional<WTF::Vector<WTF::String>>&)>;
  
// @generated_from: mojo.test.TestWTF.EchoStringArray
  virtual void EchoStringArray(const base::Optional<WTF::Vector<WTF::String>>& arr, EchoStringArrayCallback callback) = 0;


  using EchoStringMapCallback = base::OnceCallback<void(const base::Optional<WTF::HashMap<WTF::String, WTF::String>>&)>;
  
// @generated_from: mojo.test.TestWTF.EchoStringMap
  virtual void EchoStringMap(const base::Optional<WTF::HashMap<WTF::String, WTF::String>>& str_map, EchoStringMapCallback callback) = 0;
};



// @generated_from: mojo.test.TestWTF
class  TestWTFProxy
    : public TestWTF {
 public:
  using InterfaceType = TestWTF;

  explicit TestWTFProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestWTF.EchoString
  void EchoString(const WTF::String& str, EchoStringCallback callback) final;
  
// @generated_from: mojo.test.TestWTF.EchoStringArray
  void EchoStringArray(const base::Optional<WTF::Vector<WTF::String>>& arr, EchoStringArrayCallback callback) final;
  
// @generated_from: mojo.test.TestWTF.EchoStringMap
  void EchoStringMap(const base::Optional<WTF::HashMap<WTF::String, WTF::String>>& str_map, EchoStringMapCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestWTFStubDispatch {
 public:
  static bool Accept(TestWTF* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestWTF* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestWTF>>
class TestWTFStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestWTFStub() {}
  ~TestWTFStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestWTFStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestWTFStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestWTFRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestWTFResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};






// @generated_from: mojo.test.TestWTFStruct
class  TestWTFStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TestWTFStruct, T>::value>;
  using DataView = TestWTFStructDataView;
  using Data_ = internal::TestWTFStruct_Data;
// @generated_from: mojo.test.TestWTFStruct.NestedEnum
  using NestedEnum = TestWTFStruct_NestedEnum;

  template <typename... Args>
  static TestWTFStructPtr New(Args&&... args) {
    return TestWTFStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TestWTFStructPtr From(const U& u) {
    return mojo::TypeConverter<TestWTFStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestWTFStruct>::Convert(*this);
  }


  TestWTFStruct();

  TestWTFStruct(
      const WTF::String& str,
      int32_t integer);

  ~TestWTFStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TestWTFStructPtr>
  TestWTFStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        TestWTFStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestWTFStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TestWTFStruct_UnserializedMessageContext<
            UserType, TestWTFStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TestWTFStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return TestWTFStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TestWTFStruct_UnserializedMessageContext<
            UserType, TestWTFStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TestWTFStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.TestWTFStruct.str
  WTF::String str;
  
// @generated_from: mojo.test.TestWTFStruct.integer
  int32_t integer;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TestWTFStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.TestWTFCodeGeneration2
class  TestWTFCodeGeneration2 {
 public:
  using DataView = TestWTFCodeGeneration2DataView;
  using Data_ = internal::TestWTFCodeGeneration2_Data;
  using Tag = Data_::TestWTFCodeGeneration2_Tag;

  static TestWTFCodeGeneration2Ptr New() {
    return TestWTFCodeGeneration2Ptr(base::in_place);
  }
  // Construct an instance holding |str|.
  static TestWTFCodeGeneration2Ptr
  NewStr(
      const WTF::String& str) {
    auto result = TestWTFCodeGeneration2Ptr(base::in_place);
    result->set_str(std::move(str));
    return result;
  }
  // Construct an instance holding |strs|.
  static TestWTFCodeGeneration2Ptr
  NewStrs(
      WTF::Vector<WTF::String> strs) {
    auto result = TestWTFCodeGeneration2Ptr(base::in_place);
    result->set_strs(std::move(strs));
    return result;
  }
  // Construct an instance holding |str_map|.
  static TestWTFCodeGeneration2Ptr
  NewStrMap(
      const WTF::HashMap<WTF::String, WTF::String>& str_map) {
    auto result = TestWTFCodeGeneration2Ptr(base::in_place);
    result->set_str_map(std::move(str_map));
    return result;
  }

  template <typename U>
  static TestWTFCodeGeneration2Ptr From(const U& u) {
    return mojo::TypeConverter<TestWTFCodeGeneration2Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestWTFCodeGeneration2>::Convert(*this);
  }

  TestWTFCodeGeneration2();
  ~TestWTFCodeGeneration2();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = TestWTFCodeGeneration2Ptr>
  TestWTFCodeGeneration2Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, TestWTFCodeGeneration2>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, TestWTFCodeGeneration2>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str
  bool is_str() const { return tag_ == Tag::STR; }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str
  WTF::String& get_str() const {
    DCHECK(tag_ == Tag::STR);
    return *(data_.str);
  }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str
  void set_str(
      const WTF::String& str);
  
// @generated_from: mojo.test.TestWTFCodeGeneration2.strs
  bool is_strs() const { return tag_ == Tag::STRS; }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.strs
  WTF::Vector<WTF::String>& get_strs() const {
    DCHECK(tag_ == Tag::STRS);
    return *(data_.strs);
  }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.strs
  void set_strs(
      WTF::Vector<WTF::String> strs);
  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str_map
  bool is_str_map() const { return tag_ == Tag::STR_MAP; }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str_map
  WTF::HashMap<WTF::String, WTF::String>& get_str_map() const {
    DCHECK(tag_ == Tag::STR_MAP);
    return *(data_.str_map);
  }

  
// @generated_from: mojo.test.TestWTFCodeGeneration2.str_map
  void set_str_map(
      const WTF::HashMap<WTF::String, WTF::String>& str_map);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestWTFCodeGeneration2::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<TestWTFCodeGeneration2::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    WTF::String* str;
    WTF::Vector<WTF::String>* strs;
    WTF::HashMap<WTF::String, WTF::String>* str_map;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: mojo.test.TestWTFCodeGeneration
class  TestWTFCodeGeneration {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TestWTFCodeGeneration, T>::value>;
  using DataView = TestWTFCodeGenerationDataView;
  using Data_ = internal::TestWTFCodeGeneration_Data;

  template <typename... Args>
  static TestWTFCodeGenerationPtr New(Args&&... args) {
    return TestWTFCodeGenerationPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TestWTFCodeGenerationPtr From(const U& u) {
    return mojo::TypeConverter<TestWTFCodeGenerationPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestWTFCodeGeneration>::Convert(*this);
  }


  TestWTFCodeGeneration();

  TestWTFCodeGeneration(
      const WTF::String& str,
      const WTF::String& nullable_str,
      WTF::Vector<WTF::String> strs,
      WTF::Vector<WTF::String> nullable_strs,
      WTF::Vector<WTF::Vector<int32_t>> arrays,
      WTF::Vector<bool> bools,
      WTF::Vector<::mojo::ScopedMessagePipeHandle> handles,
      const WTF::HashMap<WTF::String, WTF::String>& str_map,
      const WTF::HashMap<int32_t, WTF::Vector<int32_t>>& array_map,
      WTF::HashMap<int32_t, ::mojo::ScopedMessagePipeHandle> handle_map,
      WTF::Vector<WTF::HashMap<WTF::String, WTF::String>> str_maps);

  ~TestWTFCodeGeneration();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TestWTFCodeGenerationPtr>
  TestWTFCodeGenerationPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestWTFCodeGeneration::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TestWTFCodeGeneration_UnserializedMessageContext<
            UserType, TestWTFCodeGeneration::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TestWTFCodeGeneration::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return TestWTFCodeGeneration::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TestWTFCodeGeneration_UnserializedMessageContext<
            UserType, TestWTFCodeGeneration::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TestWTFCodeGeneration::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.TestWTFCodeGeneration.str
  WTF::String str;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.nullable_str
  WTF::String nullable_str;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.strs
  WTF::Vector<WTF::String> strs;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.nullable_strs
  WTF::Vector<WTF::String> nullable_strs;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.arrays
  WTF::Vector<WTF::Vector<int32_t>> arrays;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.bools
  WTF::Vector<bool> bools;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.handles
  WTF::Vector<::mojo::ScopedMessagePipeHandle> handles;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.str_map
  WTF::HashMap<WTF::String, WTF::String> str_map;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.array_map
  WTF::HashMap<int32_t, WTF::Vector<int32_t>> array_map;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.handle_map
  WTF::HashMap<int32_t, ::mojo::ScopedMessagePipeHandle> handle_map;
  
// @generated_from: mojo.test.TestWTFCodeGeneration.str_maps
  WTF::Vector<WTF::HashMap<WTF::String, WTF::String>> str_maps;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(TestWTFCodeGeneration);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TestWTFCodeGeneration::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.TestWTFStructWrapper
class  TestWTFStructWrapper {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TestWTFStructWrapper, T>::value>;
  using DataView = TestWTFStructWrapperDataView;
  using Data_ = internal::TestWTFStructWrapper_Data;

  template <typename... Args>
  static TestWTFStructWrapperPtr New(Args&&... args) {
    return TestWTFStructWrapperPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TestWTFStructWrapperPtr From(const U& u) {
    return mojo::TypeConverter<TestWTFStructWrapperPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestWTFStructWrapper>::Convert(*this);
  }


  TestWTFStructWrapper();

  TestWTFStructWrapper(
      TestWTFStructPtr nested_struct,
      WTF::Vector<TestWTFStructPtr> array_struct,
      WTF::HashMap<TestWTFStructPtr, TestWTFStructPtr> map_struct);

  ~TestWTFStructWrapper();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TestWTFStructWrapperPtr>
  TestWTFStructWrapperPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        TestWTFStructWrapper::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestWTFStructWrapper::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TestWTFStructWrapper_UnserializedMessageContext<
            UserType, TestWTFStructWrapper::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TestWTFStructWrapper::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return TestWTFStructWrapper::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TestWTFStructWrapper_UnserializedMessageContext<
            UserType, TestWTFStructWrapper::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TestWTFStructWrapper::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.TestWTFStructWrapper.nested_struct
  TestWTFStructPtr nested_struct;
  
// @generated_from: mojo.test.TestWTFStructWrapper.array_struct
  WTF::Vector<TestWTFStructPtr> array_struct;
  
// @generated_from: mojo.test.TestWTFStructWrapper.map_struct
  WTF::HashMap<TestWTFStructPtr, TestWTFStructPtr> map_struct;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(TestWTFStructWrapper);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TestWTFStructWrapper::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
TestWTFCodeGeneration2Ptr TestWTFCodeGeneration2::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::STR:
      rv->set_str(mojo::Clone(*data_.str));
      break;
    case Tag::STRS:
      rv->set_strs(mojo::Clone(*data_.strs));
      break;
    case Tag::STR_MAP:
      rv->set_str_map(mojo::Clone(*data_.str_map));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, TestWTFCodeGeneration2>::value>::type*>
bool TestWTFCodeGeneration2::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::STR:
      return mojo::Equals(*(data_.str), *(other.data_.str));
    case Tag::STRS:
      return mojo::Equals(*(data_.strs), *(other.data_.strs));
    case Tag::STR_MAP:
      return mojo::Equals(*(data_.str_map), *(other.data_.str_map));
  }

  return false;
}
template <typename StructPtrType>
TestWTFCodeGenerationPtr TestWTFCodeGeneration::Clone() const {
  return New(
      mojo::Clone(str),
      mojo::Clone(nullable_str),
      mojo::Clone(strs),
      mojo::Clone(nullable_strs),
      mojo::Clone(arrays),
      mojo::Clone(bools),
      mojo::Clone(handles),
      mojo::Clone(str_map),
      mojo::Clone(array_map),
      mojo::Clone(handle_map),
      mojo::Clone(str_maps)
  );
}

template <typename T, TestWTFCodeGeneration::EnableIfSame<T>*>
bool TestWTFCodeGeneration::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->str, other_struct.str))
    return false;
  if (!mojo::Equals(this->nullable_str, other_struct.nullable_str))
    return false;
  if (!mojo::Equals(this->strs, other_struct.strs))
    return false;
  if (!mojo::Equals(this->nullable_strs, other_struct.nullable_strs))
    return false;
  if (!mojo::Equals(this->arrays, other_struct.arrays))
    return false;
  if (!mojo::Equals(this->bools, other_struct.bools))
    return false;
  if (!mojo::Equals(this->handles, other_struct.handles))
    return false;
  if (!mojo::Equals(this->str_map, other_struct.str_map))
    return false;
  if (!mojo::Equals(this->array_map, other_struct.array_map))
    return false;
  if (!mojo::Equals(this->handle_map, other_struct.handle_map))
    return false;
  if (!mojo::Equals(this->str_maps, other_struct.str_maps))
    return false;
  return true;
}

template <typename T, TestWTFCodeGeneration::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.str < rhs.str)
    return true;
  if (rhs.str < lhs.str)
    return false;
  if (lhs.nullable_str < rhs.nullable_str)
    return true;
  if (rhs.nullable_str < lhs.nullable_str)
    return false;
  if (lhs.strs < rhs.strs)
    return true;
  if (rhs.strs < lhs.strs)
    return false;
  if (lhs.nullable_strs < rhs.nullable_strs)
    return true;
  if (rhs.nullable_strs < lhs.nullable_strs)
    return false;
  if (lhs.arrays < rhs.arrays)
    return true;
  if (rhs.arrays < lhs.arrays)
    return false;
  if (lhs.bools < rhs.bools)
    return true;
  if (rhs.bools < lhs.bools)
    return false;
  if (lhs.handles < rhs.handles)
    return true;
  if (rhs.handles < lhs.handles)
    return false;
  if (lhs.str_map < rhs.str_map)
    return true;
  if (rhs.str_map < lhs.str_map)
    return false;
  if (lhs.array_map < rhs.array_map)
    return true;
  if (rhs.array_map < lhs.array_map)
    return false;
  if (lhs.handle_map < rhs.handle_map)
    return true;
  if (rhs.handle_map < lhs.handle_map)
    return false;
  if (lhs.str_maps < rhs.str_maps)
    return true;
  if (rhs.str_maps < lhs.str_maps)
    return false;
  return false;
}
template <typename StructPtrType>
TestWTFStructPtr TestWTFStruct::Clone() const {
  return New(
      mojo::Clone(str),
      mojo::Clone(integer)
  );
}

template <typename T, TestWTFStruct::EnableIfSame<T>*>
bool TestWTFStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->str, other_struct.str))
    return false;
  if (!mojo::Equals(this->integer, other_struct.integer))
    return false;
  return true;
}

template <typename T, TestWTFStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.str < rhs.str)
    return true;
  if (rhs.str < lhs.str)
    return false;
  if (lhs.integer < rhs.integer)
    return true;
  if (rhs.integer < lhs.integer)
    return false;
  return false;
}
template <typename StructPtrType>
TestWTFStructWrapperPtr TestWTFStructWrapper::Clone() const {
  return New(
      mojo::Clone(nested_struct),
      mojo::Clone(array_struct),
      mojo::Clone(map_struct)
  );
}

template <typename T, TestWTFStructWrapper::EnableIfSame<T>*>
bool TestWTFStructWrapper::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->nested_struct, other_struct.nested_struct))
    return false;
  if (!mojo::Equals(this->array_struct, other_struct.array_struct))
    return false;
  if (!mojo::Equals(this->map_struct, other_struct.map_struct))
    return false;
  return true;
}

template <typename T, TestWTFStructWrapper::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.nested_struct < rhs.nested_struct)
    return true;
  if (rhs.nested_struct < lhs.nested_struct)
    return false;
  if (lhs.array_struct < rhs.array_struct)
    return true;
  if (rhs.array_struct < lhs.array_struct)
    return false;
  if (lhs.map_struct < rhs.map_struct)
    return true;
  if (rhs.map_struct < lhs.map_struct)
    return false;
  return false;
}


}  // namespace blink
}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::blink::TestWTFCodeGeneration::DataView,
                                         ::mojo::test::blink::TestWTFCodeGenerationPtr> {
  static bool IsNull(const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::TestWTFCodeGenerationPtr* output) { output->reset(); }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::str)& str(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->str;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::nullable_str)& nullable_str(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->nullable_str;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::strs)& strs(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->strs;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::nullable_strs)& nullable_strs(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->nullable_strs;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::arrays)& arrays(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->arrays;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::bools)& bools(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->bools;
  }

  static  decltype(::mojo::test::blink::TestWTFCodeGeneration::handles)& handles(
       ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->handles;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::str_map)& str_map(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->str_map;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::array_map)& array_map(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->array_map;
  }

  static  decltype(::mojo::test::blink::TestWTFCodeGeneration::handle_map)& handle_map(
       ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->handle_map;
  }

  static const decltype(::mojo::test::blink::TestWTFCodeGeneration::str_maps)& str_maps(
      const ::mojo::test::blink::TestWTFCodeGenerationPtr& input) {
    return input->str_maps;
  }

  static bool Read(::mojo::test::blink::TestWTFCodeGeneration::DataView input, ::mojo::test::blink::TestWTFCodeGenerationPtr* output);
};


template <>
struct  StructTraits<::mojo::test::blink::TestWTFStruct::DataView,
                                         ::mojo::test::blink::TestWTFStructPtr> {
  static bool IsNull(const ::mojo::test::blink::TestWTFStructPtr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::TestWTFStructPtr* output) { output->reset(); }

  static const decltype(::mojo::test::blink::TestWTFStruct::str)& str(
      const ::mojo::test::blink::TestWTFStructPtr& input) {
    return input->str;
  }

  static decltype(::mojo::test::blink::TestWTFStruct::integer) integer(
      const ::mojo::test::blink::TestWTFStructPtr& input) {
    return input->integer;
  }

  static bool Read(::mojo::test::blink::TestWTFStruct::DataView input, ::mojo::test::blink::TestWTFStructPtr* output);
};


template <>
struct  StructTraits<::mojo::test::blink::TestWTFStructWrapper::DataView,
                                         ::mojo::test::blink::TestWTFStructWrapperPtr> {
  static bool IsNull(const ::mojo::test::blink::TestWTFStructWrapperPtr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::TestWTFStructWrapperPtr* output) { output->reset(); }

  static const decltype(::mojo::test::blink::TestWTFStructWrapper::nested_struct)& nested_struct(
      const ::mojo::test::blink::TestWTFStructWrapperPtr& input) {
    return input->nested_struct;
  }

  static const decltype(::mojo::test::blink::TestWTFStructWrapper::array_struct)& array_struct(
      const ::mojo::test::blink::TestWTFStructWrapperPtr& input) {
    return input->array_struct;
  }

  static const decltype(::mojo::test::blink::TestWTFStructWrapper::map_struct)& map_struct(
      const ::mojo::test::blink::TestWTFStructWrapperPtr& input) {
    return input->map_struct;
  }

  static bool Read(::mojo::test::blink::TestWTFStructWrapper::DataView input, ::mojo::test::blink::TestWTFStructWrapperPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::blink::TestWTFCodeGeneration2::DataView,
                                        ::mojo::test::blink::TestWTFCodeGeneration2Ptr> {
  static bool IsNull(const ::mojo::test::blink::TestWTFCodeGeneration2Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::blink::TestWTFCodeGeneration2Ptr* output) { output->reset(); }

  static ::mojo::test::blink::TestWTFCodeGeneration2::Tag GetTag(const ::mojo::test::blink::TestWTFCodeGeneration2Ptr& input) {
    return input->which();
  }

  static const WTF::String& str(const ::mojo::test::blink::TestWTFCodeGeneration2Ptr& input) {
    return input->get_str();
  }

  static const WTF::Vector<WTF::String>& strs(const ::mojo::test::blink::TestWTFCodeGeneration2Ptr& input) {
    return input->get_strs();
  }

  static const WTF::HashMap<WTF::String, WTF::String>& str_map(const ::mojo::test::blink::TestWTFCodeGeneration2Ptr& input) {
    return input->get_str_map();
  }

  static bool Read(::mojo::test::blink::TestWTFCodeGeneration2::DataView input, ::mojo::test::blink::TestWTFCodeGeneration2Ptr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_WTF_TYPES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogNjE4NiwgImJlZ2luIjogNjE3OSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGIn19LCB7ImVuZCI6IDY4
ODIsICJiZWdpbiI6IDY4NzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuVGVzdFdURi5OZXN0ZWRFbnVtIn19LCB7ImVuZCI6IDcwODMsICJiZWdp
biI6IDcwNzMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuVGVzdFdURi5FY2hvU3RyaW5nIn19LCB7ImVuZCI6IDczNDAsICJiZWdpbiI6IDczMjUs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVz
dFdURi5FY2hvU3RyaW5nQXJyYXkifX0sIHsiZW5kIjogNzYzOSwgImJlZ2luIjogNzYyNiwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RG
LkVjaG9TdHJpbmdNYXAifX0sIHsiZW5kIjogODAxOCwgImJlZ2luIjogODAwOCwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGLkVjaG9T
dHJpbmcifX0sIHsiZW5kIjogODE1OCwgImJlZ2luIjogODE0MywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGLkVjaG9TdHJpbmdBcnJh
eSJ9fSwgeyJlbmQiOiA4MzI4LCAiYmVnaW4iOiA4MzE1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RXVEYuRWNob1N0cmluZ01hcCJ9fSwg
eyJlbmQiOiAxMDA0NSwgImJlZ2luIjogMTAwMzIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFdURlN0cnVjdCJ9fSwgeyJlbmQiOiAxMDMy
MiwgImJlZ2luIjogMTAzMTIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuVGVzdFdURlN0cnVjdC5OZXN0ZWRFbnVtIn19LCB7ImVuZCI6IDEzODE3
LCAiYmVnaW4iOiAxMzgxNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5UZXN0V1RGU3RydWN0LnN0ciJ9fSwgeyJlbmQiOiAxMzg5MSwgImJlZ2lu
IjogMTM4ODQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuVGVzdFdURlN0cnVjdC5pbnRlZ2VyIn19LCB7ImVuZCI6IDE0OTQ0LCAiYmVnaW4iOiAx
NDkyMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5UZXN0V1RGQ29kZUdlbmVyYXRpb24yIn19LCB7ImVuZCI6IDE3MzMzLCAiYmVnaW4iOiAxNzMy
NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5U
ZXN0V1RGQ29kZUdlbmVyYXRpb24yLnN0ciJ9fSwgeyJlbmQiOiAxNzQ1NCwgImJlZ2luIjogMTc0
NDcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
VGVzdFdURkNvZGVHZW5lcmF0aW9uMi5zdHIifX0sIHsiZW5kIjogMTc1OTksICJiZWdpbiI6IDE3
NTkyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LlRlc3RXVEZDb2RlR2VuZXJhdGlvbjIuc3RyIn19LCB7ImVuZCI6IDE3NzA3LCAiYmVnaW4iOiAx
NzcwMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5UZXN0V1RGQ29kZUdlbmVyYXRpb24yLnN0cnMifX0sIHsiZW5kIjogMTc4NDQsICJiZWdpbiI6
IDE3ODM2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LlRlc3RXVEZDb2RlR2VuZXJhdGlvbjIuc3RycyJ9fSwgeyJlbmQiOiAxNzk5MywgImJlZ2lu
IjogMTc5ODUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRlc3QuVGVzdFdURkNvZGVHZW5lcmF0aW9uMi5zdHJzIn19LCB7ImVuZCI6IDE4MTE0LCAiYmVn
aW4iOiAxODEwNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5UZXN0V1RGQ29kZUdlbmVyYXRpb24yLnN0cl9tYXAifX0sIHsiZW5kIjogMTgyNzQs
ICJiZWdpbiI6IDE4MjYzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlRlc3RXVEZDb2RlR2VuZXJhdGlvbjIuc3RyX21hcCJ9fSwgeyJlbmQiOiAx
ODQzNSwgImJlZ2luIjogMTg0MjQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuVGVzdFdURkNvZGVHZW5lcmF0aW9uMi5zdHJfbWFwIn19LCB7ImVu
ZCI6IDE5NDQzLCAiYmVnaW4iOiAxOTQyMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGQ29kZUdlbmVyYXRpb24ifX0sIHsiZW5kIjog
MjM1ODAsICJiZWdpbiI6IDIzNTc3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LlRlc3RXVEZDb2RlR2VuZXJhdGlvbi5zdHIifX0sIHsiZW5kIjog
MjM2NzYsICJiZWdpbiI6IDIzNjY0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LlRlc3RXVEZDb2RlR2VuZXJhdGlvbi5udWxsYWJsZV9zdHIifX0s
IHsiZW5kIjogMjM3NjksICJiZWdpbiI6IDIzNzY1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RXVEZDb2RlR2VuZXJhdGlvbi5zdHJzIn19
LCB7ImVuZCI6IDIzODgwLCAiYmVnaW4iOiAyMzg2NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGQ29kZUdlbmVyYXRpb24ubnVsbGFi
bGVfc3RycyJ9fSwgeyJlbmQiOiAyMzk4NiwgImJlZ2luIjogMjM5ODAsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFdURkNvZGVHZW5lcmF0
aW9uLmFycmF5cyJ9fSwgeyJlbmQiOiAyNDA3NCwgImJlZ2luIjogMjQwNjksICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFdURkNvZGVHZW5l
cmF0aW9uLmJvb2xzIn19LCB7ImVuZCI6IDI0MTkzLCAiYmVnaW4iOiAyNDE4NiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0V1RGQ29kZUdl
bmVyYXRpb24uaGFuZGxlcyJ9fSwgeyJlbmQiOiAyNDMwNiwgImJlZ2luIjogMjQyOTksICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdFdURkNv
ZGVHZW5lcmF0aW9uLnN0cl9tYXAifX0sIHsiZW5kIjogMjQ0MjgsICJiZWdpbiI6IDI0NDE5LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RX
VEZDb2RlR2VuZXJhdGlvbi5hcnJheV9tYXAifX0sIHsiZW5kIjogMjQ1NjMsICJiZWdpbiI6IDI0
NTUzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LlRlc3RXVEZDb2RlR2VuZXJhdGlvbi5oYW5kbGVfbWFwIn19LCB7ImVuZCI6IDI0NjkxLCAiYmVn
aW4iOiAyNDY4MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5UZXN0V1RGQ29kZUdlbmVyYXRpb24uc3RyX21hcHMifX0sIHsiZW5kIjogMjU4MjMs
ICJiZWdpbiI6IDI1ODAzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlRlc3RXVEZTdHJ1Y3RXcmFwcGVyIn19LCB7ImVuZCI6IDI5NzYxLCAiYmVn
aW4iOiAyOTc0OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5UZXN0V1RGU3RydWN0V3JhcHBlci5uZXN0ZWRfc3RydWN0In19LCB7ImVuZCI6IDI5
ODc0LCAiYmVnaW4iOiAyOTg2MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5UZXN0V1RGU3RydWN0V3JhcHBlci5hcnJheV9zdHJ1Y3QifX0sIHsi
ZW5kIjogMzAwMDIsICJiZWdpbiI6IDI5OTkyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RXVEZTdHJ1Y3RXcmFwcGVyLm1hcF9zdHJ1Y3Qi
fX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/