// mojo/public/interfaces/bindings/tests/math_calculator.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_MATH_CALCULATOR_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_MATH_CALCULATOR_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/math_calculator.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/math_calculator.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace math {

class CalculatorProxy;

template <typename ImplRefTraits>
class CalculatorStub;

class CalculatorRequestValidator;
class CalculatorResponseValidator;


// @generated_from: math.Calculator
class  Calculator
    : public CalculatorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = CalculatorInterfaceBase;
  using Proxy_ = CalculatorProxy;

  template <typename ImplRefTraits>
  using Stub_ = CalculatorStub<ImplRefTraits>;

  using RequestValidator_ = CalculatorRequestValidator;
  using ResponseValidator_ = CalculatorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kClearMinVersion = 0,
    kAddMinVersion = 0,
    kMultiplyMinVersion = 0,
  };
  virtual ~Calculator() {}


  using ClearCallback = base::OnceCallback<void(double)>;
  
// @generated_from: math.Calculator.Clear
  virtual void Clear(ClearCallback callback) = 0;


  using AddCallback = base::OnceCallback<void(double)>;
  
// @generated_from: math.Calculator.Add
  virtual void Add(double value, AddCallback callback) = 0;


  using MultiplyCallback = base::OnceCallback<void(double)>;
  
// @generated_from: math.Calculator.Multiply
  virtual void Multiply(double value, MultiplyCallback callback) = 0;
};



// @generated_from: math.Calculator
class  CalculatorProxy
    : public Calculator {
 public:
  using InterfaceType = Calculator;

  explicit CalculatorProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: math.Calculator.Clear
  void Clear(ClearCallback callback) final;
  
// @generated_from: math.Calculator.Add
  void Add(double value, AddCallback callback) final;
  
// @generated_from: math.Calculator.Multiply
  void Multiply(double value, MultiplyCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  CalculatorStubDispatch {
 public:
  static bool Accept(Calculator* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Calculator* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Calculator>>
class CalculatorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CalculatorStub() {}
  ~CalculatorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CalculatorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CalculatorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  CalculatorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  CalculatorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace math

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_MATH_CALCULATOR_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTg2NywgImJlZ2luIjogMTg1NywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1hdGguQ2FsY3VsYXRvciJ9fSwgeyJlbmQiOiAyNjQx
LCAiYmVnaW4iOiAyNjM2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibWF0aC5DYWxjdWxhdG9yLkNsZWFyIn19LCB7ImVuZCI6IDI3OTAsICJiZWdpbiI6IDI3ODcs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtYXRoLkNhbGN1bGF0
b3IuQWRkIn19LCB7ImVuZCI6IDI5NjYsICJiZWdpbiI6IDI5NTgsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtYXRoLkNhbGN1bGF0b3IuTXVsdGlwbHkifX0sIHsi
ZW5kIjogMzI4MSwgImJlZ2luIjogMzI3NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1hdGguQ2FsY3VsYXRvci5DbGVhciJ9fSwgeyJlbmQiOiAzMzY2LCAiYmVn
aW4iOiAzMzYzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibWF0
aC5DYWxjdWxhdG9yLkFkZCJ9fSwgeyJlbmQiOiAzNDczLCAiYmVnaW4iOiAzNDY1LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibWF0aC5DYWxjdWxhdG9yLk11bHRp
cGx5In19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/