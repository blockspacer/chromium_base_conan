// mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace blink {

class InterfaceXProxy;

template <typename ImplRefTraits>
class InterfaceXStub;

class InterfaceXRequestValidator;


// @generated_from: mojo.test.InterfaceX
class  InterfaceX
    : public InterfaceXInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = InterfaceXInterfaceBase;
  using Proxy_ = InterfaceXProxy;

  template <typename ImplRefTraits>
  using Stub_ = InterfaceXStub<ImplRefTraits>;

  using RequestValidator_ = InterfaceXRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~InterfaceX() {}
};

class AssociatedConformanceTestInterfaceProxy;

template <typename ImplRefTraits>
class AssociatedConformanceTestInterfaceStub;

class AssociatedConformanceTestInterfaceRequestValidator;


// @generated_from: mojo.test.AssociatedConformanceTestInterface
class  AssociatedConformanceTestInterface
    : public AssociatedConformanceTestInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AssociatedConformanceTestInterfaceInterfaceBase;
  using Proxy_ = AssociatedConformanceTestInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = AssociatedConformanceTestInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = AssociatedConformanceTestInterfaceRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kMethod0MinVersion = 0,
    kMethod1MinVersion = 0,
    kMethod2MinVersion = 0,
    kMethod3MinVersion = 0,
  };
  virtual ~AssociatedConformanceTestInterface() {}

  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method0
  virtual void Method0(::mojo::PendingAssociatedRemote<InterfaceX> param0) = 0;

  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method1
  virtual void Method1(::mojo::PendingAssociatedReceiver<InterfaceX> param0) = 0;

  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method2
  virtual void Method2(::mojo::PendingAssociatedRemote<InterfaceX> param0) = 0;

  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method3
  virtual void Method3(WTF::Vector<::mojo::PendingAssociatedRemote<InterfaceX>> param0) = 0;
};



// @generated_from: mojo.test.InterfaceX
class  InterfaceXProxy
    : public InterfaceX {
 public:
  using InterfaceType = InterfaceX;

  explicit InterfaceXProxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.AssociatedConformanceTestInterface
class  AssociatedConformanceTestInterfaceProxy
    : public AssociatedConformanceTestInterface {
 public:
  using InterfaceType = AssociatedConformanceTestInterface;

  explicit AssociatedConformanceTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method0
  void Method0(::mojo::PendingAssociatedRemote<InterfaceX> param0) final;
  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method1
  void Method1(::mojo::PendingAssociatedReceiver<InterfaceX> param0) final;
  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method2
  void Method2(::mojo::PendingAssociatedRemote<InterfaceX> param0) final;
  
// @generated_from: mojo.test.AssociatedConformanceTestInterface.Method3
  void Method3(WTF::Vector<::mojo::PendingAssociatedRemote<InterfaceX>> param0) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  InterfaceXStubDispatch {
 public:
  static bool Accept(InterfaceX* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      InterfaceX* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<InterfaceX>>
class InterfaceXStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  InterfaceXStub() {}
  ~InterfaceXStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfaceXStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfaceXStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AssociatedConformanceTestInterfaceStubDispatch {
 public:
  static bool Accept(AssociatedConformanceTestInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AssociatedConformanceTestInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AssociatedConformanceTestInterface>>
class AssociatedConformanceTestInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AssociatedConformanceTestInterfaceStub() {}
  ~AssociatedConformanceTestInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedConformanceTestInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedConformanceTestInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  InterfaceXRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AssociatedConformanceTestInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_ASSOCIATED_INTERFACES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjIyOCwgImJlZ2luIjogMjIxOCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5JbnRlcmZhY2VYIn19LCB7ImVuZCI6
IDMwOTMsICJiZWdpbiI6IDMwNTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuQXNzb2NpYXRlZENvbmZvcm1hbmNlVGVzdEludGVyZmFjZSJ9fSwg
eyJlbmQiOiA0MDEzLCAiYmVnaW4iOiA0MDA2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRlcmZh
Y2UuTWV0aG9kMCJ9fSwgeyJlbmQiOiA0MTcwLCAiYmVnaW4iOiA0MTYzLCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25mb3Jt
YW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9kMSJ9fSwgeyJlbmQiOiA0MzI5LCAiYmVnaW4iOiA0MzIy
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFz
c29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9kMiJ9fSwgeyJlbmQiOiA0NDg2
LCAiYmVnaW4iOiA0NDc5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9kMyJ9
fSwgeyJlbmQiOiA1MjU5LCAiYmVnaW4iOiA1MjUyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRl
cmZhY2UuTWV0aG9kMCJ9fSwgeyJlbmQiOiA1NDA5LCAiYmVnaW4iOiA1NDAyLCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25m
b3JtYW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9kMSJ9fSwgeyJlbmQiOiA1NTYxLCAiYmVnaW4iOiA1
NTU0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LkFzc29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9kMiJ9fSwgeyJlbmQiOiA1
NzExLCAiYmVnaW4iOiA1NzA0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LkFzc29jaWF0ZWRDb25mb3JtYW5jZVRlc3RJbnRlcmZhY2UuTWV0aG9k
MyJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/