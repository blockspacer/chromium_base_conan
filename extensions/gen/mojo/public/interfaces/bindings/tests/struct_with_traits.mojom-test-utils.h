// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_TEST_UTILS_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_TEST_UTILS_H_

#include "mojo/public/interfaces/bindings/tests/struct_with_traits.mojom.h"


namespace mojo {
namespace test {


class  TraitsTestServiceInterceptorForTesting : public TraitsTestService {
  virtual TraitsTestService* GetForwardingInterface() = 0;
  void EchoStructWithTraits(const ::mojo::test::StructWithTraitsImpl& s, EchoStructWithTraitsCallback callback) override;
  void EchoTrivialStructWithTraits(::mojo::test::TrivialStructWithTraitsImpl s, EchoTrivialStructWithTraitsCallback callback) override;
  void EchoMoveOnlyStructWithTraits(::mojo::test::MoveOnlyStructWithTraitsImpl s, EchoMoveOnlyStructWithTraitsCallback callback) override;
  void EchoNullableMoveOnlyStructWithTraits(base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, EchoNullableMoveOnlyStructWithTraitsCallback callback) override;
  void EchoEnumWithTraits(::mojo::test::EnumWithTraitsImpl e, EchoEnumWithTraitsCallback callback) override;
  void EchoStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoStructWithTraitsForUniquePtrCallback callback) override;
  void EchoNullableStructWithTraitsForUniquePtr(::std::unique_ptr<int> e, EchoNullableStructWithTraitsForUniquePtrCallback callback) override;
  void EchoUnionWithTraits(::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, EchoUnionWithTraitsCallback callback) override;
};
class  TraitsTestServiceAsyncWaiter {
 public:
  explicit TraitsTestServiceAsyncWaiter(TraitsTestService* proxy);
  ~TraitsTestServiceAsyncWaiter();
  void EchoStructWithTraits(
      const ::mojo::test::StructWithTraitsImpl& s, ::mojo::test::StructWithTraitsImpl* out_passed);
  void EchoTrivialStructWithTraits(
      ::mojo::test::TrivialStructWithTraitsImpl s, ::mojo::test::TrivialStructWithTraitsImpl* out_passed);
  void EchoMoveOnlyStructWithTraits(
      ::mojo::test::MoveOnlyStructWithTraitsImpl s, ::mojo::test::MoveOnlyStructWithTraitsImpl* out_passed);
  void EchoNullableMoveOnlyStructWithTraits(
      base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl> s, base::Optional<::mojo::test::MoveOnlyStructWithTraitsImpl>* out_passed);
  void EchoEnumWithTraits(
      ::mojo::test::EnumWithTraitsImpl e, ::mojo::test::EnumWithTraitsImpl* out_passed);
  void EchoStructWithTraitsForUniquePtr(
      ::std::unique_ptr<int> e, ::std::unique_ptr<int>* out_passed);
  void EchoNullableStructWithTraitsForUniquePtr(
      ::std::unique_ptr<int> e, ::std::unique_ptr<int>* out_passed);
  void EchoUnionWithTraits(
      ::std::unique_ptr<::mojo::test::UnionWithTraitsBase> u, ::std::unique_ptr<::mojo::test::UnionWithTraitsBase>* out_passed);

 private:
  TraitsTestService* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(TraitsTestServiceAsyncWaiter);
};


class  TestUnserializedStructInterceptorForTesting : public TestUnserializedStruct {
  virtual TestUnserializedStruct* GetForwardingInterface() = 0;
  void PassUnserializedStruct(const ::mojo::test::StructWithUnreachableTraitsImpl& s, PassUnserializedStructCallback callback) override;
};
class  TestUnserializedStructAsyncWaiter {
 public:
  explicit TestUnserializedStructAsyncWaiter(TestUnserializedStruct* proxy);
  ~TestUnserializedStructAsyncWaiter();
  void PassUnserializedStruct(
      const ::mojo::test::StructWithUnreachableTraitsImpl& s, ::mojo::test::StructWithUnreachableTraitsImpl* out_passed);

 private:
  TestUnserializedStruct* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(TestUnserializedStructAsyncWaiter);
};


class  ForceSerializeTesterInterceptorForTesting : public ForceSerializeTester {
  virtual ForceSerializeTester* GetForwardingInterface() = 0;
  void SendForceSerializedStruct(const ::mojo::test::StructForceSerializeImpl& s, SendForceSerializedStructCallback callback) override;
  void SendNestedForceSerializedStruct(const ::mojo::test::StructNestedForceSerializeImpl& s, SendNestedForceSerializedStructCallback callback) override;
};
class  ForceSerializeTesterAsyncWaiter {
 public:
  explicit ForceSerializeTesterAsyncWaiter(ForceSerializeTester* proxy);
  ~ForceSerializeTesterAsyncWaiter();
  void SendForceSerializedStruct(
      const ::mojo::test::StructForceSerializeImpl& s, ::mojo::test::StructForceSerializeImpl* out_passed);
  void SendNestedForceSerializedStruct(
      const ::mojo::test::StructNestedForceSerializeImpl& s, ::mojo::test::StructNestedForceSerializeImpl* out_passed);

 private:
  ForceSerializeTester* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ForceSerializeTesterAsyncWaiter);
};




}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_TEST_UTILS_H_