// mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/validation_test_associated_interfaces.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');



  function AssociatedConformanceTestInterface_Method0_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedConformanceTestInterface_Method0_Params.prototype.initDefaults_ = function() {
    this.param0 = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  AssociatedConformanceTestInterface_Method0_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedConformanceTestInterface_Method0_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedConformanceTestInterface_Method0_Params.param0
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedConformanceTestInterface_Method0_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedConformanceTestInterface_Method0_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedConformanceTestInterface_Method0_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.param0 =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  AssociatedConformanceTestInterface_Method0_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedConformanceTestInterface_Method0_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.param0);
  };
  function AssociatedConformanceTestInterface_Method1_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedConformanceTestInterface_Method1_Params.prototype.initDefaults_ = function() {
    this.param0 = new associatedBindings.AssociatedInterfaceRequest();
  };
  AssociatedConformanceTestInterface_Method1_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedConformanceTestInterface_Method1_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedConformanceTestInterface_Method1_Params.param0
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedConformanceTestInterface_Method1_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedConformanceTestInterface_Method1_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedConformanceTestInterface_Method1_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.param0 =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AssociatedConformanceTestInterface_Method1_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedConformanceTestInterface_Method1_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.param0);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AssociatedConformanceTestInterface_Method2_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedConformanceTestInterface_Method2_Params.prototype.initDefaults_ = function() {
    this.param0 = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  AssociatedConformanceTestInterface_Method2_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedConformanceTestInterface_Method2_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedConformanceTestInterface_Method2_Params.param0
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedConformanceTestInterface_Method2_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedConformanceTestInterface_Method2_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedConformanceTestInterface_Method2_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.param0 =
        decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    return val;
  };

  AssociatedConformanceTestInterface_Method2_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedConformanceTestInterface_Method2_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.param0);
  };
  function AssociatedConformanceTestInterface_Method3_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedConformanceTestInterface_Method3_Params.prototype.initDefaults_ = function() {
    this.param0 = null;
  };
  AssociatedConformanceTestInterface_Method3_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedConformanceTestInterface_Method3_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedConformanceTestInterface_Method3_Params.param0
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.AssociatedInterfacePtrInfo, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedConformanceTestInterface_Method3_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedConformanceTestInterface_Method3_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedConformanceTestInterface_Method3_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.param0 =
        decoder.decodeArrayPointer(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  AssociatedConformanceTestInterface_Method3_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedConformanceTestInterface_Method3_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.AssociatedInterfacePtrInfo, val.param0);
  };

  function InterfaceXPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfaceX,
                                                   handleOrPtrInfo);
  }

  function InterfaceXAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfaceX, associatedInterfacePtrInfo);
  }

  InterfaceXAssociatedPtr.prototype =
      Object.create(InterfaceXPtr.prototype);
  InterfaceXAssociatedPtr.prototype.constructor =
      InterfaceXAssociatedPtr;

  function InterfaceXProxy(receiver) {
    this.receiver_ = receiver;
  }

  function InterfaceXStub(delegate) {
    this.delegate_ = delegate;
  }

  InterfaceXStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InterfaceXStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateInterfaceXRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateInterfaceXResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var InterfaceX = {
    name: 'mojo.test.InterfaceX',
    kVersion: 0,
    ptrClass: InterfaceXPtr,
    proxyClass: InterfaceXProxy,
    stubClass: InterfaceXStub,
    validateRequest: validateInterfaceXRequest,
    validateResponse: null,
  };
  InterfaceXStub.prototype.validator = validateInterfaceXRequest;
  InterfaceXProxy.prototype.validator = null;
  var kAssociatedConformanceTestInterface_Method0_Name = 0;
  var kAssociatedConformanceTestInterface_Method1_Name = 1;
  var kAssociatedConformanceTestInterface_Method2_Name = 2;
  var kAssociatedConformanceTestInterface_Method3_Name = 3;

  function AssociatedConformanceTestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AssociatedConformanceTestInterface,
                                                   handleOrPtrInfo);
  }

  function AssociatedConformanceTestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AssociatedConformanceTestInterface, associatedInterfacePtrInfo);
  }

  AssociatedConformanceTestInterfaceAssociatedPtr.prototype =
      Object.create(AssociatedConformanceTestInterfacePtr.prototype);
  AssociatedConformanceTestInterfaceAssociatedPtr.prototype.constructor =
      AssociatedConformanceTestInterfaceAssociatedPtr;

  function AssociatedConformanceTestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  AssociatedConformanceTestInterfacePtr.prototype.method0 = function() {
    return AssociatedConformanceTestInterfaceProxy.prototype.method0
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedConformanceTestInterfaceProxy.prototype.method0 = function(param0) {
    var params_ = new AssociatedConformanceTestInterface_Method0_Params();
    params_.param0 = param0;
    var builder = new codec.MessageV2Builder(
        kAssociatedConformanceTestInterface_Method0_Name,
        codec.align(AssociatedConformanceTestInterface_Method0_Params.encodedSize));
    builder.setPayload(AssociatedConformanceTestInterface_Method0_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AssociatedConformanceTestInterfacePtr.prototype.method1 = function() {
    return AssociatedConformanceTestInterfaceProxy.prototype.method1
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedConformanceTestInterfaceProxy.prototype.method1 = function(param0) {
    var params_ = new AssociatedConformanceTestInterface_Method1_Params();
    params_.param0 = param0;
    var builder = new codec.MessageV2Builder(
        kAssociatedConformanceTestInterface_Method1_Name,
        codec.align(AssociatedConformanceTestInterface_Method1_Params.encodedSize));
    builder.setPayload(AssociatedConformanceTestInterface_Method1_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AssociatedConformanceTestInterfacePtr.prototype.method2 = function() {
    return AssociatedConformanceTestInterfaceProxy.prototype.method2
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedConformanceTestInterfaceProxy.prototype.method2 = function(param0) {
    var params_ = new AssociatedConformanceTestInterface_Method2_Params();
    params_.param0 = param0;
    var builder = new codec.MessageV2Builder(
        kAssociatedConformanceTestInterface_Method2_Name,
        codec.align(AssociatedConformanceTestInterface_Method2_Params.encodedSize));
    builder.setPayload(AssociatedConformanceTestInterface_Method2_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AssociatedConformanceTestInterfacePtr.prototype.method3 = function() {
    return AssociatedConformanceTestInterfaceProxy.prototype.method3
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedConformanceTestInterfaceProxy.prototype.method3 = function(param0) {
    var params_ = new AssociatedConformanceTestInterface_Method3_Params();
    params_.param0 = param0;
    var builder = new codec.MessageV2Builder(
        kAssociatedConformanceTestInterface_Method3_Name,
        codec.align(AssociatedConformanceTestInterface_Method3_Params.encodedSize));
    builder.setPayload(AssociatedConformanceTestInterface_Method3_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AssociatedConformanceTestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  AssociatedConformanceTestInterfaceStub.prototype.method0 = function(param0) {
    return this.delegate_ && this.delegate_.method0 && this.delegate_.method0(param0);
  }
  AssociatedConformanceTestInterfaceStub.prototype.method1 = function(param0) {
    return this.delegate_ && this.delegate_.method1 && this.delegate_.method1(param0);
  }
  AssociatedConformanceTestInterfaceStub.prototype.method2 = function(param0) {
    return this.delegate_ && this.delegate_.method2 && this.delegate_.method2(param0);
  }
  AssociatedConformanceTestInterfaceStub.prototype.method3 = function(param0) {
    return this.delegate_ && this.delegate_.method3 && this.delegate_.method3(param0);
  }

  AssociatedConformanceTestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAssociatedConformanceTestInterface_Method0_Name:
      var params = reader.decodeStruct(AssociatedConformanceTestInterface_Method0_Params);
      this.method0(params.param0);
      return true;
    case kAssociatedConformanceTestInterface_Method1_Name:
      var params = reader.decodeStruct(AssociatedConformanceTestInterface_Method1_Params);
      this.method1(params.param0);
      return true;
    case kAssociatedConformanceTestInterface_Method2_Name:
      var params = reader.decodeStruct(AssociatedConformanceTestInterface_Method2_Params);
      this.method2(params.param0);
      return true;
    case kAssociatedConformanceTestInterface_Method3_Name:
      var params = reader.decodeStruct(AssociatedConformanceTestInterface_Method3_Params);
      this.method3(params.param0);
      return true;
    default:
      return false;
    }
  };

  AssociatedConformanceTestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAssociatedConformanceTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAssociatedConformanceTestInterface_Method0_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedConformanceTestInterface_Method0_Params;
      break;
      case kAssociatedConformanceTestInterface_Method1_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedConformanceTestInterface_Method1_Params;
      break;
      case kAssociatedConformanceTestInterface_Method2_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedConformanceTestInterface_Method2_Params;
      break;
      case kAssociatedConformanceTestInterface_Method3_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedConformanceTestInterface_Method3_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAssociatedConformanceTestInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AssociatedConformanceTestInterface = {
    name: 'mojo.test.AssociatedConformanceTestInterface',
    kVersion: 0,
    ptrClass: AssociatedConformanceTestInterfacePtr,
    proxyClass: AssociatedConformanceTestInterfaceProxy,
    stubClass: AssociatedConformanceTestInterfaceStub,
    validateRequest: validateAssociatedConformanceTestInterfaceRequest,
    validateResponse: null,
  };
  AssociatedConformanceTestInterfaceStub.prototype.validator = validateAssociatedConformanceTestInterfaceRequest;
  AssociatedConformanceTestInterfaceProxy.prototype.validator = null;
  exports.InterfaceX = InterfaceX;
  exports.InterfaceXPtr = InterfaceXPtr;
  exports.InterfaceXAssociatedPtr = InterfaceXAssociatedPtr;
  exports.AssociatedConformanceTestInterface = AssociatedConformanceTestInterface;
  exports.AssociatedConformanceTestInterfacePtr = AssociatedConformanceTestInterfacePtr;
  exports.AssociatedConformanceTestInterfaceAssociatedPtr = AssociatedConformanceTestInterfaceAssociatedPtr;
})();