// mojo/public/interfaces/bindings/tests/echo.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_ECHO_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_ECHO_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace test {
namespace echo {
namespace mojom {
namespace internal {
class  Echo_EchoPoint_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::test::echo_import::mojom::internal::Point_Data> point;

 private:
  friend class mojo::internal::MessageFragment<Echo_EchoPoint_Params_Data>;

  Echo_EchoPoint_Params_Data();
  ~Echo_EchoPoint_Params_Data() = delete;
};
static_assert(sizeof(Echo_EchoPoint_Params_Data) == 16,
              "Bad sizeof(Echo_EchoPoint_Params_Data)");
class  Echo_EchoPoint_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::test::echo_import::mojom::internal::Point_Data> result;

 private:
  friend class mojo::internal::MessageFragment<Echo_EchoPoint_ResponseParams_Data>;

  Echo_EchoPoint_ResponseParams_Data();
  ~Echo_EchoPoint_ResponseParams_Data() = delete;
};
static_assert(sizeof(Echo_EchoPoint_ResponseParams_Data) == 16,
              "Bad sizeof(Echo_EchoPoint_ResponseParams_Data)");

}  // namespace internal


class Echo_EchoPoint_ParamsDataView {
 public:
  Echo_EchoPoint_ParamsDataView() {}

  Echo_EchoPoint_ParamsDataView(
      internal::Echo_EchoPoint_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointDataView(
      ::test::echo_import::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPoint(UserType* output) {
    
    auto* pointer = data_->point.Get();
    return mojo::internal::Deserialize<::test::echo_import::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::Echo_EchoPoint_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Echo_EchoPoint_ResponseParamsDataView {
 public:
  Echo_EchoPoint_ResponseParamsDataView() {}

  Echo_EchoPoint_ResponseParamsDataView(
      internal::Echo_EchoPoint_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::test::echo_import::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::test::echo_import::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::Echo_EchoPoint_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void Echo_EchoPoint_ParamsDataView::GetPointDataView(
    ::test::echo_import::mojom::PointDataView* output) {
  auto pointer = data_->point.Get();
  *output = ::test::echo_import::mojom::PointDataView(pointer, message_);
}


inline void Echo_EchoPoint_ResponseParamsDataView::GetResultDataView(
    ::test::echo_import::mojom::PointDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::test::echo_import::mojom::PointDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace echo
}  // namespace test

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_ECHO_MOJOM_PARAMS_DATA_H_