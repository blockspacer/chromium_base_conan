// mojo/public/interfaces/bindings/tests/test_unions.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';

import {
  PointOrShape as imported_PointOrShape,
  PointOrShapeSpec as imported_PointOrShapeSpec
} from './sample_import.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const AnEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const AnEnum = {
  
  FIRST: 0,
  SECOND: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const AnExtensibleEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const AnExtensibleEnum = {
  
  FIRST: 0,
  SECOND: 1,
  THIRD: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const SmallCachePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.SmallCache', scope);
  }
};

/** @interface */
export const SmallCacheInterface = class {
  
  /**
   * @param { !bigint } intValue
   */

  setIntValue(intValue) {}
  
  /**
   * @return {!Promise<{
        intValue: !bigint,
   *  }>}
   */

  getIntValue() {}
};

/**
 * @implements { SmallCacheInterface }
 */
export const SmallCacheRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SmallCachePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SmallCachePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SmallCachePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !bigint } intValue
   */

  setIntValue(
      intValue) {
    this.proxy.sendMessage(
        0,
        SmallCache_SetIntValue_ParamsSpec.$,
        null,
        [
          intValue
        ]);
  }

  
  /**
   * @return {!Promise<{
        intValue: !bigint,
   *  }>}
   */

  getIntValue() {
    return this.proxy.sendMessage(
        1,
        SmallCache_GetIntValue_ParamsSpec.$,
        SmallCache_GetIntValue_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SmallCache
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const SmallCacheReceiver = class {
  /**
   * @param {!SmallCacheInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SmallCacheRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SmallCacheRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SmallCacheRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SmallCache_SetIntValue_ParamsSpec.$,
        null,
        impl.setIntValue.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        SmallCache_GetIntValue_ParamsSpec.$,
        SmallCache_GetIntValue_ResponseParamsSpec.$,
        impl.getIntValue.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const SmallCache = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.SmallCache";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SmallCacheRemote}
   */
  static getRemote() {
    let remote = new SmallCacheRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SmallCache
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const SmallCacheCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SmallCacheRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SmallCacheRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setIntValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SmallCache_SetIntValue_ParamsSpec.$,
        null,
        this.setIntValue.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getIntValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        SmallCache_GetIntValue_ParamsSpec.$,
        SmallCache_GetIntValue_ResponseParamsSpec.$,
        this.getIntValue.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const UnionInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.UnionInterface', scope);
  }
};

/** @interface */
export const UnionInterfaceInterface = class {
  
  /**
   * @param { !PodUnion } inVal
   * @return {!Promise<{
        outVal: !PodUnion,
   *  }>}
   */

  echo(inVal) {}
};

/**
 * @implements { UnionInterfaceInterface }
 */
export const UnionInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!UnionInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          UnionInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!UnionInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !PodUnion } inVal
   * @return {!Promise<{
        outVal: !PodUnion,
   *  }>}
   */

  echo(
      inVal) {
    return this.proxy.sendMessage(
        0,
        UnionInterface_Echo_ParamsSpec.$,
        UnionInterface_Echo_ResponseParamsSpec.$,
        [
          inVal
        ]);
  }
};

/**
 * An object which receives request messages for the UnionInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const UnionInterfaceReceiver = class {
  /**
   * @param {!UnionInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!UnionInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        UnionInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!UnionInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        UnionInterface_Echo_ParamsSpec.$,
        UnionInterface_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const UnionInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.UnionInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!UnionInterfaceRemote}
   */
  static getRemote() {
    let remote = new UnionInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the UnionInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const UnionInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      UnionInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!UnionInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        UnionInterface_Echo_ParamsSpec.$,
        UnionInterface_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WrapperStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DummyStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallStructNonNullableUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallObjStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TryNonNullStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ImportedUnionStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallCache_SetIntValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallCache_GetIntValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SmallCache_GetIntValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UnionInterface_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UnionInterface_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const PodUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const ObjectUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const HandleUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const OldUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const NewUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const ImportedUnionUnionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const UnionWithStringForFirstFieldSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    WrapperStructSpec.$,
    'WrapperStruct',
    [
      mojo.internal.StructField(
        'objectUnion', 0,
        0,
        ObjectUnionSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'podUnion', 16,
        0,
        PodUnionSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'handleUnion', 32,
        0,
        HandleUnionSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 56],]);



/**
 * @record
 */
export const WrapperStruct = class {
  constructor() {
    /** @type { (ObjectUnion|undefined) } */
    this.objectUnion;
    /** @type { (PodUnion|undefined) } */
    this.podUnion;
    /** @type { (HandleUnion|undefined) } */
    this.handleUnion;
  }
};



mojo.internal.Struct(
    DummyStructSpec.$,
    'DummyStruct',
    [
      mojo.internal.StructField(
        'fInt8', 0,
        0,
        mojo.internal.Int8,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const DummyStruct = class {
  constructor() {
    /** @type { !number } */
    this.fInt8;
  }
};



mojo.internal.Struct(
    SmallStructSpec.$,
    'SmallStruct',
    [
      mojo.internal.StructField(
        'dummyStruct', 0,
        0,
        DummyStructSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'podUnion', 8,
        0,
        PodUnionSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'podUnionArray', 24,
        0,
        mojo.internal.Array(PodUnionSpec.$, false),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'nullablePodUnionArray', 32,
        0,
        mojo.internal.Array(PodUnionSpec.$, true),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'sArray', 40,
        0,
        mojo.internal.Array(DummyStructSpec.$, false),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'podUnionMap', 48,
        0,
        mojo.internal.Map(mojo.internal.String, PodUnionSpec.$, false),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'nullablePodUnionMap', 56,
        0,
        mojo.internal.Map(mojo.internal.String, PodUnionSpec.$, true),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 72],]);



/**
 * @record
 */
export const SmallStruct = class {
  constructor() {
    /** @type { (DummyStruct|undefined) } */
    this.dummyStruct;
    /** @type { (PodUnion|undefined) } */
    this.podUnion;
    /** @type { (Array<!PodUnion>|undefined) } */
    this.podUnionArray;
    /** @type { (Array<?PodUnion>|undefined) } */
    this.nullablePodUnionArray;
    /** @type { (Array<!DummyStruct>|undefined) } */
    this.sArray;
    /** @type { (Object<!string, !PodUnion>|undefined) } */
    this.podUnionMap;
    /** @type { (Object<!string, ?PodUnion>|undefined) } */
    this.nullablePodUnionMap;
  }
};



mojo.internal.Struct(
    SmallStructNonNullableUnionSpec.$,
    'SmallStructNonNullableUnion',
    [
      mojo.internal.StructField(
        'podUnion', 0,
        0,
        PodUnionSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const SmallStructNonNullableUnion = class {
  constructor() {
    /** @type { !PodUnion } */
    this.podUnion;
  }
};



mojo.internal.Struct(
    SmallObjStructSpec.$,
    'SmallObjStruct',
    [
      mojo.internal.StructField(
        'objUnion', 0,
        0,
        ObjectUnionSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fInt8', 16,
        0,
        mojo.internal.Int8,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export const SmallObjStruct = class {
  constructor() {
    /** @type { !ObjectUnion } */
    this.objUnion;
    /** @type { !number } */
    this.fInt8;
  }
};



mojo.internal.Struct(
    TryNonNullStructSpec.$,
    'TryNonNullStruct',
    [
      mojo.internal.StructField(
        'nullable', 0,
        0,
        DummyStructSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'nonNullable', 8,
        0,
        DummyStructSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const TryNonNullStruct = class {
  constructor() {
    /** @type { (DummyStruct|undefined) } */
    this.nullable;
    /** @type { !DummyStruct } */
    this.nonNullable;
  }
};



mojo.internal.Struct(
    ImportedUnionStructSpec.$,
    'ImportedUnionStruct',
    [
      mojo.internal.StructField(
        'pointOrShape', 0,
        0,
        imported_PointOrShapeSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ImportedUnionStruct = class {
  constructor() {
    /** @type { !imported_PointOrShape } */
    this.pointOrShape;
  }
};



mojo.internal.Struct(
    SmallCache_SetIntValue_ParamsSpec.$,
    'SmallCache_SetIntValue_Params',
    [
      mojo.internal.StructField(
        'intValue', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SmallCache_SetIntValue_Params = class {
  constructor() {
    /** @type { !bigint } */
    this.intValue;
  }
};



mojo.internal.Struct(
    SmallCache_GetIntValue_ParamsSpec.$,
    'SmallCache_GetIntValue_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SmallCache_GetIntValue_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SmallCache_GetIntValue_ResponseParamsSpec.$,
    'SmallCache_GetIntValue_ResponseParams',
    [
      mojo.internal.StructField(
        'intValue', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SmallCache_GetIntValue_ResponseParams = class {
  constructor() {
    /** @type { !bigint } */
    this.intValue;
  }
};



mojo.internal.Struct(
    UnionInterface_Echo_ParamsSpec.$,
    'UnionInterface_Echo_Params',
    [
      mojo.internal.StructField(
        'inVal', 0,
        0,
        PodUnionSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const UnionInterface_Echo_Params = class {
  constructor() {
    /** @type { !PodUnion } */
    this.inVal;
  }
};



mojo.internal.Struct(
    UnionInterface_Echo_ResponseParamsSpec.$,
    'UnionInterface_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'outVal', 0,
        0,
        PodUnionSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const UnionInterface_Echo_ResponseParams = class {
  constructor() {
    /** @type { !PodUnion } */
    this.outVal;
  }
};

mojo.internal.Union(
    PodUnionSpec.$, 'PodUnion',
    {
      'fInt8': {
        'ordinal': 0,
        'type': mojo.internal.Int8,
      },
      'fInt8Other': {
        'ordinal': 1,
        'type': mojo.internal.Int8,
      },
      'fUint8': {
        'ordinal': 2,
        'type': mojo.internal.Uint8,
      },
      'fInt16': {
        'ordinal': 3,
        'type': mojo.internal.Int16,
      },
      'fUint16': {
        'ordinal': 4,
        'type': mojo.internal.Uint16,
      },
      'fInt32': {
        'ordinal': 5,
        'type': mojo.internal.Int32,
      },
      'fUint32': {
        'ordinal': 6,
        'type': mojo.internal.Uint32,
      },
      'fInt64': {
        'ordinal': 7,
        'type': mojo.internal.Int64,
      },
      'fUint64': {
        'ordinal': 8,
        'type': mojo.internal.Uint64,
      },
      'fFloat': {
        'ordinal': 9,
        'type': mojo.internal.Float,
      },
      'fDouble': {
        'ordinal': 10,
        'type': mojo.internal.Double,
      },
      'fBool': {
        'ordinal': 11,
        'type': mojo.internal.Bool,
      },
      'fEnum': {
        'ordinal': 12,
        'type': AnEnumSpec.$,
      },
      'fExtensibleEnum': {
        'ordinal': 13,
        'type': AnExtensibleEnumSpec.$,
      },
    });

/**
 * @typedef { {
 *   fInt8: (!number|undefined),
 *   fInt8Other: (!number|undefined),
 *   fUint8: (!number|undefined),
 *   fInt16: (!number|undefined),
 *   fUint16: (!number|undefined),
 *   fInt32: (!number|undefined),
 *   fUint32: (!number|undefined),
 *   fInt64: (!bigint|undefined),
 *   fUint64: (!bigint|undefined),
 *   fFloat: (!number|undefined),
 *   fDouble: (!number|undefined),
 *   fBool: (!boolean|undefined),
 *   fEnum: (!AnEnum|undefined),
 *   fExtensibleEnum: (!AnExtensibleEnum|undefined),
 * } }
 */
export const PodUnion = {};
mojo.internal.Union(
    ObjectUnionSpec.$, 'ObjectUnion',
    {
      'fInt8': {
        'ordinal': 0,
        'type': mojo.internal.Int8,
      },
      'fString': {
        'ordinal': 1,
        'type': mojo.internal.String,
      },
      'fDummy': {
        'ordinal': 2,
        'type': DummyStructSpec.$,
      },
      'fNullable': {
        'ordinal': 3,
        'type': DummyStructSpec.$,
        'nullable': true,
      },
      'fArrayInt8': {
        'ordinal': 4,
        'type': mojo.internal.Array(mojo.internal.Int8, false),
      },
      'fMapInt8': {
        'ordinal': 5,
        'type': mojo.internal.Map(mojo.internal.String, mojo.internal.Int8, false),
      },
      'fPodUnion': {
        'ordinal': 6,
        'type': PodUnionSpec.$,
      },
      'fSmallStructs': {
        'ordinal': 7,
        'type': mojo.internal.Array(SmallStructSpec.$, false),
      },
    });

/**
 * @typedef { {
 *   fInt8: (!number|undefined),
 *   fString: (!string|undefined),
 *   fDummy: (!DummyStruct|undefined),
 *   fNullable: (?DummyStruct|undefined),
 *   fArrayInt8: (!Array<!number>|undefined),
 *   fMapInt8: (!Object<!string, !number>|undefined),
 *   fPodUnion: (!PodUnion|undefined),
 *   fSmallStructs: (!Array<!SmallStruct>|undefined),
 * } }
 */
export const ObjectUnion = {};
mojo.internal.Union(
    HandleUnionSpec.$, 'HandleUnion',
    {
      'fHandle': {
        'ordinal': 0,
        'type': mojo.internal.Handle,
      },
      'fMessagePipe': {
        'ordinal': 1,
        'type': mojo.internal.Handle,
      },
      'fDataPipeConsumer': {
        'ordinal': 2,
        'type': mojo.internal.Handle,
      },
      'fDataPipeProducer': {
        'ordinal': 3,
        'type': mojo.internal.Handle,
      },
      'fSharedBuffer': {
        'ordinal': 4,
        'type': mojo.internal.Handle,
      },
      'fPlatform': {
        'ordinal': 5,
        'type': mojo.internal.Handle,
      },
      'fSmallCache': {
        'ordinal': 6,
        'type': mojo.internal.InterfaceProxy(SmallCacheRemote),
      },
      'fSmallCacheReceiver': {
        'ordinal': 7,
        'type': mojo.internal.InterfaceRequest(SmallCachePendingReceiver),
      },
    });

/**
 * @typedef { {
 *   fHandle: (!MojoHandle|undefined),
 *   fMessagePipe: (!MojoHandle|undefined),
 *   fDataPipeConsumer: (!MojoHandle|undefined),
 *   fDataPipeProducer: (!MojoHandle|undefined),
 *   fSharedBuffer: (!MojoHandle|undefined),
 *   fPlatform: (!MojoHandle|undefined),
 *   fSmallCache: (!SmallCacheRemote|undefined),
 *   fSmallCacheReceiver: (!SmallCachePendingReceiver|undefined),
 * } }
 */
export const HandleUnion = {};
mojo.internal.Union(
    OldUnionSpec.$, 'OldUnion',
    {
      'fInt8': {
        'ordinal': 0,
        'type': mojo.internal.Int8,
      },
    });

/**
 * @typedef { {
 *   fInt8: (!number|undefined),
 * } }
 */
export const OldUnion = {};
mojo.internal.Union(
    NewUnionSpec.$, 'NewUnion',
    {
      'fInt8': {
        'ordinal': 0,
        'type': mojo.internal.Int8,
      },
      'fInt16': {
        'ordinal': 1,
        'type': mojo.internal.Int16,
      },
    });

/**
 * @typedef { {
 *   fInt8: (!number|undefined),
 *   fInt16: (!number|undefined),
 * } }
 */
export const NewUnion = {};
mojo.internal.Union(
    ImportedUnionUnionSpec.$, 'ImportedUnionUnion',
    {
      'pointOrShape': {
        'ordinal': 0,
        'type': imported_PointOrShapeSpec.$,
      },
    });

/**
 * @typedef { {
 *   pointOrShape: (!imported_PointOrShape|undefined),
 * } }
 */
export const ImportedUnionUnion = {};
mojo.internal.Union(
    UnionWithStringForFirstFieldSpec.$, 'UnionWithStringForFirstField',
    {
      's': {
        'ordinal': 0,
        'type': mojo.internal.String,
      },
      'i': {
        'ordinal': 1,
        'type': mojo.internal.Int32,
      },
    });

/**
 * @typedef { {
 *   s: (!string|undefined),
 *   i: (!number|undefined),
 * } }
 */
export const UnionWithStringForFirstField = {};
