// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {


}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {
// Interface base classes. They are used for type safety check.
class WidgetObserverInterfaceBase {};

using WidgetObserverPtrDataView =
    mojo::InterfacePtrDataView<WidgetObserverInterfaceBase>;
using WidgetObserverRequestDataView =
    mojo::InterfaceRequestDataView<WidgetObserverInterfaceBase>;
using WidgetObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WidgetObserverInterfaceBase>;
using WidgetObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WidgetObserverInterfaceBase>;
class WidgetInterfaceBase {};

using WidgetPtrDataView =
    mojo::InterfacePtrDataView<WidgetInterfaceBase>;
using WidgetRequestDataView =
    mojo::InterfaceRequestDataView<WidgetInterfaceBase>;
using WidgetAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WidgetInterfaceBase>;
using WidgetAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WidgetInterfaceBase>;
class WidgetClientInterfaceBase {};

using WidgetClientPtrDataView =
    mojo::InterfacePtrDataView<WidgetClientInterfaceBase>;
using WidgetClientRequestDataView =
    mojo::InterfaceRequestDataView<WidgetClientInterfaceBase>;
using WidgetClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WidgetClientInterfaceBase>;
using WidgetClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WidgetClientInterfaceBase>;
class WidgetFactoryInterfaceBase {};

using WidgetFactoryPtrDataView =
    mojo::InterfacePtrDataView<WidgetFactoryInterfaceBase>;
using WidgetFactoryRequestDataView =
    mojo::InterfaceRequestDataView<WidgetFactoryInterfaceBase>;
using WidgetFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WidgetFactoryInterfaceBase>;
using WidgetFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WidgetFactoryInterfaceBase>;
class PingerInterfaceBase {};

using PingerPtrDataView =
    mojo::InterfacePtrDataView<PingerInterfaceBase>;
using PingerRequestDataView =
    mojo::InterfaceRequestDataView<PingerInterfaceBase>;
using PingerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PingerInterfaceBase>;
using PingerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PingerInterfaceBase>;
class AssociatedPingerHostInterfaceBase {};

using AssociatedPingerHostPtrDataView =
    mojo::InterfacePtrDataView<AssociatedPingerHostInterfaceBase>;
using AssociatedPingerHostRequestDataView =
    mojo::InterfaceRequestDataView<AssociatedPingerHostInterfaceBase>;
using AssociatedPingerHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AssociatedPingerHostInterfaceBase>;
using AssociatedPingerHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AssociatedPingerHostInterfaceBase>;


}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {

}  // namespace mojo


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {


}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/