// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('mojo.test.PingService');






goog.provide('mojo.test.FooInterface');
goog.provide('mojo.test.FooInterfaceReceiver');
goog.provide('mojo.test.FooInterfaceCallbackRouter');
goog.provide('mojo.test.FooInterfaceInterface');
goog.provide('mojo.test.FooInterfaceRemote');
goog.provide('mojo.test.FooInterfacePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.FooInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.FooInterface.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.FooInterfaceInterface = class {
};

/**
 * @export
 * @implements { mojo.test.FooInterfaceInterface }
 */
mojo.test.FooInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.FooInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.FooInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.FooInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the FooInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.FooInterfaceReceiver = class {
  /**
   * @param {!mojo.test.FooInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.FooInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.FooInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.FooInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.FooInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.FooInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.FooInterfaceRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.FooInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FooInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.FooInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.FooInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.FooInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.InterfacePassesAssociated');
goog.provide('mojo.test.InterfacePassesAssociatedReceiver');
goog.provide('mojo.test.InterfacePassesAssociatedCallbackRouter');
goog.provide('mojo.test.InterfacePassesAssociatedInterface');
goog.provide('mojo.test.InterfacePassesAssociatedRemote');
goog.provide('mojo.test.InterfacePassesAssociatedPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.InterfacePassesAssociatedPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.InterfacePassesAssociated.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.InterfacePassesAssociatedInterface = class {
  
  /**
   * @param { !Object } fooRemote
   * @param { !Object } fooReceiver
   * @return {!Promise<{
        fooRemote: !Object,
        fooReceiver: !Object,
   *  }>}
   */

  passFoo(fooRemote, fooReceiver) {}
  
  /**
   * @param { !mojo.test.StructContainsAssociated } fooStruct
   * @return {!Promise<{
        fooStruct: !mojo.test.StructContainsAssociated,
   *  }>}
   */

  passStruct(fooStruct) {}
  
  /**
   * @param { !mojo.test.UnionContainsAssociated } fooUnion
   * @return {!Promise<{
        fooUnion: !mojo.test.UnionContainsAssociated,
   *  }>}
   */

  passUnion(fooUnion) {}
};

/**
 * @export
 * @implements { mojo.test.InterfacePassesAssociatedInterface }
 */
mojo.test.InterfacePassesAssociatedRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.InterfacePassesAssociatedPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.InterfacePassesAssociatedPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.InterfacePassesAssociatedPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } fooRemote
   * @param { !Object } fooReceiver
   * @return {!Promise<{
        fooRemote: !Object,
        fooReceiver: !Object,
   *  }>}
   */

  passFoo(
      fooRemote,
      fooReceiver) {
    return this.proxy.sendMessage(
        0,
        mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        [
          fooRemote,
          fooReceiver
        ]);
  }

  
  /**
   * @param { !mojo.test.StructContainsAssociated } fooStruct
   * @return {!Promise<{
        fooStruct: !mojo.test.StructContainsAssociated,
   *  }>}
   */

  passStruct(
      fooStruct) {
    return this.proxy.sendMessage(
        1,
        mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        [
          fooStruct
        ]);
  }

  
  /**
   * @param { !mojo.test.UnionContainsAssociated } fooUnion
   * @return {!Promise<{
        fooUnion: !mojo.test.UnionContainsAssociated,
   *  }>}
   */

  passUnion(
      fooUnion) {
    return this.proxy.sendMessage(
        2,
        mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        [
          fooUnion
        ]);
  }
};

/**
 * An object which receives request messages for the InterfacePassesAssociated
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.InterfacePassesAssociatedReceiver = class {
  /**
   * @param {!mojo.test.InterfacePassesAssociatedInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.InterfacePassesAssociatedRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.InterfacePassesAssociatedRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.InterfacePassesAssociatedRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        impl.passFoo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        impl.passStruct.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        impl.passUnion.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.InterfacePassesAssociated = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.InterfacePassesAssociated";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.InterfacePassesAssociatedRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.InterfacePassesAssociatedRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfacePassesAssociated
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.InterfacePassesAssociatedCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.InterfacePassesAssociatedRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.InterfacePassesAssociatedRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passFoo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
        this.passFoo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passStruct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
        this.passStruct.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passUnion =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec.$,
        mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
        this.passUnion.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.IntegerSender');
goog.provide('mojo.test.IntegerSenderReceiver');
goog.provide('mojo.test.IntegerSenderCallbackRouter');
goog.provide('mojo.test.IntegerSenderInterface');
goog.provide('mojo.test.IntegerSenderRemote');
goog.provide('mojo.test.IntegerSenderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.IntegerSenderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.IntegerSender.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.IntegerSenderInterface = class {
  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  echo(value) {}
  
  /**
   * @param { !number } value
   */

  send(value) {}
};

/**
 * @export
 * @implements { mojo.test.IntegerSenderInterface }
 */
mojo.test.IntegerSenderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.IntegerSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.IntegerSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.IntegerSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } value
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  echo(
      value) {
    return this.proxy.sendMessage(
        0,
        mojo.test.IntegerSender_Echo_ParamsSpec.$,
        mojo.test.IntegerSender_Echo_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !number } value
   */

  send(
      value) {
    this.proxy.sendMessage(
        1,
        mojo.test.IntegerSender_Send_ParamsSpec.$,
        null,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.IntegerSenderReceiver = class {
  /**
   * @param {!mojo.test.IntegerSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.IntegerSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.IntegerSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSender_Echo_ParamsSpec.$,
        mojo.test.IntegerSender_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSender_Send_ParamsSpec.$,
        null,
        impl.send.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.IntegerSender = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.IntegerSenderRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.IntegerSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.IntegerSenderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.IntegerSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSender_Echo_ParamsSpec.$,
        mojo.test.IntegerSender_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.send =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSender_Send_ParamsSpec.$,
        null,
        this.send.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.StringSender');
goog.provide('mojo.test.StringSenderReceiver');
goog.provide('mojo.test.StringSenderCallbackRouter');
goog.provide('mojo.test.StringSenderInterface');
goog.provide('mojo.test.StringSenderRemote');
goog.provide('mojo.test.StringSenderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.StringSenderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.StringSender.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.StringSenderInterface = class {
  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  echo(value) {}
  
  /**
   * @param { !string } value
   */

  send(value) {}
};

/**
 * @export
 * @implements { mojo.test.StringSenderInterface }
 */
mojo.test.StringSenderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.StringSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.StringSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.StringSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  echo(
      value) {
    return this.proxy.sendMessage(
        0,
        mojo.test.StringSender_Echo_ParamsSpec.$,
        mojo.test.StringSender_Echo_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !string } value
   */

  send(
      value) {
    this.proxy.sendMessage(
        1,
        mojo.test.StringSender_Send_ParamsSpec.$,
        null,
        [
          value
        ]);
  }
};

/**
 * An object which receives request messages for the StringSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.StringSenderReceiver = class {
  /**
   * @param {!mojo.test.StringSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.StringSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.StringSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.StringSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.StringSender_Echo_ParamsSpec.$,
        mojo.test.StringSender_Echo_ResponseParamsSpec.$,
        impl.echo.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.StringSender_Send_ParamsSpec.$,
        null,
        impl.send.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.StringSender = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.StringSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.StringSenderRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.StringSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the StringSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.StringSenderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.StringSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.StringSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.echo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.StringSender_Echo_ParamsSpec.$,
        mojo.test.StringSender_Echo_ResponseParamsSpec.$,
        this.echo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.send =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.StringSender_Send_ParamsSpec.$,
        null,
        this.send.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.IntegerSenderConnection');
goog.provide('mojo.test.IntegerSenderConnectionReceiver');
goog.provide('mojo.test.IntegerSenderConnectionCallbackRouter');
goog.provide('mojo.test.IntegerSenderConnectionInterface');
goog.provide('mojo.test.IntegerSenderConnectionRemote');
goog.provide('mojo.test.IntegerSenderConnectionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.IntegerSenderConnectionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.IntegerSenderConnection.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.IntegerSenderConnectionInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getSender(receiver) {}
  
  /**
   * @return {!Promise<{
        sender: !Object,
   *  }>}
   */

  asyncGetSender() {}
};

/**
 * @export
 * @implements { mojo.test.IntegerSenderConnectionInterface }
 */
mojo.test.IntegerSenderConnectionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.IntegerSenderConnectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.IntegerSenderConnectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.IntegerSenderConnectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        mojo.test.IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        sender: !Object,
   *  }>}
   */

  asyncGetSender() {
    return this.proxy.sendMessage(
        1,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSenderConnection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.IntegerSenderConnectionReceiver = class {
  /**
   * @param {!mojo.test.IntegerSenderConnectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.IntegerSenderConnectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.IntegerSenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        impl.getSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        impl.asyncGetSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.IntegerSenderConnection = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSenderConnection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.IntegerSenderConnectionRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.IntegerSenderConnectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSenderConnection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.IntegerSenderConnectionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.IntegerSenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSenderConnection_GetSender_ParamsSpec.$,
        null,
        this.getSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.asyncGetSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
        this.asyncGetSender.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds');
goog.provide('mojo.test.IntegerSenderConnectionAtBothEndsReceiver');
goog.provide('mojo.test.IntegerSenderConnectionAtBothEndsCallbackRouter');
goog.provide('mojo.test.IntegerSenderConnectionAtBothEndsInterface');
goog.provide('mojo.test.IntegerSenderConnectionAtBothEndsRemote');
goog.provide('mojo.test.IntegerSenderConnectionAtBothEndsPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEndsPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.IntegerSenderConnectionAtBothEnds.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.IntegerSenderConnectionAtBothEndsInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getSender(receiver) {}
  
  /**
   * @param { !Object } sender
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  setSender(sender) {}
};

/**
 * @export
 * @implements { mojo.test.IntegerSenderConnectionAtBothEndsInterface }
 */
mojo.test.IntegerSenderConnectionAtBothEndsRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.IntegerSenderConnectionAtBothEndsPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.IntegerSenderConnectionAtBothEndsPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.IntegerSenderConnectionAtBothEndsPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Object } sender
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  setSender(
      sender) {
    return this.proxy.sendMessage(
        1,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        [
          sender
        ]);
  }
};

/**
 * An object which receives request messages for the IntegerSenderConnectionAtBothEnds
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEndsReceiver = class {
  /**
   * @param {!mojo.test.IntegerSenderConnectionAtBothEndsInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.IntegerSenderConnectionAtBothEndsRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.IntegerSenderConnectionAtBothEndsRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderConnectionAtBothEndsRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        impl.getSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        impl.setSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.IntegerSenderConnectionAtBothEnds = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegerSenderConnectionAtBothEnds";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.IntegerSenderConnectionAtBothEndsRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.IntegerSenderConnectionAtBothEndsRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegerSenderConnectionAtBothEnds
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEndsCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.IntegerSenderConnectionAtBothEndsRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.IntegerSenderConnectionAtBothEndsRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
        null,
        this.getSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
        mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
        this.setSender.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.SenderConnection');
goog.provide('mojo.test.SenderConnectionReceiver');
goog.provide('mojo.test.SenderConnectionCallbackRouter');
goog.provide('mojo.test.SenderConnectionInterface');
goog.provide('mojo.test.SenderConnectionRemote');
goog.provide('mojo.test.SenderConnectionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.SenderConnectionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.SenderConnection.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.SenderConnectionInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getIntegerSender(receiver) {}
  
  /**
   * @param { !Object } receiver
   */

  getStringSender(receiver) {}
};

/**
 * @export
 * @implements { mojo.test.SenderConnectionInterface }
 */
mojo.test.SenderConnectionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.SenderConnectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.SenderConnectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.SenderConnectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getIntegerSender(
      receiver) {
    this.proxy.sendMessage(
        0,
        mojo.test.SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Object } receiver
   */

  getStringSender(
      receiver) {
    this.proxy.sendMessage(
        1,
        mojo.test.SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the SenderConnection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.SenderConnectionReceiver = class {
  /**
   * @param {!mojo.test.SenderConnectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.SenderConnectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.SenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.SenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        impl.getIntegerSender.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mojo.test.SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        impl.getStringSender.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.SenderConnection = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.SenderConnection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.SenderConnectionRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.SenderConnectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SenderConnection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.SenderConnectionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.SenderConnectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.SenderConnectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getIntegerSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.SenderConnection_GetIntegerSender_ParamsSpec.$,
        null,
        this.getIntegerSender.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getStringSender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mojo.test.SenderConnection_GetStringSender_ParamsSpec.$,
        null,
        this.getStringSender.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.AssociatedPingProvider');
goog.provide('mojo.test.AssociatedPingProviderReceiver');
goog.provide('mojo.test.AssociatedPingProviderCallbackRouter');
goog.provide('mojo.test.AssociatedPingProviderInterface');
goog.provide('mojo.test.AssociatedPingProviderRemote');
goog.provide('mojo.test.AssociatedPingProviderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.AssociatedPingProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.AssociatedPingProvider.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.AssociatedPingProviderInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getPing(receiver) {}
};

/**
 * @export
 * @implements { mojo.test.AssociatedPingProviderInterface }
 */
mojo.test.AssociatedPingProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.AssociatedPingProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.AssociatedPingProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.AssociatedPingProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPing(
      receiver) {
    this.proxy.sendMessage(
        0,
        mojo.test.AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedPingProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.AssociatedPingProviderReceiver = class {
  /**
   * @param {!mojo.test.AssociatedPingProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.AssociatedPingProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.AssociatedPingProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.AssociatedPingProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        impl.getPing.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.AssociatedPingProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.AssociatedPingProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.AssociatedPingProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.AssociatedPingProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedPingProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.AssociatedPingProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.AssociatedPingProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.AssociatedPingProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPing =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.AssociatedPingProvider_GetPing_ParamsSpec.$,
        null,
        this.getPing.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.AssociatedPingProviderProvider');
goog.provide('mojo.test.AssociatedPingProviderProviderReceiver');
goog.provide('mojo.test.AssociatedPingProviderProviderCallbackRouter');
goog.provide('mojo.test.AssociatedPingProviderProviderInterface');
goog.provide('mojo.test.AssociatedPingProviderProviderRemote');
goog.provide('mojo.test.AssociatedPingProviderProviderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojo.test.AssociatedPingProviderProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mojo.test.AssociatedPingProviderProvider.$interfaceName,
        scope);
  }
};

/** @interface */
mojo.test.AssociatedPingProviderProviderInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getPingProvider(receiver) {}
};

/**
 * @export
 * @implements { mojo.test.AssociatedPingProviderProviderInterface }
 */
mojo.test.AssociatedPingProviderProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojo.test.AssociatedPingProviderProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojo.test.AssociatedPingProviderProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojo.test.AssociatedPingProviderProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPingProvider(
      receiver) {
    this.proxy.sendMessage(
        0,
        mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedPingProviderProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojo.test.AssociatedPingProviderProviderReceiver = class {
  /**
   * @param {!mojo.test.AssociatedPingProviderProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojo.test.AssociatedPingProviderProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojo.test.AssociatedPingProviderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.AssociatedPingProviderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        impl.getPingProvider.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojo.test.AssociatedPingProviderProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.AssociatedPingProviderProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojo.test.AssociatedPingProviderProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojo.test.AssociatedPingProviderProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedPingProviderProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojo.test.AssociatedPingProviderProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojo.test.AssociatedPingProviderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojo.test.AssociatedPingProviderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingProvider =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
        null,
        this.getPingProvider.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojo.test.StructContainsAssociatedSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.StructContainsAssociatedSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSender_Echo_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSender_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSender_Echo_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSender_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSender_Send_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSender_Send_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.StringSender_Echo_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.StringSender_Echo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.StringSender_Echo_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.StringSender_Echo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.StringSender_Send_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.StringSender_Send_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnection_GetSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnection_GetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.SenderConnection_GetIntegerSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.SenderConnection_GetIntegerSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.SenderConnection_GetStringSender_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.SenderConnection_GetStringSender_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.AssociatedPingProvider_GetPing_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.AssociatedPingProvider_GetPing_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mojo.test.UnionContainsAssociatedSpec');
/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
mojo.test.UnionContainsAssociatedSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mojo.test.StructContainsAssociatedSpec.$,
    'StructContainsAssociated',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fooRemotes', 16,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote), false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fooReceivers', 24,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver), false),
        null,
        false /* nullable */),
    ],
    [[0, 40],]);



goog.provide('mojo.test.StructContainsAssociated');

/** @record */
mojo.test.StructContainsAssociated = class {
  constructor() {
    /** @export { (Object|undefined) } */
    this.fooRemote;
    /** @export { !Object } */
    this.fooReceiver;
    /** @export { !Array<!Object> } */
    this.fooRemotes;
    /** @export { !Array<!Object> } */
    this.fooReceivers;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassFoo_ParamsSpec.$,
    'InterfacePassesAssociated_PassFoo_Params',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassFoo_Params');

/** @record */
mojo.test.InterfacePassesAssociated_PassFoo_Params = class {
  constructor() {
    /** @export { !Object } */
    this.fooRemote;
    /** @export { !Object } */
    this.fooReceiver;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassFoo_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassFoo_ResponseParams',
    [
      mojo.internal.StructField(
        'fooRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fooReceiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassFoo_ResponseParams');

/** @record */
mojo.test.InterfacePassesAssociated_PassFoo_ResponseParams = class {
  constructor() {
    /** @export { !Object } */
    this.fooRemote;
    /** @export { !Object } */
    this.fooReceiver;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassStruct_ParamsSpec.$,
    'InterfacePassesAssociated_PassStruct_Params',
    [
      mojo.internal.StructField(
        'fooStruct', 0,
        0,
        mojo.test.StructContainsAssociatedSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassStruct_Params');

/** @record */
mojo.test.InterfacePassesAssociated_PassStruct_Params = class {
  constructor() {
    /** @export { !mojo.test.StructContainsAssociated } */
    this.fooStruct;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassStruct_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassStruct_ResponseParams',
    [
      mojo.internal.StructField(
        'fooStruct', 0,
        0,
        mojo.test.StructContainsAssociatedSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassStruct_ResponseParams');

/** @record */
mojo.test.InterfacePassesAssociated_PassStruct_ResponseParams = class {
  constructor() {
    /** @export { !mojo.test.StructContainsAssociated } */
    this.fooStruct;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassUnion_ParamsSpec.$,
    'InterfacePassesAssociated_PassUnion_Params',
    [
      mojo.internal.StructField(
        'fooUnion', 0,
        0,
        mojo.test.UnionContainsAssociatedSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassUnion_Params');

/** @record */
mojo.test.InterfacePassesAssociated_PassUnion_Params = class {
  constructor() {
    /** @export { !mojo.test.UnionContainsAssociated } */
    this.fooUnion;
  }
};




mojo.internal.Struct(
    mojo.test.InterfacePassesAssociated_PassUnion_ResponseParamsSpec.$,
    'InterfacePassesAssociated_PassUnion_ResponseParams',
    [
      mojo.internal.StructField(
        'fooUnion', 0,
        0,
        mojo.test.UnionContainsAssociatedSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('mojo.test.InterfacePassesAssociated_PassUnion_ResponseParams');

/** @record */
mojo.test.InterfacePassesAssociated_PassUnion_ResponseParams = class {
  constructor() {
    /** @export { !mojo.test.UnionContainsAssociated } */
    this.fooUnion;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSender_Echo_ParamsSpec.$,
    'IntegerSender_Echo_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSender_Echo_Params');

/** @record */
mojo.test.IntegerSender_Echo_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSender_Echo_ResponseParamsSpec.$,
    'IntegerSender_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSender_Echo_ResponseParams');

/** @record */
mojo.test.IntegerSender_Echo_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSender_Send_ParamsSpec.$,
    'IntegerSender_Send_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSender_Send_Params');

/** @record */
mojo.test.IntegerSender_Send_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.StringSender_Echo_ParamsSpec.$,
    'StringSender_Echo_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.StringSender_Echo_Params');

/** @record */
mojo.test.StringSender_Echo_Params = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.StringSender_Echo_ResponseParamsSpec.$,
    'StringSender_Echo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.StringSender_Echo_ResponseParams');

/** @record */
mojo.test.StringSender_Echo_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.StringSender_Send_ParamsSpec.$,
    'StringSender_Send_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.StringSender_Send_Params');

/** @record */
mojo.test.StringSender_Send_Params = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnection_GetSender_ParamsSpec.$,
    'IntegerSenderConnection_GetSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.IntegerSenderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSenderConnection_GetSender_Params');

/** @record */
mojo.test.IntegerSenderConnection_GetSender_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnection_AsyncGetSender_ParamsSpec.$,
    'IntegerSenderConnection_AsyncGetSender_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mojo.test.IntegerSenderConnection_AsyncGetSender_Params');

/** @record */
mojo.test.IntegerSenderConnection_AsyncGetSender_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParamsSpec.$,
    'IntegerSenderConnection_AsyncGetSender_ResponseParams',
    [
      mojo.internal.StructField(
        'sender', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.IntegerSenderRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParams');

/** @record */
mojo.test.IntegerSenderConnection_AsyncGetSender_ResponseParams = class {
  constructor() {
    /** @export { !Object } */
    this.sender;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_ParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_GetSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.IntegerSenderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_Params');

/** @record */
mojo.test.IntegerSenderConnectionAtBothEnds_GetSender_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_SetSender_Params',
    [
      mojo.internal.StructField(
        'sender', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(mojo.test.IntegerSenderRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_Params');

/** @record */
mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_Params = class {
  constructor() {
    /** @export { !Object } */
    this.sender;
  }
};




mojo.internal.Struct(
    mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParamsSpec.$,
    'IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams');

/** @record */
mojo.test.IntegerSenderConnectionAtBothEnds_SetSender_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    mojo.test.SenderConnection_GetIntegerSender_ParamsSpec.$,
    'SenderConnection_GetIntegerSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.IntegerSenderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.SenderConnection_GetIntegerSender_Params');

/** @record */
mojo.test.SenderConnection_GetIntegerSender_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mojo.test.SenderConnection_GetStringSender_ParamsSpec.$,
    'SenderConnection_GetStringSender_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.StringSenderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.SenderConnection_GetStringSender_Params');

/** @record */
mojo.test.SenderConnection_GetStringSender_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mojo.test.AssociatedPingProvider_GetPing_ParamsSpec.$,
    'AssociatedPingProvider_GetPing_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.PingServicePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.AssociatedPingProvider_GetPing_Params');

/** @record */
mojo.test.AssociatedPingProvider_GetPing_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mojo.test.AssociatedPingProviderProvider_GetPingProvider_ParamsSpec.$,
    'AssociatedPingProviderProvider_GetPingProvider_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(mojo.test.AssociatedPingProviderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mojo.test.AssociatedPingProviderProvider_GetPingProvider_Params');

/** @record */
mojo.test.AssociatedPingProviderProvider_GetPingProvider_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};


goog.provide('mojo.test.UnionContainsAssociated');


mojo.internal.Union(
    mojo.test.UnionContainsAssociatedSpec.$, 'UnionContainsAssociated',
    {
      'fooRemote': {
        'ordinal': 0,
        'type': mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote),
        'nullable': true,
      },
      'fooReceiver': {
        'ordinal': 1,
        'type': mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver),
      },
      'fooRemotes': {
        'ordinal': 2,
        'type': mojo.internal.Array(mojo.internal.AssociatedInterfaceProxy(mojo.test.FooInterfaceRemote), false),
      },
      'fooReceivers': {
        'ordinal': 3,
        'type': mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(mojo.test.FooInterfacePendingReceiver), false),
      },
    });

/**
 * @typedef { {
 *   fooRemote: (?Object|undefined),
 *   fooReceiver: (!Object|undefined),
 *   fooRemotes: (!Array<!Object>|undefined),
 *   fooReceivers: (!Array<!Object>|undefined),
 * } }
 */
mojo.test.UnionContainsAssociated;
