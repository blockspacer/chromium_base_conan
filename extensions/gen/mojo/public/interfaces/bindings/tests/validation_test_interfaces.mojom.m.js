// mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const EnumASpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const EnumA = {
  
  ENUM_A_0: 0,
  ENUM_A_1: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const EnumBSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const EnumB = {
  
  ENUM_B_0: 0,
  ENUM_B_1: 1,
  ENUM_B_2: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const EmptyEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const EmptyEnum = {
  
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const ExtensibleEmptyEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const ExtensibleEmptyEnum = {
  
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const BasicEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const BasicEnum = {
  
  A: 0,
  B: 1,
  C: 0,
  D: -3,
  E: 10,
  MIN_VALUE: -3,
  MAX_VALUE: 10,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const InterfaceAPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.InterfaceA', scope);
  }
};

/** @interface */
export const InterfaceAInterface = class {
};

/**
 * @implements { InterfaceAInterface }
 */
export const InterfaceARemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!InterfaceAPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          InterfaceAPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!InterfaceAPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the InterfaceA
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const InterfaceAReceiver = class {
  /**
   * @param {!InterfaceAInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!InterfaceARemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        InterfaceARemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceARemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const InterfaceA = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.InterfaceA";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!InterfaceARemote}
   */
  static getRemote() {
    let remote = new InterfaceARemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfaceA
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const InterfaceACallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      InterfaceARemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfaceARemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const BoundsCheckTestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.BoundsCheckTestInterface', scope);
  }
};

/** @interface */
export const BoundsCheckTestInterfaceInterface = class {
  
  /**
   * @param { !number } param0
   * @return {!Promise<{
        param0: !number,
   *  }>}
   */

  method0(param0) {}
  
  /**
   * @param { !number } param0
   */

  method1(param0) {}
};

/**
 * @implements { BoundsCheckTestInterfaceInterface }
 */
export const BoundsCheckTestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!BoundsCheckTestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          BoundsCheckTestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!BoundsCheckTestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } param0
   * @return {!Promise<{
        param0: !number,
   *  }>}
   */

  method0(
      param0) {
    return this.proxy.sendMessage(
        0,
        BoundsCheckTestInterface_Method0_ParamsSpec.$,
        BoundsCheckTestInterface_Method0_ResponseParamsSpec.$,
        [
          param0
        ]);
  }

  
  /**
   * @param { !number } param0
   */

  method1(
      param0) {
    this.proxy.sendMessage(
        1,
        BoundsCheckTestInterface_Method1_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }
};

/**
 * An object which receives request messages for the BoundsCheckTestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const BoundsCheckTestInterfaceReceiver = class {
  /**
   * @param {!BoundsCheckTestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!BoundsCheckTestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        BoundsCheckTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BoundsCheckTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        BoundsCheckTestInterface_Method0_ParamsSpec.$,
        BoundsCheckTestInterface_Method0_ResponseParamsSpec.$,
        impl.method0.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        BoundsCheckTestInterface_Method1_ParamsSpec.$,
        null,
        impl.method1.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const BoundsCheckTestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.BoundsCheckTestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!BoundsCheckTestInterfaceRemote}
   */
  static getRemote() {
    let remote = new BoundsCheckTestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the BoundsCheckTestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const BoundsCheckTestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      BoundsCheckTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BoundsCheckTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method0 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        BoundsCheckTestInterface_Method0_ParamsSpec.$,
        BoundsCheckTestInterface_Method0_ResponseParamsSpec.$,
        this.method0.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        BoundsCheckTestInterface_Method1_ParamsSpec.$,
        null,
        this.method1.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const ConformanceTestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.ConformanceTestInterface', scope);
  }
};

/** @interface */
export const ConformanceTestInterfaceInterface = class {
  
  /**
   * @param { !number } param0
   */

  method0(param0) {}
  
  /**
   * @param { !StructA } param0
   */

  method1(param0) {}
  
  /**
   * @param { !StructB } param0
   * @param { !StructA } param1
   */

  method2(param0, param1) {}
  
  /**
   * @param { !Array<!boolean> } param0
   */

  method3(param0) {}
  
  /**
   * @param { !StructC } param0
   * @param { !Array<!number> } param1
   */

  method4(param0, param1) {}
  
  /**
   * @param { !StructE } param0
   * @param { !MojoHandle } param1
   */

  method5(param0, param1) {}
  
  /**
   * @param { !Array<!Array<!number>> } param0
   */

  method6(param0) {}
  
  /**
   * @param { !StructF } param0
   * @param { !Array<Array<!number>> } param1
   */

  method7(param0, param1) {}
  
  /**
   * @param { !Array<Array<!string>> } param0
   */

  method8(param0) {}
  
  /**
   * @param { Array<!Array<MojoHandle>> } param0
   */

  method9(param0) {}
  
  /**
   * @param { (!Map<!string, !number>|!Object<!string, !number>) } param0
   */

  method10(param0) {}
  
  /**
   * @param { !StructG } param0
   */

  method11(param0) {}
  
  /**
   * @param { !number } param0
   * @return {!Promise<{
        param0: !number,
   *  }>}
   */

  method12(param0) {}
  
  /**
   * @param { InterfaceARemote } param0
   * @param { !number } param1
   * @param { InterfaceARemote } param2
   */

  method13(param0, param1, param2) {}
  
  /**
   * @param { number } param0
   * @param { number } param1
   */

  method14(param0, param1) {}
  
  /**
   * @param { Array<number> } param0
   * @param { Array<number> } param1
   */

  method15(param0, param1) {}
  
  /**
   * @param { (Map<number, number>|Object<number, number>) } param0
   */

  method16(param0) {}
  
  /**
   * @param { !Array<!InterfaceARemote> } param0
   */

  method17(param0) {}
  
  /**
   * @param { UnionA } param0
   */

  method18(param0) {}
  
  /**
   * @param { !Recursive } recursive
   */

  method19(recursive) {}
  
  /**
   * @param { !Map<!StructB, !number> } param0
   */

  method20(param0) {}
  
  /**
   * @param { number } param0
   */

  method21(param0) {}
  
  /**
   * @param { number } param0
   */

  method22(param0) {}
};

/**
 * @implements { ConformanceTestInterfaceInterface }
 */
export const ConformanceTestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ConformanceTestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ConformanceTestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ConformanceTestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } param0
   */

  method0(
      param0) {
    this.proxy.sendMessage(
        0,
        ConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !StructA } param0
   */

  method1(
      param0) {
    this.proxy.sendMessage(
        1,
        ConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !StructB } param0
   * @param { !StructA } param1
   */

  method2(
      param0,
      param1) {
    this.proxy.sendMessage(
        2,
        ConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { !Array<!boolean> } param0
   */

  method3(
      param0) {
    this.proxy.sendMessage(
        3,
        ConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !StructC } param0
   * @param { !Array<!number> } param1
   */

  method4(
      param0,
      param1) {
    this.proxy.sendMessage(
        4,
        ConformanceTestInterface_Method4_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { !StructE } param0
   * @param { !MojoHandle } param1
   */

  method5(
      param0,
      param1) {
    this.proxy.sendMessage(
        5,
        ConformanceTestInterface_Method5_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { !Array<!Array<!number>> } param0
   */

  method6(
      param0) {
    this.proxy.sendMessage(
        6,
        ConformanceTestInterface_Method6_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !StructF } param0
   * @param { !Array<Array<!number>> } param1
   */

  method7(
      param0,
      param1) {
    this.proxy.sendMessage(
        7,
        ConformanceTestInterface_Method7_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { !Array<Array<!string>> } param0
   */

  method8(
      param0) {
    this.proxy.sendMessage(
        8,
        ConformanceTestInterface_Method8_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { Array<!Array<MojoHandle>> } param0
   */

  method9(
      param0) {
    this.proxy.sendMessage(
        9,
        ConformanceTestInterface_Method9_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { (!Map<!string, !number>|!Object<!string, !number>) } param0
   */

  method10(
      param0) {
    this.proxy.sendMessage(
        10,
        ConformanceTestInterface_Method10_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !StructG } param0
   */

  method11(
      param0) {
    this.proxy.sendMessage(
        11,
        ConformanceTestInterface_Method11_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !number } param0
   * @return {!Promise<{
        param0: !number,
   *  }>}
   */

  method12(
      param0) {
    return this.proxy.sendMessage(
        12,
        ConformanceTestInterface_Method12_ParamsSpec.$,
        ConformanceTestInterface_Method12_ResponseParamsSpec.$,
        [
          param0
        ]);
  }

  
  /**
   * @param { InterfaceARemote } param0
   * @param { !number } param1
   * @param { InterfaceARemote } param2
   */

  method13(
      param0,
      param1,
      param2) {
    this.proxy.sendMessage(
        13,
        ConformanceTestInterface_Method13_ParamsSpec.$,
        null,
        [
          param0,
          param1,
          param2
        ]);
  }

  
  /**
   * @param { number } param0
   * @param { number } param1
   */

  method14(
      param0,
      param1) {
    this.proxy.sendMessage(
        14,
        ConformanceTestInterface_Method14_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { Array<number> } param0
   * @param { Array<number> } param1
   */

  method15(
      param0,
      param1) {
    this.proxy.sendMessage(
        15,
        ConformanceTestInterface_Method15_ParamsSpec.$,
        null,
        [
          param0,
          param1
        ]);
  }

  
  /**
   * @param { (Map<number, number>|Object<number, number>) } param0
   */

  method16(
      param0) {
    this.proxy.sendMessage(
        16,
        ConformanceTestInterface_Method16_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !Array<!InterfaceARemote> } param0
   */

  method17(
      param0) {
    this.proxy.sendMessage(
        17,
        ConformanceTestInterface_Method17_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { UnionA } param0
   */

  method18(
      param0) {
    this.proxy.sendMessage(
        18,
        ConformanceTestInterface_Method18_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { !Recursive } recursive
   */

  method19(
      recursive) {
    this.proxy.sendMessage(
        19,
        ConformanceTestInterface_Method19_ParamsSpec.$,
        null,
        [
          recursive
        ]);
  }

  
  /**
   * @param { !Map<!StructB, !number> } param0
   */

  method20(
      param0) {
    this.proxy.sendMessage(
        20,
        ConformanceTestInterface_Method20_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { number } param0
   */

  method21(
      param0) {
    this.proxy.sendMessage(
        21,
        ConformanceTestInterface_Method21_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }

  
  /**
   * @param { number } param0
   */

  method22(
      param0) {
    this.proxy.sendMessage(
        22,
        ConformanceTestInterface_Method22_ParamsSpec.$,
        null,
        [
          param0
        ]);
  }
};

/**
 * An object which receives request messages for the ConformanceTestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const ConformanceTestInterfaceReceiver = class {
  /**
   * @param {!ConformanceTestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ConformanceTestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ConformanceTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ConformanceTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        ConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        impl.method0.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        ConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        impl.method1.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        ConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        impl.method2.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        ConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        impl.method3.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        ConformanceTestInterface_Method4_ParamsSpec.$,
        null,
        impl.method4.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        ConformanceTestInterface_Method5_ParamsSpec.$,
        null,
        impl.method5.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        ConformanceTestInterface_Method6_ParamsSpec.$,
        null,
        impl.method6.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        ConformanceTestInterface_Method7_ParamsSpec.$,
        null,
        impl.method7.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        ConformanceTestInterface_Method8_ParamsSpec.$,
        null,
        impl.method8.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        ConformanceTestInterface_Method9_ParamsSpec.$,
        null,
        impl.method9.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        ConformanceTestInterface_Method10_ParamsSpec.$,
        null,
        impl.method10.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        ConformanceTestInterface_Method11_ParamsSpec.$,
        null,
        impl.method11.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        ConformanceTestInterface_Method12_ParamsSpec.$,
        ConformanceTestInterface_Method12_ResponseParamsSpec.$,
        impl.method12.bind(impl));
    this.helper_internal_.registerHandler(
        13,
        ConformanceTestInterface_Method13_ParamsSpec.$,
        null,
        impl.method13.bind(impl));
    this.helper_internal_.registerHandler(
        14,
        ConformanceTestInterface_Method14_ParamsSpec.$,
        null,
        impl.method14.bind(impl));
    this.helper_internal_.registerHandler(
        15,
        ConformanceTestInterface_Method15_ParamsSpec.$,
        null,
        impl.method15.bind(impl));
    this.helper_internal_.registerHandler(
        16,
        ConformanceTestInterface_Method16_ParamsSpec.$,
        null,
        impl.method16.bind(impl));
    this.helper_internal_.registerHandler(
        17,
        ConformanceTestInterface_Method17_ParamsSpec.$,
        null,
        impl.method17.bind(impl));
    this.helper_internal_.registerHandler(
        18,
        ConformanceTestInterface_Method18_ParamsSpec.$,
        null,
        impl.method18.bind(impl));
    this.helper_internal_.registerHandler(
        19,
        ConformanceTestInterface_Method19_ParamsSpec.$,
        null,
        impl.method19.bind(impl));
    this.helper_internal_.registerHandler(
        20,
        ConformanceTestInterface_Method20_ParamsSpec.$,
        null,
        impl.method20.bind(impl));
    this.helper_internal_.registerHandler(
        21,
        ConformanceTestInterface_Method21_ParamsSpec.$,
        null,
        impl.method21.bind(impl));
    this.helper_internal_.registerHandler(
        22,
        ConformanceTestInterface_Method22_ParamsSpec.$,
        null,
        impl.method22.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const ConformanceTestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.ConformanceTestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ConformanceTestInterfaceRemote}
   */
  static getRemote() {
    let remote = new ConformanceTestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the ConformanceTestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const ConformanceTestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ConformanceTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ConformanceTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method0 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        ConformanceTestInterface_Method0_ParamsSpec.$,
        null,
        this.method0.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        ConformanceTestInterface_Method1_ParamsSpec.$,
        null,
        this.method1.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method2 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        ConformanceTestInterface_Method2_ParamsSpec.$,
        null,
        this.method2.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method3 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        ConformanceTestInterface_Method3_ParamsSpec.$,
        null,
        this.method3.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method4 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        ConformanceTestInterface_Method4_ParamsSpec.$,
        null,
        this.method4.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method5 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        ConformanceTestInterface_Method5_ParamsSpec.$,
        null,
        this.method5.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method6 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        ConformanceTestInterface_Method6_ParamsSpec.$,
        null,
        this.method6.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method7 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        ConformanceTestInterface_Method7_ParamsSpec.$,
        null,
        this.method7.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method8 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        ConformanceTestInterface_Method8_ParamsSpec.$,
        null,
        this.method8.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method9 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        ConformanceTestInterface_Method9_ParamsSpec.$,
        null,
        this.method9.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method10 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        ConformanceTestInterface_Method10_ParamsSpec.$,
        null,
        this.method10.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method11 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        ConformanceTestInterface_Method11_ParamsSpec.$,
        null,
        this.method11.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method12 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        ConformanceTestInterface_Method12_ParamsSpec.$,
        ConformanceTestInterface_Method12_ResponseParamsSpec.$,
        this.method12.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method13 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        13,
        ConformanceTestInterface_Method13_ParamsSpec.$,
        null,
        this.method13.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method14 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        14,
        ConformanceTestInterface_Method14_ParamsSpec.$,
        null,
        this.method14.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method15 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        15,
        ConformanceTestInterface_Method15_ParamsSpec.$,
        null,
        this.method15.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method16 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        16,
        ConformanceTestInterface_Method16_ParamsSpec.$,
        null,
        this.method16.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method17 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        17,
        ConformanceTestInterface_Method17_ParamsSpec.$,
        null,
        this.method17.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method18 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        18,
        ConformanceTestInterface_Method18_ParamsSpec.$,
        null,
        this.method18.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method19 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        19,
        ConformanceTestInterface_Method19_ParamsSpec.$,
        null,
        this.method19.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method20 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        20,
        ConformanceTestInterface_Method20_ParamsSpec.$,
        null,
        this.method20.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method21 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        21,
        ConformanceTestInterface_Method21_ParamsSpec.$,
        null,
        this.method21.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method22 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        22,
        ConformanceTestInterface_Method22_ParamsSpec.$,
        null,
        this.method22.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IntegrationTestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.IntegrationTestInterface', scope);
  }
};

/** @interface */
export const IntegrationTestInterfaceInterface = class {
  
  /**
   * @param { !BasicStruct } param0
   * @return {!Promise<{
        param0: !Array<!number>,
   *  }>}
   */

  method0(param0) {}
};

/**
 * @implements { IntegrationTestInterfaceInterface }
 */
export const IntegrationTestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IntegrationTestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IntegrationTestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IntegrationTestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !BasicStruct } param0
   * @return {!Promise<{
        param0: !Array<!number>,
   *  }>}
   */

  method0(
      param0) {
    return this.proxy.sendMessage(
        0,
        IntegrationTestInterface_Method0_ParamsSpec.$,
        IntegrationTestInterface_Method0_ResponseParamsSpec.$,
        [
          param0
        ]);
  }
};

/**
 * An object which receives request messages for the IntegrationTestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IntegrationTestInterfaceReceiver = class {
  /**
   * @param {!IntegrationTestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IntegrationTestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IntegrationTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegrationTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        IntegrationTestInterface_Method0_ParamsSpec.$,
        IntegrationTestInterface_Method0_ResponseParamsSpec.$,
        impl.method0.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IntegrationTestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.IntegrationTestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IntegrationTestInterfaceRemote}
   */
  static getRemote() {
    let remote = new IntegrationTestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IntegrationTestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IntegrationTestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IntegrationTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IntegrationTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method0 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        IntegrationTestInterface_Method0_ParamsSpec.$,
        IntegrationTestInterface_Method0_ResponseParamsSpec.$,
        this.method0.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructASpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructBSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructCSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructDSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructESpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructFSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructGSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BasicStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StructWithEnumSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RecursiveSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BoundsCheckTestInterface_Method0_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BoundsCheckTestInterface_Method0_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BoundsCheckTestInterface_Method1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method0_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method2_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method3_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method4_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method5_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method6_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method7_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method8_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method9_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method10_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method11_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method12_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method12_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method13_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method14_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method15_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method16_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method17_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method18_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method19_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method20_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method21_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ConformanceTestInterface_Method22_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegrationTestInterface_Method0_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IntegrationTestInterface_Method0_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const UnionASpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    StructASpec.$,
    'StructA',
    [
      mojo.internal.StructField(
        'i', 0,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StructA = class {
  constructor() {
    /** @type { !bigint } */
    this.i;
  }
};



mojo.internal.Struct(
    StructBSpec.$,
    'StructB',
    [
      mojo.internal.StructField(
        'structA', 0,
        0,
        StructASpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StructB = class {
  constructor() {
    /** @type { !StructA } */
    this.structA;
  }
};



mojo.internal.Struct(
    StructCSpec.$,
    'StructC',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StructC = class {
  constructor() {
    /** @type { !Array<!number> } */
    this.data;
  }
};



mojo.internal.Struct(
    StructDSpec.$,
    'StructD',
    [
      mojo.internal.StructField(
        'messagePipes', 0,
        0,
        mojo.internal.Array(mojo.internal.Handle, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StructD = class {
  constructor() {
    /** @type { !Array<!MojoHandle> } */
    this.messagePipes;
  }
};



mojo.internal.Struct(
    StructESpec.$,
    'StructE',
    [
      mojo.internal.StructField(
        'structD', 0,
        0,
        StructDSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'dataPipeConsumer', 8,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const StructE = class {
  constructor() {
    /** @type { !StructD } */
    this.structD;
    /** @type { !MojoHandle } */
    this.dataPipeConsumer;
  }
};



mojo.internal.Struct(
    StructFSpec.$,
    'StructF',
    [
      mojo.internal.StructField(
        'fixedSizeArray', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const StructF = class {
  constructor() {
    /** @type { !Array<!number> } */
    this.fixedSizeArray;
  }
};



mojo.internal.Struct(
    StructGSpec.$,
    'StructG',
    [
      mojo.internal.StructField(
        'i', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'structA', 8,
        0,
        StructASpec.$,
        null,
        true /* nullable */,
        1),
      mojo.internal.StructField(
        'str', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        3),
      mojo.internal.StructField(
        'b', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        3),
    ],
    [[0, 16],[1, 24],[3, 32],]);



/**
 * @record
 */
export const StructG = class {
  constructor() {
    /** @type { !number } */
    this.i;
    /** @type { !boolean } */
    this.b;
    /** @type { (StructA|undefined) } */
    this.structA;
    /** @type { (string|undefined) } */
    this.str;
  }
};



mojo.internal.Struct(
    BasicStructSpec.$,
    'BasicStruct',
    [
      mojo.internal.StructField(
        'a', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const BasicStruct = class {
  constructor() {
    /** @type { !number } */
    this.a;
  }
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const StructWithEnum_EnumWithinSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const StructWithEnum_EnumWithin = {
  
  A: 0,
  B: 1,
  C: 2,
  D: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};


mojo.internal.Struct(
    StructWithEnumSpec.$,
    'StructWithEnum',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const StructWithEnum = class {
  constructor() {
  }
};



mojo.internal.Struct(
    RecursiveSpec.$,
    'Recursive',
    [
      mojo.internal.StructField(
        'recursive', 0,
        0,
        RecursiveSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Recursive = class {
  constructor() {
    /** @type { (Recursive|undefined) } */
    this.recursive;
  }
};



mojo.internal.Struct(
    BoundsCheckTestInterface_Method0_ParamsSpec.$,
    'BoundsCheckTestInterface_Method0_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const BoundsCheckTestInterface_Method0_Params = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    BoundsCheckTestInterface_Method0_ResponseParamsSpec.$,
    'BoundsCheckTestInterface_Method0_ResponseParams',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const BoundsCheckTestInterface_Method0_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    BoundsCheckTestInterface_Method1_ParamsSpec.$,
    'BoundsCheckTestInterface_Method1_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const BoundsCheckTestInterface_Method1_Params = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method0_ParamsSpec.$,
    'ConformanceTestInterface_Method0_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method0_Params = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method1_ParamsSpec.$,
    'ConformanceTestInterface_Method1_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructASpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method1_Params = class {
  constructor() {
    /** @type { !StructA } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method2_ParamsSpec.$,
    'ConformanceTestInterface_Method2_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructBSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        StructASpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method2_Params = class {
  constructor() {
    /** @type { !StructB } */
    this.param0;
    /** @type { !StructA } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method3_ParamsSpec.$,
    'ConformanceTestInterface_Method3_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.Bool, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method3_Params = class {
  constructor() {
    /** @type { !Array<!boolean> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method4_ParamsSpec.$,
    'ConformanceTestInterface_Method4_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructCSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method4_Params = class {
  constructor() {
    /** @type { !StructC } */
    this.param0;
    /** @type { !Array<!number> } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method5_ParamsSpec.$,
    'ConformanceTestInterface_Method5_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructESpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method5_Params = class {
  constructor() {
    /** @type { !StructE } */
    this.param0;
    /** @type { !MojoHandle } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method6_ParamsSpec.$,
    'ConformanceTestInterface_Method6_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.Array(mojo.internal.Uint8, false), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method6_Params = class {
  constructor() {
    /** @type { !Array<!Array<!number>> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method7_ParamsSpec.$,
    'ConformanceTestInterface_Method7_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructFSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        mojo.internal.Array(mojo.internal.Array(mojo.internal.Uint8, false), true),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method7_Params = class {
  constructor() {
    /** @type { !StructF } */
    this.param0;
    /** @type { !Array<?Array<!number>> } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method8_ParamsSpec.$,
    'ConformanceTestInterface_Method8_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.Array(mojo.internal.String, false), true),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method8_Params = class {
  constructor() {
    /** @type { !Array<?Array<!string>> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method9_ParamsSpec.$,
    'ConformanceTestInterface_Method9_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.Array(mojo.internal.Handle, true), false),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method9_Params = class {
  constructor() {
    /** @type { (Array<!Array<?MojoHandle>>|undefined) } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method10_ParamsSpec.$,
    'ConformanceTestInterface_Method10_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Map(mojo.internal.String, mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method10_Params = class {
  constructor() {
    /** @type { !Object<!string, !number> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method11_ParamsSpec.$,
    'ConformanceTestInterface_Method11_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        StructGSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method11_Params = class {
  constructor() {
    /** @type { !StructG } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method12_ParamsSpec.$,
    'ConformanceTestInterface_Method12_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method12_Params = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method12_ResponseParamsSpec.$,
    'ConformanceTestInterface_Method12_ResponseParams',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method12_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method13_ParamsSpec.$,
    'ConformanceTestInterface_Method13_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.InterfaceProxy(InterfaceARemote),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param2', 12,
        0,
        mojo.internal.InterfaceProxy(InterfaceARemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method13_Params = class {
  constructor() {
    /** @type { (InterfaceARemote|undefined) } */
    this.param0;
    /** @type { !number } */
    this.param1;
    /** @type { (InterfaceARemote|undefined) } */
    this.param2;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method14_ParamsSpec.$,
    'ConformanceTestInterface_Method14_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        EnumASpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 4,
        0,
        EnumBSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method14_Params = class {
  constructor() {
    /** @type { !EnumA } */
    this.param0;
    /** @type { !EnumB } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method15_ParamsSpec.$,
    'ConformanceTestInterface_Method15_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(EnumASpec.$, false),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'param1', 8,
        0,
        mojo.internal.Array(EnumBSpec.$, false),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method15_Params = class {
  constructor() {
    /** @type { (Array<!EnumA>|undefined) } */
    this.param0;
    /** @type { (Array<!EnumB>|undefined) } */
    this.param1;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method16_ParamsSpec.$,
    'ConformanceTestInterface_Method16_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Map(EnumASpec.$, EnumASpec.$, false),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method16_Params = class {
  constructor() {
    /** @type { (Object<!EnumA, !EnumA>|undefined) } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method17_ParamsSpec.$,
    'ConformanceTestInterface_Method17_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.InterfaceProxy(InterfaceARemote), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method17_Params = class {
  constructor() {
    /** @type { !Array<!InterfaceARemote> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method18_ParamsSpec.$,
    'ConformanceTestInterface_Method18_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        UnionASpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method18_Params = class {
  constructor() {
    /** @type { (UnionA|undefined) } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method19_ParamsSpec.$,
    'ConformanceTestInterface_Method19_Params',
    [
      mojo.internal.StructField(
        'recursive', 0,
        0,
        RecursiveSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method19_Params = class {
  constructor() {
    /** @type { !Recursive } */
    this.recursive;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method20_ParamsSpec.$,
    'ConformanceTestInterface_Method20_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Map(StructBSpec.$, mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method20_Params = class {
  constructor() {
    /** @type { !Map<!StructB, !number> } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method21_ParamsSpec.$,
    'ConformanceTestInterface_Method21_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        ExtensibleEmptyEnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method21_Params = class {
  constructor() {
    /** @type { !ExtensibleEmptyEnum } */
    this.param0;
  }
};



mojo.internal.Struct(
    ConformanceTestInterface_Method22_ParamsSpec.$,
    'ConformanceTestInterface_Method22_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        EmptyEnumSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const ConformanceTestInterface_Method22_Params = class {
  constructor() {
    /** @type { !EmptyEnum } */
    this.param0;
  }
};



mojo.internal.Struct(
    IntegrationTestInterface_Method0_ParamsSpec.$,
    'IntegrationTestInterface_Method0_Params',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        BasicStructSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegrationTestInterface_Method0_Params = class {
  constructor() {
    /** @type { !BasicStruct } */
    this.param0;
  }
};



mojo.internal.Struct(
    IntegrationTestInterface_Method0_ResponseParamsSpec.$,
    'IntegrationTestInterface_Method0_ResponseParams',
    [
      mojo.internal.StructField(
        'param0', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IntegrationTestInterface_Method0_ResponseParams = class {
  constructor() {
    /** @type { !Array<!number> } */
    this.param0;
  }
};

mojo.internal.Union(
    UnionASpec.$, 'UnionA',
    {
      'structA': {
        'ordinal': 0,
        'type': StructASpec.$,
      },
      'b': {
        'ordinal': 1,
        'type': mojo.internal.Bool,
      },
    });

/**
 * @typedef { {
 *   structA: (!StructA|undefined),
 *   b: (!boolean|undefined),
 * } }
 */
export const UnionA = {};
