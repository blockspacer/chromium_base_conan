// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {


void WidgetObserverInterceptorForTesting::OnClick() {
  GetForwardingInterface()->OnClick();
}
WidgetObserverAsyncWaiter::WidgetObserverAsyncWaiter(
    WidgetObserver* proxy) : proxy_(proxy) {}

WidgetObserverAsyncWaiter::~WidgetObserverAsyncWaiter() = default;




void WidgetInterceptorForTesting::Click() {
  GetForwardingInterface()->Click();
}
void WidgetInterceptorForTesting::AddObserver(::mojo::PendingRemote<WidgetObserver> observer) {
  GetForwardingInterface()->AddObserver(std::move(observer));
}
WidgetAsyncWaiter::WidgetAsyncWaiter(
    Widget* proxy) : proxy_(proxy) {}

WidgetAsyncWaiter::~WidgetAsyncWaiter() = default;




void WidgetClientInterceptorForTesting::OnInitialized() {
  GetForwardingInterface()->OnInitialized();
}
WidgetClientAsyncWaiter::WidgetClientAsyncWaiter(
    WidgetClient* proxy) : proxy_(proxy) {}

WidgetClientAsyncWaiter::~WidgetClientAsyncWaiter() = default;




void WidgetFactoryInterceptorForTesting::CreateWidget(::mojo::PendingReceiver<Widget> receiver, ::mojo::PendingRemote<WidgetClient> client) {
  GetForwardingInterface()->CreateWidget(std::move(receiver), std::move(client));
}
WidgetFactoryAsyncWaiter::WidgetFactoryAsyncWaiter(
    WidgetFactory* proxy) : proxy_(proxy) {}

WidgetFactoryAsyncWaiter::~WidgetFactoryAsyncWaiter() = default;




void PingerInterceptorForTesting::Ping(PingCallback callback) {
  GetForwardingInterface()->Ping(std::move(callback));
}
PingerAsyncWaiter::PingerAsyncWaiter(
    Pinger* proxy) : proxy_(proxy) {}

PingerAsyncWaiter::~PingerAsyncWaiter() = default;

void PingerAsyncWaiter::Ping(
    ) {
  base::RunLoop loop;
  proxy_->Ping(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void AssociatedPingerHostInterceptorForTesting::AddEndpoints(::mojo::PendingAssociatedReceiver<Pinger> receiver, ::mojo::PendingAssociatedRemote<Pinger> remote) {
  GetForwardingInterface()->AddEndpoints(std::move(receiver), std::move(remote));
}
AssociatedPingerHostAsyncWaiter::AssociatedPingerHostAsyncWaiter(
    AssociatedPingerHost* proxy) : proxy_(proxy) {}

AssociatedPingerHostAsyncWaiter::~AssociatedPingerHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif