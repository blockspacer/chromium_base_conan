// mojo/public/interfaces/bindings/tests/sample_import2.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom-params-data.h"
namespace imported {

std::string ColorToString(Color value) {
  switch(value) {
    case Color::RED:
      return "RED";
    case Color::BLACK:
      return "BLACK";
    default:
      return base::StringPrintf("Unknown Color value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, Color value) {
  return os << ColorToString(value);
}

namespace internal {


// static
bool Size_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Size_Data* object = static_cast<const Size_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

Size_Data::Size_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Thing_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Thing_Data* object = static_cast<const Thing_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::imported::internal::Shape_Data
        ::Validate(object->shape, validation_context))
    return false;


  if (!::imported::internal::Color_Data
        ::Validate(object->color, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->location, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->location, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->size, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->size, validation_context))
    return false;

  return true;
}

Thing_Data::Thing_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace imported

namespace perfetto {

// static
void TraceFormatTraits<::imported::Color>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::imported::Color value) {
  return std::move(context).WriteString(::imported::ColorToString(value));
}

} // namespace perfetto
