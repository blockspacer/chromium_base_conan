// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {
namespace blink {

class WidgetObserverProxy;

template <typename ImplRefTraits>
class WidgetObserverStub;

class WidgetObserverRequestValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetObserver
class  WidgetObserver
    : public WidgetObserverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = WidgetObserverInterfaceBase;
  using Proxy_ = WidgetObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = WidgetObserverStub<ImplRefTraits>;

  using RequestValidator_ = WidgetObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnClickMinVersion = 0,
  };
  virtual ~WidgetObserver() {}

  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetObserver.OnClick
  virtual void OnClick() = 0;
};

class WidgetProxy;

template <typename ImplRefTraits>
class WidgetStub;

class WidgetRequestValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.Widget
class  Widget
    : public WidgetInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = WidgetInterfaceBase;
  using Proxy_ = WidgetProxy;

  template <typename ImplRefTraits>
  using Stub_ = WidgetStub<ImplRefTraits>;

  using RequestValidator_ = WidgetRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kClickMinVersion = 0,
    kAddObserverMinVersion = 0,
  };
  virtual ~Widget() {}

  
// @generated_from: mojo.test.new_endpoint_types.mojom.Widget.Click
  virtual void Click() = 0;

  
// @generated_from: mojo.test.new_endpoint_types.mojom.Widget.AddObserver
  virtual void AddObserver(::mojo::PendingRemote<WidgetObserver> observer) = 0;
};

class WidgetClientProxy;

template <typename ImplRefTraits>
class WidgetClientStub;

class WidgetClientRequestValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetClient
class  WidgetClient
    : public WidgetClientInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = WidgetClientInterfaceBase;
  using Proxy_ = WidgetClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = WidgetClientStub<ImplRefTraits>;

  using RequestValidator_ = WidgetClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnInitializedMinVersion = 0,
  };
  virtual ~WidgetClient() {}

  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetClient.OnInitialized
  virtual void OnInitialized() = 0;
};

class WidgetFactoryProxy;

template <typename ImplRefTraits>
class WidgetFactoryStub;

class WidgetFactoryRequestValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetFactory
class  WidgetFactory
    : public WidgetFactoryInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = WidgetFactoryInterfaceBase;
  using Proxy_ = WidgetFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = WidgetFactoryStub<ImplRefTraits>;

  using RequestValidator_ = WidgetFactoryRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kCreateWidgetMinVersion = 0,
  };
  virtual ~WidgetFactory() {}

  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetFactory.CreateWidget
  virtual void CreateWidget(::mojo::PendingReceiver<Widget> receiver, ::mojo::PendingRemote<WidgetClient> client) = 0;
};

class PingerProxy;

template <typename ImplRefTraits>
class PingerStub;

class PingerRequestValidator;
class PingerResponseValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.Pinger
class  Pinger
    : public PingerInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PingerInterfaceBase;
  using Proxy_ = PingerProxy;

  template <typename ImplRefTraits>
  using Stub_ = PingerStub<ImplRefTraits>;

  using RequestValidator_ = PingerRequestValidator;
  using ResponseValidator_ = PingerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
  };
  virtual ~Pinger() {}


  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.new_endpoint_types.mojom.Pinger.Ping
  virtual void Ping(PingCallback callback) = 0;
};

class AssociatedPingerHostProxy;

template <typename ImplRefTraits>
class AssociatedPingerHostStub;

class AssociatedPingerHostRequestValidator;


// @generated_from: mojo.test.new_endpoint_types.mojom.AssociatedPingerHost
class  AssociatedPingerHost
    : public AssociatedPingerHostInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AssociatedPingerHostInterfaceBase;
  using Proxy_ = AssociatedPingerHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = AssociatedPingerHostStub<ImplRefTraits>;

  using RequestValidator_ = AssociatedPingerHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kAddEndpointsMinVersion = 0,
  };
  virtual ~AssociatedPingerHost() {}

  
// @generated_from: mojo.test.new_endpoint_types.mojom.AssociatedPingerHost.AddEndpoints
  virtual void AddEndpoints(::mojo::PendingAssociatedReceiver<Pinger> receiver, ::mojo::PendingAssociatedRemote<Pinger> remote) = 0;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetObserver
class  WidgetObserverProxy
    : public WidgetObserver {
 public:
  using InterfaceType = WidgetObserver;

  explicit WidgetObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetObserver.OnClick
  void OnClick() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.Widget
class  WidgetProxy
    : public Widget {
 public:
  using InterfaceType = Widget;

  explicit WidgetProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.Widget.Click
  void Click() final;
  
// @generated_from: mojo.test.new_endpoint_types.mojom.Widget.AddObserver
  void AddObserver(::mojo::PendingRemote<WidgetObserver> observer) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetClient
class  WidgetClientProxy
    : public WidgetClient {
 public:
  using InterfaceType = WidgetClient;

  explicit WidgetClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetClient.OnInitialized
  void OnInitialized() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetFactory
class  WidgetFactoryProxy
    : public WidgetFactory {
 public:
  using InterfaceType = WidgetFactory;

  explicit WidgetFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.WidgetFactory.CreateWidget
  void CreateWidget(::mojo::PendingReceiver<Widget> receiver, ::mojo::PendingRemote<WidgetClient> client) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.Pinger
class  PingerProxy
    : public Pinger {
 public:
  using InterfaceType = Pinger;

  explicit PingerProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.Pinger.Ping
  void Ping(PingCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.new_endpoint_types.mojom.AssociatedPingerHost
class  AssociatedPingerHostProxy
    : public AssociatedPingerHost {
 public:
  using InterfaceType = AssociatedPingerHost;

  explicit AssociatedPingerHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.new_endpoint_types.mojom.AssociatedPingerHost.AddEndpoints
  void AddEndpoints(::mojo::PendingAssociatedReceiver<Pinger> receiver, ::mojo::PendingAssociatedRemote<Pinger> remote) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  WidgetObserverStubDispatch {
 public:
  static bool Accept(WidgetObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WidgetObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WidgetObserver>>
class WidgetObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WidgetObserverStub() {}
  ~WidgetObserverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  WidgetStubDispatch {
 public:
  static bool Accept(Widget* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Widget* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Widget>>
class WidgetStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WidgetStub() {}
  ~WidgetStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  WidgetClientStubDispatch {
 public:
  static bool Accept(WidgetClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WidgetClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WidgetClient>>
class WidgetClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WidgetClientStub() {}
  ~WidgetClientStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  WidgetFactoryStubDispatch {
 public:
  static bool Accept(WidgetFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WidgetFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WidgetFactory>>
class WidgetFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WidgetFactoryStub() {}
  ~WidgetFactoryStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WidgetFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PingerStubDispatch {
 public:
  static bool Accept(Pinger* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Pinger* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Pinger>>
class PingerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PingerStub() {}
  ~PingerStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AssociatedPingerHostStubDispatch {
 public:
  static bool Accept(AssociatedPingerHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AssociatedPingerHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AssociatedPingerHost>>
class AssociatedPingerHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AssociatedPingerHostStub() {}
  ~AssociatedPingerHostStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingerHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedPingerHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  WidgetObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  WidgetRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  WidgetClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  WidgetFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AssociatedPingerHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI1MiwgImJlZ2luIjogMjIzOCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9q
b20uV2lkZ2V0T2JzZXJ2ZXIifX0sIHsiZW5kIjogMjk3NCwgImJlZ2luIjogMjk2NywgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5kcG9p
bnRfdHlwZXMubW9qb20uV2lkZ2V0T2JzZXJ2ZXIuT25DbGljayJ9fSwgeyJlbmQiOiAzMTY2LCAi
YmVnaW4iOiAzMTYwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0Lm5ld19lbmRwb2ludF90eXBlcy5tb2pvbS5XaWRnZXQifX0sIHsiZW5kIjogMzg1
OCwgImJlZ2luIjogMzg1MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uV2lkZ2V0LkNsaWNrIn19LCB7
ImVuZCI6IDM5NzAsICJiZWdpbiI6IDM5NTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QubmV3X2VuZHBvaW50X3R5cGVzLm1vam9tLldpZGdldC5B
ZGRPYnNlcnZlciJ9fSwgeyJlbmQiOiA0MjM4LCAiYmVnaW4iOiA0MjI2LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lm5ld19lbmRwb2ludF90eXBl
cy5tb2pvbS5XaWRnZXRDbGllbnQifX0sIHsiZW5kIjogNDk2NCwgImJlZ2luIjogNDk1MSwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5k
cG9pbnRfdHlwZXMubW9qb20uV2lkZ2V0Q2xpZW50Lk9uSW5pdGlhbGl6ZWQifX0sIHsiZW5kIjog
NTE5MSwgImJlZ2luIjogNTE3OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uV2lkZ2V0RmFjdG9yeSJ9
fSwgeyJlbmQiOiA1OTIxLCAiYmVnaW4iOiA1OTA5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lm5ld19lbmRwb2ludF90eXBlcy5tb2pvbS5XaWRn
ZXRGYWN0b3J5LkNyZWF0ZVdpZGdldCJ9fSwgeyJlbmQiOiA2MjI4LCAiYmVnaW4iOiA2MjIyLCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lm5ld19l
bmRwb2ludF90eXBlcy5tb2pvbS5QaW5nZXIifX0sIHsiZW5kIjogNjkzNywgImJlZ2luIjogNjkz
MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5u
ZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uUGluZ2VyLlBpbmcifX0sIHsiZW5kIjogNzIyMCwgImJl
Z2luIjogNzIwMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uQXNzb2NpYXRlZFBpbmdlckhvc3QifX0s
IHsiZW5kIjogNzk5OCwgImJlZ2luIjogNzk4NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uQXNzb2Np
YXRlZFBpbmdlckhvc3QuQWRkRW5kcG9pbnRzIn19LCB7ImVuZCI6IDg0NjAsICJiZWdpbiI6IDg0
NTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
bmV3X2VuZHBvaW50X3R5cGVzLm1vam9tLldpZGdldE9ic2VydmVyLk9uQ2xpY2sifX0sIHsiZW5k
IjogODgzNCwgImJlZ2luIjogODgyOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5kcG9pbnRfdHlwZXMubW9qb20uV2lkZ2V0LkNsaWNr
In19LCB7ImVuZCI6IDg5MzksICJiZWdpbiI6IDg5MjgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QubmV3X2VuZHBvaW50X3R5cGVzLm1vam9tLldp
ZGdldC5BZGRPYnNlcnZlciJ9fSwgeyJlbmQiOiA5NDExLCAiYmVnaW4iOiA5Mzk4LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0Lm5ld19lbmRwb2lu
dF90eXBlcy5tb2pvbS5XaWRnZXRDbGllbnQuT25Jbml0aWFsaXplZCJ9fSwgeyJlbmQiOiA5ODQx
LCAiYmVnaW4iOiA5ODI5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0Lm5ld19lbmRwb2ludF90eXBlcy5tb2pvbS5XaWRnZXRGYWN0b3J5LkNyZWF0
ZVdpZGdldCJ9fSwgeyJlbmQiOiAxMDI5NywgImJlZ2luIjogMTAyOTMsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QubmV3X2VuZHBvaW50X3R5cGVz
Lm1vam9tLlBpbmdlci5QaW5nIn19LCB7ImVuZCI6IDEwNzkwLCAiYmVnaW4iOiAxMDc3OCwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5uZXdfZW5k
cG9pbnRfdHlwZXMubW9qb20uQXNzb2NpYXRlZFBpbmdlckhvc3QuQWRkRW5kcG9pbnRzIn19XSwg
InR5cGUiOiAia3l0aGUwIn0=
*/