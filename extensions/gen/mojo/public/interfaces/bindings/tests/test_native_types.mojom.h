// mojo/public/interfaces/bindings/tests/test_native_types.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_NATIVE_TYPES_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_NATIVE_TYPES_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_native_types.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_native_types.mojom-forward.h"
#include "mojo/public/interfaces/bindings/tests/rect.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "mojo/public/cpp/bindings/lib/native_enum_serialization.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "mojo/public/cpp/bindings/tests/pickled_types_chromium.h"
#include "mojo/public/cpp/bindings/tests/test_native_types.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

class PicklePasserProxy;

template <typename ImplRefTraits>
class PicklePasserStub;

class PicklePasserRequestValidator;
class PicklePasserResponseValidator;


// @generated_from: mojo.test.PicklePasser
class  PicklePasser
    : public PicklePasserInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PicklePasserInterfaceBase;
  using Proxy_ = PicklePasserProxy;

  template <typename ImplRefTraits>
  using Stub_ = PicklePasserStub<ImplRefTraits>;

  using RequestValidator_ = PicklePasserRequestValidator;
  using ResponseValidator_ = PicklePasserResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPassPickledStructMinVersion = 0,
    kPassPickledEnumMinVersion = 0,
    kPassPickleContainerMinVersion = 0,
    kPassPicklesMinVersion = 0,
    kPassPickleArraysMinVersion = 0,
  };
  virtual ~PicklePasser() {}


  using PassPickledStructCallback = base::OnceCallback<void(::mojo::test::PickledStructChromium)>;
  
// @generated_from: mojo.test.PicklePasser.PassPickledStruct
  virtual void PassPickledStruct(::mojo::test::PickledStructChromium pickle, PassPickledStructCallback callback) = 0;


  using PassPickledEnumCallback = base::OnceCallback<void(::mojo::test::PickledEnumChromium)>;
  
// @generated_from: mojo.test.PicklePasser.PassPickledEnum
  virtual void PassPickledEnum(::mojo::test::PickledEnumChromium pickle, PassPickledEnumCallback callback) = 0;


  using PassPickleContainerCallback = base::OnceCallback<void(PickleContainerPtr)>;
  
// @generated_from: mojo.test.PicklePasser.PassPickleContainer
  virtual void PassPickleContainer(PickleContainerPtr container, PassPickleContainerCallback callback) = 0;


  using PassPicklesCallback = base::OnceCallback<void(std::vector<::mojo::test::PickledStructChromium>)>;
  
// @generated_from: mojo.test.PicklePasser.PassPickles
  virtual void PassPickles(std::vector<::mojo::test::PickledStructChromium> pickles, PassPicklesCallback callback) = 0;


  using PassPickleArraysCallback = base::OnceCallback<void(std::vector<std::vector<::mojo::test::PickledStructChromium>>)>;
  
// @generated_from: mojo.test.PicklePasser.PassPickleArrays
  virtual void PassPickleArrays(std::vector<std::vector<::mojo::test::PickledStructChromium>> pickle_arrays, PassPickleArraysCallback callback) = 0;
};

class RectServiceProxy;

template <typename ImplRefTraits>
class RectServiceStub;

class RectServiceRequestValidator;
class RectServiceResponseValidator;


// @generated_from: mojo.test.RectService
class  RectService
    : public RectServiceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = RectServiceInterfaceBase;
  using Proxy_ = RectServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = RectServiceStub<ImplRefTraits>;

  using RequestValidator_ = RectServiceRequestValidator;
  using ResponseValidator_ = RectServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAddRectMinVersion = 0,
    kGetLargestRectMinVersion = 0,
    kPassSharedRectMinVersion = 0,
  };
  virtual ~RectService() {}

  
// @generated_from: mojo.test.RectService.AddRect
  virtual void AddRect(const ::mojo::test::RectChromium& r) = 0;


  using GetLargestRectCallback = base::OnceCallback<void(const ::mojo::test::RectChromium&)>;
  
// @generated_from: mojo.test.RectService.GetLargestRect
  virtual void GetLargestRect(GetLargestRectCallback callback) = 0;


  using PassSharedRectCallback = base::OnceCallback<void(const ::mojo::test::SharedRect&)>;
  
// @generated_from: mojo.test.RectService.PassSharedRect
  virtual void PassSharedRect(const ::mojo::test::SharedRect& r, PassSharedRectCallback callback) = 0;
};

class NativeTypeTesterProxy;

template <typename ImplRefTraits>
class NativeTypeTesterStub;

class NativeTypeTesterRequestValidator;
class NativeTypeTesterResponseValidator;


// @generated_from: mojo.test.NativeTypeTester
class  NativeTypeTester
    : public NativeTypeTesterInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = NativeTypeTesterInterfaceBase;
  using Proxy_ = NativeTypeTesterProxy;

  template <typename ImplRefTraits>
  using Stub_ = NativeTypeTesterStub<ImplRefTraits>;

  using RequestValidator_ = NativeTypeTesterRequestValidator;
  using ResponseValidator_ = NativeTypeTesterResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPassNativeStructMinVersion = 0,
    kPassNativeStructWithAttachmentsMinVersion = 0,
  };
  virtual ~NativeTypeTester() {}


  using PassNativeStructCallback = base::OnceCallback<void(const ::mojo::test::TestNativeStruct&)>;
  
// @generated_from: mojo.test.NativeTypeTester.PassNativeStruct
  virtual void PassNativeStruct(const ::mojo::test::TestNativeStruct& s, PassNativeStructCallback callback) = 0;


  using PassNativeStructWithAttachmentsCallback = base::OnceCallback<void(::mojo::test::TestNativeStructWithAttachments)>;
  
// @generated_from: mojo.test.NativeTypeTester.PassNativeStructWithAttachments
  virtual void PassNativeStructWithAttachments(::mojo::test::TestNativeStructWithAttachments s, PassNativeStructWithAttachmentsCallback callback) = 0;
};



// @generated_from: mojo.test.PicklePasser
class  PicklePasserProxy
    : public PicklePasser {
 public:
  using InterfaceType = PicklePasser;

  explicit PicklePasserProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.PicklePasser.PassPickledStruct
  void PassPickledStruct(::mojo::test::PickledStructChromium pickle, PassPickledStructCallback callback) final;
  
// @generated_from: mojo.test.PicklePasser.PassPickledEnum
  void PassPickledEnum(::mojo::test::PickledEnumChromium pickle, PassPickledEnumCallback callback) final;
  
// @generated_from: mojo.test.PicklePasser.PassPickleContainer
  void PassPickleContainer(PickleContainerPtr container, PassPickleContainerCallback callback) final;
  
// @generated_from: mojo.test.PicklePasser.PassPickles
  void PassPickles(std::vector<::mojo::test::PickledStructChromium> pickles, PassPicklesCallback callback) final;
  
// @generated_from: mojo.test.PicklePasser.PassPickleArrays
  void PassPickleArrays(std::vector<std::vector<::mojo::test::PickledStructChromium>> pickle_arrays, PassPickleArraysCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.RectService
class  RectServiceProxy
    : public RectService {
 public:
  using InterfaceType = RectService;

  explicit RectServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.RectService.AddRect
  void AddRect(const ::mojo::test::RectChromium& r) final;
  
// @generated_from: mojo.test.RectService.GetLargestRect
  void GetLargestRect(GetLargestRectCallback callback) final;
  
// @generated_from: mojo.test.RectService.PassSharedRect
  void PassSharedRect(const ::mojo::test::SharedRect& r, PassSharedRectCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.NativeTypeTester
class  NativeTypeTesterProxy
    : public NativeTypeTester {
 public:
  using InterfaceType = NativeTypeTester;

  explicit NativeTypeTesterProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.NativeTypeTester.PassNativeStruct
  void PassNativeStruct(const ::mojo::test::TestNativeStruct& s, PassNativeStructCallback callback) final;
  
// @generated_from: mojo.test.NativeTypeTester.PassNativeStructWithAttachments
  void PassNativeStructWithAttachments(::mojo::test::TestNativeStructWithAttachments s, PassNativeStructWithAttachmentsCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PicklePasserStubDispatch {
 public:
  static bool Accept(PicklePasser* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PicklePasser* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PicklePasser>>
class PicklePasserStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PicklePasserStub() {}
  ~PicklePasserStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PicklePasserStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PicklePasserStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  RectServiceStubDispatch {
 public:
  static bool Accept(RectService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      RectService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<RectService>>
class RectServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  RectServiceStub() {}
  ~RectServiceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RectServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RectServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  NativeTypeTesterStubDispatch {
 public:
  static bool Accept(NativeTypeTester* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      NativeTypeTester* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<NativeTypeTester>>
class NativeTypeTesterStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  NativeTypeTesterStub() {}
  ~NativeTypeTesterStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeTypeTesterStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeTypeTesterStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PicklePasserRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  RectServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  NativeTypeTesterRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PicklePasserResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  RectServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  NativeTypeTesterResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};












// @generated_from: mojo.test.PickleContainer
class  PickleContainer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PickleContainer, T>::value>;
  using DataView = PickleContainerDataView;
  using Data_ = internal::PickleContainer_Data;

  template <typename... Args>
  static PickleContainerPtr New(Args&&... args) {
    return PickleContainerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PickleContainerPtr From(const U& u) {
    return mojo::TypeConverter<PickleContainerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PickleContainer>::Convert(*this);
  }


  PickleContainer();

  PickleContainer(
      ::mojo::test::PickledStructChromium f_struct,
      ::mojo::test::PickledEnumChromium f_enum);

  ~PickleContainer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PickleContainerPtr>
  PickleContainerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PickleContainer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PickleContainer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PickleContainer_UnserializedMessageContext<
            UserType, PickleContainer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PickleContainer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PickleContainer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PickleContainer_UnserializedMessageContext<
            UserType, PickleContainer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PickleContainer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.PickleContainer.f_struct
  ::mojo::test::PickledStructChromium f_struct;
  
// @generated_from: mojo.test.PickleContainer.f_enum
  ::mojo::test::PickledEnumChromium f_enum;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(PickleContainer);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PickleContainer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}



template <typename StructPtrType>
PickleContainerPtr PickleContainer::Clone() const {
  return New(
      mojo::Clone(f_struct),
      mojo::Clone(f_enum)
  );
}

template <typename T, PickleContainer::EnableIfSame<T>*>
bool PickleContainer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->f_struct, other_struct.f_struct))
    return false;
  if (!mojo::Equals(this->f_enum, other_struct.f_enum))
    return false;
  return true;
}

template <typename T, PickleContainer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.f_struct < rhs.f_struct)
    return true;
  if (rhs.f_struct < lhs.f_struct)
    return false;
  if (lhs.f_enum < rhs.f_enum)
    return true;
  if (rhs.f_enum < lhs.f_enum)
    return false;
  return false;
}


}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::PickleContainer::DataView,
                                         ::mojo::test::PickleContainerPtr> {
  static bool IsNull(const ::mojo::test::PickleContainerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::PickleContainerPtr* output) { output->reset(); }

  static const decltype(::mojo::test::PickleContainer::f_struct)& f_struct(
      const ::mojo::test::PickleContainerPtr& input) {
    return input->f_struct;
  }

  static decltype(::mojo::test::PickleContainer::f_enum) f_enum(
      const ::mojo::test::PickleContainerPtr& input) {
    return input->f_enum;
  }

  static bool Read(::mojo::test::PickleContainer::DataView input, ::mojo::test::PickleContainerPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_NATIVE_TYPES_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI0MCwgImJlZ2luIjogMjIyOCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVQYXNzZXIifX0sIHsiZW5k
IjogMzIwNCwgImJlZ2luIjogMzE4NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVQYXNzZXIuUGFzc1BpY2tsZWRTdHJ1Y3QifX0sIHsi
ZW5kIjogMzQ3OSwgImJlZ2luIjogMzQ2NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVQYXNzZXIuUGFzc1BpY2tsZWRFbnVtIn19LCB7
ImVuZCI6IDM3NDcsICJiZWdpbiI6IDM3MjgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlUGFzc2VyLlBhc3NQaWNrbGVDb250YWluZXIi
fX0sIHsiZW5kIjogNDAxMywgImJlZ2luIjogNDAwMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVQYXNzZXIuUGFzc1BpY2tsZXMifX0s
IHsiZW5kIjogNDMyNywgImJlZ2luIjogNDMxMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVQYXNzZXIuUGFzc1BpY2tsZUFycmF5cyJ9
fSwgeyJlbmQiOiA0NjY1LCAiYmVnaW4iOiA0NjU0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlJlY3RTZXJ2aWNlIn19LCB7ImVuZCI6IDU0MTYs
ICJiZWdpbiI6IDU0MDksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuUmVjdFNlcnZpY2UuQWRkUmVjdCJ9fSwgeyJlbmQiOiA1NjQ0LCAiYmVnaW4i
OiA1NjMwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LlJlY3RTZXJ2aWNlLkdldExhcmdlc3RSZWN0In19LCB7ImVuZCI6IDU4NjYsICJiZWdpbiI6
IDU4NTIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuUmVjdFNlcnZpY2UuUGFzc1NoYXJlZFJlY3QifX0sIHsiZW5kIjogNjE5MCwgImJlZ2luIjog
NjE3NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5OYXRpdmVUeXBlVGVzdGVyIn19LCB7ImVuZCI6IDcwOTEsICJiZWdpbiI6IDcwNzUsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuTmF0aXZlVHlw
ZVRlc3Rlci5QYXNzTmF0aXZlU3RydWN0In19LCB7ImVuZCI6IDc0MjYsICJiZWdpbiI6IDczOTUs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuTmF0
aXZlVHlwZVRlc3Rlci5QYXNzTmF0aXZlU3RydWN0V2l0aEF0dGFjaG1lbnRzIn19LCB7ImVuZCI6
IDc4NDUsICJiZWdpbiI6IDc4MjgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlUGFzc2VyLlBhc3NQaWNrbGVkU3RydWN0In19LCB7ImVu
ZCI6IDgwMTcsICJiZWdpbiI6IDgwMDIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlUGFzc2VyLlBhc3NQaWNrbGVkRW51bSJ9fSwgeyJl
bmQiOiA4MTkzLCAiYmVnaW4iOiA4MTc0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0LlBpY2tsZVBhc3Nlci5QYXNzUGlja2xlQ29udGFpbmVyIn19
LCB7ImVuZCI6IDgzNDUsICJiZWdpbiI6IDgzMzQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlUGFzc2VyLlBhc3NQaWNrbGVzIn19LCB7
ImVuZCI6IDg1MjcsICJiZWdpbiI6IDg1MTEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlUGFzc2VyLlBhc3NQaWNrbGVBcnJheXMifX0s
IHsiZW5kIjogODk5NSwgImJlZ2luIjogODk4OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5SZWN0U2VydmljZS5BZGRSZWN0In19LCB7ImVuZCI6
IDkxMjEsICJiZWdpbiI6IDkxMDcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuUmVjdFNlcnZpY2UuR2V0TGFyZ2VzdFJlY3QifX0sIHsiZW5kIjog
OTI0MywgImJlZ2luIjogOTIyOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5SZWN0U2VydmljZS5QYXNzU2hhcmVkUmVjdCJ9fSwgeyJlbmQiOiA5
NzE1LCAiYmVnaW4iOiA5Njk5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0Lk5hdGl2ZVR5cGVUZXN0ZXIuUGFzc05hdGl2ZVN0cnVjdCJ9fSwgeyJl
bmQiOiA5OTE5LCAiYmVnaW4iOiA5ODg4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0Lk5hdGl2ZVR5cGVUZXN0ZXIuUGFzc05hdGl2ZVN0cnVjdFdp
dGhBdHRhY2htZW50cyJ9fSwgeyJlbmQiOiAxNDc4NiwgImJlZ2luIjogMTQ3NzEsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuUGlja2xlQ29udGFp
bmVyIn19LCB7ImVuZCI6IDE4NTUzLCAiYmVnaW4iOiAxODU0NSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5QaWNrbGVDb250YWluZXIuZl9zdHJ1
Y3QifX0sIHsiZW5kIjogMTg2NTMsICJiZWdpbiI6IDE4NjQ3LCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlBpY2tsZUNvbnRhaW5lci5mX2VudW0i
fX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/