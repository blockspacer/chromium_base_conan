// mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-params-data.h"
#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-shared-message-ids.h"

#include "mojo/public/interfaces/bindings/tests/new_endpoint_types.test-mojom-import-headers.h"


#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_NEW_ENDPOINT_TYPES_TEST_MOJOM_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace new_endpoint_types {
namespace mojom {
const char WidgetObserver::Name_[] = "mojo.test.new_endpoint_types.mojom.WidgetObserver";

WidgetObserverProxy::WidgetObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WidgetObserverProxy::OnClick(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::new_endpoint_types::mojom::WidgetObserver::OnClick");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWidgetObserver_OnClick_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::WidgetObserver_OnClick_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WidgetObserver::Name_);
  message.set_method_name("OnClick");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WidgetObserverStubDispatch::Accept(
    WidgetObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWidgetObserver_OnClick_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::WidgetObserver::OnClick",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::WidgetObserver::OnClick");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::WidgetObserver_OnClick_Params_Data* params =
          reinterpret_cast<internal::WidgetObserver_OnClick_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WidgetObserver_OnClick_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WidgetObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnClick();
      return true;
    }
  }
  return false;
}

// static
bool WidgetObserverStubDispatch::AcceptWithResponder(
    WidgetObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kWidgetObserver_OnClick_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kWidgetObserverValidationInfo[] = {
    {internal::kWidgetObserver_OnClick_Name,
     {&internal::WidgetObserver_OnClick_Params_Data::Validate,
      nullptr /* no response */}},
};

bool WidgetObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::WidgetObserver::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kWidgetObserverValidationInfo);
}

const char Widget::Name_[] = "mojo.test.new_endpoint_types.mojom.Widget";

WidgetProxy::WidgetProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WidgetProxy::Click(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::new_endpoint_types::mojom::Widget::Click");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWidget_Click_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::Widget_Click_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Widget::Name_);
  message.set_method_name("Click");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void WidgetProxy::AddObserver(
    ::mojo::PendingRemote<WidgetObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::new_endpoint_types::mojom::Widget::AddObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer, 
                        "<value of type ::mojo::PendingRemote<WidgetObserver>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWidget_AddObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::Widget_AddObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojo::test::new_endpoint_types::mojom::WidgetObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in Widget.AddObserver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Widget::Name_);
  message.set_method_name("AddObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WidgetStubDispatch::Accept(
    Widget* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWidget_Click_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::Widget::Click",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::Widget::Click");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Widget_Click_Params_Data* params =
          reinterpret_cast<internal::Widget_Click_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      Widget_Click_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Widget::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Click();
      return true;
    }
    case internal::kWidget_AddObserver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::Widget::AddObserver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::Widget::AddObserver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Widget_AddObserver_Params_Data* params =
          reinterpret_cast<internal::Widget_AddObserver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<WidgetObserver> p_observer{};
      Widget_AddObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Widget::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddObserver(
std::move(p_observer));
      return true;
    }
  }
  return false;
}

// static
bool WidgetStubDispatch::AcceptWithResponder(
    Widget* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kWidget_Click_Name: {
      break;
    }
    case internal::kWidget_AddObserver_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kWidgetValidationInfo[] = {
    {internal::kWidget_Click_Name,
     {&internal::Widget_Click_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kWidget_AddObserver_Name,
     {&internal::Widget_AddObserver_Params_Data::Validate,
      nullptr /* no response */}},
};

bool WidgetRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::Widget::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kWidgetValidationInfo);
}

const char WidgetClient::Name_[] = "mojo.test.new_endpoint_types.mojom.WidgetClient";

WidgetClientProxy::WidgetClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WidgetClientProxy::OnInitialized(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::new_endpoint_types::mojom::WidgetClient::OnInitialized");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWidgetClient_OnInitialized_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::WidgetClient_OnInitialized_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WidgetClient::Name_);
  message.set_method_name("OnInitialized");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WidgetClientStubDispatch::Accept(
    WidgetClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWidgetClient_OnInitialized_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::WidgetClient::OnInitialized",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::WidgetClient::OnInitialized");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::WidgetClient_OnInitialized_Params_Data* params =
          reinterpret_cast<internal::WidgetClient_OnInitialized_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WidgetClient_OnInitialized_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WidgetClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnInitialized();
      return true;
    }
  }
  return false;
}

// static
bool WidgetClientStubDispatch::AcceptWithResponder(
    WidgetClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kWidgetClient_OnInitialized_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kWidgetClientValidationInfo[] = {
    {internal::kWidgetClient_OnInitialized_Name,
     {&internal::WidgetClient_OnInitialized_Params_Data::Validate,
      nullptr /* no response */}},
};

bool WidgetClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::WidgetClient::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kWidgetClientValidationInfo);
}

const char WidgetFactory::Name_[] = "mojo.test.new_endpoint_types.mojom.WidgetFactory";

WidgetFactoryProxy::WidgetFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WidgetFactoryProxy::CreateWidget(
    ::mojo::PendingReceiver<Widget> in_receiver, ::mojo::PendingRemote<WidgetClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::new_endpoint_types::mojom::WidgetFactory::CreateWidget", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingReceiver<Widget>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client, 
                        "<value of type ::mojo::PendingRemote<WidgetClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWidgetFactory_CreateWidget_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::WidgetFactory_CreateWidget_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::mojo::test::new_endpoint_types::mojom::WidgetInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in WidgetFactory.CreateWidget request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojo::test::new_endpoint_types::mojom::WidgetClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in WidgetFactory.CreateWidget request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WidgetFactory::Name_);
  message.set_method_name("CreateWidget");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WidgetFactoryStubDispatch::Accept(
    WidgetFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWidgetFactory_CreateWidget_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::WidgetFactory::CreateWidget",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::WidgetFactory::CreateWidget");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::WidgetFactory_CreateWidget_Params_Data* params =
          reinterpret_cast<internal::WidgetFactory_CreateWidget_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<Widget> p_receiver{};
      ::mojo::PendingRemote<WidgetClient> p_client{};
      WidgetFactory_CreateWidget_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WidgetFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateWidget(
std::move(p_receiver), 
std::move(p_client));
      return true;
    }
  }
  return false;
}

// static
bool WidgetFactoryStubDispatch::AcceptWithResponder(
    WidgetFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kWidgetFactory_CreateWidget_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kWidgetFactoryValidationInfo[] = {
    {internal::kWidgetFactory_CreateWidget_Name,
     {&internal::WidgetFactory_CreateWidget_Params_Data::Validate,
      nullptr /* no response */}},
};

bool WidgetFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::WidgetFactory::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kWidgetFactoryValidationInfo);
}

const char Pinger::Name_[] = "mojo.test.new_endpoint_types.mojom.Pinger";

class Pinger_Ping_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Pinger_Ping_ForwardToCallback(
      Pinger::PingCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Pinger::PingCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Pinger_Ping_ForwardToCallback);
};

PingerProxy::PingerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PingerProxy::Ping(
    PingCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::new_endpoint_types::mojom::Pinger::Ping");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPinger_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::Pinger_Ping_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Pinger::Name_);
  message.set_method_name("Ping");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Pinger_Ping_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Pinger_Ping_ProxyToResponder {
 public:
  static Pinger::PingCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Pinger_Ping_ProxyToResponder> proxy(
        new Pinger_Ping_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Pinger_Ping_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Pinger_Ping_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Pinger_Ping_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Pinger::PingCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Pinger_Ping_ProxyToResponder);
};

bool Pinger_Ping_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::new_endpoint_types::mojom::Pinger::PingCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::Pinger_Ping_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Pinger_Ping_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  Pinger_Ping_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Pinger::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void Pinger_Ping_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)mojo::test::new_endpoint_types::mojom::Pinger::PingCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPinger_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::Pinger_Ping_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::new_endpoint_types::mojom::Pinger::PingCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Pinger::Name_);
  message.set_method_name("Ping");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PingerStubDispatch::Accept(
    Pinger* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPinger_Ping_Name: {
      break;
    }
  }
  return false;
}

// static
bool PingerStubDispatch::AcceptWithResponder(
    Pinger* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kPinger_Ping_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::Pinger::Ping",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::Pinger::Ping");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::Pinger_Ping_Params_Data* params =
          reinterpret_cast<
              internal::Pinger_Ping_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      Pinger_Ping_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Pinger::Name_, 0, false);
        return false;
      }
      Pinger::PingCallback callback =
          Pinger_Ping_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Ping(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kPingerValidationInfo[] = {
    {internal::kPinger_Ping_Name,
     {&internal::Pinger_Ping_Params_Data::Validate,
      &internal::Pinger_Ping_ResponseParams_Data::Validate}},
};

bool PingerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::Pinger::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kPingerValidationInfo);
}

bool PingerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::Pinger::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kPingerValidationInfo);

}
const char AssociatedPingerHost::Name_[] = "mojo.test.new_endpoint_types.mojom.AssociatedPingerHost";

AssociatedPingerHostProxy::AssociatedPingerHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AssociatedPingerHostProxy::AddEndpoints(
    ::mojo::PendingAssociatedReceiver<Pinger> in_receiver, ::mojo::PendingAssociatedRemote<Pinger> in_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::new_endpoint_types::mojom::AssociatedPingerHost::AddEndpoints", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<Pinger>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type ::mojo::PendingAssociatedRemote<Pinger>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAssociatedPingerHost_AddEndpoints_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::new_endpoint_types::mojom::internal::AssociatedPingerHost_AddEndpoints_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::new_endpoint_types::mojom::PingerAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in AssociatedPingerHost.AddEndpoints request");
  mojo::internal::Serialize<::mojo::test::new_endpoint_types::mojom::PingerAssociatedPtrInfoDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid remote in AssociatedPingerHost.AddEndpoints request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AssociatedPingerHost::Name_);
  message.set_method_name("AddEndpoints");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool AssociatedPingerHostStubDispatch::Accept(
    AssociatedPingerHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAssociatedPingerHost_AddEndpoints_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::new_endpoint_types::mojom::AssociatedPingerHost::AddEndpoints",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::new_endpoint_types::mojom::AssociatedPingerHost::AddEndpoints");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::AssociatedPingerHost_AddEndpoints_Params_Data* params =
          reinterpret_cast<internal::AssociatedPingerHost_AddEndpoints_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<Pinger> p_receiver{};
      ::mojo::PendingAssociatedRemote<Pinger> p_remote{};
      AssociatedPingerHost_AddEndpoints_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AssociatedPingerHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddEndpoints(
std::move(p_receiver), 
std::move(p_remote));
      return true;
    }
  }
  return false;
}

// static
bool AssociatedPingerHostStubDispatch::AcceptWithResponder(
    AssociatedPingerHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kAssociatedPingerHost_AddEndpoints_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kAssociatedPingerHostValidationInfo[] = {
    {internal::kAssociatedPingerHost_AddEndpoints_Name,
     {&internal::AssociatedPingerHost_AddEndpoints_Params_Data::Validate,
      nullptr /* no response */}},
};

bool AssociatedPingerHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::new_endpoint_types::mojom::AssociatedPingerHost::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kAssociatedPingerHostValidationInfo);
}

}  // namespace mojom
}  // namespace new_endpoint_types
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif