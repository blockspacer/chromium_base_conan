// mojo/public/interfaces/bindings/tests/serialization_test_structs.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/serialization_test_structs.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/serialization_test_structs.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {





// @generated_from: mojo.test.Struct1
class  Struct1 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct1, T>::value>;
  using DataView = Struct1DataView;
  using Data_ = internal::Struct1_Data;

  template <typename... Args>
  static Struct1Ptr New(Args&&... args) {
    return Struct1Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct1Ptr From(const U& u) {
    return mojo::TypeConverter<Struct1Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct1>::Convert(*this);
  }


  Struct1();

  explicit Struct1(
      uint8_t i);

  ~Struct1();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct1Ptr>
  Struct1Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct1::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct1::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Struct1::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct1::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct1_UnserializedMessageContext<
            UserType, Struct1::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct1::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct1::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct1_UnserializedMessageContext<
            UserType, Struct1::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct1::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct1.i
  uint8_t i;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct1::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct1::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct1::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct1::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









// @generated_from: mojo.test.Struct6
class  Struct6 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct6, T>::value>;
  using DataView = Struct6DataView;
  using Data_ = internal::Struct6_Data;

  template <typename... Args>
  static Struct6Ptr New(Args&&... args) {
    return Struct6Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct6Ptr From(const U& u) {
    return mojo::TypeConverter<Struct6Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct6>::Convert(*this);
  }


  Struct6();

  explicit Struct6(
      const std::string& str);

  ~Struct6();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct6Ptr>
  Struct6Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct6::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct6::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Struct6::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct6::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct6_UnserializedMessageContext<
            UserType, Struct6::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct6::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct6::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct6_UnserializedMessageContext<
            UserType, Struct6::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct6::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct6.str
  std::string str;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct6::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct6::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct6::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct6::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









// @generated_from: mojo.test.Struct2
class  Struct2 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct2, T>::value>;
  using DataView = Struct2DataView;
  using Data_ = internal::Struct2_Data;

  template <typename... Args>
  static Struct2Ptr New(Args&&... args) {
    return Struct2Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct2Ptr From(const U& u) {
    return mojo::TypeConverter<Struct2Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct2>::Convert(*this);
  }


  Struct2();

  explicit Struct2(
      ::mojo::ScopedHandle hdl);

  ~Struct2();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct2Ptr>
  Struct2Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct2::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct2::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct2::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct2_UnserializedMessageContext<
            UserType, Struct2::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct2::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct2::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct2_UnserializedMessageContext<
            UserType, Struct2::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct2::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct2.hdl
  ::mojo::ScopedHandle hdl;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Struct2);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct2::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct2::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct2::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct2::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.Struct3
class  Struct3 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct3, T>::value>;
  using DataView = Struct3DataView;
  using Data_ = internal::Struct3_Data;

  template <typename... Args>
  static Struct3Ptr New(Args&&... args) {
    return Struct3Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct3Ptr From(const U& u) {
    return mojo::TypeConverter<Struct3Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct3>::Convert(*this);
  }


  Struct3();

  explicit Struct3(
      Struct1Ptr struct_1);

  ~Struct3();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct3Ptr>
  Struct3Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct3::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct3::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Struct3::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct3::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct3_UnserializedMessageContext<
            UserType, Struct3::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct3::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct3::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct3_UnserializedMessageContext<
            UserType, Struct3::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct3::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct3.struct_1
  Struct1Ptr struct_1;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Struct3);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct3::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct3::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct3::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct3::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.Struct4
class  Struct4 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct4, T>::value>;
  using DataView = Struct4DataView;
  using Data_ = internal::Struct4_Data;

  template <typename... Args>
  static Struct4Ptr New(Args&&... args) {
    return Struct4Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct4Ptr From(const U& u) {
    return mojo::TypeConverter<Struct4Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct4>::Convert(*this);
  }


  Struct4();

  explicit Struct4(
      std::vector<Struct1Ptr> data);

  ~Struct4();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct4Ptr>
  Struct4Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct4::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct4::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Struct4::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct4::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct4_UnserializedMessageContext<
            UserType, Struct4::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct4::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct4::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct4_UnserializedMessageContext<
            UserType, Struct4::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct4::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct4.data
  std::vector<Struct1Ptr> data;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Struct4);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct4::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct4::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct4::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct4::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.Struct5
class  Struct5 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Struct5, T>::value>;
  using DataView = Struct5DataView;
  using Data_ = internal::Struct5_Data;

  template <typename... Args>
  static Struct5Ptr New(Args&&... args) {
    return Struct5Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Struct5Ptr From(const U& u) {
    return mojo::TypeConverter<Struct5Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Struct5>::Convert(*this);
  }


  Struct5();

  explicit Struct5(
      std::vector<Struct1Ptr> pair);

  ~Struct5();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Struct5Ptr>
  Struct5Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Struct5::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Struct5::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Struct5::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Struct5::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Struct5_UnserializedMessageContext<
            UserType, Struct5::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Struct5::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Struct5::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Struct5_UnserializedMessageContext<
            UserType, Struct5::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Struct5::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.Struct5.pair
  std::vector<Struct1Ptr> pair;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Struct5);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Struct5::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Struct5::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Struct5::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Struct5::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.test.StructOfNullables
class  StructOfNullables {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructOfNullables, T>::value>;
  using DataView = StructOfNullablesDataView;
  using Data_ = internal::StructOfNullables_Data;

  template <typename... Args>
  static StructOfNullablesPtr New(Args&&... args) {
    return StructOfNullablesPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructOfNullablesPtr From(const U& u) {
    return mojo::TypeConverter<StructOfNullablesPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructOfNullables>::Convert(*this);
  }


  StructOfNullables();

  StructOfNullables(
      ::mojo::ScopedHandle hdl,
      Struct1Ptr struct_1,
      const base::Optional<std::string>& str);

  ~StructOfNullables();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructOfNullablesPtr>
  StructOfNullablesPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructOfNullables::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructOfNullables_UnserializedMessageContext<
            UserType, StructOfNullables::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructOfNullables::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructOfNullables::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructOfNullables_UnserializedMessageContext<
            UserType, StructOfNullables::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructOfNullables::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.StructOfNullables.hdl
  ::mojo::ScopedHandle hdl;
  
// @generated_from: mojo.test.StructOfNullables.struct_1
  Struct1Ptr struct_1;
  
// @generated_from: mojo.test.StructOfNullables.str
  base::Optional<std::string> str;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(StructOfNullables);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructOfNullables::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
Struct1Ptr Struct1::Clone() const {
  return New(
      mojo::Clone(i)
  );
}

template <typename T, Struct1::EnableIfSame<T>*>
bool Struct1::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->i, other_struct.i))
    return false;
  return true;
}

template <typename T, Struct1::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.i < rhs.i)
    return true;
  if (rhs.i < lhs.i)
    return false;
  return false;
}
template <typename StructPtrType>
Struct2Ptr Struct2::Clone() const {
  return New(
      mojo::Clone(hdl)
  );
}

template <typename T, Struct2::EnableIfSame<T>*>
bool Struct2::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->hdl, other_struct.hdl))
    return false;
  return true;
}

template <typename T, Struct2::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.hdl < rhs.hdl)
    return true;
  if (rhs.hdl < lhs.hdl)
    return false;
  return false;
}
template <typename StructPtrType>
Struct3Ptr Struct3::Clone() const {
  return New(
      mojo::Clone(struct_1)
  );
}

template <typename T, Struct3::EnableIfSame<T>*>
bool Struct3::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->struct_1, other_struct.struct_1))
    return false;
  return true;
}

template <typename T, Struct3::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.struct_1 < rhs.struct_1)
    return true;
  if (rhs.struct_1 < lhs.struct_1)
    return false;
  return false;
}
template <typename StructPtrType>
Struct4Ptr Struct4::Clone() const {
  return New(
      mojo::Clone(data)
  );
}

template <typename T, Struct4::EnableIfSame<T>*>
bool Struct4::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  return true;
}

template <typename T, Struct4::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  return false;
}
template <typename StructPtrType>
Struct5Ptr Struct5::Clone() const {
  return New(
      mojo::Clone(pair)
  );
}

template <typename T, Struct5::EnableIfSame<T>*>
bool Struct5::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->pair, other_struct.pair))
    return false;
  return true;
}

template <typename T, Struct5::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.pair < rhs.pair)
    return true;
  if (rhs.pair < lhs.pair)
    return false;
  return false;
}
template <typename StructPtrType>
Struct6Ptr Struct6::Clone() const {
  return New(
      mojo::Clone(str)
  );
}

template <typename T, Struct6::EnableIfSame<T>*>
bool Struct6::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->str, other_struct.str))
    return false;
  return true;
}

template <typename T, Struct6::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.str < rhs.str)
    return true;
  if (rhs.str < lhs.str)
    return false;
  return false;
}
template <typename StructPtrType>
StructOfNullablesPtr StructOfNullables::Clone() const {
  return New(
      mojo::Clone(hdl),
      mojo::Clone(struct_1),
      mojo::Clone(str)
  );
}

template <typename T, StructOfNullables::EnableIfSame<T>*>
bool StructOfNullables::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->hdl, other_struct.hdl))
    return false;
  if (!mojo::Equals(this->struct_1, other_struct.struct_1))
    return false;
  if (!mojo::Equals(this->str, other_struct.str))
    return false;
  return true;
}

template <typename T, StructOfNullables::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.hdl < rhs.hdl)
    return true;
  if (rhs.hdl < lhs.hdl)
    return false;
  if (lhs.struct_1 < rhs.struct_1)
    return true;
  if (rhs.struct_1 < lhs.struct_1)
    return false;
  if (lhs.str < rhs.str)
    return true;
  if (rhs.str < lhs.str)
    return false;
  return false;
}


}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::Struct1::DataView,
                                         ::mojo::test::Struct1Ptr> {
  static bool IsNull(const ::mojo::test::Struct1Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct1Ptr* output) { output->reset(); }

  static decltype(::mojo::test::Struct1::i) i(
      const ::mojo::test::Struct1Ptr& input) {
    return input->i;
  }

  static bool Read(::mojo::test::Struct1::DataView input, ::mojo::test::Struct1Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::Struct2::DataView,
                                         ::mojo::test::Struct2Ptr> {
  static bool IsNull(const ::mojo::test::Struct2Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct2Ptr* output) { output->reset(); }

  static  decltype(::mojo::test::Struct2::hdl)& hdl(
       ::mojo::test::Struct2Ptr& input) {
    return input->hdl;
  }

  static bool Read(::mojo::test::Struct2::DataView input, ::mojo::test::Struct2Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::Struct3::DataView,
                                         ::mojo::test::Struct3Ptr> {
  static bool IsNull(const ::mojo::test::Struct3Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct3Ptr* output) { output->reset(); }

  static const decltype(::mojo::test::Struct3::struct_1)& struct_1(
      const ::mojo::test::Struct3Ptr& input) {
    return input->struct_1;
  }

  static bool Read(::mojo::test::Struct3::DataView input, ::mojo::test::Struct3Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::Struct4::DataView,
                                         ::mojo::test::Struct4Ptr> {
  static bool IsNull(const ::mojo::test::Struct4Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct4Ptr* output) { output->reset(); }

  static const decltype(::mojo::test::Struct4::data)& data(
      const ::mojo::test::Struct4Ptr& input) {
    return input->data;
  }

  static bool Read(::mojo::test::Struct4::DataView input, ::mojo::test::Struct4Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::Struct5::DataView,
                                         ::mojo::test::Struct5Ptr> {
  static bool IsNull(const ::mojo::test::Struct5Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct5Ptr* output) { output->reset(); }

  static const decltype(::mojo::test::Struct5::pair)& pair(
      const ::mojo::test::Struct5Ptr& input) {
    return input->pair;
  }

  static bool Read(::mojo::test::Struct5::DataView input, ::mojo::test::Struct5Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::Struct6::DataView,
                                         ::mojo::test::Struct6Ptr> {
  static bool IsNull(const ::mojo::test::Struct6Ptr& input) { return !input; }
  static void SetToNull(::mojo::test::Struct6Ptr* output) { output->reset(); }

  static const decltype(::mojo::test::Struct6::str)& str(
      const ::mojo::test::Struct6Ptr& input) {
    return input->str;
  }

  static bool Read(::mojo::test::Struct6::DataView input, ::mojo::test::Struct6Ptr* output);
};


template <>
struct  StructTraits<::mojo::test::StructOfNullables::DataView,
                                         ::mojo::test::StructOfNullablesPtr> {
  static bool IsNull(const ::mojo::test::StructOfNullablesPtr& input) { return !input; }
  static void SetToNull(::mojo::test::StructOfNullablesPtr* output) { output->reset(); }

  static  decltype(::mojo::test::StructOfNullables::hdl)& hdl(
       ::mojo::test::StructOfNullablesPtr& input) {
    return input->hdl;
  }

  static const decltype(::mojo::test::StructOfNullables::struct_1)& struct_1(
      const ::mojo::test::StructOfNullablesPtr& input) {
    return input->struct_1;
  }

  static const decltype(::mojo::test::StructOfNullables::str)& str(
      const ::mojo::test::StructOfNullablesPtr& input) {
    return input->str;
  }

  static bool Read(::mojo::test::StructOfNullables::DataView input, ::mojo::test::StructOfNullablesPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTc5MCwgImJlZ2luIjogMTc4MywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3QxIn19LCB7ImVuZCI6IDUy
NzUsICJiZWdpbiI6IDUyNzQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuU3RydWN0MS5pIn19LCB7ImVuZCI6IDYyNzcsICJiZWdpbiI6IDYyNzAs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3Ry
dWN0NiJ9fSwgeyJlbmQiOiA5NzgzLCAiYmVnaW4iOiA5NzgwLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlN0cnVjdDYuc3RyIn19LCB7ImVuZCI6
IDEwNzg1LCAiYmVnaW4iOiAxMDc3OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3QyIn19LCB7ImVuZCI6IDE0MDc1LCAiYmVnaW4iOiAx
NDA3MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5TdHJ1Y3QyLmhkbCJ9fSwgeyJlbmQiOiAxNTExMCwgImJlZ2luIjogMTUxMDMsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0MyJ9fSwg
eyJlbmQiOiAxODYyMiwgImJlZ2luIjogMTg2MTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0My5zdHJ1Y3RfMSJ9fSwgeyJlbmQiOiAx
OTY1NywgImJlZ2luIjogMTk2NTAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuU3RydWN0NCJ9fSwgeyJlbmQiOiAyMzE0OSwgImJlZ2luIjogMjMx
NDUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Qu
U3RydWN0NC5kYXRhIn19LCB7ImVuZCI6IDI0MTg0LCAiYmVnaW4iOiAyNDE3NywgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3Q1In19LCB7
ImVuZCI6IDI3Njc2LCAiYmVnaW4iOiAyNzY3MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5TdHJ1Y3Q1LnBhaXIifX0sIHsiZW5kIjogMjg3MzIs
ICJiZWdpbiI6IDI4NzE1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LlN0cnVjdE9mTnVsbGFibGVzIn19LCB7ImVuZCI6IDMyMzI2LCAiYmVnaW4i
OiAzMjMyMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5TdHJ1Y3RPZk51bGxhYmxlcy5oZGwifX0sIHsiZW5kIjogMzI0MDksICJiZWdpbiI6IDMy
NDAxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LlN0cnVjdE9mTnVsbGFibGVzLnN0cnVjdF8xIn19LCB7ImVuZCI6IDMyNDk5LCAiYmVnaW4iOiAz
MjQ5NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5TdHJ1Y3RPZk51bGxhYmxlcy5zdHIifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/