// mojo/public/interfaces/bindings/tests/sample_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/sample_service.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/sample_service.mojom-forward.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom.h"
#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace sample {

class DefaultsSenderProxy;

template <typename ImplRefTraits>
class DefaultsSenderStub;

class DefaultsSenderRequestValidator;


// @generated_from: sample.DefaultsSender
class  DefaultsSender
    : public DefaultsSenderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = DefaultsSenderInterfaceBase;
  using Proxy_ = DefaultsSenderProxy;

  template <typename ImplRefTraits>
  using Stub_ = DefaultsSenderStub<ImplRefTraits>;

  using RequestValidator_ = DefaultsSenderRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kSendBarMinVersion = 0,
    kSendFooMinVersion = 0,
    kSendDefaultsTestMinVersion = 0,
  };
  virtual ~DefaultsSender() {}

  
// @generated_from: sample.DefaultsSender.SendBar
  virtual void SendBar(BarPtr bar) = 0;

  
// @generated_from: sample.DefaultsSender.SendFoo
  virtual void SendFoo(FooPtr foo) = 0;

  
// @generated_from: sample.DefaultsSender.SendDefaultsTest
  virtual void SendDefaultsTest(DefaultsTestPtr defaults) = 0;
};

class ServiceProxy;

template <typename ImplRefTraits>
class ServiceStub;

class ServiceRequestValidator;
class ServiceResponseValidator;


// @generated_from: sample.Service
class  Service
    : public ServiceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = ServiceInterfaceBase;
  using Proxy_ = ServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = ServiceStub<ImplRefTraits>;

  using RequestValidator_ = ServiceRequestValidator;
  using ResponseValidator_ = ServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kFrobinateMinVersion = 0,
    kGetPortMinVersion = 0,
  };
  
// @generated_from: sample.Service.BazOptions
  using BazOptions = Service_BazOptions;
  
// @generated_from: sample.Service.kFavoriteBaz
  static constexpr uint8_t kFavoriteBaz = 1U;
  virtual ~Service() {}


  using FrobinateCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: sample.Service.Frobinate
  virtual void Frobinate(FooPtr foo, Service::BazOptions baz, ::mojo::PendingRemote<Port> port, FrobinateCallback callback) = 0;

  
// @generated_from: sample.Service.GetPort
  virtual void GetPort(::mojo::PendingReceiver<Port> receiver) = 0;
};

class PortProxy;

template <typename ImplRefTraits>
class PortStub;

class PortRequestValidator;


// @generated_from: sample.Port
class  Port
    : public PortInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PortInterfaceBase;
  using Proxy_ = PortProxy;

  template <typename ImplRefTraits>
  using Stub_ = PortStub<ImplRefTraits>;

  using RequestValidator_ = PortRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPostMessageToPortMinVersion = 0,
  };
  virtual ~Port() {}

  
// @generated_from: sample.Port.PostMessageToPort
  virtual void PostMessageToPort(const std::string& message_text, ::mojo::PendingRemote<Port> port) = 0;
};



// @generated_from: sample.DefaultsSender
class  DefaultsSenderProxy
    : public DefaultsSender {
 public:
  using InterfaceType = DefaultsSender;

  explicit DefaultsSenderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: sample.DefaultsSender.SendBar
  void SendBar(BarPtr bar) final;
  
// @generated_from: sample.DefaultsSender.SendFoo
  void SendFoo(FooPtr foo) final;
  
// @generated_from: sample.DefaultsSender.SendDefaultsTest
  void SendDefaultsTest(DefaultsTestPtr defaults) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: sample.Service
class  ServiceProxy
    : public Service {
 public:
  using InterfaceType = Service;

  explicit ServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: sample.Service.Frobinate
  void Frobinate(FooPtr foo, Service::BazOptions baz, ::mojo::PendingRemote<Port> port, FrobinateCallback callback) final;
  
// @generated_from: sample.Service.GetPort
  void GetPort(::mojo::PendingReceiver<Port> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: sample.Port
class  PortProxy
    : public Port {
 public:
  using InterfaceType = Port;

  explicit PortProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: sample.Port.PostMessageToPort
  void PostMessageToPort(const std::string& message_text, ::mojo::PendingRemote<Port> port) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  DefaultsSenderStubDispatch {
 public:
  static bool Accept(DefaultsSender* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DefaultsSender* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DefaultsSender>>
class DefaultsSenderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DefaultsSenderStub() {}
  ~DefaultsSenderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DefaultsSenderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DefaultsSenderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ServiceStubDispatch {
 public:
  static bool Accept(Service* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Service* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Service>>
class ServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ServiceStub() {}
  ~ServiceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PortStubDispatch {
 public:
  static bool Accept(Port* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Port* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Port>>
class PortStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PortStub() {}
  ~PortStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PortStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PortStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  DefaultsSenderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PortRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: sample.Bar
class  Bar {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Bar, T>::value>;
  using DataView = BarDataView;
  using Data_ = internal::Bar_Data;
// @generated_from: sample.Bar.Type
  using Type = Bar_Type;

  template <typename... Args>
  static BarPtr New(Args&&... args) {
    return BarPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BarPtr From(const U& u) {
    return mojo::TypeConverter<BarPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Bar>::Convert(*this);
  }


  Bar();

  Bar(
      uint8_t alpha,
      uint8_t beta,
      uint8_t gamma,
      Bar::Type type);

  ~Bar();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BarPtr>
  BarPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Bar::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Bar::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Bar::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Bar::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Bar_UnserializedMessageContext<
            UserType, Bar::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Bar::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Bar::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Bar_UnserializedMessageContext<
            UserType, Bar::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Bar::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: sample.Bar.alpha
  uint8_t alpha;
  
// @generated_from: sample.Bar.beta
  uint8_t beta;
  
// @generated_from: sample.Bar.gamma
  uint8_t gamma;
  
// @generated_from: sample.Bar.type
  Bar::Type type;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Bar::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Bar::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Bar::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Bar::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







// @generated_from: sample.StructWithHoleV1
class  StructWithHoleV1 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithHoleV1, T>::value>;
  using DataView = StructWithHoleV1DataView;
  using Data_ = internal::StructWithHoleV1_Data;

  template <typename... Args>
  static StructWithHoleV1Ptr New(Args&&... args) {
    return StructWithHoleV1Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithHoleV1Ptr From(const U& u) {
    return mojo::TypeConverter<StructWithHoleV1Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithHoleV1>::Convert(*this);
  }


  StructWithHoleV1();

  StructWithHoleV1(
      int32_t v1,
      int64_t v2);

  ~StructWithHoleV1();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithHoleV1Ptr>
  StructWithHoleV1Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithHoleV1::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithHoleV1::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithHoleV1_UnserializedMessageContext<
            UserType, StructWithHoleV1::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithHoleV1::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithHoleV1::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithHoleV1_UnserializedMessageContext<
            UserType, StructWithHoleV1::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithHoleV1::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: sample.StructWithHoleV1.v1
  int32_t v1;
  
// @generated_from: sample.StructWithHoleV1.v2
  int64_t v2;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithHoleV1::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: sample.StructWithHoleV2
class  StructWithHoleV2 {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithHoleV2, T>::value>;
  using DataView = StructWithHoleV2DataView;
  using Data_ = internal::StructWithHoleV2_Data;

  template <typename... Args>
  static StructWithHoleV2Ptr New(Args&&... args) {
    return StructWithHoleV2Ptr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithHoleV2Ptr From(const U& u) {
    return mojo::TypeConverter<StructWithHoleV2Ptr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithHoleV2>::Convert(*this);
  }


  StructWithHoleV2();

  StructWithHoleV2(
      int32_t v1,
      int64_t v2,
      int32_t v3);

  ~StructWithHoleV2();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithHoleV2Ptr>
  StructWithHoleV2Ptr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithHoleV2::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithHoleV2::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithHoleV2_UnserializedMessageContext<
            UserType, StructWithHoleV2::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithHoleV2::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithHoleV2::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithHoleV2_UnserializedMessageContext<
            UserType, StructWithHoleV2::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithHoleV2::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: sample.StructWithHoleV2.v1
  int32_t v1;
  
// @generated_from: sample.StructWithHoleV2.v2
  int64_t v2;
  
// @generated_from: sample.StructWithHoleV2.v3
  int32_t v3;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithHoleV2::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








// @generated_from: sample.Foo
class  Foo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Foo, T>::value>;
  using DataView = FooDataView;
  using Data_ = internal::Foo_Data;
  
// @generated_from: sample.Foo.kFooby
  static const char kFooby[];

  template <typename... Args>
  static FooPtr New(Args&&... args) {
    return FooPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FooPtr From(const U& u) {
    return mojo::TypeConverter<FooPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Foo>::Convert(*this);
  }


  Foo();

  Foo(
      const std::string& name,
      int32_t x,
      int32_t y,
      bool a,
      bool b,
      bool c,
      BarPtr bar,
      base::Optional<std::vector<BarPtr>> extra_bars,
      base::Optional<std::vector<uint8_t>> data,
      ::mojo::ScopedMessagePipeHandle source,
      base::Optional<std::vector<::mojo::ScopedDataPipeConsumerHandle>> input_streams,
      base::Optional<std::vector<::mojo::ScopedDataPipeProducerHandle>> output_streams,
      base::Optional<std::vector<std::vector<bool>>> array_of_array_of_bools,
      base::Optional<std::vector<std::vector<std::vector<std::string>>>> multi_array_of_strings,
      base::Optional<std::vector<bool>> array_of_bools);

  ~Foo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FooPtr>
  FooPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Foo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Foo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Foo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Foo_UnserializedMessageContext<
            UserType, Foo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Foo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Foo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Foo_UnserializedMessageContext<
            UserType, Foo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Foo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: sample.Foo.name
  std::string name;
  
// @generated_from: sample.Foo.x
  int32_t x;
  
// @generated_from: sample.Foo.y
  int32_t y;
  
// @generated_from: sample.Foo.a
  bool a;
  
// @generated_from: sample.Foo.b
  bool b;
  
// @generated_from: sample.Foo.c
  bool c;
  
// @generated_from: sample.Foo.bar
  BarPtr bar;
  
// @generated_from: sample.Foo.extra_bars
  base::Optional<std::vector<BarPtr>> extra_bars;
  
// @generated_from: sample.Foo.data
  base::Optional<std::vector<uint8_t>> data;
  
// @generated_from: sample.Foo.source
  ::mojo::ScopedMessagePipeHandle source;
  
// @generated_from: sample.Foo.input_streams
  base::Optional<std::vector<::mojo::ScopedDataPipeConsumerHandle>> input_streams;
  
// @generated_from: sample.Foo.output_streams
  base::Optional<std::vector<::mojo::ScopedDataPipeProducerHandle>> output_streams;
  
// @generated_from: sample.Foo.array_of_array_of_bools
  base::Optional<std::vector<std::vector<bool>>> array_of_array_of_bools;
  
// @generated_from: sample.Foo.multi_array_of_strings
  base::Optional<std::vector<std::vector<std::vector<std::string>>>> multi_array_of_strings;
  
// @generated_from: sample.Foo.array_of_bools
  base::Optional<std::vector<bool>> array_of_bools;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(Foo);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Foo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Foo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Foo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Foo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: sample.DefaultsTest
class  DefaultsTest {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DefaultsTest, T>::value>;
  using DataView = DefaultsTestDataView;
  using Data_ = internal::DefaultsTest_Data;

  template <typename... Args>
  static DefaultsTestPtr New(Args&&... args) {
    return DefaultsTestPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DefaultsTestPtr From(const U& u) {
    return mojo::TypeConverter<DefaultsTestPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DefaultsTest>::Convert(*this);
  }


  DefaultsTest();

  DefaultsTest(
      int8_t a0,
      uint8_t a1,
      int16_t a2,
      uint16_t a3,
      int32_t a4,
      uint32_t a5,
      int64_t a6,
      uint64_t a7,
      int32_t a8,
      int32_t a9,
      int32_t a10,
      bool a11,
      bool a12,
      float a13,
      double a14,
      double a15,
      double a16,
      double a17,
      std::vector<uint8_t> a18,
      const std::string& a19,
      Bar::Type a20,
      ::imported::PointPtr a21,
      ::imported::ThingPtr a22,
      uint64_t a23,
      int64_t a24,
      int64_t a25,
      double a26,
      double a27,
      double a28,
      float a29,
      float a30,
      float a31);

  ~DefaultsTest();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DefaultsTestPtr>
  DefaultsTestPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DefaultsTest::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DefaultsTest::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DefaultsTest_UnserializedMessageContext<
            UserType, DefaultsTest::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<DefaultsTest::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return DefaultsTest::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DefaultsTest_UnserializedMessageContext<
            UserType, DefaultsTest::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DefaultsTest::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: sample.DefaultsTest.a0
  int8_t a0;
  
// @generated_from: sample.DefaultsTest.a1
  uint8_t a1;
  
// @generated_from: sample.DefaultsTest.a2
  int16_t a2;
  
// @generated_from: sample.DefaultsTest.a3
  uint16_t a3;
  
// @generated_from: sample.DefaultsTest.a4
  int32_t a4;
  
// @generated_from: sample.DefaultsTest.a5
  uint32_t a5;
  
// @generated_from: sample.DefaultsTest.a6
  int64_t a6;
  
// @generated_from: sample.DefaultsTest.a7
  uint64_t a7;
  
// @generated_from: sample.DefaultsTest.a8
  int32_t a8;
  
// @generated_from: sample.DefaultsTest.a9
  int32_t a9;
  
// @generated_from: sample.DefaultsTest.a10
  int32_t a10;
  
// @generated_from: sample.DefaultsTest.a11
  bool a11;
  
// @generated_from: sample.DefaultsTest.a12
  bool a12;
  
// @generated_from: sample.DefaultsTest.a13
  float a13;
  
// @generated_from: sample.DefaultsTest.a14
  double a14;
  
// @generated_from: sample.DefaultsTest.a15
  double a15;
  
// @generated_from: sample.DefaultsTest.a16
  double a16;
  
// @generated_from: sample.DefaultsTest.a17
  double a17;
  
// @generated_from: sample.DefaultsTest.a18
  std::vector<uint8_t> a18;
  
// @generated_from: sample.DefaultsTest.a19
  std::string a19;
  
// @generated_from: sample.DefaultsTest.a20
  Bar::Type a20;
  
// @generated_from: sample.DefaultsTest.a21
  ::imported::PointPtr a21;
  
// @generated_from: sample.DefaultsTest.a22
  ::imported::ThingPtr a22;
  
// @generated_from: sample.DefaultsTest.a23
  uint64_t a23;
  
// @generated_from: sample.DefaultsTest.a24
  int64_t a24;
  
// @generated_from: sample.DefaultsTest.a25
  int64_t a25;
  
// @generated_from: sample.DefaultsTest.a26
  double a26;
  
// @generated_from: sample.DefaultsTest.a27
  double a27;
  
// @generated_from: sample.DefaultsTest.a28
  double a28;
  
// @generated_from: sample.DefaultsTest.a29
  float a29;
  
// @generated_from: sample.DefaultsTest.a30
  float a30;
  
// @generated_from: sample.DefaultsTest.a31
  float a31;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(DefaultsTest);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DefaultsTest::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}



template <typename StructPtrType>
BarPtr Bar::Clone() const {
  return New(
      mojo::Clone(alpha),
      mojo::Clone(beta),
      mojo::Clone(gamma),
      mojo::Clone(type)
  );
}

template <typename T, Bar::EnableIfSame<T>*>
bool Bar::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->alpha, other_struct.alpha))
    return false;
  if (!mojo::Equals(this->beta, other_struct.beta))
    return false;
  if (!mojo::Equals(this->gamma, other_struct.gamma))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  return true;
}

template <typename T, Bar::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.alpha < rhs.alpha)
    return true;
  if (rhs.alpha < lhs.alpha)
    return false;
  if (lhs.beta < rhs.beta)
    return true;
  if (rhs.beta < lhs.beta)
    return false;
  if (lhs.gamma < rhs.gamma)
    return true;
  if (rhs.gamma < lhs.gamma)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  return false;
}
template <typename StructPtrType>
FooPtr Foo::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(x),
      mojo::Clone(y),
      mojo::Clone(a),
      mojo::Clone(b),
      mojo::Clone(c),
      mojo::Clone(bar),
      mojo::Clone(extra_bars),
      mojo::Clone(data),
      mojo::Clone(source),
      mojo::Clone(input_streams),
      mojo::Clone(output_streams),
      mojo::Clone(array_of_array_of_bools),
      mojo::Clone(multi_array_of_strings),
      mojo::Clone(array_of_bools)
  );
}

template <typename T, Foo::EnableIfSame<T>*>
bool Foo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->x, other_struct.x))
    return false;
  if (!mojo::Equals(this->y, other_struct.y))
    return false;
  if (!mojo::Equals(this->a, other_struct.a))
    return false;
  if (!mojo::Equals(this->b, other_struct.b))
    return false;
  if (!mojo::Equals(this->c, other_struct.c))
    return false;
  if (!mojo::Equals(this->bar, other_struct.bar))
    return false;
  if (!mojo::Equals(this->extra_bars, other_struct.extra_bars))
    return false;
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  if (!mojo::Equals(this->source, other_struct.source))
    return false;
  if (!mojo::Equals(this->input_streams, other_struct.input_streams))
    return false;
  if (!mojo::Equals(this->output_streams, other_struct.output_streams))
    return false;
  if (!mojo::Equals(this->array_of_array_of_bools, other_struct.array_of_array_of_bools))
    return false;
  if (!mojo::Equals(this->multi_array_of_strings, other_struct.multi_array_of_strings))
    return false;
  if (!mojo::Equals(this->array_of_bools, other_struct.array_of_bools))
    return false;
  return true;
}

template <typename T, Foo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.x < rhs.x)
    return true;
  if (rhs.x < lhs.x)
    return false;
  if (lhs.y < rhs.y)
    return true;
  if (rhs.y < lhs.y)
    return false;
  if (lhs.a < rhs.a)
    return true;
  if (rhs.a < lhs.a)
    return false;
  if (lhs.b < rhs.b)
    return true;
  if (rhs.b < lhs.b)
    return false;
  if (lhs.c < rhs.c)
    return true;
  if (rhs.c < lhs.c)
    return false;
  if (lhs.bar < rhs.bar)
    return true;
  if (rhs.bar < lhs.bar)
    return false;
  if (lhs.extra_bars < rhs.extra_bars)
    return true;
  if (rhs.extra_bars < lhs.extra_bars)
    return false;
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  if (lhs.source < rhs.source)
    return true;
  if (rhs.source < lhs.source)
    return false;
  if (lhs.input_streams < rhs.input_streams)
    return true;
  if (rhs.input_streams < lhs.input_streams)
    return false;
  if (lhs.output_streams < rhs.output_streams)
    return true;
  if (rhs.output_streams < lhs.output_streams)
    return false;
  if (lhs.array_of_array_of_bools < rhs.array_of_array_of_bools)
    return true;
  if (rhs.array_of_array_of_bools < lhs.array_of_array_of_bools)
    return false;
  if (lhs.multi_array_of_strings < rhs.multi_array_of_strings)
    return true;
  if (rhs.multi_array_of_strings < lhs.multi_array_of_strings)
    return false;
  if (lhs.array_of_bools < rhs.array_of_bools)
    return true;
  if (rhs.array_of_bools < lhs.array_of_bools)
    return false;
  return false;
}
template <typename StructPtrType>
DefaultsTestPtr DefaultsTest::Clone() const {
  return New(
      mojo::Clone(a0),
      mojo::Clone(a1),
      mojo::Clone(a2),
      mojo::Clone(a3),
      mojo::Clone(a4),
      mojo::Clone(a5),
      mojo::Clone(a6),
      mojo::Clone(a7),
      mojo::Clone(a8),
      mojo::Clone(a9),
      mojo::Clone(a10),
      mojo::Clone(a11),
      mojo::Clone(a12),
      mojo::Clone(a13),
      mojo::Clone(a14),
      mojo::Clone(a15),
      mojo::Clone(a16),
      mojo::Clone(a17),
      mojo::Clone(a18),
      mojo::Clone(a19),
      mojo::Clone(a20),
      mojo::Clone(a21),
      mojo::Clone(a22),
      mojo::Clone(a23),
      mojo::Clone(a24),
      mojo::Clone(a25),
      mojo::Clone(a26),
      mojo::Clone(a27),
      mojo::Clone(a28),
      mojo::Clone(a29),
      mojo::Clone(a30),
      mojo::Clone(a31)
  );
}

template <typename T, DefaultsTest::EnableIfSame<T>*>
bool DefaultsTest::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->a0, other_struct.a0))
    return false;
  if (!mojo::Equals(this->a1, other_struct.a1))
    return false;
  if (!mojo::Equals(this->a2, other_struct.a2))
    return false;
  if (!mojo::Equals(this->a3, other_struct.a3))
    return false;
  if (!mojo::Equals(this->a4, other_struct.a4))
    return false;
  if (!mojo::Equals(this->a5, other_struct.a5))
    return false;
  if (!mojo::Equals(this->a6, other_struct.a6))
    return false;
  if (!mojo::Equals(this->a7, other_struct.a7))
    return false;
  if (!mojo::Equals(this->a8, other_struct.a8))
    return false;
  if (!mojo::Equals(this->a9, other_struct.a9))
    return false;
  if (!mojo::Equals(this->a10, other_struct.a10))
    return false;
  if (!mojo::Equals(this->a11, other_struct.a11))
    return false;
  if (!mojo::Equals(this->a12, other_struct.a12))
    return false;
  if (!mojo::Equals(this->a13, other_struct.a13))
    return false;
  if (!mojo::Equals(this->a14, other_struct.a14))
    return false;
  if (!mojo::Equals(this->a15, other_struct.a15))
    return false;
  if (!mojo::Equals(this->a16, other_struct.a16))
    return false;
  if (!mojo::Equals(this->a17, other_struct.a17))
    return false;
  if (!mojo::Equals(this->a18, other_struct.a18))
    return false;
  if (!mojo::Equals(this->a19, other_struct.a19))
    return false;
  if (!mojo::Equals(this->a20, other_struct.a20))
    return false;
  if (!mojo::Equals(this->a21, other_struct.a21))
    return false;
  if (!mojo::Equals(this->a22, other_struct.a22))
    return false;
  if (!mojo::Equals(this->a23, other_struct.a23))
    return false;
  if (!mojo::Equals(this->a24, other_struct.a24))
    return false;
  if (!mojo::Equals(this->a25, other_struct.a25))
    return false;
  if (!mojo::Equals(this->a26, other_struct.a26))
    return false;
  if (!mojo::Equals(this->a27, other_struct.a27))
    return false;
  if (!mojo::Equals(this->a28, other_struct.a28))
    return false;
  if (!mojo::Equals(this->a29, other_struct.a29))
    return false;
  if (!mojo::Equals(this->a30, other_struct.a30))
    return false;
  if (!mojo::Equals(this->a31, other_struct.a31))
    return false;
  return true;
}

template <typename T, DefaultsTest::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.a0 < rhs.a0)
    return true;
  if (rhs.a0 < lhs.a0)
    return false;
  if (lhs.a1 < rhs.a1)
    return true;
  if (rhs.a1 < lhs.a1)
    return false;
  if (lhs.a2 < rhs.a2)
    return true;
  if (rhs.a2 < lhs.a2)
    return false;
  if (lhs.a3 < rhs.a3)
    return true;
  if (rhs.a3 < lhs.a3)
    return false;
  if (lhs.a4 < rhs.a4)
    return true;
  if (rhs.a4 < lhs.a4)
    return false;
  if (lhs.a5 < rhs.a5)
    return true;
  if (rhs.a5 < lhs.a5)
    return false;
  if (lhs.a6 < rhs.a6)
    return true;
  if (rhs.a6 < lhs.a6)
    return false;
  if (lhs.a7 < rhs.a7)
    return true;
  if (rhs.a7 < lhs.a7)
    return false;
  if (lhs.a8 < rhs.a8)
    return true;
  if (rhs.a8 < lhs.a8)
    return false;
  if (lhs.a9 < rhs.a9)
    return true;
  if (rhs.a9 < lhs.a9)
    return false;
  if (lhs.a10 < rhs.a10)
    return true;
  if (rhs.a10 < lhs.a10)
    return false;
  if (lhs.a11 < rhs.a11)
    return true;
  if (rhs.a11 < lhs.a11)
    return false;
  if (lhs.a12 < rhs.a12)
    return true;
  if (rhs.a12 < lhs.a12)
    return false;
  if (lhs.a13 < rhs.a13)
    return true;
  if (rhs.a13 < lhs.a13)
    return false;
  if (lhs.a14 < rhs.a14)
    return true;
  if (rhs.a14 < lhs.a14)
    return false;
  if (lhs.a15 < rhs.a15)
    return true;
  if (rhs.a15 < lhs.a15)
    return false;
  if (lhs.a16 < rhs.a16)
    return true;
  if (rhs.a16 < lhs.a16)
    return false;
  if (lhs.a17 < rhs.a17)
    return true;
  if (rhs.a17 < lhs.a17)
    return false;
  if (lhs.a18 < rhs.a18)
    return true;
  if (rhs.a18 < lhs.a18)
    return false;
  if (lhs.a19 < rhs.a19)
    return true;
  if (rhs.a19 < lhs.a19)
    return false;
  if (lhs.a20 < rhs.a20)
    return true;
  if (rhs.a20 < lhs.a20)
    return false;
  if (lhs.a21 < rhs.a21)
    return true;
  if (rhs.a21 < lhs.a21)
    return false;
  if (lhs.a22 < rhs.a22)
    return true;
  if (rhs.a22 < lhs.a22)
    return false;
  if (lhs.a23 < rhs.a23)
    return true;
  if (rhs.a23 < lhs.a23)
    return false;
  if (lhs.a24 < rhs.a24)
    return true;
  if (rhs.a24 < lhs.a24)
    return false;
  if (lhs.a25 < rhs.a25)
    return true;
  if (rhs.a25 < lhs.a25)
    return false;
  if (lhs.a26 < rhs.a26)
    return true;
  if (rhs.a26 < lhs.a26)
    return false;
  if (lhs.a27 < rhs.a27)
    return true;
  if (rhs.a27 < lhs.a27)
    return false;
  if (lhs.a28 < rhs.a28)
    return true;
  if (rhs.a28 < lhs.a28)
    return false;
  if (lhs.a29 < rhs.a29)
    return true;
  if (rhs.a29 < lhs.a29)
    return false;
  if (lhs.a30 < rhs.a30)
    return true;
  if (rhs.a30 < lhs.a30)
    return false;
  if (lhs.a31 < rhs.a31)
    return true;
  if (rhs.a31 < lhs.a31)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithHoleV1Ptr StructWithHoleV1::Clone() const {
  return New(
      mojo::Clone(v1),
      mojo::Clone(v2)
  );
}

template <typename T, StructWithHoleV1::EnableIfSame<T>*>
bool StructWithHoleV1::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->v1, other_struct.v1))
    return false;
  if (!mojo::Equals(this->v2, other_struct.v2))
    return false;
  return true;
}

template <typename T, StructWithHoleV1::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.v1 < rhs.v1)
    return true;
  if (rhs.v1 < lhs.v1)
    return false;
  if (lhs.v2 < rhs.v2)
    return true;
  if (rhs.v2 < lhs.v2)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithHoleV2Ptr StructWithHoleV2::Clone() const {
  return New(
      mojo::Clone(v1),
      mojo::Clone(v2),
      mojo::Clone(v3)
  );
}

template <typename T, StructWithHoleV2::EnableIfSame<T>*>
bool StructWithHoleV2::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->v1, other_struct.v1))
    return false;
  if (!mojo::Equals(this->v2, other_struct.v2))
    return false;
  if (!mojo::Equals(this->v3, other_struct.v3))
    return false;
  return true;
}

template <typename T, StructWithHoleV2::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.v1 < rhs.v1)
    return true;
  if (rhs.v1 < lhs.v1)
    return false;
  if (lhs.v2 < rhs.v2)
    return true;
  if (rhs.v2 < lhs.v2)
    return false;
  if (lhs.v3 < rhs.v3)
    return true;
  if (rhs.v3 < lhs.v3)
    return false;
  return false;
}


}  // namespace sample

namespace mojo {


template <>
struct  StructTraits<::sample::Bar::DataView,
                                         ::sample::BarPtr> {
  static bool IsNull(const ::sample::BarPtr& input) { return !input; }
  static void SetToNull(::sample::BarPtr* output) { output->reset(); }

  static decltype(::sample::Bar::alpha) alpha(
      const ::sample::BarPtr& input) {
    return input->alpha;
  }

  static decltype(::sample::Bar::beta) beta(
      const ::sample::BarPtr& input) {
    return input->beta;
  }

  static decltype(::sample::Bar::gamma) gamma(
      const ::sample::BarPtr& input) {
    return input->gamma;
  }

  static decltype(::sample::Bar::type) type(
      const ::sample::BarPtr& input) {
    return input->type;
  }

  static bool Read(::sample::Bar::DataView input, ::sample::BarPtr* output);
};


template <>
struct  StructTraits<::sample::Foo::DataView,
                                         ::sample::FooPtr> {
  static bool IsNull(const ::sample::FooPtr& input) { return !input; }
  static void SetToNull(::sample::FooPtr* output) { output->reset(); }

  static const decltype(::sample::Foo::name)& name(
      const ::sample::FooPtr& input) {
    return input->name;
  }

  static decltype(::sample::Foo::x) x(
      const ::sample::FooPtr& input) {
    return input->x;
  }

  static decltype(::sample::Foo::y) y(
      const ::sample::FooPtr& input) {
    return input->y;
  }

  static decltype(::sample::Foo::a) a(
      const ::sample::FooPtr& input) {
    return input->a;
  }

  static decltype(::sample::Foo::b) b(
      const ::sample::FooPtr& input) {
    return input->b;
  }

  static decltype(::sample::Foo::c) c(
      const ::sample::FooPtr& input) {
    return input->c;
  }

  static const decltype(::sample::Foo::bar)& bar(
      const ::sample::FooPtr& input) {
    return input->bar;
  }

  static const decltype(::sample::Foo::extra_bars)& extra_bars(
      const ::sample::FooPtr& input) {
    return input->extra_bars;
  }

  static const decltype(::sample::Foo::data)& data(
      const ::sample::FooPtr& input) {
    return input->data;
  }

  static  decltype(::sample::Foo::source)& source(
       ::sample::FooPtr& input) {
    return input->source;
  }

  static  decltype(::sample::Foo::input_streams)& input_streams(
       ::sample::FooPtr& input) {
    return input->input_streams;
  }

  static  decltype(::sample::Foo::output_streams)& output_streams(
       ::sample::FooPtr& input) {
    return input->output_streams;
  }

  static const decltype(::sample::Foo::array_of_array_of_bools)& array_of_array_of_bools(
      const ::sample::FooPtr& input) {
    return input->array_of_array_of_bools;
  }

  static const decltype(::sample::Foo::multi_array_of_strings)& multi_array_of_strings(
      const ::sample::FooPtr& input) {
    return input->multi_array_of_strings;
  }

  static const decltype(::sample::Foo::array_of_bools)& array_of_bools(
      const ::sample::FooPtr& input) {
    return input->array_of_bools;
  }

  static bool Read(::sample::Foo::DataView input, ::sample::FooPtr* output);
};


template <>
struct  StructTraits<::sample::DefaultsTest::DataView,
                                         ::sample::DefaultsTestPtr> {
  static bool IsNull(const ::sample::DefaultsTestPtr& input) { return !input; }
  static void SetToNull(::sample::DefaultsTestPtr* output) { output->reset(); }

  static decltype(::sample::DefaultsTest::a0) a0(
      const ::sample::DefaultsTestPtr& input) {
    return input->a0;
  }

  static decltype(::sample::DefaultsTest::a1) a1(
      const ::sample::DefaultsTestPtr& input) {
    return input->a1;
  }

  static decltype(::sample::DefaultsTest::a2) a2(
      const ::sample::DefaultsTestPtr& input) {
    return input->a2;
  }

  static decltype(::sample::DefaultsTest::a3) a3(
      const ::sample::DefaultsTestPtr& input) {
    return input->a3;
  }

  static decltype(::sample::DefaultsTest::a4) a4(
      const ::sample::DefaultsTestPtr& input) {
    return input->a4;
  }

  static decltype(::sample::DefaultsTest::a5) a5(
      const ::sample::DefaultsTestPtr& input) {
    return input->a5;
  }

  static decltype(::sample::DefaultsTest::a6) a6(
      const ::sample::DefaultsTestPtr& input) {
    return input->a6;
  }

  static decltype(::sample::DefaultsTest::a7) a7(
      const ::sample::DefaultsTestPtr& input) {
    return input->a7;
  }

  static decltype(::sample::DefaultsTest::a8) a8(
      const ::sample::DefaultsTestPtr& input) {
    return input->a8;
  }

  static decltype(::sample::DefaultsTest::a9) a9(
      const ::sample::DefaultsTestPtr& input) {
    return input->a9;
  }

  static decltype(::sample::DefaultsTest::a10) a10(
      const ::sample::DefaultsTestPtr& input) {
    return input->a10;
  }

  static decltype(::sample::DefaultsTest::a11) a11(
      const ::sample::DefaultsTestPtr& input) {
    return input->a11;
  }

  static decltype(::sample::DefaultsTest::a12) a12(
      const ::sample::DefaultsTestPtr& input) {
    return input->a12;
  }

  static decltype(::sample::DefaultsTest::a13) a13(
      const ::sample::DefaultsTestPtr& input) {
    return input->a13;
  }

  static decltype(::sample::DefaultsTest::a14) a14(
      const ::sample::DefaultsTestPtr& input) {
    return input->a14;
  }

  static decltype(::sample::DefaultsTest::a15) a15(
      const ::sample::DefaultsTestPtr& input) {
    return input->a15;
  }

  static decltype(::sample::DefaultsTest::a16) a16(
      const ::sample::DefaultsTestPtr& input) {
    return input->a16;
  }

  static decltype(::sample::DefaultsTest::a17) a17(
      const ::sample::DefaultsTestPtr& input) {
    return input->a17;
  }

  static const decltype(::sample::DefaultsTest::a18)& a18(
      const ::sample::DefaultsTestPtr& input) {
    return input->a18;
  }

  static const decltype(::sample::DefaultsTest::a19)& a19(
      const ::sample::DefaultsTestPtr& input) {
    return input->a19;
  }

  static decltype(::sample::DefaultsTest::a20) a20(
      const ::sample::DefaultsTestPtr& input) {
    return input->a20;
  }

  static const decltype(::sample::DefaultsTest::a21)& a21(
      const ::sample::DefaultsTestPtr& input) {
    return input->a21;
  }

  static const decltype(::sample::DefaultsTest::a22)& a22(
      const ::sample::DefaultsTestPtr& input) {
    return input->a22;
  }

  static decltype(::sample::DefaultsTest::a23) a23(
      const ::sample::DefaultsTestPtr& input) {
    return input->a23;
  }

  static decltype(::sample::DefaultsTest::a24) a24(
      const ::sample::DefaultsTestPtr& input) {
    return input->a24;
  }

  static decltype(::sample::DefaultsTest::a25) a25(
      const ::sample::DefaultsTestPtr& input) {
    return input->a25;
  }

  static decltype(::sample::DefaultsTest::a26) a26(
      const ::sample::DefaultsTestPtr& input) {
    return input->a26;
  }

  static decltype(::sample::DefaultsTest::a27) a27(
      const ::sample::DefaultsTestPtr& input) {
    return input->a27;
  }

  static decltype(::sample::DefaultsTest::a28) a28(
      const ::sample::DefaultsTestPtr& input) {
    return input->a28;
  }

  static decltype(::sample::DefaultsTest::a29) a29(
      const ::sample::DefaultsTestPtr& input) {
    return input->a29;
  }

  static decltype(::sample::DefaultsTest::a30) a30(
      const ::sample::DefaultsTestPtr& input) {
    return input->a30;
  }

  static decltype(::sample::DefaultsTest::a31) a31(
      const ::sample::DefaultsTestPtr& input) {
    return input->a31;
  }

  static bool Read(::sample::DefaultsTest::DataView input, ::sample::DefaultsTestPtr* output);
};


template <>
struct  StructTraits<::sample::StructWithHoleV1::DataView,
                                         ::sample::StructWithHoleV1Ptr> {
  static bool IsNull(const ::sample::StructWithHoleV1Ptr& input) { return !input; }
  static void SetToNull(::sample::StructWithHoleV1Ptr* output) { output->reset(); }

  static decltype(::sample::StructWithHoleV1::v1) v1(
      const ::sample::StructWithHoleV1Ptr& input) {
    return input->v1;
  }

  static decltype(::sample::StructWithHoleV1::v2) v2(
      const ::sample::StructWithHoleV1Ptr& input) {
    return input->v2;
  }

  static bool Read(::sample::StructWithHoleV1::DataView input, ::sample::StructWithHoleV1Ptr* output);
};


template <>
struct  StructTraits<::sample::StructWithHoleV2::DataView,
                                         ::sample::StructWithHoleV2Ptr> {
  static bool IsNull(const ::sample::StructWithHoleV2Ptr& input) { return !input; }
  static void SetToNull(::sample::StructWithHoleV2Ptr* output) { output->reset(); }

  static decltype(::sample::StructWithHoleV2::v1) v1(
      const ::sample::StructWithHoleV2Ptr& input) {
    return input->v1;
  }

  static decltype(::sample::StructWithHoleV2::v2) v2(
      const ::sample::StructWithHoleV2Ptr& input) {
    return input->v2;
  }

  static decltype(::sample::StructWithHoleV2::v3) v3(
      const ::sample::StructWithHoleV2Ptr& input) {
    return input->v3;
  }

  static bool Read(::sample::StructWithHoleV2::DataView input, ::sample::StructWithHoleV2Ptr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTk5NCwgImJlZ2luIjogMTk4MCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1NlbmRlciJ9fSwgeyJlbmQi
OiAyNzUzLCAiYmVnaW4iOiAyNzQ2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAic2FtcGxlLkRlZmF1bHRzU2VuZGVyLlNlbmRCYXIifX0sIHsiZW5kIjogMjg0Nywg
ImJlZ2luIjogMjg0MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
InNhbXBsZS5EZWZhdWx0c1NlbmRlci5TZW5kRm9vIn19LCB7ImVuZCI6IDI5NTksICJiZWdpbiI6
IDI5NDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUu
RGVmYXVsdHNTZW5kZXIuU2VuZERlZmF1bHRzVGVzdCJ9fSwgeyJlbmQiOiAzMTg0LCAiYmVnaW4i
OiAzMTc3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxl
LlNlcnZpY2UifX0sIHsiZW5kIjogMzgzNCwgImJlZ2luIjogMzgyNCwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5TZXJ2aWNlLkJhek9wdGlvbnMifX0s
IHsiZW5kIjogMzk0NywgImJlZ2luIjogMzkzNSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogInNhbXBsZS5TZXJ2aWNlLmtGYXZvcml0ZUJheiJ9fSwgeyJlbmQiOiA0
MTE1LCAiYmVnaW4iOiA0MTA2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAic2FtcGxlLlNlcnZpY2UuRnJvYmluYXRlIn19LCB7ImVuZCI6IDQyODksICJiZWdpbiI6
IDQyODIsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUu
U2VydmljZS5HZXRQb3J0In19LCB7ImVuZCI6IDQ0ODEsICJiZWdpbiI6IDQ0NzcsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuUG9ydCJ9fSwgeyJlbmQi
OiA1MTM1LCAiYmVnaW4iOiA1MTE4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAic2FtcGxlLlBvcnQuUG9zdE1lc3NhZ2VUb1BvcnQifX0sIHsiZW5kIjogNTUwOCwg
ImJlZ2luIjogNTUwMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
InNhbXBsZS5EZWZhdWx0c1NlbmRlci5TZW5kQmFyIn19LCB7ImVuZCI6IDU1OTUsICJiZWdpbiI6
IDU1ODgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUu
RGVmYXVsdHNTZW5kZXIuU2VuZEZvbyJ9fSwgeyJlbmQiOiA1NzAwLCAiYmVnaW4iOiA1Njg0LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkRlZmF1bHRz
U2VuZGVyLlNlbmREZWZhdWx0c1Rlc3QifX0sIHsiZW5kIjogNjA1NiwgImJlZ2luIjogNjA0Nywg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5TZXJ2aWNl
LkZyb2JpbmF0ZSJ9fSwgeyJlbmQiOiA2MjIzLCAiYmVnaW4iOiA2MjE2LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLlNlcnZpY2UuR2V0UG9ydCJ9fSwg
eyJlbmQiOiA2NTkxLCAiYmVnaW4iOiA2NTc0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAic2FtcGxlLlBvcnQuUG9zdE1lc3NhZ2VUb1BvcnQifX0sIHsiZW5kIjog
MTA5ODQsICJiZWdpbiI6IDEwOTgxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAic2FtcGxlLkJhciJ9fSwgeyJlbmQiOiAxMTIwNiwgImJlZ2luIjogMTEyMDIsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuQmFyLlR5cGUi
fX0sIHsiZW5kIjogMTQ0OTMsICJiZWdpbiI6IDE0NDg4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkJhci5hbHBoYSJ9fSwgeyJlbmQiOiAxNDU0OCwg
ImJlZ2luIjogMTQ1NDQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJzYW1wbGUuQmFyLmJldGEifX0sIHsiZW5kIjogMTQ2MDUsICJiZWdpbiI6IDE0NjAwLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkJhci5nYW1tYSJ9
fSwgeyJlbmQiOiAxNDY1NywgImJlZ2luIjogMTQ2NTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuQmFyLnR5cGUifX0sIHsiZW5kIjogMTU2NjEsICJi
ZWdpbiI6IDE1NjQ1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
c2FtcGxlLlN0cnVjdFdpdGhIb2xlVjEifX0sIHsiZW5kIjogMTkzODAsICJiZWdpbiI6IDE5Mzc4
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLlN0cnVj
dFdpdGhIb2xlVjEudjEifX0sIHsiZW5kIjogMTk0NDQsICJiZWdpbiI6IDE5NDQyLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLlN0cnVjdFdpdGhIb2xl
VjEudjIifX0sIHsiZW5kIjogMjA0OTMsICJiZWdpbiI6IDIwNDc3LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLlN0cnVjdFdpdGhIb2xlVjIifX0sIHsi
ZW5kIjogMjQyMzAsICJiZWdpbiI6IDI0MjI4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAic2FtcGxlLlN0cnVjdFdpdGhIb2xlVjIudjEifX0sIHsiZW5kIjogMjQy
OTQsICJiZWdpbiI6IDI0MjkyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAic2FtcGxlLlN0cnVjdFdpdGhIb2xlVjIudjIifX0sIHsiZW5kIjogMjQzNTgsICJiZWdp
biI6IDI0MzU2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2Ft
cGxlLlN0cnVjdFdpdGhIb2xlVjIudjMifX0sIHsiZW5kIjogMjUzODQsICJiZWdpbiI6IDI1Mzgx
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkZvbyJ9
fSwgeyJlbmQiOiAyNTYyNSwgImJlZ2luIjogMjU2MTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRm9vLmtGb29ieSJ9fSwgeyJlbmQiOiAyOTI3OCwg
ImJlZ2luIjogMjkyNzQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJzYW1wbGUuRm9vLm5hbWUifX0sIHsiZW5kIjogMjkzMjcsICJiZWdpbiI6IDI5MzI2LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkZvby54In19LCB7
ImVuZCI6IDI5Mzc2LCAiYmVnaW4iOiAyOTM3NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogInNhbXBsZS5Gb28ueSJ9fSwgeyJlbmQiOiAyOTQyMiwgImJlZ2luIjog
Mjk0MjEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUu
Rm9vLmEifX0sIHsiZW5kIjogMjk0NjgsICJiZWdpbiI6IDI5NDY3LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkZvby5iIn19LCB7ImVuZCI6IDI5NTE0
LCAiYmVnaW4iOiAyOTUxMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogInNhbXBsZS5Gb28uYyJ9fSwgeyJlbmQiOiAyOTU2MiwgImJlZ2luIjogMjk1NTYsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRm9vLmJhciJ9fSwg
eyJlbmQiOiAyOTY2MSwgImJlZ2luIjogMjk2NTEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRm9vLmV4dHJhX2JhcnMifX0sIHsiZW5kIjogMjk3NDUs
ICJiZWdpbiI6IDI5NzQxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAic2FtcGxlLkZvby5kYXRhIn19LCB7ImVuZCI6IDI5ODI4LCAiYmVnaW4iOiAyOTgyMiwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5Gb28uc291cmNl
In19LCB7ImVuZCI6IDI5OTU5LCAiYmVnaW4iOiAyOTk0NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5Gb28uaW5wdXRfc3RyZWFtcyJ9fSwgeyJlbmQi
OiAzMDA5MiwgImJlZ2luIjogMzAwNzgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJzYW1wbGUuRm9vLm91dHB1dF9zdHJlYW1zIn19LCB7ImVuZCI6IDMwMjI0LCAi
YmVnaW4iOiAzMDIwMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
InNhbXBsZS5Gb28uYXJyYXlfb2ZfYXJyYXlfb2ZfYm9vbHMifX0sIHsiZW5kIjogMzAzNzQsICJi
ZWdpbiI6IDMwMzUyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
c2FtcGxlLkZvby5tdWx0aV9hcnJheV9vZl9zdHJpbmdzIn19LCB7ImVuZCI6IDMwNDc1LCAiYmVn
aW4iOiAzMDQ2MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNh
bXBsZS5Gb28uYXJyYXlfb2ZfYm9vbHMifX0sIHsiZW5kIjogMzE0OTcsICJiZWdpbiI6IDMxNDg1
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkRlZmF1
bHRzVGVzdCJ9fSwgeyJlbmQiOiAzNTY3NywgImJlZ2luIjogMzU2NzUsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRGVmYXVsdHNUZXN0LmEwIn19LCB7
ImVuZCI6IDM1NzM3LCAiYmVnaW4iOiAzNTczNSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTEifX0sIHsiZW5kIjogMzU3OTcs
ICJiZWdpbiI6IDM1Nzk1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAic2FtcGxlLkRlZmF1bHRzVGVzdC5hMiJ9fSwgeyJlbmQiOiAzNTg1OCwgImJlZ2luIjogMzU4
NTYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRGVm
YXVsdHNUZXN0LmEzIn19LCB7ImVuZCI6IDM1OTE4LCAiYmVnaW4iOiAzNTkxNiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTQi
fX0sIHsiZW5kIjogMzU5NzksICJiZWdpbiI6IDM1OTc3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkRlZmF1bHRzVGVzdC5hNSJ9fSwgeyJlbmQiOiAz
NjAzOSwgImJlZ2luIjogMzYwMzcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJzYW1wbGUuRGVmYXVsdHNUZXN0LmE2In19LCB7ImVuZCI6IDM2MTAwLCAiYmVnaW4i
OiAzNjA5OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBs
ZS5EZWZhdWx0c1Rlc3QuYTcifX0sIHsiZW5kIjogMzYxNjAsICJiZWdpbiI6IDM2MTU4LCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAic2FtcGxlLkRlZmF1bHRzVGVz
dC5hOCJ9fSwgeyJlbmQiOiAzNjIyMCwgImJlZ2luIjogMzYyMTgsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJzYW1wbGUuRGVmYXVsdHNUZXN0LmE5In19LCB7ImVu
ZCI6IDM2MjgyLCAiYmVnaW4iOiAzNjI3OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTEwIn19LCB7ImVuZCI6IDM2MzQxLCAi
YmVnaW4iOiAzNjMzOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
InNhbXBsZS5EZWZhdWx0c1Rlc3QuYTExIn19LCB7ImVuZCI6IDM2NDAwLCAiYmVnaW4iOiAzNjM5
NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZh
dWx0c1Rlc3QuYTEyIn19LCB7ImVuZCI6IDM2NDYwLCAiYmVnaW4iOiAzNjQ1NywgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTEz
In19LCB7ImVuZCI6IDM2NTIxLCAiYmVnaW4iOiAzNjUxOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTE0In19LCB7ImVuZCI6
IDM2NTgyLCAiYmVnaW4iOiAzNjU3OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTE1In19LCB7ImVuZCI6IDM2NjQzLCAiYmVn
aW4iOiAzNjY0MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNh
bXBsZS5EZWZhdWx0c1Rlc3QuYTE2In19LCB7ImVuZCI6IDM2NzA0LCAiYmVnaW4iOiAzNjcwMSwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0
c1Rlc3QuYTE3In19LCB7ImVuZCI6IDM2Nzc5LCAiYmVnaW4iOiAzNjc3NiwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTE4In19
LCB7ImVuZCI6IDM2ODQ1LCAiYmVnaW4iOiAzNjg0MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTE5In19LCB7ImVuZCI6IDM2
OTA5LCAiYmVnaW4iOiAzNjkwNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTIwIn19LCB7ImVuZCI6IDM2OTg0LCAiYmVnaW4i
OiAzNjk4MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBs
ZS5EZWZhdWx0c1Rlc3QuYTIxIn19LCB7ImVuZCI6IDM3MDU5LCAiYmVnaW4iOiAzNzA1NiwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rl
c3QuYTIyIn19LCB7ImVuZCI6IDM3MTIyLCAiYmVnaW4iOiAzNzExOSwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTIzIn19LCB7
ImVuZCI6IDM3MTg0LCAiYmVnaW4iOiAzNzE4MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTI0In19LCB7ImVuZCI6IDM3MjQ2
LCAiYmVnaW4iOiAzNzI0MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTI1In19LCB7ImVuZCI6IDM3MzA3LCAiYmVnaW4iOiAz
NzMwNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5E
ZWZhdWx0c1Rlc3QuYTI2In19LCB7ImVuZCI6IDM3MzY4LCAiYmVnaW4iOiAzNzM2NSwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3Qu
YTI3In19LCB7ImVuZCI6IDM3NDI5LCAiYmVnaW4iOiAzNzQyNiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTI4In19LCB7ImVu
ZCI6IDM3NDg5LCAiYmVnaW4iOiAzNzQ4NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogInNhbXBsZS5EZWZhdWx0c1Rlc3QuYTI5In19LCB7ImVuZCI6IDM3NTQ5LCAi
YmVnaW4iOiAzNzU0NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjog
ImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291
cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjog
InNhbXBsZS5EZWZhdWx0c1Rlc3QuYTMwIn19LCB7ImVuZCI6IDM3NjA5LCAiYmVnaW4iOiAzNzYw
NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInNhbXBsZS5EZWZh
dWx0c1Rlc3QuYTMxIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/