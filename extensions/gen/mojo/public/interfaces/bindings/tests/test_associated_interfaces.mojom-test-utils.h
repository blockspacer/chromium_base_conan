// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_TEST_UTILS_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_TEST_UTILS_H_

#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom.h"


namespace mojo {
namespace test {


class  FooInterfaceInterceptorForTesting : public FooInterface {
  virtual FooInterface* GetForwardingInterface() = 0;
};
class  FooInterfaceAsyncWaiter {
 public:
  explicit FooInterfaceAsyncWaiter(FooInterface* proxy);
  ~FooInterfaceAsyncWaiter();

 private:
  FooInterface* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FooInterfaceAsyncWaiter);
};


class  InterfacePassesAssociatedInterceptorForTesting : public InterfacePassesAssociated {
  virtual InterfacePassesAssociated* GetForwardingInterface() = 0;
  void PassFoo(::mojo::PendingAssociatedRemote<FooInterface> foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver, PassFooCallback callback) override;
  void PassStruct(StructContainsAssociatedPtr foo_struct, PassStructCallback callback) override;
  void PassUnion(UnionContainsAssociatedPtr foo_union, PassUnionCallback callback) override;
};
class  InterfacePassesAssociatedAsyncWaiter {
 public:
  explicit InterfacePassesAssociatedAsyncWaiter(InterfacePassesAssociated* proxy);
  ~InterfacePassesAssociatedAsyncWaiter();
  void PassFoo(
      ::mojo::PendingAssociatedRemote<FooInterface> foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface> foo_receiver, ::mojo::PendingAssociatedRemote<FooInterface>* out_foo_remote, ::mojo::PendingAssociatedReceiver<FooInterface>* out_foo_receiver);
  void PassStruct(
      StructContainsAssociatedPtr foo_struct, StructContainsAssociatedPtr* out_foo_struct);
  void PassUnion(
      UnionContainsAssociatedPtr foo_union, UnionContainsAssociatedPtr* out_foo_union);

 private:
  InterfacePassesAssociated* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(InterfacePassesAssociatedAsyncWaiter);
};


class  IntegerSenderInterceptorForTesting : public IntegerSender {
  virtual IntegerSender* GetForwardingInterface() = 0;
  void Echo(int32_t value, EchoCallback callback) override;
  void Send(int32_t value) override;
};
class  IntegerSenderAsyncWaiter {
 public:
  explicit IntegerSenderAsyncWaiter(IntegerSender* proxy);
  ~IntegerSenderAsyncWaiter();
  void Echo(
      int32_t value, int32_t* out_value);

 private:
  IntegerSender* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSenderAsyncWaiter);
};


class  StringSenderInterceptorForTesting : public StringSender {
  virtual StringSender* GetForwardingInterface() = 0;
  void Echo(const std::string& value, EchoCallback callback) override;
  void Send(const std::string& value) override;
};
class  StringSenderAsyncWaiter {
 public:
  explicit StringSenderAsyncWaiter(StringSender* proxy);
  ~StringSenderAsyncWaiter();
  void Echo(
      const std::string& value, std::string* out_value);

 private:
  StringSender* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(StringSenderAsyncWaiter);
};


class  IntegerSenderConnectionInterceptorForTesting : public IntegerSenderConnection {
  virtual IntegerSenderConnection* GetForwardingInterface() = 0;
  void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) override;
  void AsyncGetSender(AsyncGetSenderCallback callback) override;
};
class  IntegerSenderConnectionAsyncWaiter {
 public:
  explicit IntegerSenderConnectionAsyncWaiter(IntegerSenderConnection* proxy);
  ~IntegerSenderConnectionAsyncWaiter();
  void AsyncGetSender(
      ::mojo::PendingAssociatedRemote<IntegerSender>* out_sender);

 private:
  IntegerSenderConnection* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnectionAsyncWaiter);
};


class  IntegerSenderConnectionAtBothEndsInterceptorForTesting : public IntegerSenderConnectionAtBothEnds {
  virtual IntegerSenderConnectionAtBothEnds* GetForwardingInterface() = 0;
  void GetSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) override;
  void SetSender(::mojo::PendingAssociatedRemote<IntegerSender> sender, SetSenderCallback callback) override;
};
class  IntegerSenderConnectionAtBothEndsAsyncWaiter {
 public:
  explicit IntegerSenderConnectionAtBothEndsAsyncWaiter(IntegerSenderConnectionAtBothEnds* proxy);
  ~IntegerSenderConnectionAtBothEndsAsyncWaiter();
  void SetSender(
      ::mojo::PendingAssociatedRemote<IntegerSender> sender, int32_t* out_value);

 private:
  IntegerSenderConnectionAtBothEnds* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(IntegerSenderConnectionAtBothEndsAsyncWaiter);
};


class  SenderConnectionInterceptorForTesting : public SenderConnection {
  virtual SenderConnection* GetForwardingInterface() = 0;
  void GetIntegerSender(::mojo::PendingAssociatedReceiver<IntegerSender> receiver) override;
  void GetStringSender(::mojo::PendingAssociatedReceiver<StringSender> receiver) override;
};
class  SenderConnectionAsyncWaiter {
 public:
  explicit SenderConnectionAsyncWaiter(SenderConnection* proxy);
  ~SenderConnectionAsyncWaiter();

 private:
  SenderConnection* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SenderConnectionAsyncWaiter);
};


class  AssociatedPingProviderInterceptorForTesting : public AssociatedPingProvider {
  virtual AssociatedPingProvider* GetForwardingInterface() = 0;
  void GetPing(::mojo::PendingAssociatedReceiver<::mojo::test::PingService> receiver) override;
};
class  AssociatedPingProviderAsyncWaiter {
 public:
  explicit AssociatedPingProviderAsyncWaiter(AssociatedPingProvider* proxy);
  ~AssociatedPingProviderAsyncWaiter();

 private:
  AssociatedPingProvider* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AssociatedPingProviderAsyncWaiter);
};


class  AssociatedPingProviderProviderInterceptorForTesting : public AssociatedPingProviderProvider {
  virtual AssociatedPingProviderProvider* GetForwardingInterface() = 0;
  void GetPingProvider(::mojo::PendingAssociatedReceiver<AssociatedPingProvider> receiver) override;
};
class  AssociatedPingProviderProviderAsyncWaiter {
 public:
  explicit AssociatedPingProviderProviderAsyncWaiter(AssociatedPingProviderProvider* proxy);
  ~AssociatedPingProviderProviderAsyncWaiter();

 private:
  AssociatedPingProviderProvider* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AssociatedPingProviderProviderAsyncWaiter);
};




}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_TEST_UTILS_H_