// mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {

enum class EnumA : int32_t;

enum class EnumB : int32_t;

enum class EmptyEnum : int32_t;

enum class ExtensibleEmptyEnum : int32_t;

enum class BasicEnum : int32_t;

enum class StructWithEnum_EnumWithin : int32_t;
class InterfaceAInterfaceBase;
class BoundsCheckTestInterfaceInterfaceBase;
class ConformanceTestInterfaceInterfaceBase;
class IntegrationTestInterfaceInterfaceBase;
}  // namespace mojo
}  // namespace test


namespace mojo {
namespace test {
namespace blink {
// Aliases for definition in the parent namespace.
using EnumA = EnumA;
using EnumB = EnumB;
using EmptyEnum = EmptyEnum;
using ExtensibleEmptyEnum = ExtensibleEmptyEnum;
using BasicEnum = BasicEnum;
using InterfaceAInterfaceBase = InterfaceAInterfaceBase;
using BoundsCheckTestInterfaceInterfaceBase = BoundsCheckTestInterfaceInterfaceBase;
using ConformanceTestInterfaceInterfaceBase = ConformanceTestInterfaceInterfaceBase;
using IntegrationTestInterfaceInterfaceBase = IntegrationTestInterfaceInterfaceBase;
class StructA;
using StructAPtr = mojo::InlinedStructPtr<StructA>;

class StructB;
using StructBPtr = mojo::StructPtr<StructB>;

class StructC;
using StructCPtr = mojo::StructPtr<StructC>;

class StructD;
using StructDPtr = mojo::StructPtr<StructD>;

class StructE;
using StructEPtr = mojo::StructPtr<StructE>;

class StructF;
using StructFPtr = mojo::StructPtr<StructF>;

class StructG;
using StructGPtr = mojo::StructPtr<StructG>;

class BasicStruct;
using BasicStructPtr = mojo::InlinedStructPtr<BasicStruct>;

class StructWithEnum;
using StructWithEnumPtr = mojo::InlinedStructPtr<StructWithEnum>;

class Recursive;
using RecursivePtr = mojo::StructPtr<Recursive>;

class UnionA;

typedef mojo::StructPtr<UnionA> UnionAPtr;

class InterfaceA;

// @generated_from: mojo.test.InterfaceA
using InterfaceAPtr = mojo::InterfacePtr<InterfaceA>;
using InterfaceAPtrInfo = mojo::InterfacePtrInfo<InterfaceA>;

// @generated_from: mojo.test.InterfaceA
using InterfaceARequest = mojo::InterfaceRequest<InterfaceA>;
using InterfaceAAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<InterfaceA>;

// @generated_from: mojo.test.InterfaceA
using InterfaceAAssociatedRequest =
    mojo::AssociatedInterfaceRequest<InterfaceA>;

class BoundsCheckTestInterface;

// @generated_from: mojo.test.BoundsCheckTestInterface
using BoundsCheckTestInterfacePtr = mojo::InterfacePtr<BoundsCheckTestInterface>;
using BoundsCheckTestInterfacePtrInfo = mojo::InterfacePtrInfo<BoundsCheckTestInterface>;

// @generated_from: mojo.test.BoundsCheckTestInterface
using BoundsCheckTestInterfaceRequest = mojo::InterfaceRequest<BoundsCheckTestInterface>;
using BoundsCheckTestInterfaceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<BoundsCheckTestInterface>;

// @generated_from: mojo.test.BoundsCheckTestInterface
using BoundsCheckTestInterfaceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<BoundsCheckTestInterface>;

class ConformanceTestInterface;

// @generated_from: mojo.test.ConformanceTestInterface
using ConformanceTestInterfacePtr = mojo::InterfacePtr<ConformanceTestInterface>;
using ConformanceTestInterfacePtrInfo = mojo::InterfacePtrInfo<ConformanceTestInterface>;

// @generated_from: mojo.test.ConformanceTestInterface
using ConformanceTestInterfaceRequest = mojo::InterfaceRequest<ConformanceTestInterface>;
using ConformanceTestInterfaceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ConformanceTestInterface>;

// @generated_from: mojo.test.ConformanceTestInterface
using ConformanceTestInterfaceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ConformanceTestInterface>;

class IntegrationTestInterface;

// @generated_from: mojo.test.IntegrationTestInterface
using IntegrationTestInterfacePtr = mojo::InterfacePtr<IntegrationTestInterface>;
using IntegrationTestInterfacePtrInfo = mojo::InterfacePtrInfo<IntegrationTestInterface>;

// @generated_from: mojo.test.IntegrationTestInterface
using IntegrationTestInterfaceRequest = mojo::InterfaceRequest<IntegrationTestInterface>;
using IntegrationTestInterfaceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<IntegrationTestInterface>;

// @generated_from: mojo.test.IntegrationTestInterface
using IntegrationTestInterfaceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<IntegrationTestInterface>;




}  // namespace blink
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_