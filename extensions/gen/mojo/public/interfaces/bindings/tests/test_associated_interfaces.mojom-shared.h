// mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_SHARED_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_associated_interfaces.mojom-shared-internal.h"
#include "mojo/public/interfaces/bindings/tests/ping_service.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
class StructContainsAssociatedDataView;

class UnionContainsAssociatedDataView;


}  // namespace test
}  // namespace mojo

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mojo::test::StructContainsAssociatedDataView> {
  using Data = ::mojo::test::internal::StructContainsAssociated_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::mojo::test::UnionContainsAssociatedDataView> {
  using Data = ::mojo::test::internal::UnionContainsAssociated_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace test {
// Interface base classes. They are used for type safety check.
class FooInterfaceInterfaceBase {};

using FooInterfacePtrDataView =
    mojo::InterfacePtrDataView<FooInterfaceInterfaceBase>;
using FooInterfaceRequestDataView =
    mojo::InterfaceRequestDataView<FooInterfaceInterfaceBase>;
using FooInterfaceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FooInterfaceInterfaceBase>;
using FooInterfaceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FooInterfaceInterfaceBase>;
class InterfacePassesAssociatedInterfaceBase {};

using InterfacePassesAssociatedPtrDataView =
    mojo::InterfacePtrDataView<InterfacePassesAssociatedInterfaceBase>;
using InterfacePassesAssociatedRequestDataView =
    mojo::InterfaceRequestDataView<InterfacePassesAssociatedInterfaceBase>;
using InterfacePassesAssociatedAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<InterfacePassesAssociatedInterfaceBase>;
using InterfacePassesAssociatedAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<InterfacePassesAssociatedInterfaceBase>;
class IntegerSenderInterfaceBase {};

using IntegerSenderPtrDataView =
    mojo::InterfacePtrDataView<IntegerSenderInterfaceBase>;
using IntegerSenderRequestDataView =
    mojo::InterfaceRequestDataView<IntegerSenderInterfaceBase>;
using IntegerSenderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IntegerSenderInterfaceBase>;
using IntegerSenderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IntegerSenderInterfaceBase>;
class StringSenderInterfaceBase {};

using StringSenderPtrDataView =
    mojo::InterfacePtrDataView<StringSenderInterfaceBase>;
using StringSenderRequestDataView =
    mojo::InterfaceRequestDataView<StringSenderInterfaceBase>;
using StringSenderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<StringSenderInterfaceBase>;
using StringSenderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<StringSenderInterfaceBase>;
class IntegerSenderConnectionInterfaceBase {};

using IntegerSenderConnectionPtrDataView =
    mojo::InterfacePtrDataView<IntegerSenderConnectionInterfaceBase>;
using IntegerSenderConnectionRequestDataView =
    mojo::InterfaceRequestDataView<IntegerSenderConnectionInterfaceBase>;
using IntegerSenderConnectionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IntegerSenderConnectionInterfaceBase>;
using IntegerSenderConnectionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IntegerSenderConnectionInterfaceBase>;
class IntegerSenderConnectionAtBothEndsInterfaceBase {};

using IntegerSenderConnectionAtBothEndsPtrDataView =
    mojo::InterfacePtrDataView<IntegerSenderConnectionAtBothEndsInterfaceBase>;
using IntegerSenderConnectionAtBothEndsRequestDataView =
    mojo::InterfaceRequestDataView<IntegerSenderConnectionAtBothEndsInterfaceBase>;
using IntegerSenderConnectionAtBothEndsAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IntegerSenderConnectionAtBothEndsInterfaceBase>;
using IntegerSenderConnectionAtBothEndsAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IntegerSenderConnectionAtBothEndsInterfaceBase>;
class SenderConnectionInterfaceBase {};

using SenderConnectionPtrDataView =
    mojo::InterfacePtrDataView<SenderConnectionInterfaceBase>;
using SenderConnectionRequestDataView =
    mojo::InterfaceRequestDataView<SenderConnectionInterfaceBase>;
using SenderConnectionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SenderConnectionInterfaceBase>;
using SenderConnectionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SenderConnectionInterfaceBase>;
class AssociatedPingProviderInterfaceBase {};

using AssociatedPingProviderPtrDataView =
    mojo::InterfacePtrDataView<AssociatedPingProviderInterfaceBase>;
using AssociatedPingProviderRequestDataView =
    mojo::InterfaceRequestDataView<AssociatedPingProviderInterfaceBase>;
using AssociatedPingProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AssociatedPingProviderInterfaceBase>;
using AssociatedPingProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AssociatedPingProviderInterfaceBase>;
class AssociatedPingProviderProviderInterfaceBase {};

using AssociatedPingProviderProviderPtrDataView =
    mojo::InterfacePtrDataView<AssociatedPingProviderProviderInterfaceBase>;
using AssociatedPingProviderProviderRequestDataView =
    mojo::InterfaceRequestDataView<AssociatedPingProviderProviderInterfaceBase>;
using AssociatedPingProviderProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AssociatedPingProviderProviderInterfaceBase>;
using AssociatedPingProviderProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AssociatedPingProviderProviderInterfaceBase>;


class StructContainsAssociatedDataView {
 public:
  StructContainsAssociatedDataView() {}

  StructContainsAssociatedDataView(
      internal::StructContainsAssociated_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFooRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
            &data_->foo_remote, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeFooReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
            &data_->foo_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetFooRemotesDataView(
      mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFooRemotes(UserType* output) {
    
    auto* pointer = data_->foo_remotes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>>(
        pointer, output, message_);
  }
  inline void GetFooReceiversDataView(
      mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFooReceivers(UserType* output) {
    
    auto* pointer = data_->foo_receivers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedRequestDataView>>(
        pointer, output, message_);
  }
 private:
  internal::StructContainsAssociated_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UnionContainsAssociatedDataView {
 public:
  using Tag = internal::UnionContainsAssociated_Data::UnionContainsAssociated_Tag;

  UnionContainsAssociatedDataView() {}

  UnionContainsAssociatedDataView(
      internal::UnionContainsAssociated_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_foo_remote() const { return data_->tag == Tag::FOO_REMOTE; }
  template <typename UserType>
  UserType TakeFooRemote() {
    DCHECK(is_foo_remote());
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
            &data_->data.f_foo_remote, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool is_foo_receiver() const { return data_->tag == Tag::FOO_RECEIVER; }
  template <typename UserType>
  UserType TakeFooReceiver() {
    DCHECK(is_foo_receiver());
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
            &data_->data.f_foo_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool is_foo_remotes() const { return data_->tag == Tag::FOO_REMOTES; }
  inline void GetFooRemotesDataView(
      mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFooRemotes(UserType* output) {
    
    DCHECK(is_foo_remotes());
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>>(
        data_->data.f_foo_remotes.Get(), output, message_);
  }
  bool is_foo_receivers() const { return data_->tag == Tag::FOO_RECEIVERS; }
  inline void GetFooReceiversDataView(
      mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFooReceivers(UserType* output) {
    
    DCHECK(is_foo_receivers());
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedRequestDataView>>(
        data_->data.f_foo_receivers.Get(), output, message_);
  }

 private:
  internal::UnionContainsAssociated_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace test
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::test::StructContainsAssociatedDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::test::StructContainsAssociatedDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::test::internal::StructContainsAssociated_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::foo_remote(input)) in_foo_remote = Traits::foo_remote(input);
    mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
        in_foo_remote, &fragment->foo_remote, &fragment.message());
    decltype(Traits::foo_receiver(input)) in_foo_receiver = Traits::foo_receiver(input);
    mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
        in_foo_receiver, &fragment->foo_receiver, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->foo_receiver),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
        "invalid foo_receiver in StructContainsAssociated struct");
    decltype(Traits::foo_remotes(input)) in_foo_remotes = Traits::foo_remotes(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->foo_remotes)::BaseType>
        foo_remotes_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams foo_remotes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>>(
        in_foo_remotes, foo_remotes_fragment, &foo_remotes_validate_params);
    fragment->foo_remotes.Set(
        foo_remotes_fragment.is_null() ? nullptr : foo_remotes_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->foo_remotes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null foo_remotes in StructContainsAssociated struct");
    decltype(Traits::foo_receivers(input)) in_foo_receivers = Traits::foo_receivers(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->foo_receivers)::BaseType>
        foo_receivers_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams foo_receivers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedRequestDataView>>(
        in_foo_receivers, foo_receivers_fragment, &foo_receivers_validate_params);
    fragment->foo_receivers.Set(
        foo_receivers_fragment.is_null() ? nullptr : foo_receivers_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->foo_receivers.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null foo_receivers in StructContainsAssociated struct");
  }

  static bool Deserialize(::mojo::test::internal::StructContainsAssociated_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::test::StructContainsAssociatedDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::test::UnionContainsAssociatedDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::mojo::test::UnionContainsAssociatedDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::mojo::test::internal::UnionContainsAssociated_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::mojo::test::UnionContainsAssociatedDataView::Tag::FOO_REMOTE: {
        decltype(Traits::foo_remote(input))
            in_foo_remote = Traits::foo_remote(input);
        mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>(
            in_foo_remote, &fragment->data.f_foo_remote, &fragment.message());
        break;
      }
      case ::mojo::test::UnionContainsAssociatedDataView::Tag::FOO_RECEIVER: {
        decltype(Traits::foo_receiver(input))
            in_foo_receiver = Traits::foo_receiver(input);
        mojo::internal::Serialize<::mojo::test::FooInterfaceAssociatedRequestDataView>(
            in_foo_receiver, &fragment->data.f_foo_receiver, &fragment.message());
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            !mojo::internal::IsHandleOrInterfaceValid(fragment->data.f_foo_receiver),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
            "invalid foo_receiver in UnionContainsAssociated union");
        break;
      }
      case ::mojo::test::UnionContainsAssociatedDataView::Tag::FOO_REMOTES: {
        decltype(Traits::foo_remotes(input))
            in_foo_remotes = Traits::foo_remotes(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_foo_remotes)::BaseType>
            value_fragment(fragment.message());
        const ContainerValidateParams foo_remotes_validate_params(
            0, false, nullptr);
        mojo::internal::Serialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedPtrInfoDataView>>(
            in_foo_remotes, value_fragment, &foo_remotes_validate_params);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null foo_remotes in UnionContainsAssociated union");
        fragment->data.f_foo_remotes.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::mojo::test::UnionContainsAssociatedDataView::Tag::FOO_RECEIVERS: {
        decltype(Traits::foo_receivers(input))
            in_foo_receivers = Traits::foo_receivers(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_foo_receivers)::BaseType>
            value_fragment(fragment.message());
        const ContainerValidateParams foo_receivers_validate_params(
            0, false, nullptr);
        mojo::internal::Serialize<mojo::ArrayDataView<::mojo::test::FooInterfaceAssociatedRequestDataView>>(
            in_foo_receivers, value_fragment, &foo_receivers_validate_params);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null foo_receivers in UnionContainsAssociated union");
        fragment->data.f_foo_receivers.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::mojo::test::internal::UnionContainsAssociated_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::test::UnionContainsAssociatedDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace test {

inline void StructContainsAssociatedDataView::GetFooRemotesDataView(
    mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>* output) {
  auto pointer = data_->foo_remotes.Get();
  *output = mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>(pointer, message_);
}
inline void StructContainsAssociatedDataView::GetFooReceiversDataView(
    mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>* output) {
  auto pointer = data_->foo_receivers.Get();
  *output = mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>(pointer, message_);
}


inline void UnionContainsAssociatedDataView::GetFooRemotesDataView(
    mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>* output) {
  DCHECK(is_foo_remotes());
  *output = mojo::ArrayDataView<FooInterfaceAssociatedPtrInfoDataView>(data_->data.f_foo_remotes.Get(), message_);
}
inline void UnionContainsAssociatedDataView::GetFooReceiversDataView(
    mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>* output) {
  DCHECK(is_foo_receivers());
  *output = mojo::ArrayDataView<FooInterfaceAssociatedRequestDataView>(data_->data.f_foo_receivers.Get(), message_);
}


}  // namespace test
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ASSOCIATED_INTERFACES_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/