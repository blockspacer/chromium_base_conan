// mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_BAD_MESSAGES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_BAD_MESSAGES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-shared.h"
#include "mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace blink {

class TestBadMessagesProxy;

template <typename ImplRefTraits>
class TestBadMessagesStub;

class TestBadMessagesRequestValidator;
class TestBadMessagesResponseValidator;


// @generated_from: mojo.test.TestBadMessages
class  TestBadMessages
    : public TestBadMessagesInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestBadMessagesInterfaceBase;
  using Proxy_ = TestBadMessagesProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestBadMessagesStub<ImplRefTraits>;

  using RequestValidator_ = TestBadMessagesRequestValidator;
  using ResponseValidator_ = TestBadMessagesResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRejectEventuallyMinVersion = 0,
    kRequestResponseMinVersion = 0,
    kRejectSyncMinVersion = 0,
    kRequestResponseSyncMinVersion = 0,
  };
  virtual ~TestBadMessages() {}


  using RejectEventuallyCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestBadMessages.RejectEventually
  virtual void RejectEventually(RejectEventuallyCallback callback) = 0;


  using RequestResponseCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestBadMessages.RequestResponse
  virtual void RequestResponse(RequestResponseCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestBadMessages.RejectSync
  virtual bool RejectSync();

  using RejectSyncCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestBadMessages.RejectSync
  virtual void RejectSync(RejectSyncCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.TestBadMessages.RequestResponseSync
  virtual bool RequestResponseSync();

  using RequestResponseSyncCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.TestBadMessages.RequestResponseSync
  virtual void RequestResponseSync(RequestResponseSyncCallback callback) = 0;
};



// @generated_from: mojo.test.TestBadMessages
class  TestBadMessagesProxy
    : public TestBadMessages {
 public:
  using InterfaceType = TestBadMessages;

  explicit TestBadMessagesProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.TestBadMessages.RejectEventually
  void RejectEventually(RejectEventuallyCallback callback) final;
  
// @generated_from: mojo.test.TestBadMessages.RequestResponse
  void RequestResponse(RequestResponseCallback callback) final;
  
// @generated_from: mojo.test.TestBadMessages.RejectSync
  bool RejectSync() final;
  
// @generated_from: mojo.test.TestBadMessages.RejectSync
  void RejectSync(RejectSyncCallback callback) final;
  
// @generated_from: mojo.test.TestBadMessages.RequestResponseSync
  bool RequestResponseSync() final;
  
// @generated_from: mojo.test.TestBadMessages.RequestResponseSync
  void RequestResponseSync(RequestResponseSyncCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestBadMessagesStubDispatch {
 public:
  static bool Accept(TestBadMessages* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestBadMessages* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestBadMessages>>
class TestBadMessagesStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestBadMessagesStub() {}
  ~TestBadMessagesStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestBadMessagesStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestBadMessagesStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestBadMessagesRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestBadMessagesResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_BAD_MESSAGES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjE5MywgImJlZ2luIjogMjE3OCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0QmFkTWVzc2FnZXMifX0sIHsi
ZW5kIjogMzEwMywgImJlZ2luIjogMzA4NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0QmFkTWVzc2FnZXMuUmVqZWN0RXZlbnR1YWxseSJ9
fSwgeyJlbmQiOiAzMzAzLCAiYmVnaW4iOiAzMjg4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RCYWRNZXNzYWdlcy5SZXF1ZXN0UmVzcG9u
c2UifX0sIHsiZW5kIjogMzU2NCwgImJlZ2luIjogMzU1NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0QmFkTWVzc2FnZXMuUmVqZWN0U3lu
YyJ9fSwgeyJlbmQiOiAzNzExLCAiYmVnaW4iOiAzNzAxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RCYWRNZXNzYWdlcy5SZWplY3RTeW5j
In19LCB7ImVuZCI6IDM5ODUsICJiZWdpbiI6IDM5NjYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdEJhZE1lc3NhZ2VzLlJlcXVlc3RSZXNw
b25zZVN5bmMifX0sIHsiZW5kIjogNDE1OSwgImJlZ2luIjogNDE0MCwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0QmFkTWVzc2FnZXMuUmVx
dWVzdFJlc3BvbnNlU3luYyJ9fSwgeyJlbmQiOiA0NTMzLCAiYmVnaW4iOiA0NTE3LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRlc3RCYWRNZXNz
YWdlcy5SZWplY3RFdmVudHVhbGx5In19LCB7ImVuZCI6IDQ2NjMsICJiZWdpbiI6IDQ2NDgsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVzdEJh
ZE1lc3NhZ2VzLlJlcXVlc3RSZXNwb25zZSJ9fSwgeyJlbmQiOiA0NzgyLCAiYmVnaW4iOiA0Nzcy
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LlRl
c3RCYWRNZXNzYWdlcy5SZWplY3RTeW5jIn19LCB7ImVuZCI6IDQ4NjksICJiZWdpbiI6IDQ4NTks
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuVGVz
dEJhZE1lc3NhZ2VzLlJlamVjdFN5bmMifX0sIHsiZW5kIjogNTAwMSwgImJlZ2luIjogNDk4Miwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5UZXN0
QmFkTWVzc2FnZXMuUmVxdWVzdFJlc3BvbnNlU3luYyJ9fSwgeyJlbmQiOiA1MTA2LCAiYmVnaW4i
OiA1MDg3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LlRlc3RCYWRNZXNzYWdlcy5SZXF1ZXN0UmVzcG9uc2VTeW5jIn19XSwgInR5cGUiOiAia3l0
aGUwIn0=
*/