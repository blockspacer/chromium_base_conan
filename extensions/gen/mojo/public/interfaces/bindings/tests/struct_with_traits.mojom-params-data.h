// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace internal {
class  TraitsTestService_EchoStructWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraits_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoStructWithTraits_Params_Data>;

  TraitsTestService_EchoStructWithTraits_Params_Data();
  ~TraitsTestService_EchoStructWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoStructWithTraits_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoStructWithTraits_Params_Data)");
class  TraitsTestService_EchoStructWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraits_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoStructWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoStructWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoStructWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoStructWithTraits_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoStructWithTraits_ResponseParams_Data)");
class  TraitsTestService_EchoTrivialStructWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::TrivialStructWithTraits_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoTrivialStructWithTraits_Params_Data>;

  TraitsTestService_EchoTrivialStructWithTraits_Params_Data();
  ~TraitsTestService_EchoTrivialStructWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoTrivialStructWithTraits_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoTrivialStructWithTraits_Params_Data)");
class  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::TrivialStructWithTraits_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data)");
class  TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MoveOnlyStructWithTraits_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data>;

  TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data();
  ~TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data)");
class  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MoveOnlyStructWithTraits_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data)");
class  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MoveOnlyStructWithTraits_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data>;

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data();
  ~TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data)");
class  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MoveOnlyStructWithTraits_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data)");
class  TraitsTestService_EchoEnumWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t e;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoEnumWithTraits_Params_Data>;

  TraitsTestService_EchoEnumWithTraits_Params_Data();
  ~TraitsTestService_EchoEnumWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoEnumWithTraits_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoEnumWithTraits_Params_Data)");
class  TraitsTestService_EchoEnumWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t passed;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoEnumWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoEnumWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoEnumWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoEnumWithTraits_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoEnumWithTraits_ResponseParams_Data)");
class  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraitsForUniquePtr_Data> e;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data>;

  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data();
  ~TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data)");
class  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraitsForUniquePtr_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data>;

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data();
  ~TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data)");
class  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraitsForUniquePtr_Data> e;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data>;

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data();
  ~TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data)");
class  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithTraitsForUniquePtr_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data>;

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data();
  ~TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data) == 16,
              "Bad sizeof(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data)");
class  TraitsTestService_EchoUnionWithTraits_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::UnionWithTraits_Data u;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoUnionWithTraits_Params_Data>;

  TraitsTestService_EchoUnionWithTraits_Params_Data();
  ~TraitsTestService_EchoUnionWithTraits_Params_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoUnionWithTraits_Params_Data) == 24,
              "Bad sizeof(TraitsTestService_EchoUnionWithTraits_Params_Data)");
class  TraitsTestService_EchoUnionWithTraits_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::UnionWithTraits_Data passed;

 private:
  friend class mojo::internal::MessageFragment<TraitsTestService_EchoUnionWithTraits_ResponseParams_Data>;

  TraitsTestService_EchoUnionWithTraits_ResponseParams_Data();
  ~TraitsTestService_EchoUnionWithTraits_ResponseParams_Data() = delete;
};
static_assert(sizeof(TraitsTestService_EchoUnionWithTraits_ResponseParams_Data) == 24,
              "Bad sizeof(TraitsTestService_EchoUnionWithTraits_ResponseParams_Data)");
class  TestUnserializedStruct_PassUnserializedStruct_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithUnreachableTraits_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TestUnserializedStruct_PassUnserializedStruct_Params_Data>;

  TestUnserializedStruct_PassUnserializedStruct_Params_Data();
  ~TestUnserializedStruct_PassUnserializedStruct_Params_Data() = delete;
};
static_assert(sizeof(TestUnserializedStruct_PassUnserializedStruct_Params_Data) == 16,
              "Bad sizeof(TestUnserializedStruct_PassUnserializedStruct_Params_Data)");
class  TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructWithUnreachableTraits_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data>;

  TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data();
  ~TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data) == 16,
              "Bad sizeof(TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data)");
class  ForceSerializeTester_SendForceSerializedStruct_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructForceSerialize_Data> s;

 private:
  friend class mojo::internal::MessageFragment<ForceSerializeTester_SendForceSerializedStruct_Params_Data>;

  ForceSerializeTester_SendForceSerializedStruct_Params_Data();
  ~ForceSerializeTester_SendForceSerializedStruct_Params_Data() = delete;
};
static_assert(sizeof(ForceSerializeTester_SendForceSerializedStruct_Params_Data) == 16,
              "Bad sizeof(ForceSerializeTester_SendForceSerializedStruct_Params_Data)");
class  ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructForceSerialize_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data>;

  ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data();
  ~ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data() = delete;
};
static_assert(sizeof(ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data) == 16,
              "Bad sizeof(ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data)");
class  ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructNestedForceSerialize_Data> s;

 private:
  friend class mojo::internal::MessageFragment<ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data>;

  ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data();
  ~ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data() = delete;
};
static_assert(sizeof(ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data) == 16,
              "Bad sizeof(ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data)");
class  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StructNestedForceSerialize_Data> passed;

 private:
  friend class mojo::internal::MessageFragment<ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data>;

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data();
  ~ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data() = delete;
};
static_assert(sizeof(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data) == 16,
              "Bad sizeof(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data)");

}  // namespace internal


class TraitsTestService_EchoStructWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoStructWithTraits_ParamsDataView() {}

  TraitsTestService_EchoStructWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoStructWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      StructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoStructWithTraits_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoStructWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoStructWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoStructWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoStructWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoStructWithTraits_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoTrivialStructWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoTrivialStructWithTraits_ParamsDataView() {}

  TraitsTestService_EchoTrivialStructWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoTrivialStructWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      TrivialStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::TrivialStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoTrivialStructWithTraits_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoTrivialStructWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoTrivialStructWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      TrivialStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::TrivialStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoTrivialStructWithTraits_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoMoveOnlyStructWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoMoveOnlyStructWithTraits_ParamsDataView() {}

  TraitsTestService_EchoMoveOnlyStructWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      MoveOnlyStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::MoveOnlyStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoMoveOnlyStructWithTraits_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      MoveOnlyStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::MoveOnlyStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ParamsDataView() {}

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      MoveOnlyStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo::test::MoveOnlyStructWithTraitsDataView, UserType>(),
    "Attempting to read the optional `s` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadS` instead "
    "of `ReadS if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::MoveOnlyStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      MoveOnlyStructWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo::test::MoveOnlyStructWithTraitsDataView, UserType>(),
    "Attempting to read the optional `passed` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPassed` instead "
    "of `ReadPassed if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::MoveOnlyStructWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoEnumWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoEnumWithTraits_ParamsDataView() {}

  TraitsTestService_EchoEnumWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoEnumWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadE(UserType* output) const {
    auto data_value = data_->e;
    return mojo::internal::Deserialize<::mojo::test::EnumWithTraits>(
        data_value, output);
  }
  EnumWithTraits e() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo::test::EnumWithTraits>(data_->e));
  }
 private:
  internal::TraitsTestService_EchoEnumWithTraits_Params_Data* data_ = nullptr;
};



class TraitsTestService_EchoEnumWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoEnumWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoEnumWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoEnumWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) const {
    auto data_value = data_->passed;
    return mojo::internal::Deserialize<::mojo::test::EnumWithTraits>(
        data_value, output);
  }
  EnumWithTraits passed() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo::test::EnumWithTraits>(data_->passed));
  }
 private:
  internal::TraitsTestService_EchoEnumWithTraits_ResponseParams_Data* data_ = nullptr;
};



class TraitsTestService_EchoStructWithTraitsForUniquePtr_ParamsDataView {
 public:
  TraitsTestService_EchoStructWithTraitsForUniquePtr_ParamsDataView() {}

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ParamsDataView(
      internal::TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEDataView(
      StructWithTraitsForUniquePtrDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadE(UserType* output) {
    
    auto* pointer = data_->e.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsForUniquePtrDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoStructWithTraitsForUniquePtr_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParamsDataView {
 public:
  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParamsDataView() {}

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParamsDataView(
      internal::TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructWithTraitsForUniquePtrDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsForUniquePtrDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ParamsDataView {
 public:
  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ParamsDataView() {}

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ParamsDataView(
      internal::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEDataView(
      StructWithTraitsForUniquePtrDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadE(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo::test::StructWithTraitsForUniquePtrDataView, UserType>(),
    "Attempting to read the optional `e` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadE` instead "
    "of `ReadE if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->e.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsForUniquePtrDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParamsDataView {
 public:
  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParamsDataView() {}

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParamsDataView(
      internal::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructWithTraitsForUniquePtrDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo::test::StructWithTraitsForUniquePtrDataView, UserType>(),
    "Attempting to read the optional `passed` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPassed` instead "
    "of `ReadPassed if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithTraitsForUniquePtrDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoUnionWithTraits_ParamsDataView {
 public:
  TraitsTestService_EchoUnionWithTraits_ParamsDataView() {}

  TraitsTestService_EchoUnionWithTraits_ParamsDataView(
      internal::TraitsTestService_EchoUnionWithTraits_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUDataView(
      UnionWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadU(UserType* output) {
    
    auto* pointer = !data_->u.is_null() ? &data_->u : nullptr;
    return mojo::internal::Deserialize<::mojo::test::UnionWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoUnionWithTraits_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TraitsTestService_EchoUnionWithTraits_ResponseParamsDataView {
 public:
  TraitsTestService_EchoUnionWithTraits_ResponseParamsDataView() {}

  TraitsTestService_EchoUnionWithTraits_ResponseParamsDataView(
      internal::TraitsTestService_EchoUnionWithTraits_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      UnionWithTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = !data_->passed.is_null() ? &data_->passed : nullptr;
    return mojo::internal::Deserialize<::mojo::test::UnionWithTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TraitsTestService_EchoUnionWithTraits_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestUnserializedStruct_PassUnserializedStruct_ParamsDataView {
 public:
  TestUnserializedStruct_PassUnserializedStruct_ParamsDataView() {}

  TestUnserializedStruct_PassUnserializedStruct_ParamsDataView(
      internal::TestUnserializedStruct_PassUnserializedStruct_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      StructWithUnreachableTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithUnreachableTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestUnserializedStruct_PassUnserializedStruct_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestUnserializedStruct_PassUnserializedStruct_ResponseParamsDataView {
 public:
  TestUnserializedStruct_PassUnserializedStruct_ResponseParamsDataView() {}

  TestUnserializedStruct_PassUnserializedStruct_ResponseParamsDataView(
      internal::TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructWithUnreachableTraitsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructWithUnreachableTraitsDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestUnserializedStruct_PassUnserializedStruct_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ForceSerializeTester_SendForceSerializedStruct_ParamsDataView {
 public:
  ForceSerializeTester_SendForceSerializedStruct_ParamsDataView() {}

  ForceSerializeTester_SendForceSerializedStruct_ParamsDataView(
      internal::ForceSerializeTester_SendForceSerializedStruct_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      StructForceSerializeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::StructForceSerializeDataView>(
        pointer, output, message_);
  }
 private:
  internal::ForceSerializeTester_SendForceSerializedStruct_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ForceSerializeTester_SendForceSerializedStruct_ResponseParamsDataView {
 public:
  ForceSerializeTester_SendForceSerializedStruct_ResponseParamsDataView() {}

  ForceSerializeTester_SendForceSerializedStruct_ResponseParamsDataView(
      internal::ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructForceSerializeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructForceSerializeDataView>(
        pointer, output, message_);
  }
 private:
  internal::ForceSerializeTester_SendForceSerializedStruct_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ForceSerializeTester_SendNestedForceSerializedStruct_ParamsDataView {
 public:
  ForceSerializeTester_SendNestedForceSerializedStruct_ParamsDataView() {}

  ForceSerializeTester_SendNestedForceSerializedStruct_ParamsDataView(
      internal::ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      StructNestedForceSerializeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::mojo::test::StructNestedForceSerializeDataView>(
        pointer, output, message_);
  }
 private:
  internal::ForceSerializeTester_SendNestedForceSerializedStruct_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParamsDataView {
 public:
  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParamsDataView() {}

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParamsDataView(
      internal::ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPassedDataView(
      StructNestedForceSerializeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPassed(UserType* output) {
    
    auto* pointer = data_->passed.Get();
    return mojo::internal::Deserialize<::mojo::test::StructNestedForceSerializeDataView>(
        pointer, output, message_);
  }
 private:
  internal::ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void TraitsTestService_EchoStructWithTraits_ParamsDataView::GetSDataView(
    StructWithTraitsDataView* output) {
  auto pointer = data_->s.Get();
  *output = StructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoStructWithTraits_ResponseParamsDataView::GetPassedDataView(
    StructWithTraitsDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoTrivialStructWithTraits_ParamsDataView::GetSDataView(
    TrivialStructWithTraitsDataView* output) {
  auto pointer = data_->s.Get();
  *output = TrivialStructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoTrivialStructWithTraits_ResponseParamsDataView::GetPassedDataView(
    TrivialStructWithTraitsDataView* output) {
  auto pointer = data_->passed.Get();
  *output = TrivialStructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoMoveOnlyStructWithTraits_ParamsDataView::GetSDataView(
    MoveOnlyStructWithTraitsDataView* output) {
  auto pointer = data_->s.Get();
  *output = MoveOnlyStructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParamsDataView::GetPassedDataView(
    MoveOnlyStructWithTraitsDataView* output) {
  auto pointer = data_->passed.Get();
  *output = MoveOnlyStructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ParamsDataView::GetSDataView(
    MoveOnlyStructWithTraitsDataView* output) {
  auto pointer = data_->s.Get();
  *output = MoveOnlyStructWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParamsDataView::GetPassedDataView(
    MoveOnlyStructWithTraitsDataView* output) {
  auto pointer = data_->passed.Get();
  *output = MoveOnlyStructWithTraitsDataView(pointer, message_);
}






inline void TraitsTestService_EchoStructWithTraitsForUniquePtr_ParamsDataView::GetEDataView(
    StructWithTraitsForUniquePtrDataView* output) {
  auto pointer = data_->e.Get();
  *output = StructWithTraitsForUniquePtrDataView(pointer, message_);
}


inline void TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParamsDataView::GetPassedDataView(
    StructWithTraitsForUniquePtrDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructWithTraitsForUniquePtrDataView(pointer, message_);
}


inline void TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ParamsDataView::GetEDataView(
    StructWithTraitsForUniquePtrDataView* output) {
  auto pointer = data_->e.Get();
  *output = StructWithTraitsForUniquePtrDataView(pointer, message_);
}


inline void TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParamsDataView::GetPassedDataView(
    StructWithTraitsForUniquePtrDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructWithTraitsForUniquePtrDataView(pointer, message_);
}


inline void TraitsTestService_EchoUnionWithTraits_ParamsDataView::GetUDataView(
    UnionWithTraitsDataView* output) {
  auto pointer = &data_->u;
  *output = UnionWithTraitsDataView(pointer, message_);
}


inline void TraitsTestService_EchoUnionWithTraits_ResponseParamsDataView::GetPassedDataView(
    UnionWithTraitsDataView* output) {
  auto pointer = &data_->passed;
  *output = UnionWithTraitsDataView(pointer, message_);
}


inline void TestUnserializedStruct_PassUnserializedStruct_ParamsDataView::GetSDataView(
    StructWithUnreachableTraitsDataView* output) {
  auto pointer = data_->s.Get();
  *output = StructWithUnreachableTraitsDataView(pointer, message_);
}


inline void TestUnserializedStruct_PassUnserializedStruct_ResponseParamsDataView::GetPassedDataView(
    StructWithUnreachableTraitsDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructWithUnreachableTraitsDataView(pointer, message_);
}


inline void ForceSerializeTester_SendForceSerializedStruct_ParamsDataView::GetSDataView(
    StructForceSerializeDataView* output) {
  auto pointer = data_->s.Get();
  *output = StructForceSerializeDataView(pointer, message_);
}


inline void ForceSerializeTester_SendForceSerializedStruct_ResponseParamsDataView::GetPassedDataView(
    StructForceSerializeDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructForceSerializeDataView(pointer, message_);
}


inline void ForceSerializeTester_SendNestedForceSerializedStruct_ParamsDataView::GetSDataView(
    StructNestedForceSerializeDataView* output) {
  auto pointer = data_->s.Get();
  *output = StructNestedForceSerializeDataView(pointer, message_);
}


inline void ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParamsDataView::GetPassedDataView(
    StructNestedForceSerializeDataView* output) {
  auto pointer = data_->passed.Get();
  *output = StructNestedForceSerializeDataView(pointer, message_);
}

}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_STRUCT_WITH_TRAITS_MOJOM_PARAMS_DATA_H_