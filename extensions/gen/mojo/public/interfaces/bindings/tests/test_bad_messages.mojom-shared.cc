// mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/interfaces/bindings/tests/test_bad_messages.mojom-params-data.h"
namespace mojo {
namespace test {

namespace internal {


// static
bool TestBadMessages_RejectEventually_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RejectEventually_Params_Data* object = static_cast<const TestBadMessages_RejectEventually_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RejectEventually_Params_Data::TestBadMessages_RejectEventually_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RejectEventually_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RejectEventually_ResponseParams_Data* object = static_cast<const TestBadMessages_RejectEventually_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RejectEventually_ResponseParams_Data::TestBadMessages_RejectEventually_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RequestResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RequestResponse_Params_Data* object = static_cast<const TestBadMessages_RequestResponse_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RequestResponse_Params_Data::TestBadMessages_RequestResponse_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RequestResponse_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RequestResponse_ResponseParams_Data* object = static_cast<const TestBadMessages_RequestResponse_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RequestResponse_ResponseParams_Data::TestBadMessages_RequestResponse_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RejectSync_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RejectSync_Params_Data* object = static_cast<const TestBadMessages_RejectSync_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RejectSync_Params_Data::TestBadMessages_RejectSync_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RejectSync_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RejectSync_ResponseParams_Data* object = static_cast<const TestBadMessages_RejectSync_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RejectSync_ResponseParams_Data::TestBadMessages_RejectSync_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RequestResponseSync_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RequestResponseSync_Params_Data* object = static_cast<const TestBadMessages_RequestResponseSync_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RequestResponseSync_Params_Data::TestBadMessages_RequestResponseSync_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestBadMessages_RequestResponseSync_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestBadMessages_RequestResponseSync_ResponseParams_Data* object = static_cast<const TestBadMessages_RequestResponseSync_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestBadMessages_RequestResponseSync_ResponseParams_Data::TestBadMessages_RequestResponseSync_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace test
}  // namespace mojo
