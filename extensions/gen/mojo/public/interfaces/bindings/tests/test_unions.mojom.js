// mojo/public/interfaces/bindings/tests/test_unions.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/test_unions.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');
  var sample_import$ =
      mojo.internal.exposeNamespace('imported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/interfaces/bindings/tests/sample_import.mojom', 'sample_import.mojom.js');
  }


  var AnEnum = {};
  AnEnum.FIRST = 0;
  AnEnum.SECOND = 1;
  AnEnum.MIN_VALUE = 0;
  AnEnum.MAX_VALUE = 1;

  AnEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  AnEnum.toKnownEnumValue = function(value) {
    return value;
  };

  AnEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var AnExtensibleEnum = {};
  AnExtensibleEnum.FIRST = 0;
  AnExtensibleEnum.SECOND = 1;
  AnExtensibleEnum.THIRD = 2;
  AnExtensibleEnum.MIN_VALUE = 0;
  AnExtensibleEnum.MAX_VALUE = 2;

  AnExtensibleEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  AnExtensibleEnum.toKnownEnumValue = function(value) {
    return value;
  };

  AnExtensibleEnum.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function WrapperStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WrapperStruct.prototype.initDefaults_ = function() {
    this.objectUnion = null;
    this.podUnion = null;
    this.handleUnion = null;
  };
  WrapperStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WrapperStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WrapperStruct.objectUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, ObjectUnion, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WrapperStruct.podUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 16, PodUnion, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WrapperStruct.handleUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 32, HandleUnion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WrapperStruct.encodedSize = codec.kStructHeaderSize + 48;

  WrapperStruct.decode = function(decoder) {
    var packed;
    var val = new WrapperStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.objectUnion =
        decoder.decodeStruct(ObjectUnion);
    val.podUnion =
        decoder.decodeStruct(PodUnion);
    val.handleUnion =
        decoder.decodeStruct(HandleUnion);
    return val;
  };

  WrapperStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WrapperStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(ObjectUnion, val.objectUnion);
    encoder.encodeStruct(PodUnion, val.podUnion);
    encoder.encodeStruct(HandleUnion, val.handleUnion);
  };
  function DummyStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DummyStruct.prototype.initDefaults_ = function() {
    this.fInt8 = 0;
  };
  DummyStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DummyStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DummyStruct.encodedSize = codec.kStructHeaderSize + 8;

  DummyStruct.decode = function(decoder) {
    var packed;
    var val = new DummyStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fInt8 =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DummyStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DummyStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.fInt8);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SmallStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallStruct.prototype.initDefaults_ = function() {
    this.dummyStruct = null;
    this.podUnion = null;
    this.podUnionArray = null;
    this.nullablePodUnionArray = null;
    this.sArray = null;
    this.podUnionMap = null;
    this.nullablePodUnionMap = null;
  };
  SmallStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.dummyStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DummyStruct, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.podUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, PodUnion, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.podUnionArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 16, PodUnion, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.nullablePodUnionArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 16, PodUnion, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.sArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, new codec.PointerTo(DummyStruct), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.podUnionMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 48, true, codec.String, PodUnion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStruct.nullablePodUnionMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, true, codec.String, PodUnion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmallStruct.encodedSize = codec.kStructHeaderSize + 64;

  SmallStruct.decode = function(decoder) {
    var packed;
    var val = new SmallStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dummyStruct =
        decoder.decodeStructPointer(DummyStruct);
    val.podUnion =
        decoder.decodeStruct(PodUnion);
    val.podUnionArray =
        decoder.decodeArrayPointer(PodUnion);
    val.nullablePodUnionArray =
        decoder.decodeArrayPointer(PodUnion);
    val.sArray =
        decoder.decodeArrayPointer(new codec.PointerTo(DummyStruct));
    val.podUnionMap =
        decoder.decodeMapPointer(codec.String, PodUnion);
    val.nullablePodUnionMap =
        decoder.decodeMapPointer(codec.String, PodUnion);
    return val;
  };

  SmallStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DummyStruct, val.dummyStruct);
    encoder.encodeStruct(PodUnion, val.podUnion);
    encoder.encodeArrayPointer(PodUnion, val.podUnionArray);
    encoder.encodeArrayPointer(PodUnion, val.nullablePodUnionArray);
    encoder.encodeArrayPointer(new codec.PointerTo(DummyStruct), val.sArray);
    encoder.encodeMapPointer(codec.String, PodUnion, val.podUnionMap);
    encoder.encodeMapPointer(codec.String, PodUnion, val.nullablePodUnionMap);
  };
  function SmallStructNonNullableUnion(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallStructNonNullableUnion.prototype.initDefaults_ = function() {
    this.podUnion = null;
  };
  SmallStructNonNullableUnion.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallStructNonNullableUnion.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallStructNonNullableUnion.podUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PodUnion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmallStructNonNullableUnion.encodedSize = codec.kStructHeaderSize + 16;

  SmallStructNonNullableUnion.decode = function(decoder) {
    var packed;
    var val = new SmallStructNonNullableUnion();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.podUnion =
        decoder.decodeStruct(PodUnion);
    return val;
  };

  SmallStructNonNullableUnion.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallStructNonNullableUnion.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PodUnion, val.podUnion);
  };
  function SmallObjStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallObjStruct.prototype.initDefaults_ = function() {
    this.objUnion = null;
    this.fInt8 = 0;
  };
  SmallObjStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallObjStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmallObjStruct.objUnion
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, ObjectUnion, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SmallObjStruct.encodedSize = codec.kStructHeaderSize + 24;

  SmallObjStruct.decode = function(decoder) {
    var packed;
    var val = new SmallObjStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.objUnion =
        decoder.decodeStruct(ObjectUnion);
    val.fInt8 =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SmallObjStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallObjStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(ObjectUnion, val.objUnion);
    encoder.encodeStruct(codec.Int8, val.fInt8);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TryNonNullStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TryNonNullStruct.prototype.initDefaults_ = function() {
    this.nullable = null;
    this.nonNullable = null;
  };
  TryNonNullStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TryNonNullStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TryNonNullStruct.nullable
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DummyStruct, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TryNonNullStruct.nonNullable
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, DummyStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TryNonNullStruct.encodedSize = codec.kStructHeaderSize + 16;

  TryNonNullStruct.decode = function(decoder) {
    var packed;
    var val = new TryNonNullStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nullable =
        decoder.decodeStructPointer(DummyStruct);
    val.nonNullable =
        decoder.decodeStructPointer(DummyStruct);
    return val;
  };

  TryNonNullStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TryNonNullStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DummyStruct, val.nullable);
    encoder.encodeStructPointer(DummyStruct, val.nonNullable);
  };
  function ImportedUnionStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImportedUnionStruct.prototype.initDefaults_ = function() {
    this.pointOrShape = null;
  };
  ImportedUnionStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImportedUnionStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImportedUnionStruct.pointOrShape
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, sample_import$.PointOrShape, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImportedUnionStruct.encodedSize = codec.kStructHeaderSize + 16;

  ImportedUnionStruct.decode = function(decoder) {
    var packed;
    var val = new ImportedUnionStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pointOrShape =
        decoder.decodeStruct(sample_import$.PointOrShape);
    return val;
  };

  ImportedUnionStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImportedUnionStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(sample_import$.PointOrShape, val.pointOrShape);
  };
  function SmallCache_SetIntValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallCache_SetIntValue_Params.prototype.initDefaults_ = function() {
    this.intValue = 0;
  };
  SmallCache_SetIntValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallCache_SetIntValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SmallCache_SetIntValue_Params.encodedSize = codec.kStructHeaderSize + 8;

  SmallCache_SetIntValue_Params.decode = function(decoder) {
    var packed;
    var val = new SmallCache_SetIntValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.intValue =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  SmallCache_SetIntValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallCache_SetIntValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.intValue);
  };
  function SmallCache_GetIntValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallCache_GetIntValue_Params.prototype.initDefaults_ = function() {
  };
  SmallCache_GetIntValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallCache_GetIntValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmallCache_GetIntValue_Params.encodedSize = codec.kStructHeaderSize + 0;

  SmallCache_GetIntValue_Params.decode = function(decoder) {
    var packed;
    var val = new SmallCache_GetIntValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SmallCache_GetIntValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallCache_GetIntValue_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SmallCache_GetIntValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmallCache_GetIntValue_ResponseParams.prototype.initDefaults_ = function() {
    this.intValue = 0;
  };
  SmallCache_GetIntValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmallCache_GetIntValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SmallCache_GetIntValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SmallCache_GetIntValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SmallCache_GetIntValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.intValue =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  SmallCache_GetIntValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmallCache_GetIntValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.intValue);
  };
  function UnionInterface_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UnionInterface_Echo_Params.prototype.initDefaults_ = function() {
    this.inVal = null;
  };
  UnionInterface_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UnionInterface_Echo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UnionInterface_Echo_Params.inVal
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PodUnion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UnionInterface_Echo_Params.encodedSize = codec.kStructHeaderSize + 16;

  UnionInterface_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new UnionInterface_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.inVal =
        decoder.decodeStruct(PodUnion);
    return val;
  };

  UnionInterface_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UnionInterface_Echo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PodUnion, val.inVal);
  };
  function UnionInterface_Echo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UnionInterface_Echo_ResponseParams.prototype.initDefaults_ = function() {
    this.outVal = null;
  };
  UnionInterface_Echo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UnionInterface_Echo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UnionInterface_Echo_ResponseParams.outVal
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PodUnion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UnionInterface_Echo_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  UnionInterface_Echo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new UnionInterface_Echo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.outVal =
        decoder.decodeStruct(PodUnion);
    return val;
  };

  UnionInterface_Echo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UnionInterface_Echo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PodUnion, val.outVal);
  };

  function PodUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PodUnion.Tags = {
    fInt8: 0,
    fInt8Other: 1,
    fUint8: 2,
    fInt16: 3,
    fUint16: 4,
    fInt32: 5,
    fUint32: 6,
    fInt64: 7,
    fUint64: 8,
    fFloat: 9,
    fDouble: 10,
    fBool: 11,
    fEnum: 12,
    fExtensibleEnum: 13,
  };

  PodUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PodUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fInt8",
        "fInt8Other",
        "fUint8",
        "fInt16",
        "fUint16",
        "fInt32",
        "fUint32",
        "fInt64",
        "fUint64",
        "fFloat",
        "fDouble",
        "fBool",
        "fEnum",
        "fExtensibleEnum",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PodUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PodUnion.prototype, "fInt8", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fInt8) {
        throw new ReferenceError(
            "PodUnion.fInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fInt8Other", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fInt8Other) {
        throw new ReferenceError(
            "PodUnion.fInt8Other is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fInt8Other;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fUint8", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fUint8) {
        throw new ReferenceError(
            "PodUnion.fUint8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fUint8;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fInt16", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fInt16) {
        throw new ReferenceError(
            "PodUnion.fInt16 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fInt16;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fUint16", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fUint16) {
        throw new ReferenceError(
            "PodUnion.fUint16 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fUint16;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fInt32", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fInt32) {
        throw new ReferenceError(
            "PodUnion.fInt32 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fInt32;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fUint32", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fUint32) {
        throw new ReferenceError(
            "PodUnion.fUint32 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fUint32;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fInt64", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fInt64) {
        throw new ReferenceError(
            "PodUnion.fInt64 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fInt64;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fUint64", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fUint64) {
        throw new ReferenceError(
            "PodUnion.fUint64 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fUint64;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fFloat", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fFloat) {
        throw new ReferenceError(
            "PodUnion.fFloat is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fFloat;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fDouble", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fDouble) {
        throw new ReferenceError(
            "PodUnion.fDouble is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fDouble;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fBool", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fBool) {
        throw new ReferenceError(
            "PodUnion.fBool is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fBool;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fEnum", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fEnum) {
        throw new ReferenceError(
            "PodUnion.fEnum is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fEnum;
      this.$data = value;
    }
  });
  Object.defineProperty(PodUnion.prototype, "fExtensibleEnum", {
    get: function() {
      if (this.$tag != PodUnion.Tags.fExtensibleEnum) {
        throw new ReferenceError(
            "PodUnion.fExtensibleEnum is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PodUnion.Tags.fExtensibleEnum;
      this.$data = value;
    }
  });


    PodUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PodUnion.Tags.fInt8:
          encoder.encodeStruct(codec.Int8, val.fInt8);
          break;
        case PodUnion.Tags.fInt8Other:
          encoder.encodeStruct(codec.Int8, val.fInt8Other);
          break;
        case PodUnion.Tags.fUint8:
          encoder.encodeStruct(codec.Uint8, val.fUint8);
          break;
        case PodUnion.Tags.fInt16:
          encoder.encodeStruct(codec.Int16, val.fInt16);
          break;
        case PodUnion.Tags.fUint16:
          encoder.encodeStruct(codec.Uint16, val.fUint16);
          break;
        case PodUnion.Tags.fInt32:
          encoder.encodeStruct(codec.Int32, val.fInt32);
          break;
        case PodUnion.Tags.fUint32:
          encoder.encodeStruct(codec.Uint32, val.fUint32);
          break;
        case PodUnion.Tags.fInt64:
          encoder.encodeStruct(codec.Int64, val.fInt64);
          break;
        case PodUnion.Tags.fUint64:
          encoder.encodeStruct(codec.Uint64, val.fUint64);
          break;
        case PodUnion.Tags.fFloat:
          encoder.encodeStruct(codec.Float, val.fFloat);
          break;
        case PodUnion.Tags.fDouble:
          encoder.encodeStruct(codec.Double, val.fDouble);
          break;
        case PodUnion.Tags.fBool:
          encoder.writeUint8(val.fBool ? 1 : 0);
          break;
        case PodUnion.Tags.fEnum:
          encoder.encodeStruct(codec.Int32, val.fEnum);
          break;
        case PodUnion.Tags.fExtensibleEnum:
          encoder.encodeStruct(codec.Int32, val.fExtensibleEnum);
          break;
      }
      encoder.align();
    };


    PodUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PodUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case PodUnion.Tags.fInt8:
          result.fInt8 = decoder.decodeStruct(codec.Int8);
          break;
        case PodUnion.Tags.fInt8Other:
          result.fInt8Other = decoder.decodeStruct(codec.Int8);
          break;
        case PodUnion.Tags.fUint8:
          result.fUint8 = decoder.decodeStruct(codec.Uint8);
          break;
        case PodUnion.Tags.fInt16:
          result.fInt16 = decoder.decodeStruct(codec.Int16);
          break;
        case PodUnion.Tags.fUint16:
          result.fUint16 = decoder.decodeStruct(codec.Uint16);
          break;
        case PodUnion.Tags.fInt32:
          result.fInt32 = decoder.decodeStruct(codec.Int32);
          break;
        case PodUnion.Tags.fUint32:
          result.fUint32 = decoder.decodeStruct(codec.Uint32);
          break;
        case PodUnion.Tags.fInt64:
          result.fInt64 = decoder.decodeStruct(codec.Int64);
          break;
        case PodUnion.Tags.fUint64:
          result.fUint64 = decoder.decodeStruct(codec.Uint64);
          break;
        case PodUnion.Tags.fFloat:
          result.fFloat = decoder.decodeStruct(codec.Float);
          break;
        case PodUnion.Tags.fDouble:
          result.fDouble = decoder.decodeStruct(codec.Double);
          break;
        case PodUnion.Tags.fBool:
          result.fBool = decoder.readUint8() ? true : false;
          break;
        case PodUnion.Tags.fEnum:
          result.fEnum = decoder.decodeStruct(new codec.Enum(AnEnum));
          break;
        case PodUnion.Tags.fExtensibleEnum:
          result.fExtensibleEnum = decoder.decodeStruct(new codec.Enum(AnExtensibleEnum));
          break;
      }
      decoder.align();

      return result;
    };


    PodUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PodUnion.Tags.fInt8:
          

          break;
        case PodUnion.Tags.fInt8Other:
          

          break;
        case PodUnion.Tags.fUint8:
          

          break;
        case PodUnion.Tags.fInt16:
          

          break;
        case PodUnion.Tags.fUint16:
          

          break;
        case PodUnion.Tags.fInt32:
          

          break;
        case PodUnion.Tags.fUint32:
          

          break;
        case PodUnion.Tags.fInt64:
          

          break;
        case PodUnion.Tags.fUint64:
          

          break;
        case PodUnion.Tags.fFloat:
          

          break;
        case PodUnion.Tags.fDouble:
          

          break;
        case PodUnion.Tags.fBool:
          

          break;
        case PodUnion.Tags.fEnum:
          

    // validate PodUnion.fEnum
    err = messageValidator.validateEnum(data_offset, AnEnum);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PodUnion.Tags.fExtensibleEnum:
          

    // validate PodUnion.fExtensibleEnum
    err = messageValidator.validateEnum(data_offset, AnExtensibleEnum);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PodUnion.encodedSize = 16;

  function ObjectUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ObjectUnion.Tags = {
    fInt8: 0,
    fString: 1,
    fDummy: 2,
    fNullable: 3,
    fArrayInt8: 4,
    fMapInt8: 5,
    fPodUnion: 6,
    fSmallStructs: 7,
  };

  ObjectUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ObjectUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fInt8",
        "fString",
        "fDummy",
        "fNullable",
        "fArrayInt8",
        "fMapInt8",
        "fPodUnion",
        "fSmallStructs",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ObjectUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ObjectUnion.prototype, "fInt8", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fInt8) {
        throw new ReferenceError(
            "ObjectUnion.fInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fString", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fString) {
        throw new ReferenceError(
            "ObjectUnion.fString is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fString;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fDummy", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fDummy) {
        throw new ReferenceError(
            "ObjectUnion.fDummy is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fDummy;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fNullable", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fNullable) {
        throw new ReferenceError(
            "ObjectUnion.fNullable is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fNullable;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fArrayInt8", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fArrayInt8) {
        throw new ReferenceError(
            "ObjectUnion.fArrayInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fArrayInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fMapInt8", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fMapInt8) {
        throw new ReferenceError(
            "ObjectUnion.fMapInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fMapInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fPodUnion", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fPodUnion) {
        throw new ReferenceError(
            "ObjectUnion.fPodUnion is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fPodUnion;
      this.$data = value;
    }
  });
  Object.defineProperty(ObjectUnion.prototype, "fSmallStructs", {
    get: function() {
      if (this.$tag != ObjectUnion.Tags.fSmallStructs) {
        throw new ReferenceError(
            "ObjectUnion.fSmallStructs is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ObjectUnion.Tags.fSmallStructs;
      this.$data = value;
    }
  });


    ObjectUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ObjectUnion.Tags.fInt8:
          encoder.encodeStruct(codec.Int8, val.fInt8);
          break;
        case ObjectUnion.Tags.fString:
          encoder.encodeStruct(codec.String, val.fString);
          break;
        case ObjectUnion.Tags.fDummy:
          encoder.encodeStructPointer(DummyStruct, val.fDummy);
          break;
        case ObjectUnion.Tags.fNullable:
          encoder.encodeStructPointer(DummyStruct, val.fNullable);
          break;
        case ObjectUnion.Tags.fArrayInt8:
          encoder.encodeArrayPointer(codec.Int8, val.fArrayInt8);
          break;
        case ObjectUnion.Tags.fMapInt8:
          encoder.encodeMapPointer(codec.String, codec.Int8, val.fMapInt8);
          break;
        case ObjectUnion.Tags.fPodUnion:
          encoder.encodeStructPointer(PodUnion, val.fPodUnion);
          break;
        case ObjectUnion.Tags.fSmallStructs:
          encoder.encodeArrayPointer(new codec.PointerTo(SmallStruct), val.fSmallStructs);
          break;
      }
      encoder.align();
    };


    ObjectUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ObjectUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case ObjectUnion.Tags.fInt8:
          result.fInt8 = decoder.decodeStruct(codec.Int8);
          break;
        case ObjectUnion.Tags.fString:
          result.fString = decoder.decodeStruct(codec.String);
          break;
        case ObjectUnion.Tags.fDummy:
          result.fDummy = decoder.decodeStructPointer(DummyStruct);
          break;
        case ObjectUnion.Tags.fNullable:
          result.fNullable = decoder.decodeStructPointer(DummyStruct);
          break;
        case ObjectUnion.Tags.fArrayInt8:
          result.fArrayInt8 = decoder.decodeArrayPointer(codec.Int8);
          break;
        case ObjectUnion.Tags.fMapInt8:
          result.fMapInt8 = decoder.decodeMapPointer(codec.String, codec.Int8);
          break;
        case ObjectUnion.Tags.fPodUnion:
          result.fPodUnion = decoder.decodeStructPointer(PodUnion);
          break;
        case ObjectUnion.Tags.fSmallStructs:
          result.fSmallStructs = decoder.decodeArrayPointer(new codec.PointerTo(SmallStruct));
          break;
      }
      decoder.align();

      return result;
    };


    ObjectUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ObjectUnion.Tags.fInt8:
          

          break;
        case ObjectUnion.Tags.fString:
          

    // validate ObjectUnion.fString
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fDummy:
          

    // validate ObjectUnion.fDummy
    err = messageValidator.validateStructPointer(data_offset, DummyStruct, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fNullable:
          

    // validate ObjectUnion.fNullable
    err = messageValidator.validateStructPointer(data_offset, DummyStruct, true);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fArrayInt8:
          

    // validate ObjectUnion.fArrayInt8
    err = messageValidator.validateArrayPointer(data_offset, 1, codec.Int8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fMapInt8:
          

    // validate ObjectUnion.fMapInt8
    err = messageValidator.validateMapPointer(data_offset, false, codec.String, codec.Int8, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fPodUnion:
          
    // validate ObjectUnion.fPodUnion
    err = messageValidator.validateNestedUnion(data_offset, PodUnion, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ObjectUnion.Tags.fSmallStructs:
          

    // validate ObjectUnion.fSmallStructs
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.PointerTo(SmallStruct), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ObjectUnion.encodedSize = 16;

  function HandleUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  HandleUnion.Tags = {
    fHandle: 0,
    fMessagePipe: 1,
    fDataPipeConsumer: 2,
    fDataPipeProducer: 3,
    fSharedBuffer: 4,
    fPlatform: 5,
    fSmallCache: 6,
    fSmallCacheReceiver: 7,
  };

  HandleUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  HandleUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fHandle",
        "fMessagePipe",
        "fDataPipeConsumer",
        "fDataPipeProducer",
        "fSharedBuffer",
        "fPlatform",
        "fSmallCache",
        "fSmallCacheReceiver",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a HandleUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(HandleUnion.prototype, "fHandle", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fHandle) {
        throw new ReferenceError(
            "HandleUnion.fHandle is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fHandle;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fMessagePipe", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fMessagePipe) {
        throw new ReferenceError(
            "HandleUnion.fMessagePipe is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fMessagePipe;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fDataPipeConsumer", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fDataPipeConsumer) {
        throw new ReferenceError(
            "HandleUnion.fDataPipeConsumer is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fDataPipeConsumer;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fDataPipeProducer", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fDataPipeProducer) {
        throw new ReferenceError(
            "HandleUnion.fDataPipeProducer is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fDataPipeProducer;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fSharedBuffer", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fSharedBuffer) {
        throw new ReferenceError(
            "HandleUnion.fSharedBuffer is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fSharedBuffer;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fPlatform", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fPlatform) {
        throw new ReferenceError(
            "HandleUnion.fPlatform is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fPlatform;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fSmallCache", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fSmallCache) {
        throw new ReferenceError(
            "HandleUnion.fSmallCache is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fSmallCache;
      this.$data = value;
    }
  });
  Object.defineProperty(HandleUnion.prototype, "fSmallCacheReceiver", {
    get: function() {
      if (this.$tag != HandleUnion.Tags.fSmallCacheReceiver) {
        throw new ReferenceError(
            "HandleUnion.fSmallCacheReceiver is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = HandleUnion.Tags.fSmallCacheReceiver;
      this.$data = value;
    }
  });


    HandleUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case HandleUnion.Tags.fHandle:
          encoder.encodeStruct(codec.Handle, val.fHandle);
          break;
        case HandleUnion.Tags.fMessagePipe:
          encoder.encodeStruct(codec.Handle, val.fMessagePipe);
          break;
        case HandleUnion.Tags.fDataPipeConsumer:
          encoder.encodeStruct(codec.Handle, val.fDataPipeConsumer);
          break;
        case HandleUnion.Tags.fDataPipeProducer:
          encoder.encodeStruct(codec.Handle, val.fDataPipeProducer);
          break;
        case HandleUnion.Tags.fSharedBuffer:
          encoder.encodeStruct(codec.Handle, val.fSharedBuffer);
          break;
        case HandleUnion.Tags.fPlatform:
          encoder.encodeStruct(codec.Handle, val.fPlatform);
          break;
        case HandleUnion.Tags.fSmallCache:
          encoder.encodeStruct(new codec.Interface(SmallCachePtr), val.fSmallCache);
          break;
        case HandleUnion.Tags.fSmallCacheReceiver:
          encoder.encodeStruct(codec.InterfaceRequest, val.fSmallCacheReceiver);
          break;
      }
      encoder.align();
    };


    HandleUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new HandleUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case HandleUnion.Tags.fHandle:
          result.fHandle = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fMessagePipe:
          result.fMessagePipe = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fDataPipeConsumer:
          result.fDataPipeConsumer = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fDataPipeProducer:
          result.fDataPipeProducer = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fSharedBuffer:
          result.fSharedBuffer = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fPlatform:
          result.fPlatform = decoder.decodeStruct(codec.Handle);
          break;
        case HandleUnion.Tags.fSmallCache:
          result.fSmallCache = decoder.decodeStruct(new codec.Interface(SmallCachePtr));
          break;
        case HandleUnion.Tags.fSmallCacheReceiver:
          result.fSmallCacheReceiver = decoder.decodeStruct(codec.InterfaceRequest);
          break;
      }
      decoder.align();

      return result;
    };


    HandleUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case HandleUnion.Tags.fHandle:
          

    // validate HandleUnion.fHandle
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fMessagePipe:
          

    // validate HandleUnion.fMessagePipe
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fDataPipeConsumer:
          

    // validate HandleUnion.fDataPipeConsumer
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fDataPipeProducer:
          

    // validate HandleUnion.fDataPipeProducer
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fSharedBuffer:
          

    // validate HandleUnion.fSharedBuffer
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fPlatform:
          

    // validate HandleUnion.fPlatform
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fSmallCache:
          

    // validate HandleUnion.fSmallCache
    err = messageValidator.validateInterface(data_offset, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case HandleUnion.Tags.fSmallCacheReceiver:
          

    // validate HandleUnion.fSmallCacheReceiver
    err = messageValidator.validateInterfaceRequest(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  HandleUnion.encodedSize = 16;

  function OldUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  OldUnion.Tags = {
    fInt8: 0,
  };

  OldUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  OldUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fInt8",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a OldUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(OldUnion.prototype, "fInt8", {
    get: function() {
      if (this.$tag != OldUnion.Tags.fInt8) {
        throw new ReferenceError(
            "OldUnion.fInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = OldUnion.Tags.fInt8;
      this.$data = value;
    }
  });


    OldUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case OldUnion.Tags.fInt8:
          encoder.encodeStruct(codec.Int8, val.fInt8);
          break;
      }
      encoder.align();
    };


    OldUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new OldUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case OldUnion.Tags.fInt8:
          result.fInt8 = decoder.decodeStruct(codec.Int8);
          break;
      }
      decoder.align();

      return result;
    };


    OldUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case OldUnion.Tags.fInt8:
          

          break;
      }

      return validator.validationError.NONE;
    };

  OldUnion.encodedSize = 16;

  function NewUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  NewUnion.Tags = {
    fInt8: 0,
    fInt16: 1,
  };

  NewUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  NewUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fInt8",
        "fInt16",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a NewUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(NewUnion.prototype, "fInt8", {
    get: function() {
      if (this.$tag != NewUnion.Tags.fInt8) {
        throw new ReferenceError(
            "NewUnion.fInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = NewUnion.Tags.fInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(NewUnion.prototype, "fInt16", {
    get: function() {
      if (this.$tag != NewUnion.Tags.fInt16) {
        throw new ReferenceError(
            "NewUnion.fInt16 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = NewUnion.Tags.fInt16;
      this.$data = value;
    }
  });


    NewUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case NewUnion.Tags.fInt8:
          encoder.encodeStruct(codec.Int8, val.fInt8);
          break;
        case NewUnion.Tags.fInt16:
          encoder.encodeStruct(codec.Int16, val.fInt16);
          break;
      }
      encoder.align();
    };


    NewUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new NewUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case NewUnion.Tags.fInt8:
          result.fInt8 = decoder.decodeStruct(codec.Int8);
          break;
        case NewUnion.Tags.fInt16:
          result.fInt16 = decoder.decodeStruct(codec.Int16);
          break;
      }
      decoder.align();

      return result;
    };


    NewUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case NewUnion.Tags.fInt8:
          

          break;
        case NewUnion.Tags.fInt16:
          

          break;
      }

      return validator.validationError.NONE;
    };

  NewUnion.encodedSize = 16;

  function ImportedUnionUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ImportedUnionUnion.Tags = {
    pointOrShape: 0,
  };

  ImportedUnionUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ImportedUnionUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "pointOrShape",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ImportedUnionUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ImportedUnionUnion.prototype, "pointOrShape", {
    get: function() {
      if (this.$tag != ImportedUnionUnion.Tags.pointOrShape) {
        throw new ReferenceError(
            "ImportedUnionUnion.pointOrShape is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ImportedUnionUnion.Tags.pointOrShape;
      this.$data = value;
    }
  });


    ImportedUnionUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ImportedUnionUnion.Tags.pointOrShape:
          encoder.encodeStructPointer(sample_import$.PointOrShape, val.pointOrShape);
          break;
      }
      encoder.align();
    };


    ImportedUnionUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ImportedUnionUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case ImportedUnionUnion.Tags.pointOrShape:
          result.pointOrShape = decoder.decodeStructPointer(sample_import$.PointOrShape);
          break;
      }
      decoder.align();

      return result;
    };


    ImportedUnionUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ImportedUnionUnion.Tags.pointOrShape:
          
    // validate ImportedUnionUnion.pointOrShape
    err = messageValidator.validateNestedUnion(data_offset, sample_import$.PointOrShape, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ImportedUnionUnion.encodedSize = 16;

  function UnionWithStringForFirstField(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  UnionWithStringForFirstField.Tags = {
    s: 0,
    i: 1,
  };

  UnionWithStringForFirstField.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  UnionWithStringForFirstField.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "s",
        "i",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a UnionWithStringForFirstField member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(UnionWithStringForFirstField.prototype, "s", {
    get: function() {
      if (this.$tag != UnionWithStringForFirstField.Tags.s) {
        throw new ReferenceError(
            "UnionWithStringForFirstField.s is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithStringForFirstField.Tags.s;
      this.$data = value;
    }
  });
  Object.defineProperty(UnionWithStringForFirstField.prototype, "i", {
    get: function() {
      if (this.$tag != UnionWithStringForFirstField.Tags.i) {
        throw new ReferenceError(
            "UnionWithStringForFirstField.i is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithStringForFirstField.Tags.i;
      this.$data = value;
    }
  });


    UnionWithStringForFirstField.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case UnionWithStringForFirstField.Tags.s:
          encoder.encodeStruct(codec.String, val.s);
          break;
        case UnionWithStringForFirstField.Tags.i:
          encoder.encodeStruct(codec.Int32, val.i);
          break;
      }
      encoder.align();
    };


    UnionWithStringForFirstField.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new UnionWithStringForFirstField();
      var tag = decoder.readUint32();
      switch (tag) {
        case UnionWithStringForFirstField.Tags.s:
          result.s = decoder.decodeStruct(codec.String);
          break;
        case UnionWithStringForFirstField.Tags.i:
          result.i = decoder.decodeStruct(codec.Int32);
          break;
      }
      decoder.align();

      return result;
    };


    UnionWithStringForFirstField.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case UnionWithStringForFirstField.Tags.s:
          

    // validate UnionWithStringForFirstField.s
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case UnionWithStringForFirstField.Tags.i:
          

          break;
      }

      return validator.validationError.NONE;
    };

  UnionWithStringForFirstField.encodedSize = 16;
  var kSmallCache_SetIntValue_Name = 0;
  var kSmallCache_GetIntValue_Name = 1;

  function SmallCachePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SmallCache,
                                                   handleOrPtrInfo);
  }

  function SmallCacheAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SmallCache, associatedInterfacePtrInfo);
  }

  SmallCacheAssociatedPtr.prototype =
      Object.create(SmallCachePtr.prototype);
  SmallCacheAssociatedPtr.prototype.constructor =
      SmallCacheAssociatedPtr;

  function SmallCacheProxy(receiver) {
    this.receiver_ = receiver;
  }
  SmallCachePtr.prototype.setIntValue = function() {
    return SmallCacheProxy.prototype.setIntValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SmallCacheProxy.prototype.setIntValue = function(intValue) {
    var params_ = new SmallCache_SetIntValue_Params();
    params_.intValue = intValue;
    var builder = new codec.MessageV0Builder(
        kSmallCache_SetIntValue_Name,
        codec.align(SmallCache_SetIntValue_Params.encodedSize));
    builder.encodeStruct(SmallCache_SetIntValue_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SmallCachePtr.prototype.getIntValue = function() {
    return SmallCacheProxy.prototype.getIntValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SmallCacheProxy.prototype.getIntValue = function() {
    var params_ = new SmallCache_GetIntValue_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSmallCache_GetIntValue_Name,
          codec.align(SmallCache_GetIntValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SmallCache_GetIntValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SmallCache_GetIntValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SmallCacheStub(delegate) {
    this.delegate_ = delegate;
  }
  SmallCacheStub.prototype.setIntValue = function(intValue) {
    return this.delegate_ && this.delegate_.setIntValue && this.delegate_.setIntValue(intValue);
  }
  SmallCacheStub.prototype.getIntValue = function() {
    return this.delegate_ && this.delegate_.getIntValue && this.delegate_.getIntValue();
  }

  SmallCacheStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSmallCache_SetIntValue_Name:
      var params = reader.decodeStruct(SmallCache_SetIntValue_Params);
      this.setIntValue(params.intValue);
      return true;
    default:
      return false;
    }
  };

  SmallCacheStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSmallCache_GetIntValue_Name:
      var params = reader.decodeStruct(SmallCache_GetIntValue_Params);
      this.getIntValue().then(function(response) {
        var responseParams =
            new SmallCache_GetIntValue_ResponseParams();
        responseParams.intValue = response.intValue;
        var builder = new codec.MessageV1Builder(
            kSmallCache_GetIntValue_Name,
            codec.align(SmallCache_GetIntValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SmallCache_GetIntValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSmallCacheRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSmallCache_SetIntValue_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SmallCache_SetIntValue_Params;
      break;
      case kSmallCache_GetIntValue_Name:
        if (message.expectsResponse())
          paramsClass = SmallCache_GetIntValue_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSmallCacheResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSmallCache_GetIntValue_Name:
        if (message.isResponse())
          paramsClass = SmallCache_GetIntValue_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SmallCache = {
    name: 'mojo.test.SmallCache',
    kVersion: 0,
    ptrClass: SmallCachePtr,
    proxyClass: SmallCacheProxy,
    stubClass: SmallCacheStub,
    validateRequest: validateSmallCacheRequest,
    validateResponse: validateSmallCacheResponse,
  };
  SmallCacheStub.prototype.validator = validateSmallCacheRequest;
  SmallCacheProxy.prototype.validator = validateSmallCacheResponse;
  var kUnionInterface_Echo_Name = 0;

  function UnionInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(UnionInterface,
                                                   handleOrPtrInfo);
  }

  function UnionInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        UnionInterface, associatedInterfacePtrInfo);
  }

  UnionInterfaceAssociatedPtr.prototype =
      Object.create(UnionInterfacePtr.prototype);
  UnionInterfaceAssociatedPtr.prototype.constructor =
      UnionInterfaceAssociatedPtr;

  function UnionInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  UnionInterfacePtr.prototype.echo = function() {
    return UnionInterfaceProxy.prototype.echo
        .apply(this.ptr.getProxy(), arguments);
  };

  UnionInterfaceProxy.prototype.echo = function(inVal) {
    var params_ = new UnionInterface_Echo_Params();
    params_.inVal = inVal;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUnionInterface_Echo_Name,
          codec.align(UnionInterface_Echo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(UnionInterface_Echo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(UnionInterface_Echo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function UnionInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  UnionInterfaceStub.prototype.echo = function(inVal) {
    return this.delegate_ && this.delegate_.echo && this.delegate_.echo(inVal);
  }

  UnionInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  UnionInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUnionInterface_Echo_Name:
      var params = reader.decodeStruct(UnionInterface_Echo_Params);
      this.echo(params.inVal).then(function(response) {
        var responseParams =
            new UnionInterface_Echo_ResponseParams();
        responseParams.outVal = response.outVal;
        var builder = new codec.MessageV1Builder(
            kUnionInterface_Echo_Name,
            codec.align(UnionInterface_Echo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(UnionInterface_Echo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateUnionInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUnionInterface_Echo_Name:
        if (message.expectsResponse())
          paramsClass = UnionInterface_Echo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUnionInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kUnionInterface_Echo_Name:
        if (message.isResponse())
          paramsClass = UnionInterface_Echo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var UnionInterface = {
    name: 'mojo.test.UnionInterface',
    kVersion: 0,
    ptrClass: UnionInterfacePtr,
    proxyClass: UnionInterfaceProxy,
    stubClass: UnionInterfaceStub,
    validateRequest: validateUnionInterfaceRequest,
    validateResponse: validateUnionInterfaceResponse,
  };
  UnionInterfaceStub.prototype.validator = validateUnionInterfaceRequest;
  UnionInterfaceProxy.prototype.validator = validateUnionInterfaceResponse;
  exports.AnEnum = AnEnum;
  exports.AnExtensibleEnum = AnExtensibleEnum;
  exports.WrapperStruct = WrapperStruct;
  exports.DummyStruct = DummyStruct;
  exports.SmallStruct = SmallStruct;
  exports.SmallStructNonNullableUnion = SmallStructNonNullableUnion;
  exports.SmallObjStruct = SmallObjStruct;
  exports.TryNonNullStruct = TryNonNullStruct;
  exports.ImportedUnionStruct = ImportedUnionStruct;
  exports.PodUnion = PodUnion;
  exports.ObjectUnion = ObjectUnion;
  exports.HandleUnion = HandleUnion;
  exports.OldUnion = OldUnion;
  exports.NewUnion = NewUnion;
  exports.ImportedUnionUnion = ImportedUnionUnion;
  exports.UnionWithStringForFirstField = UnionWithStringForFirstField;
  exports.SmallCache = SmallCache;
  exports.SmallCachePtr = SmallCachePtr;
  exports.SmallCacheAssociatedPtr = SmallCacheAssociatedPtr;
  exports.UnionInterface = UnionInterface;
  exports.UnionInterfacePtr = UnionInterfacePtr;
  exports.UnionInterfaceAssociatedPtr = UnionInterfaceAssociatedPtr;
})();