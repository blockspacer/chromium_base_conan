// mojo/public/interfaces/bindings/tests/test_data_view.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_DATA_VIEW_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_DATA_VIEW_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace data_view {
namespace internal {
class  TestInterface_Echo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestInterface_Echo_Params_Data>;

  TestInterface_Echo_Params_Data();
  ~TestInterface_Echo_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_Echo_Params_Data) == 16,
              "Bad sizeof(TestInterface_Echo_Params_Data)");
class  TestInterface_Echo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t out_value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestInterface_Echo_ResponseParams_Data>;

  TestInterface_Echo_ResponseParams_Data();
  ~TestInterface_Echo_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestInterface_Echo_ResponseParams_Data) == 16,
              "Bad sizeof(TestInterface_Echo_ResponseParams_Data)");

}  // namespace internal


class TestInterface_Echo_ParamsDataView {
 public:
  TestInterface_Echo_ParamsDataView() {}

  TestInterface_Echo_ParamsDataView(
      internal::TestInterface_Echo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t value() const {
    return data_->value;
  }
 private:
  internal::TestInterface_Echo_Params_Data* data_ = nullptr;
};



class TestInterface_Echo_ResponseParamsDataView {
 public:
  TestInterface_Echo_ResponseParamsDataView() {}

  TestInterface_Echo_ResponseParamsDataView(
      internal::TestInterface_Echo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t out_value() const {
    return data_->out_value;
  }
 private:
  internal::TestInterface_Echo_ResponseParams_Data* data_ = nullptr;
};





}  // namespace data_view
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_DATA_VIEW_MOJOM_PARAMS_DATA_H_