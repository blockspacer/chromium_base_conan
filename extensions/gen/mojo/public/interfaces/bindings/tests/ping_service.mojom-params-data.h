// mojo/public/interfaces/bindings/tests/ping_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace internal {
class  PingService_Ping_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PingService_Ping_Params_Data>;

  PingService_Ping_Params_Data();
  ~PingService_Ping_Params_Data() = delete;
};
static_assert(sizeof(PingService_Ping_Params_Data) == 8,
              "Bad sizeof(PingService_Ping_Params_Data)");
class  PingService_Ping_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PingService_Ping_ResponseParams_Data>;

  PingService_Ping_ResponseParams_Data();
  ~PingService_Ping_ResponseParams_Data() = delete;
};
static_assert(sizeof(PingService_Ping_ResponseParams_Data) == 8,
              "Bad sizeof(PingService_Ping_ResponseParams_Data)");
class  EchoService_Echo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> test_data;

 private:
  friend class mojo::internal::MessageFragment<EchoService_Echo_Params_Data>;

  EchoService_Echo_Params_Data();
  ~EchoService_Echo_Params_Data() = delete;
};
static_assert(sizeof(EchoService_Echo_Params_Data) == 16,
              "Bad sizeof(EchoService_Echo_Params_Data)");
class  EchoService_Echo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> echo_data;

 private:
  friend class mojo::internal::MessageFragment<EchoService_Echo_ResponseParams_Data>;

  EchoService_Echo_ResponseParams_Data();
  ~EchoService_Echo_ResponseParams_Data() = delete;
};
static_assert(sizeof(EchoService_Echo_ResponseParams_Data) == 16,
              "Bad sizeof(EchoService_Echo_ResponseParams_Data)");
class  HandleTrampoline_BounceOne_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data one;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HandleTrampoline_BounceOne_Params_Data>;

  HandleTrampoline_BounceOne_Params_Data();
  ~HandleTrampoline_BounceOne_Params_Data() = delete;
};
static_assert(sizeof(HandleTrampoline_BounceOne_Params_Data) == 16,
              "Bad sizeof(HandleTrampoline_BounceOne_Params_Data)");
class  HandleTrampoline_BounceOne_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data one;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HandleTrampoline_BounceOne_ResponseParams_Data>;

  HandleTrampoline_BounceOne_ResponseParams_Data();
  ~HandleTrampoline_BounceOne_ResponseParams_Data() = delete;
};
static_assert(sizeof(HandleTrampoline_BounceOne_ResponseParams_Data) == 16,
              "Bad sizeof(HandleTrampoline_BounceOne_ResponseParams_Data)");
class  HandleTrampoline_BounceTwo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data one;
  mojo::internal::Handle_Data two;

 private:
  friend class mojo::internal::MessageFragment<HandleTrampoline_BounceTwo_Params_Data>;

  HandleTrampoline_BounceTwo_Params_Data();
  ~HandleTrampoline_BounceTwo_Params_Data() = delete;
};
static_assert(sizeof(HandleTrampoline_BounceTwo_Params_Data) == 16,
              "Bad sizeof(HandleTrampoline_BounceTwo_Params_Data)");
class  HandleTrampoline_BounceTwo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data one;
  mojo::internal::Handle_Data two;

 private:
  friend class mojo::internal::MessageFragment<HandleTrampoline_BounceTwo_ResponseParams_Data>;

  HandleTrampoline_BounceTwo_ResponseParams_Data();
  ~HandleTrampoline_BounceTwo_ResponseParams_Data() = delete;
};
static_assert(sizeof(HandleTrampoline_BounceTwo_ResponseParams_Data) == 16,
              "Bad sizeof(HandleTrampoline_BounceTwo_ResponseParams_Data)");

}  // namespace internal


class PingService_Ping_ParamsDataView {
 public:
  PingService_Ping_ParamsDataView() {}

  PingService_Ping_ParamsDataView(
      internal::PingService_Ping_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PingService_Ping_Params_Data* data_ = nullptr;
};



class PingService_Ping_ResponseParamsDataView {
 public:
  PingService_Ping_ResponseParamsDataView() {}

  PingService_Ping_ResponseParamsDataView(
      internal::PingService_Ping_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PingService_Ping_ResponseParams_Data* data_ = nullptr;
};



class EchoService_Echo_ParamsDataView {
 public:
  EchoService_Echo_ParamsDataView() {}

  EchoService_Echo_ParamsDataView(
      internal::EchoService_Echo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTestDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTestData(UserType* output) {
    
    auto* pointer = data_->test_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::EchoService_Echo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EchoService_Echo_ResponseParamsDataView {
 public:
  EchoService_Echo_ResponseParamsDataView() {}

  EchoService_Echo_ResponseParamsDataView(
      internal::EchoService_Echo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEchoDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEchoData(UserType* output) {
    
    auto* pointer = data_->echo_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::EchoService_Echo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandleTrampoline_BounceOne_ParamsDataView {
 public:
  HandleTrampoline_BounceOne_ParamsDataView() {}

  HandleTrampoline_BounceOne_ParamsDataView(
      internal::HandleTrampoline_BounceOne_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedMessagePipeHandle TakeOne() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->one, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HandleTrampoline_BounceOne_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandleTrampoline_BounceOne_ResponseParamsDataView {
 public:
  HandleTrampoline_BounceOne_ResponseParamsDataView() {}

  HandleTrampoline_BounceOne_ResponseParamsDataView(
      internal::HandleTrampoline_BounceOne_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedMessagePipeHandle TakeOne() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->one, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HandleTrampoline_BounceOne_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandleTrampoline_BounceTwo_ParamsDataView {
 public:
  HandleTrampoline_BounceTwo_ParamsDataView() {}

  HandleTrampoline_BounceTwo_ParamsDataView(
      internal::HandleTrampoline_BounceTwo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedMessagePipeHandle TakeOne() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->one, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedMessagePipeHandle TakeTwo() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->two, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HandleTrampoline_BounceTwo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandleTrampoline_BounceTwo_ResponseParamsDataView {
 public:
  HandleTrampoline_BounceTwo_ResponseParamsDataView() {}

  HandleTrampoline_BounceTwo_ResponseParamsDataView(
      internal::HandleTrampoline_BounceTwo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedMessagePipeHandle TakeOne() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->one, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedMessagePipeHandle TakeTwo() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->two, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HandleTrampoline_BounceTwo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};






inline void EchoService_Echo_ParamsDataView::GetTestDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->test_data.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void EchoService_Echo_ResponseParamsDataView::GetEchoDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->echo_data.Get();
  *output = mojo::StringDataView(pointer, message_);
}









}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_PING_SERVICE_MOJOM_PARAMS_DATA_H_