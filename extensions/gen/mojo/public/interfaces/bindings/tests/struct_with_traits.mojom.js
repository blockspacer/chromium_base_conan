// mojo/public/interfaces/bindings/tests/struct_with_traits.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/struct_with_traits.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test');


  var EnumWithTraits = {};
  EnumWithTraits.VALUE_0 = 0;
  EnumWithTraits.VALUE_1 = 1;
  EnumWithTraits.MIN_VALUE = 0;
  EnumWithTraits.MAX_VALUE = 1;

  EnumWithTraits.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  EnumWithTraits.toKnownEnumValue = function(value) {
    return value;
  };

  EnumWithTraits.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function NestedStructWithTraits(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NestedStructWithTraits.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  NestedStructWithTraits.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NestedStructWithTraits.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  NestedStructWithTraits.encodedSize = codec.kStructHeaderSize + 8;

  NestedStructWithTraits.decode = function(decoder) {
    var packed;
    var val = new NestedStructWithTraits();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  NestedStructWithTraits.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NestedStructWithTraits.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructWithTraits(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithTraits.prototype.initDefaults_ = function() {
    this.fEnum = 0;
    this.fBool = false;
    this.fUint32 = 0;
    this.fUint64 = 0;
    this.fString = null;
    this.fString2 = null;
    this.fStringArray = null;
    this.fStringSet = null;
    this.fStruct = null;
    this.fStructArray = null;
    this.fStructMap = null;
  };
  StructWithTraits.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithTraits.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fEnum
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithTraits);
    if (err !== validator.validationError.NONE)
        return err;





    // validate StructWithTraits.fString
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fString2
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fStringArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fStringSet
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, NestedStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fStructArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 64, 8, new codec.PointerTo(NestedStructWithTraits), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraits.fStructMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 72, false, codec.String, new codec.PointerTo(NestedStructWithTraits), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithTraits.encodedSize = codec.kStructHeaderSize + 80;

  StructWithTraits.decode = function(decoder) {
    var packed;
    var val = new StructWithTraits();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fEnum =
        decoder.decodeStruct(new codec.Enum(EnumWithTraits));
    packed = decoder.readUint8();
    val.fBool = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.fUint32 =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.fUint64 =
        decoder.decodeStruct(codec.Uint64);
    val.fString =
        decoder.decodeStruct(codec.String);
    val.fString2 =
        decoder.decodeStruct(codec.String);
    val.fStringArray =
        decoder.decodeArrayPointer(codec.String);
    val.fStringSet =
        decoder.decodeArrayPointer(codec.String);
    val.fStruct =
        decoder.decodeStructPointer(NestedStructWithTraits);
    val.fStructArray =
        decoder.decodeArrayPointer(new codec.PointerTo(NestedStructWithTraits));
    val.fStructMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(NestedStructWithTraits));
    return val;
  };

  StructWithTraits.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithTraits.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.fEnum);
    packed = 0;
    packed |= (val.fBool & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.fUint32);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.fUint64);
    encoder.encodeStruct(codec.String, val.fString);
    encoder.encodeStruct(codec.String, val.fString2);
    encoder.encodeArrayPointer(codec.String, val.fStringArray);
    encoder.encodeArrayPointer(codec.String, val.fStringSet);
    encoder.encodeStructPointer(NestedStructWithTraits, val.fStruct);
    encoder.encodeArrayPointer(new codec.PointerTo(NestedStructWithTraits), val.fStructArray);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(NestedStructWithTraits), val.fStructMap);
  };
  function StructWithUnreachableTraits(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithUnreachableTraits.prototype.initDefaults_ = function() {
    this.ignoreMe = false;
  };
  StructWithUnreachableTraits.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithUnreachableTraits.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StructWithUnreachableTraits.encodedSize = codec.kStructHeaderSize + 8;

  StructWithUnreachableTraits.decode = function(decoder) {
    var packed;
    var val = new StructWithUnreachableTraits();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.ignoreMe = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithUnreachableTraits.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithUnreachableTraits.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.ignoreMe & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructWithTraitsContainer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithTraitsContainer.prototype.initDefaults_ = function() {
    this.fStruct = null;
  };
  StructWithTraitsContainer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithTraitsContainer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithTraitsContainer.fStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithTraitsContainer.encodedSize = codec.kStructHeaderSize + 8;

  StructWithTraitsContainer.decode = function(decoder) {
    var packed;
    var val = new StructWithTraitsContainer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fStruct =
        decoder.decodeStructPointer(StructWithTraits);
    return val;
  };

  StructWithTraitsContainer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithTraitsContainer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraits, val.fStruct);
  };
  function TrivialStructWithTraits(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrivialStructWithTraits.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TrivialStructWithTraits.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrivialStructWithTraits.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TrivialStructWithTraits.encodedSize = codec.kStructHeaderSize + 8;

  TrivialStructWithTraits.decode = function(decoder) {
    var packed;
    var val = new TrivialStructWithTraits();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TrivialStructWithTraits.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrivialStructWithTraits.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MoveOnlyStructWithTraits(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MoveOnlyStructWithTraits.prototype.initDefaults_ = function() {
    this.fHandle = null;
  };
  MoveOnlyStructWithTraits.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MoveOnlyStructWithTraits.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MoveOnlyStructWithTraits.fHandle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MoveOnlyStructWithTraits.encodedSize = codec.kStructHeaderSize + 8;

  MoveOnlyStructWithTraits.decode = function(decoder) {
    var packed;
    var val = new MoveOnlyStructWithTraits();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fHandle =
        decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MoveOnlyStructWithTraits.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MoveOnlyStructWithTraits.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.fHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MoveOnlyStructWithTraitsContainer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MoveOnlyStructWithTraitsContainer.prototype.initDefaults_ = function() {
    this.fStruct = null;
  };
  MoveOnlyStructWithTraitsContainer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MoveOnlyStructWithTraitsContainer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MoveOnlyStructWithTraitsContainer.fStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MoveOnlyStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MoveOnlyStructWithTraitsContainer.encodedSize = codec.kStructHeaderSize + 8;

  MoveOnlyStructWithTraitsContainer.decode = function(decoder) {
    var packed;
    var val = new MoveOnlyStructWithTraitsContainer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fStruct =
        decoder.decodeStructPointer(MoveOnlyStructWithTraits);
    return val;
  };

  MoveOnlyStructWithTraitsContainer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MoveOnlyStructWithTraitsContainer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MoveOnlyStructWithTraits, val.fStruct);
  };
  function StructWithTraitsForUniquePtr(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithTraitsForUniquePtr.prototype.initDefaults_ = function() {
    this.fInt32 = 0;
  };
  StructWithTraitsForUniquePtr.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithTraitsForUniquePtr.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StructWithTraitsForUniquePtr.encodedSize = codec.kStructHeaderSize + 8;

  StructWithTraitsForUniquePtr.decode = function(decoder) {
    var packed;
    var val = new StructWithTraitsForUniquePtr();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fInt32 =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithTraitsForUniquePtr.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithTraitsForUniquePtr.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.fInt32);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function EnumWithTraitsContainer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EnumWithTraitsContainer.prototype.initDefaults_ = function() {
    this.fField = EnumWithTraits.VALUE_1;
  };
  EnumWithTraitsContainer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EnumWithTraitsContainer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EnumWithTraitsContainer.fField
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithTraits);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EnumWithTraitsContainer.encodedSize = codec.kStructHeaderSize + 8;

  EnumWithTraitsContainer.decode = function(decoder) {
    var packed;
    var val = new EnumWithTraitsContainer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fField =
        decoder.decodeStruct(new codec.Enum(EnumWithTraits));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  EnumWithTraitsContainer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EnumWithTraitsContainer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.fField);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructForceSerialize(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructForceSerialize.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  StructForceSerialize.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructForceSerialize.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StructForceSerialize.encodedSize = codec.kStructHeaderSize + 8;

  StructForceSerialize.decode = function(decoder) {
    var packed;
    var val = new StructForceSerialize();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructForceSerialize.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructForceSerialize.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructNestedForceSerialize(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructNestedForceSerialize.prototype.initDefaults_ = function() {
    this.force = null;
  };
  StructNestedForceSerialize.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructNestedForceSerialize.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructNestedForceSerialize.force
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructForceSerialize, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructNestedForceSerialize.encodedSize = codec.kStructHeaderSize + 8;

  StructNestedForceSerialize.decode = function(decoder) {
    var packed;
    var val = new StructNestedForceSerialize();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.force =
        decoder.decodeStructPointer(StructForceSerialize);
    return val;
  };

  StructNestedForceSerialize.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructNestedForceSerialize.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructForceSerialize, val.force);
  };
  function TraitsTestService_EchoStructWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoStructWithTraits_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoStructWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoStructWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoStructWithTraits_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoStructWithTraits_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoStructWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoStructWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(StructWithTraits);
    return val;
  };

  TraitsTestService_EchoStructWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoStructWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraits, val.s);
  };
  function TraitsTestService_EchoStructWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoStructWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoStructWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoStructWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoStructWithTraits_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoStructWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoStructWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoStructWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructWithTraits);
    return val;
  };

  TraitsTestService_EchoStructWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoStructWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraits, val.passed);
  };
  function TraitsTestService_EchoTrivialStructWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoTrivialStructWithTraits_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoTrivialStructWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoTrivialStructWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoTrivialStructWithTraits_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TrivialStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoTrivialStructWithTraits_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoTrivialStructWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoTrivialStructWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(TrivialStructWithTraits);
    return val;
  };

  TraitsTestService_EchoTrivialStructWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoTrivialStructWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TrivialStructWithTraits, val.s);
  };
  function TraitsTestService_EchoTrivialStructWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TrivialStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoTrivialStructWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(TrivialStructWithTraits);
    return val;
  };

  TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TrivialStructWithTraits, val.passed);
  };
  function TraitsTestService_EchoMoveOnlyStructWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMoveOnlyStructWithTraits_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MoveOnlyStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMoveOnlyStructWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(MoveOnlyStructWithTraits);
    return val;
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMoveOnlyStructWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MoveOnlyStructWithTraits, val.s);
  };
  function TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MoveOnlyStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(MoveOnlyStructWithTraits);
    return val;
  };

  TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MoveOnlyStructWithTraits, val.passed);
  };
  function TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MoveOnlyStructWithTraits, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(MoveOnlyStructWithTraits);
    return val;
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MoveOnlyStructWithTraits, val.s);
  };
  function TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MoveOnlyStructWithTraits, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(MoveOnlyStructWithTraits);
    return val;
  };

  TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MoveOnlyStructWithTraits, val.passed);
  };
  function TraitsTestService_EchoEnumWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoEnumWithTraits_Params.prototype.initDefaults_ = function() {
    this.e = 0;
  };
  TraitsTestService_EchoEnumWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoEnumWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoEnumWithTraits_Params.e
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithTraits);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoEnumWithTraits_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoEnumWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoEnumWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.e =
        decoder.decodeStruct(new codec.Enum(EnumWithTraits));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TraitsTestService_EchoEnumWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoEnumWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.e);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TraitsTestService_EchoEnumWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoEnumWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = 0;
  };
  TraitsTestService_EchoEnumWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoEnumWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoEnumWithTraits_ResponseParams.passed
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithTraits);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoEnumWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoEnumWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoEnumWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStruct(new codec.Enum(EnumWithTraits));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TraitsTestService_EchoEnumWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoEnumWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.passed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TraitsTestService_EchoStructWithTraitsForUniquePtr_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.prototype.initDefaults_ = function() {
    this.e = null;
  };
  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.e
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraitsForUniquePtr, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoStructWithTraitsForUniquePtr_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.e =
        decoder.decodeStructPointer(StructWithTraitsForUniquePtr);
    return val;
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraitsForUniquePtr, val.e);
  };
  function TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraitsForUniquePtr, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructWithTraitsForUniquePtr);
    return val;
  };

  TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraitsForUniquePtr, val.passed);
  };
  function TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.prototype.initDefaults_ = function() {
    this.e = null;
  };
  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.e
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraitsForUniquePtr, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.e =
        decoder.decodeStructPointer(StructWithTraitsForUniquePtr);
    return val;
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraitsForUniquePtr, val.e);
  };
  function TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithTraitsForUniquePtr, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructWithTraitsForUniquePtr);
    return val;
  };

  TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithTraitsForUniquePtr, val.passed);
  };
  function TraitsTestService_EchoUnionWithTraits_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoUnionWithTraits_Params.prototype.initDefaults_ = function() {
    this.u = null;
  };
  TraitsTestService_EchoUnionWithTraits_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoUnionWithTraits_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoUnionWithTraits_Params.u
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoUnionWithTraits_Params.encodedSize = codec.kStructHeaderSize + 16;

  TraitsTestService_EchoUnionWithTraits_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoUnionWithTraits_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.u =
        decoder.decodeStruct(UnionWithTraits);
    return val;
  };

  TraitsTestService_EchoUnionWithTraits_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoUnionWithTraits_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithTraits, val.u);
  };
  function TraitsTestService_EchoUnionWithTraits_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoUnionWithTraits_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TraitsTestService_EchoUnionWithTraits_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoUnionWithTraits_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoUnionWithTraits_ResponseParams.passed
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoUnionWithTraits_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TraitsTestService_EchoUnionWithTraits_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoUnionWithTraits_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStruct(UnionWithTraits);
    return val;
  };

  TraitsTestService_EchoUnionWithTraits_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoUnionWithTraits_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithTraits, val.passed);
  };
  function TestUnserializedStruct_PassUnserializedStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestUnserializedStruct_PassUnserializedStruct_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TestUnserializedStruct_PassUnserializedStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestUnserializedStruct_PassUnserializedStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestUnserializedStruct_PassUnserializedStruct_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithUnreachableTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestUnserializedStruct_PassUnserializedStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestUnserializedStruct_PassUnserializedStruct_Params.decode = function(decoder) {
    var packed;
    var val = new TestUnserializedStruct_PassUnserializedStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(StructWithUnreachableTraits);
    return val;
  };

  TestUnserializedStruct_PassUnserializedStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestUnserializedStruct_PassUnserializedStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithUnreachableTraits, val.s);
  };
  function TestUnserializedStruct_PassUnserializedStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestUnserializedStruct_PassUnserializedStruct_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithUnreachableTraits, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestUnserializedStruct_PassUnserializedStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructWithUnreachableTraits);
    return val;
  };

  TestUnserializedStruct_PassUnserializedStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestUnserializedStruct_PassUnserializedStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithUnreachableTraits, val.passed);
  };
  function ForceSerializeTester_SendForceSerializedStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ForceSerializeTester_SendForceSerializedStruct_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  ForceSerializeTester_SendForceSerializedStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ForceSerializeTester_SendForceSerializedStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ForceSerializeTester_SendForceSerializedStruct_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructForceSerialize, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ForceSerializeTester_SendForceSerializedStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  ForceSerializeTester_SendForceSerializedStruct_Params.decode = function(decoder) {
    var packed;
    var val = new ForceSerializeTester_SendForceSerializedStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(StructForceSerialize);
    return val;
  };

  ForceSerializeTester_SendForceSerializedStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ForceSerializeTester_SendForceSerializedStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructForceSerialize, val.s);
  };
  function ForceSerializeTester_SendForceSerializedStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ForceSerializeTester_SendForceSerializedStruct_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructForceSerialize, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ForceSerializeTester_SendForceSerializedStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructForceSerialize);
    return val;
  };

  ForceSerializeTester_SendForceSerializedStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ForceSerializeTester_SendForceSerializedStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructForceSerialize, val.passed);
  };
  function ForceSerializeTester_SendNestedForceSerializedStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ForceSerializeTester_SendNestedForceSerializedStruct_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  ForceSerializeTester_SendNestedForceSerializedStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ForceSerializeTester_SendNestedForceSerializedStruct_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructNestedForceSerialize, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  ForceSerializeTester_SendNestedForceSerializedStruct_Params.decode = function(decoder) {
    var packed;
    var val = new ForceSerializeTester_SendNestedForceSerializedStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(StructNestedForceSerialize);
    return val;
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ForceSerializeTester_SendNestedForceSerializedStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructNestedForceSerialize, val.s);
  };
  function ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.passed = null;
  };
  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.passed
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructNestedForceSerialize, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passed =
        decoder.decodeStructPointer(StructNestedForceSerialize);
    return val;
  };

  ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructNestedForceSerialize, val.passed);
  };

  function UnionWithTraits(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  UnionWithTraits.Tags = {
    fInt32: 0,
    fStruct: 1,
  };

  UnionWithTraits.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  UnionWithTraits.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fInt32",
        "fStruct",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a UnionWithTraits member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(UnionWithTraits.prototype, "fInt32", {
    get: function() {
      if (this.$tag != UnionWithTraits.Tags.fInt32) {
        throw new ReferenceError(
            "UnionWithTraits.fInt32 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithTraits.Tags.fInt32;
      this.$data = value;
    }
  });
  Object.defineProperty(UnionWithTraits.prototype, "fStruct", {
    get: function() {
      if (this.$tag != UnionWithTraits.Tags.fStruct) {
        throw new ReferenceError(
            "UnionWithTraits.fStruct is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithTraits.Tags.fStruct;
      this.$data = value;
    }
  });


    UnionWithTraits.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case UnionWithTraits.Tags.fInt32:
          encoder.encodeStruct(codec.Int32, val.fInt32);
          break;
        case UnionWithTraits.Tags.fStruct:
          encoder.encodeStructPointer(NestedStructWithTraits, val.fStruct);
          break;
      }
      encoder.align();
    };


    UnionWithTraits.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new UnionWithTraits();
      var tag = decoder.readUint32();
      switch (tag) {
        case UnionWithTraits.Tags.fInt32:
          result.fInt32 = decoder.decodeStruct(codec.Int32);
          break;
        case UnionWithTraits.Tags.fStruct:
          result.fStruct = decoder.decodeStructPointer(NestedStructWithTraits);
          break;
      }
      decoder.align();

      return result;
    };


    UnionWithTraits.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case UnionWithTraits.Tags.fInt32:
          

          break;
        case UnionWithTraits.Tags.fStruct:
          

    // validate UnionWithTraits.fStruct
    err = messageValidator.validateStructPointer(data_offset, NestedStructWithTraits, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  UnionWithTraits.encodedSize = 16;
  var kTraitsTestService_EchoStructWithTraits_Name = 808707218;
  var kTraitsTestService_EchoTrivialStructWithTraits_Name = 1711948029;
  var kTraitsTestService_EchoMoveOnlyStructWithTraits_Name = 1992344644;
  var kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name = 267445528;
  var kTraitsTestService_EchoEnumWithTraits_Name = 824286878;
  var kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name = 1344092885;
  var kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name = 1488457366;
  var kTraitsTestService_EchoUnionWithTraits_Name = 977081002;

  function TraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TraitsTestService,
                                                   handleOrPtrInfo);
  }

  function TraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TraitsTestService, associatedInterfacePtrInfo);
  }

  TraitsTestServiceAssociatedPtr.prototype =
      Object.create(TraitsTestServicePtr.prototype);
  TraitsTestServiceAssociatedPtr.prototype.constructor =
      TraitsTestServiceAssociatedPtr;

  function TraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TraitsTestServicePtr.prototype.echoStructWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoStructWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoStructWithTraits = function(s) {
    var params_ = new TraitsTestService_EchoStructWithTraits_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoStructWithTraits_Name,
          codec.align(TraitsTestService_EchoStructWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoStructWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoStructWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoTrivialStructWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoTrivialStructWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoTrivialStructWithTraits = function(s) {
    var params_ = new TraitsTestService_EchoTrivialStructWithTraits_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoTrivialStructWithTraits_Name,
          codec.align(TraitsTestService_EchoTrivialStructWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoTrivialStructWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoMoveOnlyStructWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoMoveOnlyStructWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoMoveOnlyStructWithTraits = function(s) {
    var params_ = new TraitsTestService_EchoMoveOnlyStructWithTraits_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoMoveOnlyStructWithTraits_Name,
          codec.align(TraitsTestService_EchoMoveOnlyStructWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoMoveOnlyStructWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoNullableMoveOnlyStructWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoNullableMoveOnlyStructWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoNullableMoveOnlyStructWithTraits = function(s) {
    var params_ = new TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name,
          codec.align(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoEnumWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoEnumWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoEnumWithTraits = function(e) {
    var params_ = new TraitsTestService_EchoEnumWithTraits_Params();
    params_.e = e;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoEnumWithTraits_Name,
          codec.align(TraitsTestService_EchoEnumWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoEnumWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoEnumWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoStructWithTraitsForUniquePtr = function() {
    return TraitsTestServiceProxy.prototype.echoStructWithTraitsForUniquePtr
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoStructWithTraitsForUniquePtr = function(e) {
    var params_ = new TraitsTestService_EchoStructWithTraitsForUniquePtr_Params();
    params_.e = e;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name,
          codec.align(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoNullableStructWithTraitsForUniquePtr = function() {
    return TraitsTestServiceProxy.prototype.echoNullableStructWithTraitsForUniquePtr
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoNullableStructWithTraitsForUniquePtr = function(e) {
    var params_ = new TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params();
    params_.e = e;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name,
          codec.align(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoUnionWithTraits = function() {
    return TraitsTestServiceProxy.prototype.echoUnionWithTraits
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoUnionWithTraits = function(u) {
    var params_ = new TraitsTestService_EchoUnionWithTraits_Params();
    params_.u = u;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoUnionWithTraits_Name,
          codec.align(TraitsTestService_EchoUnionWithTraits_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoUnionWithTraits_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoUnionWithTraits_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TraitsTestServiceStub.prototype.echoStructWithTraits = function(s) {
    return this.delegate_ && this.delegate_.echoStructWithTraits && this.delegate_.echoStructWithTraits(s);
  }
  TraitsTestServiceStub.prototype.echoTrivialStructWithTraits = function(s) {
    return this.delegate_ && this.delegate_.echoTrivialStructWithTraits && this.delegate_.echoTrivialStructWithTraits(s);
  }
  TraitsTestServiceStub.prototype.echoMoveOnlyStructWithTraits = function(s) {
    return this.delegate_ && this.delegate_.echoMoveOnlyStructWithTraits && this.delegate_.echoMoveOnlyStructWithTraits(s);
  }
  TraitsTestServiceStub.prototype.echoNullableMoveOnlyStructWithTraits = function(s) {
    return this.delegate_ && this.delegate_.echoNullableMoveOnlyStructWithTraits && this.delegate_.echoNullableMoveOnlyStructWithTraits(s);
  }
  TraitsTestServiceStub.prototype.echoEnumWithTraits = function(e) {
    return this.delegate_ && this.delegate_.echoEnumWithTraits && this.delegate_.echoEnumWithTraits(e);
  }
  TraitsTestServiceStub.prototype.echoStructWithTraitsForUniquePtr = function(e) {
    return this.delegate_ && this.delegate_.echoStructWithTraitsForUniquePtr && this.delegate_.echoStructWithTraitsForUniquePtr(e);
  }
  TraitsTestServiceStub.prototype.echoNullableStructWithTraitsForUniquePtr = function(e) {
    return this.delegate_ && this.delegate_.echoNullableStructWithTraitsForUniquePtr && this.delegate_.echoNullableStructWithTraitsForUniquePtr(e);
  }
  TraitsTestServiceStub.prototype.echoUnionWithTraits = function(u) {
    return this.delegate_ && this.delegate_.echoUnionWithTraits && this.delegate_.echoUnionWithTraits(u);
  }

  TraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTraitsTestService_EchoStructWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoStructWithTraits_Params);
      this.echoStructWithTraits(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoStructWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoStructWithTraits_Name,
            codec.align(TraitsTestService_EchoStructWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoStructWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoTrivialStructWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoTrivialStructWithTraits_Params);
      this.echoTrivialStructWithTraits(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoTrivialStructWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoTrivialStructWithTraits_Name,
            codec.align(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoTrivialStructWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoMoveOnlyStructWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoMoveOnlyStructWithTraits_Params);
      this.echoMoveOnlyStructWithTraits(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoMoveOnlyStructWithTraits_Name,
            codec.align(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params);
      this.echoNullableMoveOnlyStructWithTraits(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name,
            codec.align(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoEnumWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoEnumWithTraits_Params);
      this.echoEnumWithTraits(params.e).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoEnumWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoEnumWithTraits_Name,
            codec.align(TraitsTestService_EchoEnumWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoEnumWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoStructWithTraitsForUniquePtr_Params);
      this.echoStructWithTraitsForUniquePtr(params.e).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name,
            codec.align(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params);
      this.echoNullableStructWithTraitsForUniquePtr(params.e).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name,
            codec.align(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoUnionWithTraits_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoUnionWithTraits_Params);
      this.echoUnionWithTraits(params.u).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoUnionWithTraits_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoUnionWithTraits_Name,
            codec.align(TraitsTestService_EchoUnionWithTraits_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoUnionWithTraits_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTraitsTestService_EchoStructWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoStructWithTraits_Params;
      break;
      case kTraitsTestService_EchoTrivialStructWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoTrivialStructWithTraits_Params;
      break;
      case kTraitsTestService_EchoMoveOnlyStructWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoMoveOnlyStructWithTraits_Params;
      break;
      case kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoNullableMoveOnlyStructWithTraits_Params;
      break;
      case kTraitsTestService_EchoEnumWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoEnumWithTraits_Params;
      break;
      case kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoStructWithTraitsForUniquePtr_Params;
      break;
      case kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Params;
      break;
      case kTraitsTestService_EchoUnionWithTraits_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoUnionWithTraits_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTraitsTestService_EchoStructWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoStructWithTraits_ResponseParams;
        break;
      case kTraitsTestService_EchoTrivialStructWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoTrivialStructWithTraits_ResponseParams;
        break;
      case kTraitsTestService_EchoMoveOnlyStructWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoMoveOnlyStructWithTraits_ResponseParams;
        break;
      case kTraitsTestService_EchoNullableMoveOnlyStructWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoNullableMoveOnlyStructWithTraits_ResponseParams;
        break;
      case kTraitsTestService_EchoEnumWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoEnumWithTraits_ResponseParams;
        break;
      case kTraitsTestService_EchoStructWithTraitsForUniquePtr_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoStructWithTraitsForUniquePtr_ResponseParams;
        break;
      case kTraitsTestService_EchoNullableStructWithTraitsForUniquePtr_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoNullableStructWithTraitsForUniquePtr_ResponseParams;
        break;
      case kTraitsTestService_EchoUnionWithTraits_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoUnionWithTraits_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TraitsTestService = {
    name: 'mojo.test.TraitsTestService',
    kVersion: 0,
    ptrClass: TraitsTestServicePtr,
    proxyClass: TraitsTestServiceProxy,
    stubClass: TraitsTestServiceStub,
    validateRequest: validateTraitsTestServiceRequest,
    validateResponse: validateTraitsTestServiceResponse,
  };
  TraitsTestServiceStub.prototype.validator = validateTraitsTestServiceRequest;
  TraitsTestServiceProxy.prototype.validator = validateTraitsTestServiceResponse;
  var kTestUnserializedStruct_PassUnserializedStruct_Name = 2022329894;

  function TestUnserializedStructPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestUnserializedStruct,
                                                   handleOrPtrInfo);
  }

  function TestUnserializedStructAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestUnserializedStruct, associatedInterfacePtrInfo);
  }

  TestUnserializedStructAssociatedPtr.prototype =
      Object.create(TestUnserializedStructPtr.prototype);
  TestUnserializedStructAssociatedPtr.prototype.constructor =
      TestUnserializedStructAssociatedPtr;

  function TestUnserializedStructProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestUnserializedStructPtr.prototype.passUnserializedStruct = function() {
    return TestUnserializedStructProxy.prototype.passUnserializedStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  TestUnserializedStructProxy.prototype.passUnserializedStruct = function(s) {
    var params_ = new TestUnserializedStruct_PassUnserializedStruct_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestUnserializedStruct_PassUnserializedStruct_Name,
          codec.align(TestUnserializedStruct_PassUnserializedStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestUnserializedStruct_PassUnserializedStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestUnserializedStruct_PassUnserializedStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestUnserializedStructStub(delegate) {
    this.delegate_ = delegate;
  }
  TestUnserializedStructStub.prototype.passUnserializedStruct = function(s) {
    return this.delegate_ && this.delegate_.passUnserializedStruct && this.delegate_.passUnserializedStruct(s);
  }

  TestUnserializedStructStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestUnserializedStructStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestUnserializedStruct_PassUnserializedStruct_Name:
      var params = reader.decodeStruct(TestUnserializedStruct_PassUnserializedStruct_Params);
      this.passUnserializedStruct(params.s).then(function(response) {
        var responseParams =
            new TestUnserializedStruct_PassUnserializedStruct_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kTestUnserializedStruct_PassUnserializedStruct_Name,
            codec.align(TestUnserializedStruct_PassUnserializedStruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestUnserializedStruct_PassUnserializedStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestUnserializedStructRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestUnserializedStruct_PassUnserializedStruct_Name:
        if (message.expectsResponse())
          paramsClass = TestUnserializedStruct_PassUnserializedStruct_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestUnserializedStructResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestUnserializedStruct_PassUnserializedStruct_Name:
        if (message.isResponse())
          paramsClass = TestUnserializedStruct_PassUnserializedStruct_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestUnserializedStruct = {
    name: 'mojo.test.TestUnserializedStruct',
    kVersion: 0,
    ptrClass: TestUnserializedStructPtr,
    proxyClass: TestUnserializedStructProxy,
    stubClass: TestUnserializedStructStub,
    validateRequest: validateTestUnserializedStructRequest,
    validateResponse: validateTestUnserializedStructResponse,
  };
  TestUnserializedStructStub.prototype.validator = validateTestUnserializedStructRequest;
  TestUnserializedStructProxy.prototype.validator = validateTestUnserializedStructResponse;
  var kForceSerializeTester_SendForceSerializedStruct_Name = 1740407717;
  var kForceSerializeTester_SendNestedForceSerializedStruct_Name = 234568458;

  function ForceSerializeTesterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ForceSerializeTester,
                                                   handleOrPtrInfo);
  }

  function ForceSerializeTesterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ForceSerializeTester, associatedInterfacePtrInfo);
  }

  ForceSerializeTesterAssociatedPtr.prototype =
      Object.create(ForceSerializeTesterPtr.prototype);
  ForceSerializeTesterAssociatedPtr.prototype.constructor =
      ForceSerializeTesterAssociatedPtr;

  function ForceSerializeTesterProxy(receiver) {
    this.receiver_ = receiver;
  }
  ForceSerializeTesterPtr.prototype.sendForceSerializedStruct = function() {
    return ForceSerializeTesterProxy.prototype.sendForceSerializedStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  ForceSerializeTesterProxy.prototype.sendForceSerializedStruct = function(s) {
    var params_ = new ForceSerializeTester_SendForceSerializedStruct_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kForceSerializeTester_SendForceSerializedStruct_Name,
          codec.align(ForceSerializeTester_SendForceSerializedStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ForceSerializeTester_SendForceSerializedStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ForceSerializeTester_SendForceSerializedStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ForceSerializeTesterPtr.prototype.sendNestedForceSerializedStruct = function() {
    return ForceSerializeTesterProxy.prototype.sendNestedForceSerializedStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  ForceSerializeTesterProxy.prototype.sendNestedForceSerializedStruct = function(s) {
    var params_ = new ForceSerializeTester_SendNestedForceSerializedStruct_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kForceSerializeTester_SendNestedForceSerializedStruct_Name,
          codec.align(ForceSerializeTester_SendNestedForceSerializedStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ForceSerializeTester_SendNestedForceSerializedStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ForceSerializeTesterStub(delegate) {
    this.delegate_ = delegate;
  }
  ForceSerializeTesterStub.prototype.sendForceSerializedStruct = function(s) {
    return this.delegate_ && this.delegate_.sendForceSerializedStruct && this.delegate_.sendForceSerializedStruct(s);
  }
  ForceSerializeTesterStub.prototype.sendNestedForceSerializedStruct = function(s) {
    return this.delegate_ && this.delegate_.sendNestedForceSerializedStruct && this.delegate_.sendNestedForceSerializedStruct(s);
  }

  ForceSerializeTesterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ForceSerializeTesterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kForceSerializeTester_SendForceSerializedStruct_Name:
      var params = reader.decodeStruct(ForceSerializeTester_SendForceSerializedStruct_Params);
      this.sendForceSerializedStruct(params.s).then(function(response) {
        var responseParams =
            new ForceSerializeTester_SendForceSerializedStruct_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kForceSerializeTester_SendForceSerializedStruct_Name,
            codec.align(ForceSerializeTester_SendForceSerializedStruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ForceSerializeTester_SendForceSerializedStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kForceSerializeTester_SendNestedForceSerializedStruct_Name:
      var params = reader.decodeStruct(ForceSerializeTester_SendNestedForceSerializedStruct_Params);
      this.sendNestedForceSerializedStruct(params.s).then(function(response) {
        var responseParams =
            new ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams();
        responseParams.passed = response.passed;
        var builder = new codec.MessageV1Builder(
            kForceSerializeTester_SendNestedForceSerializedStruct_Name,
            codec.align(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateForceSerializeTesterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kForceSerializeTester_SendForceSerializedStruct_Name:
        if (message.expectsResponse())
          paramsClass = ForceSerializeTester_SendForceSerializedStruct_Params;
      break;
      case kForceSerializeTester_SendNestedForceSerializedStruct_Name:
        if (message.expectsResponse())
          paramsClass = ForceSerializeTester_SendNestedForceSerializedStruct_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateForceSerializeTesterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kForceSerializeTester_SendForceSerializedStruct_Name:
        if (message.isResponse())
          paramsClass = ForceSerializeTester_SendForceSerializedStruct_ResponseParams;
        break;
      case kForceSerializeTester_SendNestedForceSerializedStruct_Name:
        if (message.isResponse())
          paramsClass = ForceSerializeTester_SendNestedForceSerializedStruct_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ForceSerializeTester = {
    name: 'mojo.test.ForceSerializeTester',
    kVersion: 0,
    ptrClass: ForceSerializeTesterPtr,
    proxyClass: ForceSerializeTesterProxy,
    stubClass: ForceSerializeTesterStub,
    validateRequest: validateForceSerializeTesterRequest,
    validateResponse: validateForceSerializeTesterResponse,
  };
  ForceSerializeTesterStub.prototype.validator = validateForceSerializeTesterRequest;
  ForceSerializeTesterProxy.prototype.validator = validateForceSerializeTesterResponse;
  exports.EnumWithTraits = EnumWithTraits;
  exports.NestedStructWithTraits = NestedStructWithTraits;
  exports.StructWithTraits = StructWithTraits;
  exports.StructWithUnreachableTraits = StructWithUnreachableTraits;
  exports.StructWithTraitsContainer = StructWithTraitsContainer;
  exports.TrivialStructWithTraits = TrivialStructWithTraits;
  exports.MoveOnlyStructWithTraits = MoveOnlyStructWithTraits;
  exports.MoveOnlyStructWithTraitsContainer = MoveOnlyStructWithTraitsContainer;
  exports.StructWithTraitsForUniquePtr = StructWithTraitsForUniquePtr;
  exports.EnumWithTraitsContainer = EnumWithTraitsContainer;
  exports.StructForceSerialize = StructForceSerialize;
  exports.StructNestedForceSerialize = StructNestedForceSerialize;
  exports.UnionWithTraits = UnionWithTraits;
  exports.TraitsTestService = TraitsTestService;
  exports.TraitsTestServicePtr = TraitsTestServicePtr;
  exports.TraitsTestServiceAssociatedPtr = TraitsTestServiceAssociatedPtr;
  exports.TestUnserializedStruct = TestUnserializedStruct;
  exports.TestUnserializedStructPtr = TestUnserializedStructPtr;
  exports.TestUnserializedStructAssociatedPtr = TestUnserializedStructAssociatedPtr;
  exports.ForceSerializeTester = ForceSerializeTester;
  exports.ForceSerializeTesterPtr = ForceSerializeTesterPtr;
  exports.ForceSerializeTesterAssociatedPtr = ForceSerializeTesterAssociatedPtr;
})();