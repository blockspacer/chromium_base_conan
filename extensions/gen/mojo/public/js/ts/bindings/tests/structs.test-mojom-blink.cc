// mojo/public/js/ts/bindings/tests/structs.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-params-data.h"
#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-shared-message-ids.h"

#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace tstest {
namespace blink {
EmptyStruct::EmptyStruct() {}

EmptyStruct::~EmptyStruct() = default;
size_t EmptyStruct::Hash(size_t seed) const {
  return seed;
}

void EmptyStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
}

bool EmptyStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StructMemberStruct::StructMemberStruct()
    : empty_struct() {}

StructMemberStruct::StructMemberStruct(
    EmptyStructPtr empty_struct_in)
    : empty_struct(std::move(empty_struct_in)) {}

StructMemberStruct::~StructMemberStruct() = default;
size_t StructMemberStruct::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->empty_struct);
  return seed;
}

void StructMemberStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "empty_struct"), this->empty_struct,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EmptyStructPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructMemberStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
IntStruct::IntStruct()
    : value() {}

IntStruct::IntStruct(
    int8_t value_in)
    : value(std::move(value_in)) {}

IntStruct::~IntStruct() = default;
size_t IntStruct::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->value);
  return seed;
}

void IntStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool IntStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BoolStruct::BoolStruct()
    : value() {}

BoolStruct::BoolStruct(
    bool value_in)
    : value(std::move(value_in)) {}

BoolStruct::~BoolStruct() = default;
size_t BoolStruct::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->value);
  return seed;
}

void BoolStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BoolStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
NoDefaultValuesStruct::NoDefaultValuesStruct()
    : bool_value(),
      int8_value(),
      uint8_value(),
      int16_value(),
      uint16_value(),
      int32_value(),
      uint32_value(),
      int64_value(),
      uint64_value(),
      float_value(),
      double_value(),
      string_value() {}

NoDefaultValuesStruct::NoDefaultValuesStruct(
    bool bool_value_in,
    int8_t int8_value_in,
    uint8_t uint8_value_in,
    int16_t int16_value_in,
    uint16_t uint16_value_in,
    int32_t int32_value_in,
    uint32_t uint32_value_in,
    int64_t int64_value_in,
    uint64_t uint64_value_in,
    float float_value_in,
    double double_value_in,
    const WTF::String& string_value_in)
    : bool_value(std::move(bool_value_in)),
      int8_value(std::move(int8_value_in)),
      uint8_value(std::move(uint8_value_in)),
      int16_value(std::move(int16_value_in)),
      uint16_value(std::move(uint16_value_in)),
      int32_value(std::move(int32_value_in)),
      uint32_value(std::move(uint32_value_in)),
      int64_value(std::move(int64_value_in)),
      uint64_value(std::move(uint64_value_in)),
      float_value(std::move(float_value_in)),
      double_value(std::move(double_value_in)),
      string_value(std::move(string_value_in)) {}

NoDefaultValuesStruct::~NoDefaultValuesStruct() = default;
size_t NoDefaultValuesStruct::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->bool_value);
  seed = mojo::internal::WTFHash(seed, this->int8_value);
  seed = mojo::internal::WTFHash(seed, this->uint8_value);
  seed = mojo::internal::WTFHash(seed, this->int16_value);
  seed = mojo::internal::WTFHash(seed, this->uint16_value);
  seed = mojo::internal::WTFHash(seed, this->int32_value);
  seed = mojo::internal::WTFHash(seed, this->uint32_value);
  seed = mojo::internal::WTFHash(seed, this->int64_value);
  seed = mojo::internal::WTFHash(seed, this->uint64_value);
  seed = mojo::internal::WTFHash(seed, this->float_value);
  seed = mojo::internal::WTFHash(seed, this->double_value);
  seed = mojo::internal::WTFHash(seed, this->string_value);
  return seed;
}

void NoDefaultValuesStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bool_value"), this->bool_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "int8_value"), this->int8_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "uint8_value"), this->uint8_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "int16_value"), this->int16_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "uint16_value"), this->uint16_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "int32_value"), this->int32_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "uint32_value"), this->uint32_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "int64_value"), this->int64_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "uint64_value"), this->uint64_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "float_value"), this->float_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "double_value"), this->double_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "string_value"), this->string_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NoDefaultValuesStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace blink
}  // namespace tstest
}  // namespace mojo

namespace mojo {


// static
bool StructTraits<::mojo::tstest::blink::EmptyStruct::DataView, ::mojo::tstest::blink::EmptyStructPtr>::Read(
    ::mojo::tstest::blink::EmptyStruct::DataView input,
    ::mojo::tstest::blink::EmptyStructPtr* output) {
  bool success = true;
  ::mojo::tstest::blink::EmptyStructPtr result(::mojo::tstest::blink::EmptyStruct::New());
  
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::tstest::blink::StructMemberStruct::DataView, ::mojo::tstest::blink::StructMemberStructPtr>::Read(
    ::mojo::tstest::blink::StructMemberStruct::DataView input,
    ::mojo::tstest::blink::StructMemberStructPtr* output) {
  bool success = true;
  ::mojo::tstest::blink::StructMemberStructPtr result(::mojo::tstest::blink::StructMemberStruct::New());
  
      if (success && !input.ReadEmptyStruct(&result->empty_struct))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::tstest::blink::IntStruct::DataView, ::mojo::tstest::blink::IntStructPtr>::Read(
    ::mojo::tstest::blink::IntStruct::DataView input,
    ::mojo::tstest::blink::IntStructPtr* output) {
  bool success = true;
  ::mojo::tstest::blink::IntStructPtr result(::mojo::tstest::blink::IntStruct::New());
  
      if (success)
        result->value = input.value();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::tstest::blink::BoolStruct::DataView, ::mojo::tstest::blink::BoolStructPtr>::Read(
    ::mojo::tstest::blink::BoolStruct::DataView input,
    ::mojo::tstest::blink::BoolStructPtr* output) {
  bool success = true;
  ::mojo::tstest::blink::BoolStructPtr result(::mojo::tstest::blink::BoolStruct::New());
  
      if (success)
        result->value = input.value();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::tstest::blink::NoDefaultValuesStruct::DataView, ::mojo::tstest::blink::NoDefaultValuesStructPtr>::Read(
    ::mojo::tstest::blink::NoDefaultValuesStruct::DataView input,
    ::mojo::tstest::blink::NoDefaultValuesStructPtr* output) {
  bool success = true;
  ::mojo::tstest::blink::NoDefaultValuesStructPtr result(::mojo::tstest::blink::NoDefaultValuesStruct::New());
  
      if (success)
        result->bool_value = input.bool_value();
      if (success)
        result->int8_value = input.int8_value();
      if (success)
        result->uint8_value = input.uint8_value();
      if (success)
        result->int16_value = input.int16_value();
      if (success)
        result->uint16_value = input.uint16_value();
      if (success)
        result->int32_value = input.int32_value();
      if (success)
        result->uint32_value = input.uint32_value();
      if (success)
        result->int64_value = input.int64_value();
      if (success)
        result->uint64_value = input.uint64_value();
      if (success)
        result->float_value = input.float_value();
      if (success)
        result->double_value = input.double_value();
      if (success && !input.ReadStringValue(&result->string_value))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif