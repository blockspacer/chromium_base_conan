// mojo/public/js/ts/bindings/tests/import.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/import.test-mojom-shared-internal.h"
#include "mojo/public/js/ts/bindings/tests/export1.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/export2.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/export4.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/other_dir/other_dir.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/export_other1.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/export_other3.test-mojom-shared.h"




#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {
namespace imported {
class StructWithImportedStructsDataView;



}  // namespace imported
}  // namespace tstest
}  // namespace mojo

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mojo::tstest::imported::StructWithImportedStructsDataView> {
  using Data = ::mojo::tstest::imported::internal::StructWithImportedStructs_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace tstest {
namespace imported {


class StructWithImportedStructsDataView {
 public:
  StructWithImportedStructsDataView() {}

  StructWithImportedStructsDataView(
      internal::StructWithImportedStructs_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetVal1DataView(
      ::mojo::tstest::exported::ExportedStructOneDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVal1(UserType* output) {
    
    auto* pointer = data_->val1.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported::ExportedStructOneDataView>(
        pointer, output, message_);
  }
  inline void GetVal2DataView(
      ::mojo::tstest::exported::ExportedStructTwoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVal2(UserType* output) {
    
    auto* pointer = data_->val2.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported::ExportedStructTwoDataView>(
        pointer, output, message_);
  }
  inline void GetVal4DataView(
      ::mojo::tstest::exported::ExportedStructFourDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVal4(UserType* output) {
    
    auto* pointer = data_->val4.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported::ExportedStructFourDataView>(
        pointer, output, message_);
  }
  inline void GetValOtherDirDataView(
      ::mojo::tstest::exported::ExportedStructOtherDirDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValOtherDir(UserType* output) {
    
    auto* pointer = data_->val_other_dir.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported::ExportedStructOtherDirDataView>(
        pointer, output, message_);
  }
  inline void GetValOther1DataView(
      ::mojo::tstest::exported_other::ExportedStructOneDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValOther1(UserType* output) {
    
    auto* pointer = data_->val_other1.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported_other::ExportedStructOneDataView>(
        pointer, output, message_);
  }
  inline void GetValOther3DataView(
      ::mojo::tstest::exported_other::ExportedStructThreeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValOther3(UserType* output) {
    
    auto* pointer = data_->val_other3.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported_other::ExportedStructThreeDataView>(
        pointer, output, message_);
  }
 private:
  internal::StructWithImportedStructs_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace imported
}  // namespace tstest
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::imported::StructWithImportedStructsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::imported::StructWithImportedStructsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::imported::internal::StructWithImportedStructs_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::val1(input)) in_val1 = Traits::val1(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val1)::BaseType> val1_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported::ExportedStructOneDataView>(
        in_val1, val1_fragment);
    fragment->val1.Set(
        val1_fragment.is_null() ? nullptr : val1_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val1.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val1 in StructWithImportedStructs struct");
    decltype(Traits::val2(input)) in_val2 = Traits::val2(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val2)::BaseType> val2_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported::ExportedStructTwoDataView>(
        in_val2, val2_fragment);
    fragment->val2.Set(
        val2_fragment.is_null() ? nullptr : val2_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val2.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val2 in StructWithImportedStructs struct");
    decltype(Traits::val4(input)) in_val4 = Traits::val4(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val4)::BaseType> val4_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported::ExportedStructFourDataView>(
        in_val4, val4_fragment);
    fragment->val4.Set(
        val4_fragment.is_null() ? nullptr : val4_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val4.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val4 in StructWithImportedStructs struct");
    decltype(Traits::val_other_dir(input)) in_val_other_dir = Traits::val_other_dir(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val_other_dir)::BaseType> val_other_dir_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported::ExportedStructOtherDirDataView>(
        in_val_other_dir, val_other_dir_fragment);
    fragment->val_other_dir.Set(
        val_other_dir_fragment.is_null() ? nullptr : val_other_dir_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val_other_dir.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val_other_dir in StructWithImportedStructs struct");
    decltype(Traits::val_other1(input)) in_val_other1 = Traits::val_other1(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val_other1)::BaseType> val_other1_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported_other::ExportedStructOneDataView>(
        in_val_other1, val_other1_fragment);
    fragment->val_other1.Set(
        val_other1_fragment.is_null() ? nullptr : val_other1_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val_other1.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val_other1 in StructWithImportedStructs struct");
    decltype(Traits::val_other3(input)) in_val_other3 = Traits::val_other3(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->val_other3)::BaseType> val_other3_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported_other::ExportedStructThreeDataView>(
        in_val_other3, val_other3_fragment);
    fragment->val_other3.Set(
        val_other3_fragment.is_null() ? nullptr : val_other3_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->val_other3.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null val_other3 in StructWithImportedStructs struct");
  }

  static bool Deserialize(::mojo::tstest::imported::internal::StructWithImportedStructs_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::imported::StructWithImportedStructsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace tstest {
namespace imported {

inline void StructWithImportedStructsDataView::GetVal1DataView(
    ::mojo::tstest::exported::ExportedStructOneDataView* output) {
  auto pointer = data_->val1.Get();
  *output = ::mojo::tstest::exported::ExportedStructOneDataView(pointer, message_);
}
inline void StructWithImportedStructsDataView::GetVal2DataView(
    ::mojo::tstest::exported::ExportedStructTwoDataView* output) {
  auto pointer = data_->val2.Get();
  *output = ::mojo::tstest::exported::ExportedStructTwoDataView(pointer, message_);
}
inline void StructWithImportedStructsDataView::GetVal4DataView(
    ::mojo::tstest::exported::ExportedStructFourDataView* output) {
  auto pointer = data_->val4.Get();
  *output = ::mojo::tstest::exported::ExportedStructFourDataView(pointer, message_);
}
inline void StructWithImportedStructsDataView::GetValOtherDirDataView(
    ::mojo::tstest::exported::ExportedStructOtherDirDataView* output) {
  auto pointer = data_->val_other_dir.Get();
  *output = ::mojo::tstest::exported::ExportedStructOtherDirDataView(pointer, message_);
}
inline void StructWithImportedStructsDataView::GetValOther1DataView(
    ::mojo::tstest::exported_other::ExportedStructOneDataView* output) {
  auto pointer = data_->val_other1.Get();
  *output = ::mojo::tstest::exported_other::ExportedStructOneDataView(pointer, message_);
}
inline void StructWithImportedStructsDataView::GetValOther3DataView(
    ::mojo::tstest::exported_other::ExportedStructThreeDataView* output) {
  auto pointer = data_->val_other3.Get();
  *output = ::mojo::tstest::exported_other::ExportedStructThreeDataView(pointer, message_);
}



}  // namespace imported
}  // namespace tstest
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/