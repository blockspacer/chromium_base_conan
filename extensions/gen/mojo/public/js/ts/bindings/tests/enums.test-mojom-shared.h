// mojo/public/js/ts/bindings/tests/enums.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_ENUMS_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_ENUMS_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/enums.test-mojom-shared-internal.h"




#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {


}  // namespace tstest
}  // namespace mojo

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace tstest {


// @generated_from: mojo.tstest.EmptyEnum
enum class EmptyEnum : int32_t {
};

 std::ostream& operator<<(std::ostream& os, EmptyEnum value);
inline bool IsKnownEnumValue(EmptyEnum value) {
  return internal::EmptyEnum_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: mojo.tstest.EnumWithNoValues
enum class EnumWithNoValues : int32_t {
  
// @generated_from: mojo.tstest.EnumWithNoValues.ZERO
  ZERO = 0,
  
// @generated_from: mojo.tstest.EnumWithNoValues.ONE
  ONE = 1,
  
// @generated_from: mojo.tstest.EnumWithNoValues.TWO
  TWO = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, EnumWithNoValues value);
inline bool IsKnownEnumValue(EnumWithNoValues value) {
  return internal::EnumWithNoValues_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: mojo.tstest.EnumWithFirstValue
enum class EnumWithFirstValue : int32_t {
  
// @generated_from: mojo.tstest.EnumWithFirstValue.FIVE
  FIVE = 5,
  
// @generated_from: mojo.tstest.EnumWithFirstValue.SIX
  SIX = 6,
  
// @generated_from: mojo.tstest.EnumWithFirstValue.SEVEN
  SEVEN = 7,
  kMinValue = 5,
  kMaxValue = 7,
};

 std::ostream& operator<<(std::ostream& os, EnumWithFirstValue value);
inline bool IsKnownEnumValue(EnumWithFirstValue value) {
  return internal::EnumWithFirstValue_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: mojo.tstest.EnumWithLastValue
enum class EnumWithLastValue : int32_t {
  
// @generated_from: mojo.tstest.EnumWithLastValue.ZERO
  ZERO = 0,
  
// @generated_from: mojo.tstest.EnumWithLastValue.ONE
  ONE = 1,
  
// @generated_from: mojo.tstest.EnumWithLastValue.TEN
  TEN = 10,
  kMinValue = 0,
  kMaxValue = 10,
};

 std::ostream& operator<<(std::ostream& os, EnumWithLastValue value);
inline bool IsKnownEnumValue(EnumWithLastValue value) {
  return internal::EnumWithLastValue_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: mojo.tstest.EnumWithInterspersedValues
enum class EnumWithInterspersedValues : int32_t {
  
// @generated_from: mojo.tstest.EnumWithInterspersedValues.ZERO
  ZERO = 0,
  
// @generated_from: mojo.tstest.EnumWithInterspersedValues.THREE
  THREE = 3,
  
// @generated_from: mojo.tstest.EnumWithInterspersedValues.FOUR
  FOUR = 4,
  
// @generated_from: mojo.tstest.EnumWithInterspersedValues.EIGHT
  EIGHT = 8,
  
// @generated_from: mojo.tstest.EnumWithInterspersedValues.NINE
  NINE = 9,
  kMinValue = 0,
  kMaxValue = 9,
};

 std::ostream& operator<<(std::ostream& os, EnumWithInterspersedValues value);
inline bool IsKnownEnumValue(EnumWithInterspersedValues value) {
  return internal::EnumWithInterspersedValues_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace tstest
}  // namespace mojo

namespace std {

template <>
struct hash<::mojo::tstest::EmptyEnum>
    : public mojo::internal::EnumHashImpl<::mojo::tstest::EmptyEnum> {};

template <>
struct hash<::mojo::tstest::EnumWithNoValues>
    : public mojo::internal::EnumHashImpl<::mojo::tstest::EnumWithNoValues> {};

template <>
struct hash<::mojo::tstest::EnumWithFirstValue>
    : public mojo::internal::EnumHashImpl<::mojo::tstest::EnumWithFirstValue> {};

template <>
struct hash<::mojo::tstest::EnumWithLastValue>
    : public mojo::internal::EnumHashImpl<::mojo::tstest::EnumWithLastValue> {};

template <>
struct hash<::mojo::tstest::EnumWithInterspersedValues>
    : public mojo::internal::EnumHashImpl<::mojo::tstest::EnumWithInterspersedValues> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EmptyEnum, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::tstest::EmptyEnum, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::tstest::EmptyEnum>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EnumWithNoValues, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::tstest::EnumWithNoValues, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::tstest::EnumWithNoValues>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EnumWithFirstValue, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::tstest::EnumWithFirstValue, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::tstest::EnumWithFirstValue>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EnumWithLastValue, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::tstest::EnumWithLastValue, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::tstest::EnumWithLastValue>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EnumWithInterspersedValues, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::tstest::EnumWithInterspersedValues, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::tstest::EnumWithInterspersedValues>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace tstest {


}  // namespace tstest
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::tstest::EmptyEnum> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::tstest::EmptyEnum value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::tstest::EnumWithNoValues> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::tstest::EnumWithNoValues value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::tstest::EnumWithFirstValue> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::tstest::EnumWithFirstValue value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::tstest::EnumWithLastValue> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::tstest::EnumWithLastValue value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::tstest::EnumWithInterspersedValues> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::tstest::EnumWithInterspersedValues value);
};

} // namespace perfetto

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_ENUMS_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTUwNywgImJlZ2luIjogMTQ5OCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVtcHR5RW51bSJ9fSwgeyJlbmQi
OiAxNzk5LCAiYmVnaW4iOiAxNzgzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhOb1ZhbHVlcyJ9fSwgeyJlbmQiOiAxODc1LCAi
YmVnaW4iOiAxODcxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50c3Rlc3QuRW51bVdpdGhOb1ZhbHVlcy5aRVJPIn19LCB7ImVuZCI6IDE5NDIsICJiZWdp
biI6IDE5MzksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRzdGVzdC5FbnVtV2l0aE5vVmFsdWVzLk9ORSJ9fSwgeyJlbmQiOiAyMDA5LCAiYmVnaW4iOiAy
MDA2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rl
c3QuRW51bVdpdGhOb1ZhbHVlcy5UV08ifX0sIHsiZW5kIjogMjM1MywgImJlZ2luIjogMjMzNSwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVu
dW1XaXRoRmlyc3RWYWx1ZSJ9fSwgeyJlbmQiOiAyNDMxLCAiYmVnaW4iOiAyNDI3LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhG
aXJzdFZhbHVlLkZJVkUifX0sIHsiZW5kIjogMjUwMCwgImJlZ2luIjogMjQ5NywgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoRmly
c3RWYWx1ZS5TSVgifX0sIHsiZW5kIjogMjU3MywgImJlZ2luIjogMjU2OCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoRmlyc3RW
YWx1ZS5TRVZFTiJ9fSwgeyJlbmQiOiAyOTIxLCAiYmVnaW4iOiAyOTA0LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhMYXN0VmFs
dWUifX0sIHsiZW5kIjogMjk5OCwgImJlZ2luIjogMjk5NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoTGFzdFZhbHVlLlpFUk8i
fX0sIHsiZW5kIjogMzA2NiwgImJlZ2luIjogMzA2MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoTGFzdFZhbHVlLk9ORSJ9fSwg
eyJlbmQiOiAzMTM0LCAiYmVnaW4iOiAzMTMxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhMYXN0VmFsdWUuVEVOIn19LCB7ImVu
ZCI6IDM0OTksICJiZWdpbiI6IDM0NzMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRzdGVzdC5FbnVtV2l0aEludGVyc3BlcnNlZFZhbHVlcyJ9fSwgeyJl
bmQiOiAzNTg1LCAiYmVnaW4iOiAzNTgxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhJbnRlcnNwZXJzZWRWYWx1ZXMuWkVSTyJ9
fSwgeyJlbmQiOiAzNjY2LCAiYmVnaW4iOiAzNjYxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuRW51bVdpdGhJbnRlcnNwZXJzZWRWYWx1ZXMu
VEhSRUUifX0sIHsiZW5kIjogMzc0NSwgImJlZ2luIjogMzc0MSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoSW50ZXJzcGVyc2Vk
VmFsdWVzLkZPVVIifX0sIHsiZW5kIjogMzgyNiwgImJlZ2luIjogMzgyMSwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVudW1XaXRoSW50ZXJz
cGVyc2VkVmFsdWVzLkVJR0hUIn19LCB7ImVuZCI6IDM5MDUsICJiZWdpbiI6IDM5MDEsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRzdGVzdC5FbnVtV2l0
aEludGVyc3BlcnNlZFZhbHVlcy5OSU5FIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/