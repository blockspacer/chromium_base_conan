// mojo/public/js/ts/bindings/tests/structs.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"





#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {
namespace blink {





// @generated_from: mojo.tstest.EmptyStruct
class  EmptyStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<EmptyStruct, T>::value>;
  using DataView = EmptyStructDataView;
  using Data_ = internal::EmptyStruct_Data;

  template <typename... Args>
  static EmptyStructPtr New(Args&&... args) {
    return EmptyStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static EmptyStructPtr From(const U& u) {
    return mojo::TypeConverter<EmptyStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, EmptyStruct>::Convert(*this);
  }


  EmptyStruct();

  ~EmptyStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = EmptyStructPtr>
  EmptyStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        EmptyStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        EmptyStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::EmptyStruct_UnserializedMessageContext<
            UserType, EmptyStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<EmptyStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return EmptyStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::EmptyStruct_UnserializedMessageContext<
            UserType, EmptyStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<EmptyStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, EmptyStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






// @generated_from: mojo.tstest.IntStruct
class  IntStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<IntStruct, T>::value>;
  using DataView = IntStructDataView;
  using Data_ = internal::IntStruct_Data;

  template <typename... Args>
  static IntStructPtr New(Args&&... args) {
    return IntStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static IntStructPtr From(const U& u) {
    return mojo::TypeConverter<IntStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntStruct>::Convert(*this);
  }


  IntStruct();

  explicit IntStruct(
      int8_t value);

  ~IntStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = IntStructPtr>
  IntStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        IntStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        IntStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::IntStruct_UnserializedMessageContext<
            UserType, IntStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<IntStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return IntStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::IntStruct_UnserializedMessageContext<
            UserType, IntStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<IntStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.tstest.IntStruct.value
  int8_t value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, IntStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.tstest.BoolStruct
class  BoolStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BoolStruct, T>::value>;
  using DataView = BoolStructDataView;
  using Data_ = internal::BoolStruct_Data;

  template <typename... Args>
  static BoolStructPtr New(Args&&... args) {
    return BoolStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BoolStructPtr From(const U& u) {
    return mojo::TypeConverter<BoolStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BoolStruct>::Convert(*this);
  }


  BoolStruct();

  explicit BoolStruct(
      bool value);

  ~BoolStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BoolStructPtr>
  BoolStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BoolStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BoolStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BoolStruct_UnserializedMessageContext<
            UserType, BoolStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<BoolStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return BoolStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BoolStruct_UnserializedMessageContext<
            UserType, BoolStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BoolStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.tstest.BoolStruct.value
  bool value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BoolStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









// @generated_from: mojo.tstest.StructMemberStruct
class  StructMemberStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructMemberStruct, T>::value>;
  using DataView = StructMemberStructDataView;
  using Data_ = internal::StructMemberStruct_Data;

  template <typename... Args>
  static StructMemberStructPtr New(Args&&... args) {
    return StructMemberStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructMemberStructPtr From(const U& u) {
    return mojo::TypeConverter<StructMemberStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructMemberStruct>::Convert(*this);
  }


  StructMemberStruct();

  explicit StructMemberStruct(
      EmptyStructPtr empty_struct);

  ~StructMemberStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructMemberStructPtr>
  StructMemberStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructMemberStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructMemberStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructMemberStruct_UnserializedMessageContext<
            UserType, StructMemberStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructMemberStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructMemberStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructMemberStruct_UnserializedMessageContext<
            UserType, StructMemberStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructMemberStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.tstest.StructMemberStruct.empty_struct
  EmptyStructPtr empty_struct;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(StructMemberStruct);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructMemberStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







// @generated_from: mojo.tstest.NoDefaultValuesStruct
class  NoDefaultValuesStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<NoDefaultValuesStruct, T>::value>;
  using DataView = NoDefaultValuesStructDataView;
  using Data_ = internal::NoDefaultValuesStruct_Data;

  template <typename... Args>
  static NoDefaultValuesStructPtr New(Args&&... args) {
    return NoDefaultValuesStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static NoDefaultValuesStructPtr From(const U& u) {
    return mojo::TypeConverter<NoDefaultValuesStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NoDefaultValuesStruct>::Convert(*this);
  }


  NoDefaultValuesStruct();

  NoDefaultValuesStruct(
      bool bool_value,
      int8_t int8_value,
      uint8_t uint8_value,
      int16_t int16_value,
      uint16_t uint16_value,
      int32_t int32_value,
      uint32_t uint32_value,
      int64_t int64_value,
      uint64_t uint64_value,
      float float_value,
      double double_value,
      const WTF::String& string_value);

  ~NoDefaultValuesStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = NoDefaultValuesStructPtr>
  NoDefaultValuesStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        NoDefaultValuesStruct::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        NoDefaultValuesStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::NoDefaultValuesStruct_UnserializedMessageContext<
            UserType, NoDefaultValuesStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<NoDefaultValuesStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return NoDefaultValuesStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::NoDefaultValuesStruct_UnserializedMessageContext<
            UserType, NoDefaultValuesStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<NoDefaultValuesStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.bool_value
  bool bool_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.int8_value
  int8_t int8_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.uint8_value
  uint8_t uint8_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.int16_value
  int16_t int16_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.uint16_value
  uint16_t uint16_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.int32_value
  int32_t int32_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.uint32_value
  uint32_t uint32_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.int64_value
  int64_t int64_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.uint64_value
  uint64_t uint64_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.float_value
  float float_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.double_value
  double double_value;
  
// @generated_from: mojo.tstest.NoDefaultValuesStruct.string_value
  WTF::String string_value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, NoDefaultValuesStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
EmptyStructPtr EmptyStruct::Clone() const {
  return New(
  );
}

template <typename T, EmptyStruct::EnableIfSame<T>*>
bool EmptyStruct::Equals(const T& other_struct) const {
  return true;
}

template <typename T, EmptyStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
StructMemberStructPtr StructMemberStruct::Clone() const {
  return New(
      mojo::Clone(empty_struct)
  );
}

template <typename T, StructMemberStruct::EnableIfSame<T>*>
bool StructMemberStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->empty_struct, other_struct.empty_struct))
    return false;
  return true;
}

template <typename T, StructMemberStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.empty_struct < rhs.empty_struct)
    return true;
  if (rhs.empty_struct < lhs.empty_struct)
    return false;
  return false;
}
template <typename StructPtrType>
IntStructPtr IntStruct::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, IntStruct::EnableIfSame<T>*>
bool IntStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, IntStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
BoolStructPtr BoolStruct::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, BoolStruct::EnableIfSame<T>*>
bool BoolStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, BoolStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
NoDefaultValuesStructPtr NoDefaultValuesStruct::Clone() const {
  return New(
      mojo::Clone(bool_value),
      mojo::Clone(int8_value),
      mojo::Clone(uint8_value),
      mojo::Clone(int16_value),
      mojo::Clone(uint16_value),
      mojo::Clone(int32_value),
      mojo::Clone(uint32_value),
      mojo::Clone(int64_value),
      mojo::Clone(uint64_value),
      mojo::Clone(float_value),
      mojo::Clone(double_value),
      mojo::Clone(string_value)
  );
}

template <typename T, NoDefaultValuesStruct::EnableIfSame<T>*>
bool NoDefaultValuesStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->bool_value, other_struct.bool_value))
    return false;
  if (!mojo::Equals(this->int8_value, other_struct.int8_value))
    return false;
  if (!mojo::Equals(this->uint8_value, other_struct.uint8_value))
    return false;
  if (!mojo::Equals(this->int16_value, other_struct.int16_value))
    return false;
  if (!mojo::Equals(this->uint16_value, other_struct.uint16_value))
    return false;
  if (!mojo::Equals(this->int32_value, other_struct.int32_value))
    return false;
  if (!mojo::Equals(this->uint32_value, other_struct.uint32_value))
    return false;
  if (!mojo::Equals(this->int64_value, other_struct.int64_value))
    return false;
  if (!mojo::Equals(this->uint64_value, other_struct.uint64_value))
    return false;
  if (!mojo::Equals(this->float_value, other_struct.float_value))
    return false;
  if (!mojo::Equals(this->double_value, other_struct.double_value))
    return false;
  if (!mojo::Equals(this->string_value, other_struct.string_value))
    return false;
  return true;
}

template <typename T, NoDefaultValuesStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.bool_value < rhs.bool_value)
    return true;
  if (rhs.bool_value < lhs.bool_value)
    return false;
  if (lhs.int8_value < rhs.int8_value)
    return true;
  if (rhs.int8_value < lhs.int8_value)
    return false;
  if (lhs.uint8_value < rhs.uint8_value)
    return true;
  if (rhs.uint8_value < lhs.uint8_value)
    return false;
  if (lhs.int16_value < rhs.int16_value)
    return true;
  if (rhs.int16_value < lhs.int16_value)
    return false;
  if (lhs.uint16_value < rhs.uint16_value)
    return true;
  if (rhs.uint16_value < lhs.uint16_value)
    return false;
  if (lhs.int32_value < rhs.int32_value)
    return true;
  if (rhs.int32_value < lhs.int32_value)
    return false;
  if (lhs.uint32_value < rhs.uint32_value)
    return true;
  if (rhs.uint32_value < lhs.uint32_value)
    return false;
  if (lhs.int64_value < rhs.int64_value)
    return true;
  if (rhs.int64_value < lhs.int64_value)
    return false;
  if (lhs.uint64_value < rhs.uint64_value)
    return true;
  if (rhs.uint64_value < lhs.uint64_value)
    return false;
  if (lhs.float_value < rhs.float_value)
    return true;
  if (rhs.float_value < lhs.float_value)
    return false;
  if (lhs.double_value < rhs.double_value)
    return true;
  if (rhs.double_value < lhs.double_value)
    return false;
  if (lhs.string_value < rhs.string_value)
    return true;
  if (rhs.string_value < lhs.string_value)
    return false;
  return false;
}


}  // namespace blink
}  // namespace tstest
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::tstest::blink::EmptyStruct::DataView,
                                         ::mojo::tstest::blink::EmptyStructPtr> {
  static bool IsNull(const ::mojo::tstest::blink::EmptyStructPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::blink::EmptyStructPtr* output) { output->reset(); }

  static bool Read(::mojo::tstest::blink::EmptyStruct::DataView input, ::mojo::tstest::blink::EmptyStructPtr* output);
};


template <>
struct  StructTraits<::mojo::tstest::blink::StructMemberStruct::DataView,
                                         ::mojo::tstest::blink::StructMemberStructPtr> {
  static bool IsNull(const ::mojo::tstest::blink::StructMemberStructPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::blink::StructMemberStructPtr* output) { output->reset(); }

  static const decltype(::mojo::tstest::blink::StructMemberStruct::empty_struct)& empty_struct(
      const ::mojo::tstest::blink::StructMemberStructPtr& input) {
    return input->empty_struct;
  }

  static bool Read(::mojo::tstest::blink::StructMemberStruct::DataView input, ::mojo::tstest::blink::StructMemberStructPtr* output);
};


template <>
struct  StructTraits<::mojo::tstest::blink::IntStruct::DataView,
                                         ::mojo::tstest::blink::IntStructPtr> {
  static bool IsNull(const ::mojo::tstest::blink::IntStructPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::blink::IntStructPtr* output) { output->reset(); }

  static decltype(::mojo::tstest::blink::IntStruct::value) value(
      const ::mojo::tstest::blink::IntStructPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::tstest::blink::IntStruct::DataView input, ::mojo::tstest::blink::IntStructPtr* output);
};


template <>
struct  StructTraits<::mojo::tstest::blink::BoolStruct::DataView,
                                         ::mojo::tstest::blink::BoolStructPtr> {
  static bool IsNull(const ::mojo::tstest::blink::BoolStructPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::blink::BoolStructPtr* output) { output->reset(); }

  static decltype(::mojo::tstest::blink::BoolStruct::value) value(
      const ::mojo::tstest::blink::BoolStructPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::tstest::blink::BoolStruct::DataView input, ::mojo::tstest::blink::BoolStructPtr* output);
};


template <>
struct  StructTraits<::mojo::tstest::blink::NoDefaultValuesStruct::DataView,
                                         ::mojo::tstest::blink::NoDefaultValuesStructPtr> {
  static bool IsNull(const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::blink::NoDefaultValuesStructPtr* output) { output->reset(); }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::bool_value) bool_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->bool_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::int8_value) int8_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->int8_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::uint8_value) uint8_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->uint8_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::int16_value) int16_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->int16_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::uint16_value) uint16_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->uint16_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::int32_value) int32_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->int32_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::uint32_value) uint32_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->uint32_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::int64_value) int64_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->int64_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::uint64_value) uint64_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->uint64_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::float_value) float_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->float_value;
  }

  static decltype(::mojo::tstest::blink::NoDefaultValuesStruct::double_value) double_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->double_value;
  }

  static const decltype(::mojo::tstest::blink::NoDefaultValuesStruct::string_value)& string_value(
      const ::mojo::tstest::blink::NoDefaultValuesStructPtr& input) {
    return input->string_value;
  }

  static bool Read(::mojo::tstest::blink::NoDefaultValuesStruct::DataView input, ::mojo::tstest::blink::NoDefaultValuesStructPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTYwMSwgImJlZ2luIjogMTU5MCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkVtcHR5U3RydWN0In19LCB7ImVu
ZCI6IDYxMDQsICJiZWdpbiI6IDYwOTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRzdGVzdC5JbnRTdHJ1Y3QifX0sIHsiZW5kIjogOTY1MSwgImJlZ2lu
IjogOTY0NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dHN0ZXN0LkludFN0cnVjdC52YWx1ZSJ9fSwgeyJlbmQiOiAxMDY2NSwgImJlZ2luIjogMTA2NTUs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRzdGVzdC5C
b29sU3RydWN0In19LCB7ImVuZCI6IDE0MjMzLCAiYmVnaW4iOiAxNDIyOCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LkJvb2xTdHJ1Y3QudmFs
dWUifX0sIHsiZW5kIjogMTUyNzEsICJiZWdpbiI6IDE1MjUzLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuU3RydWN0TWVtYmVyU3RydWN0In19
LCB7ImVuZCI6IDE5MDgwLCAiYmVnaW4iOiAxOTA2OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LlN0cnVjdE1lbWJlclN0cnVjdC5lbXB0eV9z
dHJ1Y3QifX0sIHsiZW5kIjogMjAyMDIsICJiZWdpbiI6IDIwMTgxLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuTm9EZWZhdWx0VmFsdWVzU3Ry
dWN0In19LCB7ImVuZCI6IDI0MzYyLCAiYmVnaW4iOiAyNDM1MiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0Lk5vRGVmYXVsdFZhbHVlc1N0cnVj
dC5ib29sX3ZhbHVlIn19LCB7ImVuZCI6IDI0NDUxLCAiYmVnaW4iOiAyNDQ0MSwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0Lk5vRGVmYXVsdFZh
bHVlc1N0cnVjdC5pbnQ4X3ZhbHVlIn19LCB7ImVuZCI6IDI0NTQzLCAiYmVnaW4iOiAyNDUzMiwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0Lk5v
RGVmYXVsdFZhbHVlc1N0cnVjdC51aW50OF92YWx1ZSJ9fSwgeyJlbmQiOiAyNDYzNSwgImJlZ2lu
IjogMjQ2MjQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pv
LnRzdGVzdC5Ob0RlZmF1bHRWYWx1ZXNTdHJ1Y3QuaW50MTZfdmFsdWUifX0sIHsiZW5kIjogMjQ3
MzAsICJiZWdpbiI6IDI0NzE4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50c3Rlc3QuTm9EZWZhdWx0VmFsdWVzU3RydWN0LnVpbnQxNl92YWx1ZSJ9fSwg
eyJlbmQiOiAyNDgyMiwgImJlZ2luIjogMjQ4MTEsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRzdGVzdC5Ob0RlZmF1bHRWYWx1ZXNTdHJ1Y3QuaW50MzJf
dmFsdWUifX0sIHsiZW5kIjogMjQ5MTcsICJiZWdpbiI6IDI0OTA1LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuTm9EZWZhdWx0VmFsdWVzU3Ry
dWN0LnVpbnQzMl92YWx1ZSJ9fSwgeyJlbmQiOiAyNTAwOSwgImJlZ2luIjogMjQ5OTgsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRzdGVzdC5Ob0RlZmF1
bHRWYWx1ZXNTdHJ1Y3QuaW50NjRfdmFsdWUifX0sIHsiZW5kIjogMjUxMDQsICJiZWdpbiI6IDI1
MDkyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rl
c3QuTm9EZWZhdWx0VmFsdWVzU3RydWN0LnVpbnQ2NF92YWx1ZSJ9fSwgeyJlbmQiOiAyNTE5NCwg
ImJlZ2luIjogMjUxODMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRzdGVzdC5Ob0RlZmF1bHRWYWx1ZXNTdHJ1Y3QuZmxvYXRfdmFsdWUifX0sIHsiZW5k
IjogMjUyODcsICJiZWdpbiI6IDI1Mjc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50c3Rlc3QuTm9EZWZhdWx0VmFsdWVzU3RydWN0LmRvdWJsZV92YWx1
ZSJ9fSwgeyJlbmQiOiAyNTM4NSwgImJlZ2luIjogMjUzNzMsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRzdGVzdC5Ob0RlZmF1bHRWYWx1ZXNTdHJ1Y3Qu
c3RyaW5nX3ZhbHVlIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/