// mojo/public/js/ts/bindings/tests/structs.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/js/ts/bindings/tests/structs.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.tstest');



  function EmptyStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EmptyStruct.prototype.initDefaults_ = function() {
  };
  EmptyStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EmptyStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EmptyStruct.encodedSize = codec.kStructHeaderSize + 0;

  EmptyStruct.decode = function(decoder) {
    var packed;
    var val = new EmptyStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  EmptyStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EmptyStruct.encodedSize);
    encoder.writeUint32(0);
  };
  function StructMemberStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructMemberStruct.prototype.initDefaults_ = function() {
    this.emptyStruct = null;
  };
  StructMemberStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructMemberStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructMemberStruct.emptyStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EmptyStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructMemberStruct.encodedSize = codec.kStructHeaderSize + 8;

  StructMemberStruct.decode = function(decoder) {
    var packed;
    var val = new StructMemberStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.emptyStruct =
        decoder.decodeStructPointer(EmptyStruct);
    return val;
  };

  StructMemberStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructMemberStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EmptyStruct, val.emptyStruct);
  };
  function IntStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IntStruct.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  IntStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IntStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IntStruct.encodedSize = codec.kStructHeaderSize + 8;

  IntStruct.decode = function(decoder) {
    var packed;
    var val = new IntStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IntStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IntStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function BoolStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BoolStruct.prototype.initDefaults_ = function() {
    this.value = false;
  };
  BoolStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BoolStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BoolStruct.encodedSize = codec.kStructHeaderSize + 8;

  BoolStruct.decode = function(decoder) {
    var packed;
    var val = new BoolStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BoolStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BoolStruct.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function NoDefaultValuesStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NoDefaultValuesStruct.prototype.initDefaults_ = function() {
    this.boolValue = false;
    this.int8Value = 0;
    this.uint8Value = 0;
    this.int16Value = 0;
    this.uint16Value = 0;
    this.int32Value = 0;
    this.uint32Value = 0;
    this.int64Value = 0;
    this.uint64Value = 0;
    this.floatValue = 0;
    this.doubleValue = 0;
    this.stringValue = null;
  };
  NoDefaultValuesStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NoDefaultValuesStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;













    // validate NoDefaultValuesStruct.stringValue
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NoDefaultValuesStruct.encodedSize = codec.kStructHeaderSize + 56;

  NoDefaultValuesStruct.decode = function(decoder) {
    var packed;
    var val = new NoDefaultValuesStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.boolValue = (packed >> 0) & 1 ? true : false;
    val.int8Value =
        decoder.decodeStruct(codec.Int8);
    val.uint8Value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.int16Value =
        decoder.decodeStruct(codec.Int16);
    val.uint16Value =
        decoder.decodeStruct(codec.Uint16);
    val.int32Value =
        decoder.decodeStruct(codec.Int32);
    val.uint32Value =
        decoder.decodeStruct(codec.Uint32);
    val.int64Value =
        decoder.decodeStruct(codec.Int64);
    val.uint64Value =
        decoder.decodeStruct(codec.Uint64);
    val.floatValue =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.doubleValue =
        decoder.decodeStruct(codec.Double);
    val.stringValue =
        decoder.decodeStruct(codec.String);
    return val;
  };

  NoDefaultValuesStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NoDefaultValuesStruct.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.boolValue & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.int8Value);
    encoder.encodeStruct(codec.Uint8, val.uint8Value);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.int16Value);
    encoder.encodeStruct(codec.Uint16, val.uint16Value);
    encoder.encodeStruct(codec.Int32, val.int32Value);
    encoder.encodeStruct(codec.Uint32, val.uint32Value);
    encoder.encodeStruct(codec.Int64, val.int64Value);
    encoder.encodeStruct(codec.Uint64, val.uint64Value);
    encoder.encodeStruct(codec.Float, val.floatValue);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.doubleValue);
    encoder.encodeStruct(codec.String, val.stringValue);
  };
  exports.EmptyStruct = EmptyStruct;
  exports.StructMemberStruct = StructMemberStruct;
  exports.IntStruct = IntStruct;
  exports.BoolStruct = BoolStruct;
  exports.NoDefaultValuesStruct = NoDefaultValuesStruct;
})();