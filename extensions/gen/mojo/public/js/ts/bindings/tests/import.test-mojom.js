// mojo/public/js/ts/bindings/tests/import.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/js/ts/bindings/tests/import.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.tstest.imported');
  var export1$ =
      mojo.internal.exposeNamespace('mojo.tstest.exported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/export1.test-mojom', 'export1.test-mojom.js');
  }
  var export2$ =
      mojo.internal.exposeNamespace('mojo.tstest.exported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/export2.test-mojom', 'export2.test-mojom.js');
  }
  var export4$ =
      mojo.internal.exposeNamespace('mojo.tstest.exported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/export4.test-mojom', 'export4.test-mojom.js');
  }
  var other_dir$ =
      mojo.internal.exposeNamespace('mojo.tstest.exported');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/other_dir/other_dir.test-mojom', 'other_dir/other_dir.test-mojom.js');
  }
  var export_other1$ =
      mojo.internal.exposeNamespace('mojo.tstest.exportedOther');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/export_other1.test-mojom', 'export_other1.test-mojom.js');
  }
  var export_other3$ =
      mojo.internal.exposeNamespace('mojo.tstest.exportedOther');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/ts/bindings/tests/export_other3.test-mojom', 'export_other3.test-mojom.js');
  }


  var IMPORTED_ONE = 1;
  var IMPORTED_TWO = 2;
  var IMPORTED_THREE = 3;
  var IMPORTED_OTHER_DIR = 1;
  var IMPORTED_OTHER_ONE = 1;
  var IMPORTED_OTHER_TWO = 2;

  function StructWithImportedStructs(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithImportedStructs.prototype.initDefaults_ = function() {
    this.val1 = null;
    this.val2 = null;
    this.val4 = null;
    this.valOtherDir = null;
    this.valOther1 = null;
    this.valOther3 = null;
  };
  StructWithImportedStructs.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithImportedStructs.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.val1
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, export1$.ExportedStructOne, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.val2
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, export2$.ExportedStructTwo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.val4
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, export4$.ExportedStructFour, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.valOtherDir
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, other_dir$.ExportedStructOtherDir, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.valOther1
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, export_other1$.ExportedStructOne, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithImportedStructs.valOther3
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, export_other3$.ExportedStructThree, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithImportedStructs.encodedSize = codec.kStructHeaderSize + 48;

  StructWithImportedStructs.decode = function(decoder) {
    var packed;
    var val = new StructWithImportedStructs();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.val1 =
        decoder.decodeStructPointer(export1$.ExportedStructOne);
    val.val2 =
        decoder.decodeStructPointer(export2$.ExportedStructTwo);
    val.val4 =
        decoder.decodeStructPointer(export4$.ExportedStructFour);
    val.valOtherDir =
        decoder.decodeStructPointer(other_dir$.ExportedStructOtherDir);
    val.valOther1 =
        decoder.decodeStructPointer(export_other1$.ExportedStructOne);
    val.valOther3 =
        decoder.decodeStructPointer(export_other3$.ExportedStructThree);
    return val;
  };

  StructWithImportedStructs.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithImportedStructs.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(export1$.ExportedStructOne, val.val1);
    encoder.encodeStructPointer(export2$.ExportedStructTwo, val.val2);
    encoder.encodeStructPointer(export4$.ExportedStructFour, val.val4);
    encoder.encodeStructPointer(other_dir$.ExportedStructOtherDir, val.valOtherDir);
    encoder.encodeStructPointer(export_other1$.ExportedStructOne, val.valOther1);
    encoder.encodeStructPointer(export_other3$.ExportedStructThree, val.valOther3);
  };
  exports.IMPORTED_ONE = IMPORTED_ONE;
  exports.IMPORTED_TWO = IMPORTED_TWO;
  exports.IMPORTED_THREE = IMPORTED_THREE;
  exports.IMPORTED_OTHER_DIR = IMPORTED_OTHER_DIR;
  exports.IMPORTED_OTHER_ONE = IMPORTED_OTHER_ONE;
  exports.IMPORTED_OTHER_TWO = IMPORTED_OTHER_TWO;
  exports.StructWithImportedStructs = StructWithImportedStructs;
})();