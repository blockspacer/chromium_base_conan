// mojo/public/js/ts/bindings/tests/import.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/import.test-mojom-shared.h"
#include "mojo/public/js/ts/bindings/tests/import.test-mojom-blink-forward.h"
#include "mojo/public/js/ts/bindings/tests/export1.test-mojom-blink.h"
#include "mojo/public/js/ts/bindings/tests/export2.test-mojom-blink.h"
#include "mojo/public/js/ts/bindings/tests/export4.test-mojom-blink.h"
#include "mojo/public/js/ts/bindings/tests/other_dir/other_dir.test-mojom-blink.h"
#include "mojo/public/js/ts/bindings/tests/export_other1.test-mojom-blink.h"
#include "mojo/public/js/ts/bindings/tests/export_other3.test-mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"





#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {
namespace imported {
namespace blink {








// @generated_from: mojo.tstest.imported.StructWithImportedStructs
class  StructWithImportedStructs {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithImportedStructs, T>::value>;
  using DataView = StructWithImportedStructsDataView;
  using Data_ = internal::StructWithImportedStructs_Data;

  template <typename... Args>
  static StructWithImportedStructsPtr New(Args&&... args) {
    return StructWithImportedStructsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithImportedStructsPtr From(const U& u) {
    return mojo::TypeConverter<StructWithImportedStructsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithImportedStructs>::Convert(*this);
  }


  StructWithImportedStructs();

  StructWithImportedStructs(
      ::mojo::tstest::exported::blink::ExportedStructOnePtr val1,
      ::mojo::tstest::exported::blink::ExportedStructTwoPtr val2,
      ::mojo::tstest::exported::blink::ExportedStructFourPtr val4,
      ::mojo::tstest::exported::blink::ExportedStructOtherDirPtr val_other_dir,
      ::mojo::tstest::exported_other::blink::ExportedStructOnePtr val_other1,
      ::mojo::tstest::exported_other::blink::ExportedStructThreePtr val_other3);

  ~StructWithImportedStructs();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithImportedStructsPtr>
  StructWithImportedStructsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithImportedStructs::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithImportedStructs::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithImportedStructs_UnserializedMessageContext<
            UserType, StructWithImportedStructs::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithImportedStructs::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructWithImportedStructs::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithImportedStructs_UnserializedMessageContext<
            UserType, StructWithImportedStructs::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithImportedStructs::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val1
  ::mojo::tstest::exported::blink::ExportedStructOnePtr val1;
  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val2
  ::mojo::tstest::exported::blink::ExportedStructTwoPtr val2;
  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val4
  ::mojo::tstest::exported::blink::ExportedStructFourPtr val4;
  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val_other_dir
  ::mojo::tstest::exported::blink::ExportedStructOtherDirPtr val_other_dir;
  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val_other1
  ::mojo::tstest::exported_other::blink::ExportedStructOnePtr val_other1;
  
// @generated_from: mojo.tstest.imported.StructWithImportedStructs.val_other3
  ::mojo::tstest::exported_other::blink::ExportedStructThreePtr val_other3;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(StructWithImportedStructs);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithImportedStructs::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
StructWithImportedStructsPtr StructWithImportedStructs::Clone() const {
  return New(
      mojo::Clone(val1),
      mojo::Clone(val2),
      mojo::Clone(val4),
      mojo::Clone(val_other_dir),
      mojo::Clone(val_other1),
      mojo::Clone(val_other3)
  );
}

template <typename T, StructWithImportedStructs::EnableIfSame<T>*>
bool StructWithImportedStructs::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->val1, other_struct.val1))
    return false;
  if (!mojo::Equals(this->val2, other_struct.val2))
    return false;
  if (!mojo::Equals(this->val4, other_struct.val4))
    return false;
  if (!mojo::Equals(this->val_other_dir, other_struct.val_other_dir))
    return false;
  if (!mojo::Equals(this->val_other1, other_struct.val_other1))
    return false;
  if (!mojo::Equals(this->val_other3, other_struct.val_other3))
    return false;
  return true;
}

template <typename T, StructWithImportedStructs::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.val1 < rhs.val1)
    return true;
  if (rhs.val1 < lhs.val1)
    return false;
  if (lhs.val2 < rhs.val2)
    return true;
  if (rhs.val2 < lhs.val2)
    return false;
  if (lhs.val4 < rhs.val4)
    return true;
  if (rhs.val4 < lhs.val4)
    return false;
  if (lhs.val_other_dir < rhs.val_other_dir)
    return true;
  if (rhs.val_other_dir < lhs.val_other_dir)
    return false;
  if (lhs.val_other1 < rhs.val_other1)
    return true;
  if (rhs.val_other1 < lhs.val_other1)
    return false;
  if (lhs.val_other3 < rhs.val_other3)
    return true;
  if (rhs.val_other3 < lhs.val_other3)
    return false;
  return false;
}


}  // namespace blink
}  // namespace imported
}  // namespace tstest
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::tstest::imported::blink::StructWithImportedStructs::DataView,
                                         ::mojo::tstest::imported::blink::StructWithImportedStructsPtr> {
  static bool IsNull(const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) { return !input; }
  static void SetToNull(::mojo::tstest::imported::blink::StructWithImportedStructsPtr* output) { output->reset(); }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val1)& val1(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val1;
  }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val2)& val2(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val2;
  }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val4)& val4(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val4;
  }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val_other_dir)& val_other_dir(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val_other_dir;
  }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val_other1)& val_other1(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val_other1;
  }

  static const decltype(::mojo::tstest::imported::blink::StructWithImportedStructs::val_other3)& val_other3(
      const ::mojo::tstest::imported::blink::StructWithImportedStructsPtr& input) {
    return input->val_other3;
  }

  static bool Read(::mojo::tstest::imported::blink::StructWithImportedStructs::DataView input, ::mojo::tstest::imported::blink::StructWithImportedStructsPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_IMPORT_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjEwNywgImJlZ2luIjogMjA4MiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LmltcG9ydGVkLlN0cnVjdFdpdGhJ
bXBvcnRlZFN0cnVjdHMifX0sIHsiZW5kIjogNjUxNiwgImJlZ2luIjogNjUxMiwgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LmltcG9ydGVkLlN0
cnVjdFdpdGhJbXBvcnRlZFN0cnVjdHMudmFsMSJ9fSwgeyJlbmQiOiA2NjUzLCAiYmVnaW4iOiA2
NjQ5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rl
c3QuaW1wb3J0ZWQuU3RydWN0V2l0aEltcG9ydGVkU3RydWN0cy52YWwyIn19LCB7ImVuZCI6IDY3
OTEsICJiZWdpbiI6IDY3ODcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRzdGVzdC5pbXBvcnRlZC5TdHJ1Y3RXaXRoSW1wb3J0ZWRTdHJ1Y3RzLnZhbDQi
fX0sIHsiZW5kIjogNjk1MSwgImJlZ2luIjogNjkzOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udHN0ZXN0LmltcG9ydGVkLlN0cnVjdFdpdGhJbXBvcnRl
ZFN0cnVjdHMudmFsX290aGVyX2RpciJ9fSwgeyJlbmQiOiA3MTA2LCAiYmVnaW4iOiA3MDk2LCAi
ZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMi
LCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVt
L3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50c3Rlc3QuaW1w
b3J0ZWQuU3RydWN0V2l0aEltcG9ydGVkU3RydWN0cy52YWxfb3RoZXIxIn19LCB7ImVuZCI6IDcy
NjMsICJiZWdpbiI6IDcyNTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRzdGVzdC5pbXBvcnRlZC5TdHJ1Y3RXaXRoSW1wb3J0ZWRTdHJ1Y3RzLnZhbF9v
dGhlcjMifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/