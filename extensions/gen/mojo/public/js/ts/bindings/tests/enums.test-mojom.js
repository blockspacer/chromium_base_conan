// mojo/public/js/ts/bindings/tests/enums.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/js/ts/bindings/tests/enums.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.tstest');


  var EmptyEnum = {};

  EmptyEnum.isKnownEnumValue = function(value) {
    return false;
  };

  EmptyEnum.toKnownEnumValue = function(value) {
    return value;
  };

  EmptyEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EnumWithNoValues = {};
  EnumWithNoValues.ZERO = 0;
  EnumWithNoValues.ONE = 1;
  EnumWithNoValues.TWO = 2;
  EnumWithNoValues.MIN_VALUE = 0;
  EnumWithNoValues.MAX_VALUE = 2;

  EnumWithNoValues.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  EnumWithNoValues.toKnownEnumValue = function(value) {
    return value;
  };

  EnumWithNoValues.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EnumWithFirstValue = {};
  EnumWithFirstValue.FIVE = 5;
  EnumWithFirstValue.SIX = 6;
  EnumWithFirstValue.SEVEN = 7;
  EnumWithFirstValue.MIN_VALUE = 5;
  EnumWithFirstValue.MAX_VALUE = 7;

  EnumWithFirstValue.isKnownEnumValue = function(value) {
    switch (value) {
    case 5:
    case 6:
    case 7:
      return true;
    }
    return false;
  };

  EnumWithFirstValue.toKnownEnumValue = function(value) {
    return value;
  };

  EnumWithFirstValue.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EnumWithLastValue = {};
  EnumWithLastValue.ZERO = 0;
  EnumWithLastValue.ONE = 1;
  EnumWithLastValue.TEN = 10;
  EnumWithLastValue.MIN_VALUE = 0;
  EnumWithLastValue.MAX_VALUE = 10;

  EnumWithLastValue.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 10:
      return true;
    }
    return false;
  };

  EnumWithLastValue.toKnownEnumValue = function(value) {
    return value;
  };

  EnumWithLastValue.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EnumWithInterspersedValues = {};
  EnumWithInterspersedValues.ZERO = 0;
  EnumWithInterspersedValues.THREE = 3;
  EnumWithInterspersedValues.FOUR = 4;
  EnumWithInterspersedValues.EIGHT = 8;
  EnumWithInterspersedValues.NINE = 9;
  EnumWithInterspersedValues.MIN_VALUE = 0;
  EnumWithInterspersedValues.MAX_VALUE = 9;

  EnumWithInterspersedValues.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 3:
    case 4:
    case 8:
    case 9:
      return true;
    }
    return false;
  };

  EnumWithInterspersedValues.toKnownEnumValue = function(value) {
    return value;
  };

  EnumWithInterspersedValues.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  exports.EmptyEnum = EmptyEnum;
  exports.EnumWithNoValues = EnumWithNoValues;
  exports.EnumWithFirstValue = EnumWithFirstValue;
  exports.EnumWithLastValue = EnumWithLastValue;
  exports.EnumWithInterspersedValues = EnumWithInterspersedValues;
})();