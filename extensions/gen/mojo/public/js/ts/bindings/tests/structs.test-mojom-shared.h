// mojo/public/js/ts/bindings/tests/structs.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/structs.test-mojom-shared-internal.h"




#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {
class EmptyStructDataView;

class StructMemberStructDataView;

class IntStructDataView;

class BoolStructDataView;

class NoDefaultValuesStructDataView;



}  // namespace tstest
}  // namespace mojo

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mojo::tstest::EmptyStructDataView> {
  using Data = ::mojo::tstest::internal::EmptyStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::mojo::tstest::StructMemberStructDataView> {
  using Data = ::mojo::tstest::internal::StructMemberStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::mojo::tstest::IntStructDataView> {
  using Data = ::mojo::tstest::internal::IntStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::mojo::tstest::BoolStructDataView> {
  using Data = ::mojo::tstest::internal::BoolStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::mojo::tstest::NoDefaultValuesStructDataView> {
  using Data = ::mojo::tstest::internal::NoDefaultValuesStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace tstest {


class EmptyStructDataView {
 public:
  EmptyStructDataView() {}

  EmptyStructDataView(
      internal::EmptyStruct_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::EmptyStruct_Data* data_ = nullptr;
};



class StructMemberStructDataView {
 public:
  StructMemberStructDataView() {}

  StructMemberStructDataView(
      internal::StructMemberStruct_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEmptyStructDataView(
      EmptyStructDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEmptyStruct(UserType* output) {
    
    auto* pointer = data_->empty_struct.Get();
    return mojo::internal::Deserialize<::mojo::tstest::EmptyStructDataView>(
        pointer, output, message_);
  }
 private:
  internal::StructMemberStruct_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IntStructDataView {
 public:
  IntStructDataView() {}

  IntStructDataView(
      internal::IntStruct_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int8_t value() const {
    return data_->value;
  }
 private:
  internal::IntStruct_Data* data_ = nullptr;
};



class BoolStructDataView {
 public:
  BoolStructDataView() {}

  BoolStructDataView(
      internal::BoolStruct_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool value() const {
    return data_->value;
  }
 private:
  internal::BoolStruct_Data* data_ = nullptr;
};



class NoDefaultValuesStructDataView {
 public:
  NoDefaultValuesStructDataView() {}

  NoDefaultValuesStructDataView(
      internal::NoDefaultValuesStruct_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool bool_value() const {
    return data_->bool_value;
  }
  int8_t int8_value() const {
    return data_->int8_value;
  }
  uint8_t uint8_value() const {
    return data_->uint8_value;
  }
  int16_t int16_value() const {
    return data_->int16_value;
  }
  uint16_t uint16_value() const {
    return data_->uint16_value;
  }
  int32_t int32_value() const {
    return data_->int32_value;
  }
  uint32_t uint32_value() const {
    return data_->uint32_value;
  }
  int64_t int64_value() const {
    return data_->int64_value;
  }
  uint64_t uint64_value() const {
    return data_->uint64_value;
  }
  float float_value() const {
    return data_->float_value;
  }
  double double_value() const {
    return data_->double_value;
  }
  inline void GetStringValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStringValue(UserType* output) {
    
    auto* pointer = data_->string_value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NoDefaultValuesStruct_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace tstest
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::EmptyStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::EmptyStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::internal::EmptyStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
  }

  static bool Deserialize(::mojo::tstest::internal::EmptyStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::EmptyStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::StructMemberStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::StructMemberStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::internal::StructMemberStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::empty_struct(input)) in_empty_struct = Traits::empty_struct(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->empty_struct)::BaseType> empty_struct_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::EmptyStructDataView>(
        in_empty_struct, empty_struct_fragment);
    fragment->empty_struct.Set(
        empty_struct_fragment.is_null() ? nullptr : empty_struct_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->empty_struct.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null empty_struct in StructMemberStruct struct");
  }

  static bool Deserialize(::mojo::tstest::internal::StructMemberStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::StructMemberStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::IntStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::IntStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::internal::IntStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->value = Traits::value(input);
  }

  static bool Deserialize(::mojo::tstest::internal::IntStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::IntStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::BoolStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::BoolStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::internal::BoolStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->value = Traits::value(input);
  }

  static bool Deserialize(::mojo::tstest::internal::BoolStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::BoolStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::NoDefaultValuesStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::NoDefaultValuesStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::internal::NoDefaultValuesStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->bool_value = Traits::bool_value(input);
    fragment->int8_value = Traits::int8_value(input);
    fragment->uint8_value = Traits::uint8_value(input);
    fragment->int16_value = Traits::int16_value(input);
    fragment->uint16_value = Traits::uint16_value(input);
    fragment->int32_value = Traits::int32_value(input);
    fragment->uint32_value = Traits::uint32_value(input);
    fragment->int64_value = Traits::int64_value(input);
    fragment->uint64_value = Traits::uint64_value(input);
    fragment->float_value = Traits::float_value(input);
    fragment->double_value = Traits::double_value(input);
    decltype(Traits::string_value(input)) in_string_value = Traits::string_value(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->string_value)::BaseType> string_value_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_string_value, string_value_fragment);
    fragment->string_value.Set(
        string_value_fragment.is_null() ? nullptr : string_value_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->string_value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null string_value in NoDefaultValuesStruct struct");
  }

  static bool Deserialize(::mojo::tstest::internal::NoDefaultValuesStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::NoDefaultValuesStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace tstest {



inline void StructMemberStructDataView::GetEmptyStructDataView(
    EmptyStructDataView* output) {
  auto pointer = data_->empty_struct.Get();
  *output = EmptyStructDataView(pointer, message_);
}






inline void NoDefaultValuesStructDataView::GetStringValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->string_value.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace tstest
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_STRUCTS_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/