// mojo/public/js/ts/bindings/tests/export4.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_EXPORT4_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_EXPORT4_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/ts/bindings/tests/export4.test-mojom-shared-internal.h"
#include "mojo/public/js/ts/bindings/tests/export3.test-mojom-shared.h"




#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace tstest {
namespace exported {
class ExportedStructFourDataView;



}  // namespace exported
}  // namespace tstest
}  // namespace mojo

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mojo::tstest::exported::ExportedStructFourDataView> {
  using Data = ::mojo::tstest::exported::internal::ExportedStructFour_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace tstest {
namespace exported {


class ExportedStructFourDataView {
 public:
  ExportedStructFourDataView() {}

  ExportedStructFourDataView(
      internal::ExportedStructFour_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      ::mojo::tstest::exported::ExportedStructThreeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo::tstest::exported::ExportedStructThreeDataView>(
        pointer, output, message_);
  }
 private:
  internal::ExportedStructFour_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace exported
}  // namespace tstest
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::tstest::exported::ExportedStructFourDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojo::tstest::exported::ExportedStructFourDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojo::tstest::exported::internal::ExportedStructFour_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::value(input)) in_value = Traits::value(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->value)::BaseType> value_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo::tstest::exported::ExportedStructThreeDataView>(
        in_value, value_fragment);
    fragment->value.Set(
        value_fragment.is_null() ? nullptr : value_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in ExportedStructFour struct");
  }

  static bool Deserialize(::mojo::tstest::exported::internal::ExportedStructFour_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojo::tstest::exported::ExportedStructFourDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace tstest {
namespace exported {

inline void ExportedStructFourDataView::GetValueDataView(
    ::mojo::tstest::exported::ExportedStructThreeDataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo::tstest::exported::ExportedStructThreeDataView(pointer, message_);
}



}  // namespace exported
}  // namespace tstest
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_JS_TS_BINDINGS_TESTS_EXPORT4_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/