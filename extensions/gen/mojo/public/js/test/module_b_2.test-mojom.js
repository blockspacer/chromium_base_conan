// mojo/public/js/test/module_b_2.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/js/test/module_b_2.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('moduleB');
  var module_a$ =
      mojo.internal.exposeNamespace('moduleA');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/test/module_a.test-mojom', 'module_a.test-mojom.js');
  }
  var module_b_1$ =
      mojo.internal.exposeNamespace('moduleB');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/js/test/module_b_1.test-mojom', 'module_b_1.test-mojom.js');
  }



  function TestStructB2(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestStructB2.prototype.initDefaults_ = function() {
    this.a1 = null;
    this.a2 = null;
    this.b2 = null;
  };
  TestStructB2.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStructB2.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructB2.a1
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, module_a$.TestStructA1, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructB2.a2
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, module_a$.TestStructA2, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructB2.b2
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, TestStructB2, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStructB2.encodedSize = codec.kStructHeaderSize + 24;

  TestStructB2.decode = function(decoder) {
    var packed;
    var val = new TestStructB2();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a1 =
        decoder.decodeStructPointer(module_a$.TestStructA1);
    val.a2 =
        decoder.decodeStructPointer(module_a$.TestStructA2);
    val.b2 =
        decoder.decodeStructPointer(TestStructB2);
    return val;
  };

  TestStructB2.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStructB2.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(module_a$.TestStructA1, val.a1);
    encoder.encodeStructPointer(module_a$.TestStructA2, val.a2);
    encoder.encodeStructPointer(TestStructB2, val.b2);
  };
  function TestInterface_PassA1_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_PassA1_Params.prototype.initDefaults_ = function() {
    this.a1 = null;
  };
  TestInterface_PassA1_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_PassA1_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_PassA1_Params.a1
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, module_a$.TestStructA1, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_PassA1_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_PassA1_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_PassA1_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a1 =
        decoder.decodeStructPointer(module_a$.TestStructA1);
    return val;
  };

  TestInterface_PassA1_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_PassA1_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(module_a$.TestStructA1, val.a1);
  };
  function TestInterface_PassB1_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_PassB1_Params.prototype.initDefaults_ = function() {
    this.b1 = null;
  };
  TestInterface_PassB1_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_PassB1_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_PassB1_Params.b1
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, module_b_1$.TestStructB1, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_PassB1_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_PassB1_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_PassB1_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.b1 =
        decoder.decodeStructPointer(module_b_1$.TestStructB1);
    return val;
  };

  TestInterface_PassB1_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_PassB1_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(module_b_1$.TestStructB1, val.b1);
  };
  function TestInterface_PassB2_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_PassB2_Params.prototype.initDefaults_ = function() {
    this.b2 = null;
  };
  TestInterface_PassB2_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_PassB2_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_PassB2_Params.b2
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestStructB2, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_PassB2_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_PassB2_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_PassB2_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.b2 =
        decoder.decodeStructPointer(TestStructB2);
    return val;
  };

  TestInterface_PassB2_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_PassB2_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestStructB2, val.b2);
  };
  var kTestInterface_PassA1_Name = 490516208;
  var kTestInterface_PassB1_Name = 2037498148;
  var kTestInterface_PassB2_Name = 212424705;

  function TestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface,
                                                   handleOrPtrInfo);
  }

  function TestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface, associatedInterfacePtrInfo);
  }

  TestInterfaceAssociatedPtr.prototype =
      Object.create(TestInterfacePtr.prototype);
  TestInterfaceAssociatedPtr.prototype.constructor =
      TestInterfaceAssociatedPtr;

  function TestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestInterfacePtr.prototype.passA1 = function() {
    return TestInterfaceProxy.prototype.passA1
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.passA1 = function(a1) {
    var params_ = new TestInterface_PassA1_Params();
    params_.a1 = a1;
    var builder = new codec.MessageV0Builder(
        kTestInterface_PassA1_Name,
        codec.align(TestInterface_PassA1_Params.encodedSize));
    builder.encodeStruct(TestInterface_PassA1_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TestInterfacePtr.prototype.passB1 = function() {
    return TestInterfaceProxy.prototype.passB1
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.passB1 = function(b1) {
    var params_ = new TestInterface_PassB1_Params();
    params_.b1 = b1;
    var builder = new codec.MessageV0Builder(
        kTestInterface_PassB1_Name,
        codec.align(TestInterface_PassB1_Params.encodedSize));
    builder.encodeStruct(TestInterface_PassB1_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TestInterfacePtr.prototype.passB2 = function() {
    return TestInterfaceProxy.prototype.passB2
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.passB2 = function(b2) {
    var params_ = new TestInterface_PassB2_Params();
    params_.b2 = b2;
    var builder = new codec.MessageV0Builder(
        kTestInterface_PassB2_Name,
        codec.align(TestInterface_PassB2_Params.encodedSize));
    builder.encodeStruct(TestInterface_PassB2_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  TestInterfaceStub.prototype.passA1 = function(a1) {
    return this.delegate_ && this.delegate_.passA1 && this.delegate_.passA1(a1);
  }
  TestInterfaceStub.prototype.passB1 = function(b1) {
    return this.delegate_ && this.delegate_.passB1 && this.delegate_.passB1(b1);
  }
  TestInterfaceStub.prototype.passB2 = function(b2) {
    return this.delegate_ && this.delegate_.passB2 && this.delegate_.passB2(b2);
  }

  TestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestInterface_PassA1_Name:
      var params = reader.decodeStruct(TestInterface_PassA1_Params);
      this.passA1(params.a1);
      return true;
    case kTestInterface_PassB1_Name:
      var params = reader.decodeStruct(TestInterface_PassB1_Params);
      this.passB1(params.b1);
      return true;
    case kTestInterface_PassB2_Name:
      var params = reader.decodeStruct(TestInterface_PassB2_Params);
      this.passB2(params.b2);
      return true;
    default:
      return false;
    }
  };

  TestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestInterface_PassA1_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestInterface_PassA1_Params;
      break;
      case kTestInterface_PassB1_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestInterface_PassB1_Params;
      break;
      case kTestInterface_PassB2_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestInterface_PassB2_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface = {
    name: 'module_b.TestInterface',
    kVersion: 0,
    ptrClass: TestInterfacePtr,
    proxyClass: TestInterfaceProxy,
    stubClass: TestInterfaceStub,
    validateRequest: validateTestInterfaceRequest,
    validateResponse: null,
  };
  TestInterfaceStub.prototype.validator = validateTestInterfaceRequest;
  TestInterfaceProxy.prototype.validator = null;
  exports.TestStructB2 = TestStructB2;
  exports.TestInterface = TestInterface;
  exports.TestInterfacePtr = TestInterfacePtr;
  exports.TestInterfaceAssociatedPtr = TestInterfaceAssociatedPtr;
})();