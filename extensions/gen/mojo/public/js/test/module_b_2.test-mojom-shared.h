// mojo/public/js/test/module_b_2.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/test/module_b_2.test-mojom-shared-internal.h"
#include "mojo/public/js/test/module_a.test-mojom-shared.h"
#include "mojo/public/js/test/module_b_1.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace module_b {
class TestStructB2DataView;



}  // namespace module_b

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::module_b::TestStructB2DataView> {
  using Data = ::module_b::internal::TestStructB2_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace module_b {
// Interface base classes. They are used for type safety check.
class TestInterfaceInterfaceBase {};

using TestInterfacePtrDataView =
    mojo::InterfacePtrDataView<TestInterfaceInterfaceBase>;
using TestInterfaceRequestDataView =
    mojo::InterfaceRequestDataView<TestInterfaceInterfaceBase>;
using TestInterfaceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestInterfaceInterfaceBase>;
using TestInterfaceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestInterfaceInterfaceBase>;


class TestStructB2DataView {
 public:
  TestStructB2DataView() {}

  TestStructB2DataView(
      internal::TestStructB2_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetA1DataView(
      ::module_a::TestStructA1DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadA1(UserType* output) {
    
    auto* pointer = data_->a1.Get();
    return mojo::internal::Deserialize<::module_a::TestStructA1DataView>(
        pointer, output, message_);
  }
  inline void GetA2DataView(
      ::module_a::TestStructA2DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadA2(UserType* output) {
    
    auto* pointer = data_->a2.Get();
    return mojo::internal::Deserialize<::module_a::TestStructA2DataView>(
        pointer, output, message_);
  }
  inline void GetB2DataView(
      TestStructB2DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadB2(UserType* output) {
    
    auto* pointer = data_->b2.Get();
    return mojo::internal::Deserialize<::module_b::TestStructB2DataView>(
        pointer, output, message_);
  }
 private:
  internal::TestStructB2_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace module_b

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_b::TestStructB2DataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::module_b::TestStructB2DataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::module_b::internal::TestStructB2_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::a1(input)) in_a1 = Traits::a1(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->a1)::BaseType> a1_fragment(
            fragment.message());
    mojo::internal::Serialize<::module_a::TestStructA1DataView>(
        in_a1, a1_fragment);
    fragment->a1.Set(
        a1_fragment.is_null() ? nullptr : a1_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->a1.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null a1 in TestStructB2 struct");
    decltype(Traits::a2(input)) in_a2 = Traits::a2(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->a2)::BaseType> a2_fragment(
            fragment.message());
    mojo::internal::Serialize<::module_a::TestStructA2DataView>(
        in_a2, a2_fragment);
    fragment->a2.Set(
        a2_fragment.is_null() ? nullptr : a2_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->a2.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null a2 in TestStructB2 struct");
    decltype(Traits::b2(input)) in_b2 = Traits::b2(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->b2)::BaseType> b2_fragment(
            fragment.message());
    mojo::internal::Serialize<::module_b::TestStructB2DataView>(
        in_b2, b2_fragment);
    fragment->b2.Set(
        b2_fragment.is_null() ? nullptr : b2_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->b2.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null b2 in TestStructB2 struct");
  }

  static bool Deserialize(::module_b::internal::TestStructB2_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::module_b::TestStructB2DataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace module_b {

inline void TestStructB2DataView::GetA1DataView(
    ::module_a::TestStructA1DataView* output) {
  auto pointer = data_->a1.Get();
  *output = ::module_a::TestStructA1DataView(pointer, message_);
}
inline void TestStructB2DataView::GetA2DataView(
    ::module_a::TestStructA2DataView* output) {
  auto pointer = data_->a2.Get();
  *output = ::module_a::TestStructA2DataView(pointer, message_);
}
inline void TestStructB2DataView::GetB2DataView(
    TestStructB2DataView* output) {
  auto pointer = data_->b2.Get();
  *output = TestStructB2DataView(pointer, message_);
}



}  // namespace module_b

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/