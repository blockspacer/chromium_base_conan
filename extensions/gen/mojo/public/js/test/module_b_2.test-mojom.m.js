// mojo/public/js/test/module_b_2.test-mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../bindings.js';

import {
  TestStructA2 as moduleA_TestStructA2,
  TestStructA2Spec as moduleA_TestStructA2Spec,
  TestStructA1 as moduleA_TestStructA1,
  TestStructA1Spec as moduleA_TestStructA1Spec
} from './module_a.test-mojom.m.js';

import {
  TestStructB1 as moduleB_TestStructB1,
  TestStructB1Spec as moduleB_TestStructB1Spec
} from './module_b_1.test-mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const TestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'module_b.TestInterface', scope);
  }
};

/** @interface */
export const TestInterfaceInterface = class {
  
  /**
   * @param { !moduleA_TestStructA1 } a1
   */

  passA1(a1) {}
  
  /**
   * @param { !moduleB_TestStructB1 } b1
   */

  passB1(b1) {}
  
  /**
   * @param { !TestStructB2 } b2
   */

  passB2(b2) {}
};

/**
 * @implements { TestInterfaceInterface }
 */
export const TestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!TestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          TestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!TestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !moduleA_TestStructA1 } a1
   */

  passA1(
      a1) {
    this.proxy.sendMessage(
        490516208,
        TestInterface_PassA1_ParamsSpec.$,
        null,
        [
          a1
        ]);
  }

  
  /**
   * @param { !moduleB_TestStructB1 } b1
   */

  passB1(
      b1) {
    this.proxy.sendMessage(
        2037498148,
        TestInterface_PassB1_ParamsSpec.$,
        null,
        [
          b1
        ]);
  }

  
  /**
   * @param { !TestStructB2 } b2
   */

  passB2(
      b2) {
    this.proxy.sendMessage(
        212424705,
        TestInterface_PassB2_ParamsSpec.$,
        null,
        [
          b2
        ]);
  }
};

/**
 * An object which receives request messages for the TestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const TestInterfaceReceiver = class {
  /**
   * @param {!TestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!TestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        TestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        490516208,
        TestInterface_PassA1_ParamsSpec.$,
        null,
        impl.passA1.bind(impl));
    this.helper_internal_.registerHandler(
        2037498148,
        TestInterface_PassB1_ParamsSpec.$,
        null,
        impl.passB1.bind(impl));
    this.helper_internal_.registerHandler(
        212424705,
        TestInterface_PassB2_ParamsSpec.$,
        null,
        impl.passB2.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const TestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "module_b.TestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!TestInterfaceRemote}
   */
  static getRemote() {
    let remote = new TestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const TestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      TestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passA1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        490516208,
        TestInterface_PassA1_ParamsSpec.$,
        null,
        this.passA1.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passB1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2037498148,
        TestInterface_PassB1_ParamsSpec.$,
        null,
        this.passB1.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.passB2 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        212424705,
        TestInterface_PassB2_ParamsSpec.$,
        null,
        this.passB2.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestStructB2Spec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestInterface_PassA1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestInterface_PassB1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestInterface_PassB2_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    TestStructB2Spec.$,
    'TestStructB2',
    [
      mojo.internal.StructField(
        'a1', 0,
        0,
        moduleA_TestStructA1Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'a2', 8,
        0,
        moduleA_TestStructA2Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'b2', 16,
        0,
        TestStructB2Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export const TestStructB2 = class {
  constructor() {
    /** @type { !moduleA_TestStructA1 } */
    this.a1;
    /** @type { !moduleA_TestStructA2 } */
    this.a2;
    /** @type { !TestStructB2 } */
    this.b2;
  }
};



mojo.internal.Struct(
    TestInterface_PassA1_ParamsSpec.$,
    'TestInterface_PassA1_Params',
    [
      mojo.internal.StructField(
        'a1', 0,
        0,
        moduleA_TestStructA1Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestInterface_PassA1_Params = class {
  constructor() {
    /** @type { !moduleA_TestStructA1 } */
    this.a1;
  }
};



mojo.internal.Struct(
    TestInterface_PassB1_ParamsSpec.$,
    'TestInterface_PassB1_Params',
    [
      mojo.internal.StructField(
        'b1', 0,
        0,
        moduleB_TestStructB1Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestInterface_PassB1_Params = class {
  constructor() {
    /** @type { !moduleB_TestStructB1 } */
    this.b1;
  }
};



mojo.internal.Struct(
    TestInterface_PassB2_ParamsSpec.$,
    'TestInterface_PassB2_Params',
    [
      mojo.internal.StructField(
        'b2', 0,
        0,
        TestStructB2Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestInterface_PassB2_Params = class {
  constructor() {
    /** @type { !TestStructB2 } */
    this.b2;
  }
};

