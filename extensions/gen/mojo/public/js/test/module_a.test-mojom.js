// mojo/public/js/test/module_a.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/js/test/module_a.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('moduleA');


  var ModuleEnum = {};
  ModuleEnum.THIRD = 0;
  ModuleEnum.MIN_VALUE = 0;
  ModuleEnum.MAX_VALUE = 0;

  ModuleEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
      return true;
    }
    return false;
  };

  ModuleEnum.toKnownEnumValue = function(value) {
    return value;
  };

  ModuleEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TestStructA1(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestStructA1.prototype.initDefaults_ = function() {
    this.q = null;
    this.r = null;
    this.s = null;
  };
  TestStructA1.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStructA1.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA1.q
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA1.r
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA1.s
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStructA1.encodedSize = codec.kStructHeaderSize + 24;

  TestStructA1.decode = function(decoder) {
    var packed;
    var val = new TestStructA1();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.q =
        decoder.decodeStruct(codec.String);
    val.r =
        decoder.decodeStruct(codec.String);
    val.s =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestStructA1.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStructA1.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.q);
    encoder.encodeStruct(codec.String, val.r);
    encoder.encodeStruct(codec.String, val.s);
  };
  function TestStructA2(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  TestStructA2.NestedEnum = {};
  TestStructA2.NestedEnum.A = 0;
  TestStructA2.NestedEnum.B = 1;
  TestStructA2.NestedEnum.MIN_VALUE = 0;
  TestStructA2.NestedEnum.MAX_VALUE = 1;

  TestStructA2.NestedEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestStructA2.NestedEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestStructA2.NestedEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  TestStructA2.prototype.initDefaults_ = function() {
    this.ax = null;
    this.ay = null;
    this.enumField = 0;
  };
  TestStructA2.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStructA2.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA2.ax
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestStructA1, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA2.ay
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, TestStructA1, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructA2.enumField
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, TestStructA2.NestedEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStructA2.encodedSize = codec.kStructHeaderSize + 24;

  TestStructA2.decode = function(decoder) {
    var packed;
    var val = new TestStructA2();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ax =
        decoder.decodeStructPointer(TestStructA1);
    val.ay =
        decoder.decodeStructPointer(TestStructA1);
    val.enumField =
        decoder.decodeStruct(new codec.Enum(TestStructA2.NestedEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestStructA2.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStructA2.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestStructA1, val.ax);
    encoder.encodeStructPointer(TestStructA1, val.ay);
    encoder.encodeStruct(codec.Int32, val.enumField);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ParentInterface_SomeMethod_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ParentInterface_SomeMethod_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ParentInterface_SomeMethod_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ParentInterface_SomeMethod_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParentInterface_SomeMethod_Params.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ParentInterface.NestedEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ParentInterface_SomeMethod_Params.encodedSize = codec.kStructHeaderSize + 8;

  ParentInterface_SomeMethod_Params.decode = function(decoder) {
    var packed;
    var val = new ParentInterface_SomeMethod_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(ParentInterface.NestedEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ParentInterface_SomeMethod_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ParentInterface_SomeMethod_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kParentInterface_SomeMethod_Name = 652447188;

  function ParentInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ParentInterface,
                                                   handleOrPtrInfo);
  }

  function ParentInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ParentInterface, associatedInterfacePtrInfo);
  }

  ParentInterfaceAssociatedPtr.prototype =
      Object.create(ParentInterfacePtr.prototype);
  ParentInterfaceAssociatedPtr.prototype.constructor =
      ParentInterfaceAssociatedPtr;

  function ParentInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ParentInterfacePtr.prototype.someMethod = function() {
    return ParentInterfaceProxy.prototype.someMethod
        .apply(this.ptr.getProxy(), arguments);
  };

  ParentInterfaceProxy.prototype.someMethod = function(value) {
    var params_ = new ParentInterface_SomeMethod_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kParentInterface_SomeMethod_Name,
        codec.align(ParentInterface_SomeMethod_Params.encodedSize));
    builder.encodeStruct(ParentInterface_SomeMethod_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ParentInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  ParentInterfaceStub.prototype.someMethod = function(value) {
    return this.delegate_ && this.delegate_.someMethod && this.delegate_.someMethod(value);
  }

  ParentInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kParentInterface_SomeMethod_Name:
      var params = reader.decodeStruct(ParentInterface_SomeMethod_Params);
      this.someMethod(params.value);
      return true;
    default:
      return false;
    }
  };

  ParentInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateParentInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kParentInterface_SomeMethod_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ParentInterface_SomeMethod_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateParentInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ParentInterface = {
    name: 'module_a.ParentInterface',
    kVersion: 0,
    ptrClass: ParentInterfacePtr,
    proxyClass: ParentInterfaceProxy,
    stubClass: ParentInterfaceStub,
    validateRequest: validateParentInterfaceRequest,
    validateResponse: null,
  };
  ParentInterface.NestedEnum = {};
  ParentInterface.NestedEnum.FIRST = 0;
  ParentInterface.NestedEnum.SECOND = 1;
  ParentInterface.NestedEnum.MIN_VALUE = 0;
  ParentInterface.NestedEnum.MAX_VALUE = 1;

  ParentInterface.NestedEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ParentInterface.NestedEnum.toKnownEnumValue = function(value) {
    return value;
  };

  ParentInterface.NestedEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  ParentInterfaceStub.prototype.validator = validateParentInterfaceRequest;
  ParentInterfaceProxy.prototype.validator = null;
  exports.ModuleEnum = ModuleEnum;
  exports.TestStructA1 = TestStructA1;
  exports.TestStructA2 = TestStructA2;
  exports.ParentInterface = ParentInterface;
  exports.ParentInterfacePtr = ParentInterfacePtr;
  exports.ParentInterfaceAssociatedPtr = ParentInterfaceAssociatedPtr;
})();