// mojo/public/js/test/module_a.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TEST_MODULE_A_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_JS_TEST_MODULE_A_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/js/test/module_a.test-mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace module_a {
class TestStructA1DataView;

class TestStructA2DataView;



}  // namespace module_a

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::module_a::TestStructA1DataView> {
  using Data = ::module_a::internal::TestStructA1_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::module_a::TestStructA2DataView> {
  using Data = ::module_a::internal::TestStructA2_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace module_a {


// @generated_from: module_a.ModuleEnum
enum class ModuleEnum : int32_t {
  
// @generated_from: module_a.ModuleEnum.THIRD
  THIRD = 0,
  kMinValue = 0,
  kMaxValue = 0,
};

 std::ostream& operator<<(std::ostream& os, ModuleEnum value);
inline bool IsKnownEnumValue(ModuleEnum value) {
  return internal::ModuleEnum_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: module_a.TestStructA2.NestedEnum
enum class TestStructA2_NestedEnum : int32_t {
  
// @generated_from: module_a.TestStructA2.NestedEnum.A
  A = 0,
  
// @generated_from: module_a.TestStructA2.NestedEnum.B
  B = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TestStructA2_NestedEnum value);
inline bool IsKnownEnumValue(TestStructA2_NestedEnum value) {
  return internal::TestStructA2_NestedEnum_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


// @generated_from: module_a.ParentInterface.NestedEnum
enum class ParentInterface_NestedEnum : int32_t {
  
// @generated_from: module_a.ParentInterface.NestedEnum.FIRST
  FIRST = 0,
  
// @generated_from: module_a.ParentInterface.NestedEnum.SECOND
  SECOND = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, ParentInterface_NestedEnum value);
inline bool IsKnownEnumValue(ParentInterface_NestedEnum value) {
  return internal::ParentInterface_NestedEnum_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ParentInterfaceInterfaceBase {};

using ParentInterfacePtrDataView =
    mojo::InterfacePtrDataView<ParentInterfaceInterfaceBase>;
using ParentInterfaceRequestDataView =
    mojo::InterfaceRequestDataView<ParentInterfaceInterfaceBase>;
using ParentInterfaceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ParentInterfaceInterfaceBase>;
using ParentInterfaceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ParentInterfaceInterfaceBase>;


class TestStructA1DataView {
 public:
  TestStructA1DataView() {}

  TestStructA1DataView(
      internal::TestStructA1_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetQDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadQ(UserType* output) {
    
    auto* pointer = data_->q.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetRDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadR(UserType* output) {
    
    auto* pointer = data_->r.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestStructA1_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestStructA2DataView {
 public:
  TestStructA2DataView() {}

  TestStructA2DataView(
      internal::TestStructA2_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAxDataView(
      TestStructA1DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAx(UserType* output) {
    
    auto* pointer = data_->ax.Get();
    return mojo::internal::Deserialize<::module_a::TestStructA1DataView>(
        pointer, output, message_);
  }
  inline void GetAyDataView(
      TestStructA1DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAy(UserType* output) {
    
    auto* pointer = data_->ay.Get();
    return mojo::internal::Deserialize<::module_a::TestStructA1DataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEnumField(UserType* output) const {
    auto data_value = data_->enumField;
    return mojo::internal::Deserialize<::module_a::TestStructA2_NestedEnum>(
        data_value, output);
  }
  TestStructA2_NestedEnum enumField() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::module_a::TestStructA2_NestedEnum>(data_->enumField));
  }
 private:
  internal::TestStructA2_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace module_a

namespace std {

template <>
struct hash<::module_a::ModuleEnum>
    : public mojo::internal::EnumHashImpl<::module_a::ModuleEnum> {};

template <>
struct hash<::module_a::TestStructA2_NestedEnum>
    : public mojo::internal::EnumHashImpl<::module_a::TestStructA2_NestedEnum> {};

template <>
struct hash<::module_a::ParentInterface_NestedEnum>
    : public mojo::internal::EnumHashImpl<::module_a::ParentInterface_NestedEnum> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_a::ModuleEnum, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::module_a::ModuleEnum, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::module_a::ModuleEnum>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_a::TestStructA2_NestedEnum, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::module_a::TestStructA2_NestedEnum, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::module_a::TestStructA2_NestedEnum>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_a::ParentInterface_NestedEnum, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::module_a::ParentInterface_NestedEnum, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::module_a::ParentInterface_NestedEnum>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_a::TestStructA1DataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::module_a::TestStructA1DataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::module_a::internal::TestStructA1_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::q(input)) in_q = Traits::q(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->q)::BaseType> q_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_q, q_fragment);
    fragment->q.Set(
        q_fragment.is_null() ? nullptr : q_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->q.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null q in TestStructA1 struct");
    decltype(Traits::r(input)) in_r = Traits::r(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->r)::BaseType> r_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_r, r_fragment);
    fragment->r.Set(
        r_fragment.is_null() ? nullptr : r_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->r.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null r in TestStructA1 struct");
    decltype(Traits::s(input)) in_s = Traits::s(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->s)::BaseType> s_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_s, s_fragment);
    fragment->s.Set(
        s_fragment.is_null() ? nullptr : s_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->s.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null s in TestStructA1 struct");
  }

  static bool Deserialize(::module_a::internal::TestStructA1_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::module_a::TestStructA1DataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::module_a::TestStructA2DataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::module_a::TestStructA2DataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::module_a::internal::TestStructA2_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ax(input)) in_ax = Traits::ax(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ax)::BaseType> ax_fragment(
            fragment.message());
    mojo::internal::Serialize<::module_a::TestStructA1DataView>(
        in_ax, ax_fragment);
    fragment->ax.Set(
        ax_fragment.is_null() ? nullptr : ax_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ax.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ax in TestStructA2 struct");
    decltype(Traits::ay(input)) in_ay = Traits::ay(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ay)::BaseType> ay_fragment(
            fragment.message());
    mojo::internal::Serialize<::module_a::TestStructA1DataView>(
        in_ay, ay_fragment);
    fragment->ay.Set(
        ay_fragment.is_null() ? nullptr : ay_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ay.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ay in TestStructA2 struct");
    mojo::internal::Serialize<::module_a::TestStructA2_NestedEnum>(
        Traits::enumField(input), &fragment->enumField);
  }

  static bool Deserialize(::module_a::internal::TestStructA2_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::module_a::TestStructA2DataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace module_a {

inline void TestStructA1DataView::GetQDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->q.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TestStructA1DataView::GetRDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->r.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TestStructA1DataView::GetSDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->s.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void TestStructA2DataView::GetAxDataView(
    TestStructA1DataView* output) {
  auto pointer = data_->ax.Get();
  *output = TestStructA1DataView(pointer, message_);
}
inline void TestStructA2DataView::GetAyDataView(
    TestStructA1DataView* output) {
  auto pointer = data_->ay.Get();
  *output = TestStructA1DataView(pointer, message_);
}



}  // namespace module_a

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::module_a::ModuleEnum> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::module_a::ModuleEnum value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::module_a::TestStructA2_NestedEnum> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::module_a::TestStructA2_NestedEnum value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::module_a::ParentInterface_NestedEnum> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::module_a::ParentInterface_NestedEnum value);
};

} // namespace perfetto

#endif  // MOJO_PUBLIC_JS_TEST_MODULE_A_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjA0MiwgImJlZ2luIjogMjAzMiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vZHVsZV9hLk1vZHVsZUVudW0ifX0sIHsiZW5kIjog
MjExMSwgImJlZ2luIjogMjEwNiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vZHVsZV9hLk1vZHVsZUVudW0uVEhJUkQifX0sIHsiZW5kIjogMjQ0NCwgImJlZ2lu
IjogMjQyMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vZHVs
ZV9hLlRlc3RTdHJ1Y3RBMi5OZXN0ZWRFbnVtIn19LCB7ImVuZCI6IDI1MTgsICJiZWdpbiI6IDI1
MTcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVm
aW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hy
b21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2R1bGVfYS5U
ZXN0U3RydWN0QTIuTmVzdGVkRW51bS5BIn19LCB7ImVuZCI6IDI1ODUsICJiZWdpbiI6IDI1ODQs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2R1bGVfYS5UZXN0
U3RydWN0QTIuTmVzdGVkRW51bS5CIn19LCB7ImVuZCI6IDI5NjMsICJiZWdpbiI6IDI5MzcsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2R1bGVfYS5QYXJlbnRJ
bnRlcmZhY2UuTmVzdGVkRW51bSJ9fSwgeyJlbmQiOiAzMDQ4LCAiYmVnaW4iOiAzMDQzLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9kdWxlX2EuUGFyZW50SW50
ZXJmYWNlLk5lc3RlZEVudW0uRklSU1QifX0sIHsiZW5kIjogMzEyOCwgImJlZ2luIjogMzEyMiwg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vZHVsZV9hLlBhcmVu
dEludGVyZmFjZS5OZXN0ZWRFbnVtLlNFQ09ORCJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/