// mojo/public/js/test/module_b_2.test-mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_INTERNAL_H_
#define MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/js/test/module_a.test-mojom-shared-internal.h"
#include "mojo/public/js/test/module_b_1.test-mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif

namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace module_b {
namespace internal {
class TestStructB2_Data;

#pragma pack(push, 1)
class  TestStructB2_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::module_a::internal::TestStructA1_Data> a1;
  mojo::internal::Pointer<::module_a::internal::TestStructA2_Data> a2;
  mojo::internal::Pointer<internal::TestStructB2_Data> b2;

 private:
  friend class mojo::internal::MessageFragment<TestStructB2_Data>;

  TestStructB2_Data();
  ~TestStructB2_Data() = delete;
};
static_assert(sizeof(TestStructB2_Data) == 32,
              "Bad sizeof(TestStructB2_Data)");
// Used by TestStructB2::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TestStructB2_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TestStructB2_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TestStructB2_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TestStructB2_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TestStructB2_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace module_b

#endif  // MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_SHARED_INTERNAL_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/