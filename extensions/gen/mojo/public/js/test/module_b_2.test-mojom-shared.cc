// mojo/public/js/test/module_b_2.test-mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/js/test/module_b_2.test-mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/js/test/module_b_2.test-mojom-params-data.h"
namespace module_b {

namespace internal {


// static
bool TestStructB2_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStructB2_Data* object = static_cast<const TestStructB2_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->a1, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->a1, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->a2, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->a2, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->b2, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->b2, validation_context))
    return false;

  return true;
}

TestStructB2_Data::TestStructB2_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_PassA1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_PassA1_Params_Data* object = static_cast<const TestInterface_PassA1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->a1, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->a1, validation_context))
    return false;

  return true;
}

TestInterface_PassA1_Params_Data::TestInterface_PassA1_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_PassB1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_PassB1_Params_Data* object = static_cast<const TestInterface_PassB1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->b1, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->b1, validation_context))
    return false;

  return true;
}

TestInterface_PassB1_Params_Data::TestInterface_PassB1_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_PassB2_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_PassB2_Params_Data* object = static_cast<const TestInterface_PassB2_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->b2, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->b2, validation_context))
    return false;

  return true;
}

TestInterface_PassB2_Params_Data::TestInterface_PassB2_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace module_b
