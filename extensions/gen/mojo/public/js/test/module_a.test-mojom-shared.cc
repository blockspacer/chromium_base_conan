// mojo/public/js/test/module_a.test-mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/js/test/module_a.test-mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/js/test/module_a.test-mojom-params-data.h"
namespace module_a {

std::string ModuleEnumToString(ModuleEnum value) {
  switch(value) {
    case ModuleEnum::THIRD:
      return "THIRD";
    default:
      return base::StringPrintf("Unknown ModuleEnum value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, ModuleEnum value) {
  return os << ModuleEnumToString(value);
}

std::string TestStructA2_NestedEnumToString(TestStructA2_NestedEnum value) {
  switch(value) {
    case TestStructA2_NestedEnum::A:
      return "A";
    case TestStructA2_NestedEnum::B:
      return "B";
    default:
      return base::StringPrintf("Unknown TestStructA2_NestedEnum value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, TestStructA2_NestedEnum value) {
  return os << TestStructA2_NestedEnumToString(value);
}

std::string ParentInterface_NestedEnumToString(ParentInterface_NestedEnum value) {
  switch(value) {
    case ParentInterface_NestedEnum::FIRST:
      return "FIRST";
    case ParentInterface_NestedEnum::SECOND:
      return "SECOND";
    default:
      return base::StringPrintf("Unknown ParentInterface_NestedEnum value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, ParentInterface_NestedEnum value) {
  return os << ParentInterface_NestedEnumToString(value);
}

namespace internal {


// static
bool TestStructA1_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStructA1_Data* object = static_cast<const TestStructA1_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->q, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams q_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->q, validation_context,
                                         &q_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->r, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams r_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->r, validation_context,
                                         &r_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams s_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->s, validation_context,
                                         &s_validate_params)) {
    return false;
  }

  return true;
}

TestStructA1_Data::TestStructA1_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestStructA2_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStructA2_Data* object = static_cast<const TestStructA2_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ax, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->ax, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ay, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->ay, validation_context))
    return false;


  if (!::module_a::internal::TestStructA2_NestedEnum_Data
        ::Validate(object->enumField, validation_context))
    return false;

  return true;
}

TestStructA2_Data::TestStructA2_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ParentInterface_SomeMethod_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ParentInterface_SomeMethod_Params_Data* object = static_cast<const ParentInterface_SomeMethod_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::module_a::internal::ParentInterface_NestedEnum_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

ParentInterface_SomeMethod_Params_Data::ParentInterface_SomeMethod_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace module_a

namespace perfetto {

// static
void TraceFormatTraits<::module_a::ModuleEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::module_a::ModuleEnum value) {
  return std::move(context).WriteString(::module_a::ModuleEnumToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::module_a::TestStructA2_NestedEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::module_a::TestStructA2_NestedEnum value) {
  return std::move(context).WriteString(::module_a::TestStructA2_NestedEnumToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::module_a::ParentInterface_NestedEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::module_a::ParentInterface_NestedEnum value) {
  return std::move(context).WriteString(::module_a::ParentInterface_NestedEnumToString(value));
}

} // namespace perfetto
