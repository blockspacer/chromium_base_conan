// mojo/public/js/test/module_b_2.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace module_b {
namespace internal {
class  TestInterface_PassA1_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::module_a::internal::TestStructA1_Data> a1;

 private:
  friend class mojo::internal::MessageFragment<TestInterface_PassA1_Params_Data>;

  TestInterface_PassA1_Params_Data();
  ~TestInterface_PassA1_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_PassA1_Params_Data) == 16,
              "Bad sizeof(TestInterface_PassA1_Params_Data)");
class  TestInterface_PassB1_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::module_b::internal::TestStructB1_Data> b1;

 private:
  friend class mojo::internal::MessageFragment<TestInterface_PassB1_Params_Data>;

  TestInterface_PassB1_Params_Data();
  ~TestInterface_PassB1_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_PassB1_Params_Data) == 16,
              "Bad sizeof(TestInterface_PassB1_Params_Data)");
class  TestInterface_PassB2_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::TestStructB2_Data> b2;

 private:
  friend class mojo::internal::MessageFragment<TestInterface_PassB2_Params_Data>;

  TestInterface_PassB2_Params_Data();
  ~TestInterface_PassB2_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_PassB2_Params_Data) == 16,
              "Bad sizeof(TestInterface_PassB2_Params_Data)");

}  // namespace internal


class TestInterface_PassA1_ParamsDataView {
 public:
  TestInterface_PassA1_ParamsDataView() {}

  TestInterface_PassA1_ParamsDataView(
      internal::TestInterface_PassA1_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetA1DataView(
      ::module_a::TestStructA1DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadA1(UserType* output) {
    
    auto* pointer = data_->a1.Get();
    return mojo::internal::Deserialize<::module_a::TestStructA1DataView>(
        pointer, output, message_);
  }
 private:
  internal::TestInterface_PassA1_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestInterface_PassB1_ParamsDataView {
 public:
  TestInterface_PassB1_ParamsDataView() {}

  TestInterface_PassB1_ParamsDataView(
      internal::TestInterface_PassB1_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetB1DataView(
      ::module_b::TestStructB1DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadB1(UserType* output) {
    
    auto* pointer = data_->b1.Get();
    return mojo::internal::Deserialize<::module_b::TestStructB1DataView>(
        pointer, output, message_);
  }
 private:
  internal::TestInterface_PassB1_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestInterface_PassB2_ParamsDataView {
 public:
  TestInterface_PassB2_ParamsDataView() {}

  TestInterface_PassB2_ParamsDataView(
      internal::TestInterface_PassB2_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetB2DataView(
      TestStructB2DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadB2(UserType* output) {
    
    auto* pointer = data_->b2.Get();
    return mojo::internal::Deserialize<::module_b::TestStructB2DataView>(
        pointer, output, message_);
  }
 private:
  internal::TestInterface_PassB2_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void TestInterface_PassA1_ParamsDataView::GetA1DataView(
    ::module_a::TestStructA1DataView* output) {
  auto pointer = data_->a1.Get();
  *output = ::module_a::TestStructA1DataView(pointer, message_);
}


inline void TestInterface_PassB1_ParamsDataView::GetB1DataView(
    ::module_b::TestStructB1DataView* output) {
  auto pointer = data_->b1.Get();
  *output = ::module_b::TestStructB1DataView(pointer, message_);
}


inline void TestInterface_PassB2_ParamsDataView::GetB2DataView(
    TestStructB2DataView* output) {
  auto pointer = data_->b2.Get();
  *output = TestStructB2DataView(pointer, message_);
}

}  // namespace module_b

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_JS_TEST_MODULE_B_2_TEST_MOJOM_PARAMS_DATA_H_