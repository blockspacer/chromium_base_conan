// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace test {
namespace mojom {
class MessageDataView;

class TestStructDataView;



}  // namespace mojom
}  // namespace test

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::test::mojom::MessageDataView> {
  using Data = ::test::mojom::internal::Message_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::test::mojom::TestStructDataView> {
  using Data = ::test::mojom::internal::TestStruct_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace test {
namespace mojom {


// @generated_from: test.mojom.TestEnum
enum class TestEnum : int32_t {
  
// @generated_from: test.mojom.TestEnum.FIRST
  FIRST = 0,
  
// @generated_from: test.mojom.TestEnum.SECOND
  SECOND = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TestEnum value);
inline bool IsKnownEnumValue(TestEnum value) {
  return internal::TestEnum_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class TestPageHandlerInterfaceBase {};

using TestPageHandlerPtrDataView =
    mojo::InterfacePtrDataView<TestPageHandlerInterfaceBase>;
using TestPageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<TestPageHandlerInterfaceBase>;
using TestPageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestPageHandlerInterfaceBase>;
using TestPageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestPageHandlerInterfaceBase>;
class TestPageInterfaceBase {};

using TestPagePtrDataView =
    mojo::InterfacePtrDataView<TestPageInterfaceBase>;
using TestPageRequestDataView =
    mojo::InterfaceRequestDataView<TestPageInterfaceBase>;
using TestPageAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestPageInterfaceBase>;
using TestPageAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestPageInterfaceBase>;


class MessageDataView {
 public:
  MessageDataView() {}

  MessageDataView(
      internal::Message_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::Message_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestStructDataView {
 public:
  TestStructDataView() {}

  TestStructDataView(
      internal::TestStruct_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `title` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTitle` instead "
    "of `ReadTitle if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetEnumsDataView(
      mojo::ArrayDataView<TestEnum>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEnums(UserType* output) {
    
    auto* pointer = data_->enums.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::test::mojom::TestEnum>>(
        pointer, output, message_);
  }
  inline void GetNumberToStringMapDataView(
      mojo::MapDataView<uint32_t, mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNumberToStringMap(UserType* output) {
    
    auto* pointer = data_->numberToStringMap.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetMessageToArrayMapDataView(
      mojo::MapDataView<MessageDataView, mojo::ArrayDataView<MessageDataView>>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessageToArrayMap(UserType* output) {
    
    auto* pointer = data_->messageToArrayMap.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::test::mojom::MessageDataView, mojo::ArrayDataView<::test::mojom::MessageDataView>>>(
        pointer, output, message_);
  }
  inline void GetEnumToMapMapDataView(
      mojo::MapDataView<TestEnum, mojo::MapDataView<TestEnum, TestEnum>>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEnumToMapMap(UserType* output) {
    
    auto* pointer = data_->enumToMapMap.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::test::mojom::TestEnum, mojo::MapDataView<::test::mojom::TestEnum, ::test::mojom::TestEnum>>>(
        pointer, output, message_);
  }
  inline void GetNumberToInterfaceProxyMapDataView(
      mojo::MapDataView<uint32_t, TestPagePtrDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNumberToInterfaceProxyMap(UserType* output) {
    
    auto* pointer = data_->numberToInterfaceProxyMap.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, ::test::mojom::TestPagePtrDataView>>(
        pointer, output, message_);
  }
 private:
  internal::TestStruct_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace test

namespace std {

template <>
struct hash<::test::mojom::TestEnum>
    : public mojo::internal::EnumHashImpl<::test::mojom::TestEnum> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::test::mojom::TestEnum, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::test::mojom::TestEnum, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::test::mojom::TestEnum>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::test::mojom::MessageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::test::mojom::MessageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::test::mojom::internal::Message_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::message(input)) in_message = Traits::message(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->message)::BaseType> message_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_message, message_fragment);
    fragment->message.Set(
        message_fragment.is_null() ? nullptr : message_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->message.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null message in Message struct");
  }

  static bool Deserialize(::test::mojom::internal::Message_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::test::mojom::MessageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::test::mojom::TestStructDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::test::mojom::TestStructDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::test::mojom::internal::TestStruct_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::id(input)) in_id = Traits::id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id)::BaseType> id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, id_fragment);
    fragment->id.Set(
        id_fragment.is_null() ? nullptr : id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in TestStruct struct");
    decltype(Traits::title(input)) in_title = Traits::title(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->title)::BaseType> title_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, title_fragment);
    fragment->title.Set(
        title_fragment.is_null() ? nullptr : title_fragment.data());
    decltype(Traits::enums(input)) in_enums = Traits::enums(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->enums)::BaseType>
        enums_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams enums_validate_params(
        0, ::test::mojom::internal::TestEnum_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::test::mojom::TestEnum>>(
        in_enums, enums_fragment, &enums_validate_params);
    fragment->enums.Set(
        enums_fragment.is_null() ? nullptr : enums_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->enums.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null enums in TestStruct struct");
    decltype(Traits::numberToStringMap(input)) in_numberToStringMap = Traits::numberToStringMap(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->numberToStringMap)::BaseType>
        numberToStringMap_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams numberToStringMap_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
    mojo::internal::Serialize<mojo::MapDataView<uint32_t, mojo::StringDataView>>(
        in_numberToStringMap, numberToStringMap_fragment, &numberToStringMap_validate_params);
    fragment->numberToStringMap.Set(
        numberToStringMap_fragment.is_null() ? nullptr : numberToStringMap_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->numberToStringMap.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null numberToStringMap in TestStruct struct");
    decltype(Traits::messageToArrayMap(input)) in_messageToArrayMap = Traits::messageToArrayMap(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->messageToArrayMap)::BaseType>
        messageToArrayMap_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams messageToArrayMap_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
    mojo::internal::Serialize<mojo::MapDataView<::test::mojom::MessageDataView, mojo::ArrayDataView<::test::mojom::MessageDataView>>>(
        in_messageToArrayMap, messageToArrayMap_fragment, &messageToArrayMap_validate_params);
    fragment->messageToArrayMap.Set(
        messageToArrayMap_fragment.is_null() ? nullptr : messageToArrayMap_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->messageToArrayMap.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null messageToArrayMap in TestStruct struct");
    decltype(Traits::enumToMapMap(input)) in_enumToMapMap = Traits::enumToMapMap(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->enumToMapMap)::BaseType>
        enumToMapMap_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams enumToMapMap_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate), new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate))));
    mojo::internal::Serialize<mojo::MapDataView<::test::mojom::TestEnum, mojo::MapDataView<::test::mojom::TestEnum, ::test::mojom::TestEnum>>>(
        in_enumToMapMap, enumToMapMap_fragment, &enumToMapMap_validate_params);
    fragment->enumToMapMap.Set(
        enumToMapMap_fragment.is_null() ? nullptr : enumToMapMap_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->enumToMapMap.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null enumToMapMap in TestStruct struct");
    decltype(Traits::numberToInterfaceProxyMap(input)) in_numberToInterfaceProxyMap = Traits::numberToInterfaceProxyMap(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->numberToInterfaceProxyMap)::BaseType>
        numberToInterfaceProxyMap_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams numberToInterfaceProxyMap_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<uint32_t, ::test::mojom::TestPagePtrDataView>>(
        in_numberToInterfaceProxyMap, numberToInterfaceProxyMap_fragment, &numberToInterfaceProxyMap_validate_params);
    fragment->numberToInterfaceProxyMap.Set(
        numberToInterfaceProxyMap_fragment.is_null() ? nullptr : numberToInterfaceProxyMap_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->numberToInterfaceProxyMap.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null numberToInterfaceProxyMap in TestStruct struct");
  }

  static bool Deserialize(::test::mojom::internal::TestStruct_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::test::mojom::TestStructDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace test {
namespace mojom {

inline void MessageDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void TestStructDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TestStructDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TestStructDataView::GetEnumsDataView(
    mojo::ArrayDataView<TestEnum>* output) {
  auto pointer = data_->enums.Get();
  *output = mojo::ArrayDataView<TestEnum>(pointer, message_);
}
inline void TestStructDataView::GetNumberToStringMapDataView(
    mojo::MapDataView<uint32_t, mojo::StringDataView>* output) {
  auto pointer = data_->numberToStringMap.Get();
  *output = mojo::MapDataView<uint32_t, mojo::StringDataView>(pointer, message_);
}
inline void TestStructDataView::GetMessageToArrayMapDataView(
    mojo::MapDataView<MessageDataView, mojo::ArrayDataView<MessageDataView>>* output) {
  auto pointer = data_->messageToArrayMap.Get();
  *output = mojo::MapDataView<MessageDataView, mojo::ArrayDataView<MessageDataView>>(pointer, message_);
}
inline void TestStructDataView::GetEnumToMapMapDataView(
    mojo::MapDataView<TestEnum, mojo::MapDataView<TestEnum, TestEnum>>* output) {
  auto pointer = data_->enumToMapMap.Get();
  *output = mojo::MapDataView<TestEnum, mojo::MapDataView<TestEnum, TestEnum>>(pointer, message_);
}
inline void TestStructDataView::GetNumberToInterfaceProxyMapDataView(
    mojo::MapDataView<uint32_t, TestPagePtrDataView>* output) {
  auto pointer = data_->numberToInterfaceProxyMap.Get();
  *output = mojo::MapDataView<uint32_t, TestPagePtrDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace test

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::test::mojom::TestEnum> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::test::mojom::TestEnum value);
};

} // namespace perfetto

#endif  // MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjIyNSwgImJlZ2luIjogMjIxNywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogInRlc3QubW9qb20uVGVzdEVudW0ifX0sIHsiZW5kIjog
MjI5NCwgImJlZ2luIjogMjI4OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogInRlc3QubW9qb20uVGVzdEVudW0uRklSU1QifX0sIHsiZW5kIjogMjM1OCwgImJlZ2lu
IjogMjM1MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInRlc3Qu
bW9qb20uVGVzdEVudW0uU0VDT05EIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/