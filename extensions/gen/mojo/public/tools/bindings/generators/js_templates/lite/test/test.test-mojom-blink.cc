// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-params-data.h"
#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared-message-ids.h"

#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace test {
namespace mojom {
namespace blink {
Message::Message()
    : message() {}

Message::Message(
    const WTF::String& message_in)
    : message(std::move(message_in)) {}

Message::~Message() = default;
size_t Message::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->message);
  return seed;
}

void Message::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "message"), this->message,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Message::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
TestStruct::TestStruct()
    : id(),
      title(),
      enums(),
      numberToStringMap(),
      messageToArrayMap(),
      enumToMapMap(),
      numberToInterfaceProxyMap() {}

TestStruct::TestStruct(
    const WTF::String& id_in,
    const WTF::String& title_in,
    WTF::Vector<TestEnum> enums_in,
    const WTF::HashMap<uint32_t, WTF::String>& numberToStringMap_in,
    WTF::HashMap<MessagePtr, WTF::Vector<MessagePtr>> messageToArrayMap_in,
    const WTF::HashMap<TestEnum, WTF::HashMap<TestEnum, TestEnum>>& enumToMapMap_in,
    WTF::HashMap<uint32_t, TestPagePtrInfo> numberToInterfaceProxyMap_in)
    : id(std::move(id_in)),
      title(std::move(title_in)),
      enums(std::move(enums_in)),
      numberToStringMap(std::move(numberToStringMap_in)),
      messageToArrayMap(std::move(messageToArrayMap_in)),
      enumToMapMap(std::move(enumToMapMap_in)),
      numberToInterfaceProxyMap(std::move(numberToInterfaceProxyMap_in)) {}

TestStruct::~TestStruct() = default;

void TestStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "title"), this->title,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enums"), this->enums,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<TestEnum>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "numberToStringMap"), this->numberToStringMap,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<uint32_t, WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "messageToArrayMap"), this->messageToArrayMap,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::HashMap<MessagePtr, WTF::Vector<MessagePtr>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enumToMapMap"), this->enumToMapMap,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<TestEnum, WTF::HashMap<TestEnum, TestEnum>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "numberToInterfaceProxyMap"), this->numberToInterfaceProxyMap,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::HashMap<uint32_t, TestPagePtrInfo>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool TestStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char TestPageHandler::Name_[] = "test.mojom.TestPageHandler";

class TestPageHandler_Method1_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestPageHandler_Method1_ForwardToCallback(
      TestPageHandler::Method1Callback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestPageHandler::Method1Callback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestPageHandler_Method1_ForwardToCallback);
};

TestPageHandlerProxy::TestPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void TestPageHandlerProxy::Method1(
    const WTF::String& in_p1, int32_t in_p2, Method1Callback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "test::mojom::TestPageHandler::Method1", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("p1"), in_p1, 
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("p2"), in_p2, 
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTestPageHandler_Method1_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::test::mojom::internal::TestPageHandler_Method1_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->p1)::BaseType> p1_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_p1, p1_fragment);
  params->p1.Set(
      p1_fragment.is_null() ? nullptr : p1_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->p1.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null p1 in TestPageHandler.Method1 request");
  params->p2 = in_p2;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestPageHandler::Name_);
  message.set_method_name("Method1");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestPageHandler_Method1_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestPageHandler_Method1_ProxyToResponder {
 public:
  static TestPageHandler::Method1Callback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestPageHandler_Method1_ProxyToResponder> proxy(
        new TestPageHandler_Method1_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestPageHandler_Method1_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestPageHandler_Method1_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestPageHandler_Method1_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestPageHandler::Method1Callback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const WTF::Vector<WTF::String>& in_values, TestStructPtr in_ts);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestPageHandler_Method1_ProxyToResponder);
};

bool TestPageHandler_Method1_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "test::mojom::TestPageHandler::Method1Callback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::TestPageHandler_Method1_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestPageHandler_Method1_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<WTF::String> p_values{};
  TestStructPtr p_ts{};
  TestPageHandler_Method1_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValues(&p_values))
    success = false;
  if (success && !input_data_view.ReadTs(&p_ts))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestPageHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_values), 
std::move(p_ts));
  return true;
}

void TestPageHandler_Method1_ProxyToResponder::Run(
    const WTF::Vector<WTF::String>& in_values, TestStructPtr in_ts) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)test::mojom::TestPageHandler::Method1Callback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("values"), in_values, 
                        "<value of type const WTF::Vector<WTF::String>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ts"), in_ts, 
                        "<value of type TestStructPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTestPageHandler_Method1_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::test::mojom::internal::TestPageHandler_Method1_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->values)::BaseType>
      values_fragment(params.message());
  const mojo::internal::ContainerValidateParams values_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_values, values_fragment, &values_validate_params);
  params->values.Set(
      values_fragment.is_null() ? nullptr : values_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->values.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null values in ");
  mojo::internal::MessageFragment<
      typename decltype(params->ts)::BaseType> ts_fragment(
          params.message());
  mojo::internal::Serialize<::test::mojom::TestStructDataView>(
      in_ts, ts_fragment);
  params->ts.Set(
      ts_fragment.is_null() ? nullptr : ts_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->ts.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null ts in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)test::mojom::TestPageHandler::Method1Callback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestPageHandler::Name_);
  message.set_method_name("Method1");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool TestPageHandlerStubDispatch::Accept(
    TestPageHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kTestPageHandler_Method1_Name: {
      break;
    }
  }
  return false;
}

// static
bool TestPageHandlerStubDispatch::AcceptWithResponder(
    TestPageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTestPageHandler_Method1_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::mojom::TestPageHandler::Method1",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::mojom::TestPageHandler::Method1");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::TestPageHandler_Method1_Params_Data* params =
          reinterpret_cast<
              internal::TestPageHandler_Method1_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::String p_p1{};
      int32_t p_p2{};
      TestPageHandler_Method1_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadP1(&p_p1))
        success = false;
      if (success)
        p_p2 = input_data_view.p2();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestPageHandler::Name_, 0, false);
        return false;
      }
      TestPageHandler::Method1Callback callback =
          TestPageHandler_Method1_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Method1(
std::move(p_p1), 
std::move(p_p2), std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTestPageHandlerValidationInfo[] = {
    {internal::kTestPageHandler_Method1_Name,
     {&internal::TestPageHandler_Method1_Params_Data::Validate,
      &internal::TestPageHandler_Method1_ResponseParams_Data::Validate}},
};

bool TestPageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::blink::TestPageHandler::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTestPageHandlerValidationInfo);
}

bool TestPageHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::blink::TestPageHandler::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kTestPageHandlerValidationInfo);

}
const char TestPage::Name_[] = "test.mojom.TestPage";

TestPageProxy::TestPageProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void TestPageProxy::OnEvent1(
    TestStructPtr in_s) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "test::mojom::TestPage::OnEvent1", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("s"), in_s, 
                        "<value of type TestStructPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTestPage_OnEvent1_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::test::mojom::internal::TestPage_OnEvent1_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->s)::BaseType> s_fragment(
          params.message());
  mojo::internal::Serialize<::test::mojom::TestStructDataView>(
      in_s, s_fragment);
  params->s.Set(
      s_fragment.is_null() ? nullptr : s_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->s.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null s in TestPage.OnEvent1 request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestPage::Name_);
  message.set_method_name("OnEvent1");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool TestPageStubDispatch::Accept(
    TestPage* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kTestPage_OnEvent1_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::mojom::TestPage::OnEvent1",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::mojom::TestPage::OnEvent1");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::TestPage_OnEvent1_Params_Data* params =
          reinterpret_cast<internal::TestPage_OnEvent1_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      TestStructPtr p_s{};
      TestPage_OnEvent1_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadS(&p_s))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestPage::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnEvent1(
std::move(p_s));
      return true;
    }
  }
  return false;
}

// static
bool TestPageStubDispatch::AcceptWithResponder(
    TestPage* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTestPage_OnEvent1_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTestPageValidationInfo[] = {
    {internal::kTestPage_OnEvent1_Name,
     {&internal::TestPage_OnEvent1_Params_Data::Validate,
      nullptr /* no response */}},
};

bool TestPageRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::blink::TestPage::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTestPageValidationInfo);
}

}  // namespace blink
}  // namespace mojom
}  // namespace test

namespace mojo {


// static
bool StructTraits<::test::mojom::blink::Message::DataView, ::test::mojom::blink::MessagePtr>::Read(
    ::test::mojom::blink::Message::DataView input,
    ::test::mojom::blink::MessagePtr* output) {
  bool success = true;
  ::test::mojom::blink::MessagePtr result(::test::mojom::blink::Message::New());
  
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::test::mojom::blink::TestStruct::DataView, ::test::mojom::blink::TestStructPtr>::Read(
    ::test::mojom::blink::TestStruct::DataView input,
    ::test::mojom::blink::TestStructPtr* output) {
  bool success = true;
  ::test::mojom::blink::TestStructPtr result(::test::mojom::blink::TestStruct::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadEnums(&result->enums))
        success = false;
      if (success && !input.ReadNumberToStringMap(&result->numberToStringMap))
        success = false;
      if (success && !input.ReadMessageToArrayMap(&result->messageToArrayMap))
        success = false;
      if (success && !input.ReadEnumToMapMap(&result->enumToMapMap))
        success = false;
      if (success && !input.ReadNumberToInterfaceProxyMap(&result->numberToInterfaceProxyMap))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif