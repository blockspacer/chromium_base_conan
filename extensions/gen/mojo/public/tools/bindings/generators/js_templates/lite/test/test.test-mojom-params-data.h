// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace test {
namespace mojom {
namespace internal {
class  TestPageHandler_Method1_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> p1;
  int32_t p2;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestPageHandler_Method1_Params_Data>;

  TestPageHandler_Method1_Params_Data();
  ~TestPageHandler_Method1_Params_Data() = delete;
};
static_assert(sizeof(TestPageHandler_Method1_Params_Data) == 24,
              "Bad sizeof(TestPageHandler_Method1_Params_Data)");
class  TestPageHandler_Method1_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> values;
  mojo::internal::Pointer<internal::TestStruct_Data> ts;

 private:
  friend class mojo::internal::MessageFragment<TestPageHandler_Method1_ResponseParams_Data>;

  TestPageHandler_Method1_ResponseParams_Data();
  ~TestPageHandler_Method1_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestPageHandler_Method1_ResponseParams_Data) == 24,
              "Bad sizeof(TestPageHandler_Method1_ResponseParams_Data)");
class  TestPage_OnEvent1_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::TestStruct_Data> s;

 private:
  friend class mojo::internal::MessageFragment<TestPage_OnEvent1_Params_Data>;

  TestPage_OnEvent1_Params_Data();
  ~TestPage_OnEvent1_Params_Data() = delete;
};
static_assert(sizeof(TestPage_OnEvent1_Params_Data) == 16,
              "Bad sizeof(TestPage_OnEvent1_Params_Data)");

}  // namespace internal


class TestPageHandler_Method1_ParamsDataView {
 public:
  TestPageHandler_Method1_ParamsDataView() {}

  TestPageHandler_Method1_ParamsDataView(
      internal::TestPageHandler_Method1_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetP1DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadP1(UserType* output) {
    
    auto* pointer = data_->p1.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t p2() const {
    return data_->p2;
  }
 private:
  internal::TestPageHandler_Method1_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestPageHandler_Method1_ResponseParamsDataView {
 public:
  TestPageHandler_Method1_ResponseParamsDataView() {}

  TestPageHandler_Method1_ResponseParamsDataView(
      internal::TestPageHandler_Method1_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValuesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValues(UserType* output) {
    
    auto* pointer = data_->values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetTsDataView(
      TestStructDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTs(UserType* output) {
    
    auto* pointer = data_->ts.Get();
    return mojo::internal::Deserialize<::test::mojom::TestStructDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestPageHandler_Method1_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestPage_OnEvent1_ParamsDataView {
 public:
  TestPage_OnEvent1_ParamsDataView() {}

  TestPage_OnEvent1_ParamsDataView(
      internal::TestPage_OnEvent1_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSDataView(
      TestStructDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadS(UserType* output) {
    
    auto* pointer = data_->s.Get();
    return mojo::internal::Deserialize<::test::mojom::TestStructDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestPage_OnEvent1_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void TestPageHandler_Method1_ParamsDataView::GetP1DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->p1.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void TestPageHandler_Method1_ResponseParamsDataView::GetValuesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->values.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void TestPageHandler_Method1_ResponseParamsDataView::GetTsDataView(
    TestStructDataView* output) {
  auto pointer = data_->ts.Get();
  *output = TestStructDataView(pointer, message_);
}


inline void TestPage_OnEvent1_ParamsDataView::GetSDataView(
    TestStructDataView* output) {
  auto pointer = data_->s.Get();
  *output = TestStructDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace test

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_PARAMS_DATA_H_