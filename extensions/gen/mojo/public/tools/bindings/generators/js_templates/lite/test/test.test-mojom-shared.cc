// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-params-data.h"
namespace test {
namespace mojom {

std::string TestEnumToString(TestEnum value) {
  switch(value) {
    case TestEnum::FIRST:
      return "FIRST";
    case TestEnum::SECOND:
      return "SECOND";
    default:
      return base::StringPrintf("Unknown TestEnum value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, TestEnum value) {
  return os << TestEnumToString(value);
}

namespace internal {


// static
bool Message_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Message_Data* object = static_cast<const Message_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->message, validation_context,
                                         &message_validate_params)) {
    return false;
  }

  return true;
}

Message_Data::Message_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestStruct_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 64, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStruct_Data* object = static_cast<const TestStruct_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams title_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->title, validation_context,
                                         &title_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->enums, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams enums_validate_params(
      0, ::test::mojom::internal::TestEnum_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->enums, validation_context,
                                         &enums_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->numberToStringMap, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams numberToStringMap_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->numberToStringMap, validation_context,
                                         &numberToStringMap_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->messageToArrayMap, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams messageToArrayMap_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->messageToArrayMap, validation_context,
                                         &messageToArrayMap_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->enumToMapMap, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams enumToMapMap_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate), new mojo::internal::ContainerValidateParams(0, ::test::mojom::internal::TestEnum_Data::Validate))));
  if (!mojo::internal::ValidateContainer(object->enumToMapMap, validation_context,
                                         &enumToMapMap_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->numberToInterfaceProxyMap, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams numberToInterfaceProxyMap_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->numberToInterfaceProxyMap, validation_context,
                                         &numberToInterfaceProxyMap_validate_params)) {
    return false;
  }

  return true;
}

TestStruct_Data::TestStruct_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestPageHandler_Method1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestPageHandler_Method1_Params_Data* object = static_cast<const TestPageHandler_Method1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->p1, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams p1_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->p1, validation_context,
                                         &p1_validate_params)) {
    return false;
  }

  return true;
}

TestPageHandler_Method1_Params_Data::TestPageHandler_Method1_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestPageHandler_Method1_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestPageHandler_Method1_ResponseParams_Data* object = static_cast<const TestPageHandler_Method1_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->values, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams values_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->values, validation_context,
                                         &values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ts, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->ts, validation_context))
    return false;

  return true;
}

TestPageHandler_Method1_ResponseParams_Data::TestPageHandler_Method1_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestPage_OnEvent1_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestPage_OnEvent1_Params_Data* object = static_cast<const TestPage_OnEvent1_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TestPage_OnEvent1_Params_Data::TestPage_OnEvent1_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace test

namespace perfetto {

// static
void TraceFormatTraits<::test::mojom::TestEnum>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::test::mojom::TestEnum value) {
  return std::move(context).WriteString(::test::mojom::TestEnumToString(value));
}

} // namespace perfetto
