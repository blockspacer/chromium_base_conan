// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('test.mojom');


  var TestEnum = {};
  TestEnum.FIRST = 0;
  TestEnum.SECOND = 1;
  TestEnum.MIN_VALUE = 0;
  TestEnum.MAX_VALUE = 1;

  TestEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Message(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Message.prototype.initDefaults_ = function() {
    this.message = null;
  };
  Message.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Message.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Message.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Message.encodedSize = codec.kStructHeaderSize + 8;

  Message.decode = function(decoder) {
    var packed;
    var val = new Message();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Message.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Message.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
  };
  function TestStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestStruct.prototype.initDefaults_ = function() {
    this.id = null;
    this.title = null;
    this.enums = null;
    this.numberToStringMap = null;
    this.messageToArrayMap = null;
    this.enumToMapMap = null;
    this.numberToInterfaceProxyMap = null;
  };
  TestStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.enums
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(TestEnum), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.numberToStringMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 24, false, codec.Uint32, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.messageToArrayMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, false, new codec.PointerTo(Message), new codec.ArrayOf(new codec.PointerTo(Message)), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.enumToMapMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, false, new codec.Enum(TestEnum), new codec.MapOf(new codec.Enum(TestEnum), new codec.Enum(TestEnum)), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStruct.numberToInterfaceProxyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 48, false, codec.Uint32, new codec.Interface(TestPagePtr), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStruct.encodedSize = codec.kStructHeaderSize + 56;

  TestStruct.decode = function(decoder) {
    var packed;
    var val = new TestStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.title =
        decoder.decodeStruct(codec.NullableString);
    val.enums =
        decoder.decodeArrayPointer(new codec.Enum(TestEnum));
    val.numberToStringMap =
        decoder.decodeMapPointer(codec.Uint32, codec.String);
    val.messageToArrayMap =
        decoder.decodeMapPointer(new codec.PointerTo(Message), new codec.ArrayOf(new codec.PointerTo(Message)));
    val.enumToMapMap =
        decoder.decodeMapPointer(new codec.Enum(TestEnum), new codec.MapOf(new codec.Enum(TestEnum), new codec.Enum(TestEnum)));
    val.numberToInterfaceProxyMap =
        decoder.decodeMapPointer(codec.Uint32, new codec.Interface(TestPagePtr));
    return val;
  };

  TestStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.NullableString, val.title);
    encoder.encodeArrayPointer(new codec.Enum(TestEnum), val.enums);
    encoder.encodeMapPointer(codec.Uint32, codec.String, val.numberToStringMap);
    encoder.encodeMapPointer(new codec.PointerTo(Message), new codec.ArrayOf(new codec.PointerTo(Message)), val.messageToArrayMap);
    encoder.encodeMapPointer(new codec.Enum(TestEnum), new codec.MapOf(new codec.Enum(TestEnum), new codec.Enum(TestEnum)), val.enumToMapMap);
    encoder.encodeMapPointer(codec.Uint32, new codec.Interface(TestPagePtr), val.numberToInterfaceProxyMap);
  };
  function TestPageHandler_Method1_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestPageHandler_Method1_Params.prototype.initDefaults_ = function() {
    this.p1 = null;
    this.p2 = 0;
  };
  TestPageHandler_Method1_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestPageHandler_Method1_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestPageHandler_Method1_Params.p1
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestPageHandler_Method1_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestPageHandler_Method1_Params.decode = function(decoder) {
    var packed;
    var val = new TestPageHandler_Method1_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.p1 =
        decoder.decodeStruct(codec.String);
    val.p2 =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestPageHandler_Method1_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestPageHandler_Method1_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.p1);
    encoder.encodeStruct(codec.Int32, val.p2);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestPageHandler_Method1_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestPageHandler_Method1_ResponseParams.prototype.initDefaults_ = function() {
    this.values = null;
    this.ts = null;
  };
  TestPageHandler_Method1_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestPageHandler_Method1_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestPageHandler_Method1_ResponseParams.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestPageHandler_Method1_ResponseParams.ts
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, TestStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestPageHandler_Method1_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestPageHandler_Method1_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestPageHandler_Method1_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.values =
        decoder.decodeArrayPointer(codec.String);
    val.ts =
        decoder.decodeStructPointer(TestStruct);
    return val;
  };

  TestPageHandler_Method1_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestPageHandler_Method1_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.values);
    encoder.encodeStructPointer(TestStruct, val.ts);
  };
  function TestPage_OnEvent1_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestPage_OnEvent1_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TestPage_OnEvent1_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestPage_OnEvent1_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestPage_OnEvent1_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestPage_OnEvent1_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestPage_OnEvent1_Params.decode = function(decoder) {
    var packed;
    var val = new TestPage_OnEvent1_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(TestStruct);
    return val;
  };

  TestPage_OnEvent1_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestPage_OnEvent1_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestStruct, val.s);
  };
  var kTestPageHandler_Method1_Name = 1303793412;

  function TestPageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestPageHandler,
                                                   handleOrPtrInfo);
  }

  function TestPageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestPageHandler, associatedInterfacePtrInfo);
  }

  TestPageHandlerAssociatedPtr.prototype =
      Object.create(TestPageHandlerPtr.prototype);
  TestPageHandlerAssociatedPtr.prototype.constructor =
      TestPageHandlerAssociatedPtr;

  function TestPageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestPageHandlerPtr.prototype.method1 = function() {
    return TestPageHandlerProxy.prototype.method1
        .apply(this.ptr.getProxy(), arguments);
  };

  TestPageHandlerProxy.prototype.method1 = function(p1, p2) {
    var params_ = new TestPageHandler_Method1_Params();
    params_.p1 = p1;
    params_.p2 = p2;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestPageHandler_Method1_Name,
          codec.align(TestPageHandler_Method1_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestPageHandler_Method1_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestPageHandler_Method1_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestPageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  TestPageHandlerStub.prototype.method1 = function(p1, p2) {
    return this.delegate_ && this.delegate_.method1 && this.delegate_.method1(p1, p2);
  }

  TestPageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestPageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestPageHandler_Method1_Name:
      var params = reader.decodeStruct(TestPageHandler_Method1_Params);
      this.method1(params.p1, params.p2).then(function(response) {
        var responseParams =
            new TestPageHandler_Method1_ResponseParams();
        responseParams.values = response.values;
        responseParams.ts = response.ts;
        var builder = new codec.MessageV1Builder(
            kTestPageHandler_Method1_Name,
            codec.align(TestPageHandler_Method1_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestPageHandler_Method1_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestPageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestPageHandler_Method1_Name:
        if (message.expectsResponse())
          paramsClass = TestPageHandler_Method1_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestPageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestPageHandler_Method1_Name:
        if (message.isResponse())
          paramsClass = TestPageHandler_Method1_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestPageHandler = {
    name: 'test.mojom.TestPageHandler',
    kVersion: 0,
    ptrClass: TestPageHandlerPtr,
    proxyClass: TestPageHandlerProxy,
    stubClass: TestPageHandlerStub,
    validateRequest: validateTestPageHandlerRequest,
    validateResponse: validateTestPageHandlerResponse,
  };
  TestPageHandlerStub.prototype.validator = validateTestPageHandlerRequest;
  TestPageHandlerProxy.prototype.validator = validateTestPageHandlerResponse;
  var kTestPage_OnEvent1_Name = 27976056;

  function TestPagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestPage,
                                                   handleOrPtrInfo);
  }

  function TestPageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestPage, associatedInterfacePtrInfo);
  }

  TestPageAssociatedPtr.prototype =
      Object.create(TestPagePtr.prototype);
  TestPageAssociatedPtr.prototype.constructor =
      TestPageAssociatedPtr;

  function TestPageProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestPagePtr.prototype.onEvent1 = function() {
    return TestPageProxy.prototype.onEvent1
        .apply(this.ptr.getProxy(), arguments);
  };

  TestPageProxy.prototype.onEvent1 = function(s) {
    var params_ = new TestPage_OnEvent1_Params();
    params_.s = s;
    var builder = new codec.MessageV0Builder(
        kTestPage_OnEvent1_Name,
        codec.align(TestPage_OnEvent1_Params.encodedSize));
    builder.encodeStruct(TestPage_OnEvent1_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestPageStub(delegate) {
    this.delegate_ = delegate;
  }
  TestPageStub.prototype.onEvent1 = function(s) {
    return this.delegate_ && this.delegate_.onEvent1 && this.delegate_.onEvent1(s);
  }

  TestPageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestPage_OnEvent1_Name:
      var params = reader.decodeStruct(TestPage_OnEvent1_Params);
      this.onEvent1(params.s);
      return true;
    default:
      return false;
    }
  };

  TestPageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestPageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestPage_OnEvent1_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestPage_OnEvent1_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestPageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestPage = {
    name: 'test.mojom.TestPage',
    kVersion: 0,
    ptrClass: TestPagePtr,
    proxyClass: TestPageProxy,
    stubClass: TestPageStub,
    validateRequest: validateTestPageRequest,
    validateResponse: null,
  };
  TestPageStub.prototype.validator = validateTestPageRequest;
  TestPageProxy.prototype.validator = null;
  exports.TestEnum = TestEnum;
  exports.Message = Message;
  exports.TestStruct = TestStruct;
  exports.TestPageHandler = TestPageHandler;
  exports.TestPageHandlerPtr = TestPageHandlerPtr;
  exports.TestPageHandlerAssociatedPtr = TestPageHandlerAssociatedPtr;
  exports.TestPage = TestPage;
  exports.TestPagePtr = TestPagePtr;
  exports.TestPageAssociatedPtr = TestPageAssociatedPtr;
})();