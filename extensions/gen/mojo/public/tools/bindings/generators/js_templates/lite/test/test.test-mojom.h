// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_H_
#define MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-shared.h"
#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace test {
namespace mojom {

class TestPageHandlerProxy;

template <typename ImplRefTraits>
class TestPageHandlerStub;

class TestPageHandlerRequestValidator;
class TestPageHandlerResponseValidator;


// @generated_from: test.mojom.TestPageHandler
class  TestPageHandler
    : public TestPageHandlerInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestPageHandlerInterfaceBase;
  using Proxy_ = TestPageHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestPageHandlerStub<ImplRefTraits>;

  using RequestValidator_ = TestPageHandlerRequestValidator;
  using ResponseValidator_ = TestPageHandlerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kMethod1MinVersion = 0,
  };
  virtual ~TestPageHandler() {}


  using Method1Callback = base::OnceCallback<void(const std::vector<std::string>&, TestStructPtr)>;
  
// @generated_from: test.mojom.TestPageHandler.Method1
  virtual void Method1(const std::string& p1, int32_t p2, Method1Callback callback) = 0;
};

class TestPageProxy;

template <typename ImplRefTraits>
class TestPageStub;

class TestPageRequestValidator;


// @generated_from: test.mojom.TestPage
class  TestPage
    : public TestPageInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestPageInterfaceBase;
  using Proxy_ = TestPageProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestPageStub<ImplRefTraits>;

  using RequestValidator_ = TestPageRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnEvent1MinVersion = 0,
  };
  virtual ~TestPage() {}

  
// @generated_from: test.mojom.TestPage.OnEvent1
  virtual void OnEvent1(TestStructPtr s) = 0;
};



// @generated_from: test.mojom.TestPageHandler
class  TestPageHandlerProxy
    : public TestPageHandler {
 public:
  using InterfaceType = TestPageHandler;

  explicit TestPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: test.mojom.TestPageHandler.Method1
  void Method1(const std::string& p1, int32_t p2, Method1Callback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: test.mojom.TestPage
class  TestPageProxy
    : public TestPage {
 public:
  using InterfaceType = TestPage;

  explicit TestPageProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: test.mojom.TestPage.OnEvent1
  void OnEvent1(TestStructPtr s) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestPageHandlerStubDispatch {
 public:
  static bool Accept(TestPageHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestPageHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestPageHandler>>
class TestPageHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestPageHandlerStub() {}
  ~TestPageHandlerStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestPageHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestPageHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestPageStubDispatch {
 public:
  static bool Accept(TestPage* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestPage* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestPage>>
class TestPageStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestPageStub() {}
  ~TestPageStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestPageStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestPageStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestPageHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestPageRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestPageHandlerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: test.mojom.Message
class  Message {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Message, T>::value>;
  using DataView = MessageDataView;
  using Data_ = internal::Message_Data;

  template <typename... Args>
  static MessagePtr New(Args&&... args) {
    return MessagePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MessagePtr From(const U& u) {
    return mojo::TypeConverter<MessagePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Message>::Convert(*this);
  }


  Message();

  explicit Message(
      const std::string& message);

  ~Message();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MessagePtr>
  MessagePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Message::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Message::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Message::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Message::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Message_UnserializedMessageContext<
            UserType, Message::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Message::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Message::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Message_UnserializedMessageContext<
            UserType, Message::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Message::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: test.mojom.Message.message
  std::string message;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Message::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Message::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Message::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Message::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









// @generated_from: test.mojom.TestStruct
class  TestStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TestStruct, T>::value>;
  using DataView = TestStructDataView;
  using Data_ = internal::TestStruct_Data;

  template <typename... Args>
  static TestStructPtr New(Args&&... args) {
    return TestStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TestStructPtr From(const U& u) {
    return mojo::TypeConverter<TestStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestStruct>::Convert(*this);
  }


  TestStruct();

  TestStruct(
      const std::string& id,
      const base::Optional<std::string>& title,
      std::vector<TestEnum> enums,
      const base::flat_map<uint32_t, std::string>& numberToStringMap,
      base::flat_map<MessagePtr, std::vector<MessagePtr>> messageToArrayMap,
      const base::flat_map<TestEnum, base::flat_map<TestEnum, TestEnum>>& enumToMapMap,
      base::flat_map<uint32_t, TestPagePtrInfo> numberToInterfaceProxyMap);

  ~TestStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TestStructPtr>
  TestStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TestStruct_UnserializedMessageContext<
            UserType, TestStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TestStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return TestStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TestStruct_UnserializedMessageContext<
            UserType, TestStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TestStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: test.mojom.TestStruct.id
  std::string id;
  
// @generated_from: test.mojom.TestStruct.title
  base::Optional<std::string> title;
  
// @generated_from: test.mojom.TestStruct.enums
  std::vector<TestEnum> enums;
  
// @generated_from: test.mojom.TestStruct.numberToStringMap
  base::flat_map<uint32_t, std::string> numberToStringMap;
  
// @generated_from: test.mojom.TestStruct.messageToArrayMap
  base::flat_map<MessagePtr, std::vector<MessagePtr>> messageToArrayMap;
  
// @generated_from: test.mojom.TestStruct.enumToMapMap
  base::flat_map<TestEnum, base::flat_map<TestEnum, TestEnum>> enumToMapMap;
  
// @generated_from: test.mojom.TestStruct.numberToInterfaceProxyMap
  base::flat_map<uint32_t, TestPagePtrInfo> numberToInterfaceProxyMap;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(TestStruct);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
MessagePtr Message::Clone() const {
  return New(
      mojo::Clone(message)
  );
}

template <typename T, Message::EnableIfSame<T>*>
bool Message::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->message, other_struct.message))
    return false;
  return true;
}

template <typename T, Message::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.message < rhs.message)
    return true;
  if (rhs.message < lhs.message)
    return false;
  return false;
}
template <typename StructPtrType>
TestStructPtr TestStruct::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(title),
      mojo::Clone(enums),
      mojo::Clone(numberToStringMap),
      mojo::Clone(messageToArrayMap),
      mojo::Clone(enumToMapMap),
      mojo::Clone(numberToInterfaceProxyMap)
  );
}

template <typename T, TestStruct::EnableIfSame<T>*>
bool TestStruct::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->title, other_struct.title))
    return false;
  if (!mojo::Equals(this->enums, other_struct.enums))
    return false;
  if (!mojo::Equals(this->numberToStringMap, other_struct.numberToStringMap))
    return false;
  if (!mojo::Equals(this->messageToArrayMap, other_struct.messageToArrayMap))
    return false;
  if (!mojo::Equals(this->enumToMapMap, other_struct.enumToMapMap))
    return false;
  if (!mojo::Equals(this->numberToInterfaceProxyMap, other_struct.numberToInterfaceProxyMap))
    return false;
  return true;
}

template <typename T, TestStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.title < rhs.title)
    return true;
  if (rhs.title < lhs.title)
    return false;
  if (lhs.enums < rhs.enums)
    return true;
  if (rhs.enums < lhs.enums)
    return false;
  if (lhs.numberToStringMap < rhs.numberToStringMap)
    return true;
  if (rhs.numberToStringMap < lhs.numberToStringMap)
    return false;
  if (lhs.messageToArrayMap < rhs.messageToArrayMap)
    return true;
  if (rhs.messageToArrayMap < lhs.messageToArrayMap)
    return false;
  if (lhs.enumToMapMap < rhs.enumToMapMap)
    return true;
  if (rhs.enumToMapMap < lhs.enumToMapMap)
    return false;
  if (lhs.numberToInterfaceProxyMap < rhs.numberToInterfaceProxyMap)
    return true;
  if (rhs.numberToInterfaceProxyMap < lhs.numberToInterfaceProxyMap)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace test

namespace mojo {


template <>
struct  StructTraits<::test::mojom::Message::DataView,
                                         ::test::mojom::MessagePtr> {
  static bool IsNull(const ::test::mojom::MessagePtr& input) { return !input; }
  static void SetToNull(::test::mojom::MessagePtr* output) { output->reset(); }

  static const decltype(::test::mojom::Message::message)& message(
      const ::test::mojom::MessagePtr& input) {
    return input->message;
  }

  static bool Read(::test::mojom::Message::DataView input, ::test::mojom::MessagePtr* output);
};


template <>
struct  StructTraits<::test::mojom::TestStruct::DataView,
                                         ::test::mojom::TestStructPtr> {
  static bool IsNull(const ::test::mojom::TestStructPtr& input) { return !input; }
  static void SetToNull(::test::mojom::TestStructPtr* output) { output->reset(); }

  static const decltype(::test::mojom::TestStruct::id)& id(
      const ::test::mojom::TestStructPtr& input) {
    return input->id;
  }

  static const decltype(::test::mojom::TestStruct::title)& title(
      const ::test::mojom::TestStructPtr& input) {
    return input->title;
  }

  static const decltype(::test::mojom::TestStruct::enums)& enums(
      const ::test::mojom::TestStructPtr& input) {
    return input->enums;
  }

  static const decltype(::test::mojom::TestStruct::numberToStringMap)& numberToStringMap(
      const ::test::mojom::TestStructPtr& input) {
    return input->numberToStringMap;
  }

  static const decltype(::test::mojom::TestStruct::messageToArrayMap)& messageToArrayMap(
      const ::test::mojom::TestStructPtr& input) {
    return input->messageToArrayMap;
  }

  static const decltype(::test::mojom::TestStruct::enumToMapMap)& enumToMapMap(
      const ::test::mojom::TestStructPtr& input) {
    return input->enumToMapMap;
  }

  static  decltype(::test::mojom::TestStruct::numberToInterfaceProxyMap)& numberToInterfaceProxyMap(
       ::test::mojom::TestStructPtr& input) {
    return input->numberToInterfaceProxyMap;
  }

  static bool Read(::test::mojom::TestStruct::DataView input, ::test::mojom::TestStructPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjAwNiwgImJlZ2luIjogMTk5MSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogInRlc3QubW9qb20uVGVzdFBhZ2VIYW5kbGVyIn19LCB7
ImVuZCI6IDI4MjEsICJiZWdpbiI6IDI4MTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RQYWdlSGFuZGxlci5NZXRob2QxIn19LCB7ImVu
ZCI6IDMwNTgsICJiZWdpbiI6IDMwNTAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RQYWdlIn19LCB7ImVuZCI6IDM3MTcsICJiZWdpbiI6
IDM3MDksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1v
am9tLlRlc3RQYWdlLk9uRXZlbnQxIn19LCB7ImVuZCI6IDQwNTQsICJiZWdpbiI6IDQwNDcsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RQ
YWdlSGFuZGxlci5NZXRob2QxIn19LCB7ImVuZCI6IDQ0NTcsICJiZWdpbiI6IDQ0NDksICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RQYWdl
Lk9uRXZlbnQxIn19LCB7ImVuZCI6IDc1MjIsICJiZWdpbiI6IDc1MTUsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLk1lc3NhZ2UifX0sIHsiZW5k
IjogMTEwNDEsICJiZWdpbiI6IDExMDM0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAidGVzdC5tb2pvbS5NZXNzYWdlLm1lc3NhZ2UifX0sIHsiZW5kIjogMTIwNTAs
ICJiZWdpbiI6IDEyMDQwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAidGVzdC5tb2pvbS5UZXN0U3RydWN0In19LCB7ImVuZCI6IDE1NzgzLCAiYmVnaW4iOiAxNTc4
MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogInRlc3QubW9qb20u
VGVzdFN0cnVjdC5pZCJ9fSwgeyJlbmQiOiAxNTg3MSwgImJlZ2luIjogMTU4NjYsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RTdHJ1Y3Qu
dGl0bGUifX0sIHsiZW5kIjogMTU5NTMsICJiZWdpbiI6IDE1OTQ4LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAidGVzdC5tb2pvbS5UZXN0U3RydWN0LmVudW1zIn19
LCB7ImVuZCI6IDE2MDc1LCAiYmVnaW4iOiAxNjA1OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogInRlc3QubW9qb20uVGVzdFN0cnVjdC5udW1iZXJUb1N0cmluZ01h
cCJ9fSwgeyJlbmQiOiAxNjIxMSwgImJlZ2luIjogMTYxOTQsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RTdHJ1Y3QubWVzc2FnZVRvQXJy
YXlNYXAifX0sIHsiZW5kIjogMTYzNDYsICJiZWdpbiI6IDE2MzM0LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAidGVzdC5tb2pvbS5UZXN0U3RydWN0LmVudW1Ub01h
cE1hcCJ9fSwgeyJlbmQiOiAxNjQ4OCwgImJlZ2luIjogMTY0NjMsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJ0ZXN0Lm1vam9tLlRlc3RTdHJ1Y3QubnVtYmVyVG9J
bnRlcmZhY2VQcm94eU1hcCJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/