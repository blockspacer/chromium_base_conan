// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_TOOLS_BINDINGS_GENERATORS_JS_TEMPLATES_LITE_TEST_TEST_TEST_MOJOM_JUMBO_H_
#endif


namespace test {
namespace mojom {


void TestPageHandlerInterceptorForTesting::Method1(const std::string& p1, int32_t p2, Method1Callback callback) {
  GetForwardingInterface()->Method1(std::move(p1), std::move(p2), std::move(callback));
}
TestPageHandlerAsyncWaiter::TestPageHandlerAsyncWaiter(
    TestPageHandler* proxy) : proxy_(proxy) {}

TestPageHandlerAsyncWaiter::~TestPageHandlerAsyncWaiter() = default;

void TestPageHandlerAsyncWaiter::Method1(
    const std::string& p1, int32_t p2, std::vector<std::string>* out_values, TestStructPtr* out_ts) {
  base::RunLoop loop;
  proxy_->Method1(std::move(p1),std::move(p2),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_values
,
             TestStructPtr* out_ts
,
             const std::vector<std::string>& values,
             TestStructPtr ts) {*out_values = std::move(values);*out_ts = std::move(ts);
            loop->Quit();
          },
          &loop,
          out_values,
          out_ts));
  loop.Run();
}



void TestPageInterceptorForTesting::OnEvent1(TestStructPtr s) {
  GetForwardingInterface()->OnEvent1(std::move(s));
}
TestPageAsyncWaiter::TestPageAsyncWaiter(
    TestPage* proxy) : proxy_(proxy) {}

TestPageAsyncWaiter::~TestPageAsyncWaiter() = default;






}  // namespace mojom
}  // namespace test

#if defined(__clang__)
#pragma clang diagnostic pop
#endif