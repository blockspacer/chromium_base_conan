// mojo/public/tools/bindings/generators/js_templates/lite/test/test.test-mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');





goog.provide('test.mojom.TestEnum');
goog.provide('test.mojom.TestEnumSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
test.mojom.TestEnumSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
test.mojom.TestEnum = {
  
  FIRST: 0,
  SECOND: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};



goog.provide('test.mojom.TestPageHandler');
goog.provide('test.mojom.TestPageHandlerReceiver');
goog.provide('test.mojom.TestPageHandlerCallbackRouter');
goog.provide('test.mojom.TestPageHandlerInterface');
goog.provide('test.mojom.TestPageHandlerRemote');
goog.provide('test.mojom.TestPageHandlerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
test.mojom.TestPageHandlerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        test.mojom.TestPageHandler.$interfaceName,
        scope);
  }
};

/** @interface */
test.mojom.TestPageHandlerInterface = class {
  
  /**
   * @param { !string } p1
   * @param { !number } p2
   * @return {!Promise<{
        values: !Array<!string>,
        ts: !test.mojom.TestStruct,
   *  }>}
   */

  method1(p1, p2) {}
};

/**
 * @export
 * @implements { test.mojom.TestPageHandlerInterface }
 */
test.mojom.TestPageHandlerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!test.mojom.TestPageHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          test.mojom.TestPageHandlerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!test.mojom.TestPageHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } p1
   * @param { !number } p2
   * @return {!Promise<{
        values: !Array<!string>,
        ts: !test.mojom.TestStruct,
   *  }>}
   */

  method1(
      p1,
      p2) {
    return this.proxy.sendMessage(
        1303793412,
        test.mojom.TestPageHandler_Method1_ParamsSpec.$,
        test.mojom.TestPageHandler_Method1_ResponseParamsSpec.$,
        [
          p1,
          p2
        ]);
  }
};

/**
 * An object which receives request messages for the TestPageHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
test.mojom.TestPageHandlerReceiver = class {
  /**
   * @param {!test.mojom.TestPageHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!test.mojom.TestPageHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        test.mojom.TestPageHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!test.mojom.TestPageHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1303793412,
        test.mojom.TestPageHandler_Method1_ParamsSpec.$,
        test.mojom.TestPageHandler_Method1_ResponseParamsSpec.$,
        impl.method1.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
test.mojom.TestPageHandler = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "test.mojom.TestPageHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!test.mojom.TestPageHandlerRemote}
   * @export
   */
  static getRemote() {
    let remote = new test.mojom.TestPageHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestPageHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
test.mojom.TestPageHandlerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      test.mojom.TestPageHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!test.mojom.TestPageHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.method1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1303793412,
        test.mojom.TestPageHandler_Method1_ParamsSpec.$,
        test.mojom.TestPageHandler_Method1_ResponseParamsSpec.$,
        this.method1.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('test.mojom.TestPage');
goog.provide('test.mojom.TestPageReceiver');
goog.provide('test.mojom.TestPageCallbackRouter');
goog.provide('test.mojom.TestPageInterface');
goog.provide('test.mojom.TestPageRemote');
goog.provide('test.mojom.TestPagePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
test.mojom.TestPagePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        test.mojom.TestPage.$interfaceName,
        scope);
  }
};

/** @interface */
test.mojom.TestPageInterface = class {
  
  /**
   * @param { !test.mojom.TestStruct } s
   */

  onEvent1(s) {}
};

/**
 * @export
 * @implements { test.mojom.TestPageInterface }
 */
test.mojom.TestPageRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!test.mojom.TestPagePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          test.mojom.TestPagePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!test.mojom.TestPagePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !test.mojom.TestStruct } s
   */

  onEvent1(
      s) {
    this.proxy.sendMessage(
        27976056,
        test.mojom.TestPage_OnEvent1_ParamsSpec.$,
        null,
        [
          s
        ]);
  }
};

/**
 * An object which receives request messages for the TestPage
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
test.mojom.TestPageReceiver = class {
  /**
   * @param {!test.mojom.TestPageInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!test.mojom.TestPageRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        test.mojom.TestPageRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!test.mojom.TestPageRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        27976056,
        test.mojom.TestPage_OnEvent1_ParamsSpec.$,
        null,
        impl.onEvent1.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
test.mojom.TestPage = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "test.mojom.TestPage";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!test.mojom.TestPageRemote}
   * @export
   */
  static getRemote() {
    let remote = new test.mojom.TestPageRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestPage
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
test.mojom.TestPageCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      test.mojom.TestPageRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!test.mojom.TestPageRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onEvent1 =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        27976056,
        test.mojom.TestPage_OnEvent1_ParamsSpec.$,
        null,
        this.onEvent1.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('test.mojom.MessageSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
test.mojom.MessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('test.mojom.TestStructSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
test.mojom.TestStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('test.mojom.TestPageHandler_Method1_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
test.mojom.TestPageHandler_Method1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('test.mojom.TestPageHandler_Method1_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
test.mojom.TestPageHandler_Method1_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('test.mojom.TestPage_OnEvent1_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
test.mojom.TestPage_OnEvent1_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    test.mojom.MessageSpec.$,
    'Message',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('test.mojom.Message');

/** @record */
test.mojom.Message = class {
  constructor() {
    /** @export { !string } */
    this.message;
  }
};




mojo.internal.Struct(
    test.mojom.TestStructSpec.$,
    'TestStruct',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'title', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'enums', 16,
        0,
        mojo.internal.Array(test.mojom.TestEnumSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'numberToStringMap', 24,
        0,
        mojo.internal.Map(mojo.internal.Uint32, mojo.internal.String, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'messageToArrayMap', 32,
        0,
        mojo.internal.Map(test.mojom.MessageSpec.$, mojo.internal.Array(test.mojom.MessageSpec.$, false), false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'enumToMapMap', 40,
        0,
        mojo.internal.Map(test.mojom.TestEnumSpec.$, mojo.internal.Map(test.mojom.TestEnumSpec.$, test.mojom.TestEnumSpec.$, false), false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'numberToInterfaceProxyMap', 48,
        0,
        mojo.internal.Map(mojo.internal.Uint32, mojo.internal.InterfaceProxy(test.mojom.TestPageRemote), false),
        null,
        false /* nullable */),
    ],
    [[0, 64],]);



goog.provide('test.mojom.TestStruct');

/** @record */
test.mojom.TestStruct = class {
  constructor() {
    /** @export { !string } */
    this.id;
    /** @export { (string|undefined) } */
    this.title;
    /** @export { !Array<!test.mojom.TestEnum> } */
    this.enums;
    /** @export { !Object<!number, !string> } */
    this.numberToStringMap;
    /** @export { !Map<!test.mojom.Message, !Array<!test.mojom.Message>> } */
    this.messageToArrayMap;
    /** @export { !Object<!test.mojom.TestEnum, !Object<!test.mojom.TestEnum, !test.mojom.TestEnum>> } */
    this.enumToMapMap;
    /** @export { !Object<!number, !test.mojom.TestPageRemote> } */
    this.numberToInterfaceProxyMap;
  }
};




mojo.internal.Struct(
    test.mojom.TestPageHandler_Method1_ParamsSpec.$,
    'TestPageHandler_Method1_Params',
    [
      mojo.internal.StructField(
        'p1', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'p2', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('test.mojom.TestPageHandler_Method1_Params');

/** @record */
test.mojom.TestPageHandler_Method1_Params = class {
  constructor() {
    /** @export { !string } */
    this.p1;
    /** @export { !number } */
    this.p2;
  }
};




mojo.internal.Struct(
    test.mojom.TestPageHandler_Method1_ResponseParamsSpec.$,
    'TestPageHandler_Method1_ResponseParams',
    [
      mojo.internal.StructField(
        'values', 0,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'ts', 8,
        0,
        test.mojom.TestStructSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('test.mojom.TestPageHandler_Method1_ResponseParams');

/** @record */
test.mojom.TestPageHandler_Method1_ResponseParams = class {
  constructor() {
    /** @export { !Array<!string> } */
    this.values;
    /** @export { !test.mojom.TestStruct } */
    this.ts;
  }
};




mojo.internal.Struct(
    test.mojom.TestPage_OnEvent1_ParamsSpec.$,
    'TestPage_OnEvent1_Params',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        test.mojom.TestStructSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('test.mojom.TestPage_OnEvent1_Params');

/** @record */
test.mojom.TestPage_OnEvent1_Params = class {
  constructor() {
    /** @export { !test.mojom.TestStruct } */
    this.s;
  }
};


