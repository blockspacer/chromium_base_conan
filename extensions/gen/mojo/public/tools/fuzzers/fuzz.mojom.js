// mojo/public/tools/fuzzers/fuzz.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/tools/fuzzers/fuzz.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('fuzz.mojom');


  var FuzzEnum = {};
  FuzzEnum.FUZZ_VALUE0 = 0;
  FuzzEnum.FUZZ_VALUE1 = 1;
  FuzzEnum.FUZZ_VALUE2 = 2;
  FuzzEnum.MIN_VALUE = 0;
  FuzzEnum.MAX_VALUE = 2;

  FuzzEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  FuzzEnum.toKnownEnumValue = function(value) {
    return value;
  };

  FuzzEnum.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function FuzzDummyStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzDummyStruct.prototype.initDefaults_ = function() {
    this.dummy = 0;
  };
  FuzzDummyStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzDummyStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FuzzDummyStruct.encodedSize = codec.kStructHeaderSize + 8;

  FuzzDummyStruct.decode = function(decoder) {
    var packed;
    var val = new FuzzDummyStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dummy =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FuzzDummyStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzDummyStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.dummy);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FuzzStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzStruct.prototype.initDefaults_ = function() {
    this.fuzzBool = false;
    this.fuzzInt8 = 0;
    this.fuzzUint8 = 0;
    this.fuzzInt16 = 0;
    this.fuzzUint16 = 0;
    this.fuzzInt32 = 0;
    this.fuzzUint32 = 0;
    this.fuzzInt64 = 0;
    this.fuzzUint64 = 0;
    this.fuzzFloat = 0;
    this.fuzzDouble = 0;
    this.fuzzString = null;
    this.fuzzBoolArray = null;
    this.fuzzPrimitiveArray = null;
    this.fuzzPrimitiveMap = null;
    this.fuzzArrayMap = null;
    this.fuzzUnionMap = null;
    this.fuzzUnionArray = null;
    this.fuzzStructArray = null;
    this.fuzzNullableArray = null;
    this.fuzzComplex = null;
  };
  FuzzStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 136}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;













    // validate FuzzStruct.fuzzString
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzBoolArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 56, 1, codec.PackedBool, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzPrimitiveArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 64, 1, codec.Int8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzPrimitiveMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 72, false, codec.String, codec.Int8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzArrayMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 80, false, codec.String, new codec.ArrayOf(codec.String), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzUnionMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 88, false, new codec.Enum(FuzzEnum), FuzzUnion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzUnionArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 96, 16, FuzzUnion, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzStructArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 104, 8, new codec.PointerTo(FuzzStruct), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzNullableArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 112, 1, codec.Int8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzStruct.fuzzComplex
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 120, 8, new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(new codec.NullablePointerTo(FuzzStruct)))), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzStruct.encodedSize = codec.kStructHeaderSize + 128;

  FuzzStruct.decode = function(decoder) {
    var packed;
    var val = new FuzzStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.fuzzBool = (packed >> 0) & 1 ? true : false;
    val.fuzzInt8 =
        decoder.decodeStruct(codec.Int8);
    val.fuzzUint8 =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.fuzzInt16 =
        decoder.decodeStruct(codec.Int16);
    val.fuzzUint16 =
        decoder.decodeStruct(codec.Uint16);
    val.fuzzInt32 =
        decoder.decodeStruct(codec.Int32);
    val.fuzzUint32 =
        decoder.decodeStruct(codec.Uint32);
    val.fuzzInt64 =
        decoder.decodeStruct(codec.Int64);
    val.fuzzUint64 =
        decoder.decodeStruct(codec.Uint64);
    val.fuzzFloat =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.fuzzDouble =
        decoder.decodeStruct(codec.Double);
    val.fuzzString =
        decoder.decodeStruct(codec.String);
    val.fuzzBoolArray =
        decoder.decodeArrayPointer(codec.PackedBool);
    val.fuzzPrimitiveArray =
        decoder.decodeArrayPointer(codec.Int8);
    val.fuzzPrimitiveMap =
        decoder.decodeMapPointer(codec.String, codec.Int8);
    val.fuzzArrayMap =
        decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.String));
    val.fuzzUnionMap =
        decoder.decodeMapPointer(new codec.Enum(FuzzEnum), FuzzUnion);
    val.fuzzUnionArray =
        decoder.decodeArrayPointer(FuzzUnion);
    val.fuzzStructArray =
        decoder.decodeArrayPointer(new codec.PointerTo(FuzzStruct));
    val.fuzzNullableArray =
        decoder.decodeArrayPointer(codec.Int8);
    val.fuzzComplex =
        decoder.decodeArrayPointer(new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(new codec.NullablePointerTo(FuzzStruct)))));
    return val;
  };

  FuzzStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzStruct.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.fuzzBool & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.fuzzInt8);
    encoder.encodeStruct(codec.Uint8, val.fuzzUint8);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.fuzzInt16);
    encoder.encodeStruct(codec.Uint16, val.fuzzUint16);
    encoder.encodeStruct(codec.Int32, val.fuzzInt32);
    encoder.encodeStruct(codec.Uint32, val.fuzzUint32);
    encoder.encodeStruct(codec.Int64, val.fuzzInt64);
    encoder.encodeStruct(codec.Uint64, val.fuzzUint64);
    encoder.encodeStruct(codec.Float, val.fuzzFloat);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.fuzzDouble);
    encoder.encodeStruct(codec.String, val.fuzzString);
    encoder.encodeArrayPointer(codec.PackedBool, val.fuzzBoolArray);
    encoder.encodeArrayPointer(codec.Int8, val.fuzzPrimitiveArray);
    encoder.encodeMapPointer(codec.String, codec.Int8, val.fuzzPrimitiveMap);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.String), val.fuzzArrayMap);
    encoder.encodeMapPointer(new codec.Enum(FuzzEnum), FuzzUnion, val.fuzzUnionMap);
    encoder.encodeArrayPointer(FuzzUnion, val.fuzzUnionArray);
    encoder.encodeArrayPointer(new codec.PointerTo(FuzzStruct), val.fuzzStructArray);
    encoder.encodeArrayPointer(codec.Int8, val.fuzzNullableArray);
    encoder.encodeArrayPointer(new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(new codec.NullablePointerTo(FuzzStruct)))), val.fuzzComplex);
  };
  function FuzzDummyInterface_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzDummyInterface_Ping_Params.prototype.initDefaults_ = function() {
  };
  FuzzDummyInterface_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzDummyInterface_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzDummyInterface_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  FuzzDummyInterface_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzDummyInterface_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzDummyInterface_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzDummyInterface_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzBasic_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzBasic_Params.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzBasic_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzBasic_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzBasic_Params.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzBasic_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzBasic_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzBasic_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzBasic_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzBasicResp_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzBasicResp_Params.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzBasicResp_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzBasicResp_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzBasicResp_Params.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzBasicResp_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzBasicResp_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzBasicResp_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzBasicResp_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzBasicResp_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzBasicResp_ResponseParams.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzBasicResp_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzBasicResp_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzBasicResp_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzBasicResp_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzBasicResp_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzBasicResp_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzBasicResp_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzBasicSyncResp_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzBasicSyncResp_Params.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzBasicSyncResp_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzBasicSyncResp_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzBasicSyncResp_Params.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzBasicSyncResp_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzBasicSyncResp_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzBasicSyncResp_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzBasicSyncResp_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzBasicSyncResp_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzBasicSyncResp_ResponseParams.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzBasicSyncResp_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzBasicSyncResp_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzBasicSyncResp_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzBasicSyncResp_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzBasicSyncResp_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzBasicSyncResp_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzBasicSyncResp_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzArgs_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzArgs_Params.prototype.initDefaults_ = function() {
    this.a = null;
    this.b = null;
  };
  FuzzInterface_FuzzArgs_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzArgs_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgs_Params.a
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FuzzStruct, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgs_Params.b
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, FuzzStruct, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzArgs_Params.encodedSize = codec.kStructHeaderSize + 16;

  FuzzInterface_FuzzArgs_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzArgs_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a =
        decoder.decodeStructPointer(FuzzStruct);
    val.b =
        decoder.decodeStructPointer(FuzzStruct);
    return val;
  };

  FuzzInterface_FuzzArgs_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzArgs_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FuzzStruct, val.a);
    encoder.encodeStructPointer(FuzzStruct, val.b);
  };
  function FuzzInterface_FuzzArgsResp_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzArgsResp_Params.prototype.initDefaults_ = function() {
    this.a = null;
    this.b = null;
  };
  FuzzInterface_FuzzArgsResp_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzArgsResp_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgsResp_Params.a
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FuzzStruct, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgsResp_Params.b
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, FuzzStruct, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzArgsResp_Params.encodedSize = codec.kStructHeaderSize + 16;

  FuzzInterface_FuzzArgsResp_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzArgsResp_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a =
        decoder.decodeStructPointer(FuzzStruct);
    val.b =
        decoder.decodeStructPointer(FuzzStruct);
    return val;
  };

  FuzzInterface_FuzzArgsResp_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzArgsResp_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FuzzStruct, val.a);
    encoder.encodeStructPointer(FuzzStruct, val.b);
  };
  function FuzzInterface_FuzzArgsResp_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzArgsResp_ResponseParams.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzArgsResp_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzArgsResp_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzArgsResp_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzArgsResp_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzArgsResp_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzArgsResp_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzArgsResp_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzArgsSyncResp_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzArgsSyncResp_Params.prototype.initDefaults_ = function() {
    this.a = null;
    this.b = null;
  };
  FuzzInterface_FuzzArgsSyncResp_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzArgsSyncResp_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgsSyncResp_Params.a
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FuzzStruct, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzArgsSyncResp_Params.b
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, FuzzStruct, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzArgsSyncResp_Params.encodedSize = codec.kStructHeaderSize + 16;

  FuzzInterface_FuzzArgsSyncResp_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzArgsSyncResp_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.a =
        decoder.decodeStructPointer(FuzzStruct);
    val.b =
        decoder.decodeStructPointer(FuzzStruct);
    return val;
  };

  FuzzInterface_FuzzArgsSyncResp_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzArgsSyncResp_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FuzzStruct, val.a);
    encoder.encodeStructPointer(FuzzStruct, val.b);
  };
  function FuzzInterface_FuzzArgsSyncResp_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzArgsSyncResp_ResponseParams.prototype.initDefaults_ = function() {
  };
  FuzzInterface_FuzzArgsSyncResp_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzArgsSyncResp_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzArgsSyncResp_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  FuzzInterface_FuzzArgsSyncResp_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzArgsSyncResp_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FuzzInterface_FuzzArgsSyncResp_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzArgsSyncResp_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function FuzzInterface_FuzzAssociated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FuzzInterface_FuzzAssociated_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  FuzzInterface_FuzzAssociated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FuzzInterface_FuzzAssociated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FuzzInterface_FuzzAssociated_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FuzzInterface_FuzzAssociated_Params.encodedSize = codec.kStructHeaderSize + 8;

  FuzzInterface_FuzzAssociated_Params.decode = function(decoder) {
    var packed;
    var val = new FuzzInterface_FuzzAssociated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FuzzInterface_FuzzAssociated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FuzzInterface_FuzzAssociated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function FuzzUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  FuzzUnion.Tags = {
    fuzzBool: 0,
    fuzzInt8: 1,
    fuzzUint8: 2,
    fuzzInt16: 3,
    fuzzUint16: 4,
    fuzzInt32: 5,
    fuzzUint32: 6,
    fuzzInt64: 7,
    fuzzUint64: 8,
    fuzzFloat: 9,
    fuzzDouble: 10,
    fuzzString: 11,
    fuzzBoolArray: 12,
    fuzzPrimitiveArray: 13,
    fuzzStructArray: 14,
    fuzzPrimitiveMap: 15,
    fuzzArrayMap: 16,
    fuzzStructMap: 17,
    fuzzUnionMap: 18,
    fuzzComplex: 19,
  };

  FuzzUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  FuzzUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fuzzBool",
        "fuzzInt8",
        "fuzzUint8",
        "fuzzInt16",
        "fuzzUint16",
        "fuzzInt32",
        "fuzzUint32",
        "fuzzInt64",
        "fuzzUint64",
        "fuzzFloat",
        "fuzzDouble",
        "fuzzString",
        "fuzzBoolArray",
        "fuzzPrimitiveArray",
        "fuzzStructArray",
        "fuzzPrimitiveMap",
        "fuzzArrayMap",
        "fuzzStructMap",
        "fuzzUnionMap",
        "fuzzComplex",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a FuzzUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(FuzzUnion.prototype, "fuzzBool", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzBool) {
        throw new ReferenceError(
            "FuzzUnion.fuzzBool is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzBool;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzInt8", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzInt8) {
        throw new ReferenceError(
            "FuzzUnion.fuzzInt8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzInt8;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzUint8", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzUint8) {
        throw new ReferenceError(
            "FuzzUnion.fuzzUint8 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzUint8;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzInt16", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzInt16) {
        throw new ReferenceError(
            "FuzzUnion.fuzzInt16 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzInt16;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzUint16", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzUint16) {
        throw new ReferenceError(
            "FuzzUnion.fuzzUint16 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzUint16;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzInt32", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzInt32) {
        throw new ReferenceError(
            "FuzzUnion.fuzzInt32 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzInt32;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzUint32", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzUint32) {
        throw new ReferenceError(
            "FuzzUnion.fuzzUint32 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzUint32;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzInt64", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzInt64) {
        throw new ReferenceError(
            "FuzzUnion.fuzzInt64 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzInt64;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzUint64", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzUint64) {
        throw new ReferenceError(
            "FuzzUnion.fuzzUint64 is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzUint64;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzFloat", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzFloat) {
        throw new ReferenceError(
            "FuzzUnion.fuzzFloat is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzFloat;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzDouble", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzDouble) {
        throw new ReferenceError(
            "FuzzUnion.fuzzDouble is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzDouble;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzString", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzString) {
        throw new ReferenceError(
            "FuzzUnion.fuzzString is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzString;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzBoolArray", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzBoolArray) {
        throw new ReferenceError(
            "FuzzUnion.fuzzBoolArray is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzBoolArray;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzPrimitiveArray", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzPrimitiveArray) {
        throw new ReferenceError(
            "FuzzUnion.fuzzPrimitiveArray is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzPrimitiveArray;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzStructArray", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzStructArray) {
        throw new ReferenceError(
            "FuzzUnion.fuzzStructArray is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzStructArray;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzPrimitiveMap", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzPrimitiveMap) {
        throw new ReferenceError(
            "FuzzUnion.fuzzPrimitiveMap is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzPrimitiveMap;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzArrayMap", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzArrayMap) {
        throw new ReferenceError(
            "FuzzUnion.fuzzArrayMap is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzArrayMap;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzStructMap", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzStructMap) {
        throw new ReferenceError(
            "FuzzUnion.fuzzStructMap is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzStructMap;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzUnionMap", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzUnionMap) {
        throw new ReferenceError(
            "FuzzUnion.fuzzUnionMap is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzUnionMap;
      this.$data = value;
    }
  });
  Object.defineProperty(FuzzUnion.prototype, "fuzzComplex", {
    get: function() {
      if (this.$tag != FuzzUnion.Tags.fuzzComplex) {
        throw new ReferenceError(
            "FuzzUnion.fuzzComplex is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = FuzzUnion.Tags.fuzzComplex;
      this.$data = value;
    }
  });


    FuzzUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case FuzzUnion.Tags.fuzzBool:
          encoder.writeUint8(val.fuzzBool ? 1 : 0);
          break;
        case FuzzUnion.Tags.fuzzInt8:
          encoder.encodeStruct(codec.Int8, val.fuzzInt8);
          break;
        case FuzzUnion.Tags.fuzzUint8:
          encoder.encodeStruct(codec.Uint8, val.fuzzUint8);
          break;
        case FuzzUnion.Tags.fuzzInt16:
          encoder.encodeStruct(codec.Int16, val.fuzzInt16);
          break;
        case FuzzUnion.Tags.fuzzUint16:
          encoder.encodeStruct(codec.Uint16, val.fuzzUint16);
          break;
        case FuzzUnion.Tags.fuzzInt32:
          encoder.encodeStruct(codec.Int32, val.fuzzInt32);
          break;
        case FuzzUnion.Tags.fuzzUint32:
          encoder.encodeStruct(codec.Uint32, val.fuzzUint32);
          break;
        case FuzzUnion.Tags.fuzzInt64:
          encoder.encodeStruct(codec.Int64, val.fuzzInt64);
          break;
        case FuzzUnion.Tags.fuzzUint64:
          encoder.encodeStruct(codec.Uint64, val.fuzzUint64);
          break;
        case FuzzUnion.Tags.fuzzFloat:
          encoder.encodeStruct(codec.Float, val.fuzzFloat);
          break;
        case FuzzUnion.Tags.fuzzDouble:
          encoder.encodeStruct(codec.Double, val.fuzzDouble);
          break;
        case FuzzUnion.Tags.fuzzString:
          encoder.encodeStruct(codec.String, val.fuzzString);
          break;
        case FuzzUnion.Tags.fuzzBoolArray:
          encoder.encodeArrayPointer(codec.PackedBool, val.fuzzBoolArray);
          break;
        case FuzzUnion.Tags.fuzzPrimitiveArray:
          encoder.encodeArrayPointer(codec.Int8, val.fuzzPrimitiveArray);
          break;
        case FuzzUnion.Tags.fuzzStructArray:
          encoder.encodeArrayPointer(new codec.PointerTo(FuzzDummyStruct), val.fuzzStructArray);
          break;
        case FuzzUnion.Tags.fuzzPrimitiveMap:
          encoder.encodeMapPointer(codec.String, codec.Int8, val.fuzzPrimitiveMap);
          break;
        case FuzzUnion.Tags.fuzzArrayMap:
          encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.String), val.fuzzArrayMap);
          break;
        case FuzzUnion.Tags.fuzzStructMap:
          encoder.encodeMapPointer(codec.String, new codec.PointerTo(FuzzDummyStruct), val.fuzzStructMap);
          break;
        case FuzzUnion.Tags.fuzzUnionMap:
          encoder.encodeMapPointer(new codec.Enum(FuzzEnum), FuzzUnion, val.fuzzUnionMap);
          break;
        case FuzzUnion.Tags.fuzzComplex:
          encoder.encodeArrayPointer(new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(FuzzUnion))), val.fuzzComplex);
          break;
      }
      encoder.align();
    };


    FuzzUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new FuzzUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case FuzzUnion.Tags.fuzzBool:
          result.fuzzBool = decoder.readUint8() ? true : false;
          break;
        case FuzzUnion.Tags.fuzzInt8:
          result.fuzzInt8 = decoder.decodeStruct(codec.Int8);
          break;
        case FuzzUnion.Tags.fuzzUint8:
          result.fuzzUint8 = decoder.decodeStruct(codec.Uint8);
          break;
        case FuzzUnion.Tags.fuzzInt16:
          result.fuzzInt16 = decoder.decodeStruct(codec.Int16);
          break;
        case FuzzUnion.Tags.fuzzUint16:
          result.fuzzUint16 = decoder.decodeStruct(codec.Uint16);
          break;
        case FuzzUnion.Tags.fuzzInt32:
          result.fuzzInt32 = decoder.decodeStruct(codec.Int32);
          break;
        case FuzzUnion.Tags.fuzzUint32:
          result.fuzzUint32 = decoder.decodeStruct(codec.Uint32);
          break;
        case FuzzUnion.Tags.fuzzInt64:
          result.fuzzInt64 = decoder.decodeStruct(codec.Int64);
          break;
        case FuzzUnion.Tags.fuzzUint64:
          result.fuzzUint64 = decoder.decodeStruct(codec.Uint64);
          break;
        case FuzzUnion.Tags.fuzzFloat:
          result.fuzzFloat = decoder.decodeStruct(codec.Float);
          break;
        case FuzzUnion.Tags.fuzzDouble:
          result.fuzzDouble = decoder.decodeStruct(codec.Double);
          break;
        case FuzzUnion.Tags.fuzzString:
          result.fuzzString = decoder.decodeStruct(codec.String);
          break;
        case FuzzUnion.Tags.fuzzBoolArray:
          result.fuzzBoolArray = decoder.decodeArrayPointer(codec.PackedBool);
          break;
        case FuzzUnion.Tags.fuzzPrimitiveArray:
          result.fuzzPrimitiveArray = decoder.decodeArrayPointer(codec.Int8);
          break;
        case FuzzUnion.Tags.fuzzStructArray:
          result.fuzzStructArray = decoder.decodeArrayPointer(new codec.PointerTo(FuzzDummyStruct));
          break;
        case FuzzUnion.Tags.fuzzPrimitiveMap:
          result.fuzzPrimitiveMap = decoder.decodeMapPointer(codec.String, codec.Int8);
          break;
        case FuzzUnion.Tags.fuzzArrayMap:
          result.fuzzArrayMap = decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.String));
          break;
        case FuzzUnion.Tags.fuzzStructMap:
          result.fuzzStructMap = decoder.decodeMapPointer(codec.String, new codec.PointerTo(FuzzDummyStruct));
          break;
        case FuzzUnion.Tags.fuzzUnionMap:
          result.fuzzUnionMap = decoder.decodeMapPointer(new codec.Enum(FuzzEnum), FuzzUnion);
          break;
        case FuzzUnion.Tags.fuzzComplex:
          result.fuzzComplex = decoder.decodeArrayPointer(new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(FuzzUnion))));
          break;
      }
      decoder.align();

      return result;
    };


    FuzzUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case FuzzUnion.Tags.fuzzBool:
          

          break;
        case FuzzUnion.Tags.fuzzInt8:
          

          break;
        case FuzzUnion.Tags.fuzzUint8:
          

          break;
        case FuzzUnion.Tags.fuzzInt16:
          

          break;
        case FuzzUnion.Tags.fuzzUint16:
          

          break;
        case FuzzUnion.Tags.fuzzInt32:
          

          break;
        case FuzzUnion.Tags.fuzzUint32:
          

          break;
        case FuzzUnion.Tags.fuzzInt64:
          

          break;
        case FuzzUnion.Tags.fuzzUint64:
          

          break;
        case FuzzUnion.Tags.fuzzFloat:
          

          break;
        case FuzzUnion.Tags.fuzzDouble:
          

          break;
        case FuzzUnion.Tags.fuzzString:
          

    // validate FuzzUnion.fuzzString
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzBoolArray:
          

    // validate FuzzUnion.fuzzBoolArray
    err = messageValidator.validateArrayPointer(data_offset, 1, codec.PackedBool, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzPrimitiveArray:
          

    // validate FuzzUnion.fuzzPrimitiveArray
    err = messageValidator.validateArrayPointer(data_offset, 1, codec.Int8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzStructArray:
          

    // validate FuzzUnion.fuzzStructArray
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.PointerTo(FuzzDummyStruct), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzPrimitiveMap:
          

    // validate FuzzUnion.fuzzPrimitiveMap
    err = messageValidator.validateMapPointer(data_offset, false, codec.String, codec.Int8, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzArrayMap:
          

    // validate FuzzUnion.fuzzArrayMap
    err = messageValidator.validateMapPointer(data_offset, false, codec.String, new codec.ArrayOf(codec.String), false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzStructMap:
          

    // validate FuzzUnion.fuzzStructMap
    err = messageValidator.validateMapPointer(data_offset, false, codec.String, new codec.PointerTo(FuzzDummyStruct), false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzUnionMap:
          

    // validate FuzzUnion.fuzzUnionMap
    err = messageValidator.validateMapPointer(data_offset, false, new codec.Enum(FuzzEnum), FuzzUnion, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case FuzzUnion.Tags.fuzzComplex:
          

    // validate FuzzUnion.fuzzComplex
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.MapOf(new codec.Enum(FuzzEnum), new codec.MapOf(codec.Int8, new codec.NullableArrayOf(FuzzUnion))), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  FuzzUnion.encodedSize = 16;
  var kFuzzDummyInterface_Ping_Name = 1561451196;

  function FuzzDummyInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FuzzDummyInterface,
                                                   handleOrPtrInfo);
  }

  function FuzzDummyInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FuzzDummyInterface, associatedInterfacePtrInfo);
  }

  FuzzDummyInterfaceAssociatedPtr.prototype =
      Object.create(FuzzDummyInterfacePtr.prototype);
  FuzzDummyInterfaceAssociatedPtr.prototype.constructor =
      FuzzDummyInterfaceAssociatedPtr;

  function FuzzDummyInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  FuzzDummyInterfacePtr.prototype.ping = function() {
    return FuzzDummyInterfaceProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzDummyInterfaceProxy.prototype.ping = function() {
    var params_ = new FuzzDummyInterface_Ping_Params();
    var builder = new codec.MessageV0Builder(
        kFuzzDummyInterface_Ping_Name,
        codec.align(FuzzDummyInterface_Ping_Params.encodedSize));
    builder.encodeStruct(FuzzDummyInterface_Ping_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FuzzDummyInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  FuzzDummyInterfaceStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }

  FuzzDummyInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFuzzDummyInterface_Ping_Name:
      var params = reader.decodeStruct(FuzzDummyInterface_Ping_Params);
      this.ping();
      return true;
    default:
      return false;
    }
  };

  FuzzDummyInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFuzzDummyInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFuzzDummyInterface_Ping_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FuzzDummyInterface_Ping_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFuzzDummyInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FuzzDummyInterface = {
    name: 'fuzz.mojom.FuzzDummyInterface',
    kVersion: 0,
    ptrClass: FuzzDummyInterfacePtr,
    proxyClass: FuzzDummyInterfaceProxy,
    stubClass: FuzzDummyInterfaceStub,
    validateRequest: validateFuzzDummyInterfaceRequest,
    validateResponse: null,
  };
  FuzzDummyInterfaceStub.prototype.validator = validateFuzzDummyInterfaceRequest;
  FuzzDummyInterfaceProxy.prototype.validator = null;
  var kFuzzInterface_FuzzBasic_Name = 1735479440;
  var kFuzzInterface_FuzzBasicResp_Name = 272240439;
  var kFuzzInterface_FuzzBasicSyncResp_Name = 1489160645;
  var kFuzzInterface_FuzzArgs_Name = 1990872866;
  var kFuzzInterface_FuzzArgsResp_Name = 1978785461;
  var kFuzzInterface_FuzzArgsSyncResp_Name = 270024292;
  var kFuzzInterface_FuzzAssociated_Name = 534305164;

  function FuzzInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FuzzInterface,
                                                   handleOrPtrInfo);
  }

  function FuzzInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FuzzInterface, associatedInterfacePtrInfo);
  }

  FuzzInterfaceAssociatedPtr.prototype =
      Object.create(FuzzInterfacePtr.prototype);
  FuzzInterfaceAssociatedPtr.prototype.constructor =
      FuzzInterfaceAssociatedPtr;

  function FuzzInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  FuzzInterfacePtr.prototype.fuzzBasic = function() {
    return FuzzInterfaceProxy.prototype.fuzzBasic
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzBasic = function() {
    var params_ = new FuzzInterface_FuzzBasic_Params();
    var builder = new codec.MessageV0Builder(
        kFuzzInterface_FuzzBasic_Name,
        codec.align(FuzzInterface_FuzzBasic_Params.encodedSize));
    builder.encodeStruct(FuzzInterface_FuzzBasic_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FuzzInterfacePtr.prototype.fuzzBasicResp = function() {
    return FuzzInterfaceProxy.prototype.fuzzBasicResp
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzBasicResp = function() {
    var params_ = new FuzzInterface_FuzzBasicResp_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFuzzInterface_FuzzBasicResp_Name,
          codec.align(FuzzInterface_FuzzBasicResp_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FuzzInterface_FuzzBasicResp_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FuzzInterface_FuzzBasicResp_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FuzzInterfacePtr.prototype.fuzzBasicSyncResp = function() {
    return FuzzInterfaceProxy.prototype.fuzzBasicSyncResp
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzBasicSyncResp = function() {
    var params_ = new FuzzInterface_FuzzBasicSyncResp_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFuzzInterface_FuzzBasicSyncResp_Name,
          codec.align(FuzzInterface_FuzzBasicSyncResp_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FuzzInterface_FuzzBasicSyncResp_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FuzzInterface_FuzzBasicSyncResp_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FuzzInterfacePtr.prototype.fuzzArgs = function() {
    return FuzzInterfaceProxy.prototype.fuzzArgs
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzArgs = function(a, b) {
    var params_ = new FuzzInterface_FuzzArgs_Params();
    params_.a = a;
    params_.b = b;
    var builder = new codec.MessageV0Builder(
        kFuzzInterface_FuzzArgs_Name,
        codec.align(FuzzInterface_FuzzArgs_Params.encodedSize));
    builder.encodeStruct(FuzzInterface_FuzzArgs_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FuzzInterfacePtr.prototype.fuzzArgsResp = function() {
    return FuzzInterfaceProxy.prototype.fuzzArgsResp
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzArgsResp = function(a, b) {
    var params_ = new FuzzInterface_FuzzArgsResp_Params();
    params_.a = a;
    params_.b = b;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFuzzInterface_FuzzArgsResp_Name,
          codec.align(FuzzInterface_FuzzArgsResp_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FuzzInterface_FuzzArgsResp_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FuzzInterface_FuzzArgsResp_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FuzzInterfacePtr.prototype.fuzzArgsSyncResp = function() {
    return FuzzInterfaceProxy.prototype.fuzzArgsSyncResp
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzArgsSyncResp = function(a, b) {
    var params_ = new FuzzInterface_FuzzArgsSyncResp_Params();
    params_.a = a;
    params_.b = b;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFuzzInterface_FuzzArgsSyncResp_Name,
          codec.align(FuzzInterface_FuzzArgsSyncResp_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FuzzInterface_FuzzArgsSyncResp_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FuzzInterface_FuzzArgsSyncResp_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FuzzInterfacePtr.prototype.fuzzAssociated = function() {
    return FuzzInterfaceProxy.prototype.fuzzAssociated
        .apply(this.ptr.getProxy(), arguments);
  };

  FuzzInterfaceProxy.prototype.fuzzAssociated = function(receiver) {
    var params_ = new FuzzInterface_FuzzAssociated_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kFuzzInterface_FuzzAssociated_Name,
        codec.align(FuzzInterface_FuzzAssociated_Params.encodedSize));
    builder.setPayload(FuzzInterface_FuzzAssociated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FuzzInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  FuzzInterfaceStub.prototype.fuzzBasic = function() {
    return this.delegate_ && this.delegate_.fuzzBasic && this.delegate_.fuzzBasic();
  }
  FuzzInterfaceStub.prototype.fuzzBasicResp = function() {
    return this.delegate_ && this.delegate_.fuzzBasicResp && this.delegate_.fuzzBasicResp();
  }
  FuzzInterfaceStub.prototype.fuzzBasicSyncResp = function() {
    return this.delegate_ && this.delegate_.fuzzBasicSyncResp && this.delegate_.fuzzBasicSyncResp();
  }
  FuzzInterfaceStub.prototype.fuzzArgs = function(a, b) {
    return this.delegate_ && this.delegate_.fuzzArgs && this.delegate_.fuzzArgs(a, b);
  }
  FuzzInterfaceStub.prototype.fuzzArgsResp = function(a, b) {
    return this.delegate_ && this.delegate_.fuzzArgsResp && this.delegate_.fuzzArgsResp(a, b);
  }
  FuzzInterfaceStub.prototype.fuzzArgsSyncResp = function(a, b) {
    return this.delegate_ && this.delegate_.fuzzArgsSyncResp && this.delegate_.fuzzArgsSyncResp(a, b);
  }
  FuzzInterfaceStub.prototype.fuzzAssociated = function(receiver) {
    return this.delegate_ && this.delegate_.fuzzAssociated && this.delegate_.fuzzAssociated(receiver);
  }

  FuzzInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFuzzInterface_FuzzBasic_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzBasic_Params);
      this.fuzzBasic();
      return true;
    case kFuzzInterface_FuzzArgs_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzArgs_Params);
      this.fuzzArgs(params.a, params.b);
      return true;
    case kFuzzInterface_FuzzAssociated_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzAssociated_Params);
      this.fuzzAssociated(params.receiver);
      return true;
    default:
      return false;
    }
  };

  FuzzInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFuzzInterface_FuzzBasicResp_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzBasicResp_Params);
      this.fuzzBasicResp().then(function(response) {
        var responseParams =
            new FuzzInterface_FuzzBasicResp_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kFuzzInterface_FuzzBasicResp_Name,
            codec.align(FuzzInterface_FuzzBasicResp_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FuzzInterface_FuzzBasicResp_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFuzzInterface_FuzzBasicSyncResp_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzBasicSyncResp_Params);
      this.fuzzBasicSyncResp().then(function(response) {
        var responseParams =
            new FuzzInterface_FuzzBasicSyncResp_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kFuzzInterface_FuzzBasicSyncResp_Name,
            codec.align(FuzzInterface_FuzzBasicSyncResp_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FuzzInterface_FuzzBasicSyncResp_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFuzzInterface_FuzzArgsResp_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzArgsResp_Params);
      this.fuzzArgsResp(params.a, params.b).then(function(response) {
        var responseParams =
            new FuzzInterface_FuzzArgsResp_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kFuzzInterface_FuzzArgsResp_Name,
            codec.align(FuzzInterface_FuzzArgsResp_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FuzzInterface_FuzzArgsResp_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFuzzInterface_FuzzArgsSyncResp_Name:
      var params = reader.decodeStruct(FuzzInterface_FuzzArgsSyncResp_Params);
      this.fuzzArgsSyncResp(params.a, params.b).then(function(response) {
        var responseParams =
            new FuzzInterface_FuzzArgsSyncResp_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kFuzzInterface_FuzzArgsSyncResp_Name,
            codec.align(FuzzInterface_FuzzArgsSyncResp_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FuzzInterface_FuzzArgsSyncResp_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFuzzInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFuzzInterface_FuzzBasic_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FuzzInterface_FuzzBasic_Params;
      break;
      case kFuzzInterface_FuzzBasicResp_Name:
        if (message.expectsResponse())
          paramsClass = FuzzInterface_FuzzBasicResp_Params;
      break;
      case kFuzzInterface_FuzzBasicSyncResp_Name:
        if (message.expectsResponse())
          paramsClass = FuzzInterface_FuzzBasicSyncResp_Params;
      break;
      case kFuzzInterface_FuzzArgs_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FuzzInterface_FuzzArgs_Params;
      break;
      case kFuzzInterface_FuzzArgsResp_Name:
        if (message.expectsResponse())
          paramsClass = FuzzInterface_FuzzArgsResp_Params;
      break;
      case kFuzzInterface_FuzzArgsSyncResp_Name:
        if (message.expectsResponse())
          paramsClass = FuzzInterface_FuzzArgsSyncResp_Params;
      break;
      case kFuzzInterface_FuzzAssociated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FuzzInterface_FuzzAssociated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFuzzInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFuzzInterface_FuzzBasicResp_Name:
        if (message.isResponse())
          paramsClass = FuzzInterface_FuzzBasicResp_ResponseParams;
        break;
      case kFuzzInterface_FuzzBasicSyncResp_Name:
        if (message.isResponse())
          paramsClass = FuzzInterface_FuzzBasicSyncResp_ResponseParams;
        break;
      case kFuzzInterface_FuzzArgsResp_Name:
        if (message.isResponse())
          paramsClass = FuzzInterface_FuzzArgsResp_ResponseParams;
        break;
      case kFuzzInterface_FuzzArgsSyncResp_Name:
        if (message.isResponse())
          paramsClass = FuzzInterface_FuzzArgsSyncResp_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FuzzInterface = {
    name: 'fuzz.mojom.FuzzInterface',
    kVersion: 0,
    ptrClass: FuzzInterfacePtr,
    proxyClass: FuzzInterfaceProxy,
    stubClass: FuzzInterfaceStub,
    validateRequest: validateFuzzInterfaceRequest,
    validateResponse: validateFuzzInterfaceResponse,
  };
  FuzzInterfaceStub.prototype.validator = validateFuzzInterfaceRequest;
  FuzzInterfaceProxy.prototype.validator = validateFuzzInterfaceResponse;
  exports.FuzzEnum = FuzzEnum;
  exports.FuzzDummyStruct = FuzzDummyStruct;
  exports.FuzzStruct = FuzzStruct;
  exports.FuzzUnion = FuzzUnion;
  exports.FuzzDummyInterface = FuzzDummyInterface;
  exports.FuzzDummyInterfacePtr = FuzzDummyInterfacePtr;
  exports.FuzzDummyInterfaceAssociatedPtr = FuzzDummyInterfaceAssociatedPtr;
  exports.FuzzInterface = FuzzInterface;
  exports.FuzzInterfacePtr = FuzzInterfacePtr;
  exports.FuzzInterfaceAssociatedPtr = FuzzInterfaceAssociatedPtr;
})();