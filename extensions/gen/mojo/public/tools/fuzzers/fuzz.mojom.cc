// mojo/public/tools/fuzzers/fuzz.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/tools/fuzzers/fuzz.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/tools/fuzzers/fuzz.mojom-params-data.h"
#include "mojo/public/tools/fuzzers/fuzz.mojom-shared-message-ids.h"

#include "mojo/public/tools/fuzzers/fuzz.mojom-import-headers.h"


#ifndef MOJO_PUBLIC_TOOLS_FUZZERS_FUZZ_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_TOOLS_FUZZERS_FUZZ_MOJOM_JUMBO_H_
#endif
namespace fuzz {
namespace mojom {
FuzzDummyStruct::FuzzDummyStruct()
    : dummy() {}

FuzzDummyStruct::FuzzDummyStruct(
    int8_t dummy_in)
    : dummy(std::move(dummy_in)) {}

FuzzDummyStruct::~FuzzDummyStruct() = default;
size_t FuzzDummyStruct::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->dummy);
  return seed;
}

void FuzzDummyStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "dummy"), this->dummy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FuzzDummyStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FuzzStruct::FuzzStruct()
    : fuzz_bool(),
      fuzz_int8(),
      fuzz_uint8(),
      fuzz_int16(),
      fuzz_uint16(),
      fuzz_int32(),
      fuzz_uint32(),
      fuzz_int64(),
      fuzz_uint64(),
      fuzz_float(),
      fuzz_double(),
      fuzz_string(),
      fuzz_bool_array(),
      fuzz_primitive_array(),
      fuzz_primitive_map(),
      fuzz_array_map(),
      fuzz_union_map(),
      fuzz_union_array(),
      fuzz_struct_array(),
      fuzz_nullable_array(),
      fuzz_complex() {}

FuzzStruct::FuzzStruct(
    bool fuzz_bool_in,
    int8_t fuzz_int8_in,
    uint8_t fuzz_uint8_in,
    int16_t fuzz_int16_in,
    uint16_t fuzz_uint16_in,
    int32_t fuzz_int32_in,
    uint32_t fuzz_uint32_in,
    int64_t fuzz_int64_in,
    uint64_t fuzz_uint64_in,
    float fuzz_float_in,
    double fuzz_double_in,
    const std::string& fuzz_string_in,
    std::vector<bool> fuzz_bool_array_in,
    std::vector<int8_t> fuzz_primitive_array_in,
    const base::flat_map<std::string, int8_t>& fuzz_primitive_map_in,
    const base::flat_map<std::string, std::vector<std::string>>& fuzz_array_map_in,
    base::flat_map<FuzzEnum, FuzzUnionPtr> fuzz_union_map_in,
    std::vector<FuzzUnionPtr> fuzz_union_array_in,
    std::vector<FuzzStructPtr> fuzz_struct_array_in,
    base::Optional<std::vector<int8_t>> fuzz_nullable_array_in,
    base::Optional<std::vector<base::flat_map<FuzzEnum, base::flat_map<int8_t, base::Optional<std::vector<FuzzStructPtr>>>>>> fuzz_complex_in)
    : fuzz_bool(std::move(fuzz_bool_in)),
      fuzz_int8(std::move(fuzz_int8_in)),
      fuzz_uint8(std::move(fuzz_uint8_in)),
      fuzz_int16(std::move(fuzz_int16_in)),
      fuzz_uint16(std::move(fuzz_uint16_in)),
      fuzz_int32(std::move(fuzz_int32_in)),
      fuzz_uint32(std::move(fuzz_uint32_in)),
      fuzz_int64(std::move(fuzz_int64_in)),
      fuzz_uint64(std::move(fuzz_uint64_in)),
      fuzz_float(std::move(fuzz_float_in)),
      fuzz_double(std::move(fuzz_double_in)),
      fuzz_string(std::move(fuzz_string_in)),
      fuzz_bool_array(std::move(fuzz_bool_array_in)),
      fuzz_primitive_array(std::move(fuzz_primitive_array_in)),
      fuzz_primitive_map(std::move(fuzz_primitive_map_in)),
      fuzz_array_map(std::move(fuzz_array_map_in)),
      fuzz_union_map(std::move(fuzz_union_map_in)),
      fuzz_union_array(std::move(fuzz_union_array_in)),
      fuzz_struct_array(std::move(fuzz_struct_array_in)),
      fuzz_nullable_array(std::move(fuzz_nullable_array_in)),
      fuzz_complex(std::move(fuzz_complex_in)) {}

FuzzStruct::~FuzzStruct() = default;

void FuzzStruct::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_bool"), this->fuzz_bool,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_int8"), this->fuzz_int8,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_uint8"), this->fuzz_uint8,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_int16"), this->fuzz_int16,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_uint16"), this->fuzz_uint16,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_int32"), this->fuzz_int32,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_uint32"), this->fuzz_uint32,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_int64"), this->fuzz_int64,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_uint64"), this->fuzz_uint64,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_float"), this->fuzz_float,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_double"), this->fuzz_double,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_string"), this->fuzz_string,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_bool_array"), this->fuzz_bool_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<bool>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_primitive_array"), this->fuzz_primitive_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<int8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_primitive_map"), this->fuzz_primitive_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, int8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_array_map"), this->fuzz_array_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, std::vector<std::string>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_union_map"), this->fuzz_union_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type base::flat_map<FuzzEnum, FuzzUnionPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_union_array"), this->fuzz_union_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<FuzzUnionPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_struct_array"), this->fuzz_struct_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<FuzzStructPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_nullable_array"), this->fuzz_nullable_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::Optional<std::vector<int8_t>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fuzz_complex"), this->fuzz_complex,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type base::Optional<std::vector<base::flat_map<FuzzEnum, base::flat_map<int8_t, base::Optional<std::vector<FuzzStructPtr>>>>>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FuzzStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FuzzUnion::FuzzUnion() : tag_(Tag::FUZZ_BOOL) {
  data_.fuzz_bool = bool();
}

FuzzUnion::~FuzzUnion() {
  DestroyActive();
}


void FuzzUnion::set_fuzz_bool(
    bool fuzz_bool) {
  if (tag_ != Tag::FUZZ_BOOL) {
    DestroyActive();
    tag_ = Tag::FUZZ_BOOL;
  }
  data_.fuzz_bool = fuzz_bool;
}
void FuzzUnion::set_fuzz_int8(
    int8_t fuzz_int8) {
  if (tag_ != Tag::FUZZ_INT8) {
    DestroyActive();
    tag_ = Tag::FUZZ_INT8;
  }
  data_.fuzz_int8 = fuzz_int8;
}
void FuzzUnion::set_fuzz_uint8(
    uint8_t fuzz_uint8) {
  if (tag_ != Tag::FUZZ_UINT8) {
    DestroyActive();
    tag_ = Tag::FUZZ_UINT8;
  }
  data_.fuzz_uint8 = fuzz_uint8;
}
void FuzzUnion::set_fuzz_int16(
    int16_t fuzz_int16) {
  if (tag_ != Tag::FUZZ_INT16) {
    DestroyActive();
    tag_ = Tag::FUZZ_INT16;
  }
  data_.fuzz_int16 = fuzz_int16;
}
void FuzzUnion::set_fuzz_uint16(
    uint16_t fuzz_uint16) {
  if (tag_ != Tag::FUZZ_UINT16) {
    DestroyActive();
    tag_ = Tag::FUZZ_UINT16;
  }
  data_.fuzz_uint16 = fuzz_uint16;
}
void FuzzUnion::set_fuzz_int32(
    int32_t fuzz_int32) {
  if (tag_ != Tag::FUZZ_INT32) {
    DestroyActive();
    tag_ = Tag::FUZZ_INT32;
  }
  data_.fuzz_int32 = fuzz_int32;
}
void FuzzUnion::set_fuzz_uint32(
    uint32_t fuzz_uint32) {
  if (tag_ != Tag::FUZZ_UINT32) {
    DestroyActive();
    tag_ = Tag::FUZZ_UINT32;
  }
  data_.fuzz_uint32 = fuzz_uint32;
}
void FuzzUnion::set_fuzz_int64(
    int64_t fuzz_int64) {
  if (tag_ != Tag::FUZZ_INT64) {
    DestroyActive();
    tag_ = Tag::FUZZ_INT64;
  }
  data_.fuzz_int64 = fuzz_int64;
}
void FuzzUnion::set_fuzz_uint64(
    uint64_t fuzz_uint64) {
  if (tag_ != Tag::FUZZ_UINT64) {
    DestroyActive();
    tag_ = Tag::FUZZ_UINT64;
  }
  data_.fuzz_uint64 = fuzz_uint64;
}
void FuzzUnion::set_fuzz_float(
    float fuzz_float) {
  if (tag_ != Tag::FUZZ_FLOAT) {
    DestroyActive();
    tag_ = Tag::FUZZ_FLOAT;
  }
  data_.fuzz_float = fuzz_float;
}
void FuzzUnion::set_fuzz_double(
    double fuzz_double) {
  if (tag_ != Tag::FUZZ_DOUBLE) {
    DestroyActive();
    tag_ = Tag::FUZZ_DOUBLE;
  }
  data_.fuzz_double = fuzz_double;
}
void FuzzUnion::set_fuzz_string(
    const std::string& fuzz_string) {
  if (tag_ == Tag::FUZZ_STRING) {
    *(data_.fuzz_string) = std::move(fuzz_string);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_STRING;
    data_.fuzz_string = new std::string(
        std::move(fuzz_string));
  }
}
void FuzzUnion::set_fuzz_bool_array(
    std::vector<bool> fuzz_bool_array) {
  if (tag_ == Tag::FUZZ_BOOL_ARRAY) {
    *(data_.fuzz_bool_array) = std::move(fuzz_bool_array);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_BOOL_ARRAY;
    data_.fuzz_bool_array = new std::vector<bool>(
        std::move(fuzz_bool_array));
  }
}
void FuzzUnion::set_fuzz_primitive_array(
    std::vector<int8_t> fuzz_primitive_array) {
  if (tag_ == Tag::FUZZ_PRIMITIVE_ARRAY) {
    *(data_.fuzz_primitive_array) = std::move(fuzz_primitive_array);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_PRIMITIVE_ARRAY;
    data_.fuzz_primitive_array = new std::vector<int8_t>(
        std::move(fuzz_primitive_array));
  }
}
void FuzzUnion::set_fuzz_struct_array(
    std::vector<FuzzDummyStructPtr> fuzz_struct_array) {
  if (tag_ == Tag::FUZZ_STRUCT_ARRAY) {
    *(data_.fuzz_struct_array) = std::move(fuzz_struct_array);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_STRUCT_ARRAY;
    data_.fuzz_struct_array = new std::vector<FuzzDummyStructPtr>(
        std::move(fuzz_struct_array));
  }
}
void FuzzUnion::set_fuzz_primitive_map(
    const base::flat_map<std::string, int8_t>& fuzz_primitive_map) {
  if (tag_ == Tag::FUZZ_PRIMITIVE_MAP) {
    *(data_.fuzz_primitive_map) = std::move(fuzz_primitive_map);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_PRIMITIVE_MAP;
    data_.fuzz_primitive_map = new base::flat_map<std::string, int8_t>(
        std::move(fuzz_primitive_map));
  }
}
void FuzzUnion::set_fuzz_array_map(
    const base::flat_map<std::string, std::vector<std::string>>& fuzz_array_map) {
  if (tag_ == Tag::FUZZ_ARRAY_MAP) {
    *(data_.fuzz_array_map) = std::move(fuzz_array_map);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_ARRAY_MAP;
    data_.fuzz_array_map = new base::flat_map<std::string, std::vector<std::string>>(
        std::move(fuzz_array_map));
  }
}
void FuzzUnion::set_fuzz_struct_map(
    base::flat_map<std::string, FuzzDummyStructPtr> fuzz_struct_map) {
  if (tag_ == Tag::FUZZ_STRUCT_MAP) {
    *(data_.fuzz_struct_map) = std::move(fuzz_struct_map);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_STRUCT_MAP;
    data_.fuzz_struct_map = new base::flat_map<std::string, FuzzDummyStructPtr>(
        std::move(fuzz_struct_map));
  }
}
void FuzzUnion::set_fuzz_union_map(
    base::flat_map<FuzzEnum, FuzzUnionPtr> fuzz_union_map) {
  if (tag_ == Tag::FUZZ_UNION_MAP) {
    *(data_.fuzz_union_map) = std::move(fuzz_union_map);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_UNION_MAP;
    data_.fuzz_union_map = new base::flat_map<FuzzEnum, FuzzUnionPtr>(
        std::move(fuzz_union_map));
  }
}
void FuzzUnion::set_fuzz_complex(
    base::Optional<std::vector<base::flat_map<FuzzEnum, base::flat_map<int8_t, base::Optional<std::vector<FuzzUnionPtr>>>>>> fuzz_complex) {
  if (tag_ == Tag::FUZZ_COMPLEX) {
    *(data_.fuzz_complex) = std::move(fuzz_complex);
  } else {
    DestroyActive();
    tag_ = Tag::FUZZ_COMPLEX;
    data_.fuzz_complex = new base::Optional<std::vector<base::flat_map<FuzzEnum, base::flat_map<int8_t, base::Optional<std::vector<FuzzUnionPtr>>>>>>(
        std::move(fuzz_complex));
  }
}

void FuzzUnion::DestroyActive() {
  switch (tag_) {

    case Tag::FUZZ_BOOL:

      break;
    case Tag::FUZZ_INT8:

      break;
    case Tag::FUZZ_UINT8:

      break;
    case Tag::FUZZ_INT16:

      break;
    case Tag::FUZZ_UINT16:

      break;
    case Tag::FUZZ_INT32:

      break;
    case Tag::FUZZ_UINT32:

      break;
    case Tag::FUZZ_INT64:

      break;
    case Tag::FUZZ_UINT64:

      break;
    case Tag::FUZZ_FLOAT:

      break;
    case Tag::FUZZ_DOUBLE:

      break;
    case Tag::FUZZ_STRING:

      delete data_.fuzz_string;
      break;
    case Tag::FUZZ_BOOL_ARRAY:

      delete data_.fuzz_bool_array;
      break;
    case Tag::FUZZ_PRIMITIVE_ARRAY:

      delete data_.fuzz_primitive_array;
      break;
    case Tag::FUZZ_STRUCT_ARRAY:

      delete data_.fuzz_struct_array;
      break;
    case Tag::FUZZ_PRIMITIVE_MAP:

      delete data_.fuzz_primitive_map;
      break;
    case Tag::FUZZ_ARRAY_MAP:

      delete data_.fuzz_array_map;
      break;
    case Tag::FUZZ_STRUCT_MAP:

      delete data_.fuzz_struct_map;
      break;
    case Tag::FUZZ_UNION_MAP:

      delete data_.fuzz_union_map;
      break;
    case Tag::FUZZ_COMPLEX:

      delete data_.fuzz_complex;
      break;
  }
}

bool FuzzUnion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char FuzzDummyInterface::Name_[] = "fuzz.mojom.FuzzDummyInterface";

FuzzDummyInterfaceProxy::FuzzDummyInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FuzzDummyInterfaceProxy::Ping(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "fuzz::mojom::FuzzDummyInterface::Ping");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzDummyInterface_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzDummyInterface_Ping_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzDummyInterface::Name_);
  message.set_method_name("Ping");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool FuzzDummyInterfaceStubDispatch::Accept(
    FuzzDummyInterface* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFuzzDummyInterface_Ping_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzDummyInterface::Ping",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzDummyInterface::Ping");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::FuzzDummyInterface_Ping_Params_Data* params =
          reinterpret_cast<internal::FuzzDummyInterface_Ping_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FuzzDummyInterface_Ping_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzDummyInterface::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Ping();
      return true;
    }
  }
  return false;
}

// static
bool FuzzDummyInterfaceStubDispatch::AcceptWithResponder(
    FuzzDummyInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kFuzzDummyInterface_Ping_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kFuzzDummyInterfaceValidationInfo[] = {
    {internal::kFuzzDummyInterface_Ping_Name,
     {&internal::FuzzDummyInterface_Ping_Params_Data::Validate,
      nullptr /* no response */}},
};

bool FuzzDummyInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::fuzz::mojom::FuzzDummyInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kFuzzDummyInterfaceValidationInfo);
}

const char FuzzInterface::Name_[] = "fuzz.mojom.FuzzInterface";
bool FuzzInterface::FuzzBasicSyncResp() {
  NOTREACHED();
  return false;
}
bool FuzzInterface::FuzzArgsSyncResp(FuzzStructPtr a, FuzzStructPtr b) {
  NOTREACHED();
  return false;
}

class FuzzInterface_FuzzBasicResp_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzBasicResp_ForwardToCallback(
      FuzzInterface::FuzzBasicRespCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FuzzInterface::FuzzBasicRespCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzBasicResp_ForwardToCallback);
};
class FuzzInterface_FuzzBasicSyncResp_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzBasicSyncResp_HandleSyncResponse(
      bool* result)
      : result_(result) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzBasicSyncResp_HandleSyncResponse);
};

class FuzzInterface_FuzzBasicSyncResp_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzBasicSyncResp_ForwardToCallback(
      FuzzInterface::FuzzBasicSyncRespCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FuzzInterface::FuzzBasicSyncRespCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzBasicSyncResp_ForwardToCallback);
};

class FuzzInterface_FuzzArgsResp_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzArgsResp_ForwardToCallback(
      FuzzInterface::FuzzArgsRespCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FuzzInterface::FuzzArgsRespCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzArgsResp_ForwardToCallback);
};
class FuzzInterface_FuzzArgsSyncResp_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzArgsSyncResp_HandleSyncResponse(
      bool* result)
      : result_(result) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzArgsSyncResp_HandleSyncResponse);
};

class FuzzInterface_FuzzArgsSyncResp_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FuzzInterface_FuzzArgsSyncResp_ForwardToCallback(
      FuzzInterface::FuzzArgsSyncRespCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FuzzInterface::FuzzArgsSyncRespCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzArgsSyncResp_ForwardToCallback);
};

FuzzInterfaceProxy::FuzzInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FuzzInterfaceProxy::FuzzBasic(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "fuzz::mojom::FuzzInterface::FuzzBasic");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasic_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasic_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasic");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void FuzzInterfaceProxy::FuzzBasicResp(
    FuzzBasicRespCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicResp");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasicResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasicResp_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasicResp");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzBasicResp_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
bool FuzzInterfaceProxy::FuzzBasicSyncResp(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicSyncResp");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasicSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasicSyncResp_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasicSyncResp");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzBasicSyncResp_HandleSyncResponse(
          &result));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END0("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicSyncResp");
#endif
  return result;
}

void FuzzInterfaceProxy::FuzzBasicSyncResp(
    FuzzBasicSyncRespCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicSyncResp");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasicSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasicSyncResp_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasicSyncResp");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzBasicSyncResp_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void FuzzInterfaceProxy::FuzzArgs(
    FuzzStructPtr in_a, FuzzStructPtr in_b) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "fuzz::mojom::FuzzInterface::FuzzArgs", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), in_a, 
                        "<value of type FuzzStructPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("b"), in_b, 
                        "<value of type FuzzStructPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgs_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgs_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->a)::BaseType> a_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_a, a_fragment);
  params->a.Set(
      a_fragment.is_null() ? nullptr : a_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->a.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null a in FuzzInterface.FuzzArgs request");
  mojo::internal::MessageFragment<
      typename decltype(params->b)::BaseType> b_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_b, b_fragment);
  params->b.Set(
      b_fragment.is_null() ? nullptr : b_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgs");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void FuzzInterfaceProxy::FuzzArgsResp(
    FuzzStructPtr in_a, FuzzStructPtr in_b, FuzzArgsRespCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "fuzz::mojom::FuzzInterface::FuzzArgsResp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), in_a, 
                        "<value of type FuzzStructPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("b"), in_b, 
                        "<value of type FuzzStructPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgsResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgsResp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->a)::BaseType> a_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_a, a_fragment);
  params->a.Set(
      a_fragment.is_null() ? nullptr : a_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->a.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null a in FuzzInterface.FuzzArgsResp request");
  mojo::internal::MessageFragment<
      typename decltype(params->b)::BaseType> b_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_b, b_fragment);
  params->b.Set(
      b_fragment.is_null() ? nullptr : b_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgsResp");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzArgsResp_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
bool FuzzInterfaceProxy::FuzzArgsSyncResp(
    FuzzStructPtr param_a, FuzzStructPtr param_b) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "fuzz::mojom::FuzzInterface::FuzzArgsSyncResp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), param_a, 
                        "<value of type FuzzStructPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("b"), param_b, 
                        "<value of type FuzzStructPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgsSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgsSyncResp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->a)::BaseType> a_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      param_a, a_fragment);
  params->a.Set(
      a_fragment.is_null() ? nullptr : a_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->a.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null a in FuzzInterface.FuzzArgsSyncResp request");
  mojo::internal::MessageFragment<
      typename decltype(params->b)::BaseType> b_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      param_b, b_fragment);
  params->b.Set(
      b_fragment.is_null() ? nullptr : b_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgsSyncResp");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzArgsSyncResp_HandleSyncResponse(
          &result));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END0("mojom", "fuzz::mojom::FuzzInterface::FuzzArgsSyncResp");
#endif
  return result;
}

void FuzzInterfaceProxy::FuzzArgsSyncResp(
    FuzzStructPtr in_a, FuzzStructPtr in_b, FuzzArgsSyncRespCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "fuzz::mojom::FuzzInterface::FuzzArgsSyncResp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), in_a, 
                        "<value of type FuzzStructPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("b"), in_b, 
                        "<value of type FuzzStructPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgsSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgsSyncResp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->a)::BaseType> a_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_a, a_fragment);
  params->a.Set(
      a_fragment.is_null() ? nullptr : a_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->a.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null a in FuzzInterface.FuzzArgsSyncResp request");
  mojo::internal::MessageFragment<
      typename decltype(params->b)::BaseType> b_fragment(
          params.message());
  mojo::internal::Serialize<::fuzz::mojom::FuzzStructDataView>(
      in_b, b_fragment);
  params->b.Set(
      b_fragment.is_null() ? nullptr : b_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgsSyncResp");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FuzzInterface_FuzzArgsSyncResp_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void FuzzInterfaceProxy::FuzzAssociated(
    ::mojo::PendingAssociatedReceiver<FuzzDummyInterface> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "fuzz::mojom::FuzzInterface::FuzzAssociated", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingAssociatedReceiver<FuzzDummyInterface>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzAssociated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzAssociated_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::fuzz::mojom::FuzzDummyInterfaceAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in FuzzInterface.FuzzAssociated request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzAssociated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class FuzzInterface_FuzzBasicResp_ProxyToResponder {
 public:
  static FuzzInterface::FuzzBasicRespCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<FuzzInterface_FuzzBasicResp_ProxyToResponder> proxy(
        new FuzzInterface_FuzzBasicResp_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&FuzzInterface_FuzzBasicResp_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FuzzInterface_FuzzBasicResp_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  FuzzInterface_FuzzBasicResp_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FuzzInterface::FuzzBasicRespCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzBasicResp_ProxyToResponder);
};

bool FuzzInterface_FuzzBasicResp_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicRespCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzBasicResp_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FuzzInterface_FuzzBasicResp_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzBasicResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void FuzzInterface_FuzzBasicResp_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicRespCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasicResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasicResp_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicRespCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasicResp");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class FuzzInterface_FuzzBasicSyncResp_ProxyToResponder {
 public:
  static FuzzInterface::FuzzBasicSyncRespCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<FuzzInterface_FuzzBasicSyncResp_ProxyToResponder> proxy(
        new FuzzInterface_FuzzBasicSyncResp_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&FuzzInterface_FuzzBasicSyncResp_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FuzzInterface_FuzzBasicSyncResp_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  FuzzInterface_FuzzBasicSyncResp_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FuzzInterface::FuzzBasicSyncRespCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzBasicSyncResp_ProxyToResponder);
};

bool FuzzInterface_FuzzBasicSyncResp_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "fuzz::mojom::FuzzInterface::FuzzBasicSyncRespCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzBasicSyncResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void FuzzInterface_FuzzBasicSyncResp_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicSyncRespCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzBasicSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicSyncRespCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzBasicSyncResp");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool FuzzInterface_FuzzBasicSyncResp_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data* params =
      reinterpret_cast<internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzBasicSyncResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 2, true);
    return false;
  }
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}
class FuzzInterface_FuzzArgsResp_ProxyToResponder {
 public:
  static FuzzInterface::FuzzArgsRespCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<FuzzInterface_FuzzArgsResp_ProxyToResponder> proxy(
        new FuzzInterface_FuzzArgsResp_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&FuzzInterface_FuzzArgsResp_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FuzzInterface_FuzzArgsResp_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  FuzzInterface_FuzzArgsResp_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FuzzInterface::FuzzArgsRespCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzArgsResp_ProxyToResponder);
};

bool FuzzInterface_FuzzArgsResp_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "fuzz::mojom::FuzzInterface::FuzzArgsRespCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzArgsResp_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FuzzInterface_FuzzArgsResp_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzArgsResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void FuzzInterface_FuzzArgsResp_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsRespCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgsResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgsResp_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsRespCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgsResp");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class FuzzInterface_FuzzArgsSyncResp_ProxyToResponder {
 public:
  static FuzzInterface::FuzzArgsSyncRespCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<FuzzInterface_FuzzArgsSyncResp_ProxyToResponder> proxy(
        new FuzzInterface_FuzzArgsSyncResp_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&FuzzInterface_FuzzArgsSyncResp_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FuzzInterface_FuzzArgsSyncResp_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  FuzzInterface_FuzzArgsSyncResp_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FuzzInterface::FuzzArgsSyncRespCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(FuzzInterface_FuzzArgsSyncResp_ProxyToResponder);
};

bool FuzzInterface_FuzzArgsSyncResp_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "fuzz::mojom::FuzzInterface::FuzzArgsSyncRespCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzArgsSyncResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void FuzzInterface_FuzzArgsSyncResp_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsSyncRespCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFuzzInterface_FuzzArgsSyncResp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::fuzz::mojom::internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsSyncRespCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FuzzInterface::Name_);
  message.set_method_name("FuzzArgsSyncResp");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool FuzzInterface_FuzzArgsSyncResp_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data* params =
      reinterpret_cast<internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  FuzzInterface_FuzzArgsSyncResp_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FuzzInterface::Name_, 5, true);
    return false;
  }
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}

// static
bool FuzzInterfaceStubDispatch::Accept(
    FuzzInterface* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFuzzInterface_FuzzBasic_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzBasic",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzBasic");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::FuzzInterface_FuzzBasic_Params_Data* params =
          reinterpret_cast<internal::FuzzInterface_FuzzBasic_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FuzzInterface_FuzzBasic_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzBasic();
      return true;
    }
    case internal::kFuzzInterface_FuzzBasicResp_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzBasicSyncResp_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzArgs_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzArgs",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzArgs");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::FuzzInterface_FuzzArgs_Params_Data* params =
          reinterpret_cast<internal::FuzzInterface_FuzzArgs_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FuzzStructPtr p_a{};
      FuzzStructPtr p_b{};
      FuzzInterface_FuzzArgs_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadA(&p_a))
        success = false;
      if (success && !input_data_view.ReadB(&p_b))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzArgs(
std::move(p_a), 
std::move(p_b));
      return true;
    }
    case internal::kFuzzInterface_FuzzArgsResp_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzArgsSyncResp_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzAssociated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzAssociated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzAssociated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::FuzzInterface_FuzzAssociated_Params_Data* params =
          reinterpret_cast<internal::FuzzInterface_FuzzAssociated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<FuzzDummyInterface> p_receiver{};
      FuzzInterface_FuzzAssociated_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzAssociated(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool FuzzInterfaceStubDispatch::AcceptWithResponder(
    FuzzInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kFuzzInterface_FuzzBasic_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzBasicResp_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicResp",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicResp");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::FuzzInterface_FuzzBasicResp_Params_Data* params =
          reinterpret_cast<
              internal::FuzzInterface_FuzzBasicResp_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FuzzInterface_FuzzBasicResp_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 1, false);
        return false;
      }
      FuzzInterface::FuzzBasicRespCallback callback =
          FuzzInterface_FuzzBasicResp_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzBasicResp(std::move(callback));
      return true;
    }
    case internal::kFuzzInterface_FuzzBasicSyncResp_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicSyncResp",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzBasicSyncResp");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::FuzzInterface_FuzzBasicSyncResp_Params_Data* params =
          reinterpret_cast<
              internal::FuzzInterface_FuzzBasicSyncResp_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FuzzInterface_FuzzBasicSyncResp_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 2, false);
        return false;
      }
      FuzzInterface::FuzzBasicSyncRespCallback callback =
          FuzzInterface_FuzzBasicSyncResp_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzBasicSyncResp(std::move(callback));
      return true;
    }
    case internal::kFuzzInterface_FuzzArgs_Name: {
      break;
    }
    case internal::kFuzzInterface_FuzzArgsResp_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsResp",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsResp");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::FuzzInterface_FuzzArgsResp_Params_Data* params =
          reinterpret_cast<
              internal::FuzzInterface_FuzzArgsResp_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FuzzStructPtr p_a{};
      FuzzStructPtr p_b{};
      FuzzInterface_FuzzArgsResp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadA(&p_a))
        success = false;
      if (success && !input_data_view.ReadB(&p_b))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 4, false);
        return false;
      }
      FuzzInterface::FuzzArgsRespCallback callback =
          FuzzInterface_FuzzArgsResp_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzArgsResp(
std::move(p_a), 
std::move(p_b), std::move(callback));
      return true;
    }
    case internal::kFuzzInterface_FuzzArgsSyncResp_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsSyncResp",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)fuzz::mojom::FuzzInterface::FuzzArgsSyncResp");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::FuzzInterface_FuzzArgsSyncResp_Params_Data* params =
          reinterpret_cast<
              internal::FuzzInterface_FuzzArgsSyncResp_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FuzzStructPtr p_a{};
      FuzzStructPtr p_b{};
      FuzzInterface_FuzzArgsSyncResp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadA(&p_a))
        success = false;
      if (success && !input_data_view.ReadB(&p_b))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FuzzInterface::Name_, 5, false);
        return false;
      }
      FuzzInterface::FuzzArgsSyncRespCallback callback =
          FuzzInterface_FuzzArgsSyncResp_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FuzzArgsSyncResp(
std::move(p_a), 
std::move(p_b), std::move(callback));
      return true;
    }
    case internal::kFuzzInterface_FuzzAssociated_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kFuzzInterfaceValidationInfo[] = {
    {internal::kFuzzInterface_FuzzBasic_Name,
     {&internal::FuzzInterface_FuzzBasic_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kFuzzInterface_FuzzBasicResp_Name,
     {&internal::FuzzInterface_FuzzBasicResp_Params_Data::Validate,
      &internal::FuzzInterface_FuzzBasicResp_ResponseParams_Data::Validate}},
    {internal::kFuzzInterface_FuzzBasicSyncResp_Name,
     {&internal::FuzzInterface_FuzzBasicSyncResp_Params_Data::Validate,
      &internal::FuzzInterface_FuzzBasicSyncResp_ResponseParams_Data::Validate}},
    {internal::kFuzzInterface_FuzzArgs_Name,
     {&internal::FuzzInterface_FuzzArgs_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kFuzzInterface_FuzzArgsResp_Name,
     {&internal::FuzzInterface_FuzzArgsResp_Params_Data::Validate,
      &internal::FuzzInterface_FuzzArgsResp_ResponseParams_Data::Validate}},
    {internal::kFuzzInterface_FuzzArgsSyncResp_Name,
     {&internal::FuzzInterface_FuzzArgsSyncResp_Params_Data::Validate,
      &internal::FuzzInterface_FuzzArgsSyncResp_ResponseParams_Data::Validate}},
    {internal::kFuzzInterface_FuzzAssociated_Name,
     {&internal::FuzzInterface_FuzzAssociated_Params_Data::Validate,
      nullptr /* no response */}},
};

bool FuzzInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::fuzz::mojom::FuzzInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kFuzzInterfaceValidationInfo);
}

bool FuzzInterfaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::fuzz::mojom::FuzzInterface::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kFuzzInterfaceValidationInfo);

}
}  // namespace mojom
}  // namespace fuzz

namespace mojo {


// static
bool StructTraits<::fuzz::mojom::FuzzDummyStruct::DataView, ::fuzz::mojom::FuzzDummyStructPtr>::Read(
    ::fuzz::mojom::FuzzDummyStruct::DataView input,
    ::fuzz::mojom::FuzzDummyStructPtr* output) {
  bool success = true;
  ::fuzz::mojom::FuzzDummyStructPtr result(::fuzz::mojom::FuzzDummyStruct::New());
  
      if (success)
        result->dummy = input.dummy();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::fuzz::mojom::FuzzStruct::DataView, ::fuzz::mojom::FuzzStructPtr>::Read(
    ::fuzz::mojom::FuzzStruct::DataView input,
    ::fuzz::mojom::FuzzStructPtr* output) {
  bool success = true;
  ::fuzz::mojom::FuzzStructPtr result(::fuzz::mojom::FuzzStruct::New());
  
      if (success)
        result->fuzz_bool = input.fuzz_bool();
      if (success)
        result->fuzz_int8 = input.fuzz_int8();
      if (success)
        result->fuzz_uint8 = input.fuzz_uint8();
      if (success)
        result->fuzz_int16 = input.fuzz_int16();
      if (success)
        result->fuzz_uint16 = input.fuzz_uint16();
      if (success)
        result->fuzz_int32 = input.fuzz_int32();
      if (success)
        result->fuzz_uint32 = input.fuzz_uint32();
      if (success)
        result->fuzz_int64 = input.fuzz_int64();
      if (success)
        result->fuzz_uint64 = input.fuzz_uint64();
      if (success)
        result->fuzz_float = input.fuzz_float();
      if (success)
        result->fuzz_double = input.fuzz_double();
      if (success && !input.ReadFuzzString(&result->fuzz_string))
        success = false;
      if (success && !input.ReadFuzzBoolArray(&result->fuzz_bool_array))
        success = false;
      if (success && !input.ReadFuzzPrimitiveArray(&result->fuzz_primitive_array))
        success = false;
      if (success && !input.ReadFuzzPrimitiveMap(&result->fuzz_primitive_map))
        success = false;
      if (success && !input.ReadFuzzArrayMap(&result->fuzz_array_map))
        success = false;
      if (success && !input.ReadFuzzUnionMap(&result->fuzz_union_map))
        success = false;
      if (success && !input.ReadFuzzUnionArray(&result->fuzz_union_array))
        success = false;
      if (success && !input.ReadFuzzStructArray(&result->fuzz_struct_array))
        success = false;
      if (success && !input.ReadFuzzNullableArray(&result->fuzz_nullable_array))
        success = false;
      if (success && !input.ReadFuzzComplex(&result->fuzz_complex))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::fuzz::mojom::FuzzUnion::DataView, ::fuzz::mojom::FuzzUnionPtr>::Read(
    ::fuzz::mojom::FuzzUnion::DataView input,
    ::fuzz::mojom::FuzzUnionPtr* output) {
  using UnionType = ::fuzz::mojom::FuzzUnion;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::FUZZ_BOOL: {
      *output = UnionType::NewFuzzBool(input.fuzz_bool());
      break;
    }
    case Tag::FUZZ_INT8: {
      *output = UnionType::NewFuzzInt8(input.fuzz_int8());
      break;
    }
    case Tag::FUZZ_UINT8: {
      *output = UnionType::NewFuzzUint8(input.fuzz_uint8());
      break;
    }
    case Tag::FUZZ_INT16: {
      *output = UnionType::NewFuzzInt16(input.fuzz_int16());
      break;
    }
    case Tag::FUZZ_UINT16: {
      *output = UnionType::NewFuzzUint16(input.fuzz_uint16());
      break;
    }
    case Tag::FUZZ_INT32: {
      *output = UnionType::NewFuzzInt32(input.fuzz_int32());
      break;
    }
    case Tag::FUZZ_UINT32: {
      *output = UnionType::NewFuzzUint32(input.fuzz_uint32());
      break;
    }
    case Tag::FUZZ_INT64: {
      *output = UnionType::NewFuzzInt64(input.fuzz_int64());
      break;
    }
    case Tag::FUZZ_UINT64: {
      *output = UnionType::NewFuzzUint64(input.fuzz_uint64());
      break;
    }
    case Tag::FUZZ_FLOAT: {
      *output = UnionType::NewFuzzFloat(input.fuzz_float());
      break;
    }
    case Tag::FUZZ_DOUBLE: {
      *output = UnionType::NewFuzzDouble(input.fuzz_double());
      break;
    }
    case Tag::FUZZ_STRING: {
      std::string result_fuzz_string;
      if (!input.ReadFuzzString(&result_fuzz_string))
        return false;

      *output = UnionType::NewFuzzString(
          std::move(result_fuzz_string));
      break;
    }
    case Tag::FUZZ_BOOL_ARRAY: {
      std::vector<bool> result_fuzz_bool_array;
      if (!input.ReadFuzzBoolArray(&result_fuzz_bool_array))
        return false;

      *output = UnionType::NewFuzzBoolArray(
          std::move(result_fuzz_bool_array));
      break;
    }
    case Tag::FUZZ_PRIMITIVE_ARRAY: {
      std::vector<int8_t> result_fuzz_primitive_array;
      if (!input.ReadFuzzPrimitiveArray(&result_fuzz_primitive_array))
        return false;

      *output = UnionType::NewFuzzPrimitiveArray(
          std::move(result_fuzz_primitive_array));
      break;
    }
    case Tag::FUZZ_STRUCT_ARRAY: {
      std::vector<::fuzz::mojom::FuzzDummyStructPtr> result_fuzz_struct_array;
      if (!input.ReadFuzzStructArray(&result_fuzz_struct_array))
        return false;

      *output = UnionType::NewFuzzStructArray(
          std::move(result_fuzz_struct_array));
      break;
    }
    case Tag::FUZZ_PRIMITIVE_MAP: {
      base::flat_map<std::string, int8_t> result_fuzz_primitive_map;
      if (!input.ReadFuzzPrimitiveMap(&result_fuzz_primitive_map))
        return false;

      *output = UnionType::NewFuzzPrimitiveMap(
          std::move(result_fuzz_primitive_map));
      break;
    }
    case Tag::FUZZ_ARRAY_MAP: {
      base::flat_map<std::string, std::vector<std::string>> result_fuzz_array_map;
      if (!input.ReadFuzzArrayMap(&result_fuzz_array_map))
        return false;

      *output = UnionType::NewFuzzArrayMap(
          std::move(result_fuzz_array_map));
      break;
    }
    case Tag::FUZZ_STRUCT_MAP: {
      base::flat_map<std::string, ::fuzz::mojom::FuzzDummyStructPtr> result_fuzz_struct_map;
      if (!input.ReadFuzzStructMap(&result_fuzz_struct_map))
        return false;

      *output = UnionType::NewFuzzStructMap(
          std::move(result_fuzz_struct_map));
      break;
    }
    case Tag::FUZZ_UNION_MAP: {
      base::flat_map<::fuzz::mojom::FuzzEnum, ::fuzz::mojom::FuzzUnionPtr> result_fuzz_union_map;
      if (!input.ReadFuzzUnionMap(&result_fuzz_union_map))
        return false;

      *output = UnionType::NewFuzzUnionMap(
          std::move(result_fuzz_union_map));
      break;
    }
    case Tag::FUZZ_COMPLEX: {
      base::Optional<std::vector<base::flat_map<::fuzz::mojom::FuzzEnum, base::flat_map<int8_t, base::Optional<std::vector<::fuzz::mojom::FuzzUnionPtr>>>>>> result_fuzz_complex;
      if (!input.ReadFuzzComplex(&result_fuzz_complex))
        return false;

      *output = UnionType::NewFuzzComplex(
          std::move(result_fuzz_complex));
      break;
    }
    default:
      return false;
  }
  return true;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif