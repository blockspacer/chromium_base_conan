// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mojo/public/tools/fuzzers/mojolpm.proto

#include "mojo/public/tools/fuzzers/mojolpm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto;
namespace mojolpm {
class HandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Handle> _instance;
} _Handle_default_instance_;
class CreateDataPipeOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDataPipeOptions> _instance;
} _CreateDataPipeOptions_default_instance_;
class DataPipeConsumerHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeConsumerHandle> _instance;
} _DataPipeConsumerHandle_default_instance_;
class DataPipeProducerHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeProducerHandle> _instance;
} _DataPipeProducerHandle_default_instance_;
class DataPipeReadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeRead> _instance;
} _DataPipeRead_default_instance_;
class DataPipeWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeWrite> _instance;
} _DataPipeWrite_default_instance_;
class DataPipeConsumerCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeConsumerClose> _instance;
} _DataPipeConsumerClose_default_instance_;
class DataPipeProducerCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPipeProducerClose> _instance;
} _DataPipeProducerClose_default_instance_;
class MessagePipeHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePipeHandle> _instance;
} _MessagePipeHandle_default_instance_;
class SharedBufferHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharedBufferHandle> _instance;
} _SharedBufferHandle_default_instance_;
class PlatformHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlatformHandle> _instance;
} _PlatformHandle_default_instance_;
}  // namespace mojolpm
static void InitDefaultsscc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_CreateDataPipeOptions_default_instance_;
    new (ptr) ::mojolpm::CreateDataPipeOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_DataPipeConsumerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeConsumerClose_default_instance_;
    new (ptr) ::mojolpm::DataPipeConsumerClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPipeConsumerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPipeConsumerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeConsumerHandle_default_instance_;
    new (ptr) ::mojolpm::DataPipeConsumerHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {
      &scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,}};

static void InitDefaultsscc_info_DataPipeProducerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeProducerClose_default_instance_;
    new (ptr) ::mojolpm::DataPipeProducerClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPipeProducerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPipeProducerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeProducerHandle_default_instance_;
    new (ptr) ::mojolpm::DataPipeProducerHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {
      &scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,}};

static void InitDefaultsscc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeRead_default_instance_;
    new (ptr) ::mojolpm::DataPipeRead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {
      &scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,}};

static void InitDefaultsscc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_DataPipeWrite_default_instance_;
    new (ptr) ::mojolpm::DataPipeWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {
      &scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,}};

static void InitDefaultsscc_info_Handle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_Handle_default_instance_;
    new (ptr) ::mojolpm::Handle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Handle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Handle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_MessagePipeHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_MessagePipeHandle_default_instance_;
    new (ptr) ::mojolpm::MessagePipeHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePipeHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePipeHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_PlatformHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_PlatformHandle_default_instance_;
    new (ptr) ::mojolpm::PlatformHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlatformHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlatformHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static void InitDefaultsscc_info_SharedBufferHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mojolpm::_SharedBufferHandle_default_instance_;
    new (ptr) ::mojolpm::SharedBufferHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharedBufferHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SharedBufferHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::Handle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::CreateDataPipeOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::CreateDataPipeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::CreateDataPipeOptions, flags_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::CreateDataPipeOptions, element_num_bytes_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::CreateDataPipeOptions, capacity_num_bytes_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerHandle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerHandle, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerHandle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerHandle, instance_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeRead, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeRead, handle_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeRead, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeWrite, handle_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeWrite, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerClose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeConsumerClose, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerClose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mojolpm::DataPipeProducerClose, id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::MessagePipeHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::SharedBufferHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mojolpm::PlatformHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mojolpm::Handle)},
  { 5, 13, sizeof(::mojolpm::CreateDataPipeOptions)},
  { 16, -1, sizeof(::mojolpm::DataPipeConsumerHandle)},
  { 24, -1, sizeof(::mojolpm::DataPipeProducerHandle)},
  { 32, 39, sizeof(::mojolpm::DataPipeRead)},
  { 41, 48, sizeof(::mojolpm::DataPipeWrite)},
  { 50, 56, sizeof(::mojolpm::DataPipeConsumerClose)},
  { 57, 63, sizeof(::mojolpm::DataPipeProducerClose)},
  { 64, -1, sizeof(::mojolpm::MessagePipeHandle)},
  { 69, -1, sizeof(::mojolpm::SharedBufferHandle)},
  { 74, -1, sizeof(::mojolpm::PlatformHandle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_Handle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_CreateDataPipeOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeConsumerHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeProducerHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeRead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeConsumerClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_DataPipeProducerClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_MessagePipeHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_SharedBufferHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mojolpm::_PlatformHandle_default_instance_),
};

const char descriptor_table_protodef_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'mojo/public/tools/fuzzers/mojolpm.prot"
  "o\022\007mojolpm\"\010\n\006Handle\"]\n\025CreateDataPipeOp"
  "tions\022\r\n\005flags\030\002 \002(\r\022\031\n\021element_num_byte"
  "s\030\003 \002(\r\022\032\n\022capacity_num_bytes\030\004 \002(\r\"b\n\026D"
  "ataPipeConsumerHandle\022\r\n\003old\030\001 \001(\rH\000\022-\n\003"
  "new\030\002 \001(\0132\036.mojolpm.CreateDataPipeOption"
  "sH\000B\n\n\010instance\"b\n\026DataPipeProducerHandl"
  "e\022\r\n\003old\030\001 \001(\rH\000\022-\n\003new\030\002 \001(\0132\036.mojolpm."
  "CreateDataPipeOptionsH\000B\n\n\010instance\"M\n\014D"
  "ataPipeRead\022/\n\006handle\030\001 \002(\0132\037.mojolpm.Da"
  "taPipeConsumerHandle\022\014\n\004size\030\002 \002(\r\"N\n\rDa"
  "taPipeWrite\022/\n\006handle\030\001 \002(\0132\037.mojolpm.Da"
  "taPipeProducerHandle\022\014\n\004data\030\002 \002(\014\"#\n\025Da"
  "taPipeConsumerClose\022\n\n\002id\030\001 \002(\r\"#\n\025DataP"
  "ipeProducerClose\022\n\n\002id\030\001 \002(\r\"\023\n\021MessageP"
  "ipeHandle\"\024\n\022SharedBufferHandle\"\020\n\016Platf"
  "ormHandle"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_sccs[11] = {
  &scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeConsumerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeProducerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_Handle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_MessagePipeHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_PlatformHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
  &scc_info_SharedBufferHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto = {
  false, false, descriptor_table_protodef_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto, "mojo/public/tools/fuzzers/mojolpm.proto", 649,
  &descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_once, descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_sccs, descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto::offsets,
  file_level_metadata_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto, 11, file_level_enum_descriptors_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto, file_level_service_descriptors_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto)), true);
namespace mojolpm {

// ===================================================================

class Handle::_Internal {
 public:
};

Handle::Handle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.Handle)
}
Handle::Handle(const Handle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mojolpm.Handle)
}

void Handle::SharedCtor() {
}

Handle::~Handle() {
  // @@protoc_insertion_point(destructor:mojolpm.Handle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Handle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Handle::ArenaDtor(void* object) {
  Handle* _this = reinterpret_cast< Handle* >(object);
  (void)_this;
}
void Handle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Handle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Handle& Handle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Handle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void Handle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.Handle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Handle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Handle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.Handle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.Handle)
  return target;
}

size_t Handle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.Handle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.Handle)
  GOOGLE_DCHECK_NE(&from, this);
  const Handle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Handle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.Handle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.Handle)
    MergeFrom(*source);
  }
}

void Handle::MergeFrom(const Handle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.Handle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Handle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.Handle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handle::CopyFrom(const Handle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.Handle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handle::IsInitialized() const {
  return true;
}

void Handle::InternalSwap(Handle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Handle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateDataPipeOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateDataPipeOptions>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_element_num_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_capacity_num_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CreateDataPipeOptions::CreateDataPipeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.CreateDataPipeOptions)
}
CreateDataPipeOptions::CreateDataPipeOptions(const CreateDataPipeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacity_num_bytes_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(capacity_num_bytes_));
  // @@protoc_insertion_point(copy_constructor:mojolpm.CreateDataPipeOptions)
}

void CreateDataPipeOptions::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&capacity_num_bytes_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(capacity_num_bytes_));
}

CreateDataPipeOptions::~CreateDataPipeOptions() {
  // @@protoc_insertion_point(destructor:mojolpm.CreateDataPipeOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDataPipeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateDataPipeOptions::ArenaDtor(void* object) {
  CreateDataPipeOptions* _this = reinterpret_cast< CreateDataPipeOptions* >(object);
  (void)_this;
}
void CreateDataPipeOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDataPipeOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDataPipeOptions& CreateDataPipeOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDataPipeOptions_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void CreateDataPipeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.CreateDataPipeOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacity_num_bytes_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(capacity_num_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDataPipeOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 element_num_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_element_num_bytes(&has_bits);
          element_num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 capacity_num_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_capacity_num_bytes(&has_bits);
          capacity_num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDataPipeOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.CreateDataPipeOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // required uint32 element_num_bytes = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_element_num_bytes(), target);
  }

  // required uint32 capacity_num_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_capacity_num_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.CreateDataPipeOptions)
  return target;
}

size_t CreateDataPipeOptions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mojolpm.CreateDataPipeOptions)
  size_t total_size = 0;

  if (_internal_has_flags()) {
    // required uint32 flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (_internal_has_element_num_bytes()) {
    // required uint32 element_num_bytes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element_num_bytes());
  }

  if (_internal_has_capacity_num_bytes()) {
    // required uint32 capacity_num_bytes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity_num_bytes());
  }

  return total_size;
}
size_t CreateDataPipeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.CreateDataPipeOptions)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());

    // required uint32 element_num_bytes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element_num_bytes());

    // required uint32 capacity_num_bytes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity_num_bytes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDataPipeOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.CreateDataPipeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDataPipeOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDataPipeOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.CreateDataPipeOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.CreateDataPipeOptions)
    MergeFrom(*source);
  }
}

void CreateDataPipeOptions::MergeFrom(const CreateDataPipeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.CreateDataPipeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      element_num_bytes_ = from.element_num_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      capacity_num_bytes_ = from.capacity_num_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateDataPipeOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.CreateDataPipeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDataPipeOptions::CopyFrom(const CreateDataPipeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.CreateDataPipeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDataPipeOptions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CreateDataPipeOptions::InternalSwap(CreateDataPipeOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateDataPipeOptions, capacity_num_bytes_)
      + sizeof(CreateDataPipeOptions::capacity_num_bytes_)
      - PROTOBUF_FIELD_OFFSET(CreateDataPipeOptions, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDataPipeOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeConsumerHandle::_Internal {
 public:
  static const ::mojolpm::CreateDataPipeOptions& new_(const DataPipeConsumerHandle* msg);
};

const ::mojolpm::CreateDataPipeOptions&
DataPipeConsumerHandle::_Internal::new_(const DataPipeConsumerHandle* msg) {
  return *msg->instance_.new__;
}
void DataPipeConsumerHandle::set_allocated_new_(::mojolpm::CreateDataPipeOptions* new_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_instance();
  if (new_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_);
    if (message_arena != submessage_arena) {
      new_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_, submessage_arena);
    }
    set_has_new_();
    instance_.new__ = new_;
  }
  // @@protoc_insertion_point(field_set_allocated:mojolpm.DataPipeConsumerHandle.new)
}
DataPipeConsumerHandle::DataPipeConsumerHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeConsumerHandle)
}
DataPipeConsumerHandle::DataPipeConsumerHandle(const DataPipeConsumerHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_instance();
  switch (from.instance_case()) {
    case kOld: {
      _internal_set_old(from._internal_old());
      break;
    }
    case kNew: {
      _internal_mutable_new_()->::mojolpm::CreateDataPipeOptions::MergeFrom(from._internal_new_());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeConsumerHandle)
}

void DataPipeConsumerHandle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  clear_has_instance();
}

DataPipeConsumerHandle::~DataPipeConsumerHandle() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeConsumerHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeConsumerHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_instance()) {
    clear_instance();
  }
}

void DataPipeConsumerHandle::ArenaDtor(void* object) {
  DataPipeConsumerHandle* _this = reinterpret_cast< DataPipeConsumerHandle* >(object);
  (void)_this;
}
void DataPipeConsumerHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeConsumerHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeConsumerHandle& DataPipeConsumerHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeConsumerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeConsumerHandle::clear_instance() {
// @@protoc_insertion_point(one_of_clear_start:mojolpm.DataPipeConsumerHandle)
  switch (instance_case()) {
    case kOld: {
      // No need to clear
      break;
    }
    case kNew: {
      if (GetArena() == nullptr) {
        delete instance_.new__;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTANCE_NOT_SET;
}


void DataPipeConsumerHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeConsumerHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_instance();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeConsumerHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 old = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_old(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mojolpm.CreateDataPipeOptions new = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeConsumerHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeConsumerHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (instance_case()) {
    case kOld: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_old(), target);
      break;
    }
    case kNew: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::new_(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeConsumerHandle)
  return target;
}

size_t DataPipeConsumerHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeConsumerHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (instance_case()) {
    // uint32 old = 1;
    case kOld: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old());
      break;
    }
    // .mojolpm.CreateDataPipeOptions new = 2;
    case kNew: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.new__);
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeConsumerHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeConsumerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeConsumerHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeConsumerHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeConsumerHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeConsumerHandle)
    MergeFrom(*source);
  }
}

void DataPipeConsumerHandle::MergeFrom(const DataPipeConsumerHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeConsumerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.instance_case()) {
    case kOld: {
      _internal_set_old(from._internal_old());
      break;
    }
    case kNew: {
      _internal_mutable_new_()->::mojolpm::CreateDataPipeOptions::MergeFrom(from._internal_new_());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
}

void DataPipeConsumerHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeConsumerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeConsumerHandle::CopyFrom(const DataPipeConsumerHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeConsumerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeConsumerHandle::IsInitialized() const {
  switch (instance_case()) {
    case kOld: {
      break;
    }
    case kNew: {
      if (has_new_()) {
        if (!this->new_().IsInitialized()) return false;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  return true;
}

void DataPipeConsumerHandle::InternalSwap(DataPipeConsumerHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(instance_, other->instance_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeConsumerHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeProducerHandle::_Internal {
 public:
  static const ::mojolpm::CreateDataPipeOptions& new_(const DataPipeProducerHandle* msg);
};

const ::mojolpm::CreateDataPipeOptions&
DataPipeProducerHandle::_Internal::new_(const DataPipeProducerHandle* msg) {
  return *msg->instance_.new__;
}
void DataPipeProducerHandle::set_allocated_new_(::mojolpm::CreateDataPipeOptions* new_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_instance();
  if (new_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_);
    if (message_arena != submessage_arena) {
      new_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_, submessage_arena);
    }
    set_has_new_();
    instance_.new__ = new_;
  }
  // @@protoc_insertion_point(field_set_allocated:mojolpm.DataPipeProducerHandle.new)
}
DataPipeProducerHandle::DataPipeProducerHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeProducerHandle)
}
DataPipeProducerHandle::DataPipeProducerHandle(const DataPipeProducerHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_instance();
  switch (from.instance_case()) {
    case kOld: {
      _internal_set_old(from._internal_old());
      break;
    }
    case kNew: {
      _internal_mutable_new_()->::mojolpm::CreateDataPipeOptions::MergeFrom(from._internal_new_());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeProducerHandle)
}

void DataPipeProducerHandle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  clear_has_instance();
}

DataPipeProducerHandle::~DataPipeProducerHandle() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeProducerHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeProducerHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_instance()) {
    clear_instance();
  }
}

void DataPipeProducerHandle::ArenaDtor(void* object) {
  DataPipeProducerHandle* _this = reinterpret_cast< DataPipeProducerHandle* >(object);
  (void)_this;
}
void DataPipeProducerHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeProducerHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeProducerHandle& DataPipeProducerHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeProducerHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeProducerHandle::clear_instance() {
// @@protoc_insertion_point(one_of_clear_start:mojolpm.DataPipeProducerHandle)
  switch (instance_case()) {
    case kOld: {
      // No need to clear
      break;
    }
    case kNew: {
      if (GetArena() == nullptr) {
        delete instance_.new__;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTANCE_NOT_SET;
}


void DataPipeProducerHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeProducerHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_instance();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeProducerHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 old = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_old(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mojolpm.CreateDataPipeOptions new = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeProducerHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeProducerHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (instance_case()) {
    case kOld: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_old(), target);
      break;
    }
    case kNew: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::new_(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeProducerHandle)
  return target;
}

size_t DataPipeProducerHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeProducerHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (instance_case()) {
    // uint32 old = 1;
    case kOld: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old());
      break;
    }
    // .mojolpm.CreateDataPipeOptions new = 2;
    case kNew: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.new__);
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeProducerHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeProducerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeProducerHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeProducerHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeProducerHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeProducerHandle)
    MergeFrom(*source);
  }
}

void DataPipeProducerHandle::MergeFrom(const DataPipeProducerHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeProducerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.instance_case()) {
    case kOld: {
      _internal_set_old(from._internal_old());
      break;
    }
    case kNew: {
      _internal_mutable_new_()->::mojolpm::CreateDataPipeOptions::MergeFrom(from._internal_new_());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
}

void DataPipeProducerHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeProducerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeProducerHandle::CopyFrom(const DataPipeProducerHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeProducerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeProducerHandle::IsInitialized() const {
  switch (instance_case()) {
    case kOld: {
      break;
    }
    case kNew: {
      if (has_new_()) {
        if (!this->new_().IsInitialized()) return false;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  return true;
}

void DataPipeProducerHandle::InternalSwap(DataPipeProducerHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(instance_, other->instance_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeProducerHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeRead::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPipeRead>()._has_bits_);
  static const ::mojolpm::DataPipeConsumerHandle& handle(const DataPipeRead* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::mojolpm::DataPipeConsumerHandle&
DataPipeRead::_Internal::handle(const DataPipeRead* msg) {
  return *msg->handle_;
}
DataPipeRead::DataPipeRead(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeRead)
}
DataPipeRead::DataPipeRead(const DataPipeRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    handle_ = new ::mojolpm::DataPipeConsumerHandle(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeRead)
}

void DataPipeRead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(size_));
}

DataPipeRead::~DataPipeRead() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeRead)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeRead::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handle_;
}

void DataPipeRead::ArenaDtor(void* object) {
  DataPipeRead* _this = reinterpret_cast< DataPipeRead* >(object);
  (void)_this;
}
void DataPipeRead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeRead& DataPipeRead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeRead_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeRead::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(handle_ != nullptr);
    handle_->Clear();
  }
  size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeRead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mojolpm.DataPipeConsumerHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeRead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mojolpm.DataPipeConsumerHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeRead)
  return target;
}

size_t DataPipeRead::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mojolpm.DataPipeRead)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .mojolpm.DataPipeConsumerHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  return total_size;
}
size_t DataPipeRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeRead)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mojolpm.DataPipeConsumerHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeRead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeRead)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeRead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeRead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeRead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeRead)
    MergeFrom(*source);
  }
}

void DataPipeRead::MergeFrom(const DataPipeRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_handle()->::mojolpm::DataPipeConsumerHandle::MergeFrom(from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataPipeRead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeRead::CopyFrom(const DataPipeRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeRead::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!handle_->IsInitialized()) return false;
  }
  return true;
}

void DataPipeRead::InternalSwap(DataPipeRead* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPipeRead, size_)
      + sizeof(DataPipeRead::size_)
      - PROTOBUF_FIELD_OFFSET(DataPipeRead, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeRead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPipeWrite>()._has_bits_);
  static const ::mojolpm::DataPipeProducerHandle& handle(const DataPipeWrite* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::mojolpm::DataPipeProducerHandle&
DataPipeWrite::_Internal::handle(const DataPipeWrite* msg) {
  return *msg->handle_;
}
DataPipeWrite::DataPipeWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeWrite)
}
DataPipeWrite::DataPipeWrite(const DataPipeWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_handle()) {
    handle_ = new ::mojolpm::DataPipeProducerHandle(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeWrite)
}

void DataPipeWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handle_ = nullptr;
}

DataPipeWrite::~DataPipeWrite() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void DataPipeWrite::ArenaDtor(void* object) {
  DataPipeWrite* _this = reinterpret_cast< DataPipeWrite* >(object);
  (void)_this;
}
void DataPipeWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeWrite& DataPipeWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeWrite_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(handle_ != nullptr);
      handle_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mojolpm.DataPipeProducerHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mojolpm.DataPipeProducerHandle handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeWrite)
  return target;
}

size_t DataPipeWrite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mojolpm.DataPipeWrite)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_handle()) {
    // required .mojolpm.DataPipeProducerHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return total_size;
}
size_t DataPipeWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeWrite)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required .mojolpm.DataPipeProducerHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeWrite)
    MergeFrom(*source);
  }
}

void DataPipeWrite::MergeFrom(const DataPipeWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_handle()->::mojolpm::DataPipeProducerHandle::MergeFrom(from._internal_handle());
    }
  }
}

void DataPipeWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeWrite::CopyFrom(const DataPipeWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeWrite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!handle_->IsInitialized()) return false;
  }
  return true;
}

void DataPipeWrite::InternalSwap(DataPipeWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeConsumerClose::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPipeConsumerClose>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataPipeConsumerClose::DataPipeConsumerClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeConsumerClose)
}
DataPipeConsumerClose::DataPipeConsumerClose(const DataPipeConsumerClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeConsumerClose)
}

void DataPipeConsumerClose::SharedCtor() {
  id_ = 0u;
}

DataPipeConsumerClose::~DataPipeConsumerClose() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeConsumerClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeConsumerClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataPipeConsumerClose::ArenaDtor(void* object) {
  DataPipeConsumerClose* _this = reinterpret_cast< DataPipeConsumerClose* >(object);
  (void)_this;
}
void DataPipeConsumerClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeConsumerClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeConsumerClose& DataPipeConsumerClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeConsumerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeConsumerClose::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeConsumerClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeConsumerClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeConsumerClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeConsumerClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeConsumerClose)
  return target;
}

size_t DataPipeConsumerClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeConsumerClose)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeConsumerClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeConsumerClose)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeConsumerClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeConsumerClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeConsumerClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeConsumerClose)
    MergeFrom(*source);
  }
}

void DataPipeConsumerClose::MergeFrom(const DataPipeConsumerClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeConsumerClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void DataPipeConsumerClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeConsumerClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeConsumerClose::CopyFrom(const DataPipeConsumerClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeConsumerClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeConsumerClose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataPipeConsumerClose::InternalSwap(DataPipeConsumerClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeConsumerClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPipeProducerClose::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPipeProducerClose>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataPipeProducerClose::DataPipeProducerClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.DataPipeProducerClose)
}
DataPipeProducerClose::DataPipeProducerClose(const DataPipeProducerClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mojolpm.DataPipeProducerClose)
}

void DataPipeProducerClose::SharedCtor() {
  id_ = 0u;
}

DataPipeProducerClose::~DataPipeProducerClose() {
  // @@protoc_insertion_point(destructor:mojolpm.DataPipeProducerClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPipeProducerClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataPipeProducerClose::ArenaDtor(void* object) {
  DataPipeProducerClose* _this = reinterpret_cast< DataPipeProducerClose* >(object);
  (void)_this;
}
void DataPipeProducerClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPipeProducerClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPipeProducerClose& DataPipeProducerClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPipeProducerClose_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void DataPipeProducerClose::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.DataPipeProducerClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPipeProducerClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPipeProducerClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.DataPipeProducerClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.DataPipeProducerClose)
  return target;
}

size_t DataPipeProducerClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.DataPipeProducerClose)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPipeProducerClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.DataPipeProducerClose)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPipeProducerClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPipeProducerClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.DataPipeProducerClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.DataPipeProducerClose)
    MergeFrom(*source);
  }
}

void DataPipeProducerClose::MergeFrom(const DataPipeProducerClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.DataPipeProducerClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void DataPipeProducerClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.DataPipeProducerClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPipeProducerClose::CopyFrom(const DataPipeProducerClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.DataPipeProducerClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPipeProducerClose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataPipeProducerClose::InternalSwap(DataPipeProducerClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPipeProducerClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagePipeHandle::_Internal {
 public:
};

MessagePipeHandle::MessagePipeHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.MessagePipeHandle)
}
MessagePipeHandle::MessagePipeHandle(const MessagePipeHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mojolpm.MessagePipeHandle)
}

void MessagePipeHandle::SharedCtor() {
}

MessagePipeHandle::~MessagePipeHandle() {
  // @@protoc_insertion_point(destructor:mojolpm.MessagePipeHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagePipeHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessagePipeHandle::ArenaDtor(void* object) {
  MessagePipeHandle* _this = reinterpret_cast< MessagePipeHandle* >(object);
  (void)_this;
}
void MessagePipeHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagePipeHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePipeHandle& MessagePipeHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePipeHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void MessagePipeHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.MessagePipeHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagePipeHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePipeHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.MessagePipeHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.MessagePipeHandle)
  return target;
}

size_t MessagePipeHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.MessagePipeHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePipeHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.MessagePipeHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePipeHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePipeHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.MessagePipeHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.MessagePipeHandle)
    MergeFrom(*source);
  }
}

void MessagePipeHandle::MergeFrom(const MessagePipeHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.MessagePipeHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MessagePipeHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.MessagePipeHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePipeHandle::CopyFrom(const MessagePipeHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.MessagePipeHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePipeHandle::IsInitialized() const {
  return true;
}

void MessagePipeHandle::InternalSwap(MessagePipeHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePipeHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SharedBufferHandle::_Internal {
 public:
};

SharedBufferHandle::SharedBufferHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.SharedBufferHandle)
}
SharedBufferHandle::SharedBufferHandle(const SharedBufferHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mojolpm.SharedBufferHandle)
}

void SharedBufferHandle::SharedCtor() {
}

SharedBufferHandle::~SharedBufferHandle() {
  // @@protoc_insertion_point(destructor:mojolpm.SharedBufferHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SharedBufferHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SharedBufferHandle::ArenaDtor(void* object) {
  SharedBufferHandle* _this = reinterpret_cast< SharedBufferHandle* >(object);
  (void)_this;
}
void SharedBufferHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharedBufferHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharedBufferHandle& SharedBufferHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharedBufferHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void SharedBufferHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.SharedBufferHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharedBufferHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedBufferHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.SharedBufferHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.SharedBufferHandle)
  return target;
}

size_t SharedBufferHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.SharedBufferHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedBufferHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.SharedBufferHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const SharedBufferHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SharedBufferHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.SharedBufferHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.SharedBufferHandle)
    MergeFrom(*source);
  }
}

void SharedBufferHandle::MergeFrom(const SharedBufferHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.SharedBufferHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SharedBufferHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.SharedBufferHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedBufferHandle::CopyFrom(const SharedBufferHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.SharedBufferHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedBufferHandle::IsInitialized() const {
  return true;
}

void SharedBufferHandle::InternalSwap(SharedBufferHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedBufferHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlatformHandle::_Internal {
 public:
};

PlatformHandle::PlatformHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mojolpm.PlatformHandle)
}
PlatformHandle::PlatformHandle(const PlatformHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mojolpm.PlatformHandle)
}

void PlatformHandle::SharedCtor() {
}

PlatformHandle::~PlatformHandle() {
  // @@protoc_insertion_point(destructor:mojolpm.PlatformHandle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlatformHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlatformHandle::ArenaDtor(void* object) {
  PlatformHandle* _this = reinterpret_cast< PlatformHandle* >(object);
  (void)_this;
}
void PlatformHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlatformHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlatformHandle& PlatformHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlatformHandle_mojo_2fpublic_2ftools_2ffuzzers_2fmojolpm_2eproto.base);
  return *internal_default_instance();
}


void PlatformHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:mojolpm.PlatformHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatformHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlatformHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mojolpm.PlatformHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mojolpm.PlatformHandle)
  return target;
}

size_t PlatformHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mojolpm.PlatformHandle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlatformHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mojolpm.PlatformHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const PlatformHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlatformHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mojolpm.PlatformHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mojolpm.PlatformHandle)
    MergeFrom(*source);
  }
}

void PlatformHandle::MergeFrom(const PlatformHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mojolpm.PlatformHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlatformHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mojolpm.PlatformHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformHandle::CopyFrom(const PlatformHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mojolpm.PlatformHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformHandle::IsInitialized() const {
  return true;
}

void PlatformHandle::InternalSwap(PlatformHandle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatformHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mojolpm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mojolpm::Handle* Arena::CreateMaybeMessage< ::mojolpm::Handle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::Handle >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::CreateDataPipeOptions* Arena::CreateMaybeMessage< ::mojolpm::CreateDataPipeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::CreateDataPipeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeConsumerHandle* Arena::CreateMaybeMessage< ::mojolpm::DataPipeConsumerHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeConsumerHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeProducerHandle* Arena::CreateMaybeMessage< ::mojolpm::DataPipeProducerHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeProducerHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeRead* Arena::CreateMaybeMessage< ::mojolpm::DataPipeRead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeRead >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeWrite* Arena::CreateMaybeMessage< ::mojolpm::DataPipeWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeConsumerClose* Arena::CreateMaybeMessage< ::mojolpm::DataPipeConsumerClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeConsumerClose >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::DataPipeProducerClose* Arena::CreateMaybeMessage< ::mojolpm::DataPipeProducerClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::DataPipeProducerClose >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::MessagePipeHandle* Arena::CreateMaybeMessage< ::mojolpm::MessagePipeHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::MessagePipeHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::SharedBufferHandle* Arena::CreateMaybeMessage< ::mojolpm::SharedBufferHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::SharedBufferHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::mojolpm::PlatformHandle* Arena::CreateMaybeMessage< ::mojolpm::PlatformHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mojolpm::PlatformHandle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
