// mojo/public/mojom/base/values.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_MOJOM_BASE_VALUES_MOJOM_BLINK_H_
#define MOJO_PUBLIC_MOJOM_BASE_VALUES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "mojo/public/mojom/base/values.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "base/component_export.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo_base {
namespace mojom {
namespace blink {







// @generated_from: mojo_base.mojom.Value
class COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) Value {
 public:
  using DataView = ValueDataView;
  using Data_ = internal::Value_Data;
  using Tag = Data_::Value_Tag;

  static ValuePtr New() {
    return ValuePtr(base::in_place);
  }
  // Construct an instance holding |null_value|.
  static ValuePtr
  NewNullValue(
      uint8_t null_value) {
    auto result = ValuePtr(base::in_place);
    result->set_null_value(std::move(null_value));
    return result;
  }
  // Construct an instance holding |bool_value|.
  static ValuePtr
  NewBoolValue(
      bool bool_value) {
    auto result = ValuePtr(base::in_place);
    result->set_bool_value(std::move(bool_value));
    return result;
  }
  // Construct an instance holding |int_value|.
  static ValuePtr
  NewIntValue(
      int32_t int_value) {
    auto result = ValuePtr(base::in_place);
    result->set_int_value(std::move(int_value));
    return result;
  }
  // Construct an instance holding |double_value|.
  static ValuePtr
  NewDoubleValue(
      double double_value) {
    auto result = ValuePtr(base::in_place);
    result->set_double_value(std::move(double_value));
    return result;
  }
  // Construct an instance holding |string_value|.
  static ValuePtr
  NewStringValue(
      const WTF::String& string_value) {
    auto result = ValuePtr(base::in_place);
    result->set_string_value(std::move(string_value));
    return result;
  }
  // Construct an instance holding |binary_value|.
  static ValuePtr
  NewBinaryValue(
      WTF::Vector<uint8_t> binary_value) {
    auto result = ValuePtr(base::in_place);
    result->set_binary_value(std::move(binary_value));
    return result;
  }
  // Construct an instance holding |dictionary_value|.
  static ValuePtr
  NewDictionaryValue(
      ::base::Value dictionary_value) {
    auto result = ValuePtr(base::in_place);
    result->set_dictionary_value(std::move(dictionary_value));
    return result;
  }
  // Construct an instance holding |list_value|.
  static ValuePtr
  NewListValue(
      ::base::Value list_value) {
    auto result = ValuePtr(base::in_place);
    result->set_list_value(std::move(list_value));
    return result;
  }

  template <typename U>
  static ValuePtr From(const U& u) {
    return mojo::TypeConverter<ValuePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Value>::Convert(*this);
  }

  Value();
  ~Value();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = ValuePtr>
  ValuePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, Value>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, Value>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo_base.mojom.Value.null_value
  bool is_null_value() const { return tag_ == Tag::NULL_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.null_value
  uint8_t get_null_value() const {
    DCHECK(tag_ == Tag::NULL_VALUE);
    return data_.null_value;
  }

  
// @generated_from: mojo_base.mojom.Value.null_value
  void set_null_value(
      uint8_t null_value);
  
// @generated_from: mojo_base.mojom.Value.bool_value
  bool is_bool_value() const { return tag_ == Tag::BOOL_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.bool_value
  bool get_bool_value() const {
    DCHECK(tag_ == Tag::BOOL_VALUE);
    return data_.bool_value;
  }

  
// @generated_from: mojo_base.mojom.Value.bool_value
  void set_bool_value(
      bool bool_value);
  
// @generated_from: mojo_base.mojom.Value.int_value
  bool is_int_value() const { return tag_ == Tag::INT_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.int_value
  int32_t get_int_value() const {
    DCHECK(tag_ == Tag::INT_VALUE);
    return data_.int_value;
  }

  
// @generated_from: mojo_base.mojom.Value.int_value
  void set_int_value(
      int32_t int_value);
  
// @generated_from: mojo_base.mojom.Value.double_value
  bool is_double_value() const { return tag_ == Tag::DOUBLE_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.double_value
  double get_double_value() const {
    DCHECK(tag_ == Tag::DOUBLE_VALUE);
    return data_.double_value;
  }

  
// @generated_from: mojo_base.mojom.Value.double_value
  void set_double_value(
      double double_value);
  
// @generated_from: mojo_base.mojom.Value.string_value
  bool is_string_value() const { return tag_ == Tag::STRING_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.string_value
  WTF::String& get_string_value() const {
    DCHECK(tag_ == Tag::STRING_VALUE);
    return *(data_.string_value);
  }

  
// @generated_from: mojo_base.mojom.Value.string_value
  void set_string_value(
      const WTF::String& string_value);
  
// @generated_from: mojo_base.mojom.Value.binary_value
  bool is_binary_value() const { return tag_ == Tag::BINARY_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.binary_value
  WTF::Vector<uint8_t>& get_binary_value() const {
    DCHECK(tag_ == Tag::BINARY_VALUE);
    return *(data_.binary_value);
  }

  
// @generated_from: mojo_base.mojom.Value.binary_value
  void set_binary_value(
      WTF::Vector<uint8_t> binary_value);
  
// @generated_from: mojo_base.mojom.Value.dictionary_value
  bool is_dictionary_value() const { return tag_ == Tag::DICTIONARY_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.dictionary_value
  ::base::Value& get_dictionary_value() const {
    DCHECK(tag_ == Tag::DICTIONARY_VALUE);
    return *(data_.dictionary_value);
  }

  
// @generated_from: mojo_base.mojom.Value.dictionary_value
  void set_dictionary_value(
      ::base::Value dictionary_value);
  
// @generated_from: mojo_base.mojom.Value.list_value
  bool is_list_value() const { return tag_ == Tag::LIST_VALUE; }

  
// @generated_from: mojo_base.mojom.Value.list_value
  ::base::Value& get_list_value() const {
    DCHECK(tag_ == Tag::LIST_VALUE);
    return *(data_.list_value);
  }

  
// @generated_from: mojo_base.mojom.Value.list_value
  void set_list_value(
      ::base::Value list_value);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Value::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<Value::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    uint8_t null_value;
    bool bool_value;
    int32_t int_value;
    double double_value;
    WTF::String* string_value;
    WTF::Vector<uint8_t>* binary_value;
    ::base::Value* dictionary_value;
    ::base::Value* list_value;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





// @generated_from: mojo_base.mojom.DictionaryValue
class COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) DictionaryValue {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DictionaryValue, T>::value>;
  using DataView = DictionaryValueDataView;
  using Data_ = internal::DictionaryValue_Data;

  template <typename... Args>
  static DictionaryValuePtr New(Args&&... args) {
    return DictionaryValuePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DictionaryValuePtr From(const U& u) {
    return mojo::TypeConverter<DictionaryValuePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DictionaryValue>::Convert(*this);
  }


  DictionaryValue();

  explicit DictionaryValue(
      WTF::HashMap<WTF::String, ::base::Value> storage);

  ~DictionaryValue();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DictionaryValuePtr>
  DictionaryValuePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DictionaryValue::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DictionaryValue::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DictionaryValue_UnserializedMessageContext<
            UserType, DictionaryValue::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<DictionaryValue::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return DictionaryValue::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DictionaryValue_UnserializedMessageContext<
            UserType, DictionaryValue::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DictionaryValue::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo_base.mojom.DictionaryValue.storage
  WTF::HashMap<WTF::String, ::base::Value> storage;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(DictionaryValue);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DictionaryValue::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo_base.mojom.ListValue
class COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) ListValue {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ListValue, T>::value>;
  using DataView = ListValueDataView;
  using Data_ = internal::ListValue_Data;

  template <typename... Args>
  static ListValuePtr New(Args&&... args) {
    return ListValuePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ListValuePtr From(const U& u) {
    return mojo::TypeConverter<ListValuePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ListValue>::Convert(*this);
  }


  ListValue();

  explicit ListValue(
      WTF::Vector<::base::Value> storage);

  ~ListValue();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ListValuePtr>
  ListValuePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ListValue::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ListValue::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ListValue::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ListValue::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ListValue_UnserializedMessageContext<
            UserType, ListValue::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ListValue::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ListValue::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ListValue_UnserializedMessageContext<
            UserType, ListValue::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ListValue::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo_base.mojom.ListValue.storage
  WTF::Vector<::base::Value> storage;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(ListValue);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ListValue::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ListValue::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ListValue::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ListValue::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
ValuePtr Value::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::NULL_VALUE:
      rv->set_null_value(mojo::Clone(data_.null_value));
      break;
    case Tag::BOOL_VALUE:
      rv->set_bool_value(mojo::Clone(data_.bool_value));
      break;
    case Tag::INT_VALUE:
      rv->set_int_value(mojo::Clone(data_.int_value));
      break;
    case Tag::DOUBLE_VALUE:
      rv->set_double_value(mojo::Clone(data_.double_value));
      break;
    case Tag::STRING_VALUE:
      rv->set_string_value(mojo::Clone(*data_.string_value));
      break;
    case Tag::BINARY_VALUE:
      rv->set_binary_value(mojo::Clone(*data_.binary_value));
      break;
    case Tag::DICTIONARY_VALUE:
      rv->set_dictionary_value(mojo::Clone(*data_.dictionary_value));
      break;
    case Tag::LIST_VALUE:
      rv->set_list_value(mojo::Clone(*data_.list_value));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, Value>::value>::type*>
bool Value::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::NULL_VALUE:
      return mojo::Equals(data_.null_value, other.data_.null_value);
    case Tag::BOOL_VALUE:
      return mojo::Equals(data_.bool_value, other.data_.bool_value);
    case Tag::INT_VALUE:
      return mojo::Equals(data_.int_value, other.data_.int_value);
    case Tag::DOUBLE_VALUE:
      return mojo::Equals(data_.double_value, other.data_.double_value);
    case Tag::STRING_VALUE:
      return mojo::Equals(*(data_.string_value), *(other.data_.string_value));
    case Tag::BINARY_VALUE:
      return mojo::Equals(*(data_.binary_value), *(other.data_.binary_value));
    case Tag::DICTIONARY_VALUE:
      return mojo::Equals(*(data_.dictionary_value), *(other.data_.dictionary_value));
    case Tag::LIST_VALUE:
      return mojo::Equals(*(data_.list_value), *(other.data_.list_value));
  }

  return false;
}
template <typename StructPtrType>
DictionaryValuePtr DictionaryValue::Clone() const {
  return New(
      mojo::Clone(storage)
  );
}

template <typename T, DictionaryValue::EnableIfSame<T>*>
bool DictionaryValue::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->storage, other_struct.storage))
    return false;
  return true;
}

template <typename T, DictionaryValue::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.storage < rhs.storage)
    return true;
  if (rhs.storage < lhs.storage)
    return false;
  return false;
}
template <typename StructPtrType>
ListValuePtr ListValue::Clone() const {
  return New(
      mojo::Clone(storage)
  );
}

template <typename T, ListValue::EnableIfSame<T>*>
bool ListValue::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->storage, other_struct.storage))
    return false;
  return true;
}

template <typename T, ListValue::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.storage < rhs.storage)
    return true;
  if (rhs.storage < lhs.storage)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace mojo_base

namespace mojo {


template <>
struct COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) StructTraits<::mojo_base::mojom::blink::DictionaryValue::DataView,
                                         ::mojo_base::mojom::blink::DictionaryValuePtr> {
  static bool IsNull(const ::mojo_base::mojom::blink::DictionaryValuePtr& input) { return !input; }
  static void SetToNull(::mojo_base::mojom::blink::DictionaryValuePtr* output) { output->reset(); }

  static const decltype(::mojo_base::mojom::blink::DictionaryValue::storage)& storage(
      const ::mojo_base::mojom::blink::DictionaryValuePtr& input) {
    return input->storage;
  }

  static bool Read(::mojo_base::mojom::blink::DictionaryValue::DataView input, ::mojo_base::mojom::blink::DictionaryValuePtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) StructTraits<::mojo_base::mojom::blink::ListValue::DataView,
                                         ::mojo_base::mojom::blink::ListValuePtr> {
  static bool IsNull(const ::mojo_base::mojom::blink::ListValuePtr& input) { return !input; }
  static void SetToNull(::mojo_base::mojom::blink::ListValuePtr* output) { output->reset(); }

  static const decltype(::mojo_base::mojom::blink::ListValue::storage)& storage(
      const ::mojo_base::mojom::blink::ListValuePtr& input) {
    return input->storage;
  }

  static bool Read(::mojo_base::mojom::blink::ListValue::DataView input, ::mojo_base::mojom::blink::ListValuePtr* output);
};


template <>
struct COMPONENT_EXPORT(MOJO_BASE_MOJOM_BLINK) UnionTraits<::mojo_base::mojom::blink::Value::DataView,
                                        ::mojo_base::mojom::blink::ValuePtr> {
  static bool IsNull(const ::mojo_base::mojom::blink::ValuePtr& input) { return !input; }
  static void SetToNull(::mojo_base::mojom::blink::ValuePtr* output) { output->reset(); }

  static ::mojo_base::mojom::blink::Value::Tag GetTag(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->which();
  }

  static  uint8_t null_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_null_value();
  }

  static  bool bool_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_bool_value();
  }

  static  int32_t int_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_int_value();
  }

  static  double double_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_double_value();
  }

  static const WTF::String& string_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_string_value();
  }

  static const WTF::Vector<uint8_t>& binary_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_binary_value();
  }

  static const ::base::Value& dictionary_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_dictionary_value();
  }

  static const ::base::Value& list_value(const ::mojo_base::mojom::blink::ValuePtr& input) {
    return input->get_list_value();
  }

  static bool Read(::mojo_base::mojom::blink::Value::DataView input, ::mojo_base::mojom::blink::ValuePtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_MOJOM_BASE_VALUES_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTY0NywgImJlZ2luIjogMTY0MiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam9fYmFzZS5tb2pvbS5WYWx1ZSJ9fSwgeyJlbmQi
OiA0OTQzLCAiYmVnaW4iOiA0OTMwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLm51bGxfdmFsdWUifX0sIHsiZW5kIjogNTA2
OSwgImJlZ2luIjogNTA1NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam9fYmFzZS5tb2pvbS5WYWx1ZS5udWxsX3ZhbHVlIn19LCB7ImVuZCI6IDUyMjgsICJi
ZWdpbiI6IDUyMTQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvX2Jhc2UubW9qb20uVmFsdWUubnVsbF92YWx1ZSJ9fSwgeyJlbmQiOiA1MzMzLCAiYmVnaW4i
OiA1MzIwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19i
YXNlLm1vam9tLlZhbHVlLmJvb2xfdmFsdWUifX0sIHsiZW5kIjogNTQ1NiwgImJlZ2luIjogNTQ0
MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam9fYmFzZS5t
b2pvbS5WYWx1ZS5ib29sX3ZhbHVlIn19LCB7ImVuZCI6IDU2MTUsICJiZWdpbiI6IDU2MDEsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvX2Jhc2UubW9qb20u
VmFsdWUuYm9vbF92YWx1ZSJ9fSwgeyJlbmQiOiA1NzE1LCAiYmVnaW4iOiA1NzAzLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVl
LmludF92YWx1ZSJ9fSwgeyJlbmQiOiA1ODM4LCAiYmVnaW4iOiA1ODI1LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLmludF92
YWx1ZSJ9fSwgeyJlbmQiOiA1OTkzLCAiYmVnaW4iOiA1OTgwLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLmludF92YWx1ZSJ9
fSwgeyJlbmQiOiA2MTAxLCAiYmVnaW4iOiA2MDg2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2Vu
ZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJj
aHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pv
bSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLmRvdWJsZV92YWx1ZSJ9fSwg
eyJlbmQiOiA2MjMyLCAiYmVnaW4iOiA2MjE2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLmRvdWJsZV92YWx1ZSJ9fSwgeyJl
bmQiOiA2Mzk5LCAiYmVnaW4iOiA2MzgzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLmRvdWJsZV92YWx1ZSJ9fSwgeyJlbmQi
OiA2NTA5LCAiYmVnaW4iOiA2NDk0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLnN0cmluZ192YWx1ZSJ9fSwgeyJlbmQiOiA2
NjQ2LCAiYmVnaW4iOiA2NjMwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qb19iYXNlLm1vam9tLlZhbHVlLnN0cmluZ192YWx1ZSJ9fSwgeyJlbmQiOiA2ODE2
LCAiYmVnaW4iOiA2ODAwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qb19iYXNlLm1vam9tLlZhbHVlLnN0cmluZ192YWx1ZSJ9fSwgeyJlbmQiOiA2OTM4LCAi
YmVnaW4iOiA2OTIzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qb19iYXNlLm1vam9tLlZhbHVlLmJpbmFyeV92YWx1ZSJ9fSwgeyJlbmQiOiA3MDg0LCAiYmVn
aW4iOiA3MDY4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
b19iYXNlLm1vam9tLlZhbHVlLmJpbmFyeV92YWx1ZSJ9fSwgeyJlbmQiOiA3MjU0LCAiYmVnaW4i
OiA3MjM4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19i
YXNlLm1vam9tLlZhbHVlLmJpbmFyeV92YWx1ZSJ9fSwgeyJlbmQiOiA3Mzg2LCAiYmVnaW4iOiA3
MzY3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNl
Lm1vam9tLlZhbHVlLmRpY3Rpb25hcnlfdmFsdWUifX0sIHsiZW5kIjogNzUzNywgImJlZ2luIjog
NzUxNywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam9fYmFz
ZS5tb2pvbS5WYWx1ZS5kaWN0aW9uYXJ5X3ZhbHVlIn19LCB7ImVuZCI6IDc3MjMsICJiZWdpbiI6
IDc3MDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvX2Jh
c2UubW9qb20uVmFsdWUuZGljdGlvbmFyeV92YWx1ZSJ9fSwgeyJlbmQiOiA3ODQwLCAiYmVnaW4i
OiA3ODI3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19i
YXNlLm1vam9tLlZhbHVlLmxpc3RfdmFsdWUifX0sIHsiZW5kIjogNzk3MywgImJlZ2luIjogNzk1
OSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam9fYmFzZS5t
b2pvbS5WYWx1ZS5saXN0X3ZhbHVlIn19LCB7ImVuZCI6IDgxMzUsICJiZWdpbiI6IDgxMjEsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvX2Jhc2UubW9qb20u
VmFsdWUubGlzdF92YWx1ZSJ9fSwgeyJlbmQiOiA5MjM0LCAiYmVnaW4iOiA5MjE5LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLkRpY3Rp
b25hcnlWYWx1ZSJ9fSwgeyJlbmQiOiAxMjk3NSwgImJlZ2luIjogMTI5NjgsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvX2Jhc2UubW9qb20uRGljdGlvbmFy
eVZhbHVlLnN0b3JhZ2UifX0sIHsiZW5kIjogMTQwOTksICJiZWdpbiI6IDE0MDkwLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qb19iYXNlLm1vam9tLkxpc3RW
YWx1ZSJ9fSwgeyJlbmQiOiAxNzY2MiwgImJlZ2luIjogMTc2NTUsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvX2Jhc2UubW9qb20uTGlzdFZhbHVlLnN0b3Jh
Z2UifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/