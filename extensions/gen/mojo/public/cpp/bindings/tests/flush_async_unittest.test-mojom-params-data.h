// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace flush_async_unittest {
namespace mojom {
namespace internal {
class  Writer_Put_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  friend class mojo::internal::MessageFragment<Writer_Put_Params_Data>;

  Writer_Put_Params_Data();
  ~Writer_Put_Params_Data() = delete;
};
static_assert(sizeof(Writer_Put_Params_Data) == 24,
              "Bad sizeof(Writer_Put_Params_Data)");
class  KeyValueStoreClient_OnSnapshotTaken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<KeyValueStoreClient_OnSnapshotTaken_Params_Data>;

  KeyValueStoreClient_OnSnapshotTaken_Params_Data();
  ~KeyValueStoreClient_OnSnapshotTaken_Params_Data() = delete;
};
static_assert(sizeof(KeyValueStoreClient_OnSnapshotTaken_Params_Data) == 8,
              "Bad sizeof(KeyValueStoreClient_OnSnapshotTaken_Params_Data)");
class  KeyValueStore_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<KeyValueStore_SetClient_Params_Data>;

  KeyValueStore_SetClient_Params_Data();
  ~KeyValueStore_SetClient_Params_Data() = delete;
};
static_assert(sizeof(KeyValueStore_SetClient_Params_Data) == 16,
              "Bad sizeof(KeyValueStore_SetClient_Params_Data)");
class  KeyValueStore_BindWriter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<KeyValueStore_BindWriter_Params_Data>;

  KeyValueStore_BindWriter_Params_Data();
  ~KeyValueStore_BindWriter_Params_Data() = delete;
};
static_assert(sizeof(KeyValueStore_BindWriter_Params_Data) == 16,
              "Bad sizeof(KeyValueStore_BindWriter_Params_Data)");
class  KeyValueStore_GetSnapshot_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<KeyValueStore_GetSnapshot_Params_Data>;

  KeyValueStore_GetSnapshot_Params_Data();
  ~KeyValueStore_GetSnapshot_Params_Data() = delete;
};
static_assert(sizeof(KeyValueStore_GetSnapshot_Params_Data) == 8,
              "Bad sizeof(KeyValueStore_GetSnapshot_Params_Data)");
class  KeyValueStore_GetSnapshot_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::String_Data>>> entries;

 private:
  friend class mojo::internal::MessageFragment<KeyValueStore_GetSnapshot_ResponseParams_Data>;

  KeyValueStore_GetSnapshot_ResponseParams_Data();
  ~KeyValueStore_GetSnapshot_ResponseParams_Data() = delete;
};
static_assert(sizeof(KeyValueStore_GetSnapshot_ResponseParams_Data) == 16,
              "Bad sizeof(KeyValueStore_GetSnapshot_ResponseParams_Data)");
class  Pinger_Ping_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Pinger_Ping_Params_Data>;

  Pinger_Ping_Params_Data();
  ~Pinger_Ping_Params_Data() = delete;
};
static_assert(sizeof(Pinger_Ping_Params_Data) == 8,
              "Bad sizeof(Pinger_Ping_Params_Data)");
class  Pinger_Ping_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Pinger_Ping_ResponseParams_Data>;

  Pinger_Ping_ResponseParams_Data();
  ~Pinger_Ping_ResponseParams_Data() = delete;
};
static_assert(sizeof(Pinger_Ping_ResponseParams_Data) == 8,
              "Bad sizeof(Pinger_Ping_ResponseParams_Data)");

}  // namespace internal


class Writer_Put_ParamsDataView {
 public:
  Writer_Put_ParamsDataView() {}

  Writer_Put_ParamsDataView(
      internal::Writer_Put_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::Writer_Put_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class KeyValueStoreClient_OnSnapshotTaken_ParamsDataView {
 public:
  KeyValueStoreClient_OnSnapshotTaken_ParamsDataView() {}

  KeyValueStoreClient_OnSnapshotTaken_ParamsDataView(
      internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data* data_ = nullptr;
};



class KeyValueStore_SetClient_ParamsDataView {
 public:
  KeyValueStore_SetClient_ParamsDataView() {}

  KeyValueStore_SetClient_ParamsDataView(
      internal::KeyValueStore_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::mojo::test::flush_async_unittest::mojom::KeyValueStoreClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::KeyValueStore_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class KeyValueStore_BindWriter_ParamsDataView {
 public:
  KeyValueStore_BindWriter_ParamsDataView() {}

  KeyValueStore_BindWriter_ParamsDataView(
      internal::KeyValueStore_BindWriter_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::mojo::test::flush_async_unittest::mojom::WriterInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::KeyValueStore_BindWriter_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class KeyValueStore_GetSnapshot_ParamsDataView {
 public:
  KeyValueStore_GetSnapshot_ParamsDataView() {}

  KeyValueStore_GetSnapshot_ParamsDataView(
      internal::KeyValueStore_GetSnapshot_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::KeyValueStore_GetSnapshot_Params_Data* data_ = nullptr;
};



class KeyValueStore_GetSnapshot_ResponseParamsDataView {
 public:
  KeyValueStore_GetSnapshot_ResponseParamsDataView() {}

  KeyValueStore_GetSnapshot_ResponseParamsDataView(
      internal::KeyValueStore_GetSnapshot_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntriesDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::KeyValueStore_GetSnapshot_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Pinger_Ping_ParamsDataView {
 public:
  Pinger_Ping_ParamsDataView() {}

  Pinger_Ping_ParamsDataView(
      internal::Pinger_Ping_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Pinger_Ping_Params_Data* data_ = nullptr;
};



class Pinger_Ping_ResponseParamsDataView {
 public:
  Pinger_Ping_ResponseParamsDataView() {}

  Pinger_Ping_ResponseParamsDataView(
      internal::Pinger_Ping_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Pinger_Ping_ResponseParams_Data* data_ = nullptr;
};


inline void Writer_Put_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void Writer_Put_ParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, message_);
}










inline void KeyValueStore_GetSnapshot_ResponseParamsDataView::GetEntriesDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>(pointer, message_);
}





}  // namespace mojom
}  // namespace flush_async_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_