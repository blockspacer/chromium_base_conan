// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_SHARED_INTERNAL_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"

#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif

namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace mojo {
namespace test {
namespace enum_default_unittest {
namespace mojom {
namespace internal {
class StructWithExtensibleEnumWithDefault_Data;
class StructWithExtensibleEnumWithoutDefault_Data;
class StructWithoutInitializer_Data;
class StructWithInitializer_Data;
class UnionWithExtensibleEnumWithDefault_Data;
class UnionWithExtensibleEnumWithoutDefault_Data;

struct ExtensibleEnumWithDefault_Data {
 public:
  static bool constexpr kIsExtensible = true;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ExtensibleEnumWithoutDefault_Data {
 public:
  static bool constexpr kIsExtensible = true;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct EnumWithoutZeroValue_Data {
 public:
  static bool constexpr kIsExtensible = true;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)


class  UnionWithExtensibleEnumWithDefault_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  UnionWithExtensibleEnumWithDefault_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~UnionWithExtensibleEnumWithDefault_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<UnionWithExtensibleEnumWithDefault_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class UnionWithExtensibleEnumWithDefault_Tag : uint32_t {

    
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
    VALUE,
    
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
    kValue = VALUE,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int32_t f_value;
    uint64_t unknown;
  };

  uint32_t size;
  UnionWithExtensibleEnumWithDefault_Tag tag;
  Union_ data;
};
static_assert(sizeof(UnionWithExtensibleEnumWithDefault_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(UnionWithExtensibleEnumWithDefault_Data)");


class  UnionWithExtensibleEnumWithoutDefault_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  UnionWithExtensibleEnumWithoutDefault_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~UnionWithExtensibleEnumWithoutDefault_Data() {}

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<UnionWithExtensibleEnumWithoutDefault_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class UnionWithExtensibleEnumWithoutDefault_Tag : uint32_t {

    
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
    VALUE,
    
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
    kValue = VALUE,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int32_t f_value;
    uint64_t unknown;
  };

  uint32_t size;
  UnionWithExtensibleEnumWithoutDefault_Tag tag;
  Union_ data;
};
static_assert(sizeof(UnionWithExtensibleEnumWithoutDefault_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(UnionWithExtensibleEnumWithoutDefault_Data)");
class  StructWithExtensibleEnumWithDefault_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<StructWithExtensibleEnumWithDefault_Data>;

  StructWithExtensibleEnumWithDefault_Data();
  ~StructWithExtensibleEnumWithDefault_Data() = delete;
};
static_assert(sizeof(StructWithExtensibleEnumWithDefault_Data) == 16,
              "Bad sizeof(StructWithExtensibleEnumWithDefault_Data)");
// Used by StructWithExtensibleEnumWithDefault::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StructWithExtensibleEnumWithDefault_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StructWithExtensibleEnumWithDefault_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StructWithExtensibleEnumWithDefault_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StructWithExtensibleEnumWithDefault_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StructWithExtensibleEnumWithDefault_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  StructWithExtensibleEnumWithoutDefault_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<StructWithExtensibleEnumWithoutDefault_Data>;

  StructWithExtensibleEnumWithoutDefault_Data();
  ~StructWithExtensibleEnumWithoutDefault_Data() = delete;
};
static_assert(sizeof(StructWithExtensibleEnumWithoutDefault_Data) == 16,
              "Bad sizeof(StructWithExtensibleEnumWithoutDefault_Data)");
// Used by StructWithExtensibleEnumWithoutDefault::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StructWithExtensibleEnumWithoutDefault_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  StructWithoutInitializer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<StructWithoutInitializer_Data>;

  StructWithoutInitializer_Data();
  ~StructWithoutInitializer_Data() = delete;
};
static_assert(sizeof(StructWithoutInitializer_Data) == 16,
              "Bad sizeof(StructWithoutInitializer_Data)");
// Used by StructWithoutInitializer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StructWithoutInitializer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StructWithoutInitializer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StructWithoutInitializer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StructWithoutInitializer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StructWithoutInitializer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  StructWithInitializer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<StructWithInitializer_Data>;

  StructWithInitializer_Data();
  ~StructWithInitializer_Data() = delete;
};
static_assert(sizeof(StructWithInitializer_Data) == 16,
              "Bad sizeof(StructWithInitializer_Data)");
// Used by StructWithInitializer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StructWithInitializer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StructWithInitializer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StructWithInitializer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StructWithInitializer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StructWithInitializer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace enum_default_unittest
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_SHARED_INTERNAL_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogNDMzNiwgImJlZ2luIjogNDMzMSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3Qu
bW9qb20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRoRGVmYXVsdC52YWx1ZSJ9fSwgeyJlbmQi
OiA0NDYwLCAiYmVnaW4iOiA0NDU1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5VbmlvbldpdGhF
eHRlbnNpYmxlRW51bVdpdGhEZWZhdWx0LnZhbHVlIn19LCB7ImVuZCI6IDYyMTgsICJiZWdpbiI6
IDYyMTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVuaW9uV2l0aEV4dGVuc2libGVFbnVtV2l0
aG91dERlZmF1bHQudmFsdWUifX0sIHsiZW5kIjogNjM0NSwgImJlZ2luIjogNjM0MCwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1
bHRfdW5pdHRlc3QubW9qb20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRob3V0RGVmYXVsdC52
YWx1ZSJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/