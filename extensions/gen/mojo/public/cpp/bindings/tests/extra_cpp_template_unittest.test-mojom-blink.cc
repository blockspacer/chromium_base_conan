// mojo/public/cpp/bindings/tests/extra_cpp_template_unittest.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/extra_cpp_template_unittest.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/extra_cpp_template_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/extra_cpp_template_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/extra_cpp_template_unittest.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_EXTRA_CPP_TEMPLATE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_EXTRA_CPP_TEMPLATE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace extra_cpp_template_unittest {
namespace mojom {
namespace blink {
const char ExtraCppInterface::Name_[] = "mojo.test.extra_cpp_template_unittest.mojom.ExtraCppInterface";

ExtraCppInterfaceProxy::ExtraCppInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool ExtraCppInterfaceStubDispatch::Accept(
    ExtraCppInterface* impl,
    mojo::Message* message) {
  return false;
}

// static
bool ExtraCppInterfaceStubDispatch::AcceptWithResponder(
    ExtraCppInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool ExtraCppInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::extra_cpp_template_unittest::mojom::blink::ExtraCppInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

}  // namespace blink
}  // namespace mojom
}  // namespace extra_cpp_template_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif