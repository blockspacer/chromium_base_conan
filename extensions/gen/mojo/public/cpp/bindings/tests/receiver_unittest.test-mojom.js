// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.receiverUnittest.mojom');
  var generic_pending_receiver$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/generic_pending_receiver.mojom', '../../../mojom/base/generic_pending_receiver.mojom.js');
  }



  function TestGenericBinder_BindOptionalReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestGenericBinder_BindOptionalReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  TestGenericBinder_BindOptionalReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestGenericBinder_BindOptionalReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestGenericBinder_BindOptionalReceiver_Params.receiver
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, generic_pending_receiver$.GenericPendingReceiver, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestGenericBinder_BindOptionalReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestGenericBinder_BindOptionalReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new TestGenericBinder_BindOptionalReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStructPointer(generic_pending_receiver$.GenericPendingReceiver);
    return val;
  };

  TestGenericBinder_BindOptionalReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestGenericBinder_BindOptionalReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(generic_pending_receiver$.GenericPendingReceiver, val.receiver);
  };
  function TestGenericBinder_BindReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestGenericBinder_BindReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  TestGenericBinder_BindReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestGenericBinder_BindReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestGenericBinder_BindReceiver_Params.receiver
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, generic_pending_receiver$.GenericPendingReceiver, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestGenericBinder_BindReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestGenericBinder_BindReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new TestGenericBinder_BindReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStructPointer(generic_pending_receiver$.GenericPendingReceiver);
    return val;
  };

  TestGenericBinder_BindReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestGenericBinder_BindReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(generic_pending_receiver$.GenericPendingReceiver, val.receiver);
  };
  function RebindTestInterface_BlockingUntilExternalSignalCall_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RebindTestInterface_BlockingUntilExternalSignalCall_Params.prototype.initDefaults_ = function() {
  };
  RebindTestInterface_BlockingUntilExternalSignalCall_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RebindTestInterface_BlockingUntilExternalSignalCall_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RebindTestInterface_BlockingUntilExternalSignalCall_Params.encodedSize = codec.kStructHeaderSize + 0;

  RebindTestInterface_BlockingUntilExternalSignalCall_Params.decode = function(decoder) {
    var packed;
    var val = new RebindTestInterface_BlockingUntilExternalSignalCall_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RebindTestInterface_BlockingUntilExternalSignalCall_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RebindTestInterface_BlockingUntilExternalSignalCall_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RebindTestInterface_NormalCall_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RebindTestInterface_NormalCall_Params.prototype.initDefaults_ = function() {
  };
  RebindTestInterface_NormalCall_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RebindTestInterface_NormalCall_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RebindTestInterface_NormalCall_Params.encodedSize = codec.kStructHeaderSize + 0;

  RebindTestInterface_NormalCall_Params.decode = function(decoder) {
    var packed;
    var val = new RebindTestInterface_NormalCall_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RebindTestInterface_NormalCall_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RebindTestInterface_NormalCall_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RebindTestInterface_SyncCall_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RebindTestInterface_SyncCall_Params.prototype.initDefaults_ = function() {
  };
  RebindTestInterface_SyncCall_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RebindTestInterface_SyncCall_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RebindTestInterface_SyncCall_Params.encodedSize = codec.kStructHeaderSize + 0;

  RebindTestInterface_SyncCall_Params.decode = function(decoder) {
    var packed;
    var val = new RebindTestInterface_SyncCall_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RebindTestInterface_SyncCall_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RebindTestInterface_SyncCall_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RebindTestInterface_SyncCall_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RebindTestInterface_SyncCall_ResponseParams.prototype.initDefaults_ = function() {
  };
  RebindTestInterface_SyncCall_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RebindTestInterface_SyncCall_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RebindTestInterface_SyncCall_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  RebindTestInterface_SyncCall_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RebindTestInterface_SyncCall_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RebindTestInterface_SyncCall_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RebindTestInterface_SyncCall_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kTestGenericBinder_BindOptionalReceiver_Name = 968255268;
  var kTestGenericBinder_BindReceiver_Name = 220077361;

  function TestGenericBinderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestGenericBinder,
                                                   handleOrPtrInfo);
  }

  function TestGenericBinderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestGenericBinder, associatedInterfacePtrInfo);
  }

  TestGenericBinderAssociatedPtr.prototype =
      Object.create(TestGenericBinderPtr.prototype);
  TestGenericBinderAssociatedPtr.prototype.constructor =
      TestGenericBinderAssociatedPtr;

  function TestGenericBinderProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestGenericBinderPtr.prototype.bindOptionalReceiver = function() {
    return TestGenericBinderProxy.prototype.bindOptionalReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  TestGenericBinderProxy.prototype.bindOptionalReceiver = function(receiver) {
    var params_ = new TestGenericBinder_BindOptionalReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kTestGenericBinder_BindOptionalReceiver_Name,
        codec.align(TestGenericBinder_BindOptionalReceiver_Params.encodedSize));
    builder.encodeStruct(TestGenericBinder_BindOptionalReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TestGenericBinderPtr.prototype.bindReceiver = function() {
    return TestGenericBinderProxy.prototype.bindReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  TestGenericBinderProxy.prototype.bindReceiver = function(receiver) {
    var params_ = new TestGenericBinder_BindReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kTestGenericBinder_BindReceiver_Name,
        codec.align(TestGenericBinder_BindReceiver_Params.encodedSize));
    builder.encodeStruct(TestGenericBinder_BindReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestGenericBinderStub(delegate) {
    this.delegate_ = delegate;
  }
  TestGenericBinderStub.prototype.bindOptionalReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindOptionalReceiver && this.delegate_.bindOptionalReceiver(receiver);
  }
  TestGenericBinderStub.prototype.bindReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindReceiver && this.delegate_.bindReceiver(receiver);
  }

  TestGenericBinderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestGenericBinder_BindOptionalReceiver_Name:
      var params = reader.decodeStruct(TestGenericBinder_BindOptionalReceiver_Params);
      this.bindOptionalReceiver(params.receiver);
      return true;
    case kTestGenericBinder_BindReceiver_Name:
      var params = reader.decodeStruct(TestGenericBinder_BindReceiver_Params);
      this.bindReceiver(params.receiver);
      return true;
    default:
      return false;
    }
  };

  TestGenericBinderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestGenericBinderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestGenericBinder_BindOptionalReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestGenericBinder_BindOptionalReceiver_Params;
      break;
      case kTestGenericBinder_BindReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestGenericBinder_BindReceiver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestGenericBinderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestGenericBinder = {
    name: 'mojo.test.receiver_unittest.mojom.TestGenericBinder',
    kVersion: 0,
    ptrClass: TestGenericBinderPtr,
    proxyClass: TestGenericBinderProxy,
    stubClass: TestGenericBinderStub,
    validateRequest: validateTestGenericBinderRequest,
    validateResponse: null,
  };
  TestGenericBinderStub.prototype.validator = validateTestGenericBinderRequest;
  TestGenericBinderProxy.prototype.validator = null;

  function TestInterface1Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface1,
                                                   handleOrPtrInfo);
  }

  function TestInterface1AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface1, associatedInterfacePtrInfo);
  }

  TestInterface1AssociatedPtr.prototype =
      Object.create(TestInterface1Ptr.prototype);
  TestInterface1AssociatedPtr.prototype.constructor =
      TestInterface1AssociatedPtr;

  function TestInterface1Proxy(receiver) {
    this.receiver_ = receiver;
  }

  function TestInterface1Stub(delegate) {
    this.delegate_ = delegate;
  }

  TestInterface1Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestInterface1Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterface1Request(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateTestInterface1Response(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface1 = {
    name: 'mojo.test.receiver_unittest.mojom.TestInterface1',
    kVersion: 0,
    ptrClass: TestInterface1Ptr,
    proxyClass: TestInterface1Proxy,
    stubClass: TestInterface1Stub,
    validateRequest: validateTestInterface1Request,
    validateResponse: null,
  };
  TestInterface1Stub.prototype.validator = validateTestInterface1Request;
  TestInterface1Proxy.prototype.validator = null;

  function TestInterface2Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface2,
                                                   handleOrPtrInfo);
  }

  function TestInterface2AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface2, associatedInterfacePtrInfo);
  }

  TestInterface2AssociatedPtr.prototype =
      Object.create(TestInterface2Ptr.prototype);
  TestInterface2AssociatedPtr.prototype.constructor =
      TestInterface2AssociatedPtr;

  function TestInterface2Proxy(receiver) {
    this.receiver_ = receiver;
  }

  function TestInterface2Stub(delegate) {
    this.delegate_ = delegate;
  }

  TestInterface2Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestInterface2Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterface2Request(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateTestInterface2Response(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface2 = {
    name: 'mojo.test.receiver_unittest.mojom.TestInterface2',
    kVersion: 0,
    ptrClass: TestInterface2Ptr,
    proxyClass: TestInterface2Proxy,
    stubClass: TestInterface2Stub,
    validateRequest: validateTestInterface2Request,
    validateResponse: null,
  };
  TestInterface2Stub.prototype.validator = validateTestInterface2Request;
  TestInterface2Proxy.prototype.validator = null;
  var kRebindTestInterface_BlockingUntilExternalSignalCall_Name = 255218147;
  var kRebindTestInterface_NormalCall_Name = 1644915030;
  var kRebindTestInterface_SyncCall_Name = 1406776752;

  function RebindTestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RebindTestInterface,
                                                   handleOrPtrInfo);
  }

  function RebindTestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RebindTestInterface, associatedInterfacePtrInfo);
  }

  RebindTestInterfaceAssociatedPtr.prototype =
      Object.create(RebindTestInterfacePtr.prototype);
  RebindTestInterfaceAssociatedPtr.prototype.constructor =
      RebindTestInterfaceAssociatedPtr;

  function RebindTestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  RebindTestInterfacePtr.prototype.blockingUntilExternalSignalCall = function() {
    return RebindTestInterfaceProxy.prototype.blockingUntilExternalSignalCall
        .apply(this.ptr.getProxy(), arguments);
  };

  RebindTestInterfaceProxy.prototype.blockingUntilExternalSignalCall = function() {
    var params_ = new RebindTestInterface_BlockingUntilExternalSignalCall_Params();
    var builder = new codec.MessageV0Builder(
        kRebindTestInterface_BlockingUntilExternalSignalCall_Name,
        codec.align(RebindTestInterface_BlockingUntilExternalSignalCall_Params.encodedSize));
    builder.encodeStruct(RebindTestInterface_BlockingUntilExternalSignalCall_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RebindTestInterfacePtr.prototype.normalCall = function() {
    return RebindTestInterfaceProxy.prototype.normalCall
        .apply(this.ptr.getProxy(), arguments);
  };

  RebindTestInterfaceProxy.prototype.normalCall = function() {
    var params_ = new RebindTestInterface_NormalCall_Params();
    var builder = new codec.MessageV0Builder(
        kRebindTestInterface_NormalCall_Name,
        codec.align(RebindTestInterface_NormalCall_Params.encodedSize));
    builder.encodeStruct(RebindTestInterface_NormalCall_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RebindTestInterfacePtr.prototype.syncCall = function() {
    return RebindTestInterfaceProxy.prototype.syncCall
        .apply(this.ptr.getProxy(), arguments);
  };

  RebindTestInterfaceProxy.prototype.syncCall = function() {
    var params_ = new RebindTestInterface_SyncCall_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRebindTestInterface_SyncCall_Name,
          codec.align(RebindTestInterface_SyncCall_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RebindTestInterface_SyncCall_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RebindTestInterface_SyncCall_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function RebindTestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  RebindTestInterfaceStub.prototype.blockingUntilExternalSignalCall = function() {
    return this.delegate_ && this.delegate_.blockingUntilExternalSignalCall && this.delegate_.blockingUntilExternalSignalCall();
  }
  RebindTestInterfaceStub.prototype.normalCall = function() {
    return this.delegate_ && this.delegate_.normalCall && this.delegate_.normalCall();
  }
  RebindTestInterfaceStub.prototype.syncCall = function() {
    return this.delegate_ && this.delegate_.syncCall && this.delegate_.syncCall();
  }

  RebindTestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRebindTestInterface_BlockingUntilExternalSignalCall_Name:
      var params = reader.decodeStruct(RebindTestInterface_BlockingUntilExternalSignalCall_Params);
      this.blockingUntilExternalSignalCall();
      return true;
    case kRebindTestInterface_NormalCall_Name:
      var params = reader.decodeStruct(RebindTestInterface_NormalCall_Params);
      this.normalCall();
      return true;
    default:
      return false;
    }
  };

  RebindTestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRebindTestInterface_SyncCall_Name:
      var params = reader.decodeStruct(RebindTestInterface_SyncCall_Params);
      this.syncCall().then(function(response) {
        var responseParams =
            new RebindTestInterface_SyncCall_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kRebindTestInterface_SyncCall_Name,
            codec.align(RebindTestInterface_SyncCall_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RebindTestInterface_SyncCall_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRebindTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRebindTestInterface_BlockingUntilExternalSignalCall_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = RebindTestInterface_BlockingUntilExternalSignalCall_Params;
      break;
      case kRebindTestInterface_NormalCall_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = RebindTestInterface_NormalCall_Params;
      break;
      case kRebindTestInterface_SyncCall_Name:
        if (message.expectsResponse())
          paramsClass = RebindTestInterface_SyncCall_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRebindTestInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRebindTestInterface_SyncCall_Name:
        if (message.isResponse())
          paramsClass = RebindTestInterface_SyncCall_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RebindTestInterface = {
    name: 'mojo.test.receiver_unittest.mojom.RebindTestInterface',
    kVersion: 0,
    ptrClass: RebindTestInterfacePtr,
    proxyClass: RebindTestInterfaceProxy,
    stubClass: RebindTestInterfaceStub,
    validateRequest: validateRebindTestInterfaceRequest,
    validateResponse: validateRebindTestInterfaceResponse,
  };
  RebindTestInterfaceStub.prototype.validator = validateRebindTestInterfaceRequest;
  RebindTestInterfaceProxy.prototype.validator = validateRebindTestInterfaceResponse;
  exports.TestGenericBinder = TestGenericBinder;
  exports.TestGenericBinderPtr = TestGenericBinderPtr;
  exports.TestGenericBinderAssociatedPtr = TestGenericBinderAssociatedPtr;
  exports.TestInterface1 = TestInterface1;
  exports.TestInterface1Ptr = TestInterface1Ptr;
  exports.TestInterface1AssociatedPtr = TestInterface1AssociatedPtr;
  exports.TestInterface2 = TestInterface2;
  exports.TestInterface2Ptr = TestInterface2Ptr;
  exports.TestInterface2AssociatedPtr = TestInterface2AssociatedPtr;
  exports.RebindTestInterface = RebindTestInterface;
  exports.RebindTestInterfacePtr = RebindTestInterfacePtr;
  exports.RebindTestInterfaceAssociatedPtr = RebindTestInterfaceAssociatedPtr;
})();