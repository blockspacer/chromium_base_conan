// mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace remote_unittest {
namespace mojom {
namespace blink {
const char SharedRemoteSyncTest::Name_[] = "mojo.test.remote_unittest.mojom.SharedRemoteSyncTest";
bool SharedRemoteSyncTest::Fetch(int32_t* out_value) {
  NOTREACHED();
  return false;
}
class SharedRemoteSyncTest_Fetch_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  SharedRemoteSyncTest_Fetch_HandleSyncResponse(
      bool* result, int32_t* out_value)
      : result_(result), out_value_(out_value) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  int32_t* out_value_;DISALLOW_COPY_AND_ASSIGN(SharedRemoteSyncTest_Fetch_HandleSyncResponse);
};

class SharedRemoteSyncTest_Fetch_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedRemoteSyncTest_Fetch_ForwardToCallback(
      SharedRemoteSyncTest::FetchCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  SharedRemoteSyncTest::FetchCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(SharedRemoteSyncTest_Fetch_ForwardToCallback);
};

SharedRemoteSyncTestProxy::SharedRemoteSyncTestProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class SharedRemoteSyncTestProxy_Fetch_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit SharedRemoteSyncTestProxy_Fetch_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kSharedRemoteSyncTest_Fetch_Name,
          message_flags){}
  ~SharedRemoteSyncTestProxy_Fetch_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<SharedRemoteSyncTestProxy_Fetch_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kSharedRemoteSyncTest_Fetch_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::SharedRemoteSyncTest_Fetch_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      SharedRemoteSyncTest* impl, SharedRemoteSyncTest::FetchCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->Fetch(std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::SharedRemoteSyncTest_Fetch_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(SharedRemoteSyncTestProxy_Fetch_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
SharedRemoteSyncTestProxy_Fetch_Message::kMessageTag = {};
bool SharedRemoteSyncTestProxy::Fetch(
    int32_t* out_param_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::Fetch");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = SharedRemoteSyncTestProxy_Fetch_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedRemoteSyncTest::Name_);
  message.set_method_name("Fetch");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedRemoteSyncTest_Fetch_HandleSyncResponse(
          &result, out_param_value));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::Fetch", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), out_param_value, 
                        "<value of type int32_t>");
   });
#endif
  return result;
}

void SharedRemoteSyncTestProxy::Fetch(
    FetchCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::Fetch");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = SharedRemoteSyncTestProxy_Fetch_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedRemoteSyncTest::Name_);
  message.set_method_name("Fetch");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedRemoteSyncTest_Fetch_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class SharedRemoteSyncTest_Fetch_ProxyToResponder {
 public:
  static SharedRemoteSyncTest::FetchCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<SharedRemoteSyncTest_Fetch_ProxyToResponder> proxy(
        new SharedRemoteSyncTest_Fetch_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&SharedRemoteSyncTest_Fetch_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedRemoteSyncTest_Fetch_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  SharedRemoteSyncTest_Fetch_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedRemoteSyncTest::FetchCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int32_t in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(SharedRemoteSyncTest_Fetch_ProxyToResponder);
};
class SharedRemoteSyncTest_Fetch_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit SharedRemoteSyncTest_Fetch_Response_Message(
      uint32_t message_flags
      , int32_t param_value
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kSharedRemoteSyncTest_Fetch_Name,
          message_flags)
      , param_value_(std::move(param_value)){}
  ~SharedRemoteSyncTest_Fetch_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      int32_t param_value) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<SharedRemoteSyncTest_Fetch_Response_Message>(
          kFlags
          , std::move(param_value)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kSharedRemoteSyncTest_Fetch_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->value = param_value;
    return message;
  }


  void Dispatch(mojo::Message* message,
                SharedRemoteSyncTest::FetchCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_value_));
  }


  void HandleSyncResponse(
      mojo::Message* message
,
      int32_t* out_value) {

    if (message->receiver_connection_group()) {
    }


    *out_value = std::move(param_value_);

  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data> params(
            message);
    params.Allocate();
  params->value = param_value_;
  }
  int32_t param_value_;

  DISALLOW_COPY_AND_ASSIGN(SharedRemoteSyncTest_Fetch_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
SharedRemoteSyncTest_Fetch_Response_Message::kMessageTag = {};

bool SharedRemoteSyncTest_Fetch_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::FetchCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<SharedRemoteSyncTest_Fetch_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int32_t p_value{};
  SharedRemoteSyncTest_Fetch_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_value = input_data_view.value();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedRemoteSyncTest::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void SharedRemoteSyncTest_Fetch_ProxyToResponder::Run(
    int32_t in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::FetchCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type int32_t>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = SharedRemoteSyncTest_Fetch_Response_Message::Build(kSerialize, is_sync_, std::move(in_value));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::FetchCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedRemoteSyncTest::Name_);
  message.set_method_name("Fetch");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool SharedRemoteSyncTest_Fetch_HandleSyncResponse::Accept(
    mojo::Message* message) {
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<SharedRemoteSyncTest_Fetch_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was built using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      context->HandleSyncResponse(
          message,
          out_value_);
      *result_ = true;
      mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
          message);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data* params =
      reinterpret_cast<internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  int32_t p_value{};
  SharedRemoteSyncTest_Fetch_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_value = input_data_view.value();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedRemoteSyncTest::Name_, 0, true);
    return false;
  }
  *out_value_ = std::move(p_value);
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}

// static
bool SharedRemoteSyncTestStubDispatch::Accept(
    SharedRemoteSyncTest* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSharedRemoteSyncTest_Fetch_Name: {
      break;
    }
  }
  return false;
}

// static
bool SharedRemoteSyncTestStubDispatch::AcceptWithResponder(
    SharedRemoteSyncTest* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kSharedRemoteSyncTest_Fetch_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::Fetch",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::remote_unittest::mojom::SharedRemoteSyncTest::Fetch");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            SharedRemoteSyncTestProxy_Fetch_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          SharedRemoteSyncTest::FetchCallback callback =
              SharedRemoteSyncTest_Fetch_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::SharedRemoteSyncTest_Fetch_Params_Data* params =
          reinterpret_cast<
              internal::SharedRemoteSyncTest_Fetch_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SharedRemoteSyncTest_Fetch_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedRemoteSyncTest::Name_, 0, false);
        return false;
      }
      SharedRemoteSyncTest::FetchCallback callback =
          SharedRemoteSyncTest_Fetch_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Fetch(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kSharedRemoteSyncTestValidationInfo[] = {
    {internal::kSharedRemoteSyncTest_Fetch_Name,
     {&internal::SharedRemoteSyncTest_Fetch_Params_Data::Validate,
      &internal::SharedRemoteSyncTest_Fetch_ResponseParams_Data::Validate}},
};

bool SharedRemoteSyncTestRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::remote_unittest::mojom::blink::SharedRemoteSyncTest::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kSharedRemoteSyncTestValidationInfo);
}

bool SharedRemoteSyncTestResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::remote_unittest::mojom::blink::SharedRemoteSyncTest::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kSharedRemoteSyncTestValidationInfo);

}
const char LargeMessageTest::Name_[] = "mojo.test.remote_unittest.mojom.LargeMessageTest";
bool LargeMessageTest::ProcessData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) {
  NOTREACHED();
  return false;
}
bool LargeMessageTest::ProcessLotsOfData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) {
  NOTREACHED();
  return false;
}
bool LargeMessageTest::GetLotsOfData(uint64_t data_size, WTF::Vector<uint8_t>* out_data) {
  NOTREACHED();
  return false;
}
class LargeMessageTest_ProcessData_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_ProcessData_HandleSyncResponse(
      bool* result, uint64_t* out_data_size)
      : result_(result), out_data_size_(out_data_size) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  uint64_t* out_data_size_;DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessData_HandleSyncResponse);
};

class LargeMessageTest_ProcessData_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_ProcessData_ForwardToCallback(
      LargeMessageTest::ProcessDataCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  LargeMessageTest::ProcessDataCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessData_ForwardToCallback);
};
class LargeMessageTest_ProcessLotsOfData_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_ProcessLotsOfData_HandleSyncResponse(
      bool* result, uint64_t* out_data_size)
      : result_(result), out_data_size_(out_data_size) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  uint64_t* out_data_size_;DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessLotsOfData_HandleSyncResponse);
};

class LargeMessageTest_ProcessLotsOfData_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_ProcessLotsOfData_ForwardToCallback(
      LargeMessageTest::ProcessLotsOfDataCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  LargeMessageTest::ProcessLotsOfDataCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessLotsOfData_ForwardToCallback);
};
class LargeMessageTest_GetLotsOfData_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_GetLotsOfData_HandleSyncResponse(
      bool* result, WTF::Vector<uint8_t>* out_data)
      : result_(result), out_data_(out_data) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  WTF::Vector<uint8_t>* out_data_;DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_GetLotsOfData_HandleSyncResponse);
};

class LargeMessageTest_GetLotsOfData_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  LargeMessageTest_GetLotsOfData_ForwardToCallback(
      LargeMessageTest::GetLotsOfDataCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  LargeMessageTest::GetLotsOfDataCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_GetLotsOfData_ForwardToCallback);
};

LargeMessageTestProxy::LargeMessageTestProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class LargeMessageTestProxy_ProcessData_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTestProxy_ProcessData_Message(
      uint32_t message_flags
      , const WTF::Vector<uint8_t>& param_data
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_ProcessData_Name,
          message_flags)
      , param_data_(std::move(param_data)){}
  ~LargeMessageTestProxy_ProcessData_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      const WTF::Vector<uint8_t>& param_data) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTestProxy_ProcessData_Message>(
          kFlags
          , std::move(param_data)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_ProcessData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessData_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.ProcessData request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      LargeMessageTest* impl, LargeMessageTest::ProcessDataCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->ProcessData(
        std::move(param_data_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessData_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data_, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.ProcessData request");
  }
  WTF::Vector<uint8_t> param_data_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTestProxy_ProcessData_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTestProxy_ProcessData_Message::kMessageTag = {};
bool LargeMessageTestProxy::ProcessData(
    const WTF::Vector<uint8_t>& param_data, uint64_t* out_param_data_size) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), param_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_ProcessData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(param_data));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessData");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_ProcessData_HandleSyncResponse(
          &result, out_param_data_size));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessData", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), out_param_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  return result;
}

void LargeMessageTestProxy::ProcessData(
    const WTF::Vector<uint8_t>& in_data, ProcessDataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_ProcessData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_data));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessData");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_ProcessData_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class LargeMessageTestProxy_ProcessLotsOfData_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTestProxy_ProcessLotsOfData_Message(
      uint32_t message_flags
      , const WTF::Vector<uint8_t>& param_data
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_ProcessLotsOfData_Name,
          message_flags)
      , param_data_(std::move(param_data)){}
  ~LargeMessageTestProxy_ProcessLotsOfData_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      const WTF::Vector<uint8_t>& param_data) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTestProxy_ProcessLotsOfData_Message>(
          kFlags
          , std::move(param_data)
          ),
          MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_ProcessLotsOfData_Name, kFlags, 0, 0,
      MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessLotsOfData_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.ProcessLotsOfData request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      LargeMessageTest* impl, LargeMessageTest::ProcessLotsOfDataCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->ProcessLotsOfData(
        std::move(param_data_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessLotsOfData_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data_, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.ProcessLotsOfData request");
  }
  WTF::Vector<uint8_t> param_data_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTestProxy_ProcessLotsOfData_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTestProxy_ProcessLotsOfData_Message::kMessageTag = {};
bool LargeMessageTestProxy::ProcessLotsOfData(
    const WTF::Vector<uint8_t>& param_data, uint64_t* out_param_data_size) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), param_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_ProcessLotsOfData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(param_data));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessLotsOfData");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_ProcessLotsOfData_HandleSyncResponse(
          &result, out_param_data_size));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfData", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), out_param_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  return result;
}

void LargeMessageTestProxy::ProcessLotsOfData(
    const WTF::Vector<uint8_t>& in_data, ProcessLotsOfDataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_ProcessLotsOfData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_data));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessLotsOfData");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_ProcessLotsOfData_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class LargeMessageTestProxy_GetLotsOfData_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTestProxy_GetLotsOfData_Message(
      uint32_t message_flags
      , uint64_t param_data_size
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_GetLotsOfData_Name,
          message_flags)
      , param_data_size_(std::move(param_data_size)){}
  ~LargeMessageTestProxy_GetLotsOfData_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      uint64_t param_data_size) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTestProxy_GetLotsOfData_Message>(
          kFlags
          , std::move(param_data_size)
          ),
          MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_GetLotsOfData_Name, kFlags, 0, 0,
      MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_GetLotsOfData_Params_Data> params(
          message);
  params.Allocate();
  params->data_size = param_data_size;
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      LargeMessageTest* impl, LargeMessageTest::GetLotsOfDataCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->GetLotsOfData(
        std::move(param_data_size_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_GetLotsOfData_Params_Data> params(
            message);
    params.Allocate();
  params->data_size = param_data_size_;
  }
  uint64_t param_data_size_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTestProxy_GetLotsOfData_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTestProxy_GetLotsOfData_Message::kMessageTag = {};
bool LargeMessageTestProxy::GetLotsOfData(
    uint64_t param_data_size, WTF::Vector<uint8_t>* out_param_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), param_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_GetLotsOfData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(param_data_size));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("GetLotsOfData");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_GetLotsOfData_HandleSyncResponse(
          &result, out_param_data));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfData", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), out_param_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  return result;
}

void LargeMessageTestProxy::GetLotsOfData(
    uint64_t in_data_size, GetLotsOfDataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), in_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = LargeMessageTestProxy_GetLotsOfData_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_data_size));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("GetLotsOfData");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new LargeMessageTest_GetLotsOfData_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class LargeMessageTest_ProcessData_ProxyToResponder {
 public:
  static LargeMessageTest::ProcessDataCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<LargeMessageTest_ProcessData_ProxyToResponder> proxy(
        new LargeMessageTest_ProcessData_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&LargeMessageTest_ProcessData_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~LargeMessageTest_ProcessData_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  LargeMessageTest_ProcessData_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "LargeMessageTest::ProcessDataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      uint64_t in_data_size);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessData_ProxyToResponder);
};
class LargeMessageTest_ProcessData_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTest_ProcessData_Response_Message(
      uint32_t message_flags
      , uint64_t param_data_size
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_ProcessData_Name,
          message_flags)
      , param_data_size_(std::move(param_data_size)){}
  ~LargeMessageTest_ProcessData_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      uint64_t param_data_size) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTest_ProcessData_Response_Message>(
          kFlags
          , std::move(param_data_size)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_ProcessData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessData_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->data_size = param_data_size;
    return message;
  }


  void Dispatch(mojo::Message* message,
                LargeMessageTest::ProcessDataCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_data_size_));
  }


  void HandleSyncResponse(
      mojo::Message* message
,
      uint64_t* out_data_size) {

    if (message->receiver_connection_group()) {
    }


    *out_data_size = std::move(param_data_size_);

  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessData_ResponseParams_Data> params(
            message);
    params.Allocate();
  params->data_size = param_data_size_;
  }
  uint64_t param_data_size_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessData_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTest_ProcessData_Response_Message::kMessageTag = {};

bool LargeMessageTest_ProcessData_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessDataCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_ProcessData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_ProcessData_ResponseParams_Data* params =
      reinterpret_cast<
          internal::LargeMessageTest_ProcessData_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  uint64_t p_data_size{};
  LargeMessageTest_ProcessData_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_data_size = input_data_view.data_size();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_data_size));
  return true;
}

void LargeMessageTest_ProcessData_ProxyToResponder::Run(
    uint64_t in_data_size) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessDataCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), in_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = LargeMessageTest_ProcessData_Response_Message::Build(kSerialize, is_sync_, std::move(in_data_size));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessDataCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessData");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool LargeMessageTest_ProcessData_HandleSyncResponse::Accept(
    mojo::Message* message) {
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_ProcessData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was built using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      context->HandleSyncResponse(
          message,
          out_data_size_);
      *result_ = true;
      mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
          message);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_ProcessData_ResponseParams_Data* params =
      reinterpret_cast<internal::LargeMessageTest_ProcessData_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  uint64_t p_data_size{};
  LargeMessageTest_ProcessData_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_data_size = input_data_view.data_size();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 0, true);
    return false;
  }
  *out_data_size_ = std::move(p_data_size);
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}
class LargeMessageTest_ProcessLotsOfData_ProxyToResponder {
 public:
  static LargeMessageTest::ProcessLotsOfDataCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<LargeMessageTest_ProcessLotsOfData_ProxyToResponder> proxy(
        new LargeMessageTest_ProcessLotsOfData_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&LargeMessageTest_ProcessLotsOfData_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~LargeMessageTest_ProcessLotsOfData_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  LargeMessageTest_ProcessLotsOfData_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "LargeMessageTest::ProcessLotsOfDataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      uint64_t in_data_size);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessLotsOfData_ProxyToResponder);
};
class LargeMessageTest_ProcessLotsOfData_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTest_ProcessLotsOfData_Response_Message(
      uint32_t message_flags
      , uint64_t param_data_size
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_ProcessLotsOfData_Name,
          message_flags)
      , param_data_size_(std::move(param_data_size)){}
  ~LargeMessageTest_ProcessLotsOfData_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      uint64_t param_data_size) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTest_ProcessLotsOfData_Response_Message>(
          kFlags
          , std::move(param_data_size)
          ),
          MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_ProcessLotsOfData_Name, kFlags, 0, 0,
      MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->data_size = param_data_size;
    return message;
  }


  void Dispatch(mojo::Message* message,
                LargeMessageTest::ProcessLotsOfDataCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_data_size_));
  }


  void HandleSyncResponse(
      mojo::Message* message
,
      uint64_t* out_data_size) {

    if (message->receiver_connection_group()) {
    }


    *out_data_size = std::move(param_data_size_);

  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data> params(
            message);
    params.Allocate();
  params->data_size = param_data_size_;
  }
  uint64_t param_data_size_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_ProcessLotsOfData_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTest_ProcessLotsOfData_Response_Message::kMessageTag = {};

bool LargeMessageTest_ProcessLotsOfData_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfDataCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_ProcessLotsOfData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data* params =
      reinterpret_cast<
          internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  uint64_t p_data_size{};
  LargeMessageTest_ProcessLotsOfData_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_data_size = input_data_view.data_size();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_data_size));
  return true;
}

void LargeMessageTest_ProcessLotsOfData_ProxyToResponder::Run(
    uint64_t in_data_size) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfDataCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_size"), in_data_size, 
                        "<value of type uint64_t>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = LargeMessageTest_ProcessLotsOfData_Response_Message::Build(kSerialize, is_sync_, std::move(in_data_size));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfDataCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("ProcessLotsOfData");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool LargeMessageTest_ProcessLotsOfData_HandleSyncResponse::Accept(
    mojo::Message* message) {
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_ProcessLotsOfData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was built using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      context->HandleSyncResponse(
          message,
          out_data_size_);
      *result_ = true;
      mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
          message);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data* params =
      reinterpret_cast<internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  uint64_t p_data_size{};
  LargeMessageTest_ProcessLotsOfData_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_data_size = input_data_view.data_size();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 1, true);
    return false;
  }
  *out_data_size_ = std::move(p_data_size);
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}
class LargeMessageTest_GetLotsOfData_ProxyToResponder {
 public:
  static LargeMessageTest::GetLotsOfDataCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<LargeMessageTest_GetLotsOfData_ProxyToResponder> proxy(
        new LargeMessageTest_GetLotsOfData_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&LargeMessageTest_GetLotsOfData_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~LargeMessageTest_GetLotsOfData_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  LargeMessageTest_GetLotsOfData_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "LargeMessageTest::GetLotsOfDataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const WTF::Vector<uint8_t>& in_data);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_GetLotsOfData_ProxyToResponder);
};
class LargeMessageTest_GetLotsOfData_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit LargeMessageTest_GetLotsOfData_Response_Message(
      uint32_t message_flags
      , const WTF::Vector<uint8_t>& param_data
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kLargeMessageTest_GetLotsOfData_Name,
          message_flags)
      , param_data_(std::move(param_data)){}
  ~LargeMessageTest_GetLotsOfData_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      const WTF::Vector<uint8_t>& param_data) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<LargeMessageTest_GetLotsOfData_Response_Message>(
          kFlags
          , std::move(param_data)
          ),
          MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kLargeMessageTest_GetLotsOfData_Name, kFlags, 0, 0,
      MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.GetLotsOfData response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                LargeMessageTest::GetLotsOfDataCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_data_));
  }


  void HandleSyncResponse(
      mojo::Message* message
,
      WTF::Vector<uint8_t>* out_data) {

    if (message->receiver_connection_group()) {
    }


    *out_data = std::move(param_data_);

  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::remote_unittest::mojom::internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      param_data_, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in LargeMessageTest.GetLotsOfData response");
  }
  WTF::Vector<uint8_t> param_data_;

  DISALLOW_COPY_AND_ASSIGN(LargeMessageTest_GetLotsOfData_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
LargeMessageTest_GetLotsOfData_Response_Message::kMessageTag = {};

bool LargeMessageTest_GetLotsOfData_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfDataCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_GetLotsOfData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data* params =
      reinterpret_cast<
          internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<uint8_t> p_data{};
  LargeMessageTest_GetLotsOfData_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadData(&p_data))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_data));
  return true;
}

void LargeMessageTest_GetLotsOfData_ProxyToResponder::Run(
    const WTF::Vector<uint8_t>& in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfDataCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data, 
                        "<value of type const WTF::Vector<uint8_t>&>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = LargeMessageTest_GetLotsOfData_Response_Message::Build(kSerialize, is_sync_, std::move(in_data));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfDataCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(LargeMessageTest::Name_);
  message.set_method_name("GetLotsOfData");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool LargeMessageTest_GetLotsOfData_HandleSyncResponse::Accept(
    mojo::Message* message) {
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<LargeMessageTest_GetLotsOfData_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was built using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      context->HandleSyncResponse(
          message,
          out_data_);
      *result_ = true;
      mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
          message);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data* params =
      reinterpret_cast<internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  WTF::Vector<uint8_t> p_data{};
  LargeMessageTest_GetLotsOfData_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadData(&p_data))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        LargeMessageTest::Name_, 2, true);
    return false;
  }
  *out_data_ = std::move(p_data);
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}

// static
bool LargeMessageTestStubDispatch::Accept(
    LargeMessageTest* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kLargeMessageTest_ProcessData_Name: {
      break;
    }
    case internal::kLargeMessageTest_ProcessLotsOfData_Name: {
      break;
    }
    case internal::kLargeMessageTest_GetLotsOfData_Name: {
      break;
    }
  }
  return false;
}

// static
bool LargeMessageTestStubDispatch::AcceptWithResponder(
    LargeMessageTest* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kLargeMessageTest_ProcessData_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessData",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessData");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            LargeMessageTestProxy_ProcessData_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          LargeMessageTest::ProcessDataCallback callback =
              LargeMessageTest_ProcessData_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::LargeMessageTest_ProcessData_Params_Data* params =
          reinterpret_cast<
              internal::LargeMessageTest_ProcessData_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::Vector<uint8_t> p_data{};
      LargeMessageTest_ProcessData_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            LargeMessageTest::Name_, 0, false);
        return false;
      }
      LargeMessageTest::ProcessDataCallback callback =
          LargeMessageTest_ProcessData_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ProcessData(
std::move(p_data), std::move(callback));
      return true;
    }
    case internal::kLargeMessageTest_ProcessLotsOfData_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfData",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::ProcessLotsOfData");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            LargeMessageTestProxy_ProcessLotsOfData_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          LargeMessageTest::ProcessLotsOfDataCallback callback =
              LargeMessageTest_ProcessLotsOfData_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::LargeMessageTest_ProcessLotsOfData_Params_Data* params =
          reinterpret_cast<
              internal::LargeMessageTest_ProcessLotsOfData_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::Vector<uint8_t> p_data{};
      LargeMessageTest_ProcessLotsOfData_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            LargeMessageTest::Name_, 1, false);
        return false;
      }
      LargeMessageTest::ProcessLotsOfDataCallback callback =
          LargeMessageTest_ProcessLotsOfData_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ProcessLotsOfData(
std::move(p_data), std::move(callback));
      return true;
    }
    case internal::kLargeMessageTest_GetLotsOfData_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfData",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::remote_unittest::mojom::LargeMessageTest::GetLotsOfData");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            LargeMessageTestProxy_GetLotsOfData_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          LargeMessageTest::GetLotsOfDataCallback callback =
              LargeMessageTest_GetLotsOfData_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::LargeMessageTest_GetLotsOfData_Params_Data* params =
          reinterpret_cast<
              internal::LargeMessageTest_GetLotsOfData_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      uint64_t p_data_size{};
      LargeMessageTest_GetLotsOfData_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_data_size = input_data_view.data_size();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            LargeMessageTest::Name_, 2, false);
        return false;
      }
      LargeMessageTest::GetLotsOfDataCallback callback =
          LargeMessageTest_GetLotsOfData_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetLotsOfData(
std::move(p_data_size), std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kLargeMessageTestValidationInfo[] = {
    {internal::kLargeMessageTest_ProcessData_Name,
     {&internal::LargeMessageTest_ProcessData_Params_Data::Validate,
      &internal::LargeMessageTest_ProcessData_ResponseParams_Data::Validate}},
    {internal::kLargeMessageTest_ProcessLotsOfData_Name,
     {&internal::LargeMessageTest_ProcessLotsOfData_Params_Data::Validate,
      &internal::LargeMessageTest_ProcessLotsOfData_ResponseParams_Data::Validate}},
    {internal::kLargeMessageTest_GetLotsOfData_Name,
     {&internal::LargeMessageTest_GetLotsOfData_Params_Data::Validate,
      &internal::LargeMessageTest_GetLotsOfData_ResponseParams_Data::Validate}},
};

bool LargeMessageTestRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::remote_unittest::mojom::blink::LargeMessageTest::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kLargeMessageTestValidationInfo);
}

bool LargeMessageTestResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::remote_unittest::mojom::blink::LargeMessageTest::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kLargeMessageTestValidationInfo);

}
}  // namespace blink
}  // namespace mojom
}  // namespace remote_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif