// mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace idle_tracking_unittest {
namespace mojom {
namespace blink {
const char TestService::Name_[] = "mojo.test.idle_tracking_unittest.mojom.TestService";

class TestService_PingPong_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestService_PingPong_ForwardToCallback(
      TestService::PingPongCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestService::PingPongCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestService_PingPong_ForwardToCallback);
};

TestServiceProxy::TestServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class TestServiceProxy_Ping_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestServiceProxy_Ping_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestService_Ping_Name,
          message_flags){}
  ~TestServiceProxy_Ping_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestServiceProxy_Ping_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestService_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_Ping_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestService* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->Ping();
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_Ping_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(TestServiceProxy_Ping_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestServiceProxy_Ping_Message::kMessageTag = {};

void TestServiceProxy::Ping(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::idle_tracking_unittest::mojom::TestService::Ping");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestServiceProxy_Ping_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestService::Name_);
  message.set_method_name("Ping");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class TestServiceProxy_PingPong_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestServiceProxy_PingPong_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestService_PingPong_Name,
          message_flags){}
  ~TestServiceProxy_PingPong_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestServiceProxy_PingPong_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestService_PingPong_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_PingPong_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestService* impl, TestService::PingPongCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->PingPong(std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_PingPong_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(TestServiceProxy_PingPong_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestServiceProxy_PingPong_Message::kMessageTag = {};

void TestServiceProxy::PingPong(
    PingPongCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::idle_tracking_unittest::mojom::TestService::PingPong");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestServiceProxy_PingPong_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestService::Name_);
  message.set_method_name("PingPong");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestService_PingPong_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestServiceProxy_BindKeepAlive_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestServiceProxy_BindKeepAlive_Message(
      uint32_t message_flags
      , ::mojo::PendingReceiver<KeepAlive> param_receiver
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestService_BindKeepAlive_Name,
          message_flags)
      , param_receiver_(std::move(param_receiver)){}
  ~TestServiceProxy_BindKeepAlive_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ::mojo::PendingReceiver<KeepAlive> param_receiver) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestServiceProxy_BindKeepAlive_Message>(
          kFlags
          , std::move(param_receiver)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestService_BindKeepAlive_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_BindKeepAlive_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::mojo::test::idle_tracking_unittest::mojom::KeepAliveInterfaceBase>>(
      param_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in TestService.BindKeepAlive request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestService* impl) {
    if (message->receiver_connection_group()) {
      param_receiver_.set_connection_group(
          *message->receiver_connection_group());
    }

    impl->BindKeepAlive(
        std::move(param_receiver_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_BindKeepAlive_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::mojo::test::idle_tracking_unittest::mojom::KeepAliveInterfaceBase>>(
      param_receiver_, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in TestService.BindKeepAlive request");
  }
  ::mojo::PendingReceiver<KeepAlive> param_receiver_;

  DISALLOW_COPY_AND_ASSIGN(TestServiceProxy_BindKeepAlive_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestServiceProxy_BindKeepAlive_Message::kMessageTag = {};

void TestServiceProxy::BindKeepAlive(
    ::mojo::PendingReceiver<KeepAlive> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::idle_tracking_unittest::mojom::TestService::BindKeepAlive", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingReceiver<KeepAlive>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestServiceProxy_BindKeepAlive_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_receiver));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestService::Name_);
  message.set_method_name("BindKeepAlive");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class TestService_PingPong_ProxyToResponder {
 public:
  static TestService::PingPongCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestService_PingPong_ProxyToResponder> proxy(
        new TestService_PingPong_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestService_PingPong_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestService_PingPong_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestService_PingPong_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestService::PingPongCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestService_PingPong_ProxyToResponder);
};
class TestService_PingPong_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestService_PingPong_Response_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestService_PingPong_Name,
          message_flags){}
  ~TestService_PingPong_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestService_PingPong_Response_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestService_PingPong_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_PingPong_ResponseParams_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestService::PingPongCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run();
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::idle_tracking_unittest::mojom::internal::TestService_PingPong_ResponseParams_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(TestService_PingPong_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestService_PingPong_Response_Message::kMessageTag = {};

bool TestService_PingPong_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::idle_tracking_unittest::mojom::TestService::PingPongCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestService_PingPong_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestService_PingPong_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestService_PingPong_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  TestService_PingPong_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestService::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void TestService_PingPong_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::PingPongCallback");
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestService_PingPong_Response_Message::Build(kSerialize, is_sync_);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::PingPongCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestService::Name_);
  message.set_method_name("PingPong");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool TestServiceStubDispatch::Accept(
    TestService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kTestService_Ping_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::Ping",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::Ping");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestServiceProxy_Ping_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::TestService_Ping_Params_Data* params =
          reinterpret_cast<internal::TestService_Ping_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      TestService_Ping_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Ping();
      return true;
    }
    case internal::kTestService_PingPong_Name: {
      break;
    }
    case internal::kTestService_BindKeepAlive_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::BindKeepAlive",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::BindKeepAlive");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestServiceProxy_BindKeepAlive_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::TestService_BindKeepAlive_Params_Data* params =
          reinterpret_cast<internal::TestService_BindKeepAlive_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<KeepAlive> p_receiver{};
      TestService_BindKeepAlive_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestService::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindKeepAlive(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool TestServiceStubDispatch::AcceptWithResponder(
    TestService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTestService_Ping_Name: {
      break;
    }
    case internal::kTestService_PingPong_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::PingPong",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::idle_tracking_unittest::mojom::TestService::PingPong");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestServiceProxy_PingPong_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestService::PingPongCallback callback =
              TestService_PingPong_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestService_PingPong_Params_Data* params =
          reinterpret_cast<
              internal::TestService_PingPong_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      TestService_PingPong_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestService::Name_, 1, false);
        return false;
      }
      TestService::PingPongCallback callback =
          TestService_PingPong_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PingPong(std::move(callback));
      return true;
    }
    case internal::kTestService_BindKeepAlive_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTestServiceValidationInfo[] = {
    {internal::kTestService_Ping_Name,
     {&internal::TestService_Ping_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kTestService_PingPong_Name,
     {&internal::TestService_PingPong_Params_Data::Validate,
      &internal::TestService_PingPong_ResponseParams_Data::Validate}},
    {internal::kTestService_BindKeepAlive_Name,
     {&internal::TestService_BindKeepAlive_Params_Data::Validate,
      nullptr /* no response */}},
};

bool TestServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::idle_tracking_unittest::mojom::blink::TestService::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTestServiceValidationInfo);
}

bool TestServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::idle_tracking_unittest::mojom::blink::TestService::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kTestServiceValidationInfo);

}
const char KeepAlive::Name_[] = "mojo.test.idle_tracking_unittest.mojom.KeepAlive";

KeepAliveProxy::KeepAliveProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool KeepAliveStubDispatch::Accept(
    KeepAlive* impl,
    mojo::Message* message) {
  return false;
}

// static
bool KeepAliveStubDispatch::AcceptWithResponder(
    KeepAlive* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool KeepAliveRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::idle_tracking_unittest::mojom::blink::KeepAlive::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

}  // namespace blink
}  // namespace mojom
}  // namespace idle_tracking_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif