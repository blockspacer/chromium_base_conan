// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-import-headers.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace enum_default_unittest {
namespace mojom {
StructWithExtensibleEnumWithDefault::StructWithExtensibleEnumWithDefault()
    : value() {}

StructWithExtensibleEnumWithDefault::StructWithExtensibleEnumWithDefault(
    ExtensibleEnumWithDefault value_in)
    : value(std::move(value_in)) {}

StructWithExtensibleEnumWithDefault::~StructWithExtensibleEnumWithDefault() = default;
size_t StructWithExtensibleEnumWithDefault::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void StructWithExtensibleEnumWithDefault::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ExtensibleEnumWithDefault>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructWithExtensibleEnumWithDefault::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StructWithExtensibleEnumWithoutDefault::StructWithExtensibleEnumWithoutDefault()
    : value() {}

StructWithExtensibleEnumWithoutDefault::StructWithExtensibleEnumWithoutDefault(
    ExtensibleEnumWithoutDefault value_in)
    : value(std::move(value_in)) {}

StructWithExtensibleEnumWithoutDefault::~StructWithExtensibleEnumWithoutDefault() = default;
size_t StructWithExtensibleEnumWithoutDefault::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void StructWithExtensibleEnumWithoutDefault::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ExtensibleEnumWithoutDefault>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructWithExtensibleEnumWithoutDefault::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StructWithoutInitializer::StructWithoutInitializer()
    : value() {}

StructWithoutInitializer::StructWithoutInitializer(
    EnumWithoutZeroValue value_in)
    : value(std::move(value_in)) {}

StructWithoutInitializer::~StructWithoutInitializer() = default;
size_t StructWithoutInitializer::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void StructWithoutInitializer::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EnumWithoutZeroValue>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructWithoutInitializer::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StructWithInitializer::StructWithInitializer()
    : value(EnumWithoutZeroValue::kSecond) {}

StructWithInitializer::StructWithInitializer(
    EnumWithoutZeroValue value_in)
    : value(std::move(value_in)) {}

StructWithInitializer::~StructWithInitializer() = default;
size_t StructWithInitializer::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void StructWithInitializer::WriteIntoTracedValue(perfetto::TracedValue context) const {
  auto dict = std::move(context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EnumWithoutZeroValue>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructWithInitializer::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
UnionWithExtensibleEnumWithDefault::UnionWithExtensibleEnumWithDefault() : tag_(Tag::VALUE) {
  data_.value = ExtensibleEnumWithDefault();
}

UnionWithExtensibleEnumWithDefault::~UnionWithExtensibleEnumWithDefault() {
  DestroyActive();
}


void UnionWithExtensibleEnumWithDefault::set_value(
    ExtensibleEnumWithDefault value) {
  if (tag_ != Tag::VALUE) {
    DestroyActive();
    tag_ = Tag::VALUE;
  }
  data_.value = value;
}

void UnionWithExtensibleEnumWithDefault::DestroyActive() {
  switch (tag_) {

    case Tag::VALUE:

      break;
  }
}
size_t UnionWithExtensibleEnumWithDefault::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::VALUE:
      return mojo::internal::Hash(seed, data_.value);
    default:
      NOTREACHED();
      return seed;
  }
}

bool UnionWithExtensibleEnumWithDefault::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
UnionWithExtensibleEnumWithoutDefault::UnionWithExtensibleEnumWithoutDefault() : tag_(Tag::VALUE) {
  data_.value = ExtensibleEnumWithoutDefault();
}

UnionWithExtensibleEnumWithoutDefault::~UnionWithExtensibleEnumWithoutDefault() {
  DestroyActive();
}


void UnionWithExtensibleEnumWithoutDefault::set_value(
    ExtensibleEnumWithoutDefault value) {
  if (tag_ != Tag::VALUE) {
    DestroyActive();
    tag_ = Tag::VALUE;
  }
  data_.value = value;
}

void UnionWithExtensibleEnumWithoutDefault::DestroyActive() {
  switch (tag_) {

    case Tag::VALUE:

      break;
  }
}
size_t UnionWithExtensibleEnumWithoutDefault::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::VALUE:
      return mojo::internal::Hash(seed, data_.value);
    default:
      NOTREACHED();
      return seed;
  }
}

bool UnionWithExtensibleEnumWithoutDefault::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char TestInterface::Name_[] = "mojo.test.enum_default_unittest.mojom.TestInterface";

class TestInterface_EchoWithDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoWithDefault_ForwardToCallback(
      TestInterface::EchoWithDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoWithDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithDefault_ForwardToCallback);
};

class TestInterface_EchoWithoutDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoWithoutDefault_ForwardToCallback(
      TestInterface::EchoWithoutDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoWithoutDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithoutDefault_ForwardToCallback);
};

class TestInterface_EchoStructWithDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoStructWithDefault_ForwardToCallback(
      TestInterface::EchoStructWithDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoStructWithDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithDefault_ForwardToCallback);
};

class TestInterface_EchoStructWithoutDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoStructWithoutDefault_ForwardToCallback(
      TestInterface::EchoStructWithoutDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoStructWithoutDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithoutDefault_ForwardToCallback);
};

class TestInterface_EchoUnionWithDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoUnionWithDefault_ForwardToCallback(
      TestInterface::EchoUnionWithDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoUnionWithDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithDefault_ForwardToCallback);
};

class TestInterface_EchoUnionWithoutDefault_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestInterface_EchoUnionWithoutDefault_ForwardToCallback(
      TestInterface::EchoUnionWithoutDefaultCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestInterface::EchoUnionWithoutDefaultCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithoutDefault_ForwardToCallback);
};

TestInterfaceProxy::TestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class TestInterfaceProxy_EchoWithDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoWithDefault_Message(
      uint32_t message_flags
      , ExtensibleEnumWithDefault param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoWithDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoWithDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ExtensibleEnumWithDefault param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoWithDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(
      param_in, &params->in);
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoWithDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoWithDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(
      param_in_, &params->in);
  }
  ExtensibleEnumWithDefault param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoWithDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoWithDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoWithDefault(
    ExtensibleEnumWithDefault in_in, EchoWithDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type ExtensibleEnumWithDefault>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoWithDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoWithDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoWithDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterfaceProxy_EchoWithoutDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoWithoutDefault_Message(
      uint32_t message_flags
      , ExtensibleEnumWithoutDefault param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoWithoutDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoWithoutDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ExtensibleEnumWithoutDefault param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoWithoutDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithoutDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(
      param_in, &params->in);
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoWithoutDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoWithoutDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithoutDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(
      param_in_, &params->in);
  }
  ExtensibleEnumWithoutDefault param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoWithoutDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoWithoutDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoWithoutDefault(
    ExtensibleEnumWithoutDefault in_in, EchoWithoutDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type ExtensibleEnumWithoutDefault>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoWithoutDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoWithoutDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoWithoutDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterfaceProxy_EchoStructWithDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoStructWithDefault_Message(
      uint32_t message_flags
      , StructWithExtensibleEnumWithDefaultPtr param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoStructWithDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoStructWithDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      StructWithExtensibleEnumWithDefaultPtr param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoStructWithDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoStructWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->in)::BaseType> in_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultDataView>(
      param_in, in_fragment);
  params->in.Set(
      in_fragment.is_null() ? nullptr : in_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoStructWithDefault request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoStructWithDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoStructWithDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->in)::BaseType> in_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultDataView>(
      param_in_, in_fragment);
  params->in.Set(
      in_fragment.is_null() ? nullptr : in_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoStructWithDefault request");
  }
  StructWithExtensibleEnumWithDefaultPtr param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoStructWithDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoStructWithDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoStructWithDefault(
    StructWithExtensibleEnumWithDefaultPtr in_in, EchoStructWithDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type StructWithExtensibleEnumWithDefaultPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoStructWithDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoStructWithDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoStructWithDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterfaceProxy_EchoStructWithoutDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoStructWithoutDefault_Message(
      uint32_t message_flags
      , StructWithExtensibleEnumWithoutDefaultPtr param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoStructWithoutDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoStructWithoutDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      StructWithExtensibleEnumWithoutDefaultPtr param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoStructWithoutDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoStructWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithoutDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->in)::BaseType> in_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultDataView>(
      param_in, in_fragment);
  params->in.Set(
      in_fragment.is_null() ? nullptr : in_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoStructWithoutDefault request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoStructWithoutDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoStructWithoutDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithoutDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->in)::BaseType> in_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultDataView>(
      param_in_, in_fragment);
  params->in.Set(
      in_fragment.is_null() ? nullptr : in_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoStructWithoutDefault request");
  }
  StructWithExtensibleEnumWithoutDefaultPtr param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoStructWithoutDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoStructWithoutDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoStructWithoutDefault(
    StructWithExtensibleEnumWithoutDefaultPtr in_in, EchoStructWithoutDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type StructWithExtensibleEnumWithoutDefaultPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoStructWithoutDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoStructWithoutDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoStructWithoutDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterfaceProxy_EchoUnionWithDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoUnionWithDefault_Message(
      uint32_t message_flags
      , UnionWithExtensibleEnumWithDefaultPtr param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoUnionWithDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoUnionWithDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      UnionWithExtensibleEnumWithDefaultPtr param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoUnionWithDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoUnionWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->in)>
      in_fragment(params.message());
  in_fragment.Claim(&params->in);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultDataView>(
      param_in, in_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoUnionWithDefault request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoUnionWithDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoUnionWithDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<decltype(params->in)>
      in_fragment(params.message());
  in_fragment.Claim(&params->in);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultDataView>(
      param_in_, in_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoUnionWithDefault request");
  }
  UnionWithExtensibleEnumWithDefaultPtr param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoUnionWithDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoUnionWithDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoUnionWithDefault(
    UnionWithExtensibleEnumWithDefaultPtr in_in, EchoUnionWithDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type UnionWithExtensibleEnumWithDefaultPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoUnionWithDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoUnionWithDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoUnionWithDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterfaceProxy_EchoUnionWithoutDefault_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterfaceProxy_EchoUnionWithoutDefault_Message(
      uint32_t message_flags
      , UnionWithExtensibleEnumWithoutDefaultPtr param_in
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoUnionWithoutDefault_Name,
          message_flags)
      , param_in_(std::move(param_in)){}
  ~TestInterfaceProxy_EchoUnionWithoutDefault_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      UnionWithExtensibleEnumWithoutDefaultPtr param_in) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterfaceProxy_EchoUnionWithoutDefault_Message>(
          kFlags
          , std::move(param_in)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoUnionWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithoutDefault_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->in)>
      in_fragment(params.message());
  in_fragment.Claim(&params->in);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultDataView>(
      param_in, in_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoUnionWithoutDefault request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestInterface* impl, TestInterface::EchoUnionWithoutDefaultCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->EchoUnionWithoutDefault(
        std::move(param_in_), std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithoutDefault_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<decltype(params->in)>
      in_fragment(params.message());
  in_fragment.Claim(&params->in);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultDataView>(
      param_in_, in_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->in.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null in in TestInterface.EchoUnionWithoutDefault request");
  }
  UnionWithExtensibleEnumWithoutDefaultPtr param_in_;

  DISALLOW_COPY_AND_ASSIGN(TestInterfaceProxy_EchoUnionWithoutDefault_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterfaceProxy_EchoUnionWithoutDefault_Message::kMessageTag = {};

void TestInterfaceProxy::EchoUnionWithoutDefault(
    UnionWithExtensibleEnumWithoutDefaultPtr in_in, EchoUnionWithoutDefaultCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefault", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("in"), in_in, 
                        "<value of type UnionWithExtensibleEnumWithoutDefaultPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestInterfaceProxy_EchoUnionWithoutDefault_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_in));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoUnionWithoutDefault");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TestInterface_EchoUnionWithoutDefault_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class TestInterface_EchoWithDefault_ProxyToResponder {
 public:
  static TestInterface::EchoWithDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoWithDefault_ProxyToResponder> proxy(
        new TestInterface_EchoWithDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoWithDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoWithDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoWithDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoWithDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ExtensibleEnumWithDefault in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithDefault_ProxyToResponder);
};
class TestInterface_EchoWithDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoWithDefault_Response_Message(
      uint32_t message_flags
      , ExtensibleEnumWithDefault param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoWithDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoWithDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      ExtensibleEnumWithDefault param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoWithDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(
      param_out, &params->out);
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoWithDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(
      param_out_, &params->out);
  }
  ExtensibleEnumWithDefault param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoWithDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoWithDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoWithDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoWithDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoWithDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ExtensibleEnumWithDefault p_out{};
  TestInterface_EchoWithDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoWithDefault_ProxyToResponder::Run(
    ExtensibleEnumWithDefault in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type ExtensibleEnumWithDefault>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoWithDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoWithDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TestInterface_EchoWithoutDefault_ProxyToResponder {
 public:
  static TestInterface::EchoWithoutDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoWithoutDefault_ProxyToResponder> proxy(
        new TestInterface_EchoWithoutDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoWithoutDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoWithoutDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoWithoutDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoWithoutDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ExtensibleEnumWithoutDefault in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithoutDefault_ProxyToResponder);
};
class TestInterface_EchoWithoutDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoWithoutDefault_Response_Message(
      uint32_t message_flags
      , ExtensibleEnumWithoutDefault param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoWithoutDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoWithoutDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      ExtensibleEnumWithoutDefault param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoWithoutDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithoutDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(
      param_out, &params->out);
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoWithoutDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoWithoutDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(
      param_out_, &params->out);
  }
  ExtensibleEnumWithoutDefault param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoWithoutDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoWithoutDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoWithoutDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoWithoutDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoWithoutDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoWithoutDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ExtensibleEnumWithoutDefault p_out{};
  TestInterface_EchoWithoutDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoWithoutDefault_ProxyToResponder::Run(
    ExtensibleEnumWithoutDefault in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type ExtensibleEnumWithoutDefault>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoWithoutDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoWithoutDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TestInterface_EchoStructWithDefault_ProxyToResponder {
 public:
  static TestInterface::EchoStructWithDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoStructWithDefault_ProxyToResponder> proxy(
        new TestInterface_EchoStructWithDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoStructWithDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoStructWithDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoStructWithDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoStructWithDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      StructWithExtensibleEnumWithDefaultPtr in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithDefault_ProxyToResponder);
};
class TestInterface_EchoStructWithDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoStructWithDefault_Response_Message(
      uint32_t message_flags
      , StructWithExtensibleEnumWithDefaultPtr param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoStructWithDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoStructWithDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      StructWithExtensibleEnumWithDefaultPtr param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoStructWithDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoStructWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->out)::BaseType> out_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultDataView>(
      param_out, out_fragment);
  params->out.Set(
      out_fragment.is_null() ? nullptr : out_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoStructWithDefault response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoStructWithDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->out)::BaseType> out_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultDataView>(
      param_out_, out_fragment);
  params->out.Set(
      out_fragment.is_null() ? nullptr : out_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoStructWithDefault response");
  }
  StructWithExtensibleEnumWithDefaultPtr param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoStructWithDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoStructWithDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoStructWithDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoStructWithDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoStructWithDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  StructWithExtensibleEnumWithDefaultPtr p_out{};
  TestInterface_EchoStructWithDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoStructWithDefault_ProxyToResponder::Run(
    StructWithExtensibleEnumWithDefaultPtr in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type StructWithExtensibleEnumWithDefaultPtr>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoStructWithDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoStructWithDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TestInterface_EchoStructWithoutDefault_ProxyToResponder {
 public:
  static TestInterface::EchoStructWithoutDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoStructWithoutDefault_ProxyToResponder> proxy(
        new TestInterface_EchoStructWithoutDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoStructWithoutDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoStructWithoutDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoStructWithoutDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoStructWithoutDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      StructWithExtensibleEnumWithoutDefaultPtr in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithoutDefault_ProxyToResponder);
};
class TestInterface_EchoStructWithoutDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoStructWithoutDefault_Response_Message(
      uint32_t message_flags
      , StructWithExtensibleEnumWithoutDefaultPtr param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoStructWithoutDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoStructWithoutDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      StructWithExtensibleEnumWithoutDefaultPtr param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoStructWithoutDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoStructWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithoutDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->out)::BaseType> out_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultDataView>(
      param_out, out_fragment);
  params->out.Set(
      out_fragment.is_null() ? nullptr : out_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoStructWithoutDefault response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoStructWithoutDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoStructWithoutDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->out)::BaseType> out_fragment(
          params.message());
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultDataView>(
      param_out_, out_fragment);
  params->out.Set(
      out_fragment.is_null() ? nullptr : out_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoStructWithoutDefault response");
  }
  StructWithExtensibleEnumWithoutDefaultPtr param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoStructWithoutDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoStructWithoutDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoStructWithoutDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoStructWithoutDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoStructWithoutDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoStructWithoutDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  StructWithExtensibleEnumWithoutDefaultPtr p_out{};
  TestInterface_EchoStructWithoutDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoStructWithoutDefault_ProxyToResponder::Run(
    StructWithExtensibleEnumWithoutDefaultPtr in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type StructWithExtensibleEnumWithoutDefaultPtr>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoStructWithoutDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoStructWithoutDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TestInterface_EchoUnionWithDefault_ProxyToResponder {
 public:
  static TestInterface::EchoUnionWithDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoUnionWithDefault_ProxyToResponder> proxy(
        new TestInterface_EchoUnionWithDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoUnionWithDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoUnionWithDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoUnionWithDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoUnionWithDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      UnionWithExtensibleEnumWithDefaultPtr in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithDefault_ProxyToResponder);
};
class TestInterface_EchoUnionWithDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoUnionWithDefault_Response_Message(
      uint32_t message_flags
      , UnionWithExtensibleEnumWithDefaultPtr param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoUnionWithDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoUnionWithDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      UnionWithExtensibleEnumWithDefaultPtr param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoUnionWithDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoUnionWithDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->out)>
      out_fragment(params.message());
  out_fragment.Claim(&params->out);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultDataView>(
      param_out, out_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoUnionWithDefault response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoUnionWithDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<decltype(params->out)>
      out_fragment(params.message());
  out_fragment.Claim(&params->out);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultDataView>(
      param_out_, out_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoUnionWithDefault response");
  }
  UnionWithExtensibleEnumWithDefaultPtr param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoUnionWithDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoUnionWithDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoUnionWithDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoUnionWithDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoUnionWithDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  UnionWithExtensibleEnumWithDefaultPtr p_out{};
  TestInterface_EchoUnionWithDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoUnionWithDefault_ProxyToResponder::Run(
    UnionWithExtensibleEnumWithDefaultPtr in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type UnionWithExtensibleEnumWithDefaultPtr>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoUnionWithDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoUnionWithDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TestInterface_EchoUnionWithoutDefault_ProxyToResponder {
 public:
  static TestInterface::EchoUnionWithoutDefaultCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TestInterface_EchoUnionWithoutDefault_ProxyToResponder> proxy(
        new TestInterface_EchoUnionWithoutDefault_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TestInterface_EchoUnionWithoutDefault_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TestInterface_EchoUnionWithoutDefault_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TestInterface_EchoUnionWithoutDefault_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TestInterface::EchoUnionWithoutDefaultCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      UnionWithExtensibleEnumWithoutDefaultPtr in_out);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithoutDefault_ProxyToResponder);
};
class TestInterface_EchoUnionWithoutDefault_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestInterface_EchoUnionWithoutDefault_Response_Message(
      uint32_t message_flags
      , UnionWithExtensibleEnumWithoutDefaultPtr param_out
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestInterface_EchoUnionWithoutDefault_Name,
          message_flags)
      , param_out_(std::move(param_out)){}
  ~TestInterface_EchoUnionWithoutDefault_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      UnionWithExtensibleEnumWithoutDefaultPtr param_out) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestInterface_EchoUnionWithoutDefault_Response_Message>(
          kFlags
          , std::move(param_out)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestInterface_EchoUnionWithoutDefault_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->out)>
      out_fragment(params.message());
  out_fragment.Claim(&params->out);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultDataView>(
      param_out, out_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoUnionWithoutDefault response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                TestInterface::EchoUnionWithoutDefaultCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_out_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::enum_default_unittest::mojom::internal::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<decltype(params->out)>
      out_fragment(params.message());
  out_fragment.Claim(&params->out);
  mojo::internal::Serialize<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultDataView>(
      param_out_, out_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->out.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null out in TestInterface.EchoUnionWithoutDefault response");
  }
  UnionWithExtensibleEnumWithoutDefaultPtr param_out_;

  DISALLOW_COPY_AND_ASSIGN(TestInterface_EchoUnionWithoutDefault_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestInterface_EchoUnionWithoutDefault_Response_Message::kMessageTag = {};

bool TestInterface_EchoUnionWithoutDefault_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefaultCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<TestInterface_EchoUnionWithoutDefault_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  UnionWithExtensibleEnumWithoutDefaultPtr p_out{};
  TestInterface_EchoUnionWithoutDefault_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TestInterface::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_out));
  return true;
}

void TestInterface_EchoUnionWithoutDefault_ProxyToResponder::Run(
    UnionWithExtensibleEnumWithoutDefaultPtr in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefaultCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out, 
                        "<value of type UnionWithExtensibleEnumWithoutDefaultPtr>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = TestInterface_EchoUnionWithoutDefault_Response_Message::Build(kSerialize, is_sync_, std::move(in_out));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefaultCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestInterface::Name_);
  message.set_method_name("EchoUnionWithoutDefault");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool TestInterfaceStubDispatch::Accept(
    TestInterface* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kTestInterface_EchoWithDefault_Name: {
      break;
    }
    case internal::kTestInterface_EchoWithoutDefault_Name: {
      break;
    }
    case internal::kTestInterface_EchoStructWithDefault_Name: {
      break;
    }
    case internal::kTestInterface_EchoStructWithoutDefault_Name: {
      break;
    }
    case internal::kTestInterface_EchoUnionWithDefault_Name: {
      break;
    }
    case internal::kTestInterface_EchoUnionWithoutDefault_Name: {
      break;
    }
  }
  return false;
}

// static
bool TestInterfaceStubDispatch::AcceptWithResponder(
    TestInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTestInterface_EchoWithDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoWithDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoWithDefaultCallback callback =
              TestInterface_EchoWithDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoWithDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoWithDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ExtensibleEnumWithDefault p_in{};
      TestInterface_EchoWithDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 0, false);
        return false;
      }
      TestInterface::EchoWithDefaultCallback callback =
          TestInterface_EchoWithDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoWithDefault(
std::move(p_in), std::move(callback));
      return true;
    }
    case internal::kTestInterface_EchoWithoutDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoWithoutDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoWithoutDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoWithoutDefaultCallback callback =
              TestInterface_EchoWithoutDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoWithoutDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoWithoutDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ExtensibleEnumWithoutDefault p_in{};
      TestInterface_EchoWithoutDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 1, false);
        return false;
      }
      TestInterface::EchoWithoutDefaultCallback callback =
          TestInterface_EchoWithoutDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoWithoutDefault(
std::move(p_in), std::move(callback));
      return true;
    }
    case internal::kTestInterface_EchoStructWithDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoStructWithDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoStructWithDefaultCallback callback =
              TestInterface_EchoStructWithDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoStructWithDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoStructWithDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      StructWithExtensibleEnumWithDefaultPtr p_in{};
      TestInterface_EchoStructWithDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 2, false);
        return false;
      }
      TestInterface::EchoStructWithDefaultCallback callback =
          TestInterface_EchoStructWithDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoStructWithDefault(
std::move(p_in), std::move(callback));
      return true;
    }
    case internal::kTestInterface_EchoStructWithoutDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoStructWithoutDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoStructWithoutDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoStructWithoutDefaultCallback callback =
              TestInterface_EchoStructWithoutDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoStructWithoutDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoStructWithoutDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      StructWithExtensibleEnumWithoutDefaultPtr p_in{};
      TestInterface_EchoStructWithoutDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 3, false);
        return false;
      }
      TestInterface::EchoStructWithoutDefaultCallback callback =
          TestInterface_EchoStructWithoutDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoStructWithoutDefault(
std::move(p_in), std::move(callback));
      return true;
    }
    case internal::kTestInterface_EchoUnionWithDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoUnionWithDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoUnionWithDefaultCallback callback =
              TestInterface_EchoUnionWithDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoUnionWithDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoUnionWithDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      UnionWithExtensibleEnumWithDefaultPtr p_in{};
      TestInterface_EchoUnionWithDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 4, false);
        return false;
      }
      TestInterface::EchoUnionWithDefaultCallback callback =
          TestInterface_EchoUnionWithDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoUnionWithDefault(
std::move(p_in), std::move(callback));
      return true;
    }
    case internal::kTestInterface_EchoUnionWithoutDefault_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefault",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::enum_default_unittest::mojom::TestInterface::EchoUnionWithoutDefault");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestInterfaceProxy_EchoUnionWithoutDefault_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          TestInterface::EchoUnionWithoutDefaultCallback callback =
              TestInterface_EchoUnionWithoutDefault_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::TestInterface_EchoUnionWithoutDefault_Params_Data* params =
          reinterpret_cast<
              internal::TestInterface_EchoUnionWithoutDefault_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      UnionWithExtensibleEnumWithoutDefaultPtr p_in{};
      TestInterface_EchoUnionWithoutDefault_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIn(&p_in))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestInterface::Name_, 5, false);
        return false;
      }
      TestInterface::EchoUnionWithoutDefaultCallback callback =
          TestInterface_EchoUnionWithoutDefault_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EchoUnionWithoutDefault(
std::move(p_in), std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTestInterfaceValidationInfo[] = {
    {internal::kTestInterface_EchoWithDefault_Name,
     {&internal::TestInterface_EchoWithDefault_Params_Data::Validate,
      &internal::TestInterface_EchoWithDefault_ResponseParams_Data::Validate}},
    {internal::kTestInterface_EchoWithoutDefault_Name,
     {&internal::TestInterface_EchoWithoutDefault_Params_Data::Validate,
      &internal::TestInterface_EchoWithoutDefault_ResponseParams_Data::Validate}},
    {internal::kTestInterface_EchoStructWithDefault_Name,
     {&internal::TestInterface_EchoStructWithDefault_Params_Data::Validate,
      &internal::TestInterface_EchoStructWithDefault_ResponseParams_Data::Validate}},
    {internal::kTestInterface_EchoStructWithoutDefault_Name,
     {&internal::TestInterface_EchoStructWithoutDefault_Params_Data::Validate,
      &internal::TestInterface_EchoStructWithoutDefault_ResponseParams_Data::Validate}},
    {internal::kTestInterface_EchoUnionWithDefault_Name,
     {&internal::TestInterface_EchoUnionWithDefault_Params_Data::Validate,
      &internal::TestInterface_EchoUnionWithDefault_ResponseParams_Data::Validate}},
    {internal::kTestInterface_EchoUnionWithoutDefault_Name,
     {&internal::TestInterface_EchoUnionWithoutDefault_Params_Data::Validate,
      &internal::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data::Validate}},
};

bool TestInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::enum_default_unittest::mojom::TestInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTestInterfaceValidationInfo);
}

bool TestInterfaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::enum_default_unittest::mojom::TestInterface::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kTestInterfaceValidationInfo);

}
}  // namespace mojom
}  // namespace enum_default_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {


// static
bool StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::DataView, ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::DataView input,
    ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr* output) {
  bool success = true;
  ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr result(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::New());
  
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::DataView, ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::DataView input,
    ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr* output) {
  bool success = true;
  ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr result(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::New());
  
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::DataView, ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::DataView input,
    ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr* output) {
  bool success = true;
  ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr result(::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::New());
  
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithInitializer::DataView, ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::StructWithInitializer::DataView input,
    ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr* output) {
  bool success = true;
  ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr result(::mojo::test::enum_default_unittest::mojom::StructWithInitializer::New());
  
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault::DataView, ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault::DataView input,
    ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr* output) {
  using UnionType = ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::VALUE: {
      ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault result_value;
      if (!input.ReadValue(&result_value))
        return false;

      *output = UnionType::NewValue(result_value);
      break;
    }
    default:
      return false;
  }
  return true;
}

// static
bool UnionTraits<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault::DataView, ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr>::Read(
    ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault::DataView input,
    ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr* output) {
  using UnionType = ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::VALUE: {
      ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault result_value;
      if (!input.ReadValue(&result_value))
        return false;

      *output = UnionType::NewValue(result_value);
      break;
    }
    default:
      return false;
  }
  return true;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif