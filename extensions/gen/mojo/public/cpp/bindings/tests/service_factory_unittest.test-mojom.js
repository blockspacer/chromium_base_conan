// mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.serviceFactoryUnittest.mojom');



  function TestService1_GetIdentity_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService1_GetIdentity_Params.prototype.initDefaults_ = function() {
  };
  TestService1_GetIdentity_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService1_GetIdentity_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService1_GetIdentity_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService1_GetIdentity_Params.decode = function(decoder) {
    var packed;
    var val = new TestService1_GetIdentity_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService1_GetIdentity_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService1_GetIdentity_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService1_GetIdentity_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService1_GetIdentity_ResponseParams.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  TestService1_GetIdentity_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService1_GetIdentity_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestService1_GetIdentity_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService1_GetIdentity_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService1_GetIdentity_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestService1_GetIdentity_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService1_GetIdentity_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestService1_Quit_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService1_Quit_Params.prototype.initDefaults_ = function() {
  };
  TestService1_Quit_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService1_Quit_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService1_Quit_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService1_Quit_Params.decode = function(decoder) {
    var packed;
    var val = new TestService1_Quit_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService1_Quit_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService1_Quit_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService2_GetIdentity_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService2_GetIdentity_Params.prototype.initDefaults_ = function() {
  };
  TestService2_GetIdentity_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService2_GetIdentity_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService2_GetIdentity_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService2_GetIdentity_Params.decode = function(decoder) {
    var packed;
    var val = new TestService2_GetIdentity_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService2_GetIdentity_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService2_GetIdentity_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService2_GetIdentity_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService2_GetIdentity_ResponseParams.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  TestService2_GetIdentity_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService2_GetIdentity_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestService2_GetIdentity_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService2_GetIdentity_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService2_GetIdentity_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestService2_GetIdentity_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService2_GetIdentity_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kTestService1_GetIdentity_Name = 1928453296;
  var kTestService1_Quit_Name = 2091822302;

  function TestService1Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestService1,
                                                   handleOrPtrInfo);
  }

  function TestService1AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestService1, associatedInterfacePtrInfo);
  }

  TestService1AssociatedPtr.prototype =
      Object.create(TestService1Ptr.prototype);
  TestService1AssociatedPtr.prototype.constructor =
      TestService1AssociatedPtr;

  function TestService1Proxy(receiver) {
    this.receiver_ = receiver;
  }
  TestService1Ptr.prototype.getIdentity = function() {
    return TestService1Proxy.prototype.getIdentity
        .apply(this.ptr.getProxy(), arguments);
  };

  TestService1Proxy.prototype.getIdentity = function() {
    var params_ = new TestService1_GetIdentity_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService1_GetIdentity_Name,
          codec.align(TestService1_GetIdentity_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService1_GetIdentity_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService1_GetIdentity_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestService1Ptr.prototype.quit = function() {
    return TestService1Proxy.prototype.quit
        .apply(this.ptr.getProxy(), arguments);
  };

  TestService1Proxy.prototype.quit = function() {
    var params_ = new TestService1_Quit_Params();
    var builder = new codec.MessageV0Builder(
        kTestService1_Quit_Name,
        codec.align(TestService1_Quit_Params.encodedSize));
    builder.encodeStruct(TestService1_Quit_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestService1Stub(delegate) {
    this.delegate_ = delegate;
  }
  TestService1Stub.prototype.getIdentity = function() {
    return this.delegate_ && this.delegate_.getIdentity && this.delegate_.getIdentity();
  }
  TestService1Stub.prototype.quit = function() {
    return this.delegate_ && this.delegate_.quit && this.delegate_.quit();
  }

  TestService1Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestService1_Quit_Name:
      var params = reader.decodeStruct(TestService1_Quit_Params);
      this.quit();
      return true;
    default:
      return false;
    }
  };

  TestService1Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestService1_GetIdentity_Name:
      var params = reader.decodeStruct(TestService1_GetIdentity_Params);
      this.getIdentity().then(function(response) {
        var responseParams =
            new TestService1_GetIdentity_ResponseParams();
        responseParams.id = response.id;
        var builder = new codec.MessageV1Builder(
            kTestService1_GetIdentity_Name,
            codec.align(TestService1_GetIdentity_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService1_GetIdentity_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestService1Request(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestService1_GetIdentity_Name:
        if (message.expectsResponse())
          paramsClass = TestService1_GetIdentity_Params;
      break;
      case kTestService1_Quit_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestService1_Quit_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestService1Response(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestService1_GetIdentity_Name:
        if (message.isResponse())
          paramsClass = TestService1_GetIdentity_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestService1 = {
    name: 'mojo.test.service_factory_unittest.mojom.TestService1',
    kVersion: 0,
    ptrClass: TestService1Ptr,
    proxyClass: TestService1Proxy,
    stubClass: TestService1Stub,
    validateRequest: validateTestService1Request,
    validateResponse: validateTestService1Response,
  };
  TestService1Stub.prototype.validator = validateTestService1Request;
  TestService1Proxy.prototype.validator = validateTestService1Response;
  var kTestService2_GetIdentity_Name = 334898415;

  function TestService2Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestService2,
                                                   handleOrPtrInfo);
  }

  function TestService2AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestService2, associatedInterfacePtrInfo);
  }

  TestService2AssociatedPtr.prototype =
      Object.create(TestService2Ptr.prototype);
  TestService2AssociatedPtr.prototype.constructor =
      TestService2AssociatedPtr;

  function TestService2Proxy(receiver) {
    this.receiver_ = receiver;
  }
  TestService2Ptr.prototype.getIdentity = function() {
    return TestService2Proxy.prototype.getIdentity
        .apply(this.ptr.getProxy(), arguments);
  };

  TestService2Proxy.prototype.getIdentity = function() {
    var params_ = new TestService2_GetIdentity_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService2_GetIdentity_Name,
          codec.align(TestService2_GetIdentity_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService2_GetIdentity_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService2_GetIdentity_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestService2Stub(delegate) {
    this.delegate_ = delegate;
  }
  TestService2Stub.prototype.getIdentity = function() {
    return this.delegate_ && this.delegate_.getIdentity && this.delegate_.getIdentity();
  }

  TestService2Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestService2Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestService2_GetIdentity_Name:
      var params = reader.decodeStruct(TestService2_GetIdentity_Params);
      this.getIdentity().then(function(response) {
        var responseParams =
            new TestService2_GetIdentity_ResponseParams();
        responseParams.id = response.id;
        var builder = new codec.MessageV1Builder(
            kTestService2_GetIdentity_Name,
            codec.align(TestService2_GetIdentity_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService2_GetIdentity_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestService2Request(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestService2_GetIdentity_Name:
        if (message.expectsResponse())
          paramsClass = TestService2_GetIdentity_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestService2Response(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestService2_GetIdentity_Name:
        if (message.isResponse())
          paramsClass = TestService2_GetIdentity_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestService2 = {
    name: 'mojo.test.service_factory_unittest.mojom.TestService2',
    kVersion: 0,
    ptrClass: TestService2Ptr,
    proxyClass: TestService2Proxy,
    stubClass: TestService2Stub,
    validateRequest: validateTestService2Request,
    validateResponse: validateTestService2Response,
  };
  TestService2Stub.prototype.validator = validateTestService2Request;
  TestService2Proxy.prototype.validator = validateTestService2Response;

  function TestService3Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestService3,
                                                   handleOrPtrInfo);
  }

  function TestService3AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestService3, associatedInterfacePtrInfo);
  }

  TestService3AssociatedPtr.prototype =
      Object.create(TestService3Ptr.prototype);
  TestService3AssociatedPtr.prototype.constructor =
      TestService3AssociatedPtr;

  function TestService3Proxy(receiver) {
    this.receiver_ = receiver;
  }

  function TestService3Stub(delegate) {
    this.delegate_ = delegate;
  }

  TestService3Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestService3Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestService3Request(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateTestService3Response(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestService3 = {
    name: 'mojo.test.service_factory_unittest.mojom.TestService3',
    kVersion: 0,
    ptrClass: TestService3Ptr,
    proxyClass: TestService3Proxy,
    stubClass: TestService3Stub,
    validateRequest: validateTestService3Request,
    validateResponse: null,
  };
  TestService3Stub.prototype.validator = validateTestService3Request;
  TestService3Proxy.prototype.validator = null;
  exports.TestService1 = TestService1;
  exports.TestService1Ptr = TestService1Ptr;
  exports.TestService1AssociatedPtr = TestService1AssociatedPtr;
  exports.TestService2 = TestService2;
  exports.TestService2Ptr = TestService2Ptr;
  exports.TestService2AssociatedPtr = TestService2AssociatedPtr;
  exports.TestService3 = TestService3;
  exports.TestService3Ptr = TestService3Ptr;
  exports.TestService3AssociatedPtr = TestService3AssociatedPtr;
})();