// mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_MODULE_TO_DOWNGRADE_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_MODULE_TO_DOWNGRADE_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace mojom_types_downgrader_unittest {
namespace mojom {
namespace blink {
const char Foo::Name_[] = "mojo.test.mojom_types_downgrader_unittest.mojom.Foo";

FooProxy::FooProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FooProxy::DummyMethod(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::Foo::DummyMethod");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFoo_DummyMethod_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::Foo_DummyMethod_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Foo::Name_);
  message.set_method_name("DummyMethod");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool FooStubDispatch::Accept(
    Foo* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFoo_DummyMethod_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::Foo::DummyMethod",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::Foo::DummyMethod");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Foo_DummyMethod_Params_Data* params =
          reinterpret_cast<internal::Foo_DummyMethod_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      Foo_DummyMethod_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Foo::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DummyMethod();
      return true;
    }
  }
  return false;
}

// static
bool FooStubDispatch::AcceptWithResponder(
    Foo* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kFoo_DummyMethod_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kFooValidationInfo[] = {
    {internal::kFoo_DummyMethod_Name,
     {&internal::Foo_DummyMethod_Params_Data::Validate,
      nullptr /* no response */}},
};

bool FooRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::mojom_types_downgrader_unittest::mojom::blink::Foo::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kFooValidationInfo);
}

const char DowngradedTestInterface::Name_[] = "mojo.test.mojom_types_downgrader_unittest.mojom.DowngradedTestInterface";

class DowngradedTestInterface_MethodWithResponseCallbackOneLine_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ForwardToCallback(
      DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ForwardToCallback);
};

class DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ForwardToCallback(
      DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ForwardToCallback);
};

DowngradedTestInterfaceProxy::DowngradedTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DowngradedTestInterfaceProxy::InterfaceRequest(
    FooRequest in_request) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfaceRequest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request"), in_request, 
                        "<value of type FooRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_InterfaceRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_InterfaceRequest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_request, &params->request, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->request),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid request in DowngradedTestInterface.InterfaceRequest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("InterfaceRequest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::InterfacePtr(
    FooPtr in_ptr) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfacePtr", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ptr"), in_ptr, 
                        "<value of type FooPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_InterfacePtr_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_InterfacePtr_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_ptr, &params->ptr, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->ptr),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid ptr in DowngradedTestInterface.InterfacePtr request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("InterfacePtr");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::AssociatedInterfacePtrInfo(
    FooAssociatedPtrInfo in_associated_ptr_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfacePtrInfo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_ptr_info"), in_associated_ptr_info, 
                        "<value of type FooAssociatedPtrInfo>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_AssociatedInterfacePtrInfo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedPtrInfoDataView>(
      in_associated_ptr_info, &params->associated_ptr_info, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_ptr_info),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_ptr_info in DowngradedTestInterface.AssociatedInterfacePtrInfo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("AssociatedInterfacePtrInfo");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::AssociatedInterfaceRequest(
    FooAssociatedRequest in_associated_request) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfaceRequest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_request"), in_associated_request, 
                        "<value of type FooAssociatedRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_AssociatedInterfaceRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_AssociatedInterfaceRequest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedRequestDataView>(
      in_associated_request, &params->associated_request, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_request),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_request in DowngradedTestInterface.AssociatedInterfaceRequest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("AssociatedInterfaceRequest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::PendingReceiver(
    FooRequest in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingReceiver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_PendingReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_PendingReceiver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.PendingReceiver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("PendingReceiver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::PendingRemote(
    FooPtr in_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingRemote", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_PendingRemote_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_PendingRemote_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.PendingRemote request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("PendingRemote");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::PendingAssociatedReceiver(
    FooAssociatedRequest in_associated_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedReceiver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_remote"), in_associated_remote, 
                        "<value of type FooAssociatedRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_PendingAssociatedReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_PendingAssociatedReceiver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedRequestDataView>(
      in_associated_remote, &params->associated_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_remote in DowngradedTestInterface.PendingAssociatedReceiver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("PendingAssociatedReceiver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::PendingAssociatedRemote(
    FooAssociatedPtrInfo in_associated_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedRemote", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_receiver"), in_associated_receiver, 
                        "<value of type FooAssociatedPtrInfo>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_PendingAssociatedRemote_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_PendingAssociatedRemote_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedPtrInfoDataView>(
      in_associated_receiver, &params->associated_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_receiver in DowngradedTestInterface.PendingAssociatedRemote request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("PendingAssociatedRemote");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::MultipleParams2(
    FooPtr in_remote, FooRequest in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams2", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MultipleParams2_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MultipleParams2_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.MultipleParams2 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.MultipleParams2 request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MultipleParams2");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::MultipleParams3(
    FooPtr in_remote, FooRequest in_receiver, FooAssociatedPtrInfo in_associated_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams3", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_remote"), in_associated_remote, 
                        "<value of type FooAssociatedPtrInfo>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MultipleParams3_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MultipleParams3_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.MultipleParams3 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.MultipleParams3 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedPtrInfoDataView>(
      in_associated_remote, &params->associated_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_remote in DowngradedTestInterface.MultipleParams3 request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MultipleParams3");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::MultipleParams4(
    FooPtr in_remote, FooRequest in_receiver, FooAssociatedPtrInfo in_associated_remote, FooAssociatedRequest in_associated_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams4", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_remote"), in_associated_remote, 
                        "<value of type FooAssociatedPtrInfo>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_receiver"), in_associated_receiver, 
                        "<value of type FooAssociatedRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MultipleParams4_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MultipleParams4_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.MultipleParams4 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.MultipleParams4 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedPtrInfoDataView>(
      in_associated_remote, &params->associated_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_remote in DowngradedTestInterface.MultipleParams4 request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooAssociatedRequestDataView>(
      in_associated_receiver, &params->associated_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->associated_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid associated_receiver in DowngradedTestInterface.MultipleParams4 request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MultipleParams4");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::MethodWithResponseCallbackOneLine(
    FooPtr in_data, MethodWithResponseCallbackOneLineCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLine", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data, 
                        "<value of type FooPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_data, &params->data, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->data),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid data in DowngradedTestInterface.MethodWithResponseCallbackOneLine request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MethodWithResponseCallbackOneLine");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DowngradedTestInterface_MethodWithResponseCallbackOneLine_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DowngradedTestInterfaceProxy::MethodWithResponseCallbackTwoLines(
    FooPtr in_data, MethodWithResponseCallbackTwoLinesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLines", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data, 
                        "<value of type FooPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_data, &params->data, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->data),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid data in DowngradedTestInterface.MethodWithResponseCallbackTwoLines request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MethodWithResponseCallbackTwoLines");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DowngradedTestInterfaceProxy::OddSpaces(
    FooPtr in_remote, FooRequest in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpaces", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_OddSpaces_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_OddSpaces_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.OddSpaces request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.OddSpaces request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("OddSpaces");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DowngradedTestInterfaceProxy::OddSpacesAndLineBreak(
    FooPtr in_remote, FooRequest in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpacesAndLineBreak", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote"), in_remote, 
                        "<value of type FooPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_OddSpacesAndLineBreak_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_OddSpacesAndLineBreak_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooPtrDataView>(
      in_remote, &params->remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid remote in DowngradedTestInterface.OddSpacesAndLineBreak request");
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DowngradedTestInterface.OddSpacesAndLineBreak request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("OddSpacesAndLineBreak");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder {
 public:
  static DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder> proxy(
        new DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder);
};

bool DowngradedTestInterface_MethodWithResponseCallbackOneLine_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DowngradedTestInterface::Name_, 11, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams_Data> params(
          message);
  params.Allocate();

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MethodWithResponseCallbackOneLine");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder {
 public:
  static DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder> proxy(
        new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      FooRequest in_receiver);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder);
};

bool DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback",
               "message", message->name());
#endif

  DCHECK(message->is_serialized());
  internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  FooRequest p_receiver{};
  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_receiver =
        input_data_view.TakeReceiver<decltype(p_receiver)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DowngradedTestInterface::Name_, 12, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_receiver));
  return true;
}

void DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder::Run(
    FooRequest in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type FooRequest>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::mojom_types_downgrader_unittest::mojom::internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::mojo::test::mojom_types_downgrader_unittest::mojom::FooRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in ");

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DowngradedTestInterface::Name_);
  message.set_method_name("MethodWithResponseCallbackTwoLines");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DowngradedTestInterfaceStubDispatch::Accept(
    DowngradedTestInterface* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDowngradedTestInterface_InterfaceRequest_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfaceRequest",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfaceRequest");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_InterfaceRequest_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_InterfaceRequest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooRequest p_request{};
      DowngradedTestInterface_InterfaceRequest_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_request =
            input_data_view.TakeRequest<decltype(p_request)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->InterfaceRequest(
std::move(p_request));
      return true;
    }
    case internal::kDowngradedTestInterface_InterfacePtr_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfacePtr",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::InterfacePtr");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_InterfacePtr_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_InterfacePtr_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_ptr{};
      DowngradedTestInterface_InterfacePtr_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_ptr =
            input_data_view.TakePtr<decltype(p_ptr)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->InterfacePtr(
std::move(p_ptr));
      return true;
    }
    case internal::kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfacePtrInfo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfacePtrInfo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_AssociatedInterfacePtrInfo_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_AssociatedInterfacePtrInfo_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooAssociatedPtrInfo p_associated_ptr_info{};
      DowngradedTestInterface_AssociatedInterfacePtrInfo_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_associated_ptr_info =
            input_data_view.TakeAssociatedPtrInfo<decltype(p_associated_ptr_info)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AssociatedInterfacePtrInfo(
std::move(p_associated_ptr_info));
      return true;
    }
    case internal::kDowngradedTestInterface_AssociatedInterfaceRequest_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfaceRequest",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::AssociatedInterfaceRequest");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_AssociatedInterfaceRequest_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_AssociatedInterfaceRequest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooAssociatedRequest p_associated_request{};
      DowngradedTestInterface_AssociatedInterfaceRequest_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_associated_request =
            input_data_view.TakeAssociatedRequest<decltype(p_associated_request)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AssociatedInterfaceRequest(
std::move(p_associated_request));
      return true;
    }
    case internal::kDowngradedTestInterface_PendingReceiver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingReceiver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingReceiver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_PendingReceiver_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_PendingReceiver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooRequest p_receiver{};
      DowngradedTestInterface_PendingReceiver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PendingReceiver(
std::move(p_receiver));
      return true;
    }
    case internal::kDowngradedTestInterface_PendingRemote_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingRemote",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingRemote");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_PendingRemote_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_PendingRemote_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      DowngradedTestInterface_PendingRemote_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PendingRemote(
std::move(p_remote));
      return true;
    }
    case internal::kDowngradedTestInterface_PendingAssociatedReceiver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedReceiver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedReceiver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_PendingAssociatedReceiver_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_PendingAssociatedReceiver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooAssociatedRequest p_associated_remote{};
      DowngradedTestInterface_PendingAssociatedReceiver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_associated_remote =
            input_data_view.TakeAssociatedRemote<decltype(p_associated_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PendingAssociatedReceiver(
std::move(p_associated_remote));
      return true;
    }
    case internal::kDowngradedTestInterface_PendingAssociatedRemote_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedRemote",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::PendingAssociatedRemote");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_PendingAssociatedRemote_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_PendingAssociatedRemote_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooAssociatedPtrInfo p_associated_receiver{};
      DowngradedTestInterface_PendingAssociatedRemote_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_associated_receiver =
            input_data_view.TakeAssociatedReceiver<decltype(p_associated_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PendingAssociatedRemote(
std::move(p_associated_receiver));
      return true;
    }
    case internal::kDowngradedTestInterface_MultipleParams2_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams2",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams2");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_MultipleParams2_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_MultipleParams2_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      FooRequest p_receiver{};
      DowngradedTestInterface_MultipleParams2_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MultipleParams2(
std::move(p_remote), 
std::move(p_receiver));
      return true;
    }
    case internal::kDowngradedTestInterface_MultipleParams3_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams3",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams3");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_MultipleParams3_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_MultipleParams3_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      FooRequest p_receiver{};
      FooAssociatedPtrInfo p_associated_remote{};
      DowngradedTestInterface_MultipleParams3_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_associated_remote =
            input_data_view.TakeAssociatedRemote<decltype(p_associated_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MultipleParams3(
std::move(p_remote), 
std::move(p_receiver), 
std::move(p_associated_remote));
      return true;
    }
    case internal::kDowngradedTestInterface_MultipleParams4_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams4",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MultipleParams4");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_MultipleParams4_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_MultipleParams4_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      FooRequest p_receiver{};
      FooAssociatedPtrInfo p_associated_remote{};
      FooAssociatedRequest p_associated_receiver{};
      DowngradedTestInterface_MultipleParams4_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_associated_remote =
            input_data_view.TakeAssociatedRemote<decltype(p_associated_remote)>();
      }
      if (success) {
        p_associated_receiver =
            input_data_view.TakeAssociatedReceiver<decltype(p_associated_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MultipleParams4(
std::move(p_remote), 
std::move(p_receiver), 
std::move(p_associated_remote), 
std::move(p_associated_receiver));
      return true;
    }
    case internal::kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_OddSpaces_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpaces",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpaces");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_OddSpaces_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_OddSpaces_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      FooRequest p_receiver{};
      DowngradedTestInterface_OddSpaces_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OddSpaces(
std::move(p_remote), 
std::move(p_receiver));
      return true;
    }
    case internal::kDowngradedTestInterface_OddSpacesAndLineBreak_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpacesAndLineBreak",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::OddSpacesAndLineBreak");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DowngradedTestInterface_OddSpacesAndLineBreak_Params_Data* params =
          reinterpret_cast<internal::DowngradedTestInterface_OddSpacesAndLineBreak_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FooPtr p_remote{};
      FooRequest p_receiver{};
      DowngradedTestInterface_OddSpacesAndLineBreak_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote =
            input_data_view.TakeRemote<decltype(p_remote)>();
      }
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OddSpacesAndLineBreak(
std::move(p_remote), 
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool DowngradedTestInterfaceStubDispatch::AcceptWithResponder(
    DowngradedTestInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kDowngradedTestInterface_InterfaceRequest_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_InterfacePtr_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_AssociatedInterfaceRequest_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_PendingReceiver_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_PendingRemote_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_PendingAssociatedReceiver_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_PendingAssociatedRemote_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_MultipleParams2_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_MultipleParams3_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_MultipleParams4_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLine",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackOneLine");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params_Data* params =
          reinterpret_cast<
              internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FooPtr p_data{};
      DowngradedTestInterface_MethodWithResponseCallbackOneLine_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_data =
            input_data_view.TakeData<decltype(p_data)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 11, false);
        return false;
      }
      DowngradedTestInterface::MethodWithResponseCallbackOneLineCallback callback =
          DowngradedTestInterface_MethodWithResponseCallbackOneLine_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MethodWithResponseCallbackOneLine(
std::move(p_data), std::move(callback));
      return true;
    }
    case internal::kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLines",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::mojom_types_downgrader_unittest::mojom::DowngradedTestInterface::MethodWithResponseCallbackTwoLines");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params_Data* params =
          reinterpret_cast<
              internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      FooPtr p_data{};
      DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_data =
            input_data_view.TakeData<decltype(p_data)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DowngradedTestInterface::Name_, 12, false);
        return false;
      }
      DowngradedTestInterface::MethodWithResponseCallbackTwoLinesCallback callback =
          DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MethodWithResponseCallbackTwoLines(
std::move(p_data), std::move(callback));
      return true;
    }
    case internal::kDowngradedTestInterface_OddSpaces_Name: {
      break;
    }
    case internal::kDowngradedTestInterface_OddSpacesAndLineBreak_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kDowngradedTestInterfaceValidationInfo[] = {
    {internal::kDowngradedTestInterface_InterfaceRequest_Name,
     {&internal::DowngradedTestInterface_InterfaceRequest_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_InterfacePtr_Name,
     {&internal::DowngradedTestInterface_InterfacePtr_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name,
     {&internal::DowngradedTestInterface_AssociatedInterfacePtrInfo_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_AssociatedInterfaceRequest_Name,
     {&internal::DowngradedTestInterface_AssociatedInterfaceRequest_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_PendingReceiver_Name,
     {&internal::DowngradedTestInterface_PendingReceiver_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_PendingRemote_Name,
     {&internal::DowngradedTestInterface_PendingRemote_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_PendingAssociatedReceiver_Name,
     {&internal::DowngradedTestInterface_PendingAssociatedReceiver_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_PendingAssociatedRemote_Name,
     {&internal::DowngradedTestInterface_PendingAssociatedRemote_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_MultipleParams2_Name,
     {&internal::DowngradedTestInterface_MultipleParams2_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_MultipleParams3_Name,
     {&internal::DowngradedTestInterface_MultipleParams3_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_MultipleParams4_Name,
     {&internal::DowngradedTestInterface_MultipleParams4_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name,
     {&internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params_Data::Validate,
      &internal::DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams_Data::Validate}},
    {internal::kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name,
     {&internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params_Data::Validate,
      &internal::DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams_Data::Validate}},
    {internal::kDowngradedTestInterface_OddSpaces_Name,
     {&internal::DowngradedTestInterface_OddSpaces_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDowngradedTestInterface_OddSpacesAndLineBreak_Name,
     {&internal::DowngradedTestInterface_OddSpacesAndLineBreak_Params_Data::Validate,
      nullptr /* no response */}},
};

bool DowngradedTestInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::mojom_types_downgrader_unittest::mojom::blink::DowngradedTestInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kDowngradedTestInterfaceValidationInfo);
}

bool DowngradedTestInterfaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::mojom_types_downgrader_unittest::mojom::blink::DowngradedTestInterface::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kDowngradedTestInterfaceValidationInfo);

}
}  // namespace blink
}  // namespace mojom
}  // namespace mojom_types_downgrader_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif