// mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace service_factory_unittest {
namespace mojom {
namespace blink {


void TestService1InterceptorForTesting::GetIdentity(GetIdentityCallback callback) {
  GetForwardingInterface()->GetIdentity(std::move(callback));
}
void TestService1InterceptorForTesting::Quit() {
  GetForwardingInterface()->Quit();
}
TestService1AsyncWaiter::TestService1AsyncWaiter(
    TestService1* proxy) : proxy_(proxy) {}

TestService1AsyncWaiter::~TestService1AsyncWaiter() = default;

void TestService1AsyncWaiter::GetIdentity(
    int32_t* out_id) {
  base::RunLoop loop;
  proxy_->GetIdentity(
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_id
,
             int32_t id) {*out_id = std::move(id);
            loop->Quit();
          },
          &loop,
          out_id));
  loop.Run();
}



void TestService2InterceptorForTesting::GetIdentity(GetIdentityCallback callback) {
  GetForwardingInterface()->GetIdentity(std::move(callback));
}
TestService2AsyncWaiter::TestService2AsyncWaiter(
    TestService2* proxy) : proxy_(proxy) {}

TestService2AsyncWaiter::~TestService2AsyncWaiter() = default;

void TestService2AsyncWaiter::GetIdentity(
    int32_t* out_id) {
  base::RunLoop loop;
  proxy_->GetIdentity(
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_id
,
             int32_t id) {*out_id = std::move(id);
            loop->Quit();
          },
          &loop,
          out_id));
  loop.Run();
}



TestService3AsyncWaiter::TestService3AsyncWaiter(
    TestService3* proxy) : proxy_(proxy) {}

TestService3AsyncWaiter::~TestService3AsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace service_factory_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif