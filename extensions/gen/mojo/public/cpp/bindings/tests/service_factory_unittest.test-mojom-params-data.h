// mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace service_factory_unittest {
namespace mojom {
namespace internal {
class  TestService1_GetIdentity_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService1_GetIdentity_Params_Data>;

  TestService1_GetIdentity_Params_Data();
  ~TestService1_GetIdentity_Params_Data() = delete;
};
static_assert(sizeof(TestService1_GetIdentity_Params_Data) == 8,
              "Bad sizeof(TestService1_GetIdentity_Params_Data)");
class  TestService1_GetIdentity_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestService1_GetIdentity_ResponseParams_Data>;

  TestService1_GetIdentity_ResponseParams_Data();
  ~TestService1_GetIdentity_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestService1_GetIdentity_ResponseParams_Data) == 16,
              "Bad sizeof(TestService1_GetIdentity_ResponseParams_Data)");
class  TestService1_Quit_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService1_Quit_Params_Data>;

  TestService1_Quit_Params_Data();
  ~TestService1_Quit_Params_Data() = delete;
};
static_assert(sizeof(TestService1_Quit_Params_Data) == 8,
              "Bad sizeof(TestService1_Quit_Params_Data)");
class  TestService2_GetIdentity_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService2_GetIdentity_Params_Data>;

  TestService2_GetIdentity_Params_Data();
  ~TestService2_GetIdentity_Params_Data() = delete;
};
static_assert(sizeof(TestService2_GetIdentity_Params_Data) == 8,
              "Bad sizeof(TestService2_GetIdentity_Params_Data)");
class  TestService2_GetIdentity_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestService2_GetIdentity_ResponseParams_Data>;

  TestService2_GetIdentity_ResponseParams_Data();
  ~TestService2_GetIdentity_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestService2_GetIdentity_ResponseParams_Data) == 16,
              "Bad sizeof(TestService2_GetIdentity_ResponseParams_Data)");

}  // namespace internal


class TestService1_GetIdentity_ParamsDataView {
 public:
  TestService1_GetIdentity_ParamsDataView() {}

  TestService1_GetIdentity_ParamsDataView(
      internal::TestService1_GetIdentity_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService1_GetIdentity_Params_Data* data_ = nullptr;
};



class TestService1_GetIdentity_ResponseParamsDataView {
 public:
  TestService1_GetIdentity_ResponseParamsDataView() {}

  TestService1_GetIdentity_ResponseParamsDataView(
      internal::TestService1_GetIdentity_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
 private:
  internal::TestService1_GetIdentity_ResponseParams_Data* data_ = nullptr;
};



class TestService1_Quit_ParamsDataView {
 public:
  TestService1_Quit_ParamsDataView() {}

  TestService1_Quit_ParamsDataView(
      internal::TestService1_Quit_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService1_Quit_Params_Data* data_ = nullptr;
};



class TestService2_GetIdentity_ParamsDataView {
 public:
  TestService2_GetIdentity_ParamsDataView() {}

  TestService2_GetIdentity_ParamsDataView(
      internal::TestService2_GetIdentity_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService2_GetIdentity_Params_Data* data_ = nullptr;
};



class TestService2_GetIdentity_ResponseParamsDataView {
 public:
  TestService2_GetIdentity_ResponseParamsDataView() {}

  TestService2_GetIdentity_ResponseParamsDataView(
      internal::TestService2_GetIdentity_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
 private:
  internal::TestService2_GetIdentity_ResponseParams_Data* data_ = nullptr;
};











}  // namespace mojom
}  // namespace service_factory_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_