// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_TEST_UTILS_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_TEST_UTILS_H_

#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink.h"


namespace mojo {
namespace test {
namespace flush_async_unittest {
namespace mojom {
namespace blink {


class  WriterInterceptorForTesting : public Writer {
  virtual Writer* GetForwardingInterface() = 0;
  void Put(const WTF::String& key, const WTF::String& value) override;
};
class  WriterAsyncWaiter {
 public:
  explicit WriterAsyncWaiter(Writer* proxy);
  ~WriterAsyncWaiter();

 private:
  Writer* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WriterAsyncWaiter);
};


class  KeyValueStoreClientInterceptorForTesting : public KeyValueStoreClient {
  virtual KeyValueStoreClient* GetForwardingInterface() = 0;
  void OnSnapshotTaken() override;
};
class  KeyValueStoreClientAsyncWaiter {
 public:
  explicit KeyValueStoreClientAsyncWaiter(KeyValueStoreClient* proxy);
  ~KeyValueStoreClientAsyncWaiter();

 private:
  KeyValueStoreClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreClientAsyncWaiter);
};


class  KeyValueStoreInterceptorForTesting : public KeyValueStore {
  virtual KeyValueStore* GetForwardingInterface() = 0;
  void SetClient(::mojo::PendingRemote<KeyValueStoreClient> client) override;
  void BindWriter(::mojo::PendingReceiver<Writer> receiver) override;
  void GetSnapshot(GetSnapshotCallback callback) override;
};
class  KeyValueStoreAsyncWaiter {
 public:
  explicit KeyValueStoreAsyncWaiter(KeyValueStore* proxy);
  ~KeyValueStoreAsyncWaiter();
  void GetSnapshot(
      WTF::HashMap<WTF::String, WTF::String>* out_entries);

 private:
  KeyValueStore* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreAsyncWaiter);
};


class  PingerInterceptorForTesting : public Pinger {
  virtual Pinger* GetForwardingInterface() = 0;
  void Ping(PingCallback callback) override;
};
class  PingerAsyncWaiter {
 public:
  explicit PingerAsyncWaiter(Pinger* proxy);
  ~PingerAsyncWaiter();
  void Ping(
      );

 private:
  Pinger* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PingerAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace flush_async_unittest
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_TEST_UTILS_H_