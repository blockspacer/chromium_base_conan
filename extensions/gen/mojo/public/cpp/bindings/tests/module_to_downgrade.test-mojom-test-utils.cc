// mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_MODULE_TO_DOWNGRADE_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_MODULE_TO_DOWNGRADE_TEST_MOJOM_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace mojom_types_downgrader_unittest {
namespace mojom {


void FooInterceptorForTesting::DummyMethod() {
  GetForwardingInterface()->DummyMethod();
}
FooAsyncWaiter::FooAsyncWaiter(
    Foo* proxy) : proxy_(proxy) {}

FooAsyncWaiter::~FooAsyncWaiter() = default;




void DowngradedTestInterfaceInterceptorForTesting::InterfaceRequest(FooRequest request) {
  GetForwardingInterface()->InterfaceRequest(std::move(request));
}
void DowngradedTestInterfaceInterceptorForTesting::InterfacePtr(FooPtr ptr) {
  GetForwardingInterface()->InterfacePtr(std::move(ptr));
}
void DowngradedTestInterfaceInterceptorForTesting::AssociatedInterfacePtrInfo(FooAssociatedPtrInfo associated_ptr_info) {
  GetForwardingInterface()->AssociatedInterfacePtrInfo(std::move(associated_ptr_info));
}
void DowngradedTestInterfaceInterceptorForTesting::AssociatedInterfaceRequest(FooAssociatedRequest associated_request) {
  GetForwardingInterface()->AssociatedInterfaceRequest(std::move(associated_request));
}
void DowngradedTestInterfaceInterceptorForTesting::PendingReceiver(FooRequest receiver) {
  GetForwardingInterface()->PendingReceiver(std::move(receiver));
}
void DowngradedTestInterfaceInterceptorForTesting::PendingRemote(FooPtr remote) {
  GetForwardingInterface()->PendingRemote(std::move(remote));
}
void DowngradedTestInterfaceInterceptorForTesting::PendingAssociatedReceiver(FooAssociatedRequest associated_remote) {
  GetForwardingInterface()->PendingAssociatedReceiver(std::move(associated_remote));
}
void DowngradedTestInterfaceInterceptorForTesting::PendingAssociatedRemote(FooAssociatedPtrInfo associated_receiver) {
  GetForwardingInterface()->PendingAssociatedRemote(std::move(associated_receiver));
}
void DowngradedTestInterfaceInterceptorForTesting::MultipleParams2(FooPtr remote, FooRequest receiver) {
  GetForwardingInterface()->MultipleParams2(std::move(remote), std::move(receiver));
}
void DowngradedTestInterfaceInterceptorForTesting::MultipleParams3(FooPtr remote, FooRequest receiver, FooAssociatedPtrInfo associated_remote) {
  GetForwardingInterface()->MultipleParams3(std::move(remote), std::move(receiver), std::move(associated_remote));
}
void DowngradedTestInterfaceInterceptorForTesting::MultipleParams4(FooPtr remote, FooRequest receiver, FooAssociatedPtrInfo associated_remote, FooAssociatedRequest associated_receiver) {
  GetForwardingInterface()->MultipleParams4(std::move(remote), std::move(receiver), std::move(associated_remote), std::move(associated_receiver));
}
void DowngradedTestInterfaceInterceptorForTesting::MethodWithResponseCallbackOneLine(FooPtr data, MethodWithResponseCallbackOneLineCallback callback) {
  GetForwardingInterface()->MethodWithResponseCallbackOneLine(std::move(data), std::move(callback));
}
void DowngradedTestInterfaceInterceptorForTesting::MethodWithResponseCallbackTwoLines(FooPtr data, MethodWithResponseCallbackTwoLinesCallback callback) {
  GetForwardingInterface()->MethodWithResponseCallbackTwoLines(std::move(data), std::move(callback));
}
void DowngradedTestInterfaceInterceptorForTesting::OddSpaces(FooPtr remote, FooRequest receiver) {
  GetForwardingInterface()->OddSpaces(std::move(remote), std::move(receiver));
}
void DowngradedTestInterfaceInterceptorForTesting::OddSpacesAndLineBreak(FooPtr remote, FooRequest receiver) {
  GetForwardingInterface()->OddSpacesAndLineBreak(std::move(remote), std::move(receiver));
}
DowngradedTestInterfaceAsyncWaiter::DowngradedTestInterfaceAsyncWaiter(
    DowngradedTestInterface* proxy) : proxy_(proxy) {}

DowngradedTestInterfaceAsyncWaiter::~DowngradedTestInterfaceAsyncWaiter() = default;

void DowngradedTestInterfaceAsyncWaiter::MethodWithResponseCallbackOneLine(
    FooPtr data) {
  base::RunLoop loop;
  proxy_->MethodWithResponseCallbackOneLine(std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void DowngradedTestInterfaceAsyncWaiter::MethodWithResponseCallbackTwoLines(
    FooPtr data, FooRequest* out_receiver) {
  base::RunLoop loop;
  proxy_->MethodWithResponseCallbackTwoLines(std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop,
             FooRequest* out_receiver
,
             FooRequest receiver) {*out_receiver = std::move(receiver);
            loop->Quit();
          },
          &loop,
          out_receiver));
  loop.Run();
}





}  // namespace mojom
}  // namespace mojom_types_downgrader_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif