// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {
namespace internal {
class  TestGenericBinder_BindOptionalReceiver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingReceiver_Data> receiver;

 private:
  friend class mojo::internal::MessageFragment<TestGenericBinder_BindOptionalReceiver_Params_Data>;

  TestGenericBinder_BindOptionalReceiver_Params_Data();
  ~TestGenericBinder_BindOptionalReceiver_Params_Data() = delete;
};
static_assert(sizeof(TestGenericBinder_BindOptionalReceiver_Params_Data) == 16,
              "Bad sizeof(TestGenericBinder_BindOptionalReceiver_Params_Data)");
class  TestGenericBinder_BindReceiver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingReceiver_Data> receiver;

 private:
  friend class mojo::internal::MessageFragment<TestGenericBinder_BindReceiver_Params_Data>;

  TestGenericBinder_BindReceiver_Params_Data();
  ~TestGenericBinder_BindReceiver_Params_Data() = delete;
};
static_assert(sizeof(TestGenericBinder_BindReceiver_Params_Data) == 16,
              "Bad sizeof(TestGenericBinder_BindReceiver_Params_Data)");
class  RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data>;

  RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data();
  ~RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data() = delete;
};
static_assert(sizeof(RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data) == 8,
              "Bad sizeof(RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data)");
class  RebindTestInterface_NormalCall_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RebindTestInterface_NormalCall_Params_Data>;

  RebindTestInterface_NormalCall_Params_Data();
  ~RebindTestInterface_NormalCall_Params_Data() = delete;
};
static_assert(sizeof(RebindTestInterface_NormalCall_Params_Data) == 8,
              "Bad sizeof(RebindTestInterface_NormalCall_Params_Data)");
class  RebindTestInterface_SyncCall_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RebindTestInterface_SyncCall_Params_Data>;

  RebindTestInterface_SyncCall_Params_Data();
  ~RebindTestInterface_SyncCall_Params_Data() = delete;
};
static_assert(sizeof(RebindTestInterface_SyncCall_Params_Data) == 8,
              "Bad sizeof(RebindTestInterface_SyncCall_Params_Data)");
class  RebindTestInterface_SyncCall_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RebindTestInterface_SyncCall_ResponseParams_Data>;

  RebindTestInterface_SyncCall_ResponseParams_Data();
  ~RebindTestInterface_SyncCall_ResponseParams_Data() = delete;
};
static_assert(sizeof(RebindTestInterface_SyncCall_ResponseParams_Data) == 8,
              "Bad sizeof(RebindTestInterface_SyncCall_ResponseParams_Data)");

}  // namespace internal


class TestGenericBinder_BindOptionalReceiver_ParamsDataView {
 public:
  TestGenericBinder_BindOptionalReceiver_ParamsDataView() {}

  TestGenericBinder_BindOptionalReceiver_ParamsDataView(
      internal::TestGenericBinder_BindOptionalReceiver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingReceiverDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiver(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::GenericPendingReceiverDataView, UserType>(),
    "Attempting to read the optional `receiver` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with base::Optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReceiver` instead "
    "of `ReadReceiver if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestGenericBinder_BindOptionalReceiver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TestGenericBinder_BindReceiver_ParamsDataView {
 public:
  TestGenericBinder_BindReceiver_ParamsDataView() {}

  TestGenericBinder_BindReceiver_ParamsDataView(
      internal::TestGenericBinder_BindReceiver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingReceiverDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiver(UserType* output) {
    
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
        pointer, output, message_);
  }
 private:
  internal::TestGenericBinder_BindReceiver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RebindTestInterface_BlockingUntilExternalSignalCall_ParamsDataView {
 public:
  RebindTestInterface_BlockingUntilExternalSignalCall_ParamsDataView() {}

  RebindTestInterface_BlockingUntilExternalSignalCall_ParamsDataView(
      internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data* data_ = nullptr;
};



class RebindTestInterface_NormalCall_ParamsDataView {
 public:
  RebindTestInterface_NormalCall_ParamsDataView() {}

  RebindTestInterface_NormalCall_ParamsDataView(
      internal::RebindTestInterface_NormalCall_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RebindTestInterface_NormalCall_Params_Data* data_ = nullptr;
};



class RebindTestInterface_SyncCall_ParamsDataView {
 public:
  RebindTestInterface_SyncCall_ParamsDataView() {}

  RebindTestInterface_SyncCall_ParamsDataView(
      internal::RebindTestInterface_SyncCall_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RebindTestInterface_SyncCall_Params_Data* data_ = nullptr;
};



class RebindTestInterface_SyncCall_ResponseParamsDataView {
 public:
  RebindTestInterface_SyncCall_ResponseParamsDataView() {}

  RebindTestInterface_SyncCall_ResponseParamsDataView(
      internal::RebindTestInterface_SyncCall_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RebindTestInterface_SyncCall_ResponseParams_Data* data_ = nullptr;
};


inline void TestGenericBinder_BindOptionalReceiver_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingReceiverDataView(pointer, message_);
}


inline void TestGenericBinder_BindReceiver_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingReceiverDataView(pointer, message_);
}









}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_