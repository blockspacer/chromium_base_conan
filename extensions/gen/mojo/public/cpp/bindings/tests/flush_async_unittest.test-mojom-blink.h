// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace flush_async_unittest {
namespace mojom {
namespace blink {

class WriterProxy;

template <typename ImplRefTraits>
class WriterStub;

class WriterRequestValidator;


// @generated_from: mojo.test.flush_async_unittest.mojom.Writer
class  Writer
    : public WriterInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = WriterInterfaceBase;
  using Proxy_ = WriterProxy;

  template <typename ImplRefTraits>
  using Stub_ = WriterStub<ImplRefTraits>;

  using RequestValidator_ = WriterRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPutMinVersion = 0,
  };
  virtual ~Writer() {}

  
// @generated_from: mojo.test.flush_async_unittest.mojom.Writer.Put
  virtual void Put(const WTF::String& key, const WTF::String& value) = 0;
};

class KeyValueStoreClientProxy;

template <typename ImplRefTraits>
class KeyValueStoreClientStub;

class KeyValueStoreClientRequestValidator;


// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStoreClient
class  KeyValueStoreClient
    : public KeyValueStoreClientInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = KeyValueStoreClientInterfaceBase;
  using Proxy_ = KeyValueStoreClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = KeyValueStoreClientStub<ImplRefTraits>;

  using RequestValidator_ = KeyValueStoreClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnSnapshotTakenMinVersion = 0,
  };
  virtual ~KeyValueStoreClient() {}

  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStoreClient.OnSnapshotTaken
  virtual void OnSnapshotTaken() = 0;
};

class KeyValueStoreProxy;

template <typename ImplRefTraits>
class KeyValueStoreStub;

class KeyValueStoreRequestValidator;
class KeyValueStoreResponseValidator;


// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore
class  KeyValueStore
    : public KeyValueStoreInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = KeyValueStoreInterfaceBase;
  using Proxy_ = KeyValueStoreProxy;

  template <typename ImplRefTraits>
  using Stub_ = KeyValueStoreStub<ImplRefTraits>;

  using RequestValidator_ = KeyValueStoreRequestValidator;
  using ResponseValidator_ = KeyValueStoreResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSetClientMinVersion = 0,
    kBindWriterMinVersion = 0,
    kGetSnapshotMinVersion = 0,
  };
  virtual ~KeyValueStore() {}

  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.SetClient
  virtual void SetClient(::mojo::PendingRemote<KeyValueStoreClient> client) = 0;

  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.BindWriter
  virtual void BindWriter(::mojo::PendingReceiver<Writer> receiver) = 0;


  using GetSnapshotCallback = base::OnceCallback<void(const WTF::HashMap<WTF::String, WTF::String>&)>;
  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.GetSnapshot
  virtual void GetSnapshot(GetSnapshotCallback callback) = 0;
};

class PingerProxy;

template <typename ImplRefTraits>
class PingerStub;

class PingerRequestValidator;
class PingerResponseValidator;


// @generated_from: mojo.test.flush_async_unittest.mojom.Pinger
class  Pinger
    : public PingerInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PingerInterfaceBase;
  using Proxy_ = PingerProxy;

  template <typename ImplRefTraits>
  using Stub_ = PingerStub<ImplRefTraits>;

  using RequestValidator_ = PingerRequestValidator;
  using ResponseValidator_ = PingerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
  };
  virtual ~Pinger() {}


  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.flush_async_unittest.mojom.Pinger.Ping
  virtual void Ping(PingCallback callback) = 0;
};



// @generated_from: mojo.test.flush_async_unittest.mojom.Writer
class  WriterProxy
    : public Writer {
 public:
  using InterfaceType = Writer;

  explicit WriterProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.flush_async_unittest.mojom.Writer.Put
  void Put(const WTF::String& key, const WTF::String& value) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStoreClient
class  KeyValueStoreClientProxy
    : public KeyValueStoreClient {
 public:
  using InterfaceType = KeyValueStoreClient;

  explicit KeyValueStoreClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStoreClient.OnSnapshotTaken
  void OnSnapshotTaken() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore
class  KeyValueStoreProxy
    : public KeyValueStore {
 public:
  using InterfaceType = KeyValueStore;

  explicit KeyValueStoreProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.SetClient
  void SetClient(::mojo::PendingRemote<KeyValueStoreClient> client) final;
  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.BindWriter
  void BindWriter(::mojo::PendingReceiver<Writer> receiver) final;
  
// @generated_from: mojo.test.flush_async_unittest.mojom.KeyValueStore.GetSnapshot
  void GetSnapshot(GetSnapshotCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.flush_async_unittest.mojom.Pinger
class  PingerProxy
    : public Pinger {
 public:
  using InterfaceType = Pinger;

  explicit PingerProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.flush_async_unittest.mojom.Pinger.Ping
  void Ping(PingCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  WriterStubDispatch {
 public:
  static bool Accept(Writer* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Writer* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Writer>>
class WriterStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WriterStub() {}
  ~WriterStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WriterStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WriterStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  KeyValueStoreClientStubDispatch {
 public:
  static bool Accept(KeyValueStoreClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      KeyValueStoreClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<KeyValueStoreClient>>
class KeyValueStoreClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  KeyValueStoreClientStub() {}
  ~KeyValueStoreClientStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return KeyValueStoreClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return KeyValueStoreClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  KeyValueStoreStubDispatch {
 public:
  static bool Accept(KeyValueStore* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      KeyValueStore* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<KeyValueStore>>
class KeyValueStoreStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  KeyValueStoreStub() {}
  ~KeyValueStoreStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return KeyValueStoreStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return KeyValueStoreStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PingerStubDispatch {
 public:
  static bool Accept(Pinger* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Pinger* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Pinger>>
class PingerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PingerStub() {}
  ~PingerStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  WriterRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  KeyValueStoreClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  KeyValueStoreRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  KeyValueStoreResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace flush_async_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjE5MSwgImJlZ2luIjogMjE4NSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5mbHVzaF9hc3luY191bml0dGVzdC5t
b2pvbS5Xcml0ZXIifX0sIHsiZW5kIjogMjg0NywgImJlZ2luIjogMjg0NCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5mbHVzaF9hc3luY191bml0
dGVzdC5tb2pvbS5Xcml0ZXIuUHV0In19LCB7ImVuZCI6IDMxNTQsICJiZWdpbiI6IDMxMzUsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hf
YXN5bmNfdW5pdHRlc3QubW9qb20uS2V5VmFsdWVTdG9yZUNsaWVudCJ9fSwgeyJlbmQiOiAzOTM3
LCAiYmVnaW4iOiAzOTIyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LmZsdXNoX2FzeW5jX3VuaXR0ZXN0Lm1vam9tLktleVZhbHVlU3RvcmVDbGll
bnQuT25TbmFwc2hvdFRha2VuIn19LCB7ImVuZCI6IDQyMDQsICJiZWdpbiI6IDQxOTEsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hfYXN5
bmNfdW5pdHRlc3QubW9qb20uS2V5VmFsdWVTdG9yZSJ9fSwgeyJlbmQiOiA0OTk3LCAiYmVnaW4i
OiA0OTg4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LmZsdXNoX2FzeW5jX3VuaXR0ZXN0Lm1vam9tLktleVZhbHVlU3RvcmUuU2V0Q2xpZW50In19
LCB7ImVuZCI6IDUxNjUsICJiZWdpbiI6IDUxNTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hfYXN5bmNfdW5pdHRlc3QubW9qb20uS2V5
VmFsdWVTdG9yZS5CaW5kV3JpdGVyIn19LCB7ImVuZCI6IDU0MzAsICJiZWdpbiI6IDU0MTksICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hf
YXN5bmNfdW5pdHRlc3QubW9qb20uS2V5VmFsdWVTdG9yZS5HZXRTbmFwc2hvdCJ9fSwgeyJlbmQi
OiA1NjgzLCAiYmVnaW4iOiA1Njc3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LmZsdXNoX2FzeW5jX3VuaXR0ZXN0Lm1vam9tLlBpbmdlciJ9fSwg
eyJlbmQiOiA2Mzk0LCAiYmVnaW4iOiA2MzkwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmZsdXNoX2FzeW5jX3VuaXR0ZXN0Lm1vam9tLlBpbmdl
ci5QaW5nIn19LCB7ImVuZCI6IDY3MjcsICJiZWdpbiI6IDY3MjQsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hfYXN5bmNfdW5pdHRlc3Qu
bW9qb20uV3JpdGVyLlB1dCJ9fSwgeyJlbmQiOiA3MjUxLCAiYmVnaW4iOiA3MjM2LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmZsdXNoX2FzeW5j
X3VuaXR0ZXN0Lm1vam9tLktleVZhbHVlU3RvcmVDbGllbnQuT25TbmFwc2hvdFRha2VuIn19LCB7
ImVuZCI6IDc2NzksICJiZWdpbiI6IDc2NzAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hfYXN5bmNfdW5pdHRlc3QubW9qb20uS2V5VmFs
dWVTdG9yZS5TZXRDbGllbnQifX0sIHsiZW5kIjogNzg0MCwgImJlZ2luIjogNzgzMCwgImVkZ2Ui
OiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZu
YW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMi
LCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5mbHVzaF9hc3lu
Y191bml0dGVzdC5tb2pvbS5LZXlWYWx1ZVN0b3JlLkJpbmRXcml0ZXIifX0sIHsiZW5kIjogNzk5
NCwgImJlZ2luIjogNzk4MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5mbHVzaF9hc3luY191bml0dGVzdC5tb2pvbS5LZXlWYWx1ZVN0b3JlLkdl
dFNuYXBzaG90In19LCB7ImVuZCI6IDgzOTgsICJiZWdpbiI6IDgzOTQsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZmx1c2hfYXN5bmNfdW5pdHRl
c3QubW9qb20uUGluZ2VyLlBpbmcifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/