// mojo/public/cpp/bindings/tests/generated.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/generated.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.generatedTestMojom');




  function FooPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Foo,
                                                   handleOrPtrInfo);
  }

  function FooAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Foo, associatedInterfacePtrInfo);
  }

  FooAssociatedPtr.prototype =
      Object.create(FooPtr.prototype);
  FooAssociatedPtr.prototype.constructor =
      FooAssociatedPtr;

  function FooProxy(receiver) {
    this.receiver_ = receiver;
  }

  function FooStub(delegate) {
    this.delegate_ = delegate;
  }

  FooStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FooStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFooRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateFooResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Foo = {
    name: 'mojo.test.generated_test_mojom.Foo',
    kVersion: 0,
    ptrClass: FooPtr,
    proxyClass: FooProxy,
    stubClass: FooStub,
    validateRequest: validateFooRequest,
    validateResponse: null,
  };
  FooStub.prototype.validator = validateFooRequest;
  FooProxy.prototype.validator = null;
  exports.Foo = Foo;
  exports.FooPtr = FooPtr;
  exports.FooAssociatedPtr = FooAssociatedPtr;
})();