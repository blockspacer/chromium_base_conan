// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace WTF {
struct mojo_test_enum_default_unittest_mojom_internal_ExtensibleEnumWithDefault_DataHashFn {
  static unsigned GetHash(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& value) {
    using utype = std::underlying_type<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& left, const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>
    : public GenericHashTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& slot, bool) {
    slot = static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct mojo_test_enum_default_unittest_mojom_internal_ExtensibleEnumWithoutDefault_DataHashFn {
  static unsigned GetHash(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& value) {
    using utype = std::underlying_type<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& left, const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>
    : public GenericHashTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& slot, bool) {
    slot = static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct mojo_test_enum_default_unittest_mojom_internal_EnumWithoutZeroValue_DataHashFn {
  static unsigned GetHash(const ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& value) {
    using utype = std::underlying_type<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& left, const ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>
    : public GenericHashTraits<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>(-1000000);
  }
  static void ConstructDeletedValue(::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& slot, bool) {
    slot = static_cast<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>(-1000001);
  }
  static bool IsDeletedValue(const ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue& value) {
    return value == static_cast<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>(-1000001);
  }
};
}  // namespace WTF


namespace mojo {
namespace test {
namespace enum_default_unittest {
namespace mojom {
namespace blink {

class TestInterfaceProxy;

template <typename ImplRefTraits>
class TestInterfaceStub;

class TestInterfaceRequestValidator;
class TestInterfaceResponseValidator;


// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface
class  TestInterface
    : public TestInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterfaceInterfaceBase;
  using Proxy_ = TestInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = TestInterfaceRequestValidator;
  using ResponseValidator_ = TestInterfaceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoWithDefaultMinVersion = 0,
    kEchoWithoutDefaultMinVersion = 0,
    kEchoStructWithDefaultMinVersion = 0,
    kEchoStructWithoutDefaultMinVersion = 0,
    kEchoUnionWithDefaultMinVersion = 0,
    kEchoUnionWithoutDefaultMinVersion = 0,
  };
  virtual ~TestInterface() {}


  using EchoWithDefaultCallback = base::OnceCallback<void(ExtensibleEnumWithDefault)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithDefault
  virtual void EchoWithDefault(ExtensibleEnumWithDefault in, EchoWithDefaultCallback callback) = 0;


  using EchoWithoutDefaultCallback = base::OnceCallback<void(ExtensibleEnumWithoutDefault)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithoutDefault
  virtual void EchoWithoutDefault(ExtensibleEnumWithoutDefault in, EchoWithoutDefaultCallback callback) = 0;


  using EchoStructWithDefaultCallback = base::OnceCallback<void(StructWithExtensibleEnumWithDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithDefault
  virtual void EchoStructWithDefault(StructWithExtensibleEnumWithDefaultPtr in, EchoStructWithDefaultCallback callback) = 0;


  using EchoStructWithoutDefaultCallback = base::OnceCallback<void(StructWithExtensibleEnumWithoutDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithoutDefault
  virtual void EchoStructWithoutDefault(StructWithExtensibleEnumWithoutDefaultPtr in, EchoStructWithoutDefaultCallback callback) = 0;


  using EchoUnionWithDefaultCallback = base::OnceCallback<void(UnionWithExtensibleEnumWithDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithDefault
  virtual void EchoUnionWithDefault(UnionWithExtensibleEnumWithDefaultPtr in, EchoUnionWithDefaultCallback callback) = 0;


  using EchoUnionWithoutDefaultCallback = base::OnceCallback<void(UnionWithExtensibleEnumWithoutDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithoutDefault
  virtual void EchoUnionWithoutDefault(UnionWithExtensibleEnumWithoutDefaultPtr in, EchoUnionWithoutDefaultCallback callback) = 0;
};



// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface
class  TestInterfaceProxy
    : public TestInterface {
 public:
  using InterfaceType = TestInterface;

  explicit TestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithDefault
  void EchoWithDefault(ExtensibleEnumWithDefault in, EchoWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithoutDefault
  void EchoWithoutDefault(ExtensibleEnumWithoutDefault in, EchoWithoutDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithDefault
  void EchoStructWithDefault(StructWithExtensibleEnumWithDefaultPtr in, EchoStructWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithoutDefault
  void EchoStructWithoutDefault(StructWithExtensibleEnumWithoutDefaultPtr in, EchoStructWithoutDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithDefault
  void EchoUnionWithDefault(UnionWithExtensibleEnumWithDefaultPtr in, EchoUnionWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithoutDefault
  void EchoUnionWithoutDefault(UnionWithExtensibleEnumWithoutDefaultPtr in, EchoUnionWithoutDefaultCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestInterfaceStubDispatch {
 public:
  static bool Accept(TestInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface>>
class TestInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterfaceStub() {}
  ~TestInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestInterfaceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithDefault
class  StructWithExtensibleEnumWithDefault {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithExtensibleEnumWithDefault, T>::value>;
  using DataView = StructWithExtensibleEnumWithDefaultDataView;
  using Data_ = internal::StructWithExtensibleEnumWithDefault_Data;

  template <typename... Args>
  static StructWithExtensibleEnumWithDefaultPtr New(Args&&... args) {
    return StructWithExtensibleEnumWithDefaultPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithExtensibleEnumWithDefaultPtr From(const U& u) {
    return mojo::TypeConverter<StructWithExtensibleEnumWithDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithExtensibleEnumWithDefault>::Convert(*this);
  }


  StructWithExtensibleEnumWithDefault();

  explicit StructWithExtensibleEnumWithDefault(
      ExtensibleEnumWithDefault value);

  ~StructWithExtensibleEnumWithDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithExtensibleEnumWithDefaultPtr>
  StructWithExtensibleEnumWithDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithExtensibleEnumWithDefault::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithExtensibleEnumWithDefault::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithExtensibleEnumWithDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithDefault::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithDefault::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructWithExtensibleEnumWithDefault::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithExtensibleEnumWithDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithDefault::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithDefault.value
  ExtensibleEnumWithDefault value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithoutDefault
class  StructWithExtensibleEnumWithoutDefault {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithExtensibleEnumWithoutDefault, T>::value>;
  using DataView = StructWithExtensibleEnumWithoutDefaultDataView;
  using Data_ = internal::StructWithExtensibleEnumWithoutDefault_Data;

  template <typename... Args>
  static StructWithExtensibleEnumWithoutDefaultPtr New(Args&&... args) {
    return StructWithExtensibleEnumWithoutDefaultPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithExtensibleEnumWithoutDefaultPtr From(const U& u) {
    return mojo::TypeConverter<StructWithExtensibleEnumWithoutDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithExtensibleEnumWithoutDefault>::Convert(*this);
  }


  StructWithExtensibleEnumWithoutDefault();

  explicit StructWithExtensibleEnumWithoutDefault(
      ExtensibleEnumWithoutDefault value);

  ~StructWithExtensibleEnumWithoutDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithExtensibleEnumWithoutDefaultPtr>
  StructWithExtensibleEnumWithoutDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithExtensibleEnumWithoutDefault::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithExtensibleEnumWithoutDefault::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithoutDefault::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithoutDefault::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructWithExtensibleEnumWithoutDefault::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithoutDefault::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithoutDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithoutDefault.value
  ExtensibleEnumWithoutDefault value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithoutInitializer
class  StructWithoutInitializer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithoutInitializer, T>::value>;
  using DataView = StructWithoutInitializerDataView;
  using Data_ = internal::StructWithoutInitializer_Data;

  template <typename... Args>
  static StructWithoutInitializerPtr New(Args&&... args) {
    return StructWithoutInitializerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithoutInitializerPtr From(const U& u) {
    return mojo::TypeConverter<StructWithoutInitializerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithoutInitializer>::Convert(*this);
  }


  StructWithoutInitializer();

  explicit StructWithoutInitializer(
      EnumWithoutZeroValue value);

  ~StructWithoutInitializer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithoutInitializerPtr>
  StructWithoutInitializerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithoutInitializer::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithoutInitializer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithoutInitializer_UnserializedMessageContext<
            UserType, StructWithoutInitializer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithoutInitializer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructWithoutInitializer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithoutInitializer_UnserializedMessageContext<
            UserType, StructWithoutInitializer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithoutInitializer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithoutInitializer.value
  EnumWithoutZeroValue value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithInitializer
class  StructWithInitializer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithInitializer, T>::value>;
  using DataView = StructWithInitializerDataView;
  using Data_ = internal::StructWithInitializer_Data;

  template <typename... Args>
  static StructWithInitializerPtr New(Args&&... args) {
    return StructWithInitializerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithInitializerPtr From(const U& u) {
    return mojo::TypeConverter<StructWithInitializerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithInitializer>::Convert(*this);
  }


  StructWithInitializer();

  explicit StructWithInitializer(
      EnumWithoutZeroValue value);

  ~StructWithInitializer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithInitializerPtr>
  StructWithInitializerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithInitializer::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithInitializer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithInitializer_UnserializedMessageContext<
            UserType, StructWithInitializer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithInitializer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return StructWithInitializer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithInitializer_UnserializedMessageContext<
            UserType, StructWithInitializer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithInitializer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithInitializer.value
  EnumWithoutZeroValue value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault
class  UnionWithExtensibleEnumWithDefault {
 public:
  using DataView = UnionWithExtensibleEnumWithDefaultDataView;
  using Data_ = internal::UnionWithExtensibleEnumWithDefault_Data;
  using Tag = Data_::UnionWithExtensibleEnumWithDefault_Tag;

  static UnionWithExtensibleEnumWithDefaultPtr New() {
    return UnionWithExtensibleEnumWithDefaultPtr(base::in_place);
  }
  // Construct an instance holding |value|.
  static UnionWithExtensibleEnumWithDefaultPtr
  NewValue(
      ExtensibleEnumWithDefault value) {
    auto result = UnionWithExtensibleEnumWithDefaultPtr(base::in_place);
    result->set_value(std::move(value));
    return result;
  }

  template <typename U>
  static UnionWithExtensibleEnumWithDefaultPtr From(const U& u) {
    return mojo::TypeConverter<UnionWithExtensibleEnumWithDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionWithExtensibleEnumWithDefault>::Convert(*this);
  }

  UnionWithExtensibleEnumWithDefault();
  ~UnionWithExtensibleEnumWithDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionWithExtensibleEnumWithDefaultPtr>
  UnionWithExtensibleEnumWithDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithDefault>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithDefault>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  bool is_value() const { return tag_ == Tag::VALUE; }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  ExtensibleEnumWithDefault get_value() const {
    DCHECK(tag_ == Tag::VALUE);
    return data_.value;
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  void set_value(
      ExtensibleEnumWithDefault value);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionWithExtensibleEnumWithDefault::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionWithExtensibleEnumWithDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ExtensibleEnumWithDefault value;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault
class  UnionWithExtensibleEnumWithoutDefault {
 public:
  using DataView = UnionWithExtensibleEnumWithoutDefaultDataView;
  using Data_ = internal::UnionWithExtensibleEnumWithoutDefault_Data;
  using Tag = Data_::UnionWithExtensibleEnumWithoutDefault_Tag;

  static UnionWithExtensibleEnumWithoutDefaultPtr New() {
    return UnionWithExtensibleEnumWithoutDefaultPtr(base::in_place);
  }
  // Construct an instance holding |value|.
  static UnionWithExtensibleEnumWithoutDefaultPtr
  NewValue(
      ExtensibleEnumWithoutDefault value) {
    auto result = UnionWithExtensibleEnumWithoutDefaultPtr(base::in_place);
    result->set_value(std::move(value));
    return result;
  }

  template <typename U>
  static UnionWithExtensibleEnumWithoutDefaultPtr From(const U& u) {
    return mojo::TypeConverter<UnionWithExtensibleEnumWithoutDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionWithExtensibleEnumWithoutDefault>::Convert(*this);
  }

  UnionWithExtensibleEnumWithoutDefault();
  ~UnionWithExtensibleEnumWithoutDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionWithExtensibleEnumWithoutDefaultPtr>
  UnionWithExtensibleEnumWithoutDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithoutDefault>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithoutDefault>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  bool is_value() const { return tag_ == Tag::VALUE; }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  ExtensibleEnumWithoutDefault get_value() const {
    DCHECK(tag_ == Tag::VALUE);
    return data_.value;
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  void set_value(
      ExtensibleEnumWithoutDefault value);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionWithExtensibleEnumWithoutDefault::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionWithExtensibleEnumWithoutDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ExtensibleEnumWithoutDefault value;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





template <typename UnionPtrType>
UnionWithExtensibleEnumWithDefaultPtr UnionWithExtensibleEnumWithDefault::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::VALUE:
      rv->set_value(mojo::Clone(data_.value));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionWithExtensibleEnumWithDefault>::value>::type*>
bool UnionWithExtensibleEnumWithDefault::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::VALUE:
      return mojo::Equals(data_.value, other.data_.value);
  }

  return false;
}
template <typename UnionPtrType>
UnionWithExtensibleEnumWithoutDefaultPtr UnionWithExtensibleEnumWithoutDefault::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::VALUE:
      rv->set_value(mojo::Clone(data_.value));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionWithExtensibleEnumWithoutDefault>::value>::type*>
bool UnionWithExtensibleEnumWithoutDefault::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::VALUE:
      return mojo::Equals(data_.value, other.data_.value);
  }

  return false;
}
template <typename StructPtrType>
StructWithExtensibleEnumWithDefaultPtr StructWithExtensibleEnumWithDefault::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>*>
bool StructWithExtensibleEnumWithDefault::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithExtensibleEnumWithoutDefaultPtr StructWithExtensibleEnumWithoutDefault::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>*>
bool StructWithExtensibleEnumWithoutDefault::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithoutInitializerPtr StructWithoutInitializer::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>*>
bool StructWithoutInitializer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithInitializerPtr StructWithInitializer::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithInitializer::EnableIfSame<T>*>
bool StructWithInitializer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithInitializer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace enum_default_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefault::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefaultPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefault::value) value(
      const ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefaultPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithDefaultPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefault::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefaultPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefault::value) value(
      const ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::StructWithExtensibleEnumWithoutDefaultPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializer::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializerPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializerPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializer::value) value(
      const ::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializerPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializer::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::StructWithoutInitializerPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializer::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializerPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializerPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializer::value) value(
      const ::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializerPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializer::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::StructWithInitializerPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefault::DataView,
                                        ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr* output) { output->reset(); }

  static ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefault::Tag GetTag(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr& input) {
    return input->which();
  }

  static  ::mojo::test::enum_default_unittest::mojom::blink::ExtensibleEnumWithDefault value(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr& input) {
    return input->get_value();
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithDefaultPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefault::DataView,
                                        ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr* output) { output->reset(); }

  static ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefault::Tag GetTag(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->which();
  }

  static  ::mojo::test::enum_default_unittest::mojom::blink::ExtensibleEnumWithoutDefault value(const ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->get_value();
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::blink::UnionWithExtensibleEnumWithoutDefaultPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogNzczOCwgImJlZ2luIjogNzcyNSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3Qu
bW9qb20uVGVzdEludGVyZmFjZSJ9fSwgeyJlbmQiOiA4Nzg2LCAiYmVnaW4iOiA4NzcxLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVm
YXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9XaXRoRGVmYXVsdCJ9fSwgeyJl
bmQiOiA5MDc4LCAiYmVnaW4iOiA5MDYwLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50
ZXJmYWNlLkVjaG9XaXRob3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiA5Mzk1LCAiYmVnaW4iOiA5Mzc0
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVu
dW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9TdHJ1Y3RXaXRoRGVm
YXVsdCJ9fSwgeyJlbmQiOiA5NzM3LCAiYmVnaW4iOiA5NzEzLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5t
b2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9TdHJ1Y3RXaXRob3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiAx
MDA2OSwgImJlZ2luIjogMTAwNDksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlRlc3RJbnRlcmZh
Y2UuRWNob1VuaW9uV2l0aERlZmF1bHQifX0sIHsiZW5kIjogMTA0MDUsICJiZWdpbiI6IDEwMzgy
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVu
dW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9VbmlvbldpdGhvdXRE
ZWZhdWx0In19LCB7ImVuZCI6IDEwODcwLCAiYmVnaW4iOiAxMDg1NSwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRl
c3QubW9qb20uVGVzdEludGVyZmFjZS5FY2hvV2l0aERlZmF1bHQifX0sIHsiZW5kIjogMTEwNjEs
ICJiZWdpbiI6IDExMDQzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVj
aG9XaXRob3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiAxMTI2NCwgImJlZ2luIjogMTEyNDMsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZh
dWx0X3VuaXR0ZXN0Lm1vam9tLlRlc3RJbnRlcmZhY2UuRWNob1N0cnVjdFdpdGhEZWZhdWx0In19
LCB7ImVuZCI6IDExNDg2LCAiYmVnaW4iOiAxMTQ2MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20u
VGVzdEludGVyZmFjZS5FY2hvU3RydWN0V2l0aG91dERlZmF1bHQifX0sIHsiZW5kIjogMTE3MDYs
ICJiZWdpbiI6IDExNjg2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVj
aG9VbmlvbldpdGhEZWZhdWx0In19LCB7ImVuZCI6IDExOTI0LCAiYmVnaW4iOiAxMTkwMSwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2Rl
ZmF1bHRfdW5pdHRlc3QubW9qb20uVGVzdEludGVyZmFjZS5FY2hvVW5pb25XaXRob3V0RGVmYXVs
dCJ9fSwgeyJlbmQiOiAxMzc2MiwgImJlZ2luIjogMTM3MjcsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1v
am9tLlN0cnVjdFdpdGhFeHRlbnNpYmxlRW51bVdpdGhEZWZhdWx0In19LCB7ImVuZCI6IDE4MDIz
LCAiYmVnaW4iOiAxODAxOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aEV4dGVu
c2libGVFbnVtV2l0aERlZmF1bHQudmFsdWUifX0sIHsiZW5kIjogMTkyMjMsICJiZWdpbiI6IDE5
MTg1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5TdHJ1Y3RXaXRoRXh0ZW5zaWJsZUVudW1XaXRo
b3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiAyMzU2NSwgImJlZ2luIjogMjM1NjAsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3Vu
aXR0ZXN0Lm1vam9tLlN0cnVjdFdpdGhFeHRlbnNpYmxlRW51bVdpdGhvdXREZWZhdWx0LnZhbHVl
In19LCB7ImVuZCI6IDI0NzQ5LCAiYmVnaW4iOiAyNDcyNSwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9q
b20uU3RydWN0V2l0aG91dEluaXRpYWxpemVyIn19LCB7ImVuZCI6IDI4NzI1LCAiYmVnaW4iOiAy
ODcyMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aG91dEluaXRpYWxpemVyLnZh
bHVlIn19LCB7ImVuZCI6IDI5ODQ3LCAiYmVnaW4iOiAyOTgyNiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3Qu
bW9qb20uU3RydWN0V2l0aEluaXRpYWxpemVyIn19LCB7ImVuZCI6IDMzNzQ4LCAiYmVnaW4iOiAz
Mzc0MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVz
dC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aEluaXRpYWxpemVyLnZhbHVl
In19LCB7ImVuZCI6IDM0ODg0LCAiYmVnaW4iOiAzNDg1MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9q
b20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRoRGVmYXVsdCJ9fSwgeyJlbmQiOiAzNzAyMywg
ImJlZ2luIjogMzcwMTUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVuaW9uV2l0aEV4dGVuc2li
bGVFbnVtV2l0aERlZmF1bHQudmFsdWUifX0sIHsiZW5kIjogMzcyMDMsICJiZWdpbiI6IDM3MTk0
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVu
dW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5VbmlvbldpdGhFeHRlbnNpYmxlRW51bVdpdGhEZWZh
dWx0LnZhbHVlIn19LCB7ImVuZCI6IDM3MzkzLCAiYmVnaW4iOiAzNzM4NCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5p
dHRlc3QubW9qb20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRoRGVmYXVsdC52YWx1ZSJ9fSwg
eyJlbmQiOiAzODM4NywgImJlZ2luIjogMzgzNTAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVu
aW9uV2l0aEV4dGVuc2libGVFbnVtV2l0aG91dERlZmF1bHQifX0sIHsiZW5kIjogNDA1ODAsICJi
ZWdpbiI6IDQwNTcyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
bW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5VbmlvbldpdGhFeHRlbnNpYmxl
RW51bVdpdGhvdXREZWZhdWx0LnZhbHVlIn19LCB7ImVuZCI6IDQwNzY2LCAiYmVnaW4iOiA0MDc1
NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5l
bnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRob3V0
RGVmYXVsdC52YWx1ZSJ9fSwgeyJlbmQiOiA0MDk1OSwgImJlZ2luIjogNDA5NTAsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0
X3VuaXR0ZXN0Lm1vam9tLlVuaW9uV2l0aEV4dGVuc2libGVFbnVtV2l0aG91dERlZmF1bHQudmFs
dWUifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/