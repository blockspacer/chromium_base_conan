// mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/module_to_downgrade.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.mojomTypesDowngraderUnittest.mojom');



  function Foo_DummyMethod_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Foo_DummyMethod_Params.prototype.initDefaults_ = function() {
  };
  Foo_DummyMethod_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Foo_DummyMethod_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Foo_DummyMethod_Params.encodedSize = codec.kStructHeaderSize + 0;

  Foo_DummyMethod_Params.decode = function(decoder) {
    var packed;
    var val = new Foo_DummyMethod_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Foo_DummyMethod_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Foo_DummyMethod_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DowngradedTestInterface_InterfaceRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_InterfaceRequest_Params.prototype.initDefaults_ = function() {
    this.request = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_InterfaceRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_InterfaceRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_InterfaceRequest_Params.request
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_InterfaceRequest_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_InterfaceRequest_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_InterfaceRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.request =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_InterfaceRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_InterfaceRequest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.request);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_InterfacePtr_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_InterfacePtr_Params.prototype.initDefaults_ = function() {
    this.ptr = new FooPtr();
  };
  DowngradedTestInterface_InterfacePtr_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_InterfacePtr_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_InterfacePtr_Params.ptr
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_InterfacePtr_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_InterfacePtr_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_InterfacePtr_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ptr =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    return val;
  };

  DowngradedTestInterface_InterfacePtr_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_InterfacePtr_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.ptr);
  };
  function DowngradedTestInterface_AssociatedInterfacePtrInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.prototype.initDefaults_ = function() {
    this.associatedPtrInfo = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.associatedPtrInfo
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_AssociatedInterfacePtrInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.associatedPtrInfo =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedPtrInfo);
  };
  function DowngradedTestInterface_AssociatedInterfaceRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_AssociatedInterfaceRequest_Params.prototype.initDefaults_ = function() {
    this.associatedRequest = new associatedBindings.AssociatedInterfaceRequest();
  };
  DowngradedTestInterface_AssociatedInterfaceRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_AssociatedInterfaceRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_AssociatedInterfaceRequest_Params.associatedRequest
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_AssociatedInterfaceRequest_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_AssociatedInterfaceRequest_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_AssociatedInterfaceRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.associatedRequest =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_AssociatedInterfaceRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_AssociatedInterfaceRequest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.associatedRequest);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_PendingReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_PendingReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_PendingReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_PendingReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_PendingReceiver_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_PendingReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_PendingReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_PendingReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_PendingReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_PendingReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_PendingRemote_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_PendingRemote_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
  };
  DowngradedTestInterface_PendingRemote_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_PendingRemote_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_PendingRemote_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_PendingRemote_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_PendingRemote_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_PendingRemote_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    return val;
  };

  DowngradedTestInterface_PendingRemote_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_PendingRemote_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
  };
  function DowngradedTestInterface_PendingAssociatedReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_PendingAssociatedReceiver_Params.prototype.initDefaults_ = function() {
    this.associatedRemote = new associatedBindings.AssociatedInterfaceRequest();
  };
  DowngradedTestInterface_PendingAssociatedReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_PendingAssociatedReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_PendingAssociatedReceiver_Params.associatedRemote
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_PendingAssociatedReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_PendingAssociatedReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_PendingAssociatedReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.associatedRemote =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_PendingAssociatedReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_PendingAssociatedReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.associatedRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_PendingAssociatedRemote_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_PendingAssociatedRemote_Params.prototype.initDefaults_ = function() {
    this.associatedReceiver = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  DowngradedTestInterface_PendingAssociatedRemote_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_PendingAssociatedRemote_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_PendingAssociatedRemote_Params.associatedReceiver
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_PendingAssociatedRemote_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_PendingAssociatedRemote_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_PendingAssociatedRemote_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.associatedReceiver =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  DowngradedTestInterface_PendingAssociatedRemote_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_PendingAssociatedRemote_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedReceiver);
  };
  function DowngradedTestInterface_MultipleParams2_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MultipleParams2_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
    this.receiver = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_MultipleParams2_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MultipleParams2_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams2_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams2_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MultipleParams2_Params.encodedSize = codec.kStructHeaderSize + 16;

  DowngradedTestInterface_MultipleParams2_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MultipleParams2_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_MultipleParams2_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MultipleParams2_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_MultipleParams3_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MultipleParams3_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
    this.receiver = new bindings.InterfaceRequest();
    this.associatedRemote = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  DowngradedTestInterface_MultipleParams3_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MultipleParams3_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams3_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams3_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams3_Params.associatedRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 12, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MultipleParams3_Params.encodedSize = codec.kStructHeaderSize + 24;

  DowngradedTestInterface_MultipleParams3_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MultipleParams3_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.associatedRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_MultipleParams3_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MultipleParams3_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_MultipleParams4_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MultipleParams4_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
    this.receiver = new bindings.InterfaceRequest();
    this.associatedRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.associatedReceiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  DowngradedTestInterface_MultipleParams4_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MultipleParams4_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams4_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams4_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams4_Params.associatedRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 12, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MultipleParams4_Params.associatedReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 20, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MultipleParams4_Params.encodedSize = codec.kStructHeaderSize + 24;

  DowngradedTestInterface_MultipleParams4_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MultipleParams4_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.associatedRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.associatedReceiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    return val;
  };

  DowngradedTestInterface_MultipleParams4_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MultipleParams4_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedRemote);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.associatedReceiver);
  };
  function DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.prototype.initDefaults_ = function() {
    this.data = new FooPtr();
  };
  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.data
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    return val;
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.data);
  };
  function DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.prototype.initDefaults_ = function() {
  };
  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.prototype.initDefaults_ = function() {
    this.data = new FooPtr();
  };
  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.data
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    return val;
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.data);
  };
  function DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_OddSpaces_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_OddSpaces_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
    this.receiver = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_OddSpaces_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_OddSpaces_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_OddSpaces_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_OddSpaces_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_OddSpaces_Params.encodedSize = codec.kStructHeaderSize + 16;

  DowngradedTestInterface_OddSpaces_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_OddSpaces_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_OddSpaces_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_OddSpaces_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DowngradedTestInterface_OddSpacesAndLineBreak_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DowngradedTestInterface_OddSpacesAndLineBreak_Params.prototype.initDefaults_ = function() {
    this.remote = new FooPtr();
    this.receiver = new bindings.InterfaceRequest();
  };
  DowngradedTestInterface_OddSpacesAndLineBreak_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DowngradedTestInterface_OddSpacesAndLineBreak_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_OddSpacesAndLineBreak_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DowngradedTestInterface_OddSpacesAndLineBreak_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DowngradedTestInterface_OddSpacesAndLineBreak_Params.encodedSize = codec.kStructHeaderSize + 16;

  DowngradedTestInterface_OddSpacesAndLineBreak_Params.decode = function(decoder) {
    var packed;
    var val = new DowngradedTestInterface_OddSpacesAndLineBreak_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(FooPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DowngradedTestInterface_OddSpacesAndLineBreak_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DowngradedTestInterface_OddSpacesAndLineBreak_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(FooPtr), val.remote);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kFoo_DummyMethod_Name = 1869693485;

  function FooPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Foo,
                                                   handleOrPtrInfo);
  }

  function FooAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Foo, associatedInterfacePtrInfo);
  }

  FooAssociatedPtr.prototype =
      Object.create(FooPtr.prototype);
  FooAssociatedPtr.prototype.constructor =
      FooAssociatedPtr;

  function FooProxy(receiver) {
    this.receiver_ = receiver;
  }
  FooPtr.prototype.dummyMethod = function() {
    return FooProxy.prototype.dummyMethod
        .apply(this.ptr.getProxy(), arguments);
  };

  FooProxy.prototype.dummyMethod = function() {
    var params_ = new Foo_DummyMethod_Params();
    var builder = new codec.MessageV0Builder(
        kFoo_DummyMethod_Name,
        codec.align(Foo_DummyMethod_Params.encodedSize));
    builder.encodeStruct(Foo_DummyMethod_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FooStub(delegate) {
    this.delegate_ = delegate;
  }
  FooStub.prototype.dummyMethod = function() {
    return this.delegate_ && this.delegate_.dummyMethod && this.delegate_.dummyMethod();
  }

  FooStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFoo_DummyMethod_Name:
      var params = reader.decodeStruct(Foo_DummyMethod_Params);
      this.dummyMethod();
      return true;
    default:
      return false;
    }
  };

  FooStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFooRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFoo_DummyMethod_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Foo_DummyMethod_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFooResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Foo = {
    name: 'mojo.test.mojom_types_downgrader_unittest.mojom.Foo',
    kVersion: 0,
    ptrClass: FooPtr,
    proxyClass: FooProxy,
    stubClass: FooStub,
    validateRequest: validateFooRequest,
    validateResponse: null,
  };
  FooStub.prototype.validator = validateFooRequest;
  FooProxy.prototype.validator = null;
  var kDowngradedTestInterface_InterfaceRequest_Name = 1851083868;
  var kDowngradedTestInterface_InterfacePtr_Name = 1251186146;
  var kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name = 670091102;
  var kDowngradedTestInterface_AssociatedInterfaceRequest_Name = 300880034;
  var kDowngradedTestInterface_PendingReceiver_Name = 1919574243;
  var kDowngradedTestInterface_PendingRemote_Name = 1274925874;
  var kDowngradedTestInterface_PendingAssociatedReceiver_Name = 359363876;
  var kDowngradedTestInterface_PendingAssociatedRemote_Name = 549817001;
  var kDowngradedTestInterface_MultipleParams2_Name = 283928022;
  var kDowngradedTestInterface_MultipleParams3_Name = 1270062235;
  var kDowngradedTestInterface_MultipleParams4_Name = 638989463;
  var kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name = 302922741;
  var kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name = 496383391;
  var kDowngradedTestInterface_OddSpaces_Name = 189884362;
  var kDowngradedTestInterface_OddSpacesAndLineBreak_Name = 499761386;

  function DowngradedTestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DowngradedTestInterface,
                                                   handleOrPtrInfo);
  }

  function DowngradedTestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DowngradedTestInterface, associatedInterfacePtrInfo);
  }

  DowngradedTestInterfaceAssociatedPtr.prototype =
      Object.create(DowngradedTestInterfacePtr.prototype);
  DowngradedTestInterfaceAssociatedPtr.prototype.constructor =
      DowngradedTestInterfaceAssociatedPtr;

  function DowngradedTestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  DowngradedTestInterfacePtr.prototype.interfaceRequest = function() {
    return DowngradedTestInterfaceProxy.prototype.interfaceRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.interfaceRequest = function(request) {
    var params_ = new DowngradedTestInterface_InterfaceRequest_Params();
    params_.request = request;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_InterfaceRequest_Name,
        codec.align(DowngradedTestInterface_InterfaceRequest_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_InterfaceRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.interfacePtr = function() {
    return DowngradedTestInterfaceProxy.prototype.interfacePtr
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.interfacePtr = function(ptr) {
    var params_ = new DowngradedTestInterface_InterfacePtr_Params();
    params_.ptr = ptr;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_InterfacePtr_Name,
        codec.align(DowngradedTestInterface_InterfacePtr_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_InterfacePtr_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.associatedInterfacePtrInfo = function() {
    return DowngradedTestInterfaceProxy.prototype.associatedInterfacePtrInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.associatedInterfacePtrInfo = function(associatedPtrInfo) {
    var params_ = new DowngradedTestInterface_AssociatedInterfacePtrInfo_Params();
    params_.associatedPtrInfo = associatedPtrInfo;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name,
        codec.align(DowngradedTestInterface_AssociatedInterfacePtrInfo_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_AssociatedInterfacePtrInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.associatedInterfaceRequest = function() {
    return DowngradedTestInterfaceProxy.prototype.associatedInterfaceRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.associatedInterfaceRequest = function(associatedRequest) {
    var params_ = new DowngradedTestInterface_AssociatedInterfaceRequest_Params();
    params_.associatedRequest = associatedRequest;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_AssociatedInterfaceRequest_Name,
        codec.align(DowngradedTestInterface_AssociatedInterfaceRequest_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_AssociatedInterfaceRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.pendingReceiver = function() {
    return DowngradedTestInterfaceProxy.prototype.pendingReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.pendingReceiver = function(receiver) {
    var params_ = new DowngradedTestInterface_PendingReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_PendingReceiver_Name,
        codec.align(DowngradedTestInterface_PendingReceiver_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_PendingReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.pendingRemote = function() {
    return DowngradedTestInterfaceProxy.prototype.pendingRemote
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.pendingRemote = function(remote) {
    var params_ = new DowngradedTestInterface_PendingRemote_Params();
    params_.remote = remote;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_PendingRemote_Name,
        codec.align(DowngradedTestInterface_PendingRemote_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_PendingRemote_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.pendingAssociatedReceiver = function() {
    return DowngradedTestInterfaceProxy.prototype.pendingAssociatedReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.pendingAssociatedReceiver = function(associatedRemote) {
    var params_ = new DowngradedTestInterface_PendingAssociatedReceiver_Params();
    params_.associatedRemote = associatedRemote;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_PendingAssociatedReceiver_Name,
        codec.align(DowngradedTestInterface_PendingAssociatedReceiver_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_PendingAssociatedReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.pendingAssociatedRemote = function() {
    return DowngradedTestInterfaceProxy.prototype.pendingAssociatedRemote
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.pendingAssociatedRemote = function(associatedReceiver) {
    var params_ = new DowngradedTestInterface_PendingAssociatedRemote_Params();
    params_.associatedReceiver = associatedReceiver;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_PendingAssociatedRemote_Name,
        codec.align(DowngradedTestInterface_PendingAssociatedRemote_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_PendingAssociatedRemote_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.multipleParams2 = function() {
    return DowngradedTestInterfaceProxy.prototype.multipleParams2
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.multipleParams2 = function(remote, receiver) {
    var params_ = new DowngradedTestInterface_MultipleParams2_Params();
    params_.remote = remote;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_MultipleParams2_Name,
        codec.align(DowngradedTestInterface_MultipleParams2_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_MultipleParams2_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.multipleParams3 = function() {
    return DowngradedTestInterfaceProxy.prototype.multipleParams3
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.multipleParams3 = function(remote, receiver, associatedRemote) {
    var params_ = new DowngradedTestInterface_MultipleParams3_Params();
    params_.remote = remote;
    params_.receiver = receiver;
    params_.associatedRemote = associatedRemote;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_MultipleParams3_Name,
        codec.align(DowngradedTestInterface_MultipleParams3_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_MultipleParams3_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.multipleParams4 = function() {
    return DowngradedTestInterfaceProxy.prototype.multipleParams4
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.multipleParams4 = function(remote, receiver, associatedRemote, associatedReceiver) {
    var params_ = new DowngradedTestInterface_MultipleParams4_Params();
    params_.remote = remote;
    params_.receiver = receiver;
    params_.associatedRemote = associatedRemote;
    params_.associatedReceiver = associatedReceiver;
    var builder = new codec.MessageV2Builder(
        kDowngradedTestInterface_MultipleParams4_Name,
        codec.align(DowngradedTestInterface_MultipleParams4_Params.encodedSize));
    builder.setPayload(DowngradedTestInterface_MultipleParams4_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.methodWithResponseCallbackOneLine = function() {
    return DowngradedTestInterfaceProxy.prototype.methodWithResponseCallbackOneLine
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.methodWithResponseCallbackOneLine = function(data) {
    var params_ = new DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params();
    params_.data = data;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name,
          codec.align(DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DowngradedTestInterfacePtr.prototype.methodWithResponseCallbackTwoLines = function() {
    return DowngradedTestInterfaceProxy.prototype.methodWithResponseCallbackTwoLines
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.methodWithResponseCallbackTwoLines = function(data) {
    var params_ = new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params();
    params_.data = data;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name,
          codec.align(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DowngradedTestInterfacePtr.prototype.oddSpaces = function() {
    return DowngradedTestInterfaceProxy.prototype.oddSpaces
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.oddSpaces = function(remote, receiver) {
    var params_ = new DowngradedTestInterface_OddSpaces_Params();
    params_.remote = remote;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_OddSpaces_Name,
        codec.align(DowngradedTestInterface_OddSpaces_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_OddSpaces_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DowngradedTestInterfacePtr.prototype.oddSpacesAndLineBreak = function() {
    return DowngradedTestInterfaceProxy.prototype.oddSpacesAndLineBreak
        .apply(this.ptr.getProxy(), arguments);
  };

  DowngradedTestInterfaceProxy.prototype.oddSpacesAndLineBreak = function(remote, receiver) {
    var params_ = new DowngradedTestInterface_OddSpacesAndLineBreak_Params();
    params_.remote = remote;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDowngradedTestInterface_OddSpacesAndLineBreak_Name,
        codec.align(DowngradedTestInterface_OddSpacesAndLineBreak_Params.encodedSize));
    builder.encodeStruct(DowngradedTestInterface_OddSpacesAndLineBreak_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DowngradedTestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  DowngradedTestInterfaceStub.prototype.interfaceRequest = function(request) {
    return this.delegate_ && this.delegate_.interfaceRequest && this.delegate_.interfaceRequest(request);
  }
  DowngradedTestInterfaceStub.prototype.interfacePtr = function(ptr) {
    return this.delegate_ && this.delegate_.interfacePtr && this.delegate_.interfacePtr(ptr);
  }
  DowngradedTestInterfaceStub.prototype.associatedInterfacePtrInfo = function(associatedPtrInfo) {
    return this.delegate_ && this.delegate_.associatedInterfacePtrInfo && this.delegate_.associatedInterfacePtrInfo(associatedPtrInfo);
  }
  DowngradedTestInterfaceStub.prototype.associatedInterfaceRequest = function(associatedRequest) {
    return this.delegate_ && this.delegate_.associatedInterfaceRequest && this.delegate_.associatedInterfaceRequest(associatedRequest);
  }
  DowngradedTestInterfaceStub.prototype.pendingReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.pendingReceiver && this.delegate_.pendingReceiver(receiver);
  }
  DowngradedTestInterfaceStub.prototype.pendingRemote = function(remote) {
    return this.delegate_ && this.delegate_.pendingRemote && this.delegate_.pendingRemote(remote);
  }
  DowngradedTestInterfaceStub.prototype.pendingAssociatedReceiver = function(associatedRemote) {
    return this.delegate_ && this.delegate_.pendingAssociatedReceiver && this.delegate_.pendingAssociatedReceiver(associatedRemote);
  }
  DowngradedTestInterfaceStub.prototype.pendingAssociatedRemote = function(associatedReceiver) {
    return this.delegate_ && this.delegate_.pendingAssociatedRemote && this.delegate_.pendingAssociatedRemote(associatedReceiver);
  }
  DowngradedTestInterfaceStub.prototype.multipleParams2 = function(remote, receiver) {
    return this.delegate_ && this.delegate_.multipleParams2 && this.delegate_.multipleParams2(remote, receiver);
  }
  DowngradedTestInterfaceStub.prototype.multipleParams3 = function(remote, receiver, associatedRemote) {
    return this.delegate_ && this.delegate_.multipleParams3 && this.delegate_.multipleParams3(remote, receiver, associatedRemote);
  }
  DowngradedTestInterfaceStub.prototype.multipleParams4 = function(remote, receiver, associatedRemote, associatedReceiver) {
    return this.delegate_ && this.delegate_.multipleParams4 && this.delegate_.multipleParams4(remote, receiver, associatedRemote, associatedReceiver);
  }
  DowngradedTestInterfaceStub.prototype.methodWithResponseCallbackOneLine = function(data) {
    return this.delegate_ && this.delegate_.methodWithResponseCallbackOneLine && this.delegate_.methodWithResponseCallbackOneLine(data);
  }
  DowngradedTestInterfaceStub.prototype.methodWithResponseCallbackTwoLines = function(data) {
    return this.delegate_ && this.delegate_.methodWithResponseCallbackTwoLines && this.delegate_.methodWithResponseCallbackTwoLines(data);
  }
  DowngradedTestInterfaceStub.prototype.oddSpaces = function(remote, receiver) {
    return this.delegate_ && this.delegate_.oddSpaces && this.delegate_.oddSpaces(remote, receiver);
  }
  DowngradedTestInterfaceStub.prototype.oddSpacesAndLineBreak = function(remote, receiver) {
    return this.delegate_ && this.delegate_.oddSpacesAndLineBreak && this.delegate_.oddSpacesAndLineBreak(remote, receiver);
  }

  DowngradedTestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDowngradedTestInterface_InterfaceRequest_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_InterfaceRequest_Params);
      this.interfaceRequest(params.request);
      return true;
    case kDowngradedTestInterface_InterfacePtr_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_InterfacePtr_Params);
      this.interfacePtr(params.ptr);
      return true;
    case kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_AssociatedInterfacePtrInfo_Params);
      this.associatedInterfacePtrInfo(params.associatedPtrInfo);
      return true;
    case kDowngradedTestInterface_AssociatedInterfaceRequest_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_AssociatedInterfaceRequest_Params);
      this.associatedInterfaceRequest(params.associatedRequest);
      return true;
    case kDowngradedTestInterface_PendingReceiver_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_PendingReceiver_Params);
      this.pendingReceiver(params.receiver);
      return true;
    case kDowngradedTestInterface_PendingRemote_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_PendingRemote_Params);
      this.pendingRemote(params.remote);
      return true;
    case kDowngradedTestInterface_PendingAssociatedReceiver_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_PendingAssociatedReceiver_Params);
      this.pendingAssociatedReceiver(params.associatedRemote);
      return true;
    case kDowngradedTestInterface_PendingAssociatedRemote_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_PendingAssociatedRemote_Params);
      this.pendingAssociatedRemote(params.associatedReceiver);
      return true;
    case kDowngradedTestInterface_MultipleParams2_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_MultipleParams2_Params);
      this.multipleParams2(params.remote, params.receiver);
      return true;
    case kDowngradedTestInterface_MultipleParams3_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_MultipleParams3_Params);
      this.multipleParams3(params.remote, params.receiver, params.associatedRemote);
      return true;
    case kDowngradedTestInterface_MultipleParams4_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_MultipleParams4_Params);
      this.multipleParams4(params.remote, params.receiver, params.associatedRemote, params.associatedReceiver);
      return true;
    case kDowngradedTestInterface_OddSpaces_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_OddSpaces_Params);
      this.oddSpaces(params.remote, params.receiver);
      return true;
    case kDowngradedTestInterface_OddSpacesAndLineBreak_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_OddSpacesAndLineBreak_Params);
      this.oddSpacesAndLineBreak(params.remote, params.receiver);
      return true;
    default:
      return false;
    }
  };

  DowngradedTestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params);
      this.methodWithResponseCallbackOneLine(params.data).then(function(response) {
        var responseParams =
            new DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name,
            codec.align(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name:
      var params = reader.decodeStruct(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params);
      this.methodWithResponseCallbackTwoLines(params.data).then(function(response) {
        var responseParams =
            new DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams();
        responseParams.receiver = response.receiver;
        var builder = new codec.MessageV1Builder(
            kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name,
            codec.align(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDowngradedTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDowngradedTestInterface_InterfaceRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_InterfaceRequest_Params;
      break;
      case kDowngradedTestInterface_InterfacePtr_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_InterfacePtr_Params;
      break;
      case kDowngradedTestInterface_AssociatedInterfacePtrInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_AssociatedInterfacePtrInfo_Params;
      break;
      case kDowngradedTestInterface_AssociatedInterfaceRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_AssociatedInterfaceRequest_Params;
      break;
      case kDowngradedTestInterface_PendingReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_PendingReceiver_Params;
      break;
      case kDowngradedTestInterface_PendingRemote_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_PendingRemote_Params;
      break;
      case kDowngradedTestInterface_PendingAssociatedReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_PendingAssociatedReceiver_Params;
      break;
      case kDowngradedTestInterface_PendingAssociatedRemote_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_PendingAssociatedRemote_Params;
      break;
      case kDowngradedTestInterface_MultipleParams2_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_MultipleParams2_Params;
      break;
      case kDowngradedTestInterface_MultipleParams3_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_MultipleParams3_Params;
      break;
      case kDowngradedTestInterface_MultipleParams4_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_MultipleParams4_Params;
      break;
      case kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name:
        if (message.expectsResponse())
          paramsClass = DowngradedTestInterface_MethodWithResponseCallbackOneLine_Params;
      break;
      case kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name:
        if (message.expectsResponse())
          paramsClass = DowngradedTestInterface_MethodWithResponseCallbackTwoLines_Params;
      break;
      case kDowngradedTestInterface_OddSpaces_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_OddSpaces_Params;
      break;
      case kDowngradedTestInterface_OddSpacesAndLineBreak_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DowngradedTestInterface_OddSpacesAndLineBreak_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDowngradedTestInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDowngradedTestInterface_MethodWithResponseCallbackOneLine_Name:
        if (message.isResponse())
          paramsClass = DowngradedTestInterface_MethodWithResponseCallbackOneLine_ResponseParams;
        break;
      case kDowngradedTestInterface_MethodWithResponseCallbackTwoLines_Name:
        if (message.isResponse())
          paramsClass = DowngradedTestInterface_MethodWithResponseCallbackTwoLines_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DowngradedTestInterface = {
    name: 'mojo.test.mojom_types_downgrader_unittest.mojom.DowngradedTestInterface',
    kVersion: 0,
    ptrClass: DowngradedTestInterfacePtr,
    proxyClass: DowngradedTestInterfaceProxy,
    stubClass: DowngradedTestInterfaceStub,
    validateRequest: validateDowngradedTestInterfaceRequest,
    validateResponse: validateDowngradedTestInterfaceResponse,
  };
  DowngradedTestInterfaceStub.prototype.validator = validateDowngradedTestInterfaceRequest;
  DowngradedTestInterfaceProxy.prototype.validator = validateDowngradedTestInterfaceResponse;
  exports.Foo = Foo;
  exports.FooPtr = FooPtr;
  exports.FooAssociatedPtr = FooAssociatedPtr;
  exports.DowngradedTestInterface = DowngradedTestInterface;
  exports.DowngradedTestInterfacePtr = DowngradedTestInterfacePtr;
  exports.DowngradedTestInterfaceAssociatedPtr = DowngradedTestInterfaceAssociatedPtr;
})();