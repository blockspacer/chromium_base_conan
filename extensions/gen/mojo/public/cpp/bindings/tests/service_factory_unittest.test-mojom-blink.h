// mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/service_factory_unittest.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace service_factory_unittest {
namespace mojom {
namespace blink {

class TestService1Proxy;

template <typename ImplRefTraits>
class TestService1Stub;

class TestService1RequestValidator;
class TestService1ResponseValidator;


// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1
class  TestService1
    : public TestService1InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestService1InterfaceBase;
  using Proxy_ = TestService1Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestService1Stub<ImplRefTraits>;

  using RequestValidator_ = TestService1RequestValidator;
  using ResponseValidator_ = TestService1ResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetIdentityMinVersion = 0,
    kQuitMinVersion = 0,
  };
  virtual ~TestService1() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.GetIdentity
  virtual bool GetIdentity(int32_t* out_id);

  using GetIdentityCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.GetIdentity
  virtual void GetIdentity(GetIdentityCallback callback) = 0;

  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.Quit
  virtual void Quit() = 0;
};

class TestService2Proxy;

template <typename ImplRefTraits>
class TestService2Stub;

class TestService2RequestValidator;
class TestService2ResponseValidator;


// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2
class  TestService2
    : public TestService2InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = TestService2InterfaceBase;
  using Proxy_ = TestService2Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestService2Stub<ImplRefTraits>;

  using RequestValidator_ = TestService2RequestValidator;
  using ResponseValidator_ = TestService2ResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetIdentityMinVersion = 0,
  };
  virtual ~TestService2() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2.GetIdentity
  virtual bool GetIdentity(int32_t* out_id);

  using GetIdentityCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2.GetIdentity
  virtual void GetIdentity(GetIdentityCallback callback) = 0;
};

class TestService3Proxy;

template <typename ImplRefTraits>
class TestService3Stub;

class TestService3RequestValidator;


// @generated_from: mojo.test.service_factory_unittest.mojom.TestService3
class  TestService3
    : public TestService3InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestService3InterfaceBase;
  using Proxy_ = TestService3Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestService3Stub<ImplRefTraits>;

  using RequestValidator_ = TestService3RequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~TestService3() {}
};



// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1
class  TestService1Proxy
    : public TestService1 {
 public:
  using InterfaceType = TestService1;

  explicit TestService1Proxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.GetIdentity
  bool GetIdentity(int32_t* out_id) final;
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.GetIdentity
  void GetIdentity(GetIdentityCallback callback) final;
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService1.Quit
  void Quit() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2
class  TestService2Proxy
    : public TestService2 {
 public:
  using InterfaceType = TestService2;

  explicit TestService2Proxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2.GetIdentity
  bool GetIdentity(int32_t* out_id) final;
  
// @generated_from: mojo.test.service_factory_unittest.mojom.TestService2.GetIdentity
  void GetIdentity(GetIdentityCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.service_factory_unittest.mojom.TestService3
class  TestService3Proxy
    : public TestService3 {
 public:
  using InterfaceType = TestService3;

  explicit TestService3Proxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestService1StubDispatch {
 public:
  static bool Accept(TestService1* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestService1* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestService1>>
class TestService1Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestService1Stub() {}
  ~TestService1Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService1StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService1StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestService2StubDispatch {
 public:
  static bool Accept(TestService2* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestService2* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestService2>>
class TestService2Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestService2Stub() {}
  ~TestService2Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService2StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService2StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestService3StubDispatch {
 public:
  static bool Accept(TestService3* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestService3* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestService3>>
class TestService3Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestService3Stub() {}
  ~TestService3Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService3StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestService3StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestService1RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestService2RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestService3RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestService1ResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestService2ResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace service_factory_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_SERVICE_FACTORY_UNITTEST_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI4NiwgImJlZ2luIjogMjI3NCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5zZXJ2aWNlX2ZhY3RvcnlfdW5pdHRl
c3QubW9qb20uVGVzdFNlcnZpY2UxIn19LCB7ImVuZCI6IDMxNzcsICJiZWdpbiI6IDMxNjYsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Quc2Vydmlj
ZV9mYWN0b3J5X3VuaXR0ZXN0Lm1vam9tLlRlc3RTZXJ2aWNlMS5HZXRJZGVudGl0eSJ9fSwgeyJl
bmQiOiAzMzc3LCAiYmVnaW4iOiAzMzY2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0LnNlcnZpY2VfZmFjdG9yeV91bml0dGVzdC5tb2pvbS5UZXN0
U2VydmljZTEuR2V0SWRlbnRpdHkifX0sIHsiZW5kIjogMzUxNSwgImJlZ2luIjogMzUxMSwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5zZXJ2aWNl
X2ZhY3RvcnlfdW5pdHRlc3QubW9qb20uVGVzdFNlcnZpY2UxLlF1aXQifX0sIHsiZW5kIjogMzc4
MCwgImJlZ2luIjogMzc2OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5zZXJ2aWNlX2ZhY3RvcnlfdW5pdHRlc3QubW9qb20uVGVzdFNlcnZpY2Uy
In19LCB7ImVuZCI6IDQ2NDYsICJiZWdpbiI6IDQ2MzUsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Quc2VydmljZV9mYWN0b3J5X3VuaXR0ZXN0Lm1v
am9tLlRlc3RTZXJ2aWNlMi5HZXRJZGVudGl0eSJ9fSwgeyJlbmQiOiA0ODQ2LCAiYmVnaW4iOiA0
ODM1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2Rl
ZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2No
cm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0
LnNlcnZpY2VfZmFjdG9yeV91bml0dGVzdC5tb2pvbS5UZXN0U2VydmljZTIuR2V0SWRlbnRpdHki
fX0sIHsiZW5kIjogNTEwMiwgImJlZ2luIjogNTA5MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5zZXJ2aWNlX2ZhY3RvcnlfdW5pdHRlc3QubW9q
b20uVGVzdFNlcnZpY2UzIn19LCB7ImVuZCI6IDYwNDQsICJiZWdpbiI6IDYwMzMsICJlZGdlIjog
IiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFt
ZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwg
Imxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Quc2VydmljZV9mYWN0
b3J5X3VuaXR0ZXN0Lm1vam9tLlRlc3RTZXJ2aWNlMS5HZXRJZGVudGl0eSJ9fSwgeyJlbmQiOiA2
MTc2LCAiYmVnaW4iOiA2MTY1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LnNlcnZpY2VfZmFjdG9yeV91bml0dGVzdC5tb2pvbS5UZXN0U2Vydmlj
ZTEuR2V0SWRlbnRpdHkifX0sIHsiZW5kIjogNjMwNywgImJlZ2luIjogNjMwMywgImVkZ2UiOiAi
JS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1l
IjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAi
bGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5zZXJ2aWNlX2ZhY3Rv
cnlfdW5pdHRlc3QubW9qb20uVGVzdFNlcnZpY2UxLlF1aXQifX0sIHsiZW5kIjogNjc0MSwgImJl
Z2luIjogNjczMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5zZXJ2aWNlX2ZhY3RvcnlfdW5pdHRlc3QubW9qb20uVGVzdFNlcnZpY2UyLkdldElk
ZW50aXR5In19LCB7ImVuZCI6IDY4NzMsICJiZWdpbiI6IDY4NjIsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3Quc2VydmljZV9mYWN0b3J5X3VuaXR0
ZXN0Lm1vam9tLlRlc3RTZXJ2aWNlMi5HZXRJZGVudGl0eSJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/