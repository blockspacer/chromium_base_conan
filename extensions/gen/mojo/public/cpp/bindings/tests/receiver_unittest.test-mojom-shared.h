// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-shared-internal.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {


}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {
// Interface base classes. They are used for type safety check.
class TestGenericBinderInterfaceBase {};

using TestGenericBinderPtrDataView =
    mojo::InterfacePtrDataView<TestGenericBinderInterfaceBase>;
using TestGenericBinderRequestDataView =
    mojo::InterfaceRequestDataView<TestGenericBinderInterfaceBase>;
using TestGenericBinderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestGenericBinderInterfaceBase>;
using TestGenericBinderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestGenericBinderInterfaceBase>;
class TestInterface1InterfaceBase {};

using TestInterface1PtrDataView =
    mojo::InterfacePtrDataView<TestInterface1InterfaceBase>;
using TestInterface1RequestDataView =
    mojo::InterfaceRequestDataView<TestInterface1InterfaceBase>;
using TestInterface1AssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestInterface1InterfaceBase>;
using TestInterface1AssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestInterface1InterfaceBase>;
class TestInterface2InterfaceBase {};

using TestInterface2PtrDataView =
    mojo::InterfacePtrDataView<TestInterface2InterfaceBase>;
using TestInterface2RequestDataView =
    mojo::InterfaceRequestDataView<TestInterface2InterfaceBase>;
using TestInterface2AssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<TestInterface2InterfaceBase>;
using TestInterface2AssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<TestInterface2InterfaceBase>;
class RebindTestInterfaceInterfaceBase {};

using RebindTestInterfacePtrDataView =
    mojo::InterfacePtrDataView<RebindTestInterfaceInterfaceBase>;
using RebindTestInterfaceRequestDataView =
    mojo::InterfaceRequestDataView<RebindTestInterfaceInterfaceBase>;
using RebindTestInterfaceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RebindTestInterfaceInterfaceBase>;
using RebindTestInterfaceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RebindTestInterfaceInterfaceBase>;


}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

namespace std {

}  // namespace std

namespace mojo {

}  // namespace mojo


namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {


}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW10sICJ0eXBlIjogImt5dGhlMCJ9
*/