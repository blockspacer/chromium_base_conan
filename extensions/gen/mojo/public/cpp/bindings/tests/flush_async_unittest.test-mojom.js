// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.flushAsyncUnittest.mojom');



  function Writer_Put_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Writer_Put_Params.prototype.initDefaults_ = function() {
    this.key = null;
    this.value = null;
  };
  Writer_Put_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Writer_Put_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Writer_Put_Params.key
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Writer_Put_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Writer_Put_Params.encodedSize = codec.kStructHeaderSize + 16;

  Writer_Put_Params.decode = function(decoder) {
    var packed;
    var val = new Writer_Put_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Writer_Put_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Writer_Put_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.key);
    encoder.encodeStruct(codec.String, val.value);
  };
  function KeyValueStoreClient_OnSnapshotTaken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyValueStoreClient_OnSnapshotTaken_Params.prototype.initDefaults_ = function() {
  };
  KeyValueStoreClient_OnSnapshotTaken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyValueStoreClient_OnSnapshotTaken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyValueStoreClient_OnSnapshotTaken_Params.encodedSize = codec.kStructHeaderSize + 0;

  KeyValueStoreClient_OnSnapshotTaken_Params.decode = function(decoder) {
    var packed;
    var val = new KeyValueStoreClient_OnSnapshotTaken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  KeyValueStoreClient_OnSnapshotTaken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyValueStoreClient_OnSnapshotTaken_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function KeyValueStore_SetClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyValueStore_SetClient_Params.prototype.initDefaults_ = function() {
    this.client = new KeyValueStoreClientPtr();
  };
  KeyValueStore_SetClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyValueStore_SetClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyValueStore_SetClient_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyValueStore_SetClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  KeyValueStore_SetClient_Params.decode = function(decoder) {
    var packed;
    var val = new KeyValueStore_SetClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(new codec.Interface(KeyValueStoreClientPtr));
    return val;
  };

  KeyValueStore_SetClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyValueStore_SetClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(KeyValueStoreClientPtr), val.client);
  };
  function KeyValueStore_BindWriter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyValueStore_BindWriter_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  KeyValueStore_BindWriter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyValueStore_BindWriter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyValueStore_BindWriter_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyValueStore_BindWriter_Params.encodedSize = codec.kStructHeaderSize + 8;

  KeyValueStore_BindWriter_Params.decode = function(decoder) {
    var packed;
    var val = new KeyValueStore_BindWriter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  KeyValueStore_BindWriter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyValueStore_BindWriter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function KeyValueStore_GetSnapshot_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyValueStore_GetSnapshot_Params.prototype.initDefaults_ = function() {
  };
  KeyValueStore_GetSnapshot_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyValueStore_GetSnapshot_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyValueStore_GetSnapshot_Params.encodedSize = codec.kStructHeaderSize + 0;

  KeyValueStore_GetSnapshot_Params.decode = function(decoder) {
    var packed;
    var val = new KeyValueStore_GetSnapshot_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  KeyValueStore_GetSnapshot_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyValueStore_GetSnapshot_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function KeyValueStore_GetSnapshot_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyValueStore_GetSnapshot_ResponseParams.prototype.initDefaults_ = function() {
    this.entries = null;
  };
  KeyValueStore_GetSnapshot_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyValueStore_GetSnapshot_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyValueStore_GetSnapshot_ResponseParams.entries
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.String, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyValueStore_GetSnapshot_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  KeyValueStore_GetSnapshot_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new KeyValueStore_GetSnapshot_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.entries =
        decoder.decodeMapPointer(codec.String, codec.String);
    return val;
  };

  KeyValueStore_GetSnapshot_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyValueStore_GetSnapshot_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, codec.String, val.entries);
  };
  function Pinger_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Pinger_Ping_Params.prototype.initDefaults_ = function() {
  };
  Pinger_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Pinger_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Pinger_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  Pinger_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new Pinger_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Pinger_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Pinger_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Pinger_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Pinger_Ping_ResponseParams.prototype.initDefaults_ = function() {
  };
  Pinger_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Pinger_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Pinger_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Pinger_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Pinger_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Pinger_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Pinger_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kWriter_Put_Name = 763846348;

  function WriterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Writer,
                                                   handleOrPtrInfo);
  }

  function WriterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Writer, associatedInterfacePtrInfo);
  }

  WriterAssociatedPtr.prototype =
      Object.create(WriterPtr.prototype);
  WriterAssociatedPtr.prototype.constructor =
      WriterAssociatedPtr;

  function WriterProxy(receiver) {
    this.receiver_ = receiver;
  }
  WriterPtr.prototype.put = function() {
    return WriterProxy.prototype.put
        .apply(this.ptr.getProxy(), arguments);
  };

  WriterProxy.prototype.put = function(key, value) {
    var params_ = new Writer_Put_Params();
    params_.key = key;
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kWriter_Put_Name,
        codec.align(Writer_Put_Params.encodedSize));
    builder.encodeStruct(Writer_Put_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WriterStub(delegate) {
    this.delegate_ = delegate;
  }
  WriterStub.prototype.put = function(key, value) {
    return this.delegate_ && this.delegate_.put && this.delegate_.put(key, value);
  }

  WriterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWriter_Put_Name:
      var params = reader.decodeStruct(Writer_Put_Params);
      this.put(params.key, params.value);
      return true;
    default:
      return false;
    }
  };

  WriterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWriterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWriter_Put_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Writer_Put_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWriterResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Writer = {
    name: 'mojo.test.flush_async_unittest.mojom.Writer',
    kVersion: 0,
    ptrClass: WriterPtr,
    proxyClass: WriterProxy,
    stubClass: WriterStub,
    validateRequest: validateWriterRequest,
    validateResponse: null,
  };
  WriterStub.prototype.validator = validateWriterRequest;
  WriterProxy.prototype.validator = null;
  var kKeyValueStoreClient_OnSnapshotTaken_Name = 726138006;

  function KeyValueStoreClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(KeyValueStoreClient,
                                                   handleOrPtrInfo);
  }

  function KeyValueStoreClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        KeyValueStoreClient, associatedInterfacePtrInfo);
  }

  KeyValueStoreClientAssociatedPtr.prototype =
      Object.create(KeyValueStoreClientPtr.prototype);
  KeyValueStoreClientAssociatedPtr.prototype.constructor =
      KeyValueStoreClientAssociatedPtr;

  function KeyValueStoreClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  KeyValueStoreClientPtr.prototype.onSnapshotTaken = function() {
    return KeyValueStoreClientProxy.prototype.onSnapshotTaken
        .apply(this.ptr.getProxy(), arguments);
  };

  KeyValueStoreClientProxy.prototype.onSnapshotTaken = function() {
    var params_ = new KeyValueStoreClient_OnSnapshotTaken_Params();
    var builder = new codec.MessageV0Builder(
        kKeyValueStoreClient_OnSnapshotTaken_Name,
        codec.align(KeyValueStoreClient_OnSnapshotTaken_Params.encodedSize));
    builder.encodeStruct(KeyValueStoreClient_OnSnapshotTaken_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function KeyValueStoreClientStub(delegate) {
    this.delegate_ = delegate;
  }
  KeyValueStoreClientStub.prototype.onSnapshotTaken = function() {
    return this.delegate_ && this.delegate_.onSnapshotTaken && this.delegate_.onSnapshotTaken();
  }

  KeyValueStoreClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kKeyValueStoreClient_OnSnapshotTaken_Name:
      var params = reader.decodeStruct(KeyValueStoreClient_OnSnapshotTaken_Params);
      this.onSnapshotTaken();
      return true;
    default:
      return false;
    }
  };

  KeyValueStoreClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateKeyValueStoreClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kKeyValueStoreClient_OnSnapshotTaken_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = KeyValueStoreClient_OnSnapshotTaken_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateKeyValueStoreClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var KeyValueStoreClient = {
    name: 'mojo.test.flush_async_unittest.mojom.KeyValueStoreClient',
    kVersion: 0,
    ptrClass: KeyValueStoreClientPtr,
    proxyClass: KeyValueStoreClientProxy,
    stubClass: KeyValueStoreClientStub,
    validateRequest: validateKeyValueStoreClientRequest,
    validateResponse: null,
  };
  KeyValueStoreClientStub.prototype.validator = validateKeyValueStoreClientRequest;
  KeyValueStoreClientProxy.prototype.validator = null;
  var kKeyValueStore_SetClient_Name = 688579046;
  var kKeyValueStore_BindWriter_Name = 1549126462;
  var kKeyValueStore_GetSnapshot_Name = 671282423;

  function KeyValueStorePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(KeyValueStore,
                                                   handleOrPtrInfo);
  }

  function KeyValueStoreAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        KeyValueStore, associatedInterfacePtrInfo);
  }

  KeyValueStoreAssociatedPtr.prototype =
      Object.create(KeyValueStorePtr.prototype);
  KeyValueStoreAssociatedPtr.prototype.constructor =
      KeyValueStoreAssociatedPtr;

  function KeyValueStoreProxy(receiver) {
    this.receiver_ = receiver;
  }
  KeyValueStorePtr.prototype.setClient = function() {
    return KeyValueStoreProxy.prototype.setClient
        .apply(this.ptr.getProxy(), arguments);
  };

  KeyValueStoreProxy.prototype.setClient = function(client) {
    var params_ = new KeyValueStore_SetClient_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kKeyValueStore_SetClient_Name,
        codec.align(KeyValueStore_SetClient_Params.encodedSize));
    builder.encodeStruct(KeyValueStore_SetClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  KeyValueStorePtr.prototype.bindWriter = function() {
    return KeyValueStoreProxy.prototype.bindWriter
        .apply(this.ptr.getProxy(), arguments);
  };

  KeyValueStoreProxy.prototype.bindWriter = function(receiver) {
    var params_ = new KeyValueStore_BindWriter_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kKeyValueStore_BindWriter_Name,
        codec.align(KeyValueStore_BindWriter_Params.encodedSize));
    builder.encodeStruct(KeyValueStore_BindWriter_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  KeyValueStorePtr.prototype.getSnapshot = function() {
    return KeyValueStoreProxy.prototype.getSnapshot
        .apply(this.ptr.getProxy(), arguments);
  };

  KeyValueStoreProxy.prototype.getSnapshot = function() {
    var params_ = new KeyValueStore_GetSnapshot_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kKeyValueStore_GetSnapshot_Name,
          codec.align(KeyValueStore_GetSnapshot_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(KeyValueStore_GetSnapshot_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(KeyValueStore_GetSnapshot_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function KeyValueStoreStub(delegate) {
    this.delegate_ = delegate;
  }
  KeyValueStoreStub.prototype.setClient = function(client) {
    return this.delegate_ && this.delegate_.setClient && this.delegate_.setClient(client);
  }
  KeyValueStoreStub.prototype.bindWriter = function(receiver) {
    return this.delegate_ && this.delegate_.bindWriter && this.delegate_.bindWriter(receiver);
  }
  KeyValueStoreStub.prototype.getSnapshot = function() {
    return this.delegate_ && this.delegate_.getSnapshot && this.delegate_.getSnapshot();
  }

  KeyValueStoreStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kKeyValueStore_SetClient_Name:
      var params = reader.decodeStruct(KeyValueStore_SetClient_Params);
      this.setClient(params.client);
      return true;
    case kKeyValueStore_BindWriter_Name:
      var params = reader.decodeStruct(KeyValueStore_BindWriter_Params);
      this.bindWriter(params.receiver);
      return true;
    default:
      return false;
    }
  };

  KeyValueStoreStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kKeyValueStore_GetSnapshot_Name:
      var params = reader.decodeStruct(KeyValueStore_GetSnapshot_Params);
      this.getSnapshot().then(function(response) {
        var responseParams =
            new KeyValueStore_GetSnapshot_ResponseParams();
        responseParams.entries = response.entries;
        var builder = new codec.MessageV1Builder(
            kKeyValueStore_GetSnapshot_Name,
            codec.align(KeyValueStore_GetSnapshot_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(KeyValueStore_GetSnapshot_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateKeyValueStoreRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kKeyValueStore_SetClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = KeyValueStore_SetClient_Params;
      break;
      case kKeyValueStore_BindWriter_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = KeyValueStore_BindWriter_Params;
      break;
      case kKeyValueStore_GetSnapshot_Name:
        if (message.expectsResponse())
          paramsClass = KeyValueStore_GetSnapshot_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateKeyValueStoreResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kKeyValueStore_GetSnapshot_Name:
        if (message.isResponse())
          paramsClass = KeyValueStore_GetSnapshot_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var KeyValueStore = {
    name: 'mojo.test.flush_async_unittest.mojom.KeyValueStore',
    kVersion: 0,
    ptrClass: KeyValueStorePtr,
    proxyClass: KeyValueStoreProxy,
    stubClass: KeyValueStoreStub,
    validateRequest: validateKeyValueStoreRequest,
    validateResponse: validateKeyValueStoreResponse,
  };
  KeyValueStoreStub.prototype.validator = validateKeyValueStoreRequest;
  KeyValueStoreProxy.prototype.validator = validateKeyValueStoreResponse;
  var kPinger_Ping_Name = 773139529;

  function PingerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Pinger,
                                                   handleOrPtrInfo);
  }

  function PingerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Pinger, associatedInterfacePtrInfo);
  }

  PingerAssociatedPtr.prototype =
      Object.create(PingerPtr.prototype);
  PingerAssociatedPtr.prototype.constructor =
      PingerAssociatedPtr;

  function PingerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PingerPtr.prototype.ping = function() {
    return PingerProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  PingerProxy.prototype.ping = function() {
    var params_ = new Pinger_Ping_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPinger_Ping_Name,
          codec.align(Pinger_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Pinger_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Pinger_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PingerStub(delegate) {
    this.delegate_ = delegate;
  }
  PingerStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }

  PingerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PingerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPinger_Ping_Name:
      var params = reader.decodeStruct(Pinger_Ping_Params);
      this.ping().then(function(response) {
        var responseParams =
            new Pinger_Ping_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPinger_Ping_Name,
            codec.align(Pinger_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Pinger_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePingerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPinger_Ping_Name:
        if (message.expectsResponse())
          paramsClass = Pinger_Ping_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePingerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPinger_Ping_Name:
        if (message.isResponse())
          paramsClass = Pinger_Ping_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Pinger = {
    name: 'mojo.test.flush_async_unittest.mojom.Pinger',
    kVersion: 0,
    ptrClass: PingerPtr,
    proxyClass: PingerProxy,
    stubClass: PingerStub,
    validateRequest: validatePingerRequest,
    validateResponse: validatePingerResponse,
  };
  PingerStub.prototype.validator = validatePingerRequest;
  PingerProxy.prototype.validator = validatePingerResponse;
  exports.Writer = Writer;
  exports.WriterPtr = WriterPtr;
  exports.WriterAssociatedPtr = WriterAssociatedPtr;
  exports.KeyValueStoreClient = KeyValueStoreClient;
  exports.KeyValueStoreClientPtr = KeyValueStoreClientPtr;
  exports.KeyValueStoreClientAssociatedPtr = KeyValueStoreClientAssociatedPtr;
  exports.KeyValueStore = KeyValueStore;
  exports.KeyValueStorePtr = KeyValueStorePtr;
  exports.KeyValueStoreAssociatedPtr = KeyValueStoreAssociatedPtr;
  exports.Pinger = Pinger;
  exports.PingerPtr = PingerPtr;
  exports.PingerAssociatedPtr = PingerAssociatedPtr;
})();