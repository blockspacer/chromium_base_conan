// mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace remote_unittest {
namespace mojom {
namespace blink {


void SharedRemoteSyncTestInterceptorForTesting::Fetch(FetchCallback callback) {
  GetForwardingInterface()->Fetch(std::move(callback));
}
SharedRemoteSyncTestAsyncWaiter::SharedRemoteSyncTestAsyncWaiter(
    SharedRemoteSyncTest* proxy) : proxy_(proxy) {}

SharedRemoteSyncTestAsyncWaiter::~SharedRemoteSyncTestAsyncWaiter() = default;

void SharedRemoteSyncTestAsyncWaiter::Fetch(
    int32_t* out_value) {
  base::RunLoop loop;
  proxy_->Fetch(
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_value
,
             int32_t value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}



void LargeMessageTestInterceptorForTesting::ProcessData(const WTF::Vector<uint8_t>& data, ProcessDataCallback callback) {
  GetForwardingInterface()->ProcessData(std::move(data), std::move(callback));
}
void LargeMessageTestInterceptorForTesting::ProcessLotsOfData(const WTF::Vector<uint8_t>& data, ProcessLotsOfDataCallback callback) {
  GetForwardingInterface()->ProcessLotsOfData(std::move(data), std::move(callback));
}
void LargeMessageTestInterceptorForTesting::GetLotsOfData(uint64_t data_size, GetLotsOfDataCallback callback) {
  GetForwardingInterface()->GetLotsOfData(std::move(data_size), std::move(callback));
}
LargeMessageTestAsyncWaiter::LargeMessageTestAsyncWaiter(
    LargeMessageTest* proxy) : proxy_(proxy) {}

LargeMessageTestAsyncWaiter::~LargeMessageTestAsyncWaiter() = default;

void LargeMessageTestAsyncWaiter::ProcessData(
    const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) {
  base::RunLoop loop;
  proxy_->ProcessData(std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_data_size
,
             uint64_t data_size) {*out_data_size = std::move(data_size);
            loop->Quit();
          },
          &loop,
          out_data_size));
  loop.Run();
}
void LargeMessageTestAsyncWaiter::ProcessLotsOfData(
    const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) {
  base::RunLoop loop;
  proxy_->ProcessLotsOfData(std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_data_size
,
             uint64_t data_size) {*out_data_size = std::move(data_size);
            loop->Quit();
          },
          &loop,
          out_data_size));
  loop.Run();
}
void LargeMessageTestAsyncWaiter::GetLotsOfData(
    uint64_t data_size, WTF::Vector<uint8_t>* out_data) {
  base::RunLoop loop;
  proxy_->GetLotsOfData(std::move(data_size),
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<uint8_t>* out_data
,
             const WTF::Vector<uint8_t>& data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace remote_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif