// mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom-import-headers.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_BINDER_MAP_UNITTEST_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_BINDER_MAP_UNITTEST_TEST_MOJOM_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace binder_map_unittest {
namespace mojom {
const char TestInterface1::Name_[] = "mojo.test.binder_map_unittest.mojom.TestInterface1";

TestInterface1Proxy::TestInterface1Proxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool TestInterface1StubDispatch::Accept(
    TestInterface1* impl,
    mojo::Message* message) {
  return false;
}

// static
bool TestInterface1StubDispatch::AcceptWithResponder(
    TestInterface1* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool TestInterface1RequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::binder_map_unittest::mojom::TestInterface1::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

const char TestInterface2::Name_[] = "mojo.test.binder_map_unittest.mojom.TestInterface2";

TestInterface2Proxy::TestInterface2Proxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool TestInterface2StubDispatch::Accept(
    TestInterface2* impl,
    mojo::Message* message) {
  return false;
}

// static
bool TestInterface2StubDispatch::AcceptWithResponder(
    TestInterface2* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool TestInterface2RequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::binder_map_unittest::mojom::TestInterface2::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

}  // namespace mojom
}  // namespace binder_map_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif