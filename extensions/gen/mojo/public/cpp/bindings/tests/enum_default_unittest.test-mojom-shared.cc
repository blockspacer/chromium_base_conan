// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-params-data.h"
namespace mojo {
namespace test {
namespace enum_default_unittest {
namespace mojom {

std::string ExtensibleEnumWithDefaultToString(ExtensibleEnumWithDefault value) {
  switch(value) {
    case ExtensibleEnumWithDefault::kZeroth:
      return "kZeroth";
    case ExtensibleEnumWithDefault::kFirst:
      return "kFirst";
    default:
      return base::StringPrintf("Unknown ExtensibleEnumWithDefault value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, ExtensibleEnumWithDefault value) {
  return os << ExtensibleEnumWithDefaultToString(value);
}

std::string ExtensibleEnumWithoutDefaultToString(ExtensibleEnumWithoutDefault value) {
  switch(value) {
    case ExtensibleEnumWithoutDefault::kZeroth:
      return "kZeroth";
    case ExtensibleEnumWithoutDefault::kFirst:
      return "kFirst";
    default:
      return base::StringPrintf("Unknown ExtensibleEnumWithoutDefault value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, ExtensibleEnumWithoutDefault value) {
  return os << ExtensibleEnumWithoutDefaultToString(value);
}

std::string EnumWithoutZeroValueToString(EnumWithoutZeroValue value) {
  switch(value) {
    case EnumWithoutZeroValue::kFirst:
      return "kFirst";
    case EnumWithoutZeroValue::kSecond:
      return "kSecond";
    default:
      return base::StringPrintf("Unknown EnumWithoutZeroValue value: %i", static_cast<int32_t>(value));
  }
}

std::ostream& operator<<(std::ostream& os, EnumWithoutZeroValue value) {
  return os << EnumWithoutZeroValueToString(value);
}

namespace internal {
// static
bool UnionWithExtensibleEnumWithDefault_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const UnionWithExtensibleEnumWithDefault_Data* object = static_cast<const UnionWithExtensibleEnumWithDefault_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case UnionWithExtensibleEnumWithDefault_Tag::VALUE: {


      if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithDefault_Data
            ::Validate(object->data.f_value, validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in UnionWithExtensibleEnumWithDefault");
      return false;
    }
  }
}
// static
bool UnionWithExtensibleEnumWithoutDefault_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const UnionWithExtensibleEnumWithoutDefault_Data* object = static_cast<const UnionWithExtensibleEnumWithoutDefault_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case UnionWithExtensibleEnumWithoutDefault_Tag::VALUE: {


      if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithoutDefault_Data
            ::Validate(object->data.f_value, validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in UnionWithExtensibleEnumWithoutDefault");
      return false;
    }
  }
}


// static
bool StructWithExtensibleEnumWithDefault_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithExtensibleEnumWithDefault_Data* object = static_cast<const StructWithExtensibleEnumWithDefault_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithDefault_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

StructWithExtensibleEnumWithDefault_Data::StructWithExtensibleEnumWithDefault_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithExtensibleEnumWithoutDefault_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithExtensibleEnumWithoutDefault_Data* object = static_cast<const StructWithExtensibleEnumWithoutDefault_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithoutDefault_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

StructWithExtensibleEnumWithoutDefault_Data::StructWithExtensibleEnumWithoutDefault_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithoutInitializer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithoutInitializer_Data* object = static_cast<const StructWithoutInitializer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::EnumWithoutZeroValue_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

StructWithoutInitializer_Data::StructWithoutInitializer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool StructWithInitializer_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithInitializer_Data* object = static_cast<const StructWithInitializer_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::EnumWithoutZeroValue_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

StructWithInitializer_Data::StructWithInitializer_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoWithDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoWithDefault_Params_Data* object = static_cast<const TestInterface_EchoWithDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithDefault_Data
        ::Validate(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoWithDefault_Params_Data::TestInterface_EchoWithDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoWithDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoWithDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoWithDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithDefault_Data
        ::Validate(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoWithDefault_ResponseParams_Data::TestInterface_EchoWithDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoWithoutDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoWithoutDefault_Params_Data* object = static_cast<const TestInterface_EchoWithoutDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithoutDefault_Data
        ::Validate(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoWithoutDefault_Params_Data::TestInterface_EchoWithoutDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoWithoutDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoWithoutDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoWithoutDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);


  if (!::mojo::test::enum_default_unittest::mojom::internal::ExtensibleEnumWithoutDefault_Data
        ::Validate(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoWithoutDefault_ResponseParams_Data::TestInterface_EchoWithoutDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoStructWithDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoStructWithDefault_Params_Data* object = static_cast<const TestInterface_EchoStructWithDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->in, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoStructWithDefault_Params_Data::TestInterface_EchoStructWithDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoStructWithDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoStructWithDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoStructWithDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->out, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoStructWithDefault_ResponseParams_Data::TestInterface_EchoStructWithDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoStructWithoutDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoStructWithoutDefault_Params_Data* object = static_cast<const TestInterface_EchoStructWithoutDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->in, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoStructWithoutDefault_Params_Data::TestInterface_EchoStructWithoutDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoStructWithoutDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoStructWithoutDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoStructWithoutDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->out, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoStructWithoutDefault_ResponseParams_Data::TestInterface_EchoStructWithoutDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoUnionWithDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoUnionWithDefault_Params_Data* object = static_cast<const TestInterface_EchoUnionWithDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->in, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoUnionWithDefault_Params_Data::TestInterface_EchoUnionWithDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoUnionWithDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoUnionWithDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoUnionWithDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->out, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoUnionWithDefault_ResponseParams_Data::TestInterface_EchoUnionWithDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoUnionWithoutDefault_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoUnionWithoutDefault_Params_Data* object = static_cast<const TestInterface_EchoUnionWithoutDefault_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->in, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->in, validation_context))
    return false;

  return true;
}

TestInterface_EchoUnionWithoutDefault_Params_Data::TestInterface_EchoUnionWithoutDefault_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestInterface_EchoUnionWithoutDefault_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_EchoUnionWithoutDefault_ResponseParams_Data* object = static_cast<const TestInterface_EchoUnionWithoutDefault_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->out, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->out, validation_context))
    return false;

  return true;
}

TestInterface_EchoUnionWithoutDefault_ResponseParams_Data::TestInterface_EchoUnionWithoutDefault_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace enum_default_unittest
}  // namespace test
}  // namespace mojo

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault value) {
  return std::move(context).WriteString(::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefaultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault value) {
  return std::move(context).WriteString(::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefaultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue>::WriteIntoTracedValue(
   perfetto::TracedValue context, ::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValue value) {
  return std::move(context).WriteString(::mojo::test::enum_default_unittest::mojom::EnumWithoutZeroValueToString(value));
}

} // namespace perfetto
