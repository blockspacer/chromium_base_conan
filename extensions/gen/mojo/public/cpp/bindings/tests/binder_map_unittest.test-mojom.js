// mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.binderMapUnittest.mojom');




  function TestInterface1Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface1,
                                                   handleOrPtrInfo);
  }

  function TestInterface1AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface1, associatedInterfacePtrInfo);
  }

  TestInterface1AssociatedPtr.prototype =
      Object.create(TestInterface1Ptr.prototype);
  TestInterface1AssociatedPtr.prototype.constructor =
      TestInterface1AssociatedPtr;

  function TestInterface1Proxy(receiver) {
    this.receiver_ = receiver;
  }

  function TestInterface1Stub(delegate) {
    this.delegate_ = delegate;
  }

  TestInterface1Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestInterface1Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterface1Request(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateTestInterface1Response(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface1 = {
    name: 'mojo.test.binder_map_unittest.mojom.TestInterface1',
    kVersion: 0,
    ptrClass: TestInterface1Ptr,
    proxyClass: TestInterface1Proxy,
    stubClass: TestInterface1Stub,
    validateRequest: validateTestInterface1Request,
    validateResponse: null,
  };
  TestInterface1Stub.prototype.validator = validateTestInterface1Request;
  TestInterface1Proxy.prototype.validator = null;

  function TestInterface2Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface2,
                                                   handleOrPtrInfo);
  }

  function TestInterface2AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface2, associatedInterfacePtrInfo);
  }

  TestInterface2AssociatedPtr.prototype =
      Object.create(TestInterface2Ptr.prototype);
  TestInterface2AssociatedPtr.prototype.constructor =
      TestInterface2AssociatedPtr;

  function TestInterface2Proxy(receiver) {
    this.receiver_ = receiver;
  }

  function TestInterface2Stub(delegate) {
    this.delegate_ = delegate;
  }

  TestInterface2Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestInterface2Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterface2Request(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateTestInterface2Response(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface2 = {
    name: 'mojo.test.binder_map_unittest.mojom.TestInterface2',
    kVersion: 0,
    ptrClass: TestInterface2Ptr,
    proxyClass: TestInterface2Proxy,
    stubClass: TestInterface2Stub,
    validateRequest: validateTestInterface2Request,
    validateResponse: null,
  };
  TestInterface2Stub.prototype.validator = validateTestInterface2Request;
  TestInterface2Proxy.prototype.validator = null;
  exports.TestInterface1 = TestInterface1;
  exports.TestInterface1Ptr = TestInterface1Ptr;
  exports.TestInterface1AssociatedPtr = TestInterface1AssociatedPtr;
  exports.TestInterface2 = TestInterface2;
  exports.TestInterface2Ptr = TestInterface2Ptr;
  exports.TestInterface2AssociatedPtr = TestInterface2AssociatedPtr;
})();