// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace enum_default_unittest {
namespace mojom {

class TestInterfaceProxy;

template <typename ImplRefTraits>
class TestInterfaceStub;

class TestInterfaceRequestValidator;
class TestInterfaceResponseValidator;


// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface
class  TestInterface
    : public TestInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterfaceInterfaceBase;
  using Proxy_ = TestInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = TestInterfaceRequestValidator;
  using ResponseValidator_ = TestInterfaceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kEchoWithDefaultMinVersion = 0,
    kEchoWithoutDefaultMinVersion = 0,
    kEchoStructWithDefaultMinVersion = 0,
    kEchoStructWithoutDefaultMinVersion = 0,
    kEchoUnionWithDefaultMinVersion = 0,
    kEchoUnionWithoutDefaultMinVersion = 0,
  };
  virtual ~TestInterface() {}


  using EchoWithDefaultCallback = base::OnceCallback<void(ExtensibleEnumWithDefault)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithDefault
  virtual void EchoWithDefault(ExtensibleEnumWithDefault in, EchoWithDefaultCallback callback) = 0;


  using EchoWithoutDefaultCallback = base::OnceCallback<void(ExtensibleEnumWithoutDefault)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithoutDefault
  virtual void EchoWithoutDefault(ExtensibleEnumWithoutDefault in, EchoWithoutDefaultCallback callback) = 0;


  using EchoStructWithDefaultCallback = base::OnceCallback<void(StructWithExtensibleEnumWithDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithDefault
  virtual void EchoStructWithDefault(StructWithExtensibleEnumWithDefaultPtr in, EchoStructWithDefaultCallback callback) = 0;


  using EchoStructWithoutDefaultCallback = base::OnceCallback<void(StructWithExtensibleEnumWithoutDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithoutDefault
  virtual void EchoStructWithoutDefault(StructWithExtensibleEnumWithoutDefaultPtr in, EchoStructWithoutDefaultCallback callback) = 0;


  using EchoUnionWithDefaultCallback = base::OnceCallback<void(UnionWithExtensibleEnumWithDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithDefault
  virtual void EchoUnionWithDefault(UnionWithExtensibleEnumWithDefaultPtr in, EchoUnionWithDefaultCallback callback) = 0;


  using EchoUnionWithoutDefaultCallback = base::OnceCallback<void(UnionWithExtensibleEnumWithoutDefaultPtr)>;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithoutDefault
  virtual void EchoUnionWithoutDefault(UnionWithExtensibleEnumWithoutDefaultPtr in, EchoUnionWithoutDefaultCallback callback) = 0;
};



// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface
class  TestInterfaceProxy
    : public TestInterface {
 public:
  using InterfaceType = TestInterface;

  explicit TestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithDefault
  void EchoWithDefault(ExtensibleEnumWithDefault in, EchoWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoWithoutDefault
  void EchoWithoutDefault(ExtensibleEnumWithoutDefault in, EchoWithoutDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithDefault
  void EchoStructWithDefault(StructWithExtensibleEnumWithDefaultPtr in, EchoStructWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoStructWithoutDefault
  void EchoStructWithoutDefault(StructWithExtensibleEnumWithoutDefaultPtr in, EchoStructWithoutDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithDefault
  void EchoUnionWithDefault(UnionWithExtensibleEnumWithDefaultPtr in, EchoUnionWithDefaultCallback callback) final;
  
// @generated_from: mojo.test.enum_default_unittest.mojom.TestInterface.EchoUnionWithoutDefault
  void EchoUnionWithoutDefault(UnionWithExtensibleEnumWithoutDefaultPtr in, EchoUnionWithoutDefaultCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestInterfaceStubDispatch {
 public:
  static bool Accept(TestInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface>>
class TestInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterfaceStub() {}
  ~TestInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestInterfaceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithDefault
class  StructWithExtensibleEnumWithDefault {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithExtensibleEnumWithDefault, T>::value>;
  using DataView = StructWithExtensibleEnumWithDefaultDataView;
  using Data_ = internal::StructWithExtensibleEnumWithDefault_Data;

  template <typename... Args>
  static StructWithExtensibleEnumWithDefaultPtr New(Args&&... args) {
    return StructWithExtensibleEnumWithDefaultPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithExtensibleEnumWithDefaultPtr From(const U& u) {
    return mojo::TypeConverter<StructWithExtensibleEnumWithDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithExtensibleEnumWithDefault>::Convert(*this);
  }


  StructWithExtensibleEnumWithDefault();

  explicit StructWithExtensibleEnumWithDefault(
      ExtensibleEnumWithDefault value);

  ~StructWithExtensibleEnumWithDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithExtensibleEnumWithDefaultPtr>
  StructWithExtensibleEnumWithDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithExtensibleEnumWithDefault::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithExtensibleEnumWithDefault::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithExtensibleEnumWithDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithDefault::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithDefault::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithExtensibleEnumWithDefault::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithExtensibleEnumWithDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithDefault::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithDefault.value
  ExtensibleEnumWithDefault value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithoutDefault
class  StructWithExtensibleEnumWithoutDefault {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithExtensibleEnumWithoutDefault, T>::value>;
  using DataView = StructWithExtensibleEnumWithoutDefaultDataView;
  using Data_ = internal::StructWithExtensibleEnumWithoutDefault_Data;

  template <typename... Args>
  static StructWithExtensibleEnumWithoutDefaultPtr New(Args&&... args) {
    return StructWithExtensibleEnumWithoutDefaultPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithExtensibleEnumWithoutDefaultPtr From(const U& u) {
    return mojo::TypeConverter<StructWithExtensibleEnumWithoutDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithExtensibleEnumWithoutDefault>::Convert(*this);
  }


  StructWithExtensibleEnumWithoutDefault();

  explicit StructWithExtensibleEnumWithoutDefault(
      ExtensibleEnumWithoutDefault value);

  ~StructWithExtensibleEnumWithoutDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithExtensibleEnumWithoutDefaultPtr>
  StructWithExtensibleEnumWithoutDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithExtensibleEnumWithoutDefault::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithExtensibleEnumWithoutDefault::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithoutDefault::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithoutDefault::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithExtensibleEnumWithoutDefault::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithExtensibleEnumWithoutDefault_UnserializedMessageContext<
            UserType, StructWithExtensibleEnumWithoutDefault::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithExtensibleEnumWithoutDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithExtensibleEnumWithoutDefault.value
  ExtensibleEnumWithoutDefault value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithoutInitializer
class  StructWithoutInitializer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithoutInitializer, T>::value>;
  using DataView = StructWithoutInitializerDataView;
  using Data_ = internal::StructWithoutInitializer_Data;

  template <typename... Args>
  static StructWithoutInitializerPtr New(Args&&... args) {
    return StructWithoutInitializerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithoutInitializerPtr From(const U& u) {
    return mojo::TypeConverter<StructWithoutInitializerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithoutInitializer>::Convert(*this);
  }


  StructWithoutInitializer();

  explicit StructWithoutInitializer(
      EnumWithoutZeroValue value);

  ~StructWithoutInitializer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithoutInitializerPtr>
  StructWithoutInitializerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithoutInitializer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithoutInitializer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithoutInitializer_UnserializedMessageContext<
            UserType, StructWithoutInitializer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithoutInitializer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithoutInitializer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithoutInitializer_UnserializedMessageContext<
            UserType, StructWithoutInitializer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithoutInitializer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithoutInitializer.value
  EnumWithoutZeroValue value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithInitializer
class  StructWithInitializer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<StructWithInitializer, T>::value>;
  using DataView = StructWithInitializerDataView;
  using Data_ = internal::StructWithInitializer_Data;

  template <typename... Args>
  static StructWithInitializerPtr New(Args&&... args) {
    return StructWithInitializerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static StructWithInitializerPtr From(const U& u) {
    return mojo::TypeConverter<StructWithInitializerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, StructWithInitializer>::Convert(*this);
  }


  StructWithInitializer();

  explicit StructWithInitializer(
      EnumWithoutZeroValue value);

  ~StructWithInitializer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = StructWithInitializerPtr>
  StructWithInitializerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        StructWithInitializer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        StructWithInitializer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::StructWithInitializer_UnserializedMessageContext<
            UserType, StructWithInitializer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<StructWithInitializer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return StructWithInitializer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::StructWithInitializer_UnserializedMessageContext<
            UserType, StructWithInitializer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<StructWithInitializer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.StructWithInitializer.value
  EnumWithoutZeroValue value;

  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, StructWithInitializer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault
class  UnionWithExtensibleEnumWithDefault {
 public:
  using DataView = UnionWithExtensibleEnumWithDefaultDataView;
  using Data_ = internal::UnionWithExtensibleEnumWithDefault_Data;
  using Tag = Data_::UnionWithExtensibleEnumWithDefault_Tag;

  static UnionWithExtensibleEnumWithDefaultPtr New() {
    return UnionWithExtensibleEnumWithDefaultPtr(base::in_place);
  }
  // Construct an instance holding |value|.
  static UnionWithExtensibleEnumWithDefaultPtr
  NewValue(
      ExtensibleEnumWithDefault value) {
    auto result = UnionWithExtensibleEnumWithDefaultPtr(base::in_place);
    result->set_value(std::move(value));
    return result;
  }

  template <typename U>
  static UnionWithExtensibleEnumWithDefaultPtr From(const U& u) {
    return mojo::TypeConverter<UnionWithExtensibleEnumWithDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionWithExtensibleEnumWithDefault>::Convert(*this);
  }

  UnionWithExtensibleEnumWithDefault();
  ~UnionWithExtensibleEnumWithDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionWithExtensibleEnumWithDefaultPtr>
  UnionWithExtensibleEnumWithDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithDefault>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithDefault>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  bool is_value() const { return tag_ == Tag::VALUE; }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  ExtensibleEnumWithDefault get_value() const {
    DCHECK(tag_ == Tag::VALUE);
    return data_.value;
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithDefault.value
  void set_value(
      ExtensibleEnumWithDefault value);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionWithExtensibleEnumWithDefault::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionWithExtensibleEnumWithDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ExtensibleEnumWithDefault value;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault
class  UnionWithExtensibleEnumWithoutDefault {
 public:
  using DataView = UnionWithExtensibleEnumWithoutDefaultDataView;
  using Data_ = internal::UnionWithExtensibleEnumWithoutDefault_Data;
  using Tag = Data_::UnionWithExtensibleEnumWithoutDefault_Tag;

  static UnionWithExtensibleEnumWithoutDefaultPtr New() {
    return UnionWithExtensibleEnumWithoutDefaultPtr(base::in_place);
  }
  // Construct an instance holding |value|.
  static UnionWithExtensibleEnumWithoutDefaultPtr
  NewValue(
      ExtensibleEnumWithoutDefault value) {
    auto result = UnionWithExtensibleEnumWithoutDefaultPtr(base::in_place);
    result->set_value(std::move(value));
    return result;
  }

  template <typename U>
  static UnionWithExtensibleEnumWithoutDefaultPtr From(const U& u) {
    return mojo::TypeConverter<UnionWithExtensibleEnumWithoutDefaultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UnionWithExtensibleEnumWithoutDefault>::Convert(*this);
  }

  UnionWithExtensibleEnumWithoutDefault();
  ~UnionWithExtensibleEnumWithoutDefault();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = UnionWithExtensibleEnumWithoutDefaultPtr>
  UnionWithExtensibleEnumWithoutDefaultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithoutDefault>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, UnionWithExtensibleEnumWithoutDefault>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  bool is_value() const { return tag_ == Tag::VALUE; }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  ExtensibleEnumWithoutDefault get_value() const {
    DCHECK(tag_ == Tag::VALUE);
    return data_.value;
  }

  
// @generated_from: mojo.test.enum_default_unittest.mojom.UnionWithExtensibleEnumWithoutDefault.value
  void set_value(
      ExtensibleEnumWithoutDefault value);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        UnionWithExtensibleEnumWithoutDefault::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<UnionWithExtensibleEnumWithoutDefault::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ExtensibleEnumWithoutDefault value;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





template <typename UnionPtrType>
UnionWithExtensibleEnumWithDefaultPtr UnionWithExtensibleEnumWithDefault::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::VALUE:
      rv->set_value(mojo::Clone(data_.value));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionWithExtensibleEnumWithDefault>::value>::type*>
bool UnionWithExtensibleEnumWithDefault::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::VALUE:
      return mojo::Equals(data_.value, other.data_.value);
  }

  return false;
}
template <typename UnionPtrType>
UnionWithExtensibleEnumWithoutDefaultPtr UnionWithExtensibleEnumWithoutDefault::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::VALUE:
      rv->set_value(mojo::Clone(data_.value));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, UnionWithExtensibleEnumWithoutDefault>::value>::type*>
bool UnionWithExtensibleEnumWithoutDefault::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::VALUE:
      return mojo::Equals(data_.value, other.data_.value);
  }

  return false;
}
template <typename StructPtrType>
StructWithExtensibleEnumWithDefaultPtr StructWithExtensibleEnumWithDefault::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>*>
bool StructWithExtensibleEnumWithDefault::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithExtensibleEnumWithDefault::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithExtensibleEnumWithoutDefaultPtr StructWithExtensibleEnumWithoutDefault::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>*>
bool StructWithExtensibleEnumWithoutDefault::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithExtensibleEnumWithoutDefault::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithoutInitializerPtr StructWithoutInitializer::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>*>
bool StructWithoutInitializer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithoutInitializer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
StructWithInitializerPtr StructWithInitializer::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, StructWithInitializer::EnableIfSame<T>*>
bool StructWithInitializer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, StructWithInitializer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace enum_default_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::value) value(
      const ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithDefaultPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::value) value(
      const ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::StructWithExtensibleEnumWithoutDefaultPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::value) value(
      const ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::StructWithoutInitializer::DataView input, ::mojo::test::enum_default_unittest::mojom::StructWithoutInitializerPtr* output);
};


template <>
struct  StructTraits<::mojo::test::enum_default_unittest::mojom::StructWithInitializer::DataView,
                                         ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr* output) { output->reset(); }

  static decltype(::mojo::test::enum_default_unittest::mojom::StructWithInitializer::value) value(
      const ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr& input) {
    return input->value;
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::StructWithInitializer::DataView input, ::mojo::test::enum_default_unittest::mojom::StructWithInitializerPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault::DataView,
                                        ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr* output) { output->reset(); }

  static ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault::Tag GetTag(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr& input) {
    return input->which();
  }

  static  ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithDefault value(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr& input) {
    return input->get_value();
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithDefaultPtr* output);
};


template <>
struct  UnionTraits<::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault::DataView,
                                        ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr> {
  static bool IsNull(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr& input) { return !input; }
  static void SetToNull(::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr* output) { output->reset(); }

  static ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault::Tag GetTag(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->which();
  }

  static  ::mojo::test::enum_default_unittest::mojom::ExtensibleEnumWithoutDefault value(const ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr& input) {
    return input->get_value();
  }

  static bool Read(::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefault::DataView input, ::mojo::test::enum_default_unittest::mojom::UnionWithExtensibleEnumWithoutDefaultPtr* output);
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_DEFAULT_UNITTEST_TEST_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjAwNywgImJlZ2luIjogMTk5NCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3Qu
bW9qb20uVGVzdEludGVyZmFjZSJ9fSwgeyJlbmQiOiAzMDU1LCAiYmVnaW4iOiAzMDQwLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVm
YXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9XaXRoRGVmYXVsdCJ9fSwgeyJl
bmQiOiAzMzQ3LCAiYmVnaW4iOiAzMzI5LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50
ZXJmYWNlLkVjaG9XaXRob3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiAzNjY0LCAiYmVnaW4iOiAzNjQz
LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmlu
ZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9t
aXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVu
dW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9TdHJ1Y3RXaXRoRGVm
YXVsdCJ9fSwgeyJlbmQiOiA0MDA2LCAiYmVnaW4iOiAzOTgyLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5t
b2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9TdHJ1Y3RXaXRob3V0RGVmYXVsdCJ9fSwgeyJlbmQiOiA0
MzM4LCAiYmVnaW4iOiA0MzE4LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5
cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29n
bGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1
cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNl
LkVjaG9VbmlvbldpdGhEZWZhdWx0In19LCB7ImVuZCI6IDQ2NzQsICJiZWdpbiI6IDQ2NTEsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9k
ZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlRlc3RJbnRlcmZhY2UuRWNob1VuaW9uV2l0aG91dERlZmF1
bHQifX0sIHsiZW5kIjogNTEzOSwgImJlZ2luIjogNTEyNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9q
b20uVGVzdEludGVyZmFjZS5FY2hvV2l0aERlZmF1bHQifX0sIHsiZW5kIjogNTMzMCwgImJlZ2lu
IjogNTMxMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hv
cl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNv
bS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8u
dGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVGVzdEludGVyZmFjZS5FY2hvV2l0aG91
dERlZmF1bHQifX0sIHsiZW5kIjogNTUzMywgImJlZ2luIjogNTUxMiwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRl
c3QubW9qb20uVGVzdEludGVyZmFjZS5FY2hvU3RydWN0V2l0aERlZmF1bHQifX0sIHsiZW5kIjog
NTc1NSwgImJlZ2luIjogNTczMSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVGVzdEludGVyZmFj
ZS5FY2hvU3RydWN0V2l0aG91dERlZmF1bHQifX0sIHsiZW5kIjogNTk3NSwgImJlZ2luIjogNTk1
NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5l
bnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVGVzdEludGVyZmFjZS5FY2hvVW5pb25XaXRoRGVm
YXVsdCJ9fSwgeyJlbmQiOiA2MTkzLCAiYmVnaW4iOiA2MTcwLCAiZWRnZSI6ICIlL2t5dGhlL2Vk
Z2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1
cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6
ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVzdC5t
b2pvbS5UZXN0SW50ZXJmYWNlLkVjaG9VbmlvbldpdGhvdXREZWZhdWx0In19LCB7ImVuZCI6IDgw
MzEsICJiZWdpbiI6IDc5OTYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlw
ZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2ds
ZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVy
ZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlN0cnVjdFdpdGhFeHRl
bnNpYmxlRW51bVdpdGhEZWZhdWx0In19LCB7ImVuZCI6IDEyMjkyLCAiYmVnaW4iOiAxMjI4Nywg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVt
X2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aEV4dGVuc2libGVFbnVtV2l0aERlZmF1
bHQudmFsdWUifX0sIHsiZW5kIjogMTM0OTIsICJiZWdpbiI6IDEzNDU0LCAiZWRnZSI6ICIlL2t5
dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7
ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5n
dWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0
dGVzdC5tb2pvbS5TdHJ1Y3RXaXRoRXh0ZW5zaWJsZUVudW1XaXRob3V0RGVmYXVsdCJ9fSwgeyJl
bmQiOiAxNzgzNCwgImJlZ2luIjogMTc4MjksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlN0cnVj
dFdpdGhFeHRlbnNpYmxlRW51bVdpdGhvdXREZWZhdWx0LnZhbHVlIn19LCB7ImVuZCI6IDE5MDE4
LCAiYmVnaW4iOiAxODk5NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aG91dElu
aXRpYWxpemVyIn19LCB7ImVuZCI6IDIyOTk0LCAiYmVnaW4iOiAyMjk4OSwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5p
dHRlc3QubW9qb20uU3RydWN0V2l0aG91dEluaXRpYWxpemVyLnZhbHVlIn19LCB7ImVuZCI6IDI0
MTE2LCAiYmVnaW4iOiAyNDA5NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uU3RydWN0V2l0aElu
aXRpYWxpemVyIn19LCB7ImVuZCI6IDI4MDE3LCAiYmVnaW4iOiAyODAxMiwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5p
dHRlc3QubW9qb20uU3RydWN0V2l0aEluaXRpYWxpemVyLnZhbHVlIn19LCB7ImVuZCI6IDI5MTUz
LCAiYmVnaW4iOiAyOTExOSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVW5pb25XaXRoRXh0ZW5z
aWJsZUVudW1XaXRoRGVmYXVsdCJ9fSwgeyJlbmQiOiAzMTI5MiwgImJlZ2luIjogMzEyODQsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9k
ZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVuaW9uV2l0aEV4dGVuc2libGVFbnVtV2l0aERlZmF1bHQu
dmFsdWUifX0sIHsiZW5kIjogMzE0NzIsICJiZWdpbiI6IDMxNDYzLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVmYXVsdF91bml0dGVz
dC5tb2pvbS5VbmlvbldpdGhFeHRlbnNpYmxlRW51bVdpdGhEZWZhdWx0LnZhbHVlIn19LCB7ImVu
ZCI6IDMxNjYyLCAiYmVnaW4iOiAzMTY1MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRl
cyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21p
dW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAi
c2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRlc3QubW9qb20uVW5pb25X
aXRoRXh0ZW5zaWJsZUVudW1XaXRoRGVmYXVsdC52YWx1ZSJ9fSwgeyJlbmQiOiAzMjY1NiwgImJl
Z2luIjogMzI2MTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJh
bmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJj
ZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJt
b2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVuaW9uV2l0aEV4dGVuc2libGVF
bnVtV2l0aG91dERlZmF1bHQifX0sIHsiZW5kIjogMzQ4NDksICJiZWdpbiI6IDM0ODQxLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LmVudW1fZGVm
YXVsdF91bml0dGVzdC5tb2pvbS5VbmlvbldpdGhFeHRlbnNpYmxlRW51bVdpdGhvdXREZWZhdWx0
LnZhbHVlIn19LCB7ImVuZCI6IDM1MDM1LCAiYmVnaW4iOiAzNTAyNiwgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2RlZmF1bHRfdW5pdHRl
c3QubW9qb20uVW5pb25XaXRoRXh0ZW5zaWJsZUVudW1XaXRob3V0RGVmYXVsdC52YWx1ZSJ9fSwg
eyJlbmQiOiAzNTIyOCwgImJlZ2luIjogMzUyMTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9kZWZhdWx0X3VuaXR0ZXN0Lm1vam9tLlVu
aW9uV2l0aEV4dGVuc2libGVFbnVtV2l0aG91dERlZmF1bHQudmFsdWUifX1dLCAidHlwZSI6ICJr
eXRoZTAifQ==
*/