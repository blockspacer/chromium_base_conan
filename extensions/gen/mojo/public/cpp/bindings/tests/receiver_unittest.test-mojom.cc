// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-import-headers.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {
const char TestGenericBinder::Name_[] = "mojo.test.receiver_unittest.mojom.TestGenericBinder";

TestGenericBinderProxy::TestGenericBinderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class TestGenericBinderProxy_BindOptionalReceiver_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestGenericBinderProxy_BindOptionalReceiver_Message(
      uint32_t message_flags
      , ::mojo::GenericPendingReceiver param_receiver
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestGenericBinder_BindOptionalReceiver_Name,
          message_flags)
      , param_receiver_(std::move(param_receiver)){}
  ~TestGenericBinderProxy_BindOptionalReceiver_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ::mojo::GenericPendingReceiver param_receiver) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestGenericBinderProxy_BindOptionalReceiver_Message>(
          kFlags
          , std::move(param_receiver)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestGenericBinder_BindOptionalReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::TestGenericBinder_BindOptionalReceiver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->receiver)::BaseType> receiver_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
      param_receiver, receiver_fragment);
  params->receiver.Set(
      receiver_fragment.is_null() ? nullptr : receiver_fragment.data());
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestGenericBinder* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->BindOptionalReceiver(
        std::move(param_receiver_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::TestGenericBinder_BindOptionalReceiver_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->receiver)::BaseType> receiver_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
      param_receiver_, receiver_fragment);
  params->receiver.Set(
      receiver_fragment.is_null() ? nullptr : receiver_fragment.data());
  }
  ::mojo::GenericPendingReceiver param_receiver_;

  DISALLOW_COPY_AND_ASSIGN(TestGenericBinderProxy_BindOptionalReceiver_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestGenericBinderProxy_BindOptionalReceiver_Message::kMessageTag = {};

void TestGenericBinderProxy::BindOptionalReceiver(
    ::mojo::GenericPendingReceiver in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::receiver_unittest::mojom::TestGenericBinder::BindOptionalReceiver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::GenericPendingReceiver>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestGenericBinderProxy_BindOptionalReceiver_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_receiver));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestGenericBinder::Name_);
  message.set_method_name("BindOptionalReceiver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class TestGenericBinderProxy_BindReceiver_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit TestGenericBinderProxy_BindReceiver_Message(
      uint32_t message_flags
      , ::mojo::GenericPendingReceiver param_receiver
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kTestGenericBinder_BindReceiver_Name,
          message_flags)
      , param_receiver_(std::move(param_receiver)){}
  ~TestGenericBinderProxy_BindReceiver_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ::mojo::GenericPendingReceiver param_receiver) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<TestGenericBinderProxy_BindReceiver_Message>(
          kFlags
          , std::move(param_receiver)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kTestGenericBinder_BindReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::TestGenericBinder_BindReceiver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->receiver)::BaseType> receiver_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
      param_receiver, receiver_fragment);
  params->receiver.Set(
      receiver_fragment.is_null() ? nullptr : receiver_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->receiver.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null receiver in TestGenericBinder.BindReceiver request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      TestGenericBinder* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->BindReceiver(
        std::move(param_receiver_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::TestGenericBinder_BindReceiver_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->receiver)::BaseType> receiver_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
      param_receiver_, receiver_fragment);
  params->receiver.Set(
      receiver_fragment.is_null() ? nullptr : receiver_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->receiver.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null receiver in TestGenericBinder.BindReceiver request");
  }
  ::mojo::GenericPendingReceiver param_receiver_;

  DISALLOW_COPY_AND_ASSIGN(TestGenericBinderProxy_BindReceiver_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
TestGenericBinderProxy_BindReceiver_Message::kMessageTag = {};

void TestGenericBinderProxy::BindReceiver(
    ::mojo::GenericPendingReceiver in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::receiver_unittest::mojom::TestGenericBinder::BindReceiver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::GenericPendingReceiver>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = TestGenericBinderProxy_BindReceiver_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_receiver));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TestGenericBinder::Name_);
  message.set_method_name("BindReceiver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool TestGenericBinderStubDispatch::Accept(
    TestGenericBinder* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kTestGenericBinder_BindOptionalReceiver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::receiver_unittest::mojom::TestGenericBinder::BindOptionalReceiver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::receiver_unittest::mojom::TestGenericBinder::BindOptionalReceiver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestGenericBinderProxy_BindOptionalReceiver_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::TestGenericBinder_BindOptionalReceiver_Params_Data* params =
          reinterpret_cast<internal::TestGenericBinder_BindOptionalReceiver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::GenericPendingReceiver p_receiver{};
      TestGenericBinder_BindOptionalReceiver_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadReceiver(&p_receiver))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestGenericBinder::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindOptionalReceiver(
std::move(p_receiver));
      return true;
    }
    case internal::kTestGenericBinder_BindReceiver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::receiver_unittest::mojom::TestGenericBinder::BindReceiver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::receiver_unittest::mojom::TestGenericBinder::BindReceiver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            TestGenericBinderProxy_BindReceiver_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::TestGenericBinder_BindReceiver_Params_Data* params =
          reinterpret_cast<internal::TestGenericBinder_BindReceiver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::GenericPendingReceiver p_receiver{};
      TestGenericBinder_BindReceiver_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadReceiver(&p_receiver))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TestGenericBinder::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindReceiver(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool TestGenericBinderStubDispatch::AcceptWithResponder(
    TestGenericBinder* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTestGenericBinder_BindOptionalReceiver_Name: {
      break;
    }
    case internal::kTestGenericBinder_BindReceiver_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTestGenericBinderValidationInfo[] = {
    {internal::kTestGenericBinder_BindOptionalReceiver_Name,
     {&internal::TestGenericBinder_BindOptionalReceiver_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kTestGenericBinder_BindReceiver_Name,
     {&internal::TestGenericBinder_BindReceiver_Params_Data::Validate,
      nullptr /* no response */}},
};

bool TestGenericBinderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::receiver_unittest::mojom::TestGenericBinder::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTestGenericBinderValidationInfo);
}

const char TestInterface1::Name_[] = "mojo.test.receiver_unittest.mojom.TestInterface1";

TestInterface1Proxy::TestInterface1Proxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool TestInterface1StubDispatch::Accept(
    TestInterface1* impl,
    mojo::Message* message) {
  return false;
}

// static
bool TestInterface1StubDispatch::AcceptWithResponder(
    TestInterface1* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool TestInterface1RequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::receiver_unittest::mojom::TestInterface1::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

const char TestInterface2::Name_[] = "mojo.test.receiver_unittest.mojom.TestInterface2";

TestInterface2Proxy::TestInterface2Proxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool TestInterface2StubDispatch::Accept(
    TestInterface2* impl,
    mojo::Message* message) {
  return false;
}

// static
bool TestInterface2StubDispatch::AcceptWithResponder(
    TestInterface2* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool TestInterface2RequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::receiver_unittest::mojom::TestInterface2::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}

const char RebindTestInterface::Name_[] = "mojo.test.receiver_unittest.mojom.RebindTestInterface";
bool RebindTestInterface::SyncCall() {
  NOTREACHED();
  return false;
}
class RebindTestInterface_SyncCall_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  RebindTestInterface_SyncCall_HandleSyncResponse(
      bool* result)
      : result_(result) {
    DCHECK(!*result_);
  }
  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;DISALLOW_COPY_AND_ASSIGN(RebindTestInterface_SyncCall_HandleSyncResponse);
};

class RebindTestInterface_SyncCall_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RebindTestInterface_SyncCall_ForwardToCallback(
      RebindTestInterface::SyncCallCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  RebindTestInterface::SyncCallCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(RebindTestInterface_SyncCall_ForwardToCallback);
};

RebindTestInterfaceProxy::RebindTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kRebindTestInterface_BlockingUntilExternalSignalCall_Name,
          message_flags){}
  ~RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kRebindTestInterface_BlockingUntilExternalSignalCall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      RebindTestInterface* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->BlockingUntilExternalSignalCall();
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message::kMessageTag = {};

void RebindTestInterfaceProxy::BlockingUntilExternalSignalCall(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::BlockingUntilExternalSignalCall");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RebindTestInterface::Name_);
  message.set_method_name("BlockingUntilExternalSignalCall");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class RebindTestInterfaceProxy_NormalCall_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit RebindTestInterfaceProxy_NormalCall_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kRebindTestInterface_NormalCall_Name,
          message_flags){}
  ~RebindTestInterfaceProxy_NormalCall_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<RebindTestInterfaceProxy_NormalCall_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kRebindTestInterface_NormalCall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_NormalCall_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      RebindTestInterface* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->NormalCall();
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_NormalCall_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(RebindTestInterfaceProxy_NormalCall_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
RebindTestInterfaceProxy_NormalCall_Message::kMessageTag = {};

void RebindTestInterfaceProxy::NormalCall(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::NormalCall");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = RebindTestInterfaceProxy_NormalCall_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RebindTestInterface::Name_);
  message.set_method_name("NormalCall");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class RebindTestInterfaceProxy_SyncCall_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit RebindTestInterfaceProxy_SyncCall_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kRebindTestInterface_SyncCall_Name,
          message_flags){}
  ~RebindTestInterfaceProxy_SyncCall_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<RebindTestInterfaceProxy_SyncCall_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kRebindTestInterface_SyncCall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_SyncCall_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      RebindTestInterface* impl, RebindTestInterface::SyncCallCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->SyncCall(std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_SyncCall_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(RebindTestInterfaceProxy_SyncCall_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
RebindTestInterfaceProxy_SyncCall_Message::kMessageTag = {};
bool RebindTestInterfaceProxy::SyncCall(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCall");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = RebindTestInterfaceProxy_SyncCall_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RebindTestInterface::Name_);
  message.set_method_name("SyncCall");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RebindTestInterface_SyncCall_HandleSyncResponse(
          &result));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END0("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCall");
#endif
  return result;
}

void RebindTestInterfaceProxy::SyncCall(
    SyncCallCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCall");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = RebindTestInterfaceProxy_SyncCall_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RebindTestInterface::Name_);
  message.set_method_name("SyncCall");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RebindTestInterface_SyncCall_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class RebindTestInterface_SyncCall_ProxyToResponder {
 public:
  static RebindTestInterface::SyncCallCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<RebindTestInterface_SyncCall_ProxyToResponder> proxy(
        new RebindTestInterface_SyncCall_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&RebindTestInterface_SyncCall_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RebindTestInterface_SyncCall_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  RebindTestInterface_SyncCall_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RebindTestInterface::SyncCallCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(RebindTestInterface_SyncCall_ProxyToResponder);
};
class RebindTestInterface_SyncCall_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit RebindTestInterface_SyncCall_Response_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kRebindTestInterface_SyncCall_Name,
          message_flags){}
  ~RebindTestInterface_SyncCall_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<RebindTestInterface_SyncCall_Response_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kRebindTestInterface_SyncCall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_SyncCall_ResponseParams_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(mojo::Message* message,
                RebindTestInterface::SyncCallCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run();
  }


  void HandleSyncResponse(
      mojo::Message* message
) {

    if (message->receiver_connection_group()) {
    }


  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::receiver_unittest::mojom::internal::RebindTestInterface_SyncCall_ResponseParams_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(RebindTestInterface_SyncCall_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
RebindTestInterface_SyncCall_Response_Message::kMessageTag = {};

bool RebindTestInterface_SyncCall_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCallCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<RebindTestInterface_SyncCall_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::RebindTestInterface_SyncCall_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RebindTestInterface_SyncCall_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  RebindTestInterface_SyncCall_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RebindTestInterface::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void RebindTestInterface_SyncCall_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCallCallback");
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = RebindTestInterface_SyncCall_Response_Message::Build(kSerialize, is_sync_);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCallCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RebindTestInterface::Name_);
  message.set_method_name("SyncCall");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool RebindTestInterface_SyncCall_HandleSyncResponse::Accept(
    mojo::Message* message) {
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<RebindTestInterface_SyncCall_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was built using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      context->HandleSyncResponse(
          message);
      *result_ = true;
      mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
          message);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::RebindTestInterface_SyncCall_ResponseParams_Data* params =
      reinterpret_cast<internal::RebindTestInterface_SyncCall_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  RebindTestInterface_SyncCall_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RebindTestInterface::Name_, 2, true);
    return false;
  }
  mojo::internal::SyncMessageResponseSetup::SetCurrentSyncResponseMessage(
      message);
  *result_ = true;
  return true;
}

// static
bool RebindTestInterfaceStubDispatch::Accept(
    RebindTestInterface* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kRebindTestInterface_BlockingUntilExternalSignalCall_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::BlockingUntilExternalSignalCall",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::BlockingUntilExternalSignalCall");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            RebindTestInterfaceProxy_BlockingUntilExternalSignalCall_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data* params =
          reinterpret_cast<internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      RebindTestInterface_BlockingUntilExternalSignalCall_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RebindTestInterface::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BlockingUntilExternalSignalCall();
      return true;
    }
    case internal::kRebindTestInterface_NormalCall_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::NormalCall",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::NormalCall");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            RebindTestInterfaceProxy_NormalCall_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::RebindTestInterface_NormalCall_Params_Data* params =
          reinterpret_cast<internal::RebindTestInterface_NormalCall_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      RebindTestInterface_NormalCall_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RebindTestInterface::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->NormalCall();
      return true;
    }
    case internal::kRebindTestInterface_SyncCall_Name: {
      break;
    }
  }
  return false;
}

// static
bool RebindTestInterfaceStubDispatch::AcceptWithResponder(
    RebindTestInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kRebindTestInterface_BlockingUntilExternalSignalCall_Name: {
      break;
    }
    case internal::kRebindTestInterface_NormalCall_Name: {
      break;
    }
    case internal::kRebindTestInterface_SyncCall_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCall",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::receiver_unittest::mojom::RebindTestInterface::SyncCall");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            RebindTestInterfaceProxy_SyncCall_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          RebindTestInterface::SyncCallCallback callback =
              RebindTestInterface_SyncCall_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::RebindTestInterface_SyncCall_Params_Data* params =
          reinterpret_cast<
              internal::RebindTestInterface_SyncCall_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      RebindTestInterface_SyncCall_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RebindTestInterface::Name_, 2, false);
        return false;
      }
      RebindTestInterface::SyncCallCallback callback =
          RebindTestInterface_SyncCall_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SyncCall(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kRebindTestInterfaceValidationInfo[] = {
    {internal::kRebindTestInterface_BlockingUntilExternalSignalCall_Name,
     {&internal::RebindTestInterface_BlockingUntilExternalSignalCall_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kRebindTestInterface_NormalCall_Name,
     {&internal::RebindTestInterface_NormalCall_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kRebindTestInterface_SyncCall_Name,
     {&internal::RebindTestInterface_SyncCall_Params_Data::Validate,
      &internal::RebindTestInterface_SyncCall_ResponseParams_Data::Validate}},
};

bool RebindTestInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::receiver_unittest::mojom::RebindTestInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kRebindTestInterfaceValidationInfo);
}

bool RebindTestInterfaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::receiver_unittest::mojom::RebindTestInterface::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kRebindTestInterfaceValidationInfo);

}
}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif