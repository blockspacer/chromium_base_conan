// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom-blink.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {
namespace blink {


void TestGenericBinderInterceptorForTesting::BindOptionalReceiver(::mojo::GenericPendingReceiver receiver) {
  GetForwardingInterface()->BindOptionalReceiver(std::move(receiver));
}
void TestGenericBinderInterceptorForTesting::BindReceiver(::mojo::GenericPendingReceiver receiver) {
  GetForwardingInterface()->BindReceiver(std::move(receiver));
}
TestGenericBinderAsyncWaiter::TestGenericBinderAsyncWaiter(
    TestGenericBinder* proxy) : proxy_(proxy) {}

TestGenericBinderAsyncWaiter::~TestGenericBinderAsyncWaiter() = default;




TestInterface1AsyncWaiter::TestInterface1AsyncWaiter(
    TestInterface1* proxy) : proxy_(proxy) {}

TestInterface1AsyncWaiter::~TestInterface1AsyncWaiter() = default;




TestInterface2AsyncWaiter::TestInterface2AsyncWaiter(
    TestInterface2* proxy) : proxy_(proxy) {}

TestInterface2AsyncWaiter::~TestInterface2AsyncWaiter() = default;




void RebindTestInterfaceInterceptorForTesting::BlockingUntilExternalSignalCall() {
  GetForwardingInterface()->BlockingUntilExternalSignalCall();
}
void RebindTestInterfaceInterceptorForTesting::NormalCall() {
  GetForwardingInterface()->NormalCall();
}
void RebindTestInterfaceInterceptorForTesting::SyncCall(SyncCallCallback callback) {
  GetForwardingInterface()->SyncCall(std::move(callback));
}
RebindTestInterfaceAsyncWaiter::RebindTestInterfaceAsyncWaiter(
    RebindTestInterface* proxy) : proxy_(proxy) {}

RebindTestInterfaceAsyncWaiter::~RebindTestInterfaceAsyncWaiter() = default;

void RebindTestInterfaceAsyncWaiter::SyncCall(
    ) {
  base::RunLoop loop;
  proxy_->SyncCall(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif