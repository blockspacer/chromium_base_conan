// mojo/public/cpp/bindings/tests/connection_group_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/connection_group_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.connectionGroupUnittest.mojom');



  function TestInterface_BindReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_BindReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  TestInterface_BindReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_BindReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_BindReceiver_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_BindReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_BindReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_BindReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestInterface_BindReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_BindReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kTestInterface_BindReceiver_Name = 490516208;

  function TestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface,
                                                   handleOrPtrInfo);
  }

  function TestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface, associatedInterfacePtrInfo);
  }

  TestInterfaceAssociatedPtr.prototype =
      Object.create(TestInterfacePtr.prototype);
  TestInterfaceAssociatedPtr.prototype.constructor =
      TestInterfaceAssociatedPtr;

  function TestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestInterfacePtr.prototype.bindReceiver = function() {
    return TestInterfaceProxy.prototype.bindReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.bindReceiver = function(receiver) {
    var params_ = new TestInterface_BindReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kTestInterface_BindReceiver_Name,
        codec.align(TestInterface_BindReceiver_Params.encodedSize));
    builder.encodeStruct(TestInterface_BindReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  TestInterfaceStub.prototype.bindReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindReceiver && this.delegate_.bindReceiver(receiver);
  }

  TestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestInterface_BindReceiver_Name:
      var params = reader.decodeStruct(TestInterface_BindReceiver_Params);
      this.bindReceiver(params.receiver);
      return true;
    default:
      return false;
    }
  };

  TestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestInterface_BindReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestInterface_BindReceiver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestInterface = {
    name: 'mojo.test.connection_group_unittest.mojom.TestInterface',
    kVersion: 0,
    ptrClass: TestInterfacePtr,
    proxyClass: TestInterfaceProxy,
    stubClass: TestInterfaceStub,
    validateRequest: validateTestInterfaceRequest,
    validateResponse: null,
  };
  TestInterfaceStub.prototype.validator = validateTestInterfaceRequest;
  TestInterfaceProxy.prototype.validator = null;
  exports.TestInterface = TestInterface;
  exports.TestInterfacePtr = TestInterfacePtr;
  exports.TestInterfaceAssociatedPtr = TestInterfaceAssociatedPtr;
})();