// mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_

#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojo {
namespace test {
namespace idle_tracking_unittest {
namespace mojom {
namespace internal {
class  TestService_Ping_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService_Ping_Params_Data>;

  TestService_Ping_Params_Data();
  ~TestService_Ping_Params_Data() = delete;
};
static_assert(sizeof(TestService_Ping_Params_Data) == 8,
              "Bad sizeof(TestService_Ping_Params_Data)");
class  TestService_PingPong_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService_PingPong_Params_Data>;

  TestService_PingPong_Params_Data();
  ~TestService_PingPong_Params_Data() = delete;
};
static_assert(sizeof(TestService_PingPong_Params_Data) == 8,
              "Bad sizeof(TestService_PingPong_Params_Data)");
class  TestService_PingPong_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TestService_PingPong_ResponseParams_Data>;

  TestService_PingPong_ResponseParams_Data();
  ~TestService_PingPong_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestService_PingPong_ResponseParams_Data) == 8,
              "Bad sizeof(TestService_PingPong_ResponseParams_Data)");
class  TestService_BindKeepAlive_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TestService_BindKeepAlive_Params_Data>;

  TestService_BindKeepAlive_Params_Data();
  ~TestService_BindKeepAlive_Params_Data() = delete;
};
static_assert(sizeof(TestService_BindKeepAlive_Params_Data) == 16,
              "Bad sizeof(TestService_BindKeepAlive_Params_Data)");

}  // namespace internal


class TestService_Ping_ParamsDataView {
 public:
  TestService_Ping_ParamsDataView() {}

  TestService_Ping_ParamsDataView(
      internal::TestService_Ping_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService_Ping_Params_Data* data_ = nullptr;
};



class TestService_PingPong_ParamsDataView {
 public:
  TestService_PingPong_ParamsDataView() {}

  TestService_PingPong_ParamsDataView(
      internal::TestService_PingPong_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService_PingPong_Params_Data* data_ = nullptr;
};



class TestService_PingPong_ResponseParamsDataView {
 public:
  TestService_PingPong_ResponseParamsDataView() {}

  TestService_PingPong_ResponseParamsDataView(
      internal::TestService_PingPong_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TestService_PingPong_ResponseParams_Data* data_ = nullptr;
};



class TestService_BindKeepAlive_ParamsDataView {
 public:
  TestService_BindKeepAlive_ParamsDataView() {}

  TestService_BindKeepAlive_ParamsDataView(
      internal::TestService_BindKeepAlive_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::mojo::test::idle_tracking_unittest::mojom::KeepAliveInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::TestService_BindKeepAlive_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};









}  // namespace mojom
}  // namespace idle_tracking_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_PARAMS_DATA_H_