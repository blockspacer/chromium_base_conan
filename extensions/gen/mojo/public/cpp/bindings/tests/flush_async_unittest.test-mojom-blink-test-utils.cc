// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace flush_async_unittest {
namespace mojom {
namespace blink {


void WriterInterceptorForTesting::Put(const WTF::String& key, const WTF::String& value) {
  GetForwardingInterface()->Put(std::move(key), std::move(value));
}
WriterAsyncWaiter::WriterAsyncWaiter(
    Writer* proxy) : proxy_(proxy) {}

WriterAsyncWaiter::~WriterAsyncWaiter() = default;




void KeyValueStoreClientInterceptorForTesting::OnSnapshotTaken() {
  GetForwardingInterface()->OnSnapshotTaken();
}
KeyValueStoreClientAsyncWaiter::KeyValueStoreClientAsyncWaiter(
    KeyValueStoreClient* proxy) : proxy_(proxy) {}

KeyValueStoreClientAsyncWaiter::~KeyValueStoreClientAsyncWaiter() = default;




void KeyValueStoreInterceptorForTesting::SetClient(::mojo::PendingRemote<KeyValueStoreClient> client) {
  GetForwardingInterface()->SetClient(std::move(client));
}
void KeyValueStoreInterceptorForTesting::BindWriter(::mojo::PendingReceiver<Writer> receiver) {
  GetForwardingInterface()->BindWriter(std::move(receiver));
}
void KeyValueStoreInterceptorForTesting::GetSnapshot(GetSnapshotCallback callback) {
  GetForwardingInterface()->GetSnapshot(std::move(callback));
}
KeyValueStoreAsyncWaiter::KeyValueStoreAsyncWaiter(
    KeyValueStore* proxy) : proxy_(proxy) {}

KeyValueStoreAsyncWaiter::~KeyValueStoreAsyncWaiter() = default;

void KeyValueStoreAsyncWaiter::GetSnapshot(
    WTF::HashMap<WTF::String, WTF::String>* out_entries) {
  base::RunLoop loop;
  proxy_->GetSnapshot(
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::HashMap<WTF::String, WTF::String>* out_entries
,
             const WTF::HashMap<WTF::String, WTF::String>& entries) {*out_entries = std::move(entries);
            loop->Quit();
          },
          &loop,
          out_entries));
  loop.Run();
}



void PingerInterceptorForTesting::Ping(PingCallback callback) {
  GetForwardingInterface()->Ping(std::move(callback));
}
PingerAsyncWaiter::PingerAsyncWaiter(
    Pinger* proxy) : proxy_(proxy) {}

PingerAsyncWaiter::~PingerAsyncWaiter() = default;

void PingerAsyncWaiter::Ping(
    ) {
  base::RunLoop loop;
  proxy_->Ping(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace flush_async_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif