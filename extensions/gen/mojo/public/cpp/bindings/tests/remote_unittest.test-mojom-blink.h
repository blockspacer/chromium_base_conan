// mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/remote_unittest.test-mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace remote_unittest {
namespace mojom {
namespace blink {

class SharedRemoteSyncTestProxy;

template <typename ImplRefTraits>
class SharedRemoteSyncTestStub;

class SharedRemoteSyncTestRequestValidator;
class SharedRemoteSyncTestResponseValidator;


// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest
class  SharedRemoteSyncTest
    : public SharedRemoteSyncTestInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = SharedRemoteSyncTestInterfaceBase;
  using Proxy_ = SharedRemoteSyncTestProxy;

  template <typename ImplRefTraits>
  using Stub_ = SharedRemoteSyncTestStub<ImplRefTraits>;

  using RequestValidator_ = SharedRemoteSyncTestRequestValidator;
  using ResponseValidator_ = SharedRemoteSyncTestResponseValidator;
  enum MethodMinVersions : uint32_t {
    kFetchMinVersion = 0,
  };
  virtual ~SharedRemoteSyncTest() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest.Fetch
  virtual bool Fetch(int32_t* out_value);

  using FetchCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest.Fetch
  virtual void Fetch(FetchCallback callback) = 0;
};

class LargeMessageTestProxy;

template <typename ImplRefTraits>
class LargeMessageTestStub;

class LargeMessageTestRequestValidator;
class LargeMessageTestResponseValidator;


// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest
class  LargeMessageTest
    : public LargeMessageTestInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = LargeMessageTestInterfaceBase;
  using Proxy_ = LargeMessageTestProxy;

  template <typename ImplRefTraits>
  using Stub_ = LargeMessageTestStub<ImplRefTraits>;

  using RequestValidator_ = LargeMessageTestRequestValidator;
  using ResponseValidator_ = LargeMessageTestResponseValidator;
  enum MethodMinVersions : uint32_t {
    kProcessDataMinVersion = 0,
    kProcessLotsOfDataMinVersion = 0,
    kGetLotsOfDataMinVersion = 0,
  };
  virtual ~LargeMessageTest() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessData
  virtual bool ProcessData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size);

  using ProcessDataCallback = base::OnceCallback<void(uint64_t)>;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessData
  virtual void ProcessData(const WTF::Vector<uint8_t>& data, ProcessDataCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessLotsOfData
  virtual bool ProcessLotsOfData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size);

  using ProcessLotsOfDataCallback = base::OnceCallback<void(uint64_t)>;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessLotsOfData
  virtual void ProcessLotsOfData(const WTF::Vector<uint8_t>& data, ProcessLotsOfDataCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.GetLotsOfData
  virtual bool GetLotsOfData(uint64_t data_size, WTF::Vector<uint8_t>* out_data);

  using GetLotsOfDataCallback = base::OnceCallback<void(const WTF::Vector<uint8_t>&)>;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.GetLotsOfData
  virtual void GetLotsOfData(uint64_t data_size, GetLotsOfDataCallback callback) = 0;
};



// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest
class  SharedRemoteSyncTestProxy
    : public SharedRemoteSyncTest {
 public:
  using InterfaceType = SharedRemoteSyncTest;

  explicit SharedRemoteSyncTestProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest.Fetch
  bool Fetch(int32_t* out_value) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.SharedRemoteSyncTest.Fetch
  void Fetch(FetchCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest
class  LargeMessageTestProxy
    : public LargeMessageTest {
 public:
  using InterfaceType = LargeMessageTest;

  explicit LargeMessageTestProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessData
  bool ProcessData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessData
  void ProcessData(const WTF::Vector<uint8_t>& data, ProcessDataCallback callback) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessLotsOfData
  bool ProcessLotsOfData(const WTF::Vector<uint8_t>& data, uint64_t* out_data_size) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.ProcessLotsOfData
  void ProcessLotsOfData(const WTF::Vector<uint8_t>& data, ProcessLotsOfDataCallback callback) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.GetLotsOfData
  bool GetLotsOfData(uint64_t data_size, WTF::Vector<uint8_t>* out_data) final;
  
// @generated_from: mojo.test.remote_unittest.mojom.LargeMessageTest.GetLotsOfData
  void GetLotsOfData(uint64_t data_size, GetLotsOfDataCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  SharedRemoteSyncTestStubDispatch {
 public:
  static bool Accept(SharedRemoteSyncTest* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SharedRemoteSyncTest* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SharedRemoteSyncTest>>
class SharedRemoteSyncTestStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SharedRemoteSyncTestStub() {}
  ~SharedRemoteSyncTestStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedRemoteSyncTestStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedRemoteSyncTestStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  LargeMessageTestStubDispatch {
 public:
  static bool Accept(LargeMessageTest* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      LargeMessageTest* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<LargeMessageTest>>
class LargeMessageTestStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  LargeMessageTestStub() {}
  ~LargeMessageTestStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return LargeMessageTestStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return LargeMessageTestStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SharedRemoteSyncTestRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  LargeMessageTestRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SharedRemoteSyncTestResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  LargeMessageTestResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace remote_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_REMOTE_UNITTEST_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI3MSwgImJlZ2luIjogMjI1MSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20u
U2hhcmVkUmVtb3RlU3luY1Rlc3QifX0sIHsiZW5kIjogMzE3NCwgImJlZ2luIjogMzE2OSwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVf
dW5pdHRlc3QubW9qb20uU2hhcmVkUmVtb3RlU3luY1Rlc3QuRmV0Y2gifX0sIHsiZW5kIjogMzM1
OCwgImJlZ2luIjogMzM1MywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20uU2hhcmVkUmVtb3RlU3luY1Rlc3Qu
RmV0Y2gifX0sIHsiZW5kIjogMzY2MCwgImJlZ2luIjogMzY0NCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20u
TGFyZ2VNZXNzYWdlVGVzdCJ9fSwgeyJlbmQiOiA0NjIxLCAiYmVnaW4iOiA0NjEwLCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnJlbW90ZV91bml0
dGVzdC5tb2pvbS5MYXJnZU1lc3NhZ2VUZXN0LlByb2Nlc3NEYXRhIn19LCB7ImVuZCI6IDQ4NTks
ICJiZWdpbiI6IDQ4NDgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QucmVtb3RlX3VuaXR0ZXN0Lm1vam9tLkxhcmdlTWVzc2FnZVRlc3QuUHJvY2Vz
c0RhdGEifX0sIHsiZW5kIjogNTE4NywgImJlZ2luIjogNTE3MCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20u
TGFyZ2VNZXNzYWdlVGVzdC5Qcm9jZXNzTG90c09mRGF0YSJ9fSwgeyJlbmQiOiA1NDQzLCAiYmVn
aW4iOiA1NDI2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5j
aG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2Uu
Y29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9q
by50ZXN0LnJlbW90ZV91bml0dGVzdC5tb2pvbS5MYXJnZU1lc3NhZ2VUZXN0LlByb2Nlc3NMb3Rz
T2ZEYXRhIn19LCB7ImVuZCI6IDU3NjksICJiZWdpbiI6IDU3NTYsICJlZGdlIjogIiUva3l0aGUv
ZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29y
cHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdl
IjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVtb3RlX3VuaXR0ZXN0Lm1vam9t
LkxhcmdlTWVzc2FnZVRlc3QuR2V0TG90c09mRGF0YSJ9fSwgeyJlbmQiOiA2MDI1LCAiYmVnaW4i
OiA2MDEyLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LnJlbW90ZV91bml0dGVzdC5tb2pvbS5MYXJnZU1lc3NhZ2VUZXN0LkdldExvdHNPZkRhdGEi
fX0sIHsiZW5kIjogNjQ2NSwgImJlZ2luIjogNjQ2MCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20uU2hhcmVk
UmVtb3RlU3luY1Rlc3QuRmV0Y2gifX0sIHsiZW5kIjogNjU4NywgImJlZ2luIjogNjU4MiwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVf
dW5pdHRlc3QubW9qb20uU2hhcmVkUmVtb3RlU3luY1Rlc3QuRmV0Y2gifX0sIHsiZW5kIjogNzA0
OSwgImJlZ2luIjogNzAzOCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20uTGFyZ2VNZXNzYWdlVGVzdC5Qcm9j
ZXNzRGF0YSJ9fSwgeyJlbmQiOiA3MjE4LCAiYmVnaW4iOiA3MjA3LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnJlbW90ZV91bml0dGVzdC5tb2pv
bS5MYXJnZU1lc3NhZ2VUZXN0LlByb2Nlc3NEYXRhIn19LCB7ImVuZCI6IDc0MDQsICJiZWdpbiI6
IDczODcsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRl
c3QucmVtb3RlX3VuaXR0ZXN0Lm1vam9tLkxhcmdlTWVzc2FnZVRlc3QuUHJvY2Vzc0xvdHNPZkRh
dGEifX0sIHsiZW5kIjogNzU4NSwgImJlZ2luIjogNzU2OCwgImVkZ2UiOiAiJS9reXRoZS9lZGdl
L2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMi
OiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAi
bW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20uTGFy
Z2VNZXNzYWdlVGVzdC5Qcm9jZXNzTG90c09mRGF0YSJ9fSwgeyJlbmQiOiA3NzY5LCAiYmVnaW4i
OiA3NzU2LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50
ZXN0LnJlbW90ZV91bml0dGVzdC5tb2pvbS5MYXJnZU1lc3NhZ2VUZXN0LkdldExvdHNPZkRhdGEi
fX0sIHsiZW5kIjogNzkzNSwgImJlZ2luIjogNzkyMiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZW1vdGVfdW5pdHRlc3QubW9qb20uTGFyZ2VN
ZXNzYWdlVGVzdC5HZXRMb3RzT2ZEYXRhIn19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/