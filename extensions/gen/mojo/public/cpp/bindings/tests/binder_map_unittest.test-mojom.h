// mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_BINDER_MAP_UNITTEST_TEST_MOJOM_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_BINDER_MAP_UNITTEST_TEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/binder_map_unittest.test-mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace binder_map_unittest {
namespace mojom {

class TestInterface1Proxy;

template <typename ImplRefTraits>
class TestInterface1Stub;

class TestInterface1RequestValidator;


// @generated_from: mojo.test.binder_map_unittest.mojom.TestInterface1
class  TestInterface1
    : public TestInterface1InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterface1InterfaceBase;
  using Proxy_ = TestInterface1Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterface1Stub<ImplRefTraits>;

  using RequestValidator_ = TestInterface1RequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~TestInterface1() {}
};

class TestInterface2Proxy;

template <typename ImplRefTraits>
class TestInterface2Stub;

class TestInterface2RequestValidator;


// @generated_from: mojo.test.binder_map_unittest.mojom.TestInterface2
class  TestInterface2
    : public TestInterface2InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterface2InterfaceBase;
  using Proxy_ = TestInterface2Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterface2Stub<ImplRefTraits>;

  using RequestValidator_ = TestInterface2RequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~TestInterface2() {}
};



// @generated_from: mojo.test.binder_map_unittest.mojom.TestInterface1
class  TestInterface1Proxy
    : public TestInterface1 {
 public:
  using InterfaceType = TestInterface1;

  explicit TestInterface1Proxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.binder_map_unittest.mojom.TestInterface2
class  TestInterface2Proxy
    : public TestInterface2 {
 public:
  using InterfaceType = TestInterface2;

  explicit TestInterface2Proxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestInterface1StubDispatch {
 public:
  static bool Accept(TestInterface1* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface1* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface1>>
class TestInterface1Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterface1Stub() {}
  ~TestInterface1Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface1StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface1StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterface2StubDispatch {
 public:
  static bool Accept(TestInterface2* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface2* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface2>>
class TestInterface2Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterface2Stub() {}
  ~TestInterface2Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface2StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface2StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterface1RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestInterface2RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace binder_map_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_BINDER_MAP_UNITTEST_TEST_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTk2MCwgImJlZ2luIjogMTk0NiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5iaW5kZXJfbWFwX3VuaXR0ZXN0Lm1v
am9tLlRlc3RJbnRlcmZhY2UxIn19LCB7ImVuZCI6IDI3NzUsICJiZWdpbiI6IDI3NjEsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuYmluZGVyX21h
cF91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlMiJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/