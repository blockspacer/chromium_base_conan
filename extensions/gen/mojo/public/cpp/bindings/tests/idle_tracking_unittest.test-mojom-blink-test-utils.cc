// mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "mojo/public/cpp/bindings/tests/idle_tracking_unittest.test-mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_IDLE_TRACKING_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif


namespace mojo {
namespace test {
namespace idle_tracking_unittest {
namespace mojom {
namespace blink {


void TestServiceInterceptorForTesting::Ping() {
  GetForwardingInterface()->Ping();
}
void TestServiceInterceptorForTesting::PingPong(PingPongCallback callback) {
  GetForwardingInterface()->PingPong(std::move(callback));
}
void TestServiceInterceptorForTesting::BindKeepAlive(::mojo::PendingReceiver<KeepAlive> receiver) {
  GetForwardingInterface()->BindKeepAlive(std::move(receiver));
}
TestServiceAsyncWaiter::TestServiceAsyncWaiter(
    TestService* proxy) : proxy_(proxy) {}

TestServiceAsyncWaiter::~TestServiceAsyncWaiter() = default;

void TestServiceAsyncWaiter::PingPong(
    ) {
  base::RunLoop loop;
  proxy_->PingPong(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



KeepAliveAsyncWaiter::KeepAliveAsyncWaiter(
    KeepAlive* proxy) : proxy_(proxy) {}

KeepAliveAsyncWaiter::~KeepAliveAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace idle_tracking_unittest
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif