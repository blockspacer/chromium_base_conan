// mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/bindings/tests/enum_default_unittest.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.enumDefaultUnittest.mojom');


  var ExtensibleEnumWithDefault = {};
  ExtensibleEnumWithDefault.kZeroth = 0;
  ExtensibleEnumWithDefault.kFirst = 1;
  ExtensibleEnumWithDefault.MIN_VALUE = 0;
  ExtensibleEnumWithDefault.MAX_VALUE = 1;
  ExtensibleEnumWithDefault.DEFAULT_VALUE = 1;

  ExtensibleEnumWithDefault.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ExtensibleEnumWithDefault.toKnownEnumValue = function(value) {
    if (this.isKnownEnumValue(value))
      return value;
    return this.DEFAULT_VALUE;
  };

  ExtensibleEnumWithDefault.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ExtensibleEnumWithoutDefault = {};
  ExtensibleEnumWithoutDefault.kZeroth = 0;
  ExtensibleEnumWithoutDefault.kFirst = 1;
  ExtensibleEnumWithoutDefault.MIN_VALUE = 0;
  ExtensibleEnumWithoutDefault.MAX_VALUE = 1;

  ExtensibleEnumWithoutDefault.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ExtensibleEnumWithoutDefault.toKnownEnumValue = function(value) {
    return value;
  };

  ExtensibleEnumWithoutDefault.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EnumWithoutZeroValue = {};
  EnumWithoutZeroValue.kFirst = 1;
  EnumWithoutZeroValue.kSecond = 2;
  EnumWithoutZeroValue.MIN_VALUE = 1;
  EnumWithoutZeroValue.MAX_VALUE = 2;
  EnumWithoutZeroValue.DEFAULT_VALUE = 1;

  EnumWithoutZeroValue.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  EnumWithoutZeroValue.toKnownEnumValue = function(value) {
    if (this.isKnownEnumValue(value))
      return value;
    return this.DEFAULT_VALUE;
  };

  EnumWithoutZeroValue.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function StructWithExtensibleEnumWithDefault(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithExtensibleEnumWithDefault.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  StructWithExtensibleEnumWithDefault.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithExtensibleEnumWithDefault.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithExtensibleEnumWithDefault.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithExtensibleEnumWithDefault.encodedSize = codec.kStructHeaderSize + 8;

  StructWithExtensibleEnumWithDefault.decode = function(decoder) {
    var packed;
    var val = new StructWithExtensibleEnumWithDefault();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithExtensibleEnumWithDefault.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithExtensibleEnumWithDefault.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructWithExtensibleEnumWithoutDefault(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithExtensibleEnumWithoutDefault.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  StructWithExtensibleEnumWithoutDefault.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithExtensibleEnumWithoutDefault.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithExtensibleEnumWithoutDefault.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithoutDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithExtensibleEnumWithoutDefault.encodedSize = codec.kStructHeaderSize + 8;

  StructWithExtensibleEnumWithoutDefault.decode = function(decoder) {
    var packed;
    var val = new StructWithExtensibleEnumWithoutDefault();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithoutDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithExtensibleEnumWithoutDefault.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithExtensibleEnumWithoutDefault.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructWithoutInitializer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithoutInitializer.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  StructWithoutInitializer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithoutInitializer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithoutInitializer.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithoutZeroValue);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithoutInitializer.encodedSize = codec.kStructHeaderSize + 8;

  StructWithoutInitializer.decode = function(decoder) {
    var packed;
    var val = new StructWithoutInitializer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(EnumWithoutZeroValue));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithoutInitializer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithoutInitializer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StructWithInitializer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StructWithInitializer.prototype.initDefaults_ = function() {
    this.value = EnumWithoutZeroValue.kSecond;
  };
  StructWithInitializer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StructWithInitializer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StructWithInitializer.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EnumWithoutZeroValue);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StructWithInitializer.encodedSize = codec.kStructHeaderSize + 8;

  StructWithInitializer.decode = function(decoder) {
    var packed;
    var val = new StructWithInitializer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(EnumWithoutZeroValue));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StructWithInitializer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StructWithInitializer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestInterface_EchoWithDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoWithDefault_Params.prototype.initDefaults_ = function() {
    this.in = 0;
  };
  TestInterface_EchoWithDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoWithDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoWithDefault_Params.in
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoWithDefault_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoWithDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoWithDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestInterface_EchoWithDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoWithDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.in);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestInterface_EchoWithDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoWithDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = 0;
  };
  TestInterface_EchoWithDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoWithDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoWithDefault_ResponseParams.out
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoWithDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoWithDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoWithDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestInterface_EchoWithDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoWithDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.out);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestInterface_EchoWithoutDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoWithoutDefault_Params.prototype.initDefaults_ = function() {
    this.in = 0;
  };
  TestInterface_EchoWithoutDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoWithoutDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoWithoutDefault_Params.in
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithoutDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoWithoutDefault_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoWithoutDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoWithoutDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithoutDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestInterface_EchoWithoutDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoWithoutDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.in);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestInterface_EchoWithoutDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoWithoutDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = 0;
  };
  TestInterface_EchoWithoutDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoWithoutDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoWithoutDefault_ResponseParams.out
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ExtensibleEnumWithoutDefault);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoWithoutDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoWithoutDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoWithoutDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithoutDefault));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestInterface_EchoWithoutDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoWithoutDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.out);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestInterface_EchoStructWithDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoStructWithDefault_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  TestInterface_EchoStructWithDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoStructWithDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoStructWithDefault_Params.in
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithExtensibleEnumWithDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoStructWithDefault_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoStructWithDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoStructWithDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStructPointer(StructWithExtensibleEnumWithDefault);
    return val;
  };

  TestInterface_EchoStructWithDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoStructWithDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithExtensibleEnumWithDefault, val.in);
  };
  function TestInterface_EchoStructWithDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoStructWithDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  TestInterface_EchoStructWithDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoStructWithDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoStructWithDefault_ResponseParams.out
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithExtensibleEnumWithDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoStructWithDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoStructWithDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoStructWithDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStructPointer(StructWithExtensibleEnumWithDefault);
    return val;
  };

  TestInterface_EchoStructWithDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoStructWithDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithExtensibleEnumWithDefault, val.out);
  };
  function TestInterface_EchoStructWithoutDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoStructWithoutDefault_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  TestInterface_EchoStructWithoutDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoStructWithoutDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoStructWithoutDefault_Params.in
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithExtensibleEnumWithoutDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoStructWithoutDefault_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoStructWithoutDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoStructWithoutDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStructPointer(StructWithExtensibleEnumWithoutDefault);
    return val;
  };

  TestInterface_EchoStructWithoutDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoStructWithoutDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithExtensibleEnumWithoutDefault, val.in);
  };
  function TestInterface_EchoStructWithoutDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoStructWithoutDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  TestInterface_EchoStructWithoutDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoStructWithoutDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoStructWithoutDefault_ResponseParams.out
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, StructWithExtensibleEnumWithoutDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoStructWithoutDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestInterface_EchoStructWithoutDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoStructWithoutDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStructPointer(StructWithExtensibleEnumWithoutDefault);
    return val;
  };

  TestInterface_EchoStructWithoutDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoStructWithoutDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(StructWithExtensibleEnumWithoutDefault, val.out);
  };
  function TestInterface_EchoUnionWithDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoUnionWithDefault_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  TestInterface_EchoUnionWithDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoUnionWithDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoUnionWithDefault_Params.in
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithExtensibleEnumWithDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoUnionWithDefault_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestInterface_EchoUnionWithDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoUnionWithDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStruct(UnionWithExtensibleEnumWithDefault);
    return val;
  };

  TestInterface_EchoUnionWithDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoUnionWithDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithExtensibleEnumWithDefault, val.in);
  };
  function TestInterface_EchoUnionWithDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoUnionWithDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  TestInterface_EchoUnionWithDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoUnionWithDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoUnionWithDefault_ResponseParams.out
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithExtensibleEnumWithDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoUnionWithDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestInterface_EchoUnionWithDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoUnionWithDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStruct(UnionWithExtensibleEnumWithDefault);
    return val;
  };

  TestInterface_EchoUnionWithDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoUnionWithDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithExtensibleEnumWithDefault, val.out);
  };
  function TestInterface_EchoUnionWithoutDefault_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoUnionWithoutDefault_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  TestInterface_EchoUnionWithoutDefault_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoUnionWithoutDefault_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoUnionWithoutDefault_Params.in
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithExtensibleEnumWithoutDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoUnionWithoutDefault_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestInterface_EchoUnionWithoutDefault_Params.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoUnionWithoutDefault_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStruct(UnionWithExtensibleEnumWithoutDefault);
    return val;
  };

  TestInterface_EchoUnionWithoutDefault_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoUnionWithoutDefault_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithExtensibleEnumWithoutDefault, val.in);
  };
  function TestInterface_EchoUnionWithoutDefault_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestInterface_EchoUnionWithoutDefault_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  TestInterface_EchoUnionWithoutDefault_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestInterface_EchoUnionWithoutDefault_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestInterface_EchoUnionWithoutDefault_ResponseParams.out
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, UnionWithExtensibleEnumWithoutDefault, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestInterface_EchoUnionWithoutDefault_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestInterface_EchoUnionWithoutDefault_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestInterface_EchoUnionWithoutDefault_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStruct(UnionWithExtensibleEnumWithoutDefault);
    return val;
  };

  TestInterface_EchoUnionWithoutDefault_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestInterface_EchoUnionWithoutDefault_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(UnionWithExtensibleEnumWithoutDefault, val.out);
  };

  function UnionWithExtensibleEnumWithDefault(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  UnionWithExtensibleEnumWithDefault.Tags = {
    value: 0,
  };

  UnionWithExtensibleEnumWithDefault.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  UnionWithExtensibleEnumWithDefault.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a UnionWithExtensibleEnumWithDefault member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(UnionWithExtensibleEnumWithDefault.prototype, "value", {
    get: function() {
      if (this.$tag != UnionWithExtensibleEnumWithDefault.Tags.value) {
        throw new ReferenceError(
            "UnionWithExtensibleEnumWithDefault.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithExtensibleEnumWithDefault.Tags.value;
      this.$data = value;
    }
  });


    UnionWithExtensibleEnumWithDefault.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case UnionWithExtensibleEnumWithDefault.Tags.value:
          encoder.encodeStruct(codec.Int32, val.value);
          break;
      }
      encoder.align();
    };


    UnionWithExtensibleEnumWithDefault.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new UnionWithExtensibleEnumWithDefault();
      var tag = decoder.readUint32();
      switch (tag) {
        case UnionWithExtensibleEnumWithDefault.Tags.value:
          result.value = decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithDefault));
          break;
      }
      decoder.align();

      return result;
    };


    UnionWithExtensibleEnumWithDefault.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case UnionWithExtensibleEnumWithDefault.Tags.value:
          

    // validate UnionWithExtensibleEnumWithDefault.value
    err = messageValidator.validateEnum(data_offset, ExtensibleEnumWithDefault);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  UnionWithExtensibleEnumWithDefault.encodedSize = 16;

  function UnionWithExtensibleEnumWithoutDefault(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  UnionWithExtensibleEnumWithoutDefault.Tags = {
    value: 0,
  };

  UnionWithExtensibleEnumWithoutDefault.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  UnionWithExtensibleEnumWithoutDefault.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a UnionWithExtensibleEnumWithoutDefault member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(UnionWithExtensibleEnumWithoutDefault.prototype, "value", {
    get: function() {
      if (this.$tag != UnionWithExtensibleEnumWithoutDefault.Tags.value) {
        throw new ReferenceError(
            "UnionWithExtensibleEnumWithoutDefault.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = UnionWithExtensibleEnumWithoutDefault.Tags.value;
      this.$data = value;
    }
  });


    UnionWithExtensibleEnumWithoutDefault.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case UnionWithExtensibleEnumWithoutDefault.Tags.value:
          encoder.encodeStruct(codec.Int32, val.value);
          break;
      }
      encoder.align();
    };


    UnionWithExtensibleEnumWithoutDefault.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new UnionWithExtensibleEnumWithoutDefault();
      var tag = decoder.readUint32();
      switch (tag) {
        case UnionWithExtensibleEnumWithoutDefault.Tags.value:
          result.value = decoder.decodeStruct(new codec.Enum(ExtensibleEnumWithoutDefault));
          break;
      }
      decoder.align();

      return result;
    };


    UnionWithExtensibleEnumWithoutDefault.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case UnionWithExtensibleEnumWithoutDefault.Tags.value:
          

    // validate UnionWithExtensibleEnumWithoutDefault.value
    err = messageValidator.validateEnum(data_offset, ExtensibleEnumWithoutDefault);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  UnionWithExtensibleEnumWithoutDefault.encodedSize = 16;
  var kTestInterface_EchoWithDefault_Name = 490516208;
  var kTestInterface_EchoWithoutDefault_Name = 2037498148;
  var kTestInterface_EchoStructWithDefault_Name = 212424705;
  var kTestInterface_EchoStructWithoutDefault_Name = 1474641530;
  var kTestInterface_EchoUnionWithDefault_Name = 559057625;
  var kTestInterface_EchoUnionWithoutDefault_Name = 1582513947;

  function TestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestInterface,
                                                   handleOrPtrInfo);
  }

  function TestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestInterface, associatedInterfacePtrInfo);
  }

  TestInterfaceAssociatedPtr.prototype =
      Object.create(TestInterfacePtr.prototype);
  TestInterfaceAssociatedPtr.prototype.constructor =
      TestInterfaceAssociatedPtr;

  function TestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestInterfacePtr.prototype.echoWithDefault = function() {
    return TestInterfaceProxy.prototype.echoWithDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoWithDefault = function(in_) {
    var params_ = new TestInterface_EchoWithDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoWithDefault_Name,
          codec.align(TestInterface_EchoWithDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoWithDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoWithDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestInterfacePtr.prototype.echoWithoutDefault = function() {
    return TestInterfaceProxy.prototype.echoWithoutDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoWithoutDefault = function(in_) {
    var params_ = new TestInterface_EchoWithoutDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoWithoutDefault_Name,
          codec.align(TestInterface_EchoWithoutDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoWithoutDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoWithoutDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestInterfacePtr.prototype.echoStructWithDefault = function() {
    return TestInterfaceProxy.prototype.echoStructWithDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoStructWithDefault = function(in_) {
    var params_ = new TestInterface_EchoStructWithDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoStructWithDefault_Name,
          codec.align(TestInterface_EchoStructWithDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoStructWithDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoStructWithDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestInterfacePtr.prototype.echoStructWithoutDefault = function() {
    return TestInterfaceProxy.prototype.echoStructWithoutDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoStructWithoutDefault = function(in_) {
    var params_ = new TestInterface_EchoStructWithoutDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoStructWithoutDefault_Name,
          codec.align(TestInterface_EchoStructWithoutDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoStructWithoutDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoStructWithoutDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestInterfacePtr.prototype.echoUnionWithDefault = function() {
    return TestInterfaceProxy.prototype.echoUnionWithDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoUnionWithDefault = function(in_) {
    var params_ = new TestInterface_EchoUnionWithDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoUnionWithDefault_Name,
          codec.align(TestInterface_EchoUnionWithDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoUnionWithDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoUnionWithDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestInterfacePtr.prototype.echoUnionWithoutDefault = function() {
    return TestInterfaceProxy.prototype.echoUnionWithoutDefault
        .apply(this.ptr.getProxy(), arguments);
  };

  TestInterfaceProxy.prototype.echoUnionWithoutDefault = function(in_) {
    var params_ = new TestInterface_EchoUnionWithoutDefault_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestInterface_EchoUnionWithoutDefault_Name,
          codec.align(TestInterface_EchoUnionWithoutDefault_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestInterface_EchoUnionWithoutDefault_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestInterface_EchoUnionWithoutDefault_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  TestInterfaceStub.prototype.echoWithDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoWithDefault && this.delegate_.echoWithDefault(in_);
  }
  TestInterfaceStub.prototype.echoWithoutDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoWithoutDefault && this.delegate_.echoWithoutDefault(in_);
  }
  TestInterfaceStub.prototype.echoStructWithDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoStructWithDefault && this.delegate_.echoStructWithDefault(in_);
  }
  TestInterfaceStub.prototype.echoStructWithoutDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoStructWithoutDefault && this.delegate_.echoStructWithoutDefault(in_);
  }
  TestInterfaceStub.prototype.echoUnionWithDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoUnionWithDefault && this.delegate_.echoUnionWithDefault(in_);
  }
  TestInterfaceStub.prototype.echoUnionWithoutDefault = function(in_) {
    return this.delegate_ && this.delegate_.echoUnionWithoutDefault && this.delegate_.echoUnionWithoutDefault(in_);
  }

  TestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestInterface_EchoWithDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoWithDefault_Params);
      this.echoWithDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoWithDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoWithDefault_Name,
            codec.align(TestInterface_EchoWithDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoWithDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestInterface_EchoWithoutDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoWithoutDefault_Params);
      this.echoWithoutDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoWithoutDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoWithoutDefault_Name,
            codec.align(TestInterface_EchoWithoutDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoWithoutDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestInterface_EchoStructWithDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoStructWithDefault_Params);
      this.echoStructWithDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoStructWithDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoStructWithDefault_Name,
            codec.align(TestInterface_EchoStructWithDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoStructWithDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestInterface_EchoStructWithoutDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoStructWithoutDefault_Params);
      this.echoStructWithoutDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoStructWithoutDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoStructWithoutDefault_Name,
            codec.align(TestInterface_EchoStructWithoutDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoStructWithoutDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestInterface_EchoUnionWithDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoUnionWithDefault_Params);
      this.echoUnionWithDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoUnionWithDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoUnionWithDefault_Name,
            codec.align(TestInterface_EchoUnionWithDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoUnionWithDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestInterface_EchoUnionWithoutDefault_Name:
      var params = reader.decodeStruct(TestInterface_EchoUnionWithoutDefault_Params);
      this.echoUnionWithoutDefault(params.in).then(function(response) {
        var responseParams =
            new TestInterface_EchoUnionWithoutDefault_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kTestInterface_EchoUnionWithoutDefault_Name,
            codec.align(TestInterface_EchoUnionWithoutDefault_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestInterface_EchoUnionWithoutDefault_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestInterface_EchoWithDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoWithDefault_Params;
      break;
      case kTestInterface_EchoWithoutDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoWithoutDefault_Params;
      break;
      case kTestInterface_EchoStructWithDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoStructWithDefault_Params;
      break;
      case kTestInterface_EchoStructWithoutDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoStructWithoutDefault_Params;
      break;
      case kTestInterface_EchoUnionWithDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoUnionWithDefault_Params;
      break;
      case kTestInterface_EchoUnionWithoutDefault_Name:
        if (message.expectsResponse())
          paramsClass = TestInterface_EchoUnionWithoutDefault_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestInterface_EchoWithDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoWithDefault_ResponseParams;
        break;
      case kTestInterface_EchoWithoutDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoWithoutDefault_ResponseParams;
        break;
      case kTestInterface_EchoStructWithDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoStructWithDefault_ResponseParams;
        break;
      case kTestInterface_EchoStructWithoutDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoStructWithoutDefault_ResponseParams;
        break;
      case kTestInterface_EchoUnionWithDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoUnionWithDefault_ResponseParams;
        break;
      case kTestInterface_EchoUnionWithoutDefault_Name:
        if (message.isResponse())
          paramsClass = TestInterface_EchoUnionWithoutDefault_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestInterface = {
    name: 'mojo.test.enum_default_unittest.mojom.TestInterface',
    kVersion: 0,
    ptrClass: TestInterfacePtr,
    proxyClass: TestInterfaceProxy,
    stubClass: TestInterfaceStub,
    validateRequest: validateTestInterfaceRequest,
    validateResponse: validateTestInterfaceResponse,
  };
  TestInterfaceStub.prototype.validator = validateTestInterfaceRequest;
  TestInterfaceProxy.prototype.validator = validateTestInterfaceResponse;
  exports.ExtensibleEnumWithDefault = ExtensibleEnumWithDefault;
  exports.ExtensibleEnumWithoutDefault = ExtensibleEnumWithoutDefault;
  exports.EnumWithoutZeroValue = EnumWithoutZeroValue;
  exports.StructWithExtensibleEnumWithDefault = StructWithExtensibleEnumWithDefault;
  exports.StructWithExtensibleEnumWithoutDefault = StructWithExtensibleEnumWithoutDefault;
  exports.StructWithoutInitializer = StructWithoutInitializer;
  exports.StructWithInitializer = StructWithInitializer;
  exports.UnionWithExtensibleEnumWithDefault = UnionWithExtensibleEnumWithDefault;
  exports.UnionWithExtensibleEnumWithoutDefault = UnionWithExtensibleEnumWithoutDefault;
  exports.TestInterface = TestInterface;
  exports.TestInterfacePtr = TestInterfacePtr;
  exports.TestInterfaceAssociatedPtr = TestInterfaceAssociatedPtr;
})();