// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../js/bindings.js';

import {
  GenericPendingReceiver as mojoBase_mojom_GenericPendingReceiver,
  GenericPendingReceiverSpec as mojoBase_mojom_GenericPendingReceiverSpec
} from '../../../mojom/base/generic_pending_receiver.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const TestGenericBinderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.receiver_unittest.mojom.TestGenericBinder', scope);
  }
};

/** @interface */
export const TestGenericBinderInterface = class {
  
  /**
   * @param { mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindOptionalReceiver(receiver) {}
  
  /**
   * @param { !mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindReceiver(receiver) {}
};

/**
 * @implements { TestGenericBinderInterface }
 */
export const TestGenericBinderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!TestGenericBinderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          TestGenericBinderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!TestGenericBinderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindOptionalReceiver(
      receiver) {
    this.proxy.sendMessage(
        968255268,
        TestGenericBinder_BindOptionalReceiver_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_GenericPendingReceiver } receiver
   */

  bindReceiver(
      receiver) {
    this.proxy.sendMessage(
        220077361,
        TestGenericBinder_BindReceiver_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the TestGenericBinder
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const TestGenericBinderReceiver = class {
  /**
   * @param {!TestGenericBinderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!TestGenericBinderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        TestGenericBinderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestGenericBinderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        968255268,
        TestGenericBinder_BindOptionalReceiver_ParamsSpec.$,
        null,
        impl.bindOptionalReceiver.bind(impl));
    this.helper_internal_.registerHandler(
        220077361,
        TestGenericBinder_BindReceiver_ParamsSpec.$,
        null,
        impl.bindReceiver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const TestGenericBinder = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.receiver_unittest.mojom.TestGenericBinder";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!TestGenericBinderRemote}
   */
  static getRemote() {
    let remote = new TestGenericBinderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestGenericBinder
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const TestGenericBinderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      TestGenericBinderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestGenericBinderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bindOptionalReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        968255268,
        TestGenericBinder_BindOptionalReceiver_ParamsSpec.$,
        null,
        this.bindOptionalReceiver.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bindReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        220077361,
        TestGenericBinder_BindReceiver_ParamsSpec.$,
        null,
        this.bindReceiver.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const TestInterface1PendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.receiver_unittest.mojom.TestInterface1', scope);
  }
};

/** @interface */
export const TestInterface1Interface = class {
};

/**
 * @implements { TestInterface1Interface }
 */
export const TestInterface1Remote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!TestInterface1PendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          TestInterface1PendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!TestInterface1PendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the TestInterface1
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const TestInterface1Receiver = class {
  /**
   * @param {!TestInterface1Interface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!TestInterface1Remote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        TestInterface1Remote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterface1Remote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const TestInterface1 = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.receiver_unittest.mojom.TestInterface1";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!TestInterface1Remote}
   */
  static getRemote() {
    let remote = new TestInterface1Remote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestInterface1
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const TestInterface1CallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      TestInterface1Remote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterface1Remote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const TestInterface2PendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.receiver_unittest.mojom.TestInterface2', scope);
  }
};

/** @interface */
export const TestInterface2Interface = class {
};

/**
 * @implements { TestInterface2Interface }
 */
export const TestInterface2Remote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!TestInterface2PendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          TestInterface2PendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!TestInterface2PendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the TestInterface2
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const TestInterface2Receiver = class {
  /**
   * @param {!TestInterface2Interface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!TestInterface2Remote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        TestInterface2Remote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterface2Remote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const TestInterface2 = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.receiver_unittest.mojom.TestInterface2";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!TestInterface2Remote}
   */
  static getRemote() {
    let remote = new TestInterface2Remote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestInterface2
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const TestInterface2CallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      TestInterface2Remote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestInterface2Remote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const RebindTestInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojo.test.receiver_unittest.mojom.RebindTestInterface', scope);
  }
};

/** @interface */
export const RebindTestInterfaceInterface = class {
  
  /**
   */

  blockingUntilExternalSignalCall() {}
  
  /**
   */

  normalCall() {}
  
  /**
   * @return {!Promise}
   */

  syncCall() {}
};

/**
 * @implements { RebindTestInterfaceInterface }
 */
export const RebindTestInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RebindTestInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RebindTestInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RebindTestInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  blockingUntilExternalSignalCall() {
    this.proxy.sendMessage(
        255218147,
        RebindTestInterface_BlockingUntilExternalSignalCall_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  normalCall() {
    this.proxy.sendMessage(
        1644915030,
        RebindTestInterface_NormalCall_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  syncCall() {
    return this.proxy.sendMessage(
        1406776752,
        RebindTestInterface_SyncCall_ParamsSpec.$,
        RebindTestInterface_SyncCall_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the RebindTestInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const RebindTestInterfaceReceiver = class {
  /**
   * @param {!RebindTestInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RebindTestInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RebindTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RebindTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        255218147,
        RebindTestInterface_BlockingUntilExternalSignalCall_ParamsSpec.$,
        null,
        impl.blockingUntilExternalSignalCall.bind(impl));
    this.helper_internal_.registerHandler(
        1644915030,
        RebindTestInterface_NormalCall_ParamsSpec.$,
        null,
        impl.normalCall.bind(impl));
    this.helper_internal_.registerHandler(
        1406776752,
        RebindTestInterface_SyncCall_ParamsSpec.$,
        RebindTestInterface_SyncCall_ResponseParamsSpec.$,
        impl.syncCall.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const RebindTestInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojo.test.receiver_unittest.mojom.RebindTestInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RebindTestInterfaceRemote}
   */
  static getRemote() {
    let remote = new RebindTestInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RebindTestInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const RebindTestInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RebindTestInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RebindTestInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.blockingUntilExternalSignalCall =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        255218147,
        RebindTestInterface_BlockingUntilExternalSignalCall_ParamsSpec.$,
        null,
        this.blockingUntilExternalSignalCall.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.normalCall =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1644915030,
        RebindTestInterface_NormalCall_ParamsSpec.$,
        null,
        this.normalCall.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.syncCall =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1406776752,
        RebindTestInterface_SyncCall_ParamsSpec.$,
        RebindTestInterface_SyncCall_ResponseParamsSpec.$,
        this.syncCall.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestGenericBinder_BindOptionalReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestGenericBinder_BindReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RebindTestInterface_BlockingUntilExternalSignalCall_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RebindTestInterface_NormalCall_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RebindTestInterface_SyncCall_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RebindTestInterface_SyncCall_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    TestGenericBinder_BindOptionalReceiver_ParamsSpec.$,
    'TestGenericBinder_BindOptionalReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojoBase_mojom_GenericPendingReceiverSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestGenericBinder_BindOptionalReceiver_Params = class {
  constructor() {
    /** @type { (mojoBase_mojom_GenericPendingReceiver|undefined) } */
    this.receiver;
  }
};



mojo.internal.Struct(
    TestGenericBinder_BindReceiver_ParamsSpec.$,
    'TestGenericBinder_BindReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojoBase_mojom_GenericPendingReceiverSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestGenericBinder_BindReceiver_Params = class {
  constructor() {
    /** @type { !mojoBase_mojom_GenericPendingReceiver } */
    this.receiver;
  }
};



mojo.internal.Struct(
    RebindTestInterface_BlockingUntilExternalSignalCall_ParamsSpec.$,
    'RebindTestInterface_BlockingUntilExternalSignalCall_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const RebindTestInterface_BlockingUntilExternalSignalCall_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    RebindTestInterface_NormalCall_ParamsSpec.$,
    'RebindTestInterface_NormalCall_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const RebindTestInterface_NormalCall_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    RebindTestInterface_SyncCall_ParamsSpec.$,
    'RebindTestInterface_SyncCall_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const RebindTestInterface_SyncCall_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    RebindTestInterface_SyncCall_ResponseParamsSpec.$,
    'RebindTestInterface_SyncCall_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const RebindTestInterface_SyncCall_ResponseParams = class {
  constructor() {
  }
};

