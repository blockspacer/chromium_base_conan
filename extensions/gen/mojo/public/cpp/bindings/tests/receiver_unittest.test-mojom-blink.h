// mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_BLINK_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-shared.h"
#include "mojo/public/cpp/bindings/tests/receiver_unittest.test-mojom-blink-forward.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace receiver_unittest {
namespace mojom {
namespace blink {

class TestGenericBinderProxy;

template <typename ImplRefTraits>
class TestGenericBinderStub;

class TestGenericBinderRequestValidator;


// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder
class  TestGenericBinder
    : public TestGenericBinderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestGenericBinderInterfaceBase;
  using Proxy_ = TestGenericBinderProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestGenericBinderStub<ImplRefTraits>;

  using RequestValidator_ = TestGenericBinderRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kBindOptionalReceiverMinVersion = 0,
    kBindReceiverMinVersion = 0,
  };
  virtual ~TestGenericBinder() {}

  
// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder.BindOptionalReceiver
  virtual void BindOptionalReceiver(::mojo::GenericPendingReceiver receiver) = 0;

  
// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder.BindReceiver
  virtual void BindReceiver(::mojo::GenericPendingReceiver receiver) = 0;
};

class TestInterface1Proxy;

template <typename ImplRefTraits>
class TestInterface1Stub;

class TestInterface1RequestValidator;


// @generated_from: mojo.test.receiver_unittest.mojom.TestInterface1
class  TestInterface1
    : public TestInterface1InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterface1InterfaceBase;
  using Proxy_ = TestInterface1Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterface1Stub<ImplRefTraits>;

  using RequestValidator_ = TestInterface1RequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~TestInterface1() {}
};

class TestInterface2Proxy;

template <typename ImplRefTraits>
class TestInterface2Stub;

class TestInterface2RequestValidator;


// @generated_from: mojo.test.receiver_unittest.mojom.TestInterface2
class  TestInterface2
    : public TestInterface2InterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestInterface2InterfaceBase;
  using Proxy_ = TestInterface2Proxy;

  template <typename ImplRefTraits>
  using Stub_ = TestInterface2Stub<ImplRefTraits>;

  using RequestValidator_ = TestInterface2RequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };
  virtual ~TestInterface2() {}
};

class RebindTestInterfaceProxy;

template <typename ImplRefTraits>
class RebindTestInterfaceStub;

class RebindTestInterfaceRequestValidator;
class RebindTestInterfaceResponseValidator;


// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface
class  RebindTestInterface
    : public RebindTestInterfaceInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = RebindTestInterfaceInterfaceBase;
  using Proxy_ = RebindTestInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = RebindTestInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = RebindTestInterfaceRequestValidator;
  using ResponseValidator_ = RebindTestInterfaceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kBlockingUntilExternalSignalCallMinVersion = 0,
    kNormalCallMinVersion = 0,
    kSyncCallMinVersion = 0,
  };
  virtual ~RebindTestInterface() {}

  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.BlockingUntilExternalSignalCall
  virtual void BlockingUntilExternalSignalCall() = 0;

  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.NormalCall
  virtual void NormalCall() = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.SyncCall
  virtual bool SyncCall();

  using SyncCallCallback = base::OnceCallback<void()>;
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.SyncCall
  virtual void SyncCall(SyncCallCallback callback) = 0;
};



// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder
class  TestGenericBinderProxy
    : public TestGenericBinder {
 public:
  using InterfaceType = TestGenericBinder;

  explicit TestGenericBinderProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder.BindOptionalReceiver
  void BindOptionalReceiver(::mojo::GenericPendingReceiver receiver) final;
  
// @generated_from: mojo.test.receiver_unittest.mojom.TestGenericBinder.BindReceiver
  void BindReceiver(::mojo::GenericPendingReceiver receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.receiver_unittest.mojom.TestInterface1
class  TestInterface1Proxy
    : public TestInterface1 {
 public:
  using InterfaceType = TestInterface1;

  explicit TestInterface1Proxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.receiver_unittest.mojom.TestInterface2
class  TestInterface2Proxy
    : public TestInterface2 {
 public:
  using InterfaceType = TestInterface2;

  explicit TestInterface2Proxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface
class  RebindTestInterfaceProxy
    : public RebindTestInterface {
 public:
  using InterfaceType = RebindTestInterface;

  explicit RebindTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.BlockingUntilExternalSignalCall
  void BlockingUntilExternalSignalCall() final;
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.NormalCall
  void NormalCall() final;
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.SyncCall
  bool SyncCall() final;
  
// @generated_from: mojo.test.receiver_unittest.mojom.RebindTestInterface.SyncCall
  void SyncCall(SyncCallCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  TestGenericBinderStubDispatch {
 public:
  static bool Accept(TestGenericBinder* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestGenericBinder* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestGenericBinder>>
class TestGenericBinderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestGenericBinderStub() {}
  ~TestGenericBinderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestGenericBinderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestGenericBinderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterface1StubDispatch {
 public:
  static bool Accept(TestInterface1* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface1* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface1>>
class TestInterface1Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterface1Stub() {}
  ~TestInterface1Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface1StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface1StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestInterface2StubDispatch {
 public:
  static bool Accept(TestInterface2* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestInterface2* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestInterface2>>
class TestInterface2Stub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestInterface2Stub() {}
  ~TestInterface2Stub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface2StubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestInterface2StubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  RebindTestInterfaceStubDispatch {
 public:
  static bool Accept(RebindTestInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      RebindTestInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<RebindTestInterface>>
class RebindTestInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  RebindTestInterfaceStub() {}
  ~RebindTestInterfaceStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RebindTestInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RebindTestInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestGenericBinderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestInterface1RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestInterface2RequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  RebindTestInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  RebindTestInterfaceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace receiver_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_RECEIVER_UNITTEST_TEST_MOJOM_BLINK_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMjI5OCwgImJlZ2luIjogMjI4MSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZWNlaXZlcl91bml0dGVzdC5tb2pv
bS5UZXN0R2VuZXJpY0JpbmRlciJ9fSwgeyJlbmQiOiAzMTEyLCAiYmVnaW4iOiAzMDkyLCAiZWRn
ZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAi
dm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3Ny
YyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnJlY2VpdmVy
X3VuaXR0ZXN0Lm1vam9tLlRlc3RHZW5lcmljQmluZGVyLkJpbmRPcHRpb25hbFJlY2VpdmVyIn19
LCB7ImVuZCI6IDMyNzUsICJiZWdpbiI6IDMyNjMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVjZWl2ZXJfdW5pdHRlc3QubW9qb20uVGVzdEdl
bmVyaWNCaW5kZXIuQmluZFJlY2VpdmVyIn19LCB7ImVuZCI6IDM1NDUsICJiZWdpbiI6IDM1MzEs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVj
ZWl2ZXJfdW5pdHRlc3QubW9qb20uVGVzdEludGVyZmFjZTEifX0sIHsiZW5kIjogNDM1OCwgImJl
Z2luIjogNDM0NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1v
am8udGVzdC5yZWNlaXZlcl91bml0dGVzdC5tb2pvbS5UZXN0SW50ZXJmYWNlMiJ9fSwgeyJlbmQi
OiA1MjQwLCAiYmVnaW4iOiA1MjIxLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAibW9qby50ZXN0LnJlY2VpdmVyX3VuaXR0ZXN0Lm1vam9tLlJlYmluZFRlc3RJbnRl
cmZhY2UifX0sIHsiZW5kIjogNjE0MCwgImJlZ2luIjogNjEwOSwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZWNlaXZlcl91bml0dGVzdC5tb2pv
bS5SZWJpbmRUZXN0SW50ZXJmYWNlLkJsb2NraW5nVW50aWxFeHRlcm5hbFNpZ25hbENhbGwifX0s
IHsiZW5kIjogNjI2MiwgImJlZ2luIjogNjI1MiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZWNlaXZlcl91bml0dGVzdC5tb2pvbS5SZWJpbmRU
ZXN0SW50ZXJmYWNlLk5vcm1hbENhbGwifX0sIHsiZW5kIjogNjUxNSwgImJlZ2luIjogNjUwNywg
ImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVz
IiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1
bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5yZWNl
aXZlcl91bml0dGVzdC5tb2pvbS5SZWJpbmRUZXN0SW50ZXJmYWNlLlN5bmNDYWxsIn19LCB7ImVu
ZCI6IDY2ODQsICJiZWdpbiI6IDY2NzYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMi
LCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVt
Lmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNp
Z25hdHVyZSI6ICJtb2pvLnRlc3QucmVjZWl2ZXJfdW5pdHRlc3QubW9qb20uUmViaW5kVGVzdElu
dGVyZmFjZS5TeW5jQ2FsbCJ9fSwgeyJlbmQiOiA3MTE1LCAiYmVnaW4iOiA3MDk1LCAiZWRnZSI6
ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5h
bWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIs
ICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnJlY2VpdmVyX3Vu
aXR0ZXN0Lm1vam9tLlRlc3RHZW5lcmljQmluZGVyLkJpbmRPcHRpb25hbFJlY2VpdmVyIn19LCB7
ImVuZCI6IDcyNzEsICJiZWdpbiI6IDcyNTksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVjZWl2ZXJfdW5pdHRlc3QubW9qb20uVGVzdEdlbmVy
aWNCaW5kZXIuQmluZFJlY2VpdmVyIn19LCB7ImVuZCI6IDg0NTIsICJiZWdpbiI6IDg0MjEsICJl
ZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIs
ICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0v
c3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVjZWl2
ZXJfdW5pdHRlc3QubW9qb20uUmViaW5kVGVzdEludGVyZmFjZS5CbG9ja2luZ1VudGlsRXh0ZXJu
YWxTaWduYWxDYWxsIn19LCB7ImVuZCI6IDg1NjcsICJiZWdpbiI6IDg1NTcsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QucmVjZWl2ZXJfdW5pdHRl
c3QubW9qb20uUmViaW5kVGVzdEludGVyZmFjZS5Ob3JtYWxDYWxsIn19LCB7ImVuZCI6IDg2Nzgs
ICJiZWdpbiI6IDg2NzAsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJtb2pvLnRlc3QucmVjZWl2ZXJfdW5pdHRlc3QubW9qb20uUmViaW5kVGVzdEludGVyZmFjZS5T
eW5jQ2FsbCJ9fSwgeyJlbmQiOiA4Nzg5LCAiYmVnaW4iOiA4NzgxLCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAibW9qby50ZXN0LnJlY2VpdmVyX3VuaXR0ZXN0Lm1v
am9tLlJlYmluZFRlc3RJbnRlcmZhY2UuU3luY0NhbGwifX1dLCAidHlwZSI6ICJreXRoZTAifQ==
*/