// mojo/public/cpp/bindings/tests/enum_headers_unittest.test-mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_HEADERS_UNITTEST_TEST_MOJOM_SHARED_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_HEADERS_UNITTEST_TEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "mojo/public/cpp/bindings/tests/enum_headers_unittest.test-mojom-shared-internal.h"




#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace mojo {
namespace test {
namespace enum_headers_unittest {
namespace mojom {


}  // namespace mojom
}  // namespace enum_headers_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mojo {
namespace test {
namespace enum_headers_unittest {
namespace mojom {


// @generated_from: mojo.test.enum_headers_unittest.mojom.Foo
enum class Foo : int32_t {
  
// @generated_from: mojo.test.enum_headers_unittest.mojom.Foo.kBar
  kBar = 0,
  
// @generated_from: mojo.test.enum_headers_unittest.mojom.Foo.kBaz
  kBaz = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, Foo value);
inline bool IsKnownEnumValue(Foo value) {
  return internal::Foo_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace enum_headers_unittest
}  // namespace test
}  // namespace mojo

namespace std {

template <>
struct hash<::mojo::test::enum_headers_unittest::mojom::Foo>
    : public mojo::internal::EnumHashImpl<::mojo::test::enum_headers_unittest::mojom::Foo> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojo::test::enum_headers_unittest::mojom::Foo, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojo::test::enum_headers_unittest::mojom::Foo, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojo::test::enum_headers_unittest::mojom::Foo>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojo {
namespace test {
namespace enum_headers_unittest {
namespace mojom {


}  // namespace mojom
}  // namespace enum_headers_unittest
}  // namespace test
}  // namespace mojo

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojo::test::enum_headers_unittest::mojom::Foo> {
 static void WriteIntoTracedValue(perfetto::TracedValue context, ::mojo::test::enum_headers_unittest::mojom::Foo value);
};

} // namespace perfetto

#endif  // MOJO_PUBLIC_CPP_BINDINGS_TESTS_ENUM_HEADERS_UNITTEST_TEST_MOJOM_SHARED_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTczNSwgImJlZ2luIjogMTczMiwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIm1vam8udGVzdC5lbnVtX2hlYWRlcnNfdW5pdHRlc3Qu
bW9qb20uRm9vIn19LCB7ImVuZCI6IDE4MjQsICJiZWdpbiI6IDE4MjAsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9oZWFkZXJzX3VuaXR0
ZXN0Lm1vam9tLkZvby5rQmFyIn19LCB7ImVuZCI6IDE5MDYsICJiZWdpbiI6IDE5MDIsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJtb2pvLnRlc3QuZW51bV9oZWFk
ZXJzX3VuaXR0ZXN0Lm1vam9tLkZvby5rQmF6In19XSwgInR5cGUiOiAia3l0aGUwIn0=
*/