// mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/common/task_annotator.h"
#include "base/trace_event/trace_event.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-params-data.h"
#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-shared-message-ids.h"

#include "mojo/public/cpp/bindings/tests/flush_async_unittest.test-mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_CPP_BINDINGS_TESTS_FLUSH_ASYNC_UNITTEST_TEST_MOJOM_BLINK_JUMBO_H_
#endif
namespace mojo {
namespace test {
namespace flush_async_unittest {
namespace mojom {
namespace blink {
const char Writer::Name_[] = "mojo.test.flush_async_unittest.mojom.Writer";

WriterProxy::WriterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class WriterProxy_Put_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit WriterProxy_Put_Message(
      uint32_t message_flags
      , const WTF::String& param_key
      , const WTF::String& param_value
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kWriter_Put_Name,
          message_flags)
      , param_key_(std::move(param_key))
      , param_value_(std::move(param_value)){}
  ~WriterProxy_Put_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      const WTF::String& param_key, const WTF::String& param_value) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<WriterProxy_Put_Message>(
          kFlags
          , std::move(param_key)
          , std::move(param_value)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kWriter_Put_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::Writer_Put_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      param_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in Writer.Put request");
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      param_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in Writer.Put request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      Writer* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->Put(
        std::move(param_key_),
        std::move(param_value_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::Writer_Put_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      param_key_, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in Writer.Put request");
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      param_value_, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in Writer.Put request");
  }
  WTF::String param_key_;
  WTF::String param_value_;

  DISALLOW_COPY_AND_ASSIGN(WriterProxy_Put_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
WriterProxy_Put_Message::kMessageTag = {};

void WriterProxy::Put(
    const WTF::String& in_key, const WTF::String& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::flush_async_unittest::mojom::Writer::Put", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key, 
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value, 
                        "<value of type const WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = WriterProxy_Put_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_key), std::move(in_value));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Writer::Name_);
  message.set_method_name("Put");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WriterStubDispatch::Accept(
    Writer* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWriter_Put_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::Writer::Put",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::Writer::Put");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            WriterProxy_Put_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::Writer_Put_Params_Data* params =
          reinterpret_cast<internal::Writer_Put_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WTF::String p_key{};
      WTF::String p_value{};
      Writer_Put_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Writer::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Put(
std::move(p_key), 
std::move(p_value));
      return true;
    }
  }
  return false;
}

// static
bool WriterStubDispatch::AcceptWithResponder(
    Writer* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kWriter_Put_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kWriterValidationInfo[] = {
    {internal::kWriter_Put_Name,
     {&internal::Writer_Put_Params_Data::Validate,
      nullptr /* no response */}},
};

bool WriterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::Writer::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kWriterValidationInfo);
}

const char KeyValueStoreClient::Name_[] = "mojo.test.flush_async_unittest.mojom.KeyValueStoreClient";

KeyValueStoreClientProxy::KeyValueStoreClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class KeyValueStoreClientProxy_OnSnapshotTaken_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit KeyValueStoreClientProxy_OnSnapshotTaken_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kKeyValueStoreClient_OnSnapshotTaken_Name,
          message_flags){}
  ~KeyValueStoreClientProxy_OnSnapshotTaken_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<KeyValueStoreClientProxy_OnSnapshotTaken_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kKeyValueStoreClient_OnSnapshotTaken_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      KeyValueStoreClient* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->OnSnapshotTaken();
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreClientProxy_OnSnapshotTaken_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
KeyValueStoreClientProxy_OnSnapshotTaken_Message::kMessageTag = {};

void KeyValueStoreClientProxy::OnSnapshotTaken(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::flush_async_unittest::mojom::KeyValueStoreClient::OnSnapshotTaken");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = KeyValueStoreClientProxy_OnSnapshotTaken_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeyValueStoreClient::Name_);
  message.set_method_name("OnSnapshotTaken");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool KeyValueStoreClientStubDispatch::Accept(
    KeyValueStoreClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kKeyValueStoreClient_OnSnapshotTaken_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStoreClient::OnSnapshotTaken",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStoreClient::OnSnapshotTaken");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            KeyValueStoreClientProxy_OnSnapshotTaken_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data* params =
          reinterpret_cast<internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      KeyValueStoreClient_OnSnapshotTaken_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeyValueStoreClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnSnapshotTaken();
      return true;
    }
  }
  return false;
}

// static
bool KeyValueStoreClientStubDispatch::AcceptWithResponder(
    KeyValueStoreClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kKeyValueStoreClient_OnSnapshotTaken_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kKeyValueStoreClientValidationInfo[] = {
    {internal::kKeyValueStoreClient_OnSnapshotTaken_Name,
     {&internal::KeyValueStoreClient_OnSnapshotTaken_Params_Data::Validate,
      nullptr /* no response */}},
};

bool KeyValueStoreClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::KeyValueStoreClient::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kKeyValueStoreClientValidationInfo);
}

const char KeyValueStore::Name_[] = "mojo.test.flush_async_unittest.mojom.KeyValueStore";

class KeyValueStore_GetSnapshot_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  KeyValueStore_GetSnapshot_ForwardToCallback(
      KeyValueStore::GetSnapshotCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  KeyValueStore::GetSnapshotCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(KeyValueStore_GetSnapshot_ForwardToCallback);
};

KeyValueStoreProxy::KeyValueStoreProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class KeyValueStoreProxy_SetClient_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit KeyValueStoreProxy_SetClient_Message(
      uint32_t message_flags
      , ::mojo::PendingRemote<KeyValueStoreClient> param_client
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kKeyValueStore_SetClient_Name,
          message_flags)
      , param_client_(std::move(param_client)){}
  ~KeyValueStoreProxy_SetClient_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ::mojo::PendingRemote<KeyValueStoreClient> param_client) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<KeyValueStoreProxy_SetClient_Message>(
          kFlags
          , std::move(param_client)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kKeyValueStore_SetClient_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_SetClient_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojo::test::flush_async_unittest::mojom::KeyValueStoreClientInterfaceBase>>(
      param_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in KeyValueStore.SetClient request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      KeyValueStore* impl) {
    if (message->receiver_connection_group()) {
    }

    impl->SetClient(
        std::move(param_client_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_SetClient_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojo::test::flush_async_unittest::mojom::KeyValueStoreClientInterfaceBase>>(
      param_client_, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in KeyValueStore.SetClient request");
  }
  ::mojo::PendingRemote<KeyValueStoreClient> param_client_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreProxy_SetClient_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
KeyValueStoreProxy_SetClient_Message::kMessageTag = {};

void KeyValueStoreProxy::SetClient(
    ::mojo::PendingRemote<KeyValueStoreClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::flush_async_unittest::mojom::KeyValueStore::SetClient", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client, 
                        "<value of type ::mojo::PendingRemote<KeyValueStoreClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = KeyValueStoreProxy_SetClient_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_client));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeyValueStore::Name_);
  message.set_method_name("SetClient");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class KeyValueStoreProxy_BindWriter_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit KeyValueStoreProxy_BindWriter_Message(
      uint32_t message_flags
      , ::mojo::PendingReceiver<Writer> param_receiver
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kKeyValueStore_BindWriter_Name,
          message_flags)
      , param_receiver_(std::move(param_receiver)){}
  ~KeyValueStoreProxy_BindWriter_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync,
      ::mojo::PendingReceiver<Writer> param_receiver) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<KeyValueStoreProxy_BindWriter_Message>(
          kFlags
          , std::move(param_receiver)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kKeyValueStore_BindWriter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_BindWriter_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::mojo::test::flush_async_unittest::mojom::WriterInterfaceBase>>(
      param_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in KeyValueStore.BindWriter request");
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      KeyValueStore* impl) {
    if (message->receiver_connection_group()) {
      param_receiver_.set_connection_group(
          *message->receiver_connection_group());
    }

    impl->BindWriter(
        std::move(param_receiver_));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_BindWriter_Params_Data> params(
            message);
    params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::mojo::test::flush_async_unittest::mojom::WriterInterfaceBase>>(
      param_receiver_, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in KeyValueStore.BindWriter request");
  }
  ::mojo::PendingReceiver<Writer> param_receiver_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreProxy_BindWriter_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
KeyValueStoreProxy_BindWriter_Message::kMessageTag = {};

void KeyValueStoreProxy::BindWriter(
    ::mojo::PendingReceiver<Writer> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "mojo::test::flush_async_unittest::mojom::KeyValueStore::BindWriter", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver, 
                        "<value of type ::mojo::PendingReceiver<Writer>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = KeyValueStoreProxy_BindWriter_Message::Build(
      kSerialize, kExpectsResponse, kIsSync, std::move(in_receiver));

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeyValueStore::Name_);
  message.set_method_name("BindWriter");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class KeyValueStoreProxy_GetSnapshot_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit KeyValueStoreProxy_GetSnapshot_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kKeyValueStore_GetSnapshot_Name,
          message_flags){}
  ~KeyValueStoreProxy_GetSnapshot_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<KeyValueStoreProxy_GetSnapshot_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kKeyValueStore_GetSnapshot_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_GetSnapshot_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      KeyValueStore* impl, KeyValueStore::GetSnapshotCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->GetSnapshot(std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_GetSnapshot_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(KeyValueStoreProxy_GetSnapshot_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
KeyValueStoreProxy_GetSnapshot_Message::kMessageTag = {};

void KeyValueStoreProxy::GetSnapshot(
    GetSnapshotCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshot");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = KeyValueStoreProxy_GetSnapshot_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeyValueStore::Name_);
  message.set_method_name("GetSnapshot");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new KeyValueStore_GetSnapshot_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class KeyValueStore_GetSnapshot_ProxyToResponder {
 public:
  static KeyValueStore::GetSnapshotCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<KeyValueStore_GetSnapshot_ProxyToResponder> proxy(
        new KeyValueStore_GetSnapshot_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&KeyValueStore_GetSnapshot_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~KeyValueStore_GetSnapshot_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  KeyValueStore_GetSnapshot_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "KeyValueStore::GetSnapshotCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const WTF::HashMap<WTF::String, WTF::String>& in_entries);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStore_GetSnapshot_ProxyToResponder);
};
class KeyValueStore_GetSnapshot_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit KeyValueStore_GetSnapshot_Response_Message(
      uint32_t message_flags
      , const WTF::HashMap<WTF::String, WTF::String>& param_entries
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kKeyValueStore_GetSnapshot_Name,
          message_flags)
      , param_entries_(std::move(param_entries)){}
  ~KeyValueStore_GetSnapshot_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync,
      const WTF::HashMap<WTF::String, WTF::String>& param_entries) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<KeyValueStore_GetSnapshot_Response_Message>(
          kFlags
          , std::move(param_entries)
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kKeyValueStore_GetSnapshot_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_GetSnapshot_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->entries)::BaseType>
      entries_fragment(params.message());
  const mojo::internal::ContainerValidateParams entries_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
      param_entries, entries_fragment, &entries_validate_params);
  params->entries.Set(
      entries_fragment.is_null() ? nullptr : entries_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->entries.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null entries in KeyValueStore.GetSnapshot response");
    return message;
  }


  void Dispatch(mojo::Message* message,
                KeyValueStore::GetSnapshotCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run(
        std::move(param_entries_));
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::KeyValueStore_GetSnapshot_ResponseParams_Data> params(
            message);
    params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->entries)::BaseType>
      entries_fragment(params.message());
  const mojo::internal::ContainerValidateParams entries_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
      param_entries_, entries_fragment, &entries_validate_params);
  params->entries.Set(
      entries_fragment.is_null() ? nullptr : entries_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->entries.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null entries in KeyValueStore.GetSnapshot response");
  }
  WTF::HashMap<WTF::String, WTF::String> param_entries_;

  DISALLOW_COPY_AND_ASSIGN(KeyValueStore_GetSnapshot_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
KeyValueStore_GetSnapshot_Response_Message::kMessageTag = {};

bool KeyValueStore_GetSnapshot_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshotCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<KeyValueStore_GetSnapshot_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::KeyValueStore_GetSnapshot_ResponseParams_Data* params =
      reinterpret_cast<
          internal::KeyValueStore_GetSnapshot_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::HashMap<WTF::String, WTF::String> p_entries{};
  KeyValueStore_GetSnapshot_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadEntries(&p_entries))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        KeyValueStore::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_entries));
  return true;
}

void KeyValueStore_GetSnapshot_ProxyToResponder::Run(
    const WTF::HashMap<WTF::String, WTF::String>& in_entries) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshotCallback", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("entries"), in_entries, 
                        "<value of type const WTF::HashMap<WTF::String, WTF::String>&>");
   });
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = KeyValueStore_GetSnapshot_Response_Message::Build(kSerialize, is_sync_, std::move(in_entries));

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshotCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeyValueStore::Name_);
  message.set_method_name("GetSnapshot");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool KeyValueStoreStubDispatch::Accept(
    KeyValueStore* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kKeyValueStore_SetClient_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::SetClient",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::SetClient");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            KeyValueStoreProxy_SetClient_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::KeyValueStore_SetClient_Params_Data* params =
          reinterpret_cast<internal::KeyValueStore_SetClient_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<KeyValueStoreClient> p_client{};
      KeyValueStore_SetClient_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeyValueStore::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetClient(
std::move(p_client));
      return true;
    }
    case internal::kKeyValueStore_BindWriter_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::BindWriter",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::BindWriter");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            KeyValueStoreProxy_BindWriter_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was serialized using a different variant of these bindings.
          // Force serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          context->Dispatch(message, impl);
          return true;
        }
      }

      DCHECK(message->is_serialized());
      internal::KeyValueStore_BindWriter_Params_Data* params =
          reinterpret_cast<internal::KeyValueStore_BindWriter_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<Writer> p_receiver{};
      KeyValueStore_BindWriter_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeyValueStore::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindWriter(
std::move(p_receiver));
      return true;
    }
    case internal::kKeyValueStore_GetSnapshot_Name: {
      break;
    }
  }
  return false;
}

// static
bool KeyValueStoreStubDispatch::AcceptWithResponder(
    KeyValueStore* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kKeyValueStore_SetClient_Name: {
      break;
    }
    case internal::kKeyValueStore_BindWriter_Name: {
      break;
    }
    case internal::kKeyValueStore_GetSnapshot_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshot",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::KeyValueStore::GetSnapshot");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            KeyValueStoreProxy_GetSnapshot_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          KeyValueStore::GetSnapshotCallback callback =
              KeyValueStore_GetSnapshot_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::KeyValueStore_GetSnapshot_Params_Data* params =
          reinterpret_cast<
              internal::KeyValueStore_GetSnapshot_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      KeyValueStore_GetSnapshot_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeyValueStore::Name_, 2, false);
        return false;
      }
      KeyValueStore::GetSnapshotCallback callback =
          KeyValueStore_GetSnapshot_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSnapshot(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kKeyValueStoreValidationInfo[] = {
    {internal::kKeyValueStore_SetClient_Name,
     {&internal::KeyValueStore_SetClient_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kKeyValueStore_BindWriter_Name,
     {&internal::KeyValueStore_BindWriter_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kKeyValueStore_GetSnapshot_Name,
     {&internal::KeyValueStore_GetSnapshot_Params_Data::Validate,
      &internal::KeyValueStore_GetSnapshot_ResponseParams_Data::Validate}},
};

bool KeyValueStoreRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::KeyValueStore::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kKeyValueStoreValidationInfo);
}

bool KeyValueStoreResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::KeyValueStore::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kKeyValueStoreValidationInfo);

}
const char Pinger::Name_[] = "mojo.test.flush_async_unittest.mojom.Pinger";

class Pinger_Ping_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Pinger_Ping_ForwardToCallback(
      Pinger::PingCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Pinger::PingCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Pinger_Ping_ForwardToCallback);
};

PingerProxy::PingerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
class PingerProxy_Ping_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit PingerProxy_Ping_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kPinger_Ping_Name,
          message_flags){}
  ~PingerProxy_Ping_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool expects_response,
      bool is_sync) {

    
  const uint32_t kFlags =
      ((expects_response) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<PingerProxy_Ping_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kPinger_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::Pinger_Ping_Params_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(
      mojo::Message* message,
      Pinger* impl, Pinger::PingCallback callback) {
    if (message->receiver_connection_group()) {
    }

    impl->Ping(std::move(callback));
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::Pinger_Ping_Params_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(PingerProxy_Ping_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
PingerProxy_Ping_Message::kMessageTag = {};

void PingerProxy::Ping(
    PingCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojo::test::flush_async_unittest::mojom::Pinger::Ping");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kSerialize = receiver_->PrefersSerializedMessages();
  auto message = PingerProxy_Ping_Message::Build(
      kSerialize, kExpectsResponse, kIsSync);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Pinger::Name_);
  message.set_method_name("Ping");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Pinger_Ping_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Pinger_Ping_ProxyToResponder {
 public:
  static Pinger::PingCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Pinger_Ping_ProxyToResponder> proxy(
        new Pinger_Ping_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Pinger_Ping_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Pinger_Ping_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Pinger_Ping_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Pinger::PingCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Pinger_Ping_ProxyToResponder);
};
class Pinger_Ping_Response_Message
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  explicit Pinger_Ping_Response_Message(
      uint32_t message_flags
  )
      : mojo::internal::UnserializedMessageContext(
          &kMessageTag,
          internal::kPinger_Ping_Name,
          message_flags){}
  ~Pinger_Ping_Response_Message() override = default;

  static mojo::Message Build(
      bool serialize,
      bool is_sync) {

    
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync) ? mojo::Message::kFlagIsSync : 0);

    if (!serialize) {
      return mojo::Message(std::make_unique<Pinger_Ping_Response_Message>(
          kFlags
          ),
          MOJO_CREATE_MESSAGE_FLAG_NONE);
    }

    DCHECK(serialize);
    
  mojo::Message message(
      internal::kPinger_Ping_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojo::test::flush_async_unittest::mojom::internal::Pinger_Ping_ResponseParams_Data> params(
          message);
  params.Allocate();
    return message;
  }


  void Dispatch(mojo::Message* message,
                Pinger::PingCallback* callback) {
    if (message->receiver_connection_group()) {
    }

    std::move(*callback).Run();
  }



 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<
        ::mojo::test::flush_async_unittest::mojom::internal::Pinger_Ping_ResponseParams_Data> params(
            message);
    params.Allocate();
  }

  DISALLOW_COPY_AND_ASSIGN(Pinger_Ping_Response_Message);
};

const mojo::internal::UnserializedMessageContext::Tag
Pinger_Ping_Response_Message::kMessageTag = {};

bool Pinger_Ping_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojo::test::flush_async_unittest::mojom::Pinger::PingCallback",
               "message", message->name());
#endif
  if (!message->is_serialized()) {
    auto context =
        message->TakeUnserializedContext<Pinger_Ping_Response_Message>();
    if (!context) {
      // The Message was not of the expected type. It may be a valid message
      // which was build using a different variant of these bindings. Force
      // serialization before dispatch in this case.
      message->SerializeIfNecessary();
    } else {
      if (!callback_.is_null())
        context->Dispatch(message, &callback_);
      return true;
    }
  }

  DCHECK(message->is_serialized());
  internal::Pinger_Ping_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Pinger_Ping_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  Pinger_Ping_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Pinger::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void Pinger_Ping_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "(Impl)mojo::test::flush_async_unittest::mojom::Pinger::PingCallback");
#endif
  const bool kSerialize = responder_->PrefersSerializedMessages();
  auto message = Pinger_Ping_Response_Message::Build(kSerialize, is_sync_);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1("mojom", "(Impl)mojo::test::flush_async_unittest::mojom::Pinger::PingCallback", "message",
                   message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Pinger::Name_);
  message.set_method_name("Ping");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PingerStubDispatch::Accept(
    Pinger* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPinger_Ping_Name: {
      break;
    }
  }
  return false;
}

// static
bool PingerStubDispatch::AcceptWithResponder(
    Pinger* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kPinger_Ping_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojo::test::flush_async_unittest::mojom::Pinger::Ping",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojo::test::flush_async_unittest::mojom::Pinger::Ping");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      if (!message->is_serialized()) {
        auto context = message->TakeUnserializedContext<
            PingerProxy_Ping_Message>();
        if (!context) {
          // The Message was not of the expected type. It may be a valid message
          // which was built using a different variant of these bindings. Force
          // serialization before dispatch in this case.
          message->SerializeIfNecessary();
        } else {
          Pinger::PingCallback callback =
              Pinger_Ping_ProxyToResponder::CreateCallback(
                  message->request_id(), message_is_sync, &responder);
          context->Dispatch(message, impl, std::move(callback));
          return true;
        }
      }

      internal::Pinger_Ping_Params_Data* params =
          reinterpret_cast<
              internal::Pinger_Ping_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      Pinger_Ping_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Pinger::Name_, 0, false);
        return false;
      }
      Pinger::PingCallback callback =
          Pinger_Ping_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Ping(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kPingerValidationInfo[] = {
    {internal::kPinger_Ping_Name,
     {&internal::Pinger_Ping_Params_Data::Validate,
      &internal::Pinger_Ping_ResponseParams_Data::Validate}},
};

bool PingerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::Pinger::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kPingerValidationInfo);
}

bool PingerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo::test::flush_async_unittest::mojom::blink::Pinger::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kPingerValidationInfo);

}
}  // namespace blink
}  // namespace mojom
}  // namespace flush_async_unittest
}  // namespace test
}  // namespace mojo

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif