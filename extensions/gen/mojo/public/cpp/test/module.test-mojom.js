// mojo/public/cpp/test/module.test-mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/cpp/test/module.test-mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('testModule');


  var GLOBAL_CONST = "testString";
  var GlobalEnum = {};
  GlobalEnum.FIRST = 0;
  GlobalEnum.SECOND = 2;
  GlobalEnum.MIN_VALUE = 0;
  GlobalEnum.MAX_VALUE = 2;

  GlobalEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 2:
      return true;
    }
    return false;
  };

  GlobalEnum.toKnownEnumValue = function(value) {
    return value;
  };

  GlobalEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Struct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  Struct.StructEnum = {};
  Struct.StructEnum.SECOND = 0;
  Struct.StructEnum.THIRD = 1;
  Struct.StructEnum.FOURTH = 4;
  Struct.StructEnum.MIN_VALUE = 0;
  Struct.StructEnum.MAX_VALUE = 4;

  Struct.StructEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    }
    return false;
  };

  Struct.StructEnum.toKnownEnumValue = function(value) {
    return value;
  };

  Struct.StructEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  Struct.STRUCT_CONST = "structConst";
  Struct.prototype.initDefaults_ = function() {
    this.c = false;
  };
  Struct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Struct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Struct.encodedSize = codec.kStructHeaderSize + 8;

  Struct.decode = function(decoder) {
    var packed;
    var val = new Struct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.c = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Struct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Struct.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.c & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Interface_DoSomething_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Interface_DoSomething_Params.prototype.initDefaults_ = function() {
  };
  Interface_DoSomething_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Interface_DoSomething_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Interface_DoSomething_Params.encodedSize = codec.kStructHeaderSize + 0;

  Interface_DoSomething_Params.decode = function(decoder) {
    var packed;
    var val = new Interface_DoSomething_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Interface_DoSomething_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Interface_DoSomething_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Interface_DoSomethingElse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Interface_DoSomethingElse_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  Interface_DoSomethingElse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Interface_DoSomethingElse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Interface_DoSomethingElse_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Struct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Interface_DoSomethingElse_Params.encodedSize = codec.kStructHeaderSize + 8;

  Interface_DoSomethingElse_Params.decode = function(decoder) {
    var packed;
    var val = new Interface_DoSomethingElse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(Struct);
    return val;
  };

  Interface_DoSomethingElse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Interface_DoSomethingElse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Struct, val.s);
  };
  function Interface_DoSomethingElse_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Interface_DoSomethingElse_ResponseParams.prototype.initDefaults_ = function() {
    this.e = 0;
  };
  Interface_DoSomethingElse_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Interface_DoSomethingElse_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Interface_DoSomethingElse_ResponseParams.e
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, GlobalEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Interface_DoSomethingElse_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Interface_DoSomethingElse_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Interface_DoSomethingElse_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.e =
        decoder.decodeStruct(new codec.Enum(GlobalEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Interface_DoSomethingElse_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Interface_DoSomethingElse_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.e);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function Union(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  Union.Tags = {
    a: 0,
    b: 1,
  };

  Union.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  Union.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "a",
        "b",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a Union member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(Union.prototype, "a", {
    get: function() {
      if (this.$tag != Union.Tags.a) {
        throw new ReferenceError(
            "Union.a is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = Union.Tags.a;
      this.$data = value;
    }
  });
  Object.defineProperty(Union.prototype, "b", {
    get: function() {
      if (this.$tag != Union.Tags.b) {
        throw new ReferenceError(
            "Union.b is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = Union.Tags.b;
      this.$data = value;
    }
  });


    Union.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case Union.Tags.a:
          encoder.writeUint8(val.a ? 1 : 0);
          break;
        case Union.Tags.b:
          encoder.encodeStruct(codec.Int64, val.b);
          break;
      }
      encoder.align();
    };


    Union.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new Union();
      var tag = decoder.readUint32();
      switch (tag) {
        case Union.Tags.a:
          result.a = decoder.readUint8() ? true : false;
          break;
        case Union.Tags.b:
          result.b = decoder.decodeStruct(codec.Int64);
          break;
      }
      decoder.align();

      return result;
    };


    Union.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case Union.Tags.a:
          

          break;
        case Union.Tags.b:
          

          break;
      }

      return validator.validationError.NONE;
    };

  Union.encodedSize = 16;
  var kInterface_DoSomething_Name = 456169886;
  var kInterface_DoSomethingElse_Name = 1588538935;

  function InterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Interface,
                                                   handleOrPtrInfo);
  }

  function InterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Interface, associatedInterfacePtrInfo);
  }

  InterfaceAssociatedPtr.prototype =
      Object.create(InterfacePtr.prototype);
  InterfaceAssociatedPtr.prototype.constructor =
      InterfaceAssociatedPtr;

  function InterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  InterfacePtr.prototype.doSomething = function() {
    return InterfaceProxy.prototype.doSomething
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceProxy.prototype.doSomething = function() {
    var params_ = new Interface_DoSomething_Params();
    var builder = new codec.MessageV0Builder(
        kInterface_DoSomething_Name,
        codec.align(Interface_DoSomething_Params.encodedSize));
    builder.encodeStruct(Interface_DoSomething_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  InterfacePtr.prototype.doSomethingElse = function() {
    return InterfaceProxy.prototype.doSomethingElse
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceProxy.prototype.doSomethingElse = function(s) {
    var params_ = new Interface_DoSomethingElse_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterface_DoSomethingElse_Name,
          codec.align(Interface_DoSomethingElse_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Interface_DoSomethingElse_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Interface_DoSomethingElse_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function InterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  InterfaceStub.prototype.doSomething = function() {
    return this.delegate_ && this.delegate_.doSomething && this.delegate_.doSomething();
  }
  InterfaceStub.prototype.doSomethingElse = function(s) {
    return this.delegate_ && this.delegate_.doSomethingElse && this.delegate_.doSomethingElse(s);
  }

  InterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterface_DoSomething_Name:
      var params = reader.decodeStruct(Interface_DoSomething_Params);
      this.doSomething();
      return true;
    default:
      return false;
    }
  };

  InterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterface_DoSomethingElse_Name:
      var params = reader.decodeStruct(Interface_DoSomethingElse_Params);
      this.doSomethingElse(params.s).then(function(response) {
        var responseParams =
            new Interface_DoSomethingElse_ResponseParams();
        responseParams.e = response.e;
        var builder = new codec.MessageV1Builder(
            kInterface_DoSomethingElse_Name,
            codec.align(Interface_DoSomethingElse_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Interface_DoSomethingElse_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInterface_DoSomething_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Interface_DoSomething_Params;
      break;
      case kInterface_DoSomethingElse_Name:
        if (message.expectsResponse())
          paramsClass = Interface_DoSomethingElse_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInterface_DoSomethingElse_Name:
        if (message.isResponse())
          paramsClass = Interface_DoSomethingElse_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Interface = {
    name: 'test_module.Interface',
    kVersion: 0,
    ptrClass: InterfacePtr,
    proxyClass: InterfaceProxy,
    stubClass: InterfaceStub,
    validateRequest: validateInterfaceRequest,
    validateResponse: validateInterfaceResponse,
  };
  Interface.INTERFACE_CONST = false,
  Interface.InterfaceEnum = {};
  Interface.InterfaceEnum.FIFTH = 0;
  Interface.InterfaceEnum.SIXTH = 6;
  Interface.InterfaceEnum.MIN_VALUE = 0;
  Interface.InterfaceEnum.MAX_VALUE = 6;

  Interface.InterfaceEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 6:
      return true;
    }
    return false;
  };

  Interface.InterfaceEnum.toKnownEnumValue = function(value) {
    return value;
  };

  Interface.InterfaceEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  InterfaceStub.prototype.validator = validateInterfaceRequest;
  InterfaceProxy.prototype.validator = validateInterfaceResponse;
  exports.GLOBAL_CONST = GLOBAL_CONST;
  exports.GlobalEnum = GlobalEnum;
  exports.Struct = Struct;
  exports.Union = Union;
  exports.Interface = Interface;
  exports.InterfacePtr = InterfacePtr;
  exports.InterfaceAssociatedPtr = InterfaceAssociatedPtr;
})();