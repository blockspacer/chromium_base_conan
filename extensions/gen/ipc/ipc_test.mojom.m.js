// ipc/ipc_test.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../mojo/public/js/bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const SimpleTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.SimpleTestDriver', scope);
  }
};

/** @interface */
export const SimpleTestDriverInterface = class {
  
  /**
   * @param { !number } value
   */

  expectValue(value) {}
  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  getExpectedValue() {}
  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {}
  
  /**
   * @return {!Promise}
   */

  requestQuit() {}
};

/**
 * @implements { SimpleTestDriverInterface }
 */
export const SimpleTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SimpleTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SimpleTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SimpleTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } value
   */

  expectValue(
      value) {
    this.proxy.sendMessage(
        1684380189,
        SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        [
          value
        ]);
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  getExpectedValue() {
    return this.proxy.sendMessage(
        234821473,
        SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {
    return this.proxy.sendMessage(
        1042313697,
        SimpleTestDriver_RequestValue_ParamsSpec.$,
        SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  requestQuit() {
    return this.proxy.sendMessage(
        307730614,
        SimpleTestDriver_RequestQuit_ParamsSpec.$,
        SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SimpleTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const SimpleTestDriverReceiver = class {
  /**
   * @param {!SimpleTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SimpleTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SimpleTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SimpleTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1684380189,
        SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        impl.expectValue.bind(impl));
    this.helper_internal_.registerHandler(
        234821473,
        SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        impl.getExpectedValue.bind(impl));
    this.helper_internal_.registerHandler(
        1042313697,
        SimpleTestDriver_RequestValue_ParamsSpec.$,
        SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        impl.requestValue.bind(impl));
    this.helper_internal_.registerHandler(
        307730614,
        SimpleTestDriver_RequestQuit_ParamsSpec.$,
        SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        impl.requestQuit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const SimpleTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.SimpleTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SimpleTestDriverRemote}
   */
  static getRemote() {
    let remote = new SimpleTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SimpleTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const SimpleTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SimpleTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SimpleTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.expectValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1684380189,
        SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        this.expectValue.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getExpectedValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        234821473,
        SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        this.getExpectedValue.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1042313697,
        SimpleTestDriver_RequestValue_ParamsSpec.$,
        SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        this.requestValue.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestQuit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        307730614,
        SimpleTestDriver_RequestQuit_ParamsSpec.$,
        SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        this.requestQuit.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const SimpleTestClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.SimpleTestClient', scope);
  }
};

/** @interface */
export const SimpleTestClientInterface = class {
  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {}
};

/**
 * @implements { SimpleTestClientInterface }
 */
export const SimpleTestClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SimpleTestClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SimpleTestClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SimpleTestClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {
    return this.proxy.sendMessage(
        965053099,
        SimpleTestClient_RequestValue_ParamsSpec.$,
        SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SimpleTestClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const SimpleTestClientReceiver = class {
  /**
   * @param {!SimpleTestClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SimpleTestClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SimpleTestClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SimpleTestClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        965053099,
        SimpleTestClient_RequestValue_ParamsSpec.$,
        SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        impl.requestValue.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const SimpleTestClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.SimpleTestClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SimpleTestClientRemote}
   */
  static getRemote() {
    let remote = new SimpleTestClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SimpleTestClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const SimpleTestClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SimpleTestClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SimpleTestClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        965053099,
        SimpleTestClient_RequestValue_ParamsSpec.$,
        SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        this.requestValue.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const PingReceiverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.PingReceiver', scope);
  }
};

/** @interface */
export const PingReceiverInterface = class {
  
  /**
   * @return {!Promise}
   */

  ping() {}
};

/**
 * @implements { PingReceiverInterface }
 */
export const PingReceiverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PingReceiverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PingReceiverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PingReceiverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        367319129,
        PingReceiver_Ping_ParamsSpec.$,
        PingReceiver_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PingReceiver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const PingReceiverReceiver = class {
  /**
   * @param {!PingReceiverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PingReceiverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PingReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        367319129,
        PingReceiver_Ping_ParamsSpec.$,
        PingReceiver_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const PingReceiver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.PingReceiver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PingReceiverRemote}
   */
  static getRemote() {
    let remote = new PingReceiverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PingReceiver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const PingReceiverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PingReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PingReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        367319129,
        PingReceiver_Ping_ParamsSpec.$,
        PingReceiver_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const TestStructPasserPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.TestStructPasser', scope);
  }
};

/** @interface */
export const TestStructPasserInterface = class {
  
  /**
   * @param { !TestStruct } s
   */

  pass(s) {}
};

/**
 * @implements { TestStructPasserInterface }
 */
export const TestStructPasserRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!TestStructPasserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          TestStructPasserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!TestStructPasserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !TestStruct } s
   */

  pass(
      s) {
    this.proxy.sendMessage(
        405048767,
        TestStructPasser_Pass_ParamsSpec.$,
        null,
        [
          s
        ]);
  }
};

/**
 * An object which receives request messages for the TestStructPasser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const TestStructPasserReceiver = class {
  /**
   * @param {!TestStructPasserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!TestStructPasserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        TestStructPasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestStructPasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        405048767,
        TestStructPasser_Pass_ParamsSpec.$,
        null,
        impl.pass.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const TestStructPasser = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.TestStructPasser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!TestStructPasserRemote}
   */
  static getRemote() {
    let remote = new TestStructPasserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestStructPasser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const TestStructPasserCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      TestStructPasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!TestStructPasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.pass =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        405048767,
        TestStructPasser_Pass_ParamsSpec.$,
        null,
        this.pass.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const IndirectTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.IndirectTestDriver', scope);
  }
};

/** @interface */
export const IndirectTestDriverInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getPingReceiver(receiver) {}
};

/**
 * @implements { IndirectTestDriverInterface }
 */
export const IndirectTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!IndirectTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          IndirectTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!IndirectTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPingReceiver(
      receiver) {
    this.proxy.sendMessage(
        679516177,
        IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the IndirectTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const IndirectTestDriverReceiver = class {
  /**
   * @param {!IndirectTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!IndirectTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        IndirectTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IndirectTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        679516177,
        IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        impl.getPingReceiver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const IndirectTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.IndirectTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!IndirectTestDriverRemote}
   */
  static getRemote() {
    let remote = new IndirectTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IndirectTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const IndirectTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      IndirectTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!IndirectTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        679516177,
        IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        this.getPingReceiver.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const ReflectorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.Reflector', scope);
  }
};

/** @interface */
export const ReflectorInterface = class {
  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  ping(value) {}
  
  /**
   * @param { !string } value
   * @return {!Promise<{
        response: !string,
   *  }>}
   */

  syncPing(value) {}
  
  /**
   */

  quit() {}
};

/**
 * @implements { ReflectorInterface }
 */
export const ReflectorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ReflectorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ReflectorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ReflectorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  ping(
      value) {
    return this.proxy.sendMessage(
        445739392,
        Reflector_Ping_ParamsSpec.$,
        Reflector_Ping_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        response: !string,
   *  }>}
   */

  syncPing(
      value) {
    return this.proxy.sendMessage(
        799672810,
        Reflector_SyncPing_ParamsSpec.$,
        Reflector_SyncPing_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   */

  quit() {
    this.proxy.sendMessage(
        1468921172,
        Reflector_Quit_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the Reflector
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const ReflectorReceiver = class {
  /**
   * @param {!ReflectorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ReflectorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ReflectorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ReflectorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        445739392,
        Reflector_Ping_ParamsSpec.$,
        Reflector_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    this.helper_internal_.registerHandler(
        799672810,
        Reflector_SyncPing_ParamsSpec.$,
        Reflector_SyncPing_ResponseParamsSpec.$,
        impl.syncPing.bind(impl));
    this.helper_internal_.registerHandler(
        1468921172,
        Reflector_Quit_ParamsSpec.$,
        null,
        impl.quit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const Reflector = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.Reflector";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ReflectorRemote}
   */
  static getRemote() {
    let remote = new ReflectorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Reflector
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const ReflectorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ReflectorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ReflectorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        445739392,
        Reflector_Ping_ParamsSpec.$,
        Reflector_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.syncPing =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        799672810,
        Reflector_SyncPing_ParamsSpec.$,
        Reflector_SyncPing_ResponseParamsSpec.$,
        this.syncPing.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.quit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1468921172,
        Reflector_Quit_ParamsSpec.$,
        null,
        this.quit.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const AssociatedInterfaceVendorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.AssociatedInterfaceVendor', scope);
  }
};

/** @interface */
export const AssociatedInterfaceVendorInterface = class {
  
  /**
   * @param { !Object } receiver
   */

  getTestInterface(receiver) {}
};

/**
 * @implements { AssociatedInterfaceVendorInterface }
 */
export const AssociatedInterfaceVendorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!AssociatedInterfaceVendorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          AssociatedInterfaceVendorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!AssociatedInterfaceVendorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getTestInterface(
      receiver) {
    this.proxy.sendMessage(
        1896590513,
        AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedInterfaceVendor
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const AssociatedInterfaceVendorReceiver = class {
  /**
   * @param {!AssociatedInterfaceVendorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!AssociatedInterfaceVendorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        AssociatedInterfaceVendorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedInterfaceVendorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1896590513,
        AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        impl.getTestInterface.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const AssociatedInterfaceVendor = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.AssociatedInterfaceVendor";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!AssociatedInterfaceVendorRemote}
   */
  static getRemote() {
    let remote = new AssociatedInterfaceVendorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedInterfaceVendor
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const AssociatedInterfaceVendorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      AssociatedInterfaceVendorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!AssociatedInterfaceVendorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getTestInterface =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1896590513,
        AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        this.getTestInterface.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const InterfacePassingTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.InterfacePassingTestDriver', scope);
  }
};

/** @interface */
export const InterfacePassingTestDriverInterface = class {
  
  /**
   * @return {!Promise}
   */

  init() {}
  
  /**
   * @param { !Array<!PingReceiverPendingReceiver> } receiver
   * @return {!Promise}
   */

  getPingReceiver(receiver) {}
  
  /**
   * @param { !Array<!Object> } receiver
   * @return {!Promise}
   */

  getAssociatedPingReceiver(receiver) {}
  
  /**
   */

  quit() {}
};

/**
 * @implements { InterfacePassingTestDriverInterface }
 */
export const InterfacePassingTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!InterfacePassingTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          InterfacePassingTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!InterfacePassingTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  init() {
    return this.proxy.sendMessage(
        567993236,
        InterfacePassingTestDriver_Init_ParamsSpec.$,
        InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Array<!PingReceiverPendingReceiver> } receiver
   * @return {!Promise}
   */

  getPingReceiver(
      receiver) {
    return this.proxy.sendMessage(
        1463317246,
        InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Array<!Object> } receiver
   * @return {!Promise}
   */

  getAssociatedPingReceiver(
      receiver) {
    return this.proxy.sendMessage(
        997978214,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        [
          receiver
        ]);
  }

  
  /**
   */

  quit() {
    this.proxy.sendMessage(
        1625756592,
        InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the InterfacePassingTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const InterfacePassingTestDriverReceiver = class {
  /**
   * @param {!InterfacePassingTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!InterfacePassingTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        InterfacePassingTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfacePassingTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        567993236,
        InterfacePassingTestDriver_Init_ParamsSpec.$,
        InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        impl.init.bind(impl));
    this.helper_internal_.registerHandler(
        1463317246,
        InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        impl.getPingReceiver.bind(impl));
    this.helper_internal_.registerHandler(
        997978214,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        impl.getAssociatedPingReceiver.bind(impl));
    this.helper_internal_.registerHandler(
        1625756592,
        InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        impl.quit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const InterfacePassingTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.InterfacePassingTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!InterfacePassingTestDriverRemote}
   */
  static getRemote() {
    let remote = new InterfacePassingTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfacePassingTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const InterfacePassingTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      InterfacePassingTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!InterfacePassingTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.init =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        567993236,
        InterfacePassingTestDriver_Init_ParamsSpec.$,
        InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        this.init.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1463317246,
        InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        this.getPingReceiver.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAssociatedPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        997978214,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        this.getAssociatedPingReceiver.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.quit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1625756592,
        InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        this.quit.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_ExpectValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_GetExpectedValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_GetExpectedValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_RequestValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_RequestValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_RequestQuit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestDriver_RequestQuit_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestClient_RequestValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SimpleTestClient_RequestValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingReceiver_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PingReceiver_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestStructPasser_Pass_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IndirectTestDriver_GetPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Reflector_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Reflector_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Reflector_SyncPing_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Reflector_SyncPing_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Reflector_Quit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AssociatedInterfaceVendor_GetTestInterface_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_Init_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_Init_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_GetPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const InterfacePassingTestDriver_Quit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    TestStructSpec.$,
    'TestStruct',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const TestStruct = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestDriver_ExpectValue_ParamsSpec.$,
    'SimpleTestDriver_ExpectValue_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SimpleTestDriver_ExpectValue_Params = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
    'SimpleTestDriver_GetExpectedValue_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SimpleTestDriver_GetExpectedValue_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
    'SimpleTestDriver_GetExpectedValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SimpleTestDriver_GetExpectedValue_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    SimpleTestDriver_RequestValue_ParamsSpec.$,
    'SimpleTestDriver_RequestValue_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SimpleTestDriver_RequestValue_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
    'SimpleTestDriver_RequestValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SimpleTestDriver_RequestValue_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    SimpleTestDriver_RequestQuit_ParamsSpec.$,
    'SimpleTestDriver_RequestQuit_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SimpleTestDriver_RequestQuit_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
    'SimpleTestDriver_RequestQuit_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SimpleTestDriver_RequestQuit_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestClient_RequestValue_ParamsSpec.$,
    'SimpleTestClient_RequestValue_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const SimpleTestClient_RequestValue_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    SimpleTestClient_RequestValue_ResponseParamsSpec.$,
    'SimpleTestClient_RequestValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const SimpleTestClient_RequestValue_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.value;
  }
};



mojo.internal.Struct(
    PingReceiver_Ping_ParamsSpec.$,
    'PingReceiver_Ping_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingReceiver_Ping_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    PingReceiver_Ping_ResponseParamsSpec.$,
    'PingReceiver_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const PingReceiver_Ping_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    TestStructPasser_Pass_ParamsSpec.$,
    'TestStructPasser_Pass_Params',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        TestStructSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const TestStructPasser_Pass_Params = class {
  constructor() {
    /** @type { !TestStruct } */
    this.s;
  }
};



mojo.internal.Struct(
    IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
    'IndirectTestDriver_GetPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(PingReceiverPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const IndirectTestDriver_GetPingReceiver_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    Reflector_Ping_ParamsSpec.$,
    'Reflector_Ping_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Reflector_Ping_Params = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    Reflector_Ping_ResponseParamsSpec.$,
    'Reflector_Ping_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Reflector_Ping_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    Reflector_SyncPing_ParamsSpec.$,
    'Reflector_SyncPing_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Reflector_SyncPing_Params = class {
  constructor() {
    /** @type { !string } */
    this.value;
  }
};



mojo.internal.Struct(
    Reflector_SyncPing_ResponseParamsSpec.$,
    'Reflector_SyncPing_ResponseParams',
    [
      mojo.internal.StructField(
        'response', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Reflector_SyncPing_ResponseParams = class {
  constructor() {
    /** @type { !string } */
    this.response;
  }
};



mojo.internal.Struct(
    Reflector_Quit_ParamsSpec.$,
    'Reflector_Quit_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const Reflector_Quit_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
    'AssociatedInterfaceVendor_GetTestInterface_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(SimpleTestDriverPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const AssociatedInterfaceVendor_GetTestInterface_Params = class {
  constructor() {
    /** @type { !Object } */
    this.receiver;
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_Init_ParamsSpec.$,
    'InterfacePassingTestDriver_Init_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_Init_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_Init_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_Init_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
    'InterfacePassingTestDriver_GetPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.Array(mojo.internal.InterfaceRequest(PingReceiverPendingReceiver), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_GetPingReceiver_Params = class {
  constructor() {
    /** @type { !Array<!PingReceiverPendingReceiver> } */
    this.receiver;
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_GetPingReceiver_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_GetPingReceiver_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
    'InterfacePassingTestDriver_GetAssociatedPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(PingReceiverPendingReceiver), false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_GetAssociatedPingReceiver_Params = class {
  constructor() {
    /** @type { !Array<!Object> } */
    this.receiver;
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams = class {
  constructor() {
  }
};



mojo.internal.Struct(
    InterfacePassingTestDriver_Quit_ParamsSpec.$,
    'InterfacePassingTestDriver_Quit_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export const InterfacePassingTestDriver_Quit_Params = class {
  constructor() {
  }
};

