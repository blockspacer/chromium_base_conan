// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#ifdef KYTHE_IS_RUNNING
#pragma kythe_metadata "test_proto.pb.h.meta"
#endif  // KYTHE_IS_RUNNING
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc_message_utils_test {
class TestMessage1;
class TestMessage1DefaultTypeInternal;
extern TestMessage1DefaultTypeInternal _TestMessage1_default_instance_;
class TestMessage2;
class TestMessage2DefaultTypeInternal;
extern TestMessage2DefaultTypeInternal _TestMessage2_default_instance_;
}  // namespace ipc_message_utils_test
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc_message_utils_test::TestMessage1* Arena::CreateMaybeMessage<::ipc_message_utils_test::TestMessage1>(Arena*);
template<> ::ipc_message_utils_test::TestMessage2* Arena::CreateMaybeMessage<::ipc_message_utils_test::TestMessage2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc_message_utils_test {

// ===================================================================

class TestMessage1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc_message_utils_test.TestMessage1) */ {
 public:
  inline TestMessage1() : TestMessage1(nullptr) {}
  virtual ~TestMessage1();

  TestMessage1(const TestMessage1& from);
  TestMessage1(TestMessage1&& from) noexcept
    : TestMessage1() {
    *this = ::std::move(from);
  }

  inline TestMessage1& operator=(const TestMessage1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage1& operator=(TestMessage1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestMessage1& default_instance();

  static inline const TestMessage1* internal_default_instance() {
    return reinterpret_cast<const TestMessage1*>(
               &_TestMessage1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage1& a, TestMessage1& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestMessage1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage1* New() const final {
    return CreateMaybeMessage<TestMessage1>(nullptr);
  }

  TestMessage1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage1>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestMessage1& from);
  void MergeFrom(const TestMessage1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestMessage1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc_message_utils_test.TestMessage1";
  }
  protected:
  explicit TestMessage1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // optional int32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ipc_message_utils_test.TestMessage1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TestMessage2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc_message_utils_test.TestMessage2) */ {
 public:
  inline TestMessage2() : TestMessage2(nullptr) {}
  virtual ~TestMessage2();

  TestMessage2(const TestMessage2& from);
  TestMessage2(TestMessage2&& from) noexcept
    : TestMessage2() {
    *this = ::std::move(from);
  }

  inline TestMessage2& operator=(const TestMessage2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage2& operator=(TestMessage2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestMessage2& default_instance();

  static inline const TestMessage2* internal_default_instance() {
    return reinterpret_cast<const TestMessage2*>(
               &_TestMessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage2& a, TestMessage2& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestMessage2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage2* New() const final {
    return CreateMaybeMessage<TestMessage2>(nullptr);
  }

  TestMessage2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage2>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestMessage2& from);
  void MergeFrom(const TestMessage2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestMessage2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc_message_utils_test.TestMessage2";
  }
  protected:
  explicit TestMessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 1,
    kStringsFieldNumber = 2,
    kMessagesFieldNumber = 3,
  };
  // repeated int32 numbers = 1;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_numbers() const;
  void _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_numbers();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 numbers(int index) const;
  void set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_numbers(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_numbers();

  // repeated string strings = 2;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated .ipc_message_utils_test.TestMessage1 messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::ipc_message_utils_test::TestMessage1* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc_message_utils_test::TestMessage1 >*
      mutable_messages();
  private:
  const ::ipc_message_utils_test::TestMessage1& _internal_messages(int index) const;
  ::ipc_message_utils_test::TestMessage1* _internal_add_messages();
  public:
  const ::ipc_message_utils_test::TestMessage1& messages(int index) const;
  ::ipc_message_utils_test::TestMessage1* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc_message_utils_test::TestMessage1 >&
      messages() const;

  // @@protoc_insertion_point(class_scope:ipc_message_utils_test.TestMessage2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > numbers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc_message_utils_test::TestMessage1 > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage1

// optional int32 number = 1;
inline bool TestMessage1::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMessage1::has_number() const {
  return _internal_has_number();
}
inline void TestMessage1::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage1::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage1::number() const {
  // @@protoc_insertion_point(field_get:ipc_message_utils_test.TestMessage1.number)
  return _internal_number();
}
inline void TestMessage1::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  number_ = value;
}
inline void TestMessage1::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:ipc_message_utils_test.TestMessage1.number)
}

// -------------------------------------------------------------------

// TestMessage2

// repeated int32 numbers = 1;
inline int TestMessage2::_internal_numbers_size() const {
  return numbers_.size();
}
inline int TestMessage2::numbers_size() const {
  return _internal_numbers_size();
}
inline void TestMessage2::clear_numbers() {
  numbers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage2::_internal_numbers(int index) const {
  return numbers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage2::numbers(int index) const {
  // @@protoc_insertion_point(field_get:ipc_message_utils_test.TestMessage2.numbers)
  return _internal_numbers(index);
}
inline void TestMessage2::set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:ipc_message_utils_test.TestMessage2.numbers)
}
inline void TestMessage2::_internal_add_numbers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  numbers_.Add(value);
}
inline void TestMessage2::add_numbers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_numbers(value);
  // @@protoc_insertion_point(field_add:ipc_message_utils_test.TestMessage2.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage2::_internal_numbers() const {
  return numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage2::numbers() const {
  // @@protoc_insertion_point(field_list:ipc_message_utils_test.TestMessage2.numbers)
  return _internal_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage2::_internal_mutable_numbers() {
  return &numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage2::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:ipc_message_utils_test.TestMessage2.numbers)
  return _internal_mutable_numbers();
}

// repeated string strings = 2;
inline int TestMessage2::_internal_strings_size() const {
  return strings_.size();
}
inline int TestMessage2::strings_size() const {
  return _internal_strings_size();
}
inline void TestMessage2::clear_strings() {
  strings_.Clear();
}
inline std::string* TestMessage2::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:ipc_message_utils_test.TestMessage2.strings)
  return _internal_add_strings();
}
inline const std::string& TestMessage2::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& TestMessage2::strings(int index) const {
  // @@protoc_insertion_point(field_get:ipc_message_utils_test.TestMessage2.strings)
  return _internal_strings(index);
}
inline std::string* TestMessage2::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:ipc_message_utils_test.TestMessage2.strings)
  return strings_.Mutable(index);
}
inline void TestMessage2::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipc_message_utils_test.TestMessage2.strings)
  strings_.Mutable(index)->assign(value);
}
inline void TestMessage2::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipc_message_utils_test.TestMessage2.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void TestMessage2::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipc_message_utils_test.TestMessage2.strings)
}
inline void TestMessage2::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipc_message_utils_test.TestMessage2.strings)
}
inline std::string* TestMessage2::_internal_add_strings() {
  return strings_.Add();
}
inline void TestMessage2::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipc_message_utils_test.TestMessage2.strings)
}
inline void TestMessage2::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipc_message_utils_test.TestMessage2.strings)
}
inline void TestMessage2::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipc_message_utils_test.TestMessage2.strings)
}
inline void TestMessage2::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipc_message_utils_test.TestMessage2.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMessage2::strings() const {
  // @@protoc_insertion_point(field_list:ipc_message_utils_test.TestMessage2.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMessage2::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:ipc_message_utils_test.TestMessage2.strings)
  return &strings_;
}

// repeated .ipc_message_utils_test.TestMessage1 messages = 3;
inline int TestMessage2::_internal_messages_size() const {
  return messages_.size();
}
inline int TestMessage2::messages_size() const {
  return _internal_messages_size();
}
inline void TestMessage2::clear_messages() {
  messages_.Clear();
}
inline ::ipc_message_utils_test::TestMessage1* TestMessage2::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:ipc_message_utils_test.TestMessage2.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc_message_utils_test::TestMessage1 >*
TestMessage2::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:ipc_message_utils_test.TestMessage2.messages)
  return &messages_;
}
inline const ::ipc_message_utils_test::TestMessage1& TestMessage2::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::ipc_message_utils_test::TestMessage1& TestMessage2::messages(int index) const {
  // @@protoc_insertion_point(field_get:ipc_message_utils_test.TestMessage2.messages)
  return _internal_messages(index);
}
inline ::ipc_message_utils_test::TestMessage1* TestMessage2::_internal_add_messages() {
  return messages_.Add();
}
inline ::ipc_message_utils_test::TestMessage1* TestMessage2::add_messages() {
  // @@protoc_insertion_point(field_add:ipc_message_utils_test.TestMessage2.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc_message_utils_test::TestMessage1 >&
TestMessage2::messages() const {
  // @@protoc_insertion_point(field_list:ipc_message_utils_test.TestMessage2.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc_message_utils_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fproto_2eproto
