// ipc/ipc_test.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef IPC_IPC_TEST_MOJOM_BLINK_TEST_UTILS_H_
#define IPC_IPC_TEST_MOJOM_BLINK_TEST_UTILS_H_

#include "ipc/ipc_test.mojom-blink.h"


namespace IPC {
namespace mojom {
namespace blink {


class  SimpleTestDriverInterceptorForTesting : public SimpleTestDriver {
  virtual SimpleTestDriver* GetForwardingInterface() = 0;
  void ExpectValue(int32_t value) override;
  void GetExpectedValue(GetExpectedValueCallback callback) override;
  void RequestValue(RequestValueCallback callback) override;
  void RequestQuit(RequestQuitCallback callback) override;
};
class  SimpleTestDriverAsyncWaiter {
 public:
  explicit SimpleTestDriverAsyncWaiter(SimpleTestDriver* proxy);
  ~SimpleTestDriverAsyncWaiter();
  void GetExpectedValue(
      int32_t* out_value);
  void RequestValue(
      int32_t* out_value);
  void RequestQuit(
      );

 private:
  SimpleTestDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SimpleTestDriverAsyncWaiter);
};


class  SimpleTestClientInterceptorForTesting : public SimpleTestClient {
  virtual SimpleTestClient* GetForwardingInterface() = 0;
  void RequestValue(RequestValueCallback callback) override;
};
class  SimpleTestClientAsyncWaiter {
 public:
  explicit SimpleTestClientAsyncWaiter(SimpleTestClient* proxy);
  ~SimpleTestClientAsyncWaiter();
  void RequestValue(
      int32_t* out_value);

 private:
  SimpleTestClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SimpleTestClientAsyncWaiter);
};


class  PingReceiverInterceptorForTesting : public PingReceiver {
  virtual PingReceiver* GetForwardingInterface() = 0;
  void Ping(PingCallback callback) override;
};
class  PingReceiverAsyncWaiter {
 public:
  explicit PingReceiverAsyncWaiter(PingReceiver* proxy);
  ~PingReceiverAsyncWaiter();
  void Ping(
      );

 private:
  PingReceiver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PingReceiverAsyncWaiter);
};


class  TestStructPasserInterceptorForTesting : public TestStructPasser {
  virtual TestStructPasser* GetForwardingInterface() = 0;
  void Pass(TestStructPtr s) override;
};
class  TestStructPasserAsyncWaiter {
 public:
  explicit TestStructPasserAsyncWaiter(TestStructPasser* proxy);
  ~TestStructPasserAsyncWaiter();

 private:
  TestStructPasser* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(TestStructPasserAsyncWaiter);
};


class  IndirectTestDriverInterceptorForTesting : public IndirectTestDriver {
  virtual IndirectTestDriver* GetForwardingInterface() = 0;
  void GetPingReceiver(::mojo::PendingAssociatedReceiver<PingReceiver> receiver) override;
};
class  IndirectTestDriverAsyncWaiter {
 public:
  explicit IndirectTestDriverAsyncWaiter(IndirectTestDriver* proxy);
  ~IndirectTestDriverAsyncWaiter();

 private:
  IndirectTestDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(IndirectTestDriverAsyncWaiter);
};


class  ReflectorInterceptorForTesting : public Reflector {
  virtual Reflector* GetForwardingInterface() = 0;
  void Ping(const WTF::String& value, PingCallback callback) override;
  void SyncPing(const WTF::String& value, SyncPingCallback callback) override;
  void Quit() override;
};
class  ReflectorAsyncWaiter {
 public:
  explicit ReflectorAsyncWaiter(Reflector* proxy);
  ~ReflectorAsyncWaiter();
  void Ping(
      const WTF::String& value, WTF::String* out_value);
  void SyncPing(
      const WTF::String& value, WTF::String* out_response);

 private:
  Reflector* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ReflectorAsyncWaiter);
};


class  AssociatedInterfaceVendorInterceptorForTesting : public AssociatedInterfaceVendor {
  virtual AssociatedInterfaceVendor* GetForwardingInterface() = 0;
  void GetTestInterface(::mojo::PendingAssociatedReceiver<SimpleTestDriver> receiver) override;
};
class  AssociatedInterfaceVendorAsyncWaiter {
 public:
  explicit AssociatedInterfaceVendorAsyncWaiter(AssociatedInterfaceVendor* proxy);
  ~AssociatedInterfaceVendorAsyncWaiter();

 private:
  AssociatedInterfaceVendor* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AssociatedInterfaceVendorAsyncWaiter);
};


class  InterfacePassingTestDriverInterceptorForTesting : public InterfacePassingTestDriver {
  virtual InterfacePassingTestDriver* GetForwardingInterface() = 0;
  void Init(InitCallback callback) override;
  void GetPingReceiver(WTF::Vector<::mojo::PendingReceiver<PingReceiver>> receiver, GetPingReceiverCallback callback) override;
  void GetAssociatedPingReceiver(WTF::Vector<::mojo::PendingAssociatedReceiver<PingReceiver>> receiver, GetAssociatedPingReceiverCallback callback) override;
  void Quit() override;
};
class  InterfacePassingTestDriverAsyncWaiter {
 public:
  explicit InterfacePassingTestDriverAsyncWaiter(InterfacePassingTestDriver* proxy);
  ~InterfacePassingTestDriverAsyncWaiter();
  void Init(
      );
  void GetPingReceiver(
      WTF::Vector<::mojo::PendingReceiver<PingReceiver>> receiver);
  void GetAssociatedPingReceiver(
      WTF::Vector<::mojo::PendingAssociatedReceiver<PingReceiver>> receiver);

 private:
  InterfacePassingTestDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(InterfacePassingTestDriverAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace IPC

#endif  // IPC_IPC_TEST_MOJOM_BLINK_TEST_UTILS_H_