// ipc/ipc.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../mojo/public/js/bindings.js';

import {
  SerializedHandle as mojo_native_SerializedHandle,
  SerializedHandleSpec as mojo_native_SerializedHandleSpec
} from '../mojo/public/interfaces/bindings/native_struct.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const GenericInterfacePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.GenericInterface', scope);
  }
};

/** @interface */
export const GenericInterfaceInterface = class {
};

/**
 * @implements { GenericInterfaceInterface }
 */
export const GenericInterfaceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GenericInterfacePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GenericInterfacePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GenericInterfacePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the GenericInterface
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const GenericInterfaceReceiver = class {
  /**
   * @param {!GenericInterfaceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GenericInterfaceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GenericInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GenericInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const GenericInterface = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.GenericInterface";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GenericInterfaceRemote}
   */
  static getRemote() {
    let remote = new GenericInterfaceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the GenericInterface
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const GenericInterfaceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GenericInterfaceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GenericInterfaceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const ChannelPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.Channel', scope);
  }
};

/** @interface */
export const ChannelInterface = class {
  
  /**
   * @param { !number } pid
   */

  setPeerPid(pid) {}
  
  /**
   * @param { !Message } message
   */

  receive(message) {}
  
  /**
   * @param { !string } name
   * @param { !Object } receiver
   */

  getAssociatedInterface(name, receiver) {}
};

/**
 * @implements { ChannelInterface }
 */
export const ChannelRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ChannelPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ChannelPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ChannelPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } pid
   */

  setPeerPid(
      pid) {
    this.proxy.sendMessage(
        1007272179,
        Channel_SetPeerPid_ParamsSpec.$,
        null,
        [
          pid
        ]);
  }

  
  /**
   * @param { !Message } message
   */

  receive(
      message) {
    this.proxy.sendMessage(
        973219859,
        Channel_Receive_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { !string } name
   * @param { !Object } receiver
   */

  getAssociatedInterface(
      name,
      receiver) {
    this.proxy.sendMessage(
        810452750,
        Channel_GetAssociatedInterface_ParamsSpec.$,
        null,
        [
          name,
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the Channel
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const ChannelReceiver = class {
  /**
   * @param {!ChannelInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ChannelRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ChannelRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ChannelRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1007272179,
        Channel_SetPeerPid_ParamsSpec.$,
        null,
        impl.setPeerPid.bind(impl));
    this.helper_internal_.registerHandler(
        973219859,
        Channel_Receive_ParamsSpec.$,
        null,
        impl.receive.bind(impl));
    this.helper_internal_.registerHandler(
        810452750,
        Channel_GetAssociatedInterface_ParamsSpec.$,
        null,
        impl.getAssociatedInterface.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const Channel = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.Channel";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ChannelRemote}
   */
  static getRemote() {
    let remote = new ChannelRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Channel
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const ChannelCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ChannelRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ChannelRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setPeerPid =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1007272179,
        Channel_SetPeerPid_ParamsSpec.$,
        null,
        this.setPeerPid.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.receive =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        973219859,
        Channel_Receive_ParamsSpec.$,
        null,
        this.receive.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAssociatedInterface =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        810452750,
        Channel_GetAssociatedInterface_ParamsSpec.$,
        null,
        this.getAssociatedInterface.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export const ChannelBootstrapPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'IPC.mojom.ChannelBootstrap', scope);
  }
};

/** @interface */
export const ChannelBootstrapInterface = class {
};

/**
 * @implements { ChannelBootstrapInterface }
 */
export const ChannelBootstrapRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ChannelBootstrapPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ChannelBootstrapPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ChannelBootstrapPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the ChannelBootstrap
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export const ChannelBootstrapReceiver = class {
  /**
   * @param {!ChannelBootstrapInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ChannelBootstrapRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ChannelBootstrapRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ChannelBootstrapRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

export const ChannelBootstrap = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.ChannelBootstrap";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ChannelBootstrapRemote}
   */
  static getRemote() {
    let remote = new ChannelBootstrapRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the ChannelBootstrap
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export const ChannelBootstrapCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ChannelBootstrapRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ChannelBootstrapRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Channel_SetPeerPid_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Channel_Receive_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Channel_GetAssociatedInterface_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MessageSpec.$,
    'Message',
    [
      mojo.internal.StructField(
        'bytes', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'handles', 8,
        0,
        mojo.internal.Array(mojo_native_SerializedHandleSpec.$, false),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const Message = class {
  constructor() {
    /** @type { !Array<!number> } */
    this.bytes;
    /** @type { (Array<!mojo_native_SerializedHandle>|undefined) } */
    this.handles;
  }
};



mojo.internal.Struct(
    Channel_SetPeerPid_ParamsSpec.$,
    'Channel_SetPeerPid_Params',
    [
      mojo.internal.StructField(
        'pid', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Channel_SetPeerPid_Params = class {
  constructor() {
    /** @type { !number } */
    this.pid;
  }
};



mojo.internal.Struct(
    Channel_Receive_ParamsSpec.$,
    'Channel_Receive_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        MessageSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export const Channel_Receive_Params = class {
  constructor() {
    /** @type { !Message } */
    this.message;
  }
};



mojo.internal.Struct(
    Channel_GetAssociatedInterface_ParamsSpec.$,
    'Channel_GetAssociatedInterface_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(GenericInterfacePendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export const Channel_GetAssociatedInterface_Params = class {
  constructor() {
    /** @type { !string } */
    this.name;
    /** @type { !Object } */
    this.receiver;
  }
};

