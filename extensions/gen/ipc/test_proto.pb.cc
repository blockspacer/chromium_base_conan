// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_proto.proto

#include "test_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_test_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessage1_test_5fproto_2eproto;
namespace ipc_message_utils_test {
class TestMessage1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessage1> _instance;
} _TestMessage1_default_instance_;
class TestMessage2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessage2> _instance;
} _TestMessage2_default_instance_;
}  // namespace ipc_message_utils_test
static void InitDefaultsscc_info_TestMessage1_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc_message_utils_test::_TestMessage1_default_instance_;
    new (ptr) ::ipc_message_utils_test::TestMessage1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessage1_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessage1_test_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_TestMessage2_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc_message_utils_test::_TestMessage2_default_instance_;
    new (ptr) ::ipc_message_utils_test::TestMessage2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessage2_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessage2_test_5fproto_2eproto}, {
      &scc_info_TestMessage1_test_5fproto_2eproto.base,}};

namespace ipc_message_utils_test {

// ===================================================================

class TestMessage1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessage1>()._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestMessage1::TestMessage1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ipc_message_utils_test.TestMessage1)
}
TestMessage1::TestMessage1(const TestMessage1& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:ipc_message_utils_test.TestMessage1)
}

void TestMessage1::SharedCtor() {
  number_ = 0;
}

TestMessage1::~TestMessage1() {
  // @@protoc_insertion_point(destructor:ipc_message_utils_test.TestMessage1)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TestMessage1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessage1::ArenaDtor(void* object) {
  TestMessage1* _this = reinterpret_cast< TestMessage1* >(object);
  (void)_this;
}
void TestMessage1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessage1& TestMessage1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessage1_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TestMessage1::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_message_utils_test.TestMessage1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMessage1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_message_utils_test.TestMessage1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_message_utils_test.TestMessage1)
  return target;
}

size_t TestMessage1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_message_utils_test.TestMessage1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage1::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestMessage1*>(
      &from));
}

void TestMessage1::MergeFrom(const TestMessage1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_message_utils_test.TestMessage1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_number()) {
    _internal_set_number(from._internal_number());
  }
}

void TestMessage1::CopyFrom(const TestMessage1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_message_utils_test.TestMessage1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage1::IsInitialized() const {
  return true;
}

void TestMessage1::InternalSwap(TestMessage1* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(number_, other->number_);
}

std::string TestMessage1::GetTypeName() const {
  return "ipc_message_utils_test.TestMessage1";
}


// ===================================================================

class TestMessage2::_Internal {
 public:
};

TestMessage2::TestMessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  numbers_(arena),
  strings_(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ipc_message_utils_test.TestMessage2)
}
TestMessage2::TestMessage2(const TestMessage2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      numbers_(from.numbers_),
      strings_(from.strings_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipc_message_utils_test.TestMessage2)
}

void TestMessage2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessage2_test_5fproto_2eproto.base);
}

TestMessage2::~TestMessage2() {
  // @@protoc_insertion_point(destructor:ipc_message_utils_test.TestMessage2)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TestMessage2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessage2::ArenaDtor(void* object) {
  TestMessage2* _this = reinterpret_cast< TestMessage2* >(object);
  (void)_this;
}
void TestMessage2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessage2& TestMessage2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessage2_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TestMessage2::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_message_utils_test.TestMessage2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  strings_.Clear();
  messages_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMessage2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ipc_message_utils_test.TestMessage1 messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_message_utils_test.TestMessage2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 numbers = 1;
  for (int i = 0, n = this->_internal_numbers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_numbers(i), target);
  }

  // repeated string strings = 2;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated .ipc_message_utils_test.TestMessage1 messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_message_utils_test.TestMessage2)
  return target;
}

size_t TestMessage2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_message_utils_test.TestMessage2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 numbers = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->numbers_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numbers_size());
    total_size += data_size;
  }

  // repeated string strings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  // repeated .ipc_message_utils_test.TestMessage1 messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestMessage2*>(
      &from));
}

void TestMessage2::MergeFrom(const TestMessage2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_message_utils_test.TestMessage2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  strings_.MergeFrom(from.strings_);
  messages_.MergeFrom(from.messages_);
}

void TestMessage2::CopyFrom(const TestMessage2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_message_utils_test.TestMessage2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage2::IsInitialized() const {
  return true;
}

void TestMessage2::InternalSwap(TestMessage2* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  numbers_.InternalSwap(&other->numbers_);
  strings_.InternalSwap(&other->strings_);
  messages_.InternalSwap(&other->messages_);
}

std::string TestMessage2::GetTypeName() const {
  return "ipc_message_utils_test.TestMessage2";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ipc_message_utils_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipc_message_utils_test::TestMessage1* Arena::CreateMaybeMessage< ::ipc_message_utils_test::TestMessage1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ipc_message_utils_test::TestMessage1 >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc_message_utils_test::TestMessage2* Arena::CreateMaybeMessage< ::ipc_message_utils_test::TestMessage2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ipc_message_utils_test::TestMessage2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
