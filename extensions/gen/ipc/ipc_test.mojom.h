// ipc/ipc_test.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef IPC_IPC_TEST_MOJOM_H_
#define IPC_IPC_TEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"
#include "ipc/ipc_test.mojom-shared.h"
#include "ipc/ipc_test.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"



#ifdef KYTHE_IS_RUNNING
#pragma kythe_inline_metadata "Metadata comment"
#endif


namespace IPC {
namespace mojom {

class SimpleTestDriverProxy;

template <typename ImplRefTraits>
class SimpleTestDriverStub;

class SimpleTestDriverRequestValidator;
class SimpleTestDriverResponseValidator;


// @generated_from: IPC.mojom.SimpleTestDriver
class  SimpleTestDriver
    : public SimpleTestDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = SimpleTestDriverInterfaceBase;
  using Proxy_ = SimpleTestDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = SimpleTestDriverStub<ImplRefTraits>;

  using RequestValidator_ = SimpleTestDriverRequestValidator;
  using ResponseValidator_ = SimpleTestDriverResponseValidator;
  enum MethodMinVersions : uint32_t {
    kExpectValueMinVersion = 0,
    kGetExpectedValueMinVersion = 0,
    kRequestValueMinVersion = 0,
    kRequestQuitMinVersion = 0,
  };
  virtual ~SimpleTestDriver() {}

  
// @generated_from: IPC.mojom.SimpleTestDriver.ExpectValue
  virtual void ExpectValue(int32_t value) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: IPC.mojom.SimpleTestDriver.GetExpectedValue
  virtual bool GetExpectedValue(int32_t* out_value);

  using GetExpectedValueCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: IPC.mojom.SimpleTestDriver.GetExpectedValue
  virtual void GetExpectedValue(GetExpectedValueCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestValue
  virtual bool RequestValue(int32_t* out_value);

  using RequestValueCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestValue
  virtual void RequestValue(RequestValueCallback callback) = 0;


  using RequestQuitCallback = base::OnceCallback<void()>;
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestQuit
  virtual void RequestQuit(RequestQuitCallback callback) = 0;
};

class SimpleTestClientProxy;

template <typename ImplRefTraits>
class SimpleTestClientStub;

class SimpleTestClientRequestValidator;
class SimpleTestClientResponseValidator;


// @generated_from: IPC.mojom.SimpleTestClient
class  SimpleTestClient
    : public SimpleTestClientInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = SimpleTestClientInterfaceBase;
  using Proxy_ = SimpleTestClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = SimpleTestClientStub<ImplRefTraits>;

  using RequestValidator_ = SimpleTestClientRequestValidator;
  using ResponseValidator_ = SimpleTestClientResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRequestValueMinVersion = 0,
  };
  virtual ~SimpleTestClient() {}

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: IPC.mojom.SimpleTestClient.RequestValue
  virtual bool RequestValue(int32_t* out_value);

  using RequestValueCallback = base::OnceCallback<void(int32_t)>;
  
// @generated_from: IPC.mojom.SimpleTestClient.RequestValue
  virtual void RequestValue(RequestValueCallback callback) = 0;
};

class PingReceiverProxy;

template <typename ImplRefTraits>
class PingReceiverStub;

class PingReceiverRequestValidator;
class PingReceiverResponseValidator;


// @generated_from: IPC.mojom.PingReceiver
class  PingReceiver
    : public PingReceiverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PingReceiverInterfaceBase;
  using Proxy_ = PingReceiverProxy;

  template <typename ImplRefTraits>
  using Stub_ = PingReceiverStub<ImplRefTraits>;

  using RequestValidator_ = PingReceiverRequestValidator;
  using ResponseValidator_ = PingReceiverResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
  };
  virtual ~PingReceiver() {}


  using PingCallback = base::OnceCallback<void()>;
  
// @generated_from: IPC.mojom.PingReceiver.Ping
  virtual void Ping(PingCallback callback) = 0;
};

class TestStructPasserProxy;

template <typename ImplRefTraits>
class TestStructPasserStub;

class TestStructPasserRequestValidator;


// @generated_from: IPC.mojom.TestStructPasser
class  TestStructPasser
    : public TestStructPasserInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = TestStructPasserInterfaceBase;
  using Proxy_ = TestStructPasserProxy;

  template <typename ImplRefTraits>
  using Stub_ = TestStructPasserStub<ImplRefTraits>;

  using RequestValidator_ = TestStructPasserRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPassMinVersion = 0,
  };
  virtual ~TestStructPasser() {}

  
// @generated_from: IPC.mojom.TestStructPasser.Pass
  virtual void Pass(TestStructPtr s) = 0;
};

class IndirectTestDriverProxy;

template <typename ImplRefTraits>
class IndirectTestDriverStub;

class IndirectTestDriverRequestValidator;


// @generated_from: IPC.mojom.IndirectTestDriver
class  IndirectTestDriver
    : public IndirectTestDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = IndirectTestDriverInterfaceBase;
  using Proxy_ = IndirectTestDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = IndirectTestDriverStub<ImplRefTraits>;

  using RequestValidator_ = IndirectTestDriverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetPingReceiverMinVersion = 0,
  };
  virtual ~IndirectTestDriver() {}

  
// @generated_from: IPC.mojom.IndirectTestDriver.GetPingReceiver
  virtual void GetPingReceiver(::mojo::PendingAssociatedReceiver<PingReceiver> receiver) = 0;
};

class ReflectorProxy;

template <typename ImplRefTraits>
class ReflectorStub;

class ReflectorRequestValidator;
class ReflectorResponseValidator;


// @generated_from: IPC.mojom.Reflector
class  Reflector
    : public ReflectorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;

  using Base_ = ReflectorInterfaceBase;
  using Proxy_ = ReflectorProxy;

  template <typename ImplRefTraits>
  using Stub_ = ReflectorStub<ImplRefTraits>;

  using RequestValidator_ = ReflectorRequestValidator;
  using ResponseValidator_ = ReflectorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kPingMinVersion = 0,
    kSyncPingMinVersion = 0,
    kQuitMinVersion = 0,
  };
  virtual ~Reflector() {}


  using PingCallback = base::OnceCallback<void(const std::string&)>;
  
// @generated_from: IPC.mojom.Reflector.Ping
  virtual void Ping(const std::string& value, PingCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
// @generated_from: IPC.mojom.Reflector.SyncPing
  virtual bool SyncPing(const std::string& value, std::string* out_response);

  using SyncPingCallback = base::OnceCallback<void(const std::string&)>;
  
// @generated_from: IPC.mojom.Reflector.SyncPing
  virtual void SyncPing(const std::string& value, SyncPingCallback callback) = 0;

  
// @generated_from: IPC.mojom.Reflector.Quit
  virtual void Quit() = 0;
};

class AssociatedInterfaceVendorProxy;

template <typename ImplRefTraits>
class AssociatedInterfaceVendorStub;

class AssociatedInterfaceVendorRequestValidator;


// @generated_from: IPC.mojom.AssociatedInterfaceVendor
class  AssociatedInterfaceVendor
    : public AssociatedInterfaceVendorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AssociatedInterfaceVendorInterfaceBase;
  using Proxy_ = AssociatedInterfaceVendorProxy;

  template <typename ImplRefTraits>
  using Stub_ = AssociatedInterfaceVendorStub<ImplRefTraits>;

  using RequestValidator_ = AssociatedInterfaceVendorRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetTestInterfaceMinVersion = 0,
  };
  virtual ~AssociatedInterfaceVendor() {}

  
// @generated_from: IPC.mojom.AssociatedInterfaceVendor.GetTestInterface
  virtual void GetTestInterface(::mojo::PendingAssociatedReceiver<SimpleTestDriver> receiver) = 0;
};

class InterfacePassingTestDriverProxy;

template <typename ImplRefTraits>
class InterfacePassingTestDriverStub;

class InterfacePassingTestDriverRequestValidator;
class InterfacePassingTestDriverResponseValidator;


// @generated_from: IPC.mojom.InterfacePassingTestDriver
class  InterfacePassingTestDriver
    : public InterfacePassingTestDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = InterfacePassingTestDriverInterfaceBase;
  using Proxy_ = InterfacePassingTestDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = InterfacePassingTestDriverStub<ImplRefTraits>;

  using RequestValidator_ = InterfacePassingTestDriverRequestValidator;
  using ResponseValidator_ = InterfacePassingTestDriverResponseValidator;
  enum MethodMinVersions : uint32_t {
    kInitMinVersion = 0,
    kGetPingReceiverMinVersion = 0,
    kGetAssociatedPingReceiverMinVersion = 0,
    kQuitMinVersion = 0,
  };
  virtual ~InterfacePassingTestDriver() {}


  using InitCallback = base::OnceCallback<void()>;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.Init
  virtual void Init(InitCallback callback) = 0;


  using GetPingReceiverCallback = base::OnceCallback<void()>;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.GetPingReceiver
  virtual void GetPingReceiver(std::vector<::mojo::PendingReceiver<PingReceiver>> receiver, GetPingReceiverCallback callback) = 0;


  using GetAssociatedPingReceiverCallback = base::OnceCallback<void()>;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.GetAssociatedPingReceiver
  virtual void GetAssociatedPingReceiver(std::vector<::mojo::PendingAssociatedReceiver<PingReceiver>> receiver, GetAssociatedPingReceiverCallback callback) = 0;

  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.Quit
  virtual void Quit() = 0;
};



// @generated_from: IPC.mojom.SimpleTestDriver
class  SimpleTestDriverProxy
    : public SimpleTestDriver {
 public:
  using InterfaceType = SimpleTestDriver;

  explicit SimpleTestDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.SimpleTestDriver.ExpectValue
  void ExpectValue(int32_t value) final;
  
// @generated_from: IPC.mojom.SimpleTestDriver.GetExpectedValue
  bool GetExpectedValue(int32_t* out_value) final;
  
// @generated_from: IPC.mojom.SimpleTestDriver.GetExpectedValue
  void GetExpectedValue(GetExpectedValueCallback callback) final;
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestValue
  bool RequestValue(int32_t* out_value) final;
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestValue
  void RequestValue(RequestValueCallback callback) final;
  
// @generated_from: IPC.mojom.SimpleTestDriver.RequestQuit
  void RequestQuit(RequestQuitCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.SimpleTestClient
class  SimpleTestClientProxy
    : public SimpleTestClient {
 public:
  using InterfaceType = SimpleTestClient;

  explicit SimpleTestClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.SimpleTestClient.RequestValue
  bool RequestValue(int32_t* out_value) final;
  
// @generated_from: IPC.mojom.SimpleTestClient.RequestValue
  void RequestValue(RequestValueCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.PingReceiver
class  PingReceiverProxy
    : public PingReceiver {
 public:
  using InterfaceType = PingReceiver;

  explicit PingReceiverProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.PingReceiver.Ping
  void Ping(PingCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.TestStructPasser
class  TestStructPasserProxy
    : public TestStructPasser {
 public:
  using InterfaceType = TestStructPasser;

  explicit TestStructPasserProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.TestStructPasser.Pass
  void Pass(TestStructPtr s) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.IndirectTestDriver
class  IndirectTestDriverProxy
    : public IndirectTestDriver {
 public:
  using InterfaceType = IndirectTestDriver;

  explicit IndirectTestDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.IndirectTestDriver.GetPingReceiver
  void GetPingReceiver(::mojo::PendingAssociatedReceiver<PingReceiver> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.Reflector
class  ReflectorProxy
    : public Reflector {
 public:
  using InterfaceType = Reflector;

  explicit ReflectorProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.Reflector.Ping
  void Ping(const std::string& value, PingCallback callback) final;
  
// @generated_from: IPC.mojom.Reflector.SyncPing
  bool SyncPing(const std::string& value, std::string* out_response) final;
  
// @generated_from: IPC.mojom.Reflector.SyncPing
  void SyncPing(const std::string& value, SyncPingCallback callback) final;
  
// @generated_from: IPC.mojom.Reflector.Quit
  void Quit() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.AssociatedInterfaceVendor
class  AssociatedInterfaceVendorProxy
    : public AssociatedInterfaceVendor {
 public:
  using InterfaceType = AssociatedInterfaceVendor;

  explicit AssociatedInterfaceVendorProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.AssociatedInterfaceVendor.GetTestInterface
  void GetTestInterface(::mojo::PendingAssociatedReceiver<SimpleTestDriver> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



// @generated_from: IPC.mojom.InterfacePassingTestDriver
class  InterfacePassingTestDriverProxy
    : public InterfacePassingTestDriver {
 public:
  using InterfaceType = InterfacePassingTestDriver;

  explicit InterfacePassingTestDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.Init
  void Init(InitCallback callback) final;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.GetPingReceiver
  void GetPingReceiver(std::vector<::mojo::PendingReceiver<PingReceiver>> receiver, GetPingReceiverCallback callback) final;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.GetAssociatedPingReceiver
  void GetAssociatedPingReceiver(std::vector<::mojo::PendingAssociatedReceiver<PingReceiver>> receiver, GetAssociatedPingReceiverCallback callback) final;
  
// @generated_from: IPC.mojom.InterfacePassingTestDriver.Quit
  void Quit() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  SimpleTestDriverStubDispatch {
 public:
  static bool Accept(SimpleTestDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SimpleTestDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SimpleTestDriver>>
class SimpleTestDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SimpleTestDriverStub() {}
  ~SimpleTestDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SimpleTestDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SimpleTestDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SimpleTestClientStubDispatch {
 public:
  static bool Accept(SimpleTestClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SimpleTestClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SimpleTestClient>>
class SimpleTestClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SimpleTestClientStub() {}
  ~SimpleTestClientStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SimpleTestClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SimpleTestClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PingReceiverStubDispatch {
 public:
  static bool Accept(PingReceiver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PingReceiver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PingReceiver>>
class PingReceiverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PingReceiverStub() {}
  ~PingReceiverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingReceiverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PingReceiverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  TestStructPasserStubDispatch {
 public:
  static bool Accept(TestStructPasser* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TestStructPasser* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TestStructPasser>>
class TestStructPasserStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TestStructPasserStub() {}
  ~TestStructPasserStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestStructPasserStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TestStructPasserStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  IndirectTestDriverStubDispatch {
 public:
  static bool Accept(IndirectTestDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      IndirectTestDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<IndirectTestDriver>>
class IndirectTestDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  IndirectTestDriverStub() {}
  ~IndirectTestDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IndirectTestDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return IndirectTestDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ReflectorStubDispatch {
 public:
  static bool Accept(Reflector* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Reflector* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Reflector>>
class ReflectorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ReflectorStub() {}
  ~ReflectorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ReflectorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ReflectorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AssociatedInterfaceVendorStubDispatch {
 public:
  static bool Accept(AssociatedInterfaceVendor* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AssociatedInterfaceVendor* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AssociatedInterfaceVendor>>
class AssociatedInterfaceVendorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AssociatedInterfaceVendorStub() {}
  ~AssociatedInterfaceVendorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedInterfaceVendorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AssociatedInterfaceVendorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  InterfacePassingTestDriverStubDispatch {
 public:
  static bool Accept(InterfacePassingTestDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      InterfacePassingTestDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<InterfacePassingTestDriver>>
class InterfacePassingTestDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  InterfacePassingTestDriverStub() {}
  ~InterfacePassingTestDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfacePassingTestDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InterfacePassingTestDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SimpleTestDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SimpleTestClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingReceiverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  TestStructPasserRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  IndirectTestDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ReflectorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AssociatedInterfaceVendorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  InterfacePassingTestDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SimpleTestDriverResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SimpleTestClientResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PingReceiverResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ReflectorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  InterfacePassingTestDriverResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





// @generated_from: IPC.mojom.TestStruct
class  TestStruct {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<TestStruct, T>::value>;
  using DataView = TestStructDataView;
  using Data_ = internal::TestStruct_Data;

  template <typename... Args>
  static TestStructPtr New(Args&&... args) {
    return TestStructPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static TestStructPtr From(const U& u) {
    return mojo::TypeConverter<TestStructPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestStruct>::Convert(*this);
  }


  TestStruct();

  ~TestStruct();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = TestStructPtr>
  TestStructPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        TestStruct::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        TestStruct::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::TestStruct_UnserializedMessageContext<
            UserType, TestStruct::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<TestStruct::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return TestStruct::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::TestStruct_UnserializedMessageContext<
            UserType, TestStruct::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<TestStruct::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTracedValue(perfetto::TracedValue context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, TestStruct::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}




template <typename StructPtrType>
TestStructPtr TestStruct::Clone() const {
  return New(
  );
}

template <typename T, TestStruct::EnableIfSame<T>*>
bool TestStruct::Equals(const T& other_struct) const {
  return true;
}

template <typename T, TestStruct::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}


}  // namespace mojom
}  // namespace IPC

namespace mojo {


template <>
struct  StructTraits<::IPC::mojom::TestStruct::DataView,
                                         ::IPC::mojom::TestStructPtr> {
  static bool IsNull(const ::IPC::mojom::TestStructPtr& input) { return !input; }
  static void SetToNull(::IPC::mojom::TestStructPtr* output) { output->reset(); }

  static bool Read(::IPC::mojom::TestStruct::DataView input, ::IPC::mojom::TestStructPtr* output);
};

}  // namespace mojo

#endif  // IPC_IPC_TEST_MOJOM_H_

/* Metadata comment
eyJtZXRhIjogW3siZW5kIjogMTcyMCwgImJlZ2luIjogMTcwNCwgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5TaW1wbGVUZXN0RHJpdmVyIn19LCB7
ImVuZCI6IDI1NTQsICJiZWdpbiI6IDI1NDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0
ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9t
aXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwg
InNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdERyaXZlci5FeHBlY3RWYWx1ZSJ9fSwg
eyJlbmQiOiAyODA5LCAiYmVnaW4iOiAyNzkzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3REcml2ZXIuR2V0RXhwZWN0ZWRWYWx1
ZSJ9fSwgeyJlbmQiOiAzMDAwLCAiYmVnaW4iOiAyOTg0LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3REcml2ZXIuR2V0RXhwZWN0
ZWRWYWx1ZSJ9fSwgeyJlbmQiOiAzMjY3LCAiYmVnaW4iOiAzMjU1LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3REcml2ZXIuUmVx
dWVzdFZhbHVlIn19LCB7ImVuZCI6IDM0NDYsICJiZWdpbiI6IDM0MzQsICJlZGdlIjogIiUva3l0
aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsi
Y29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1
YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdERyaXZlci5S
ZXF1ZXN0VmFsdWUifX0sIHsiZW5kIjogMzYzMSwgImJlZ2luIjogMzYyMCwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5TaW1wbGVUZXN0RHJpdmVy
LlJlcXVlc3RRdWl0In19LCB7ImVuZCI6IDM5MTcsICJiZWdpbiI6IDM5MDEsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdENsaWVu
dCJ9fSwgeyJlbmQiOiA0Nzg3LCAiYmVnaW4iOiA0Nzc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2Uv
Z2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6
ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJt
b2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3RDbGllbnQuUmVxdWVzdFZh
bHVlIn19LCB7ImVuZCI6IDQ5NjYsICJiZWdpbiI6IDQ5NTQsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdENsaWVudC5SZXF1ZXN0
VmFsdWUifX0sIHsiZW5kIjogNTIyOSwgImJlZ2luIjogNTIxNywgImVkZ2UiOiAiJS9reXRoZS9l
ZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3Jw
dXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2Ui
OiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5QaW5nUmVjZWl2ZXIifX0sIHsiZW5k
IjogNTk2MSwgImJlZ2luIjogNTk1NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIklQQy5tb2pvbS5QaW5nUmVjZWl2ZXIuUGluZyJ9fSwgeyJlbmQiOiA2MTk5LCAi
YmVnaW4iOiA2MTgzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
SVBDLm1vam9tLlRlc3RTdHJ1Y3RQYXNzZXIifX0sIHsiZW5kIjogNjkwMSwgImJlZ2luIjogNjg5
NywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5U
ZXN0U3RydWN0UGFzc2VyLlBhc3MifX0sIHsiZW5kIjogNzE0MywgImJlZ2luIjogNzEyNSwgImVk
Z2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwg
InZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9z
cmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5JbmRpcmVj
dFRlc3REcml2ZXIifX0sIHsiZW5kIjogNzg5MSwgImJlZ2luIjogNzg3NiwgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5JbmRpcmVjdFRlc3REcml2
ZXIuR2V0UGluZ1JlY2VpdmVyIn19LCB7ImVuZCI6IDgxNjMsICJiZWdpbiI6IDgxNTQsICJlZGdl
IjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2
bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3Jj
IiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uUmVmbGVjdG9y
In19LCB7ImVuZCI6IDg5NDIsICJiZWdpbiI6IDg5MzgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uUmVmbGVjdG9yLlBpbmcifX0sIHsiZW5kIjog
OTIwOCwgImJlZ2luIjogOTIwMCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0
eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29v
Z2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0
dXJlIjogIklQQy5tb2pvbS5SZWZsZWN0b3IuU3luY1BpbmcifX0sIHsiZW5kIjogOTQxMiwgImJl
Z2luIjogOTQwNCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFu
Y2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNl
LmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQ
Qy5tb2pvbS5SZWZsZWN0b3IuU3luY1BpbmcifX0sIHsiZW5kIjogOTUzOSwgImJlZ2luIjogOTUz
NSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZp
bmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJv
bWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5S
ZWZsZWN0b3IuUXVpdCJ9fSwgeyJlbmQiOiA5ODAxLCAiYmVnaW4iOiA5Nzc2LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLkFzc29jaWF0ZWRJbnRl
cmZhY2VWZW5kb3IifX0sIHsiZW5kIjogMTA2MDEsICJiZWdpbiI6IDEwNTg1LCAiZWRnZSI6ICIl
L2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUi
OiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJs
YW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLkFzc29jaWF0ZWRJbnRl
cmZhY2VWZW5kb3IuR2V0VGVzdEludGVyZmFjZSJ9fSwgeyJlbmQiOiAxMDk3OSwgImJlZ2luIjog
MTA5NTMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9q
b20uSW50ZXJmYWNlUGFzc2luZ1Rlc3REcml2ZXIifX0sIHsiZW5kIjogMTE5MjksICJiZWdpbiI6
IDExOTI1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9y
X2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29t
L2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1v
am9tLkludGVyZmFjZVBhc3NpbmdUZXN0RHJpdmVyLkluaXQifX0sIHsiZW5kIjogMTIxMjgsICJi
ZWdpbiI6IDEyMTEzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAi
YW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3Vy
Y2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAi
SVBDLm1vam9tLkludGVyZmFjZVBhc3NpbmdUZXN0RHJpdmVyLkdldFBpbmdSZWNlaXZlciJ9fSwg
eyJlbmQiOiAxMjQyOSwgImJlZ2luIjogMTI0MDQsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uSW50ZXJmYWNlUGFzc2luZ1Rlc3REcml2ZXIuR2V0
QXNzb2NpYXRlZFBpbmdSZWNlaXZlciJ9fSwgeyJlbmQiOiAxMjYzNSwgImJlZ2luIjogMTI2MzEs
ICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5l
cyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21p
dW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uSW50
ZXJmYWNlUGFzc2luZ1Rlc3REcml2ZXIuUXVpdCJ9fSwgeyJlbmQiOiAxMjk2OSwgImJlZ2luIjog
MTI5NTgsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3Jf
ZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20v
Y2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9q
b20uU2ltcGxlVGVzdERyaXZlci5FeHBlY3RWYWx1ZSJ9fSwgeyJlbmQiOiAxMzA4MiwgImJlZ2lu
IjogMTMwNjYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNo
b3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5j
b20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMu
bW9qb20uU2ltcGxlVGVzdERyaXZlci5HZXRFeHBlY3RlZFZhbHVlIn19LCB7ImVuZCI6IDEzMjAw
LCAiYmVnaW4iOiAxMzE4NCwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBl
IjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xl
c291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJl
IjogIklQQy5tb2pvbS5TaW1wbGVUZXN0RHJpdmVyLkdldEV4cGVjdGVkVmFsdWUifX0sIHsiZW5k
IjogMTMzMjUsICJiZWdpbiI6IDEzMzEzLCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVz
IiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1
bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJz
aWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3REcml2ZXIuUmVxdWVzdFZhbHVlIn19LCB7
ImVuZCI6IDEzNDM1LCAiYmVnaW4iOiAxMzQyMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVy
YXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hy
b21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20i
LCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5TaW1wbGVUZXN0RHJpdmVyLlJlcXVlc3RWYWx1ZSJ9
fSwgeyJlbmQiOiAxMzU1NCwgImJlZ2luIjogMTM1NDMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9n
ZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjog
ImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1v
am9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdERyaXZlci5SZXF1ZXN0UXVp
dCJ9fSwgeyJlbmQiOiAxMzk4MCwgImJlZ2luIjogMTM5NjgsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uU2ltcGxlVGVzdENsaWVudC5SZXF1ZXN0
VmFsdWUifX0sIHsiZW5kIjogMTQwOTAsICJiZWdpbiI6IDE0MDc4LCAiZWRnZSI6ICIlL2t5dGhl
L2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNv
cnB1cyI6ICJjaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFn
ZSI6ICJtb2pvbSIsICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLlNpbXBsZVRlc3RDbGllbnQuUmVx
dWVzdFZhbHVlIn19LCB7ImVuZCI6IDE0NDc3LCAiYmVnaW4iOiAxNDQ3MywgImVkZ2UiOiAiJS9r
eXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjog
eyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFu
Z3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5QaW5nUmVjZWl2ZXIuUGlu
ZyJ9fSwgeyJlbmQiOiAxNDg4MCwgImJlZ2luIjogMTQ4NzYsICJlZGdlIjogIiUva3l0aGUvZWRn
ZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVz
IjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjog
Im1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uVGVzdFN0cnVjdFBhc3Nlci5QYXNzIn19
LCB7ImVuZCI6IDE1MzExLCAiYmVnaW4iOiAxNTI5NiwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dl
bmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAi
Y2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9q
b20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5JbmRpcmVjdFRlc3REcml2ZXIuR2V0UGluZ1Jl
Y2VpdmVyIn19LCB7ImVuZCI6IDE1NzA3LCAiYmVnaW4iOiAxNTcwMywgImVkZ2UiOiAiJS9reXRo
ZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJj
b3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3Vh
Z2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pvbS5SZWZsZWN0b3IuUGluZyJ9fSwg
eyJlbmQiOiAxNTgzMSwgImJlZ2luIjogMTU4MjMsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5l
cmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNo
cm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9t
IiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uUmVmbGVjdG9yLlN5bmNQaW5nIn19LCB7ImVuZCI6
IDE1OTU5LCAiYmVnaW4iOiAxNTk1MSwgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIs
ICJ0eXBlIjogImFuY2hvcl9kZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0u
Z29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2ln
bmF0dXJlIjogIklQQy5tb2pvbS5SZWZsZWN0b3IuU3luY1BpbmcifX0sIHsiZW5kIjogMTYwNzks
ICJiZWdpbiI6IDE2MDc1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwgInR5cGUi
OiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5nb29nbGVz
b3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWduYXR1cmUi
OiAiSVBDLm1vam9tLlJlZmxlY3Rvci5RdWl0In19LCB7ImVuZCI6IDE2NTM5LCAiYmVnaW4iOiAx
NjUyMywgImVkZ2UiOiAiJS9reXRoZS9lZGdlL2dlbmVyYXRlcyIsICJ0eXBlIjogImFuY2hvcl9k
ZWZpbmVzIiwgInZuYW1lIjogeyJjb3JwdXMiOiAiY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9j
aHJvbWl1bS9zcmMiLCAibGFuZ3VhZ2UiOiAibW9qb20iLCAic2lnbmF0dXJlIjogIklQQy5tb2pv
bS5Bc3NvY2lhdGVkSW50ZXJmYWNlVmVuZG9yLkdldFRlc3RJbnRlcmZhY2UifX0sIHsiZW5kIjog
MTcwNDEsICJiZWdpbiI6IDE3MDM3LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJhdGVzIiwg
InR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJvbWl1bS5n
b29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIsICJzaWdu
YXR1cmUiOiAiSVBDLm1vam9tLkludGVyZmFjZVBhc3NpbmdUZXN0RHJpdmVyLkluaXQifX0sIHsi
ZW5kIjogMTcxNzAsICJiZWdpbiI6IDE3MTU1LCAiZWRnZSI6ICIlL2t5dGhlL2VkZ2UvZ2VuZXJh
dGVzIiwgInR5cGUiOiAiYW5jaG9yX2RlZmluZXMiLCAidm5hbWUiOiB7ImNvcnB1cyI6ICJjaHJv
bWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYyIsICJsYW5ndWFnZSI6ICJtb2pvbSIs
ICJzaWduYXR1cmUiOiAiSVBDLm1vam9tLkludGVyZmFjZVBhc3NpbmdUZXN0RHJpdmVyLkdldFBp
bmdSZWNlaXZlciJ9fSwgeyJlbmQiOiAxNzM5MSwgImJlZ2luIjogMTczNjYsICJlZGdlIjogIiUv
a3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6
IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxh
bmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6ICJJUEMubW9qb20uSW50ZXJmYWNlUGFzc2lu
Z1Rlc3REcml2ZXIuR2V0QXNzb2NpYXRlZFBpbmdSZWNlaXZlciJ9fSwgeyJlbmQiOiAxNzU5MCwg
ImJlZ2luIjogMTc1ODYsICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAidHlwZSI6
ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdvb2dsZXNv
dXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25hdHVyZSI6
ICJJUEMubW9qb20uSW50ZXJmYWNlUGFzc2luZ1Rlc3REcml2ZXIuUXVpdCJ9fSwgeyJlbmQiOiAy
OTk5OSwgImJlZ2luIjogMjk5ODksICJlZGdlIjogIiUva3l0aGUvZWRnZS9nZW5lcmF0ZXMiLCAi
dHlwZSI6ICJhbmNob3JfZGVmaW5lcyIsICJ2bmFtZSI6IHsiY29ycHVzIjogImNocm9taXVtLmdv
b2dsZXNvdXJjZS5jb20vY2hyb21pdW0vc3JjIiwgImxhbmd1YWdlIjogIm1vam9tIiwgInNpZ25h
dHVyZSI6ICJJUEMubW9qb20uVGVzdFN0cnVjdCJ9fV0sICJ0eXBlIjogImt5dGhlMCJ9
*/