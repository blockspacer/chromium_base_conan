// ipc/ipc_test.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "ipc/ipc_test.mojom-shared.h"

#include <utility>

#include "base/stl_util.h"  // for base::size()
#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ipc/ipc_test.mojom-params-data.h"
namespace IPC {
namespace mojom {

namespace internal {


// static
bool TestStruct_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStruct_Data* object = static_cast<const TestStruct_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

TestStruct_Data::TestStruct_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_ExpectValue_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_ExpectValue_Params_Data* object = static_cast<const SimpleTestDriver_ExpectValue_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_ExpectValue_Params_Data::SimpleTestDriver_ExpectValue_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_GetExpectedValue_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_GetExpectedValue_Params_Data* object = static_cast<const SimpleTestDriver_GetExpectedValue_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_GetExpectedValue_Params_Data::SimpleTestDriver_GetExpectedValue_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_GetExpectedValue_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_GetExpectedValue_ResponseParams_Data* object = static_cast<const SimpleTestDriver_GetExpectedValue_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_GetExpectedValue_ResponseParams_Data::SimpleTestDriver_GetExpectedValue_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_RequestValue_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_RequestValue_Params_Data* object = static_cast<const SimpleTestDriver_RequestValue_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_RequestValue_Params_Data::SimpleTestDriver_RequestValue_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_RequestValue_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_RequestValue_ResponseParams_Data* object = static_cast<const SimpleTestDriver_RequestValue_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_RequestValue_ResponseParams_Data::SimpleTestDriver_RequestValue_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_RequestQuit_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_RequestQuit_Params_Data* object = static_cast<const SimpleTestDriver_RequestQuit_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_RequestQuit_Params_Data::SimpleTestDriver_RequestQuit_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestDriver_RequestQuit_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestDriver_RequestQuit_ResponseParams_Data* object = static_cast<const SimpleTestDriver_RequestQuit_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestDriver_RequestQuit_ResponseParams_Data::SimpleTestDriver_RequestQuit_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestClient_RequestValue_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestClient_RequestValue_Params_Data* object = static_cast<const SimpleTestClient_RequestValue_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestClient_RequestValue_Params_Data::SimpleTestClient_RequestValue_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SimpleTestClient_RequestValue_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SimpleTestClient_RequestValue_ResponseParams_Data* object = static_cast<const SimpleTestClient_RequestValue_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

SimpleTestClient_RequestValue_ResponseParams_Data::SimpleTestClient_RequestValue_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PingReceiver_Ping_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingReceiver_Ping_Params_Data* object = static_cast<const PingReceiver_Ping_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

PingReceiver_Ping_Params_Data::PingReceiver_Ping_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PingReceiver_Ping_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingReceiver_Ping_ResponseParams_Data* object = static_cast<const PingReceiver_Ping_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

PingReceiver_Ping_ResponseParams_Data::PingReceiver_Ping_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TestStructPasser_Pass_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestStructPasser_Pass_Params_Data* object = static_cast<const TestStructPasser_Pass_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->s, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->s, validation_context))
    return false;

  return true;
}

TestStructPasser_Pass_Params_Data::TestStructPasser_Pass_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IndirectTestDriver_GetPingReceiver_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IndirectTestDriver_GetPingReceiver_Params_Data* object = static_cast<const IndirectTestDriver_GetPingReceiver_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IndirectTestDriver_GetPingReceiver_Params_Data::IndirectTestDriver_GetPingReceiver_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Reflector_Ping_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Reflector_Ping_Params_Data* object = static_cast<const Reflector_Ping_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

Reflector_Ping_Params_Data::Reflector_Ping_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Reflector_Ping_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Reflector_Ping_ResponseParams_Data* object = static_cast<const Reflector_Ping_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

Reflector_Ping_ResponseParams_Data::Reflector_Ping_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Reflector_SyncPing_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Reflector_SyncPing_Params_Data* object = static_cast<const Reflector_SyncPing_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->value, validation_context,
                                         &value_validate_params)) {
    return false;
  }

  return true;
}

Reflector_SyncPing_Params_Data::Reflector_SyncPing_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Reflector_SyncPing_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Reflector_SyncPing_ResponseParams_Data* object = static_cast<const Reflector_SyncPing_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams response_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->response, validation_context,
                                         &response_validate_params)) {
    return false;
  }

  return true;
}

Reflector_SyncPing_ResponseParams_Data::Reflector_SyncPing_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Reflector_Quit_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Reflector_Quit_Params_Data* object = static_cast<const Reflector_Quit_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

Reflector_Quit_Params_Data::Reflector_Quit_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AssociatedInterfaceVendor_GetTestInterface_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const AssociatedInterfaceVendor_GetTestInterface_Params_Data* object = static_cast<const AssociatedInterfaceVendor_GetTestInterface_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

AssociatedInterfaceVendor_GetTestInterface_Params_Data::AssociatedInterfaceVendor_GetTestInterface_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_Init_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_Init_Params_Data* object = static_cast<const InterfacePassingTestDriver_Init_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

InterfacePassingTestDriver_Init_Params_Data::InterfacePassingTestDriver_Init_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_Init_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_Init_ResponseParams_Data* object = static_cast<const InterfacePassingTestDriver_Init_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

InterfacePassingTestDriver_Init_ResponseParams_Data::InterfacePassingTestDriver_Init_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_GetPingReceiver_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_GetPingReceiver_Params_Data* object = static_cast<const InterfacePassingTestDriver_GetPingReceiver_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams receiver_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->receiver, validation_context,
                                         &receiver_validate_params)) {
    return false;
  }

  return true;
}

InterfacePassingTestDriver_GetPingReceiver_Params_Data::InterfacePassingTestDriver_GetPingReceiver_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_GetPingReceiver_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_GetPingReceiver_ResponseParams_Data* object = static_cast<const InterfacePassingTestDriver_GetPingReceiver_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

InterfacePassingTestDriver_GetPingReceiver_ResponseParams_Data::InterfacePassingTestDriver_GetPingReceiver_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_GetAssociatedPingReceiver_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_GetAssociatedPingReceiver_Params_Data* object = static_cast<const InterfacePassingTestDriver_GetAssociatedPingReceiver_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams receiver_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->receiver, validation_context,
                                         &receiver_validate_params)) {
    return false;
  }

  return true;
}

InterfacePassingTestDriver_GetAssociatedPingReceiver_Params_Data::InterfacePassingTestDriver_GetAssociatedPingReceiver_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams_Data* object = static_cast<const InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams_Data::InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterfacePassingTestDriver_Quit_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const InterfacePassingTestDriver_Quit_Params_Data* object = static_cast<const InterfacePassingTestDriver_Quit_Params_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  return true;
}

InterfacePassingTestDriver_Quit_Params_Data::InterfacePassingTestDriver_Quit_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace IPC
