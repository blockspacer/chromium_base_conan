// ipc/ipc_test.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('iPC.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.SimpleTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.SimpleTestDriver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.SimpleTestDriverInterface }
 */
iPC.mojom.SimpleTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.SimpleTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.SimpleTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.SimpleTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } value
   */

  expectValue(
      value) {
    this.proxy.sendMessage(
        1684380189,
        iPC.mojom.SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        [
          value
        ]);
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  getExpectedValue() {
    return this.proxy.sendMessage(
        234821473,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {
    return this.proxy.sendMessage(
        1042313697,
        iPC.mojom.SimpleTestDriver_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  requestQuit() {
    return this.proxy.sendMessage(
        307730614,
        iPC.mojom.SimpleTestDriver_RequestQuit_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SimpleTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.SimpleTestDriverReceiver = class {
  /**
   * @param {!iPC.mojom.SimpleTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.SimpleTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.SimpleTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.SimpleTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1684380189,
        iPC.mojom.SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        impl.expectValue.bind(impl));
    this.helper_internal_.registerHandler(
        234821473,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        impl.getExpectedValue.bind(impl));
    this.helper_internal_.registerHandler(
        1042313697,
        iPC.mojom.SimpleTestDriver_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        impl.requestValue.bind(impl));
    this.helper_internal_.registerHandler(
        307730614,
        iPC.mojom.SimpleTestDriver_RequestQuit_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        impl.requestQuit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.SimpleTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.SimpleTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.SimpleTestDriverRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.SimpleTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SimpleTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.SimpleTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.SimpleTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.SimpleTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.expectValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1684380189,
        iPC.mojom.SimpleTestDriver_ExpectValue_ParamsSpec.$,
        null,
        this.expectValue.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getExpectedValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        234821473,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
        this.getExpectedValue.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1042313697,
        iPC.mojom.SimpleTestDriver_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
        this.requestValue.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestQuit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        307730614,
        iPC.mojom.SimpleTestDriver_RequestQuit_ParamsSpec.$,
        iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
        this.requestQuit.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.SimpleTestClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.SimpleTestClient.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.SimpleTestClientInterface }
 */
iPC.mojom.SimpleTestClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.SimpleTestClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.SimpleTestClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.SimpleTestClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        value: !number,
   *  }>}
   */

  requestValue() {
    return this.proxy.sendMessage(
        965053099,
        iPC.mojom.SimpleTestClient_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SimpleTestClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.SimpleTestClientReceiver = class {
  /**
   * @param {!iPC.mojom.SimpleTestClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.SimpleTestClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.SimpleTestClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.SimpleTestClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        965053099,
        iPC.mojom.SimpleTestClient_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        impl.requestValue.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.SimpleTestClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.SimpleTestClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.SimpleTestClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.SimpleTestClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SimpleTestClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.SimpleTestClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.SimpleTestClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.SimpleTestClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestValue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        965053099,
        iPC.mojom.SimpleTestClient_RequestValue_ParamsSpec.$,
        iPC.mojom.SimpleTestClient_RequestValue_ResponseParamsSpec.$,
        this.requestValue.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.PingReceiverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.PingReceiver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.PingReceiverInterface }
 */
iPC.mojom.PingReceiverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.PingReceiverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.PingReceiverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.PingReceiverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  ping() {
    return this.proxy.sendMessage(
        367319129,
        iPC.mojom.PingReceiver_Ping_ParamsSpec.$,
        iPC.mojom.PingReceiver_Ping_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PingReceiver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.PingReceiverReceiver = class {
  /**
   * @param {!iPC.mojom.PingReceiverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.PingReceiverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.PingReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.PingReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        367319129,
        iPC.mojom.PingReceiver_Ping_ParamsSpec.$,
        iPC.mojom.PingReceiver_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.PingReceiver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.PingReceiver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.PingReceiverRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.PingReceiverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the PingReceiver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.PingReceiverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.PingReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.PingReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        367319129,
        iPC.mojom.PingReceiver_Ping_ParamsSpec.$,
        iPC.mojom.PingReceiver_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.TestStructPasserPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.TestStructPasser.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.TestStructPasserInterface }
 */
iPC.mojom.TestStructPasserRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.TestStructPasserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.TestStructPasserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.TestStructPasserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !iPC.mojom.TestStruct } s
   */

  pass(
      s) {
    this.proxy.sendMessage(
        405048767,
        iPC.mojom.TestStructPasser_Pass_ParamsSpec.$,
        null,
        [
          s
        ]);
  }
};

/**
 * An object which receives request messages for the TestStructPasser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.TestStructPasserReceiver = class {
  /**
   * @param {!iPC.mojom.TestStructPasserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.TestStructPasserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.TestStructPasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.TestStructPasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        405048767,
        iPC.mojom.TestStructPasser_Pass_ParamsSpec.$,
        null,
        impl.pass.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.TestStructPasser = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.TestStructPasser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.TestStructPasserRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.TestStructPasserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TestStructPasser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.TestStructPasserCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.TestStructPasserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.TestStructPasserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.pass =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        405048767,
        iPC.mojom.TestStructPasser_Pass_ParamsSpec.$,
        null,
        this.pass.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.IndirectTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.IndirectTestDriver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.IndirectTestDriverInterface }
 */
iPC.mojom.IndirectTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.IndirectTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.IndirectTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.IndirectTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getPingReceiver(
      receiver) {
    this.proxy.sendMessage(
        679516177,
        iPC.mojom.IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the IndirectTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.IndirectTestDriverReceiver = class {
  /**
   * @param {!iPC.mojom.IndirectTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.IndirectTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.IndirectTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.IndirectTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        679516177,
        iPC.mojom.IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        impl.getPingReceiver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.IndirectTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.IndirectTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.IndirectTestDriverRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.IndirectTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the IndirectTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.IndirectTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.IndirectTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.IndirectTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        679516177,
        iPC.mojom.IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
        null,
        this.getPingReceiver.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.ReflectorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.Reflector.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.ReflectorInterface }
 */
iPC.mojom.ReflectorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.ReflectorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.ReflectorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.ReflectorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        value: !string,
   *  }>}
   */

  ping(
      value) {
    return this.proxy.sendMessage(
        445739392,
        iPC.mojom.Reflector_Ping_ParamsSpec.$,
        iPC.mojom.Reflector_Ping_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   * @param { !string } value
   * @return {!Promise<{
        response: !string,
   *  }>}
   */

  syncPing(
      value) {
    return this.proxy.sendMessage(
        799672810,
        iPC.mojom.Reflector_SyncPing_ParamsSpec.$,
        iPC.mojom.Reflector_SyncPing_ResponseParamsSpec.$,
        [
          value
        ]);
  }

  
  /**
   */

  quit() {
    this.proxy.sendMessage(
        1468921172,
        iPC.mojom.Reflector_Quit_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the Reflector
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.ReflectorReceiver = class {
  /**
   * @param {!iPC.mojom.ReflectorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.ReflectorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.ReflectorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.ReflectorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        445739392,
        iPC.mojom.Reflector_Ping_ParamsSpec.$,
        iPC.mojom.Reflector_Ping_ResponseParamsSpec.$,
        impl.ping.bind(impl));
    this.helper_internal_.registerHandler(
        799672810,
        iPC.mojom.Reflector_SyncPing_ParamsSpec.$,
        iPC.mojom.Reflector_SyncPing_ResponseParamsSpec.$,
        impl.syncPing.bind(impl));
    this.helper_internal_.registerHandler(
        1468921172,
        iPC.mojom.Reflector_Quit_ParamsSpec.$,
        null,
        impl.quit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.Reflector = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.Reflector";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.ReflectorRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.ReflectorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Reflector
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.ReflectorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.ReflectorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.ReflectorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ping =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        445739392,
        iPC.mojom.Reflector_Ping_ParamsSpec.$,
        iPC.mojom.Reflector_Ping_ResponseParamsSpec.$,
        this.ping.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.syncPing =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        799672810,
        iPC.mojom.Reflector_SyncPing_ParamsSpec.$,
        iPC.mojom.Reflector_SyncPing_ResponseParamsSpec.$,
        this.syncPing.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.quit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1468921172,
        iPC.mojom.Reflector_Quit_ParamsSpec.$,
        null,
        this.quit.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.AssociatedInterfaceVendorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.AssociatedInterfaceVendor.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.AssociatedInterfaceVendorInterface }
 */
iPC.mojom.AssociatedInterfaceVendorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.AssociatedInterfaceVendorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.AssociatedInterfaceVendorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.AssociatedInterfaceVendorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   */

  getTestInterface(
      receiver) {
    this.proxy.sendMessage(
        1896590513,
        iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the AssociatedInterfaceVendor
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.AssociatedInterfaceVendorReceiver = class {
  /**
   * @param {!iPC.mojom.AssociatedInterfaceVendorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.AssociatedInterfaceVendorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.AssociatedInterfaceVendorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.AssociatedInterfaceVendorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1896590513,
        iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        impl.getTestInterface.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.AssociatedInterfaceVendor = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.AssociatedInterfaceVendor";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.AssociatedInterfaceVendorRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.AssociatedInterfaceVendorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AssociatedInterfaceVendor
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.AssociatedInterfaceVendorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.AssociatedInterfaceVendorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.AssociatedInterfaceVendorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getTestInterface =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1896590513,
        iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
        null,
        this.getTestInterface.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
iPC.mojom.InterfacePassingTestDriverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        iPC.mojom.InterfacePassingTestDriver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { iPC.mojom.InterfacePassingTestDriverInterface }
 */
iPC.mojom.InterfacePassingTestDriverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!iPC.mojom.InterfacePassingTestDriverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          iPC.mojom.InterfacePassingTestDriverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!iPC.mojom.InterfacePassingTestDriverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  init() {
    return this.proxy.sendMessage(
        567993236,
        iPC.mojom.InterfacePassingTestDriver_Init_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Array<!iPC.mojom.PingReceiverPendingReceiver> } receiver
   * @return {!Promise}
   */

  getPingReceiver(
      receiver) {
    return this.proxy.sendMessage(
        1463317246,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        [
          receiver
        ]);
  }

  
  /**
   * @param { !Array<!Object> } receiver
   * @return {!Promise}
   */

  getAssociatedPingReceiver(
      receiver) {
    return this.proxy.sendMessage(
        997978214,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        [
          receiver
        ]);
  }

  
  /**
   */

  quit() {
    this.proxy.sendMessage(
        1625756592,
        iPC.mojom.InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the InterfacePassingTestDriver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
iPC.mojom.InterfacePassingTestDriverReceiver = class {
  /**
   * @param {!iPC.mojom.InterfacePassingTestDriverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!iPC.mojom.InterfacePassingTestDriverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        iPC.mojom.InterfacePassingTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.InterfacePassingTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        567993236,
        iPC.mojom.InterfacePassingTestDriver_Init_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        impl.init.bind(impl));
    this.helper_internal_.registerHandler(
        1463317246,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        impl.getPingReceiver.bind(impl));
    this.helper_internal_.registerHandler(
        997978214,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        impl.getAssociatedPingReceiver.bind(impl));
    this.helper_internal_.registerHandler(
        1625756592,
        iPC.mojom.InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        impl.quit.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
iPC.mojom.InterfacePassingTestDriver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "IPC.mojom.InterfacePassingTestDriver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!iPC.mojom.InterfacePassingTestDriverRemote}
   * @export
   */
  static getRemote() {
    let remote = new iPC.mojom.InterfacePassingTestDriverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the InterfacePassingTestDriver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
iPC.mojom.InterfacePassingTestDriverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      iPC.mojom.InterfacePassingTestDriverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!iPC.mojom.InterfacePassingTestDriverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.init =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        567993236,
        iPC.mojom.InterfacePassingTestDriver_Init_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
        this.init.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1463317246,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
        this.getPingReceiver.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAssociatedPingReceiver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        997978214,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
        iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
        this.getAssociatedPingReceiver.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.quit =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1625756592,
        iPC.mojom.InterfacePassingTestDriver_Quit_ParamsSpec.$,
        null,
        this.quit.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.TestStructSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_ExpectValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_GetExpectedValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_RequestValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_RequestValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_RequestQuit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestClient_RequestValue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.SimpleTestClient_RequestValue_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.PingReceiver_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.PingReceiver_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.TestStructPasser_Pass_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.IndirectTestDriver_GetPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.Reflector_Ping_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.Reflector_Ping_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.Reflector_SyncPing_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.Reflector_SyncPing_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.Reflector_Quit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_Init_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_Init_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
iPC.mojom.InterfacePassingTestDriver_Quit_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    iPC.mojom.TestStructSpec.$,
    'TestStruct',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.TestStruct = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_ExpectValue_ParamsSpec.$,
    'SimpleTestDriver_ExpectValue_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.SimpleTestDriver_ExpectValue_Params = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_GetExpectedValue_ParamsSpec.$,
    'SimpleTestDriver_GetExpectedValue_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.SimpleTestDriver_GetExpectedValue_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParamsSpec.$,
    'SimpleTestDriver_GetExpectedValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.SimpleTestDriver_GetExpectedValue_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_RequestValue_ParamsSpec.$,
    'SimpleTestDriver_RequestValue_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.SimpleTestDriver_RequestValue_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_RequestValue_ResponseParamsSpec.$,
    'SimpleTestDriver_RequestValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.SimpleTestDriver_RequestValue_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_RequestQuit_ParamsSpec.$,
    'SimpleTestDriver_RequestQuit_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.SimpleTestDriver_RequestQuit_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParamsSpec.$,
    'SimpleTestDriver_RequestQuit_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.SimpleTestDriver_RequestQuit_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestClient_RequestValue_ParamsSpec.$,
    'SimpleTestClient_RequestValue_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.SimpleTestClient_RequestValue_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.SimpleTestClient_RequestValue_ResponseParamsSpec.$,
    'SimpleTestClient_RequestValue_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.SimpleTestClient_RequestValue_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.PingReceiver_Ping_ParamsSpec.$,
    'PingReceiver_Ping_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.PingReceiver_Ping_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.PingReceiver_Ping_ResponseParamsSpec.$,
    'PingReceiver_Ping_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.PingReceiver_Ping_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.TestStructPasser_Pass_ParamsSpec.$,
    'TestStructPasser_Pass_Params',
    [
      mojo.internal.StructField(
        's', 0,
        0,
        iPC.mojom.TestStructSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.TestStructPasser_Pass_Params = class {
  constructor() {
    /** @export { !iPC.mojom.TestStruct } */
    this.s;
  }
};




mojo.internal.Struct(
    iPC.mojom.IndirectTestDriver_GetPingReceiver_ParamsSpec.$,
    'IndirectTestDriver_GetPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(iPC.mojom.PingReceiverPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.IndirectTestDriver_GetPingReceiver_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    iPC.mojom.Reflector_Ping_ParamsSpec.$,
    'Reflector_Ping_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.Reflector_Ping_Params = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.Reflector_Ping_ResponseParamsSpec.$,
    'Reflector_Ping_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.Reflector_Ping_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.Reflector_SyncPing_ParamsSpec.$,
    'Reflector_SyncPing_Params',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.Reflector_SyncPing_Params = class {
  constructor() {
    /** @export { !string } */
    this.value;
  }
};




mojo.internal.Struct(
    iPC.mojom.Reflector_SyncPing_ResponseParamsSpec.$,
    'Reflector_SyncPing_ResponseParams',
    [
      mojo.internal.StructField(
        'response', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.Reflector_SyncPing_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.response;
  }
};




mojo.internal.Struct(
    iPC.mojom.Reflector_Quit_ParamsSpec.$,
    'Reflector_Quit_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.Reflector_Quit_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_ParamsSpec.$,
    'AssociatedInterfaceVendor_GetTestInterface_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(iPC.mojom.SimpleTestDriverPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.AssociatedInterfaceVendor_GetTestInterface_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_Init_ParamsSpec.$,
    'InterfacePassingTestDriver_Init_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_Init_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_Init_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_Init_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_Init_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ParamsSpec.$,
    'InterfacePassingTestDriver_GetPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.Array(mojo.internal.InterfaceRequest(iPC.mojom.PingReceiverPendingReceiver), false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_Params = class {
  constructor() {
    /** @export { !Array<!iPC.mojom.PingReceiverPendingReceiver> } */
    this.receiver;
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_GetPingReceiver_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_GetPingReceiver_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ParamsSpec.$,
    'InterfacePassingTestDriver_GetAssociatedPingReceiver_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.Array(mojo.internal.AssociatedInterfaceRequest(iPC.mojom.PingReceiverPendingReceiver), false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_Params = class {
  constructor() {
    /** @export { !Array<!Object> } */
    this.receiver;
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParamsSpec.$,
    'InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    iPC.mojom.InterfacePassingTestDriver_Quit_ParamsSpec.$,
    'InterfacePassingTestDriver_Quit_Params',
    [
    ],
    [[0, 8],]);





/** @record */
iPC.mojom.InterfacePassingTestDriver_Quit_Params = class {
  constructor() {
  }
};


