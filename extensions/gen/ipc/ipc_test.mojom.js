// ipc/ipc_test.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ipc/ipc_test.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('iPC.mojom');



  function TestStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestStruct.prototype.initDefaults_ = function() {
  };
  TestStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStruct.encodedSize = codec.kStructHeaderSize + 0;

  TestStruct.decode = function(decoder) {
    var packed;
    var val = new TestStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStruct.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestDriver_ExpectValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_ExpectValue_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  SimpleTestDriver_ExpectValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_ExpectValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SimpleTestDriver_ExpectValue_Params.encodedSize = codec.kStructHeaderSize + 8;

  SimpleTestDriver_ExpectValue_Params.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_ExpectValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SimpleTestDriver_ExpectValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_ExpectValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SimpleTestDriver_GetExpectedValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_GetExpectedValue_Params.prototype.initDefaults_ = function() {
  };
  SimpleTestDriver_GetExpectedValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_GetExpectedValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SimpleTestDriver_GetExpectedValue_Params.encodedSize = codec.kStructHeaderSize + 0;

  SimpleTestDriver_GetExpectedValue_Params.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_GetExpectedValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SimpleTestDriver_GetExpectedValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_GetExpectedValue_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestDriver_GetExpectedValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_GetExpectedValue_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  SimpleTestDriver_GetExpectedValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_GetExpectedValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SimpleTestDriver_GetExpectedValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SimpleTestDriver_GetExpectedValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_GetExpectedValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SimpleTestDriver_GetExpectedValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_GetExpectedValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SimpleTestDriver_RequestValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_RequestValue_Params.prototype.initDefaults_ = function() {
  };
  SimpleTestDriver_RequestValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_RequestValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SimpleTestDriver_RequestValue_Params.encodedSize = codec.kStructHeaderSize + 0;

  SimpleTestDriver_RequestValue_Params.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_RequestValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SimpleTestDriver_RequestValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_RequestValue_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestDriver_RequestValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_RequestValue_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  SimpleTestDriver_RequestValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_RequestValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SimpleTestDriver_RequestValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SimpleTestDriver_RequestValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_RequestValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SimpleTestDriver_RequestValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_RequestValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SimpleTestDriver_RequestQuit_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_RequestQuit_Params.prototype.initDefaults_ = function() {
  };
  SimpleTestDriver_RequestQuit_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_RequestQuit_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SimpleTestDriver_RequestQuit_Params.encodedSize = codec.kStructHeaderSize + 0;

  SimpleTestDriver_RequestQuit_Params.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_RequestQuit_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SimpleTestDriver_RequestQuit_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_RequestQuit_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestDriver_RequestQuit_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestDriver_RequestQuit_ResponseParams.prototype.initDefaults_ = function() {
  };
  SimpleTestDriver_RequestQuit_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestDriver_RequestQuit_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SimpleTestDriver_RequestQuit_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  SimpleTestDriver_RequestQuit_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SimpleTestDriver_RequestQuit_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SimpleTestDriver_RequestQuit_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestDriver_RequestQuit_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestClient_RequestValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestClient_RequestValue_Params.prototype.initDefaults_ = function() {
  };
  SimpleTestClient_RequestValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestClient_RequestValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SimpleTestClient_RequestValue_Params.encodedSize = codec.kStructHeaderSize + 0;

  SimpleTestClient_RequestValue_Params.decode = function(decoder) {
    var packed;
    var val = new SimpleTestClient_RequestValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SimpleTestClient_RequestValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestClient_RequestValue_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SimpleTestClient_RequestValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SimpleTestClient_RequestValue_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  SimpleTestClient_RequestValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SimpleTestClient_RequestValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SimpleTestClient_RequestValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SimpleTestClient_RequestValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SimpleTestClient_RequestValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SimpleTestClient_RequestValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SimpleTestClient_RequestValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PingReceiver_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PingReceiver_Ping_Params.prototype.initDefaults_ = function() {
  };
  PingReceiver_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PingReceiver_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PingReceiver_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  PingReceiver_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new PingReceiver_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PingReceiver_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PingReceiver_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PingReceiver_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PingReceiver_Ping_ResponseParams.prototype.initDefaults_ = function() {
  };
  PingReceiver_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PingReceiver_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PingReceiver_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PingReceiver_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PingReceiver_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PingReceiver_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PingReceiver_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestStructPasser_Pass_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestStructPasser_Pass_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TestStructPasser_Pass_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStructPasser_Pass_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestStructPasser_Pass_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStructPasser_Pass_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestStructPasser_Pass_Params.decode = function(decoder) {
    var packed;
    var val = new TestStructPasser_Pass_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(TestStruct);
    return val;
  };

  TestStructPasser_Pass_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStructPasser_Pass_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestStruct, val.s);
  };
  function IndirectTestDriver_GetPingReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IndirectTestDriver_GetPingReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  IndirectTestDriver_GetPingReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IndirectTestDriver_GetPingReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IndirectTestDriver_GetPingReceiver_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IndirectTestDriver_GetPingReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  IndirectTestDriver_GetPingReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new IndirectTestDriver_GetPingReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IndirectTestDriver_GetPingReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IndirectTestDriver_GetPingReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Reflector_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Reflector_Ping_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Reflector_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Reflector_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Reflector_Ping_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Reflector_Ping_Params.encodedSize = codec.kStructHeaderSize + 8;

  Reflector_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new Reflector_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Reflector_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Reflector_Ping_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Reflector_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Reflector_Ping_ResponseParams.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Reflector_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Reflector_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Reflector_Ping_ResponseParams.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Reflector_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Reflector_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Reflector_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Reflector_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Reflector_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Reflector_SyncPing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Reflector_SyncPing_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Reflector_SyncPing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Reflector_SyncPing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Reflector_SyncPing_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Reflector_SyncPing_Params.encodedSize = codec.kStructHeaderSize + 8;

  Reflector_SyncPing_Params.decode = function(decoder) {
    var packed;
    var val = new Reflector_SyncPing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Reflector_SyncPing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Reflector_SyncPing_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Reflector_SyncPing_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Reflector_SyncPing_ResponseParams.prototype.initDefaults_ = function() {
    this.response = null;
  };
  Reflector_SyncPing_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Reflector_SyncPing_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Reflector_SyncPing_ResponseParams.response
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Reflector_SyncPing_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Reflector_SyncPing_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Reflector_SyncPing_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.response =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Reflector_SyncPing_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Reflector_SyncPing_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.response);
  };
  function Reflector_Quit_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Reflector_Quit_Params.prototype.initDefaults_ = function() {
  };
  Reflector_Quit_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Reflector_Quit_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Reflector_Quit_Params.encodedSize = codec.kStructHeaderSize + 0;

  Reflector_Quit_Params.decode = function(decoder) {
    var packed;
    var val = new Reflector_Quit_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Reflector_Quit_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Reflector_Quit_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AssociatedInterfaceVendor_GetTestInterface_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedInterfaceVendor_GetTestInterface_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  AssociatedInterfaceVendor_GetTestInterface_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedInterfaceVendor_GetTestInterface_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedInterfaceVendor_GetTestInterface_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedInterfaceVendor_GetTestInterface_Params.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedInterfaceVendor_GetTestInterface_Params.decode = function(decoder) {
    var packed;
    var val = new AssociatedInterfaceVendor_GetTestInterface_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AssociatedInterfaceVendor_GetTestInterface_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedInterfaceVendor_GetTestInterface_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function InterfacePassingTestDriver_Init_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_Init_Params.prototype.initDefaults_ = function() {
  };
  InterfacePassingTestDriver_Init_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_Init_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_Init_Params.encodedSize = codec.kStructHeaderSize + 0;

  InterfacePassingTestDriver_Init_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_Init_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfacePassingTestDriver_Init_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_Init_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfacePassingTestDriver_Init_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_Init_ResponseParams.prototype.initDefaults_ = function() {
  };
  InterfacePassingTestDriver_Init_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_Init_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_Init_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InterfacePassingTestDriver_Init_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_Init_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfacePassingTestDriver_Init_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_Init_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfacePassingTestDriver_GetPingReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_GetPingReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  InterfacePassingTestDriver_GetPingReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_GetPingReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassingTestDriver_GetPingReceiver_Params.receiver
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.InterfaceRequest, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_GetPingReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  InterfacePassingTestDriver_GetPingReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_GetPingReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeArrayPointer(codec.InterfaceRequest);
    return val;
  };

  InterfacePassingTestDriver_GetPingReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_GetPingReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.InterfaceRequest, val.receiver);
  };
  function InterfacePassingTestDriver_GetPingReceiver_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.prototype.initDefaults_ = function() {
  };
  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_GetPingReceiver_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfacePassingTestDriver_GetPingReceiver_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_GetPingReceiver_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfacePassingTestDriver_GetAssociatedPingReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.receiver
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.AssociatedInterfaceRequest, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_GetAssociatedPingReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeArrayPointer(codec.AssociatedInterfaceRequest);
    return val;
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.AssociatedInterfaceRequest, val.receiver);
  };
  function InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.prototype.initDefaults_ = function() {
  };
  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfacePassingTestDriver_Quit_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfacePassingTestDriver_Quit_Params.prototype.initDefaults_ = function() {
  };
  InterfacePassingTestDriver_Quit_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfacePassingTestDriver_Quit_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfacePassingTestDriver_Quit_Params.encodedSize = codec.kStructHeaderSize + 0;

  InterfacePassingTestDriver_Quit_Params.decode = function(decoder) {
    var packed;
    var val = new InterfacePassingTestDriver_Quit_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfacePassingTestDriver_Quit_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfacePassingTestDriver_Quit_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kSimpleTestDriver_ExpectValue_Name = 1684380189;
  var kSimpleTestDriver_GetExpectedValue_Name = 234821473;
  var kSimpleTestDriver_RequestValue_Name = 1042313697;
  var kSimpleTestDriver_RequestQuit_Name = 307730614;

  function SimpleTestDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SimpleTestDriver,
                                                   handleOrPtrInfo);
  }

  function SimpleTestDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SimpleTestDriver, associatedInterfacePtrInfo);
  }

  SimpleTestDriverAssociatedPtr.prototype =
      Object.create(SimpleTestDriverPtr.prototype);
  SimpleTestDriverAssociatedPtr.prototype.constructor =
      SimpleTestDriverAssociatedPtr;

  function SimpleTestDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  SimpleTestDriverPtr.prototype.expectValue = function() {
    return SimpleTestDriverProxy.prototype.expectValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SimpleTestDriverProxy.prototype.expectValue = function(value) {
    var params_ = new SimpleTestDriver_ExpectValue_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kSimpleTestDriver_ExpectValue_Name,
        codec.align(SimpleTestDriver_ExpectValue_Params.encodedSize));
    builder.encodeStruct(SimpleTestDriver_ExpectValue_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SimpleTestDriverPtr.prototype.getExpectedValue = function() {
    return SimpleTestDriverProxy.prototype.getExpectedValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SimpleTestDriverProxy.prototype.getExpectedValue = function() {
    var params_ = new SimpleTestDriver_GetExpectedValue_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSimpleTestDriver_GetExpectedValue_Name,
          codec.align(SimpleTestDriver_GetExpectedValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SimpleTestDriver_GetExpectedValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SimpleTestDriver_GetExpectedValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SimpleTestDriverPtr.prototype.requestValue = function() {
    return SimpleTestDriverProxy.prototype.requestValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SimpleTestDriverProxy.prototype.requestValue = function() {
    var params_ = new SimpleTestDriver_RequestValue_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSimpleTestDriver_RequestValue_Name,
          codec.align(SimpleTestDriver_RequestValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SimpleTestDriver_RequestValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SimpleTestDriver_RequestValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SimpleTestDriverPtr.prototype.requestQuit = function() {
    return SimpleTestDriverProxy.prototype.requestQuit
        .apply(this.ptr.getProxy(), arguments);
  };

  SimpleTestDriverProxy.prototype.requestQuit = function() {
    var params_ = new SimpleTestDriver_RequestQuit_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSimpleTestDriver_RequestQuit_Name,
          codec.align(SimpleTestDriver_RequestQuit_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SimpleTestDriver_RequestQuit_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SimpleTestDriver_RequestQuit_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SimpleTestDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  SimpleTestDriverStub.prototype.expectValue = function(value) {
    return this.delegate_ && this.delegate_.expectValue && this.delegate_.expectValue(value);
  }
  SimpleTestDriverStub.prototype.getExpectedValue = function() {
    return this.delegate_ && this.delegate_.getExpectedValue && this.delegate_.getExpectedValue();
  }
  SimpleTestDriverStub.prototype.requestValue = function() {
    return this.delegate_ && this.delegate_.requestValue && this.delegate_.requestValue();
  }
  SimpleTestDriverStub.prototype.requestQuit = function() {
    return this.delegate_ && this.delegate_.requestQuit && this.delegate_.requestQuit();
  }

  SimpleTestDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSimpleTestDriver_ExpectValue_Name:
      var params = reader.decodeStruct(SimpleTestDriver_ExpectValue_Params);
      this.expectValue(params.value);
      return true;
    default:
      return false;
    }
  };

  SimpleTestDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSimpleTestDriver_GetExpectedValue_Name:
      var params = reader.decodeStruct(SimpleTestDriver_GetExpectedValue_Params);
      this.getExpectedValue().then(function(response) {
        var responseParams =
            new SimpleTestDriver_GetExpectedValue_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kSimpleTestDriver_GetExpectedValue_Name,
            codec.align(SimpleTestDriver_GetExpectedValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SimpleTestDriver_GetExpectedValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSimpleTestDriver_RequestValue_Name:
      var params = reader.decodeStruct(SimpleTestDriver_RequestValue_Params);
      this.requestValue().then(function(response) {
        var responseParams =
            new SimpleTestDriver_RequestValue_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kSimpleTestDriver_RequestValue_Name,
            codec.align(SimpleTestDriver_RequestValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SimpleTestDriver_RequestValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSimpleTestDriver_RequestQuit_Name:
      var params = reader.decodeStruct(SimpleTestDriver_RequestQuit_Params);
      this.requestQuit().then(function(response) {
        var responseParams =
            new SimpleTestDriver_RequestQuit_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kSimpleTestDriver_RequestQuit_Name,
            codec.align(SimpleTestDriver_RequestQuit_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SimpleTestDriver_RequestQuit_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSimpleTestDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSimpleTestDriver_ExpectValue_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SimpleTestDriver_ExpectValue_Params;
      break;
      case kSimpleTestDriver_GetExpectedValue_Name:
        if (message.expectsResponse())
          paramsClass = SimpleTestDriver_GetExpectedValue_Params;
      break;
      case kSimpleTestDriver_RequestValue_Name:
        if (message.expectsResponse())
          paramsClass = SimpleTestDriver_RequestValue_Params;
      break;
      case kSimpleTestDriver_RequestQuit_Name:
        if (message.expectsResponse())
          paramsClass = SimpleTestDriver_RequestQuit_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSimpleTestDriverResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSimpleTestDriver_GetExpectedValue_Name:
        if (message.isResponse())
          paramsClass = SimpleTestDriver_GetExpectedValue_ResponseParams;
        break;
      case kSimpleTestDriver_RequestValue_Name:
        if (message.isResponse())
          paramsClass = SimpleTestDriver_RequestValue_ResponseParams;
        break;
      case kSimpleTestDriver_RequestQuit_Name:
        if (message.isResponse())
          paramsClass = SimpleTestDriver_RequestQuit_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SimpleTestDriver = {
    name: 'IPC.mojom.SimpleTestDriver',
    kVersion: 0,
    ptrClass: SimpleTestDriverPtr,
    proxyClass: SimpleTestDriverProxy,
    stubClass: SimpleTestDriverStub,
    validateRequest: validateSimpleTestDriverRequest,
    validateResponse: validateSimpleTestDriverResponse,
  };
  SimpleTestDriverStub.prototype.validator = validateSimpleTestDriverRequest;
  SimpleTestDriverProxy.prototype.validator = validateSimpleTestDriverResponse;
  var kSimpleTestClient_RequestValue_Name = 965053099;

  function SimpleTestClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SimpleTestClient,
                                                   handleOrPtrInfo);
  }

  function SimpleTestClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SimpleTestClient, associatedInterfacePtrInfo);
  }

  SimpleTestClientAssociatedPtr.prototype =
      Object.create(SimpleTestClientPtr.prototype);
  SimpleTestClientAssociatedPtr.prototype.constructor =
      SimpleTestClientAssociatedPtr;

  function SimpleTestClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  SimpleTestClientPtr.prototype.requestValue = function() {
    return SimpleTestClientProxy.prototype.requestValue
        .apply(this.ptr.getProxy(), arguments);
  };

  SimpleTestClientProxy.prototype.requestValue = function() {
    var params_ = new SimpleTestClient_RequestValue_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSimpleTestClient_RequestValue_Name,
          codec.align(SimpleTestClient_RequestValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SimpleTestClient_RequestValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SimpleTestClient_RequestValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SimpleTestClientStub(delegate) {
    this.delegate_ = delegate;
  }
  SimpleTestClientStub.prototype.requestValue = function() {
    return this.delegate_ && this.delegate_.requestValue && this.delegate_.requestValue();
  }

  SimpleTestClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SimpleTestClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSimpleTestClient_RequestValue_Name:
      var params = reader.decodeStruct(SimpleTestClient_RequestValue_Params);
      this.requestValue().then(function(response) {
        var responseParams =
            new SimpleTestClient_RequestValue_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kSimpleTestClient_RequestValue_Name,
            codec.align(SimpleTestClient_RequestValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SimpleTestClient_RequestValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSimpleTestClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSimpleTestClient_RequestValue_Name:
        if (message.expectsResponse())
          paramsClass = SimpleTestClient_RequestValue_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSimpleTestClientResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSimpleTestClient_RequestValue_Name:
        if (message.isResponse())
          paramsClass = SimpleTestClient_RequestValue_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SimpleTestClient = {
    name: 'IPC.mojom.SimpleTestClient',
    kVersion: 0,
    ptrClass: SimpleTestClientPtr,
    proxyClass: SimpleTestClientProxy,
    stubClass: SimpleTestClientStub,
    validateRequest: validateSimpleTestClientRequest,
    validateResponse: validateSimpleTestClientResponse,
  };
  SimpleTestClientStub.prototype.validator = validateSimpleTestClientRequest;
  SimpleTestClientProxy.prototype.validator = validateSimpleTestClientResponse;
  var kPingReceiver_Ping_Name = 367319129;

  function PingReceiverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PingReceiver,
                                                   handleOrPtrInfo);
  }

  function PingReceiverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PingReceiver, associatedInterfacePtrInfo);
  }

  PingReceiverAssociatedPtr.prototype =
      Object.create(PingReceiverPtr.prototype);
  PingReceiverAssociatedPtr.prototype.constructor =
      PingReceiverAssociatedPtr;

  function PingReceiverProxy(receiver) {
    this.receiver_ = receiver;
  }
  PingReceiverPtr.prototype.ping = function() {
    return PingReceiverProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  PingReceiverProxy.prototype.ping = function() {
    var params_ = new PingReceiver_Ping_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPingReceiver_Ping_Name,
          codec.align(PingReceiver_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PingReceiver_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PingReceiver_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PingReceiverStub(delegate) {
    this.delegate_ = delegate;
  }
  PingReceiverStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }

  PingReceiverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PingReceiverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPingReceiver_Ping_Name:
      var params = reader.decodeStruct(PingReceiver_Ping_Params);
      this.ping().then(function(response) {
        var responseParams =
            new PingReceiver_Ping_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPingReceiver_Ping_Name,
            codec.align(PingReceiver_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PingReceiver_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePingReceiverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPingReceiver_Ping_Name:
        if (message.expectsResponse())
          paramsClass = PingReceiver_Ping_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePingReceiverResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPingReceiver_Ping_Name:
        if (message.isResponse())
          paramsClass = PingReceiver_Ping_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PingReceiver = {
    name: 'IPC.mojom.PingReceiver',
    kVersion: 0,
    ptrClass: PingReceiverPtr,
    proxyClass: PingReceiverProxy,
    stubClass: PingReceiverStub,
    validateRequest: validatePingReceiverRequest,
    validateResponse: validatePingReceiverResponse,
  };
  PingReceiverStub.prototype.validator = validatePingReceiverRequest;
  PingReceiverProxy.prototype.validator = validatePingReceiverResponse;
  var kTestStructPasser_Pass_Name = 405048767;

  function TestStructPasserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestStructPasser,
                                                   handleOrPtrInfo);
  }

  function TestStructPasserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestStructPasser, associatedInterfacePtrInfo);
  }

  TestStructPasserAssociatedPtr.prototype =
      Object.create(TestStructPasserPtr.prototype);
  TestStructPasserAssociatedPtr.prototype.constructor =
      TestStructPasserAssociatedPtr;

  function TestStructPasserProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestStructPasserPtr.prototype.pass = function() {
    return TestStructPasserProxy.prototype.pass
        .apply(this.ptr.getProxy(), arguments);
  };

  TestStructPasserProxy.prototype.pass = function(s) {
    var params_ = new TestStructPasser_Pass_Params();
    params_.s = s;
    var builder = new codec.MessageV0Builder(
        kTestStructPasser_Pass_Name,
        codec.align(TestStructPasser_Pass_Params.encodedSize));
    builder.encodeStruct(TestStructPasser_Pass_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestStructPasserStub(delegate) {
    this.delegate_ = delegate;
  }
  TestStructPasserStub.prototype.pass = function(s) {
    return this.delegate_ && this.delegate_.pass && this.delegate_.pass(s);
  }

  TestStructPasserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestStructPasser_Pass_Name:
      var params = reader.decodeStruct(TestStructPasser_Pass_Params);
      this.pass(params.s);
      return true;
    default:
      return false;
    }
  };

  TestStructPasserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestStructPasserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestStructPasser_Pass_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestStructPasser_Pass_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestStructPasserResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestStructPasser = {
    name: 'IPC.mojom.TestStructPasser',
    kVersion: 0,
    ptrClass: TestStructPasserPtr,
    proxyClass: TestStructPasserProxy,
    stubClass: TestStructPasserStub,
    validateRequest: validateTestStructPasserRequest,
    validateResponse: null,
  };
  TestStructPasserStub.prototype.validator = validateTestStructPasserRequest;
  TestStructPasserProxy.prototype.validator = null;
  var kIndirectTestDriver_GetPingReceiver_Name = 679516177;

  function IndirectTestDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IndirectTestDriver,
                                                   handleOrPtrInfo);
  }

  function IndirectTestDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IndirectTestDriver, associatedInterfacePtrInfo);
  }

  IndirectTestDriverAssociatedPtr.prototype =
      Object.create(IndirectTestDriverPtr.prototype);
  IndirectTestDriverAssociatedPtr.prototype.constructor =
      IndirectTestDriverAssociatedPtr;

  function IndirectTestDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  IndirectTestDriverPtr.prototype.getPingReceiver = function() {
    return IndirectTestDriverProxy.prototype.getPingReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  IndirectTestDriverProxy.prototype.getPingReceiver = function(receiver) {
    var params_ = new IndirectTestDriver_GetPingReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kIndirectTestDriver_GetPingReceiver_Name,
        codec.align(IndirectTestDriver_GetPingReceiver_Params.encodedSize));
    builder.setPayload(IndirectTestDriver_GetPingReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function IndirectTestDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  IndirectTestDriverStub.prototype.getPingReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.getPingReceiver && this.delegate_.getPingReceiver(receiver);
  }

  IndirectTestDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIndirectTestDriver_GetPingReceiver_Name:
      var params = reader.decodeStruct(IndirectTestDriver_GetPingReceiver_Params);
      this.getPingReceiver(params.receiver);
      return true;
    default:
      return false;
    }
  };

  IndirectTestDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateIndirectTestDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIndirectTestDriver_GetPingReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IndirectTestDriver_GetPingReceiver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIndirectTestDriverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var IndirectTestDriver = {
    name: 'IPC.mojom.IndirectTestDriver',
    kVersion: 0,
    ptrClass: IndirectTestDriverPtr,
    proxyClass: IndirectTestDriverProxy,
    stubClass: IndirectTestDriverStub,
    validateRequest: validateIndirectTestDriverRequest,
    validateResponse: null,
  };
  IndirectTestDriverStub.prototype.validator = validateIndirectTestDriverRequest;
  IndirectTestDriverProxy.prototype.validator = null;
  var kReflector_Ping_Name = 445739392;
  var kReflector_SyncPing_Name = 799672810;
  var kReflector_Quit_Name = 1468921172;

  function ReflectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Reflector,
                                                   handleOrPtrInfo);
  }

  function ReflectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Reflector, associatedInterfacePtrInfo);
  }

  ReflectorAssociatedPtr.prototype =
      Object.create(ReflectorPtr.prototype);
  ReflectorAssociatedPtr.prototype.constructor =
      ReflectorAssociatedPtr;

  function ReflectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  ReflectorPtr.prototype.ping = function() {
    return ReflectorProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  ReflectorProxy.prototype.ping = function(value) {
    var params_ = new Reflector_Ping_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kReflector_Ping_Name,
          codec.align(Reflector_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Reflector_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Reflector_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ReflectorPtr.prototype.syncPing = function() {
    return ReflectorProxy.prototype.syncPing
        .apply(this.ptr.getProxy(), arguments);
  };

  ReflectorProxy.prototype.syncPing = function(value) {
    var params_ = new Reflector_SyncPing_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kReflector_SyncPing_Name,
          codec.align(Reflector_SyncPing_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Reflector_SyncPing_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Reflector_SyncPing_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ReflectorPtr.prototype.quit = function() {
    return ReflectorProxy.prototype.quit
        .apply(this.ptr.getProxy(), arguments);
  };

  ReflectorProxy.prototype.quit = function() {
    var params_ = new Reflector_Quit_Params();
    var builder = new codec.MessageV0Builder(
        kReflector_Quit_Name,
        codec.align(Reflector_Quit_Params.encodedSize));
    builder.encodeStruct(Reflector_Quit_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ReflectorStub(delegate) {
    this.delegate_ = delegate;
  }
  ReflectorStub.prototype.ping = function(value) {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping(value);
  }
  ReflectorStub.prototype.syncPing = function(value) {
    return this.delegate_ && this.delegate_.syncPing && this.delegate_.syncPing(value);
  }
  ReflectorStub.prototype.quit = function() {
    return this.delegate_ && this.delegate_.quit && this.delegate_.quit();
  }

  ReflectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kReflector_Quit_Name:
      var params = reader.decodeStruct(Reflector_Quit_Params);
      this.quit();
      return true;
    default:
      return false;
    }
  };

  ReflectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kReflector_Ping_Name:
      var params = reader.decodeStruct(Reflector_Ping_Params);
      this.ping(params.value).then(function(response) {
        var responseParams =
            new Reflector_Ping_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kReflector_Ping_Name,
            codec.align(Reflector_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Reflector_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kReflector_SyncPing_Name:
      var params = reader.decodeStruct(Reflector_SyncPing_Params);
      this.syncPing(params.value).then(function(response) {
        var responseParams =
            new Reflector_SyncPing_ResponseParams();
        responseParams.response = response.response;
        var builder = new codec.MessageV1Builder(
            kReflector_SyncPing_Name,
            codec.align(Reflector_SyncPing_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Reflector_SyncPing_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateReflectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kReflector_Ping_Name:
        if (message.expectsResponse())
          paramsClass = Reflector_Ping_Params;
      break;
      case kReflector_SyncPing_Name:
        if (message.expectsResponse())
          paramsClass = Reflector_SyncPing_Params;
      break;
      case kReflector_Quit_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Reflector_Quit_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateReflectorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kReflector_Ping_Name:
        if (message.isResponse())
          paramsClass = Reflector_Ping_ResponseParams;
        break;
      case kReflector_SyncPing_Name:
        if (message.isResponse())
          paramsClass = Reflector_SyncPing_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Reflector = {
    name: 'IPC.mojom.Reflector',
    kVersion: 0,
    ptrClass: ReflectorPtr,
    proxyClass: ReflectorProxy,
    stubClass: ReflectorStub,
    validateRequest: validateReflectorRequest,
    validateResponse: validateReflectorResponse,
  };
  ReflectorStub.prototype.validator = validateReflectorRequest;
  ReflectorProxy.prototype.validator = validateReflectorResponse;
  var kAssociatedInterfaceVendor_GetTestInterface_Name = 1896590513;

  function AssociatedInterfaceVendorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AssociatedInterfaceVendor,
                                                   handleOrPtrInfo);
  }

  function AssociatedInterfaceVendorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AssociatedInterfaceVendor, associatedInterfacePtrInfo);
  }

  AssociatedInterfaceVendorAssociatedPtr.prototype =
      Object.create(AssociatedInterfaceVendorPtr.prototype);
  AssociatedInterfaceVendorAssociatedPtr.prototype.constructor =
      AssociatedInterfaceVendorAssociatedPtr;

  function AssociatedInterfaceVendorProxy(receiver) {
    this.receiver_ = receiver;
  }
  AssociatedInterfaceVendorPtr.prototype.getTestInterface = function() {
    return AssociatedInterfaceVendorProxy.prototype.getTestInterface
        .apply(this.ptr.getProxy(), arguments);
  };

  AssociatedInterfaceVendorProxy.prototype.getTestInterface = function(receiver) {
    var params_ = new AssociatedInterfaceVendor_GetTestInterface_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV2Builder(
        kAssociatedInterfaceVendor_GetTestInterface_Name,
        codec.align(AssociatedInterfaceVendor_GetTestInterface_Params.encodedSize));
    builder.setPayload(AssociatedInterfaceVendor_GetTestInterface_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AssociatedInterfaceVendorStub(delegate) {
    this.delegate_ = delegate;
  }
  AssociatedInterfaceVendorStub.prototype.getTestInterface = function(receiver) {
    return this.delegate_ && this.delegate_.getTestInterface && this.delegate_.getTestInterface(receiver);
  }

  AssociatedInterfaceVendorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAssociatedInterfaceVendor_GetTestInterface_Name:
      var params = reader.decodeStruct(AssociatedInterfaceVendor_GetTestInterface_Params);
      this.getTestInterface(params.receiver);
      return true;
    default:
      return false;
    }
  };

  AssociatedInterfaceVendorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAssociatedInterfaceVendorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAssociatedInterfaceVendor_GetTestInterface_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AssociatedInterfaceVendor_GetTestInterface_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAssociatedInterfaceVendorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AssociatedInterfaceVendor = {
    name: 'IPC.mojom.AssociatedInterfaceVendor',
    kVersion: 0,
    ptrClass: AssociatedInterfaceVendorPtr,
    proxyClass: AssociatedInterfaceVendorProxy,
    stubClass: AssociatedInterfaceVendorStub,
    validateRequest: validateAssociatedInterfaceVendorRequest,
    validateResponse: null,
  };
  AssociatedInterfaceVendorStub.prototype.validator = validateAssociatedInterfaceVendorRequest;
  AssociatedInterfaceVendorProxy.prototype.validator = null;
  var kInterfacePassingTestDriver_Init_Name = 567993236;
  var kInterfacePassingTestDriver_GetPingReceiver_Name = 1463317246;
  var kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name = 997978214;
  var kInterfacePassingTestDriver_Quit_Name = 1625756592;

  function InterfacePassingTestDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfacePassingTestDriver,
                                                   handleOrPtrInfo);
  }

  function InterfacePassingTestDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfacePassingTestDriver, associatedInterfacePtrInfo);
  }

  InterfacePassingTestDriverAssociatedPtr.prototype =
      Object.create(InterfacePassingTestDriverPtr.prototype);
  InterfacePassingTestDriverAssociatedPtr.prototype.constructor =
      InterfacePassingTestDriverAssociatedPtr;

  function InterfacePassingTestDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  InterfacePassingTestDriverPtr.prototype.init = function() {
    return InterfacePassingTestDriverProxy.prototype.init
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassingTestDriverProxy.prototype.init = function() {
    var params_ = new InterfacePassingTestDriver_Init_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfacePassingTestDriver_Init_Name,
          codec.align(InterfacePassingTestDriver_Init_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfacePassingTestDriver_Init_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassingTestDriver_Init_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfacePassingTestDriverPtr.prototype.getPingReceiver = function() {
    return InterfacePassingTestDriverProxy.prototype.getPingReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassingTestDriverProxy.prototype.getPingReceiver = function(receiver) {
    var params_ = new InterfacePassingTestDriver_GetPingReceiver_Params();
    params_.receiver = receiver;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfacePassingTestDriver_GetPingReceiver_Name,
          codec.align(InterfacePassingTestDriver_GetPingReceiver_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfacePassingTestDriver_GetPingReceiver_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassingTestDriver_GetPingReceiver_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfacePassingTestDriverPtr.prototype.getAssociatedPingReceiver = function() {
    return InterfacePassingTestDriverProxy.prototype.getAssociatedPingReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassingTestDriverProxy.prototype.getAssociatedPingReceiver = function(receiver) {
    var params_ = new InterfacePassingTestDriver_GetAssociatedPingReceiver_Params();
    params_.receiver = receiver;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name,
          codec.align(InterfacePassingTestDriver_GetAssociatedPingReceiver_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(InterfacePassingTestDriver_GetAssociatedPingReceiver_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfacePassingTestDriverPtr.prototype.quit = function() {
    return InterfacePassingTestDriverProxy.prototype.quit
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfacePassingTestDriverProxy.prototype.quit = function() {
    var params_ = new InterfacePassingTestDriver_Quit_Params();
    var builder = new codec.MessageV0Builder(
        kInterfacePassingTestDriver_Quit_Name,
        codec.align(InterfacePassingTestDriver_Quit_Params.encodedSize));
    builder.encodeStruct(InterfacePassingTestDriver_Quit_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function InterfacePassingTestDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  InterfacePassingTestDriverStub.prototype.init = function() {
    return this.delegate_ && this.delegate_.init && this.delegate_.init();
  }
  InterfacePassingTestDriverStub.prototype.getPingReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.getPingReceiver && this.delegate_.getPingReceiver(receiver);
  }
  InterfacePassingTestDriverStub.prototype.getAssociatedPingReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.getAssociatedPingReceiver && this.delegate_.getAssociatedPingReceiver(receiver);
  }
  InterfacePassingTestDriverStub.prototype.quit = function() {
    return this.delegate_ && this.delegate_.quit && this.delegate_.quit();
  }

  InterfacePassingTestDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterfacePassingTestDriver_Quit_Name:
      var params = reader.decodeStruct(InterfacePassingTestDriver_Quit_Params);
      this.quit();
      return true;
    default:
      return false;
    }
  };

  InterfacePassingTestDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterfacePassingTestDriver_Init_Name:
      var params = reader.decodeStruct(InterfacePassingTestDriver_Init_Params);
      this.init().then(function(response) {
        var responseParams =
            new InterfacePassingTestDriver_Init_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInterfacePassingTestDriver_Init_Name,
            codec.align(InterfacePassingTestDriver_Init_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfacePassingTestDriver_Init_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfacePassingTestDriver_GetPingReceiver_Name:
      var params = reader.decodeStruct(InterfacePassingTestDriver_GetPingReceiver_Params);
      this.getPingReceiver(params.receiver).then(function(response) {
        var responseParams =
            new InterfacePassingTestDriver_GetPingReceiver_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInterfacePassingTestDriver_GetPingReceiver_Name,
            codec.align(InterfacePassingTestDriver_GetPingReceiver_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfacePassingTestDriver_GetPingReceiver_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name:
      var params = reader.decodeStruct(InterfacePassingTestDriver_GetAssociatedPingReceiver_Params);
      this.getAssociatedPingReceiver(params.receiver).then(function(response) {
        var responseParams =
            new InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams();
        var builder = new codec.MessageV2Builder(
            kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name,
            codec.align(InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInterfacePassingTestDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInterfacePassingTestDriver_Init_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassingTestDriver_Init_Params;
      break;
      case kInterfacePassingTestDriver_GetPingReceiver_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassingTestDriver_GetPingReceiver_Params;
      break;
      case kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name:
        if (message.expectsResponse())
          paramsClass = InterfacePassingTestDriver_GetAssociatedPingReceiver_Params;
      break;
      case kInterfacePassingTestDriver_Quit_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = InterfacePassingTestDriver_Quit_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInterfacePassingTestDriverResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInterfacePassingTestDriver_Init_Name:
        if (message.isResponse())
          paramsClass = InterfacePassingTestDriver_Init_ResponseParams;
        break;
      case kInterfacePassingTestDriver_GetPingReceiver_Name:
        if (message.isResponse())
          paramsClass = InterfacePassingTestDriver_GetPingReceiver_ResponseParams;
        break;
      case kInterfacePassingTestDriver_GetAssociatedPingReceiver_Name:
        if (message.isResponse())
          paramsClass = InterfacePassingTestDriver_GetAssociatedPingReceiver_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var InterfacePassingTestDriver = {
    name: 'IPC.mojom.InterfacePassingTestDriver',
    kVersion: 0,
    ptrClass: InterfacePassingTestDriverPtr,
    proxyClass: InterfacePassingTestDriverProxy,
    stubClass: InterfacePassingTestDriverStub,
    validateRequest: validateInterfacePassingTestDriverRequest,
    validateResponse: validateInterfacePassingTestDriverResponse,
  };
  InterfacePassingTestDriverStub.prototype.validator = validateInterfacePassingTestDriverRequest;
  InterfacePassingTestDriverProxy.prototype.validator = validateInterfacePassingTestDriverResponse;
  exports.TestStruct = TestStruct;
  exports.SimpleTestDriver = SimpleTestDriver;
  exports.SimpleTestDriverPtr = SimpleTestDriverPtr;
  exports.SimpleTestDriverAssociatedPtr = SimpleTestDriverAssociatedPtr;
  exports.SimpleTestClient = SimpleTestClient;
  exports.SimpleTestClientPtr = SimpleTestClientPtr;
  exports.SimpleTestClientAssociatedPtr = SimpleTestClientAssociatedPtr;
  exports.PingReceiver = PingReceiver;
  exports.PingReceiverPtr = PingReceiverPtr;
  exports.PingReceiverAssociatedPtr = PingReceiverAssociatedPtr;
  exports.TestStructPasser = TestStructPasser;
  exports.TestStructPasserPtr = TestStructPasserPtr;
  exports.TestStructPasserAssociatedPtr = TestStructPasserAssociatedPtr;
  exports.IndirectTestDriver = IndirectTestDriver;
  exports.IndirectTestDriverPtr = IndirectTestDriverPtr;
  exports.IndirectTestDriverAssociatedPtr = IndirectTestDriverAssociatedPtr;
  exports.Reflector = Reflector;
  exports.ReflectorPtr = ReflectorPtr;
  exports.ReflectorAssociatedPtr = ReflectorAssociatedPtr;
  exports.AssociatedInterfaceVendor = AssociatedInterfaceVendor;
  exports.AssociatedInterfaceVendorPtr = AssociatedInterfaceVendorPtr;
  exports.AssociatedInterfaceVendorAssociatedPtr = AssociatedInterfaceVendorAssociatedPtr;
  exports.InterfacePassingTestDriver = InterfacePassingTestDriver;
  exports.InterfacePassingTestDriverPtr = InterfacePassingTestDriverPtr;
  exports.InterfacePassingTestDriverAssociatedPtr = InterfacePassingTestDriverAssociatedPtr;
})();