// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/power/android_power_config.proto

#include "protos/perfetto/config/power/android_power_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class AndroidPowerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidPowerConfig> _instance;
} _AndroidPowerConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_AndroidPowerConfig_default_instance_;
    new (ptr) ::perfetto::protos::AndroidPowerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::AndroidPowerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {
bool AndroidPowerConfig_BatteryCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidPowerConfig_BatteryCounters_strings[5] = {};

static const char AndroidPowerConfig_BatteryCounters_names[] =
  "BATTERY_COUNTER_CAPACITY_PERCENT"
  "BATTERY_COUNTER_CHARGE"
  "BATTERY_COUNTER_CURRENT"
  "BATTERY_COUNTER_CURRENT_AVG"
  "BATTERY_COUNTER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidPowerConfig_BatteryCounters_entries[] = {
  { {AndroidPowerConfig_BatteryCounters_names + 0, 32}, 2 },
  { {AndroidPowerConfig_BatteryCounters_names + 32, 22}, 1 },
  { {AndroidPowerConfig_BatteryCounters_names + 54, 23}, 3 },
  { {AndroidPowerConfig_BatteryCounters_names + 77, 27}, 4 },
  { {AndroidPowerConfig_BatteryCounters_names + 104, 27}, 0 },
};

static const int AndroidPowerConfig_BatteryCounters_entries_by_number[] = {
  4, // 0 -> BATTERY_COUNTER_UNSPECIFIED
  1, // 1 -> BATTERY_COUNTER_CHARGE
  0, // 2 -> BATTERY_COUNTER_CAPACITY_PERCENT
  2, // 3 -> BATTERY_COUNTER_CURRENT
  3, // 4 -> BATTERY_COUNTER_CURRENT_AVG
};

const std::string& AndroidPowerConfig_BatteryCounters_Name(
    AndroidPowerConfig_BatteryCounters value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidPowerConfig_BatteryCounters_entries,
          AndroidPowerConfig_BatteryCounters_entries_by_number,
          5, AndroidPowerConfig_BatteryCounters_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidPowerConfig_BatteryCounters_entries,
      AndroidPowerConfig_BatteryCounters_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidPowerConfig_BatteryCounters_strings[idx].get();
}
bool AndroidPowerConfig_BatteryCounters_Parse(
    const std::string& name, AndroidPowerConfig_BatteryCounters* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidPowerConfig_BatteryCounters_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AndroidPowerConfig_BatteryCounters>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_UNSPECIFIED;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CHARGE;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CAPACITY_PERCENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT_AVG;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MIN;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MAX;
constexpr int AndroidPowerConfig::BatteryCounters_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AndroidPowerConfig::InitAsDefaultInstance() {
}
class AndroidPowerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidPowerConfig>()._has_bits_);
  static void set_has_battery_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collect_power_rails(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidPowerConfig::AndroidPowerConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.AndroidPowerConfig)
}
AndroidPowerConfig::AndroidPowerConfig(const AndroidPowerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      battery_counters_(from.battery_counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_poll_ms_, &from.battery_poll_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_power_rails_) -
    reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidPowerConfig)
}

void AndroidPowerConfig::SharedCtor() {
  ::memset(&battery_poll_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_power_rails_) -
      reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
}

AndroidPowerConfig::~AndroidPowerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidPowerConfig)
  SharedDtor();
}

void AndroidPowerConfig::SharedDtor() {
}

void AndroidPowerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidPowerConfig& AndroidPowerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AndroidPowerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidPowerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_counters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&battery_poll_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collect_power_rails_) -
        reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidPowerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battery_poll_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battery_poll_ms(&has_bits);
          battery_poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(val))) {
              add_battery_counters(static_cast<::perfetto::protos::AndroidPowerConfig_BatteryCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_battery_counters(), ptr, ctx, ::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool collect_power_rails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_collect_power_rails(&has_bits);
          collect_power_rails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidPowerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.AndroidPowerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battery_poll_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_battery_poll_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_poll_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(value)) {
            add_battery_counters(static_cast< ::perfetto::protos::AndroidPowerConfig_BatteryCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid,
                 &unknown_fields_stream,
                 this->mutable_battery_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool collect_power_rails = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_collect_power_rails(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collect_power_rails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.AndroidPowerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.AndroidPowerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidPowerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.AndroidPowerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battery_poll_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->battery_poll_ms(), output);
  }

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  for (int i = 0, n = this->battery_counters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->battery_counters(i), output);
  }

  // optional bool collect_power_rails = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->collect_power_rails(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.AndroidPowerConfig)
}

size_t AndroidPowerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidPowerConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->battery_counters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->battery_counters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 battery_poll_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->battery_poll_ms());
    }

    // optional bool collect_power_rails = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidPowerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidPowerConfig*>(
      &from));
}

void AndroidPowerConfig::MergeFrom(const AndroidPowerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidPowerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_counters_.MergeFrom(from.battery_counters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      battery_poll_ms_ = from.battery_poll_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      collect_power_rails_ = from.collect_power_rails_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AndroidPowerConfig::CopyFrom(const AndroidPowerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidPowerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidPowerConfig::IsInitialized() const {
  return true;
}

void AndroidPowerConfig::InternalSwap(AndroidPowerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battery_counters_.InternalSwap(&other->battery_counters_);
  swap(battery_poll_ms_, other->battery_poll_ms_);
  swap(collect_power_rails_, other->collect_power_rails_);
}

std::string AndroidPowerConfig::GetTypeName() const {
  return "perfetto.protos.AndroidPowerConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidPowerConfig* Arena::CreateMaybeMessage< ::perfetto::protos::AndroidPowerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::AndroidPowerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
