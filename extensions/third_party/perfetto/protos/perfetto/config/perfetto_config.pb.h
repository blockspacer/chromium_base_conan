// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/perfetto_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[48]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class AndroidLogConfig;
class AndroidLogConfigDefaultTypeInternal;
extern AndroidLogConfigDefaultTypeInternal _AndroidLogConfig_default_instance_;
class AndroidPolledStateConfig;
class AndroidPolledStateConfigDefaultTypeInternal;
extern AndroidPolledStateConfigDefaultTypeInternal _AndroidPolledStateConfig_default_instance_;
class AndroidPowerConfig;
class AndroidPowerConfigDefaultTypeInternal;
extern AndroidPowerConfigDefaultTypeInternal _AndroidPowerConfig_default_instance_;
class ChromeConfig;
class ChromeConfigDefaultTypeInternal;
extern ChromeConfigDefaultTypeInternal _ChromeConfig_default_instance_;
class ConsoleConfig;
class ConsoleConfigDefaultTypeInternal;
extern ConsoleConfigDefaultTypeInternal _ConsoleConfig_default_instance_;
class DataSourceConfig;
class DataSourceConfigDefaultTypeInternal;
extern DataSourceConfigDefaultTypeInternal _DataSourceConfig_default_instance_;
class DataSourceDescriptor;
class DataSourceDescriptorDefaultTypeInternal;
extern DataSourceDescriptorDefaultTypeInternal _DataSourceDescriptor_default_instance_;
class FtraceConfig;
class FtraceConfigDefaultTypeInternal;
extern FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
class FtraceConfig_CompactSchedConfig;
class FtraceConfig_CompactSchedConfigDefaultTypeInternal;
extern FtraceConfig_CompactSchedConfigDefaultTypeInternal _FtraceConfig_CompactSchedConfig_default_instance_;
class GpuCounterConfig;
class GpuCounterConfigDefaultTypeInternal;
extern GpuCounterConfigDefaultTypeInternal _GpuCounterConfig_default_instance_;
class GpuCounterDescriptor;
class GpuCounterDescriptorDefaultTypeInternal;
extern GpuCounterDescriptorDefaultTypeInternal _GpuCounterDescriptor_default_instance_;
class GpuCounterDescriptor_GpuCounterBlock;
class GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
class GpuCounterDescriptor_GpuCounterSpec;
class GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
class HeapprofdConfig;
class HeapprofdConfigDefaultTypeInternal;
extern HeapprofdConfigDefaultTypeInternal _HeapprofdConfig_default_instance_;
class HeapprofdConfig_ContinuousDumpConfig;
class HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal;
extern HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
class InodeFileConfig;
class InodeFileConfigDefaultTypeInternal;
extern InodeFileConfigDefaultTypeInternal _InodeFileConfig_default_instance_;
class InodeFileConfig_MountPointMappingEntry;
class InodeFileConfig_MountPointMappingEntryDefaultTypeInternal;
extern InodeFileConfig_MountPointMappingEntryDefaultTypeInternal _InodeFileConfig_MountPointMappingEntry_default_instance_;
class InterceptorConfig;
class InterceptorConfigDefaultTypeInternal;
extern InterceptorConfigDefaultTypeInternal _InterceptorConfig_default_instance_;
class JavaHprofConfig;
class JavaHprofConfigDefaultTypeInternal;
extern JavaHprofConfigDefaultTypeInternal _JavaHprofConfig_default_instance_;
class JavaHprofConfig_ContinuousDumpConfig;
class JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal;
extern JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal _JavaHprofConfig_ContinuousDumpConfig_default_instance_;
class PackagesListConfig;
class PackagesListConfigDefaultTypeInternal;
extern PackagesListConfigDefaultTypeInternal _PackagesListConfig_default_instance_;
class PerfEventConfig;
class PerfEventConfigDefaultTypeInternal;
extern PerfEventConfigDefaultTypeInternal _PerfEventConfig_default_instance_;
class PerfEventConfig_CallstackSampling;
class PerfEventConfig_CallstackSamplingDefaultTypeInternal;
extern PerfEventConfig_CallstackSamplingDefaultTypeInternal _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_Scope;
class PerfEventConfig_ScopeDefaultTypeInternal;
extern PerfEventConfig_ScopeDefaultTypeInternal _PerfEventConfig_Scope_default_instance_;
class PerfEventConfig_Timebase;
class PerfEventConfig_TimebaseDefaultTypeInternal;
extern PerfEventConfig_TimebaseDefaultTypeInternal _PerfEventConfig_Timebase_default_instance_;
class PerfEventConfig_Tracepoint;
class PerfEventConfig_TracepointDefaultTypeInternal;
extern PerfEventConfig_TracepointDefaultTypeInternal _PerfEventConfig_Tracepoint_default_instance_;
class ProcessStatsConfig;
class ProcessStatsConfigDefaultTypeInternal;
extern ProcessStatsConfigDefaultTypeInternal _ProcessStatsConfig_default_instance_;
class SysStatsConfig;
class SysStatsConfigDefaultTypeInternal;
extern SysStatsConfigDefaultTypeInternal _SysStatsConfig_default_instance_;
class TestConfig;
class TestConfigDefaultTypeInternal;
extern TestConfigDefaultTypeInternal _TestConfig_default_instance_;
class TestConfig_DummyFields;
class TestConfig_DummyFieldsDefaultTypeInternal;
extern TestConfig_DummyFieldsDefaultTypeInternal _TestConfig_DummyFields_default_instance_;
class TraceConfig;
class TraceConfigDefaultTypeInternal;
extern TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
class TraceConfig_BufferConfig;
class TraceConfig_BufferConfigDefaultTypeInternal;
extern TraceConfig_BufferConfigDefaultTypeInternal _TraceConfig_BufferConfig_default_instance_;
class TraceConfig_BuiltinDataSource;
class TraceConfig_BuiltinDataSourceDefaultTypeInternal;
extern TraceConfig_BuiltinDataSourceDefaultTypeInternal _TraceConfig_BuiltinDataSource_default_instance_;
class TraceConfig_DataSource;
class TraceConfig_DataSourceDefaultTypeInternal;
extern TraceConfig_DataSourceDefaultTypeInternal _TraceConfig_DataSource_default_instance_;
class TraceConfig_GuardrailOverrides;
class TraceConfig_GuardrailOverridesDefaultTypeInternal;
extern TraceConfig_GuardrailOverridesDefaultTypeInternal _TraceConfig_GuardrailOverrides_default_instance_;
class TraceConfig_IncidentReportConfig;
class TraceConfig_IncidentReportConfigDefaultTypeInternal;
extern TraceConfig_IncidentReportConfigDefaultTypeInternal _TraceConfig_IncidentReportConfig_default_instance_;
class TraceConfig_IncrementalStateConfig;
class TraceConfig_IncrementalStateConfigDefaultTypeInternal;
extern TraceConfig_IncrementalStateConfigDefaultTypeInternal _TraceConfig_IncrementalStateConfig_default_instance_;
class TraceConfig_ProducerConfig;
class TraceConfig_ProducerConfigDefaultTypeInternal;
extern TraceConfig_ProducerConfigDefaultTypeInternal _TraceConfig_ProducerConfig_default_instance_;
class TraceConfig_StatsdMetadata;
class TraceConfig_StatsdMetadataDefaultTypeInternal;
extern TraceConfig_StatsdMetadataDefaultTypeInternal _TraceConfig_StatsdMetadata_default_instance_;
class TraceConfig_TriggerConfig;
class TraceConfig_TriggerConfigDefaultTypeInternal;
extern TraceConfig_TriggerConfigDefaultTypeInternal _TraceConfig_TriggerConfig_default_instance_;
class TraceConfig_TriggerConfig_Trigger;
class TraceConfig_TriggerConfig_TriggerDefaultTypeInternal;
extern TraceConfig_TriggerConfig_TriggerDefaultTypeInternal _TraceConfig_TriggerConfig_Trigger_default_instance_;
class TracingServiceState;
class TracingServiceStateDefaultTypeInternal;
extern TracingServiceStateDefaultTypeInternal _TracingServiceState_default_instance_;
class TracingServiceState_DataSource;
class TracingServiceState_DataSourceDefaultTypeInternal;
extern TracingServiceState_DataSourceDefaultTypeInternal _TracingServiceState_DataSource_default_instance_;
class TracingServiceState_Producer;
class TracingServiceState_ProducerDefaultTypeInternal;
extern TracingServiceState_ProducerDefaultTypeInternal _TracingServiceState_Producer_default_instance_;
class TrackEventCategory;
class TrackEventCategoryDefaultTypeInternal;
extern TrackEventCategoryDefaultTypeInternal _TrackEventCategory_default_instance_;
class TrackEventConfig;
class TrackEventConfigDefaultTypeInternal;
extern TrackEventConfigDefaultTypeInternal _TrackEventConfig_default_instance_;
class TrackEventDescriptor;
class TrackEventDescriptorDefaultTypeInternal;
extern TrackEventDescriptorDefaultTypeInternal _TrackEventDescriptor_default_instance_;
class VulkanMemoryConfig;
class VulkanMemoryConfigDefaultTypeInternal;
extern VulkanMemoryConfigDefaultTypeInternal _VulkanMemoryConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::AndroidLogConfig* Arena::CreateMaybeMessage<::perfetto::protos::AndroidLogConfig>(Arena*);
template<> ::perfetto::protos::AndroidPolledStateConfig* Arena::CreateMaybeMessage<::perfetto::protos::AndroidPolledStateConfig>(Arena*);
template<> ::perfetto::protos::AndroidPowerConfig* Arena::CreateMaybeMessage<::perfetto::protos::AndroidPowerConfig>(Arena*);
template<> ::perfetto::protos::ChromeConfig* Arena::CreateMaybeMessage<::perfetto::protos::ChromeConfig>(Arena*);
template<> ::perfetto::protos::ConsoleConfig* Arena::CreateMaybeMessage<::perfetto::protos::ConsoleConfig>(Arena*);
template<> ::perfetto::protos::DataSourceConfig* Arena::CreateMaybeMessage<::perfetto::protos::DataSourceConfig>(Arena*);
template<> ::perfetto::protos::DataSourceDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::DataSourceDescriptor>(Arena*);
template<> ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig>(Arena*);
template<> ::perfetto::protos::FtraceConfig_CompactSchedConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(Arena*);
template<> ::perfetto::protos::GpuCounterConfig* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterConfig>(Arena*);
template<> ::perfetto::protos::GpuCounterDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor>(Arena*);
template<> ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>(Arena*);
template<> ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>(Arena*);
template<> ::perfetto::protos::HeapprofdConfig* Arena::CreateMaybeMessage<::perfetto::protos::HeapprofdConfig>(Arena*);
template<> ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage<::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig>(Arena*);
template<> ::perfetto::protos::InodeFileConfig* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileConfig>(Arena*);
template<> ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>(Arena*);
template<> ::perfetto::protos::InterceptorConfig* Arena::CreateMaybeMessage<::perfetto::protos::InterceptorConfig>(Arena*);
template<> ::perfetto::protos::JavaHprofConfig* Arena::CreateMaybeMessage<::perfetto::protos::JavaHprofConfig>(Arena*);
template<> ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage<::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig>(Arena*);
template<> ::perfetto::protos::PackagesListConfig* Arena::CreateMaybeMessage<::perfetto::protos::PackagesListConfig>(Arena*);
template<> ::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_Timebase* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Timebase>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_Tracepoint* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Tracepoint>(Arena*);
template<> ::perfetto::protos::ProcessStatsConfig* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStatsConfig>(Arena*);
template<> ::perfetto::protos::SysStatsConfig* Arena::CreateMaybeMessage<::perfetto::protos::SysStatsConfig>(Arena*);
template<> ::perfetto::protos::TestConfig* Arena::CreateMaybeMessage<::perfetto::protos::TestConfig>(Arena*);
template<> ::perfetto::protos::TestConfig_DummyFields* Arena::CreateMaybeMessage<::perfetto::protos::TestConfig_DummyFields>(Arena*);
template<> ::perfetto::protos::TraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_BufferConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_BufferConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_BuiltinDataSource* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_BuiltinDataSource>(Arena*);
template<> ::perfetto::protos::TraceConfig_DataSource* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_DataSource>(Arena*);
template<> ::perfetto::protos::TraceConfig_GuardrailOverrides* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_GuardrailOverrides>(Arena*);
template<> ::perfetto::protos::TraceConfig_IncidentReportConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_IncidentReportConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_IncrementalStateConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_IncrementalStateConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_ProducerConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_ProducerConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_StatsdMetadata* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_StatsdMetadata>(Arena*);
template<> ::perfetto::protos::TraceConfig_TriggerConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig>(Arena*);
template<> ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>(Arena*);
template<> ::perfetto::protos::TracingServiceState* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState>(Arena*);
template<> ::perfetto::protos::TracingServiceState_DataSource* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState_DataSource>(Arena*);
template<> ::perfetto::protos::TracingServiceState_Producer* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState_Producer>(Arena*);
template<> ::perfetto::protos::TrackEventCategory* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventCategory>(Arena*);
template<> ::perfetto::protos::TrackEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventConfig>(Arena*);
template<> ::perfetto::protos::TrackEventDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventDescriptor>(Arena*);
template<> ::perfetto::protos::VulkanMemoryConfig* Arena::CreateMaybeMessage<::perfetto::protos::VulkanMemoryConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum GpuCounterDescriptor_GpuCounterGroup : int {
  GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED = 0,
  GpuCounterDescriptor_GpuCounterGroup_SYSTEM = 1,
  GpuCounterDescriptor_GpuCounterGroup_VERTICES = 2,
  GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS = 3,
  GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES = 4,
  GpuCounterDescriptor_GpuCounterGroup_MEMORY = 5,
  GpuCounterDescriptor_GpuCounterGroup_COMPUTE = 6
};
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value);
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN = GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX = GpuCounterDescriptor_GpuCounterGroup_COMPUTE;
constexpr int GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE = GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX + 1;

const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(GpuCounterDescriptor_GpuCounterGroup value);
template<typename T>
inline const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuCounterDescriptor_GpuCounterGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuCounterDescriptor_GpuCounterGroup_Name.");
  return GpuCounterDescriptor_GpuCounterGroup_Name(static_cast<GpuCounterDescriptor_GpuCounterGroup>(enum_t_value));
}
bool GpuCounterDescriptor_GpuCounterGroup_Parse(
    const std::string& name, GpuCounterDescriptor_GpuCounterGroup* value);
enum GpuCounterDescriptor_MeasureUnit : int {
  GpuCounterDescriptor_MeasureUnit_NONE = 0,
  GpuCounterDescriptor_MeasureUnit_BIT = 1,
  GpuCounterDescriptor_MeasureUnit_KILOBIT = 2,
  GpuCounterDescriptor_MeasureUnit_MEGABIT = 3,
  GpuCounterDescriptor_MeasureUnit_GIGABIT = 4,
  GpuCounterDescriptor_MeasureUnit_TERABIT = 5,
  GpuCounterDescriptor_MeasureUnit_PETABIT = 6,
  GpuCounterDescriptor_MeasureUnit_BYTE = 7,
  GpuCounterDescriptor_MeasureUnit_KILOBYTE = 8,
  GpuCounterDescriptor_MeasureUnit_MEGABYTE = 9,
  GpuCounterDescriptor_MeasureUnit_GIGABYTE = 10,
  GpuCounterDescriptor_MeasureUnit_TERABYTE = 11,
  GpuCounterDescriptor_MeasureUnit_PETABYTE = 12,
  GpuCounterDescriptor_MeasureUnit_HERTZ = 13,
  GpuCounterDescriptor_MeasureUnit_KILOHERTZ = 14,
  GpuCounterDescriptor_MeasureUnit_MEGAHERTZ = 15,
  GpuCounterDescriptor_MeasureUnit_GIGAHERTZ = 16,
  GpuCounterDescriptor_MeasureUnit_TERAHERTZ = 17,
  GpuCounterDescriptor_MeasureUnit_PETAHERTZ = 18,
  GpuCounterDescriptor_MeasureUnit_NANOSECOND = 19,
  GpuCounterDescriptor_MeasureUnit_MICROSECOND = 20,
  GpuCounterDescriptor_MeasureUnit_MILLISECOND = 21,
  GpuCounterDescriptor_MeasureUnit_SECOND = 22,
  GpuCounterDescriptor_MeasureUnit_MINUTE = 23,
  GpuCounterDescriptor_MeasureUnit_HOUR = 24,
  GpuCounterDescriptor_MeasureUnit_VERTEX = 25,
  GpuCounterDescriptor_MeasureUnit_PIXEL = 26,
  GpuCounterDescriptor_MeasureUnit_TRIANGLE = 27,
  GpuCounterDescriptor_MeasureUnit_PRIMITIVE = 38,
  GpuCounterDescriptor_MeasureUnit_FRAGMENT = 39,
  GpuCounterDescriptor_MeasureUnit_MILLIWATT = 28,
  GpuCounterDescriptor_MeasureUnit_WATT = 29,
  GpuCounterDescriptor_MeasureUnit_KILOWATT = 30,
  GpuCounterDescriptor_MeasureUnit_JOULE = 31,
  GpuCounterDescriptor_MeasureUnit_VOLT = 32,
  GpuCounterDescriptor_MeasureUnit_AMPERE = 33,
  GpuCounterDescriptor_MeasureUnit_CELSIUS = 34,
  GpuCounterDescriptor_MeasureUnit_FAHRENHEIT = 35,
  GpuCounterDescriptor_MeasureUnit_KELVIN = 36,
  GpuCounterDescriptor_MeasureUnit_PERCENT = 37,
  GpuCounterDescriptor_MeasureUnit_INSTRUCTION = 40
};
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value);
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN = GpuCounterDescriptor_MeasureUnit_NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX = GpuCounterDescriptor_MeasureUnit_INSTRUCTION;
constexpr int GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE = GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX + 1;

const std::string& GpuCounterDescriptor_MeasureUnit_Name(GpuCounterDescriptor_MeasureUnit value);
template<typename T>
inline const std::string& GpuCounterDescriptor_MeasureUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuCounterDescriptor_MeasureUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuCounterDescriptor_MeasureUnit_Name.");
  return GpuCounterDescriptor_MeasureUnit_Name(static_cast<GpuCounterDescriptor_MeasureUnit>(enum_t_value));
}
bool GpuCounterDescriptor_MeasureUnit_Parse(
    const std::string& name, GpuCounterDescriptor_MeasureUnit* value);
enum ChromeConfig_ClientPriority : int {
  ChromeConfig_ClientPriority_UNKNOWN = 0,
  ChromeConfig_ClientPriority_BACKGROUND = 1,
  ChromeConfig_ClientPriority_USER_INITIATED = 2
};
bool ChromeConfig_ClientPriority_IsValid(int value);
constexpr ChromeConfig_ClientPriority ChromeConfig_ClientPriority_ClientPriority_MIN = ChromeConfig_ClientPriority_UNKNOWN;
constexpr ChromeConfig_ClientPriority ChromeConfig_ClientPriority_ClientPriority_MAX = ChromeConfig_ClientPriority_USER_INITIATED;
constexpr int ChromeConfig_ClientPriority_ClientPriority_ARRAYSIZE = ChromeConfig_ClientPriority_ClientPriority_MAX + 1;

const std::string& ChromeConfig_ClientPriority_Name(ChromeConfig_ClientPriority value);
template<typename T>
inline const std::string& ChromeConfig_ClientPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeConfig_ClientPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeConfig_ClientPriority_Name.");
  return ChromeConfig_ClientPriority_Name(static_cast<ChromeConfig_ClientPriority>(enum_t_value));
}
bool ChromeConfig_ClientPriority_Parse(
    const std::string& name, ChromeConfig_ClientPriority* value);
enum ConsoleConfig_Output : int {
  ConsoleConfig_Output_OUTPUT_UNSPECIFIED = 0,
  ConsoleConfig_Output_OUTPUT_STDOUT = 1,
  ConsoleConfig_Output_OUTPUT_STDERR = 2
};
bool ConsoleConfig_Output_IsValid(int value);
constexpr ConsoleConfig_Output ConsoleConfig_Output_Output_MIN = ConsoleConfig_Output_OUTPUT_UNSPECIFIED;
constexpr ConsoleConfig_Output ConsoleConfig_Output_Output_MAX = ConsoleConfig_Output_OUTPUT_STDERR;
constexpr int ConsoleConfig_Output_Output_ARRAYSIZE = ConsoleConfig_Output_Output_MAX + 1;

const std::string& ConsoleConfig_Output_Name(ConsoleConfig_Output value);
template<typename T>
inline const std::string& ConsoleConfig_Output_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsoleConfig_Output>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsoleConfig_Output_Name.");
  return ConsoleConfig_Output_Name(static_cast<ConsoleConfig_Output>(enum_t_value));
}
bool ConsoleConfig_Output_Parse(
    const std::string& name, ConsoleConfig_Output* value);
enum AndroidPowerConfig_BatteryCounters : int {
  AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_UNSPECIFIED = 0,
  AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CHARGE = 1,
  AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CAPACITY_PERCENT = 2,
  AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT = 3,
  AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT_AVG = 4
};
bool AndroidPowerConfig_BatteryCounters_IsValid(int value);
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig_BatteryCounters_BatteryCounters_MIN = AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_UNSPECIFIED;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig_BatteryCounters_BatteryCounters_MAX = AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT_AVG;
constexpr int AndroidPowerConfig_BatteryCounters_BatteryCounters_ARRAYSIZE = AndroidPowerConfig_BatteryCounters_BatteryCounters_MAX + 1;

const std::string& AndroidPowerConfig_BatteryCounters_Name(AndroidPowerConfig_BatteryCounters value);
template<typename T>
inline const std::string& AndroidPowerConfig_BatteryCounters_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidPowerConfig_BatteryCounters>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidPowerConfig_BatteryCounters_Name.");
  return AndroidPowerConfig_BatteryCounters_Name(static_cast<AndroidPowerConfig_BatteryCounters>(enum_t_value));
}
bool AndroidPowerConfig_BatteryCounters_Parse(
    const std::string& name, AndroidPowerConfig_BatteryCounters* value);
enum ProcessStatsConfig_Quirks : int {
  ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED = 0,
  ProcessStatsConfig_Quirks_DISABLE_INITIAL_DUMP PROTOBUF_DEPRECATED = 1,
  ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND = 2
};
bool ProcessStatsConfig_Quirks_IsValid(int value);
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig_Quirks_Quirks_MIN = ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig_Quirks_Quirks_MAX = ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND;
constexpr int ProcessStatsConfig_Quirks_Quirks_ARRAYSIZE = ProcessStatsConfig_Quirks_Quirks_MAX + 1;

const std::string& ProcessStatsConfig_Quirks_Name(ProcessStatsConfig_Quirks value);
template<typename T>
inline const std::string& ProcessStatsConfig_Quirks_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessStatsConfig_Quirks>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessStatsConfig_Quirks_Name.");
  return ProcessStatsConfig_Quirks_Name(static_cast<ProcessStatsConfig_Quirks>(enum_t_value));
}
bool ProcessStatsConfig_Quirks_Parse(
    const std::string& name, ProcessStatsConfig_Quirks* value);
enum PerfEventConfig_Counter : int {
  PerfEventConfig_Counter_UNKNOWN_COUNTER = 0,
  PerfEventConfig_Counter_SW_CPU_CLOCK = 1,
  PerfEventConfig_Counter_SW_PAGE_FAULTS = 2,
  PerfEventConfig_Counter_HW_CPU_CYCLES = 10,
  PerfEventConfig_Counter_HW_INSTRUCTIONS = 11
};
bool PerfEventConfig_Counter_IsValid(int value);
constexpr PerfEventConfig_Counter PerfEventConfig_Counter_Counter_MIN = PerfEventConfig_Counter_UNKNOWN_COUNTER;
constexpr PerfEventConfig_Counter PerfEventConfig_Counter_Counter_MAX = PerfEventConfig_Counter_HW_INSTRUCTIONS;
constexpr int PerfEventConfig_Counter_Counter_ARRAYSIZE = PerfEventConfig_Counter_Counter_MAX + 1;

const std::string& PerfEventConfig_Counter_Name(PerfEventConfig_Counter value);
template<typename T>
inline const std::string& PerfEventConfig_Counter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerfEventConfig_Counter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerfEventConfig_Counter_Name.");
  return PerfEventConfig_Counter_Name(static_cast<PerfEventConfig_Counter>(enum_t_value));
}
bool PerfEventConfig_Counter_Parse(
    const std::string& name, PerfEventConfig_Counter* value);
enum SysStatsConfig_StatCounters : int {
  SysStatsConfig_StatCounters_STAT_UNSPECIFIED = 0,
  SysStatsConfig_StatCounters_STAT_CPU_TIMES = 1,
  SysStatsConfig_StatCounters_STAT_IRQ_COUNTS = 2,
  SysStatsConfig_StatCounters_STAT_SOFTIRQ_COUNTS = 3,
  SysStatsConfig_StatCounters_STAT_FORK_COUNT = 4
};
bool SysStatsConfig_StatCounters_IsValid(int value);
constexpr SysStatsConfig_StatCounters SysStatsConfig_StatCounters_StatCounters_MIN = SysStatsConfig_StatCounters_STAT_UNSPECIFIED;
constexpr SysStatsConfig_StatCounters SysStatsConfig_StatCounters_StatCounters_MAX = SysStatsConfig_StatCounters_STAT_FORK_COUNT;
constexpr int SysStatsConfig_StatCounters_StatCounters_ARRAYSIZE = SysStatsConfig_StatCounters_StatCounters_MAX + 1;

const std::string& SysStatsConfig_StatCounters_Name(SysStatsConfig_StatCounters value);
template<typename T>
inline const std::string& SysStatsConfig_StatCounters_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysStatsConfig_StatCounters>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysStatsConfig_StatCounters_Name.");
  return SysStatsConfig_StatCounters_Name(static_cast<SysStatsConfig_StatCounters>(enum_t_value));
}
bool SysStatsConfig_StatCounters_Parse(
    const std::string& name, SysStatsConfig_StatCounters* value);
enum TraceConfig_BufferConfig_FillPolicy : int {
  TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED = 0,
  TraceConfig_BufferConfig_FillPolicy_RING_BUFFER = 1,
  TraceConfig_BufferConfig_FillPolicy_DISCARD = 2
};
bool TraceConfig_BufferConfig_FillPolicy_IsValid(int value);
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig_FillPolicy_FillPolicy_MIN = TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig_FillPolicy_FillPolicy_MAX = TraceConfig_BufferConfig_FillPolicy_DISCARD;
constexpr int TraceConfig_BufferConfig_FillPolicy_FillPolicy_ARRAYSIZE = TraceConfig_BufferConfig_FillPolicy_FillPolicy_MAX + 1;

const std::string& TraceConfig_BufferConfig_FillPolicy_Name(TraceConfig_BufferConfig_FillPolicy value);
template<typename T>
inline const std::string& TraceConfig_BufferConfig_FillPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceConfig_BufferConfig_FillPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceConfig_BufferConfig_FillPolicy_Name.");
  return TraceConfig_BufferConfig_FillPolicy_Name(static_cast<TraceConfig_BufferConfig_FillPolicy>(enum_t_value));
}
bool TraceConfig_BufferConfig_FillPolicy_Parse(
    const std::string& name, TraceConfig_BufferConfig_FillPolicy* value);
enum TraceConfig_TriggerConfig_TriggerMode : int {
  TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED = 0,
  TraceConfig_TriggerConfig_TriggerMode_START_TRACING = 1,
  TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING = 2
};
bool TraceConfig_TriggerConfig_TriggerMode_IsValid(int value);
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MIN = TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MAX = TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING;
constexpr int TraceConfig_TriggerConfig_TriggerMode_TriggerMode_ARRAYSIZE = TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MAX + 1;

const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(TraceConfig_TriggerConfig_TriggerMode value);
template<typename T>
inline const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceConfig_TriggerConfig_TriggerMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceConfig_TriggerConfig_TriggerMode_Name.");
  return TraceConfig_TriggerConfig_TriggerMode_Name(static_cast<TraceConfig_TriggerConfig_TriggerMode>(enum_t_value));
}
bool TraceConfig_TriggerConfig_TriggerMode_Parse(
    const std::string& name, TraceConfig_TriggerConfig_TriggerMode* value);
enum TraceConfig_LockdownModeOperation : int {
  TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED = 0,
  TraceConfig_LockdownModeOperation_LOCKDOWN_CLEAR = 1,
  TraceConfig_LockdownModeOperation_LOCKDOWN_SET = 2
};
bool TraceConfig_LockdownModeOperation_IsValid(int value);
constexpr TraceConfig_LockdownModeOperation TraceConfig_LockdownModeOperation_LockdownModeOperation_MIN = TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED;
constexpr TraceConfig_LockdownModeOperation TraceConfig_LockdownModeOperation_LockdownModeOperation_MAX = TraceConfig_LockdownModeOperation_LOCKDOWN_SET;
constexpr int TraceConfig_LockdownModeOperation_LockdownModeOperation_ARRAYSIZE = TraceConfig_LockdownModeOperation_LockdownModeOperation_MAX + 1;

const std::string& TraceConfig_LockdownModeOperation_Name(TraceConfig_LockdownModeOperation value);
template<typename T>
inline const std::string& TraceConfig_LockdownModeOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceConfig_LockdownModeOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceConfig_LockdownModeOperation_Name.");
  return TraceConfig_LockdownModeOperation_Name(static_cast<TraceConfig_LockdownModeOperation>(enum_t_value));
}
bool TraceConfig_LockdownModeOperation_Parse(
    const std::string& name, TraceConfig_LockdownModeOperation* value);
enum TraceConfig_CompressionType : int {
  TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED = 0,
  TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE = 1
};
bool TraceConfig_CompressionType_IsValid(int value);
constexpr TraceConfig_CompressionType TraceConfig_CompressionType_CompressionType_MIN = TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED;
constexpr TraceConfig_CompressionType TraceConfig_CompressionType_CompressionType_MAX = TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE;
constexpr int TraceConfig_CompressionType_CompressionType_ARRAYSIZE = TraceConfig_CompressionType_CompressionType_MAX + 1;

const std::string& TraceConfig_CompressionType_Name(TraceConfig_CompressionType value);
template<typename T>
inline const std::string& TraceConfig_CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceConfig_CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceConfig_CompressionType_Name.");
  return TraceConfig_CompressionType_Name(static_cast<TraceConfig_CompressionType>(enum_t_value));
}
bool TraceConfig_CompressionType_Parse(
    const std::string& name, TraceConfig_CompressionType* value);
enum BuiltinClock : int {
  BUILTIN_CLOCK_UNKNOWN = 0,
  BUILTIN_CLOCK_REALTIME = 1,
  BUILTIN_CLOCK_REALTIME_COARSE = 2,
  BUILTIN_CLOCK_MONOTONIC = 3,
  BUILTIN_CLOCK_MONOTONIC_COARSE = 4,
  BUILTIN_CLOCK_MONOTONIC_RAW = 5,
  BUILTIN_CLOCK_BOOTTIME = 6,
  BUILTIN_CLOCK_MAX_ID = 63
};
bool BuiltinClock_IsValid(int value);
constexpr BuiltinClock BuiltinClock_MIN = BUILTIN_CLOCK_UNKNOWN;
constexpr BuiltinClock BuiltinClock_MAX = BUILTIN_CLOCK_MAX_ID;
constexpr int BuiltinClock_ARRAYSIZE = BuiltinClock_MAX + 1;

const std::string& BuiltinClock_Name(BuiltinClock value);
template<typename T>
inline const std::string& BuiltinClock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuiltinClock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuiltinClock_Name.");
  return BuiltinClock_Name(static_cast<BuiltinClock>(enum_t_value));
}
bool BuiltinClock_Parse(
    const std::string& name, BuiltinClock* value);
enum AndroidLogId : int {
  LID_DEFAULT = 0,
  LID_RADIO = 1,
  LID_EVENTS = 2,
  LID_SYSTEM = 3,
  LID_CRASH = 4,
  LID_STATS = 5,
  LID_SECURITY = 6,
  LID_KERNEL = 7
};
bool AndroidLogId_IsValid(int value);
constexpr AndroidLogId AndroidLogId_MIN = LID_DEFAULT;
constexpr AndroidLogId AndroidLogId_MAX = LID_KERNEL;
constexpr int AndroidLogId_ARRAYSIZE = AndroidLogId_MAX + 1;

const std::string& AndroidLogId_Name(AndroidLogId value);
template<typename T>
inline const std::string& AndroidLogId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidLogId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidLogId_Name.");
  return AndroidLogId_Name(static_cast<AndroidLogId>(enum_t_value));
}
bool AndroidLogId_Parse(
    const std::string& name, AndroidLogId* value);
enum AndroidLogPriority : int {
  PRIO_UNSPECIFIED = 0,
  PRIO_UNUSED = 1,
  PRIO_VERBOSE = 2,
  PRIO_DEBUG = 3,
  PRIO_INFO = 4,
  PRIO_WARN = 5,
  PRIO_ERROR = 6,
  PRIO_FATAL = 7
};
bool AndroidLogPriority_IsValid(int value);
constexpr AndroidLogPriority AndroidLogPriority_MIN = PRIO_UNSPECIFIED;
constexpr AndroidLogPriority AndroidLogPriority_MAX = PRIO_FATAL;
constexpr int AndroidLogPriority_ARRAYSIZE = AndroidLogPriority_MAX + 1;

const std::string& AndroidLogPriority_Name(AndroidLogPriority value);
template<typename T>
inline const std::string& AndroidLogPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidLogPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidLogPriority_Name.");
  return AndroidLogPriority_Name(static_cast<AndroidLogPriority>(enum_t_value));
}
bool AndroidLogPriority_Parse(
    const std::string& name, AndroidLogPriority* value);
enum MeminfoCounters : int {
  MEMINFO_UNSPECIFIED = 0,
  MEMINFO_MEM_TOTAL = 1,
  MEMINFO_MEM_FREE = 2,
  MEMINFO_MEM_AVAILABLE = 3,
  MEMINFO_BUFFERS = 4,
  MEMINFO_CACHED = 5,
  MEMINFO_SWAP_CACHED = 6,
  MEMINFO_ACTIVE = 7,
  MEMINFO_INACTIVE = 8,
  MEMINFO_ACTIVE_ANON = 9,
  MEMINFO_INACTIVE_ANON = 10,
  MEMINFO_ACTIVE_FILE = 11,
  MEMINFO_INACTIVE_FILE = 12,
  MEMINFO_UNEVICTABLE = 13,
  MEMINFO_MLOCKED = 14,
  MEMINFO_SWAP_TOTAL = 15,
  MEMINFO_SWAP_FREE = 16,
  MEMINFO_DIRTY = 17,
  MEMINFO_WRITEBACK = 18,
  MEMINFO_ANON_PAGES = 19,
  MEMINFO_MAPPED = 20,
  MEMINFO_SHMEM = 21,
  MEMINFO_SLAB = 22,
  MEMINFO_SLAB_RECLAIMABLE = 23,
  MEMINFO_SLAB_UNRECLAIMABLE = 24,
  MEMINFO_KERNEL_STACK = 25,
  MEMINFO_PAGE_TABLES = 26,
  MEMINFO_COMMIT_LIMIT = 27,
  MEMINFO_COMMITED_AS = 28,
  MEMINFO_VMALLOC_TOTAL = 29,
  MEMINFO_VMALLOC_USED = 30,
  MEMINFO_VMALLOC_CHUNK = 31,
  MEMINFO_CMA_TOTAL = 32,
  MEMINFO_CMA_FREE = 33
};
bool MeminfoCounters_IsValid(int value);
constexpr MeminfoCounters MeminfoCounters_MIN = MEMINFO_UNSPECIFIED;
constexpr MeminfoCounters MeminfoCounters_MAX = MEMINFO_CMA_FREE;
constexpr int MeminfoCounters_ARRAYSIZE = MeminfoCounters_MAX + 1;

const std::string& MeminfoCounters_Name(MeminfoCounters value);
template<typename T>
inline const std::string& MeminfoCounters_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MeminfoCounters>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MeminfoCounters_Name.");
  return MeminfoCounters_Name(static_cast<MeminfoCounters>(enum_t_value));
}
bool MeminfoCounters_Parse(
    const std::string& name, MeminfoCounters* value);
enum VmstatCounters : int {
  VMSTAT_UNSPECIFIED = 0,
  VMSTAT_NR_FREE_PAGES = 1,
  VMSTAT_NR_ALLOC_BATCH = 2,
  VMSTAT_NR_INACTIVE_ANON = 3,
  VMSTAT_NR_ACTIVE_ANON = 4,
  VMSTAT_NR_INACTIVE_FILE = 5,
  VMSTAT_NR_ACTIVE_FILE = 6,
  VMSTAT_NR_UNEVICTABLE = 7,
  VMSTAT_NR_MLOCK = 8,
  VMSTAT_NR_ANON_PAGES = 9,
  VMSTAT_NR_MAPPED = 10,
  VMSTAT_NR_FILE_PAGES = 11,
  VMSTAT_NR_DIRTY = 12,
  VMSTAT_NR_WRITEBACK = 13,
  VMSTAT_NR_SLAB_RECLAIMABLE = 14,
  VMSTAT_NR_SLAB_UNRECLAIMABLE = 15,
  VMSTAT_NR_PAGE_TABLE_PAGES = 16,
  VMSTAT_NR_KERNEL_STACK = 17,
  VMSTAT_NR_OVERHEAD = 18,
  VMSTAT_NR_UNSTABLE = 19,
  VMSTAT_NR_BOUNCE = 20,
  VMSTAT_NR_VMSCAN_WRITE = 21,
  VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM = 22,
  VMSTAT_NR_WRITEBACK_TEMP = 23,
  VMSTAT_NR_ISOLATED_ANON = 24,
  VMSTAT_NR_ISOLATED_FILE = 25,
  VMSTAT_NR_SHMEM = 26,
  VMSTAT_NR_DIRTIED = 27,
  VMSTAT_NR_WRITTEN = 28,
  VMSTAT_NR_PAGES_SCANNED = 29,
  VMSTAT_WORKINGSET_REFAULT = 30,
  VMSTAT_WORKINGSET_ACTIVATE = 31,
  VMSTAT_WORKINGSET_NODERECLAIM = 32,
  VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES = 33,
  VMSTAT_NR_FREE_CMA = 34,
  VMSTAT_NR_SWAPCACHE = 35,
  VMSTAT_NR_DIRTY_THRESHOLD = 36,
  VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD = 37,
  VMSTAT_PGPGIN = 38,
  VMSTAT_PGPGOUT = 39,
  VMSTAT_PGPGOUTCLEAN = 40,
  VMSTAT_PSWPIN = 41,
  VMSTAT_PSWPOUT = 42,
  VMSTAT_PGALLOC_DMA = 43,
  VMSTAT_PGALLOC_NORMAL = 44,
  VMSTAT_PGALLOC_MOVABLE = 45,
  VMSTAT_PGFREE = 46,
  VMSTAT_PGACTIVATE = 47,
  VMSTAT_PGDEACTIVATE = 48,
  VMSTAT_PGFAULT = 49,
  VMSTAT_PGMAJFAULT = 50,
  VMSTAT_PGREFILL_DMA = 51,
  VMSTAT_PGREFILL_NORMAL = 52,
  VMSTAT_PGREFILL_MOVABLE = 53,
  VMSTAT_PGSTEAL_KSWAPD_DMA = 54,
  VMSTAT_PGSTEAL_KSWAPD_NORMAL = 55,
  VMSTAT_PGSTEAL_KSWAPD_MOVABLE = 56,
  VMSTAT_PGSTEAL_DIRECT_DMA = 57,
  VMSTAT_PGSTEAL_DIRECT_NORMAL = 58,
  VMSTAT_PGSTEAL_DIRECT_MOVABLE = 59,
  VMSTAT_PGSCAN_KSWAPD_DMA = 60,
  VMSTAT_PGSCAN_KSWAPD_NORMAL = 61,
  VMSTAT_PGSCAN_KSWAPD_MOVABLE = 62,
  VMSTAT_PGSCAN_DIRECT_DMA = 63,
  VMSTAT_PGSCAN_DIRECT_NORMAL = 64,
  VMSTAT_PGSCAN_DIRECT_MOVABLE = 65,
  VMSTAT_PGSCAN_DIRECT_THROTTLE = 66,
  VMSTAT_PGINODESTEAL = 67,
  VMSTAT_SLABS_SCANNED = 68,
  VMSTAT_KSWAPD_INODESTEAL = 69,
  VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY = 70,
  VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY = 71,
  VMSTAT_PAGEOUTRUN = 72,
  VMSTAT_ALLOCSTALL = 73,
  VMSTAT_PGROTATED = 74,
  VMSTAT_DROP_PAGECACHE = 75,
  VMSTAT_DROP_SLAB = 76,
  VMSTAT_PGMIGRATE_SUCCESS = 77,
  VMSTAT_PGMIGRATE_FAIL = 78,
  VMSTAT_COMPACT_MIGRATE_SCANNED = 79,
  VMSTAT_COMPACT_FREE_SCANNED = 80,
  VMSTAT_COMPACT_ISOLATED = 81,
  VMSTAT_COMPACT_STALL = 82,
  VMSTAT_COMPACT_FAIL = 83,
  VMSTAT_COMPACT_SUCCESS = 84,
  VMSTAT_COMPACT_DAEMON_WAKE = 85,
  VMSTAT_UNEVICTABLE_PGS_CULLED = 86,
  VMSTAT_UNEVICTABLE_PGS_SCANNED = 87,
  VMSTAT_UNEVICTABLE_PGS_RESCUED = 88,
  VMSTAT_UNEVICTABLE_PGS_MLOCKED = 89,
  VMSTAT_UNEVICTABLE_PGS_MUNLOCKED = 90,
  VMSTAT_UNEVICTABLE_PGS_CLEARED = 91,
  VMSTAT_UNEVICTABLE_PGS_STRANDED = 92,
  VMSTAT_NR_ZSPAGES = 93,
  VMSTAT_NR_ION_HEAP = 94,
  VMSTAT_NR_GPU_HEAP = 95,
  VMSTAT_ALLOCSTALL_DMA = 96,
  VMSTAT_ALLOCSTALL_MOVABLE = 97,
  VMSTAT_ALLOCSTALL_NORMAL = 98,
  VMSTAT_COMPACT_DAEMON_FREE_SCANNED = 99,
  VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED = 100,
  VMSTAT_NR_FASTRPC = 101,
  VMSTAT_NR_INDIRECTLY_RECLAIMABLE = 102,
  VMSTAT_NR_ION_HEAP_POOL = 103,
  VMSTAT_NR_KERNEL_MISC_RECLAIMABLE = 104,
  VMSTAT_NR_SHADOW_CALL_STACK_BYTES = 105,
  VMSTAT_NR_SHMEM_HUGEPAGES = 106,
  VMSTAT_NR_SHMEM_PMDMAPPED = 107,
  VMSTAT_NR_UNRECLAIMABLE_PAGES = 108,
  VMSTAT_NR_ZONE_ACTIVE_ANON = 109,
  VMSTAT_NR_ZONE_ACTIVE_FILE = 110,
  VMSTAT_NR_ZONE_INACTIVE_ANON = 111,
  VMSTAT_NR_ZONE_INACTIVE_FILE = 112,
  VMSTAT_NR_ZONE_UNEVICTABLE = 113,
  VMSTAT_NR_ZONE_WRITE_PENDING = 114,
  VMSTAT_OOM_KILL = 115,
  VMSTAT_PGLAZYFREE = 116,
  VMSTAT_PGLAZYFREED = 117,
  VMSTAT_PGREFILL = 118,
  VMSTAT_PGSCAN_DIRECT = 119,
  VMSTAT_PGSCAN_KSWAPD = 120,
  VMSTAT_PGSKIP_DMA = 121,
  VMSTAT_PGSKIP_MOVABLE = 122,
  VMSTAT_PGSKIP_NORMAL = 123,
  VMSTAT_PGSTEAL_DIRECT = 124,
  VMSTAT_PGSTEAL_KSWAPD = 125,
  VMSTAT_SWAP_RA = 126,
  VMSTAT_SWAP_RA_HIT = 127,
  VMSTAT_WORKINGSET_RESTORE = 128
};
bool VmstatCounters_IsValid(int value);
constexpr VmstatCounters VmstatCounters_MIN = VMSTAT_UNSPECIFIED;
constexpr VmstatCounters VmstatCounters_MAX = VMSTAT_WORKINGSET_RESTORE;
constexpr int VmstatCounters_ARRAYSIZE = VmstatCounters_MAX + 1;

const std::string& VmstatCounters_Name(VmstatCounters value);
template<typename T>
inline const std::string& VmstatCounters_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VmstatCounters>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VmstatCounters_Name.");
  return VmstatCounters_Name(static_cast<VmstatCounters>(enum_t_value));
}
bool VmstatCounters_Parse(
    const std::string& name, VmstatCounters* value);
// ===================================================================

class GpuCounterDescriptor_GpuCounterSpec :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec) */ {
 public:
  GpuCounterDescriptor_GpuCounterSpec();
  virtual ~GpuCounterDescriptor_GpuCounterSpec();

  GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from);
  GpuCounterDescriptor_GpuCounterSpec(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept
    : GpuCounterDescriptor_GpuCounterSpec() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterSpec& operator=(const GpuCounterDescriptor_GpuCounterSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterSpec& operator=(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor_GpuCounterSpec& default_instance();

  enum PeakValueCase {
    kIntPeakValue = 5,
    kDoublePeakValue = 6,
    PEAK_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor_GpuCounterSpec* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterSpec*>(
               &_GpuCounterDescriptor_GpuCounterSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuCounterDescriptor_GpuCounterSpec& a, GpuCounterDescriptor_GpuCounterSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterSpec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor_GpuCounterSpec* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterSpec>(nullptr);
  }

  GpuCounterDescriptor_GpuCounterSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from);
  void MergeFrom(const GpuCounterDescriptor_GpuCounterSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorUnitsFieldNumber = 7,
    kDenominatorUnitsFieldNumber = 8,
    kGroupsFieldNumber = 10,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCounterIdFieldNumber = 1,
    kSelectByDefaultFieldNumber = 9,
    kIntPeakValueFieldNumber = 5,
    kDoublePeakValueFieldNumber = 6,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  int numerator_units_size() const;
  void clear_numerator_units();
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit numerator_units(int index) const;
  void set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& numerator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_numerator_units();

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  int denominator_units_size() const;
  void clear_denominator_units();
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit denominator_units(int index) const;
  void set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& denominator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_denominator_units();

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  int groups_size() const;
  void clear_groups();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup groups(int index) const;
  void set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  void add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_groups();

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional uint32 counter_id = 1;
  bool has_counter_id() const;
  void clear_counter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id() const;
  void set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool select_by_default = 9;
  bool has_select_by_default() const;
  void clear_select_by_default();
  bool select_by_default() const;
  void set_select_by_default(bool value);

  // optional int64 int_peak_value = 5;
  bool has_int_peak_value() const;
  void clear_int_peak_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value() const;
  void set_int_peak_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double double_peak_value = 6;
  bool has_double_peak_value() const;
  void clear_double_peak_value();
  double double_peak_value() const;
  void set_double_peak_value(double value);

  void clear_peak_value();
  PeakValueCase peak_value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
 private:
  class _Internal;
  void set_has_int_peak_value();
  void set_has_double_peak_value();

  inline bool has_peak_value() const;
  inline void clear_has_peak_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> numerator_units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> denominator_units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id_;
  bool select_by_default_;
  union PeakValueUnion {
    PeakValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value_;
    double double_peak_value_;
  } peak_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterDescriptor_GpuCounterBlock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock) */ {
 public:
  GpuCounterDescriptor_GpuCounterBlock();
  virtual ~GpuCounterDescriptor_GpuCounterBlock();

  GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from);
  GpuCounterDescriptor_GpuCounterBlock(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept
    : GpuCounterDescriptor_GpuCounterBlock() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterBlock& operator=(const GpuCounterDescriptor_GpuCounterBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterBlock& operator=(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor_GpuCounterBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor_GpuCounterBlock* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterBlock*>(
               &_GpuCounterDescriptor_GpuCounterBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpuCounterDescriptor_GpuCounterBlock& a, GpuCounterDescriptor_GpuCounterBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor_GpuCounterBlock* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterBlock>(nullptr);
  }

  GpuCounterDescriptor_GpuCounterBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterBlock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from);
  void MergeFrom(const GpuCounterDescriptor_GpuCounterBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterIdsFieldNumber = 5,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kBlockIdFieldNumber = 1,
    kBlockCapacityFieldNumber = 2,
  };
  // repeated uint32 counter_ids = 5;
  int counter_ids_size() const;
  void clear_counter_ids();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_ids(int index) const;
  void set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      counter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_counter_ids();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 block_capacity = 2;
  bool has_block_capacity() const;
  void clear_block_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_capacity() const;
  void set_block_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > counter_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_capacity_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor) */ {
 public:
  GpuCounterDescriptor();
  virtual ~GpuCounterDescriptor();

  GpuCounterDescriptor(const GpuCounterDescriptor& from);
  GpuCounterDescriptor(GpuCounterDescriptor&& from) noexcept
    : GpuCounterDescriptor() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor& operator=(const GpuCounterDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor& operator=(GpuCounterDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor*>(
               &_GpuCounterDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GpuCounterDescriptor& a, GpuCounterDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor>(nullptr);
  }

  GpuCounterDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor& from);
  void MergeFrom(const GpuCounterDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GpuCounterDescriptor_GpuCounterSpec GpuCounterSpec;
  typedef GpuCounterDescriptor_GpuCounterBlock GpuCounterBlock;

  typedef GpuCounterDescriptor_GpuCounterGroup GpuCounterGroup;
  static constexpr GpuCounterGroup UNCLASSIFIED =
    GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED;
  static constexpr GpuCounterGroup SYSTEM =
    GpuCounterDescriptor_GpuCounterGroup_SYSTEM;
  static constexpr GpuCounterGroup VERTICES =
    GpuCounterDescriptor_GpuCounterGroup_VERTICES;
  static constexpr GpuCounterGroup FRAGMENTS =
    GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS;
  static constexpr GpuCounterGroup PRIMITIVES =
    GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES;
  static constexpr GpuCounterGroup MEMORY =
    GpuCounterDescriptor_GpuCounterGroup_MEMORY;
  static constexpr GpuCounterGroup COMPUTE =
    GpuCounterDescriptor_GpuCounterGroup_COMPUTE;
  static inline bool GpuCounterGroup_IsValid(int value) {
    return GpuCounterDescriptor_GpuCounterGroup_IsValid(value);
  }
  static constexpr GpuCounterGroup GpuCounterGroup_MIN =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN;
  static constexpr GpuCounterGroup GpuCounterGroup_MAX =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX;
  static constexpr int GpuCounterGroup_ARRAYSIZE =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GpuCounterGroup_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GpuCounterGroup>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GpuCounterGroup_Name.");
    return GpuCounterDescriptor_GpuCounterGroup_Name(enum_t_value);
  }
  static inline bool GpuCounterGroup_Parse(const std::string& name,
      GpuCounterGroup* value) {
    return GpuCounterDescriptor_GpuCounterGroup_Parse(name, value);
  }

  typedef GpuCounterDescriptor_MeasureUnit MeasureUnit;
  static constexpr MeasureUnit NONE =
    GpuCounterDescriptor_MeasureUnit_NONE;
  static constexpr MeasureUnit BIT =
    GpuCounterDescriptor_MeasureUnit_BIT;
  static constexpr MeasureUnit KILOBIT =
    GpuCounterDescriptor_MeasureUnit_KILOBIT;
  static constexpr MeasureUnit MEGABIT =
    GpuCounterDescriptor_MeasureUnit_MEGABIT;
  static constexpr MeasureUnit GIGABIT =
    GpuCounterDescriptor_MeasureUnit_GIGABIT;
  static constexpr MeasureUnit TERABIT =
    GpuCounterDescriptor_MeasureUnit_TERABIT;
  static constexpr MeasureUnit PETABIT =
    GpuCounterDescriptor_MeasureUnit_PETABIT;
  static constexpr MeasureUnit BYTE =
    GpuCounterDescriptor_MeasureUnit_BYTE;
  static constexpr MeasureUnit KILOBYTE =
    GpuCounterDescriptor_MeasureUnit_KILOBYTE;
  static constexpr MeasureUnit MEGABYTE =
    GpuCounterDescriptor_MeasureUnit_MEGABYTE;
  static constexpr MeasureUnit GIGABYTE =
    GpuCounterDescriptor_MeasureUnit_GIGABYTE;
  static constexpr MeasureUnit TERABYTE =
    GpuCounterDescriptor_MeasureUnit_TERABYTE;
  static constexpr MeasureUnit PETABYTE =
    GpuCounterDescriptor_MeasureUnit_PETABYTE;
  static constexpr MeasureUnit HERTZ =
    GpuCounterDescriptor_MeasureUnit_HERTZ;
  static constexpr MeasureUnit KILOHERTZ =
    GpuCounterDescriptor_MeasureUnit_KILOHERTZ;
  static constexpr MeasureUnit MEGAHERTZ =
    GpuCounterDescriptor_MeasureUnit_MEGAHERTZ;
  static constexpr MeasureUnit GIGAHERTZ =
    GpuCounterDescriptor_MeasureUnit_GIGAHERTZ;
  static constexpr MeasureUnit TERAHERTZ =
    GpuCounterDescriptor_MeasureUnit_TERAHERTZ;
  static constexpr MeasureUnit PETAHERTZ =
    GpuCounterDescriptor_MeasureUnit_PETAHERTZ;
  static constexpr MeasureUnit NANOSECOND =
    GpuCounterDescriptor_MeasureUnit_NANOSECOND;
  static constexpr MeasureUnit MICROSECOND =
    GpuCounterDescriptor_MeasureUnit_MICROSECOND;
  static constexpr MeasureUnit MILLISECOND =
    GpuCounterDescriptor_MeasureUnit_MILLISECOND;
  static constexpr MeasureUnit SECOND =
    GpuCounterDescriptor_MeasureUnit_SECOND;
  static constexpr MeasureUnit MINUTE =
    GpuCounterDescriptor_MeasureUnit_MINUTE;
  static constexpr MeasureUnit HOUR =
    GpuCounterDescriptor_MeasureUnit_HOUR;
  static constexpr MeasureUnit VERTEX =
    GpuCounterDescriptor_MeasureUnit_VERTEX;
  static constexpr MeasureUnit PIXEL =
    GpuCounterDescriptor_MeasureUnit_PIXEL;
  static constexpr MeasureUnit TRIANGLE =
    GpuCounterDescriptor_MeasureUnit_TRIANGLE;
  static constexpr MeasureUnit PRIMITIVE =
    GpuCounterDescriptor_MeasureUnit_PRIMITIVE;
  static constexpr MeasureUnit FRAGMENT =
    GpuCounterDescriptor_MeasureUnit_FRAGMENT;
  static constexpr MeasureUnit MILLIWATT =
    GpuCounterDescriptor_MeasureUnit_MILLIWATT;
  static constexpr MeasureUnit WATT =
    GpuCounterDescriptor_MeasureUnit_WATT;
  static constexpr MeasureUnit KILOWATT =
    GpuCounterDescriptor_MeasureUnit_KILOWATT;
  static constexpr MeasureUnit JOULE =
    GpuCounterDescriptor_MeasureUnit_JOULE;
  static constexpr MeasureUnit VOLT =
    GpuCounterDescriptor_MeasureUnit_VOLT;
  static constexpr MeasureUnit AMPERE =
    GpuCounterDescriptor_MeasureUnit_AMPERE;
  static constexpr MeasureUnit CELSIUS =
    GpuCounterDescriptor_MeasureUnit_CELSIUS;
  static constexpr MeasureUnit FAHRENHEIT =
    GpuCounterDescriptor_MeasureUnit_FAHRENHEIT;
  static constexpr MeasureUnit KELVIN =
    GpuCounterDescriptor_MeasureUnit_KELVIN;
  static constexpr MeasureUnit PERCENT =
    GpuCounterDescriptor_MeasureUnit_PERCENT;
  static constexpr MeasureUnit INSTRUCTION =
    GpuCounterDescriptor_MeasureUnit_INSTRUCTION;
  static inline bool MeasureUnit_IsValid(int value) {
    return GpuCounterDescriptor_MeasureUnit_IsValid(value);
  }
  static constexpr MeasureUnit MeasureUnit_MIN =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN;
  static constexpr MeasureUnit MeasureUnit_MAX =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX;
  static constexpr int MeasureUnit_ARRAYSIZE =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MeasureUnit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeasureUnit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeasureUnit_Name.");
    return GpuCounterDescriptor_MeasureUnit_Name(enum_t_value);
  }
  static inline bool MeasureUnit_Parse(const std::string& name,
      MeasureUnit* value) {
    return GpuCounterDescriptor_MeasureUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpecsFieldNumber = 1,
    kBlocksFieldNumber = 2,
    kMinSamplingPeriodNsFieldNumber = 3,
    kMaxSamplingPeriodNsFieldNumber = 4,
    kSupportsInstrumentedSamplingFieldNumber = 5,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  int specs_size() const;
  void clear_specs();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* mutable_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
      mutable_specs();
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& specs(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* add_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
      specs() const;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
      mutable_blocks();
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& blocks(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
      blocks() const;

  // optional uint64 min_sampling_period_ns = 3;
  bool has_min_sampling_period_ns() const;
  void clear_min_sampling_period_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_sampling_period_ns() const;
  void set_min_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 max_sampling_period_ns = 4;
  bool has_max_sampling_period_ns() const;
  void clear_max_sampling_period_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_sampling_period_ns() const;
  void set_max_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool supports_instrumented_sampling = 5;
  bool has_supports_instrumented_sampling() const;
  void clear_supports_instrumented_sampling();
  bool supports_instrumented_sampling() const;
  void set_supports_instrumented_sampling(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec > specs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_sampling_period_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_sampling_period_ns_;
  bool supports_instrumented_sampling_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TrackEventCategory :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventCategory) */ {
 public:
  TrackEventCategory();
  virtual ~TrackEventCategory();

  TrackEventCategory(const TrackEventCategory& from);
  TrackEventCategory(TrackEventCategory&& from) noexcept
    : TrackEventCategory() {
    *this = ::std::move(from);
  }

  inline TrackEventCategory& operator=(const TrackEventCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventCategory& operator=(TrackEventCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEventCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEventCategory* internal_default_instance() {
    return reinterpret_cast<const TrackEventCategory*>(
               &_TrackEventCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackEventCategory& a, TrackEventCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEventCategory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEventCategory* New() const final {
    return CreateMaybeMessage<TrackEventCategory>(nullptr);
  }

  TrackEventCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEventCategory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEventCategory& from);
  void MergeFrom(const TrackEventCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventCategory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string tags = 3;
  int tags_size() const;
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventCategory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TrackEventDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventDescriptor) */ {
 public:
  TrackEventDescriptor();
  virtual ~TrackEventDescriptor();

  TrackEventDescriptor(const TrackEventDescriptor& from);
  TrackEventDescriptor(TrackEventDescriptor&& from) noexcept
    : TrackEventDescriptor() {
    *this = ::std::move(from);
  }

  inline TrackEventDescriptor& operator=(const TrackEventDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventDescriptor& operator=(TrackEventDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEventDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEventDescriptor* internal_default_instance() {
    return reinterpret_cast<const TrackEventDescriptor*>(
               &_TrackEventDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackEventDescriptor& a, TrackEventDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEventDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEventDescriptor* New() const final {
    return CreateMaybeMessage<TrackEventDescriptor>(nullptr);
  }

  TrackEventDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEventDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEventDescriptor& from);
  void MergeFrom(const TrackEventDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableCategoriesFieldNumber = 1,
  };
  // repeated .perfetto.protos.TrackEventCategory available_categories = 1;
  int available_categories_size() const;
  void clear_available_categories();
  ::perfetto::protos::TrackEventCategory* mutable_available_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TrackEventCategory >*
      mutable_available_categories();
  const ::perfetto::protos::TrackEventCategory& available_categories(int index) const;
  ::perfetto::protos::TrackEventCategory* add_available_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TrackEventCategory >&
      available_categories() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TrackEventCategory > available_categories_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataSourceDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DataSourceDescriptor) */ {
 public:
  DataSourceDescriptor();
  virtual ~DataSourceDescriptor();

  DataSourceDescriptor(const DataSourceDescriptor& from);
  DataSourceDescriptor(DataSourceDescriptor&& from) noexcept
    : DataSourceDescriptor() {
    *this = ::std::move(from);
  }

  inline DataSourceDescriptor& operator=(const DataSourceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceDescriptor& operator=(DataSourceDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DataSourceDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSourceDescriptor* internal_default_instance() {
    return reinterpret_cast<const DataSourceDescriptor*>(
               &_DataSourceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataSourceDescriptor& a, DataSourceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceDescriptor* New() const final {
    return CreateMaybeMessage<DataSourceDescriptor>(nullptr);
  }

  DataSourceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataSourceDescriptor& from);
  void MergeFrom(const DataSourceDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSourceDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DataSourceDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGpuCounterDescriptorFieldNumber = 5,
    kTrackEventDescriptorFieldNumber = 6,
    kWillNotifyOnStopFieldNumber = 2,
    kWillNotifyOnStartFieldNumber = 3,
    kHandlesIncrementalStateClearFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
  bool has_gpu_counter_descriptor() const;
  void clear_gpu_counter_descriptor();
  const ::perfetto::protos::GpuCounterDescriptor& gpu_counter_descriptor() const;
  ::perfetto::protos::GpuCounterDescriptor* release_gpu_counter_descriptor();
  ::perfetto::protos::GpuCounterDescriptor* mutable_gpu_counter_descriptor();
  void set_allocated_gpu_counter_descriptor(::perfetto::protos::GpuCounterDescriptor* gpu_counter_descriptor);

  // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
  bool has_track_event_descriptor() const;
  void clear_track_event_descriptor();
  const ::perfetto::protos::TrackEventDescriptor& track_event_descriptor() const;
  ::perfetto::protos::TrackEventDescriptor* release_track_event_descriptor();
  ::perfetto::protos::TrackEventDescriptor* mutable_track_event_descriptor();
  void set_allocated_track_event_descriptor(::perfetto::protos::TrackEventDescriptor* track_event_descriptor);

  // optional bool will_notify_on_stop = 2;
  bool has_will_notify_on_stop() const;
  void clear_will_notify_on_stop();
  bool will_notify_on_stop() const;
  void set_will_notify_on_stop(bool value);

  // optional bool will_notify_on_start = 3;
  bool has_will_notify_on_start() const;
  void clear_will_notify_on_start();
  bool will_notify_on_start() const;
  void set_will_notify_on_start(bool value);

  // optional bool handles_incremental_state_clear = 4;
  bool has_handles_incremental_state_clear() const;
  void clear_handles_incremental_state_clear();
  bool handles_incremental_state_clear() const;
  void set_handles_incremental_state_clear(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.DataSourceDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::perfetto::protos::GpuCounterDescriptor* gpu_counter_descriptor_;
  ::perfetto::protos::TrackEventDescriptor* track_event_descriptor_;
  bool will_notify_on_stop_;
  bool will_notify_on_start_;
  bool handles_incremental_state_clear_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TracingServiceState_Producer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState.Producer) */ {
 public:
  TracingServiceState_Producer();
  virtual ~TracingServiceState_Producer();

  TracingServiceState_Producer(const TracingServiceState_Producer& from);
  TracingServiceState_Producer(TracingServiceState_Producer&& from) noexcept
    : TracingServiceState_Producer() {
    *this = ::std::move(from);
  }

  inline TracingServiceState_Producer& operator=(const TracingServiceState_Producer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState_Producer& operator=(TracingServiceState_Producer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState_Producer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState_Producer* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState_Producer*>(
               &_TracingServiceState_Producer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TracingServiceState_Producer& a, TracingServiceState_Producer& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState_Producer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState_Producer* New() const final {
    return CreateMaybeMessage<TracingServiceState_Producer>(nullptr);
  }

  TracingServiceState_Producer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState_Producer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState_Producer& from);
  void MergeFrom(const TracingServiceState_Producer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState_Producer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState.Producer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.Producer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TracingServiceState_DataSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState.DataSource) */ {
 public:
  TracingServiceState_DataSource();
  virtual ~TracingServiceState_DataSource();

  TracingServiceState_DataSource(const TracingServiceState_DataSource& from);
  TracingServiceState_DataSource(TracingServiceState_DataSource&& from) noexcept
    : TracingServiceState_DataSource() {
    *this = ::std::move(from);
  }

  inline TracingServiceState_DataSource& operator=(const TracingServiceState_DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState_DataSource& operator=(TracingServiceState_DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState_DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState_DataSource* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState_DataSource*>(
               &_TracingServiceState_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TracingServiceState_DataSource& a, TracingServiceState_DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState_DataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState_DataSource* New() const final {
    return CreateMaybeMessage<TracingServiceState_DataSource>(nullptr);
  }

  TracingServiceState_DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState_DataSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState_DataSource& from);
  void MergeFrom(const TracingServiceState_DataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState_DataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState.DataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsDescriptorFieldNumber = 1,
    kProducerIdFieldNumber = 2,
  };
  // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
  bool has_ds_descriptor() const;
  void clear_ds_descriptor();
  const ::perfetto::protos::DataSourceDescriptor& ds_descriptor() const;
  ::perfetto::protos::DataSourceDescriptor* release_ds_descriptor();
  ::perfetto::protos::DataSourceDescriptor* mutable_ds_descriptor();
  void set_allocated_ds_descriptor(::perfetto::protos::DataSourceDescriptor* ds_descriptor);

  // optional int32 producer_id = 2;
  bool has_producer_id() const;
  void clear_producer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 producer_id() const;
  void set_producer_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.DataSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::DataSourceDescriptor* ds_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 producer_id_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TracingServiceState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState) */ {
 public:
  TracingServiceState();
  virtual ~TracingServiceState();

  TracingServiceState(const TracingServiceState& from);
  TracingServiceState(TracingServiceState&& from) noexcept
    : TracingServiceState() {
    *this = ::std::move(from);
  }

  inline TracingServiceState& operator=(const TracingServiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState& operator=(TracingServiceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState*>(
               &_TracingServiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TracingServiceState& a, TracingServiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState* New() const final {
    return CreateMaybeMessage<TracingServiceState>(nullptr);
  }

  TracingServiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState& from);
  void MergeFrom(const TracingServiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TracingServiceState_Producer Producer;
  typedef TracingServiceState_DataSource DataSource;

  // accessors -------------------------------------------------------

  enum : int {
    kProducersFieldNumber = 1,
    kDataSourcesFieldNumber = 2,
    kNumSessionsFieldNumber = 3,
    kNumSessionsStartedFieldNumber = 4,
  };
  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  int producers_size() const;
  void clear_producers();
  ::perfetto::protos::TracingServiceState_Producer* mutable_producers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >*
      mutable_producers();
  const ::perfetto::protos::TracingServiceState_Producer& producers(int index) const;
  ::perfetto::protos::TracingServiceState_Producer* add_producers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >&
      producers() const;

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  int data_sources_size() const;
  void clear_data_sources();
  ::perfetto::protos::TracingServiceState_DataSource* mutable_data_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >*
      mutable_data_sources();
  const ::perfetto::protos::TracingServiceState_DataSource& data_sources(int index) const;
  ::perfetto::protos::TracingServiceState_DataSource* add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >&
      data_sources() const;

  // optional int32 num_sessions = 3;
  bool has_num_sessions() const;
  void clear_num_sessions();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions() const;
  void set_num_sessions(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_sessions_started = 4;
  bool has_num_sessions_started() const;
  void clear_num_sessions_started();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_started() const;
  void set_num_sessions_started(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer > producers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource > data_sources_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_started_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AndroidLogConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidLogConfig) */ {
 public:
  AndroidLogConfig();
  virtual ~AndroidLogConfig();

  AndroidLogConfig(const AndroidLogConfig& from);
  AndroidLogConfig(AndroidLogConfig&& from) noexcept
    : AndroidLogConfig() {
    *this = ::std::move(from);
  }

  inline AndroidLogConfig& operator=(const AndroidLogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidLogConfig& operator=(AndroidLogConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidLogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidLogConfig* internal_default_instance() {
    return reinterpret_cast<const AndroidLogConfig*>(
               &_AndroidLogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AndroidLogConfig& a, AndroidLogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidLogConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidLogConfig* New() const final {
    return CreateMaybeMessage<AndroidLogConfig>(nullptr);
  }

  AndroidLogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidLogConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidLogConfig& from);
  void MergeFrom(const AndroidLogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidLogConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidLogConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogIdsFieldNumber = 1,
    kFilterTagsFieldNumber = 4,
    kMinPrioFieldNumber = 3,
  };
  // repeated .perfetto.protos.AndroidLogId log_ids = 1;
  int log_ids_size() const;
  void clear_log_ids();
  ::perfetto::protos::AndroidLogId log_ids(int index) const;
  void set_log_ids(int index, ::perfetto::protos::AndroidLogId value);
  void add_log_ids(::perfetto::protos::AndroidLogId value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& log_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_log_ids();

  // repeated string filter_tags = 4;
  int filter_tags_size() const;
  void clear_filter_tags();
  const std::string& filter_tags(int index) const;
  std::string* mutable_filter_tags(int index);
  void set_filter_tags(int index, const std::string& value);
  void set_filter_tags(int index, std::string&& value);
  void set_filter_tags(int index, const char* value);
  void set_filter_tags(int index, const char* value, size_t size);
  std::string* add_filter_tags();
  void add_filter_tags(const std::string& value);
  void add_filter_tags(std::string&& value);
  void add_filter_tags(const char* value);
  void add_filter_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filter_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filter_tags();

  // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
  bool has_min_prio() const;
  void clear_min_prio();
  ::perfetto::protos::AndroidLogPriority min_prio() const;
  void set_min_prio(::perfetto::protos::AndroidLogPriority value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidLogConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> log_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filter_tags_;
  int min_prio_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AndroidPolledStateConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidPolledStateConfig) */ {
 public:
  AndroidPolledStateConfig();
  virtual ~AndroidPolledStateConfig();

  AndroidPolledStateConfig(const AndroidPolledStateConfig& from);
  AndroidPolledStateConfig(AndroidPolledStateConfig&& from) noexcept
    : AndroidPolledStateConfig() {
    *this = ::std::move(from);
  }

  inline AndroidPolledStateConfig& operator=(const AndroidPolledStateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidPolledStateConfig& operator=(AndroidPolledStateConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidPolledStateConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidPolledStateConfig* internal_default_instance() {
    return reinterpret_cast<const AndroidPolledStateConfig*>(
               &_AndroidPolledStateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AndroidPolledStateConfig& a, AndroidPolledStateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidPolledStateConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidPolledStateConfig* New() const final {
    return CreateMaybeMessage<AndroidPolledStateConfig>(nullptr);
  }

  AndroidPolledStateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidPolledStateConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidPolledStateConfig& from);
  void MergeFrom(const AndroidPolledStateConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidPolledStateConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidPolledStateConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPollMsFieldNumber = 1,
  };
  // optional uint32 poll_ms = 1;
  bool has_poll_ms() const;
  void clear_poll_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_ms() const;
  void set_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidPolledStateConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PackagesListConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PackagesListConfig) */ {
 public:
  PackagesListConfig();
  virtual ~PackagesListConfig();

  PackagesListConfig(const PackagesListConfig& from);
  PackagesListConfig(PackagesListConfig&& from) noexcept
    : PackagesListConfig() {
    *this = ::std::move(from);
  }

  inline PackagesListConfig& operator=(const PackagesListConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackagesListConfig& operator=(PackagesListConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackagesListConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackagesListConfig* internal_default_instance() {
    return reinterpret_cast<const PackagesListConfig*>(
               &_PackagesListConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PackagesListConfig& a, PackagesListConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PackagesListConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackagesListConfig* New() const final {
    return CreateMaybeMessage<PackagesListConfig>(nullptr);
  }

  PackagesListConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackagesListConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackagesListConfig& from);
  void MergeFrom(const PackagesListConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackagesListConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PackagesListConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFilterFieldNumber = 1,
  };
  // repeated string package_name_filter = 1;
  int package_name_filter_size() const;
  void clear_package_name_filter();
  const std::string& package_name_filter(int index) const;
  std::string* mutable_package_name_filter(int index);
  void set_package_name_filter(int index, const std::string& value);
  void set_package_name_filter(int index, std::string&& value);
  void set_package_name_filter(int index, const char* value);
  void set_package_name_filter(int index, const char* value, size_t size);
  std::string* add_package_name_filter();
  void add_package_name_filter(const std::string& value);
  void add_package_name_filter(std::string&& value);
  void add_package_name_filter(const char* value);
  void add_package_name_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& package_name_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_package_name_filter();

  // @@protoc_insertion_point(class_scope:perfetto.protos.PackagesListConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> package_name_filter_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ChromeConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeConfig) */ {
 public:
  ChromeConfig();
  virtual ~ChromeConfig();

  ChromeConfig(const ChromeConfig& from);
  ChromeConfig(ChromeConfig&& from) noexcept
    : ChromeConfig() {
    *this = ::std::move(from);
  }

  inline ChromeConfig& operator=(const ChromeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeConfig& operator=(ChromeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeConfig* internal_default_instance() {
    return reinterpret_cast<const ChromeConfig*>(
               &_ChromeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChromeConfig& a, ChromeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeConfig* New() const final {
    return CreateMaybeMessage<ChromeConfig>(nullptr);
  }

  ChromeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeConfig& from);
  void MergeFrom(const ChromeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeConfig_ClientPriority ClientPriority;
  static constexpr ClientPriority UNKNOWN =
    ChromeConfig_ClientPriority_UNKNOWN;
  static constexpr ClientPriority BACKGROUND =
    ChromeConfig_ClientPriority_BACKGROUND;
  static constexpr ClientPriority USER_INITIATED =
    ChromeConfig_ClientPriority_USER_INITIATED;
  static inline bool ClientPriority_IsValid(int value) {
    return ChromeConfig_ClientPriority_IsValid(value);
  }
  static constexpr ClientPriority ClientPriority_MIN =
    ChromeConfig_ClientPriority_ClientPriority_MIN;
  static constexpr ClientPriority ClientPriority_MAX =
    ChromeConfig_ClientPriority_ClientPriority_MAX;
  static constexpr int ClientPriority_ARRAYSIZE =
    ChromeConfig_ClientPriority_ClientPriority_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClientPriority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientPriority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientPriority_Name.");
    return ChromeConfig_ClientPriority_Name(enum_t_value);
  }
  static inline bool ClientPriority_Parse(const std::string& name,
      ClientPriority* value) {
    return ChromeConfig_ClientPriority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTraceConfigFieldNumber = 1,
    kJsonAgentLabelFilterFieldNumber = 5,
    kPrivacyFilteringEnabledFieldNumber = 2,
    kConvertToLegacyJsonFieldNumber = 3,
    kClientPriorityFieldNumber = 4,
  };
  // optional string trace_config = 1;
  bool has_trace_config() const;
  void clear_trace_config();
  const std::string& trace_config() const;
  void set_trace_config(const std::string& value);
  void set_trace_config(std::string&& value);
  void set_trace_config(const char* value);
  void set_trace_config(const char* value, size_t size);
  std::string* mutable_trace_config();
  std::string* release_trace_config();
  void set_allocated_trace_config(std::string* trace_config);

  // optional string json_agent_label_filter = 5;
  bool has_json_agent_label_filter() const;
  void clear_json_agent_label_filter();
  const std::string& json_agent_label_filter() const;
  void set_json_agent_label_filter(const std::string& value);
  void set_json_agent_label_filter(std::string&& value);
  void set_json_agent_label_filter(const char* value);
  void set_json_agent_label_filter(const char* value, size_t size);
  std::string* mutable_json_agent_label_filter();
  std::string* release_json_agent_label_filter();
  void set_allocated_json_agent_label_filter(std::string* json_agent_label_filter);

  // optional bool privacy_filtering_enabled = 2;
  bool has_privacy_filtering_enabled() const;
  void clear_privacy_filtering_enabled();
  bool privacy_filtering_enabled() const;
  void set_privacy_filtering_enabled(bool value);

  // optional bool convert_to_legacy_json = 3;
  bool has_convert_to_legacy_json() const;
  void clear_convert_to_legacy_json();
  bool convert_to_legacy_json() const;
  void set_convert_to_legacy_json(bool value);

  // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
  bool has_client_priority() const;
  void clear_client_priority();
  ::perfetto::protos::ChromeConfig_ClientPriority client_priority() const;
  void set_client_priority(::perfetto::protos::ChromeConfig_ClientPriority value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_agent_label_filter_;
  bool privacy_filtering_enabled_;
  bool convert_to_legacy_json_;
  int client_priority_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FtraceConfig_CompactSchedConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.CompactSchedConfig) */ {
 public:
  FtraceConfig_CompactSchedConfig();
  virtual ~FtraceConfig_CompactSchedConfig();

  FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from);
  FtraceConfig_CompactSchedConfig(FtraceConfig_CompactSchedConfig&& from) noexcept
    : FtraceConfig_CompactSchedConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_CompactSchedConfig& operator=(const FtraceConfig_CompactSchedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_CompactSchedConfig& operator=(FtraceConfig_CompactSchedConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceConfig_CompactSchedConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceConfig_CompactSchedConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_CompactSchedConfig*>(
               &_FtraceConfig_CompactSchedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FtraceConfig_CompactSchedConfig& a, FtraceConfig_CompactSchedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_CompactSchedConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceConfig_CompactSchedConfig* New() const final {
    return CreateMaybeMessage<FtraceConfig_CompactSchedConfig>(nullptr);
  }

  FtraceConfig_CompactSchedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceConfig_CompactSchedConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceConfig_CompactSchedConfig& from);
  void MergeFrom(const FtraceConfig_CompactSchedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceConfig_CompactSchedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceConfig.CompactSchedConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.CompactSchedConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FtraceConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig) */ {
 public:
  FtraceConfig();
  virtual ~FtraceConfig();

  FtraceConfig(const FtraceConfig& from);
  FtraceConfig(FtraceConfig&& from) noexcept
    : FtraceConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig& operator=(const FtraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig& operator=(FtraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig*>(
               &_FtraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FtraceConfig& a, FtraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceConfig* New() const final {
    return CreateMaybeMessage<FtraceConfig>(nullptr);
  }

  FtraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceConfig& from);
  void MergeFrom(const FtraceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FtraceConfig_CompactSchedConfig CompactSchedConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kFtraceEventsFieldNumber = 1,
    kAtraceCategoriesFieldNumber = 2,
    kAtraceAppsFieldNumber = 3,
    kCompactSchedFieldNumber = 12,
    kSymbolizeKsymsFieldNumber = 13,
    kInitializeKsymsSynchronouslyForTestingFieldNumber = 14,
    kBufferSizeKbFieldNumber = 10,
    kDrainPeriodMsFieldNumber = 11,
  };
  // repeated string ftrace_events = 1;
  int ftrace_events_size() const;
  void clear_ftrace_events();
  const std::string& ftrace_events(int index) const;
  std::string* mutable_ftrace_events(int index);
  void set_ftrace_events(int index, const std::string& value);
  void set_ftrace_events(int index, std::string&& value);
  void set_ftrace_events(int index, const char* value);
  void set_ftrace_events(int index, const char* value, size_t size);
  std::string* add_ftrace_events();
  void add_ftrace_events(const std::string& value);
  void add_ftrace_events(std::string&& value);
  void add_ftrace_events(const char* value);
  void add_ftrace_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ftrace_events();

  // repeated string atrace_categories = 2;
  int atrace_categories_size() const;
  void clear_atrace_categories();
  const std::string& atrace_categories(int index) const;
  std::string* mutable_atrace_categories(int index);
  void set_atrace_categories(int index, const std::string& value);
  void set_atrace_categories(int index, std::string&& value);
  void set_atrace_categories(int index, const char* value);
  void set_atrace_categories(int index, const char* value, size_t size);
  std::string* add_atrace_categories();
  void add_atrace_categories(const std::string& value);
  void add_atrace_categories(std::string&& value);
  void add_atrace_categories(const char* value);
  void add_atrace_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_categories();

  // repeated string atrace_apps = 3;
  int atrace_apps_size() const;
  void clear_atrace_apps();
  const std::string& atrace_apps(int index) const;
  std::string* mutable_atrace_apps(int index);
  void set_atrace_apps(int index, const std::string& value);
  void set_atrace_apps(int index, std::string&& value);
  void set_atrace_apps(int index, const char* value);
  void set_atrace_apps(int index, const char* value, size_t size);
  std::string* add_atrace_apps();
  void add_atrace_apps(const std::string& value);
  void add_atrace_apps(std::string&& value);
  void add_atrace_apps(const char* value);
  void add_atrace_apps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_apps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_apps();

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  bool has_compact_sched() const;
  void clear_compact_sched();
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched() const;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* release_compact_sched();
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched);

  // optional bool symbolize_ksyms = 13;
  bool has_symbolize_ksyms() const;
  void clear_symbolize_ksyms();
  bool symbolize_ksyms() const;
  void set_symbolize_ksyms(bool value);

  // optional bool initialize_ksyms_synchronously_for_testing = 14;
  bool has_initialize_ksyms_synchronously_for_testing() const;
  void clear_initialize_ksyms_synchronously_for_testing();
  bool initialize_ksyms_synchronously_for_testing() const;
  void set_initialize_ksyms_synchronously_for_testing(bool value);

  // optional uint32 buffer_size_kb = 10;
  bool has_buffer_size_kb() const;
  void clear_buffer_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 buffer_size_kb() const;
  void set_buffer_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 drain_period_ms = 11;
  bool has_drain_period_ms() const;
  void clear_drain_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 drain_period_ms() const;
  void set_drain_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ftrace_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_apps_;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched_;
  bool symbolize_ksyms_;
  bool initialize_ksyms_synchronously_for_testing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buffer_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drain_period_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterConfig) */ {
 public:
  GpuCounterConfig();
  virtual ~GpuCounterConfig();

  GpuCounterConfig(const GpuCounterConfig& from);
  GpuCounterConfig(GpuCounterConfig&& from) noexcept
    : GpuCounterConfig() {
    *this = ::std::move(from);
  }

  inline GpuCounterConfig& operator=(const GpuCounterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterConfig& operator=(GpuCounterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterConfig* internal_default_instance() {
    return reinterpret_cast<const GpuCounterConfig*>(
               &_GpuCounterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GpuCounterConfig& a, GpuCounterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterConfig* New() const final {
    return CreateMaybeMessage<GpuCounterConfig>(nullptr);
  }

  GpuCounterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterConfig& from);
  void MergeFrom(const GpuCounterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterIdsFieldNumber = 2,
    kCounterPeriodNsFieldNumber = 1,
    kInstrumentedSamplingFieldNumber = 3,
    kFixGpuClockFieldNumber = 4,
  };
  // repeated uint32 counter_ids = 2;
  int counter_ids_size() const;
  void clear_counter_ids();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_ids(int index) const;
  void set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      counter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_counter_ids();

  // optional uint64 counter_period_ns = 1;
  bool has_counter_period_ns() const;
  void clear_counter_period_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 counter_period_ns() const;
  void set_counter_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool instrumented_sampling = 3;
  bool has_instrumented_sampling() const;
  void clear_instrumented_sampling();
  bool instrumented_sampling() const;
  void set_instrumented_sampling(bool value);

  // optional bool fix_gpu_clock = 4;
  bool has_fix_gpu_clock() const;
  void clear_fix_gpu_clock();
  bool fix_gpu_clock() const;
  void set_fix_gpu_clock(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > counter_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 counter_period_ns_;
  bool instrumented_sampling_;
  bool fix_gpu_clock_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VulkanMemoryConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanMemoryConfig) */ {
 public:
  VulkanMemoryConfig();
  virtual ~VulkanMemoryConfig();

  VulkanMemoryConfig(const VulkanMemoryConfig& from);
  VulkanMemoryConfig(VulkanMemoryConfig&& from) noexcept
    : VulkanMemoryConfig() {
    *this = ::std::move(from);
  }

  inline VulkanMemoryConfig& operator=(const VulkanMemoryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanMemoryConfig& operator=(VulkanMemoryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VulkanMemoryConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VulkanMemoryConfig* internal_default_instance() {
    return reinterpret_cast<const VulkanMemoryConfig*>(
               &_VulkanMemoryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VulkanMemoryConfig& a, VulkanMemoryConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VulkanMemoryConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VulkanMemoryConfig* New() const final {
    return CreateMaybeMessage<VulkanMemoryConfig>(nullptr);
  }

  VulkanMemoryConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VulkanMemoryConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VulkanMemoryConfig& from);
  void MergeFrom(const VulkanMemoryConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VulkanMemoryConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.VulkanMemoryConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackDriverMemoryUsageFieldNumber = 1,
    kTrackDeviceMemoryUsageFieldNumber = 2,
  };
  // optional bool track_driver_memory_usage = 1;
  bool has_track_driver_memory_usage() const;
  void clear_track_driver_memory_usage();
  bool track_driver_memory_usage() const;
  void set_track_driver_memory_usage(bool value);

  // optional bool track_device_memory_usage = 2;
  bool has_track_device_memory_usage() const;
  void clear_track_device_memory_usage();
  bool track_device_memory_usage() const;
  void set_track_device_memory_usage(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanMemoryConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool track_driver_memory_usage_;
  bool track_device_memory_usage_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InodeFileConfig_MountPointMappingEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileConfig.MountPointMappingEntry) */ {
 public:
  InodeFileConfig_MountPointMappingEntry();
  virtual ~InodeFileConfig_MountPointMappingEntry();

  InodeFileConfig_MountPointMappingEntry(const InodeFileConfig_MountPointMappingEntry& from);
  InodeFileConfig_MountPointMappingEntry(InodeFileConfig_MountPointMappingEntry&& from) noexcept
    : InodeFileConfig_MountPointMappingEntry() {
    *this = ::std::move(from);
  }

  inline InodeFileConfig_MountPointMappingEntry& operator=(const InodeFileConfig_MountPointMappingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileConfig_MountPointMappingEntry& operator=(InodeFileConfig_MountPointMappingEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InodeFileConfig_MountPointMappingEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InodeFileConfig_MountPointMappingEntry* internal_default_instance() {
    return reinterpret_cast<const InodeFileConfig_MountPointMappingEntry*>(
               &_InodeFileConfig_MountPointMappingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(InodeFileConfig_MountPointMappingEntry& a, InodeFileConfig_MountPointMappingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileConfig_MountPointMappingEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InodeFileConfig_MountPointMappingEntry* New() const final {
    return CreateMaybeMessage<InodeFileConfig_MountPointMappingEntry>(nullptr);
  }

  InodeFileConfig_MountPointMappingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InodeFileConfig_MountPointMappingEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InodeFileConfig_MountPointMappingEntry& from);
  void MergeFrom(const InodeFileConfig_MountPointMappingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InodeFileConfig_MountPointMappingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InodeFileConfig.MountPointMappingEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanRootsFieldNumber = 2,
    kMountpointFieldNumber = 1,
  };
  // repeated string scan_roots = 2;
  int scan_roots_size() const;
  void clear_scan_roots();
  const std::string& scan_roots(int index) const;
  std::string* mutable_scan_roots(int index);
  void set_scan_roots(int index, const std::string& value);
  void set_scan_roots(int index, std::string&& value);
  void set_scan_roots(int index, const char* value);
  void set_scan_roots(int index, const char* value, size_t size);
  std::string* add_scan_roots();
  void add_scan_roots(const std::string& value);
  void add_scan_roots(std::string&& value);
  void add_scan_roots(const char* value);
  void add_scan_roots(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scan_roots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scan_roots();

  // optional string mountpoint = 1;
  bool has_mountpoint() const;
  void clear_mountpoint();
  const std::string& mountpoint() const;
  void set_mountpoint(const std::string& value);
  void set_mountpoint(std::string&& value);
  void set_mountpoint(const char* value);
  void set_mountpoint(const char* value, size_t size);
  std::string* mutable_mountpoint();
  std::string* release_mountpoint();
  void set_allocated_mountpoint(std::string* mountpoint);

  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scan_roots_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mountpoint_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InodeFileConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileConfig) */ {
 public:
  InodeFileConfig();
  virtual ~InodeFileConfig();

  InodeFileConfig(const InodeFileConfig& from);
  InodeFileConfig(InodeFileConfig&& from) noexcept
    : InodeFileConfig() {
    *this = ::std::move(from);
  }

  inline InodeFileConfig& operator=(const InodeFileConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileConfig& operator=(InodeFileConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InodeFileConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InodeFileConfig* internal_default_instance() {
    return reinterpret_cast<const InodeFileConfig*>(
               &_InodeFileConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(InodeFileConfig& a, InodeFileConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InodeFileConfig* New() const final {
    return CreateMaybeMessage<InodeFileConfig>(nullptr);
  }

  InodeFileConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InodeFileConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InodeFileConfig& from);
  void MergeFrom(const InodeFileConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InodeFileConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InodeFileConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InodeFileConfig_MountPointMappingEntry MountPointMappingEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kScanMountPointsFieldNumber = 5,
    kMountPointMappingFieldNumber = 6,
    kScanIntervalMsFieldNumber = 1,
    kScanDelayMsFieldNumber = 2,
    kScanBatchSizeFieldNumber = 3,
    kDoNotScanFieldNumber = 4,
  };
  // repeated string scan_mount_points = 5;
  int scan_mount_points_size() const;
  void clear_scan_mount_points();
  const std::string& scan_mount_points(int index) const;
  std::string* mutable_scan_mount_points(int index);
  void set_scan_mount_points(int index, const std::string& value);
  void set_scan_mount_points(int index, std::string&& value);
  void set_scan_mount_points(int index, const char* value);
  void set_scan_mount_points(int index, const char* value, size_t size);
  std::string* add_scan_mount_points();
  void add_scan_mount_points(const std::string& value);
  void add_scan_mount_points(std::string&& value);
  void add_scan_mount_points(const char* value);
  void add_scan_mount_points(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scan_mount_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scan_mount_points();

  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  int mount_point_mapping_size() const;
  void clear_mount_point_mapping();
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* mutable_mount_point_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >*
      mutable_mount_point_mapping();
  const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& mount_point_mapping(int index) const;
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* add_mount_point_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >&
      mount_point_mapping() const;

  // optional uint32 scan_interval_ms = 1;
  bool has_scan_interval_ms() const;
  void clear_scan_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_interval_ms() const;
  void set_scan_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 scan_delay_ms = 2;
  bool has_scan_delay_ms() const;
  void clear_scan_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_delay_ms() const;
  void set_scan_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 scan_batch_size = 3;
  bool has_scan_batch_size() const;
  void clear_scan_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_batch_size() const;
  void set_scan_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool do_not_scan = 4;
  bool has_do_not_scan() const;
  void clear_do_not_scan();
  bool do_not_scan() const;
  void set_do_not_scan(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scan_mount_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry > mount_point_mapping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_interval_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_delay_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scan_batch_size_;
  bool do_not_scan_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConsoleConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ConsoleConfig) */ {
 public:
  ConsoleConfig();
  virtual ~ConsoleConfig();

  ConsoleConfig(const ConsoleConfig& from);
  ConsoleConfig(ConsoleConfig&& from) noexcept
    : ConsoleConfig() {
    *this = ::std::move(from);
  }

  inline ConsoleConfig& operator=(const ConsoleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsoleConfig& operator=(ConsoleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConsoleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleConfig* internal_default_instance() {
    return reinterpret_cast<const ConsoleConfig*>(
               &_ConsoleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ConsoleConfig& a, ConsoleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsoleConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsoleConfig* New() const final {
    return CreateMaybeMessage<ConsoleConfig>(nullptr);
  }

  ConsoleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConsoleConfig& from);
  void MergeFrom(const ConsoleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConsoleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ConsoleConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ConsoleConfig_Output Output;
  static constexpr Output OUTPUT_UNSPECIFIED =
    ConsoleConfig_Output_OUTPUT_UNSPECIFIED;
  static constexpr Output OUTPUT_STDOUT =
    ConsoleConfig_Output_OUTPUT_STDOUT;
  static constexpr Output OUTPUT_STDERR =
    ConsoleConfig_Output_OUTPUT_STDERR;
  static inline bool Output_IsValid(int value) {
    return ConsoleConfig_Output_IsValid(value);
  }
  static constexpr Output Output_MIN =
    ConsoleConfig_Output_Output_MIN;
  static constexpr Output Output_MAX =
    ConsoleConfig_Output_Output_MAX;
  static constexpr int Output_ARRAYSIZE =
    ConsoleConfig_Output_Output_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Output_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_Name.");
    return ConsoleConfig_Output_Name(enum_t_value);
  }
  static inline bool Output_Parse(const std::string& name,
      Output* value) {
    return ConsoleConfig_Output_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
    kEnableColorsFieldNumber = 2,
  };
  // optional .perfetto.protos.ConsoleConfig.Output output = 1;
  bool has_output() const;
  void clear_output();
  ::perfetto::protos::ConsoleConfig_Output output() const;
  void set_output(::perfetto::protos::ConsoleConfig_Output value);

  // optional bool enable_colors = 2;
  bool has_enable_colors() const;
  void clear_enable_colors();
  bool enable_colors() const;
  void set_enable_colors(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ConsoleConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_;
  bool enable_colors_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InterceptorConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InterceptorConfig) */ {
 public:
  InterceptorConfig();
  virtual ~InterceptorConfig();

  InterceptorConfig(const InterceptorConfig& from);
  InterceptorConfig(InterceptorConfig&& from) noexcept
    : InterceptorConfig() {
    *this = ::std::move(from);
  }

  inline InterceptorConfig& operator=(const InterceptorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterceptorConfig& operator=(InterceptorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InterceptorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterceptorConfig* internal_default_instance() {
    return reinterpret_cast<const InterceptorConfig*>(
               &_InterceptorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(InterceptorConfig& a, InterceptorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InterceptorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterceptorConfig* New() const final {
    return CreateMaybeMessage<InterceptorConfig>(nullptr);
  }

  InterceptorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterceptorConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InterceptorConfig& from);
  void MergeFrom(const InterceptorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InterceptorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InterceptorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConsoleConfigFieldNumber = 100,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
  bool has_console_config() const;
  void clear_console_config();
  const ::perfetto::protos::ConsoleConfig& console_config() const;
  ::perfetto::protos::ConsoleConfig* release_console_config();
  ::perfetto::protos::ConsoleConfig* mutable_console_config();
  void set_allocated_console_config(::perfetto::protos::ConsoleConfig* console_config);

  // @@protoc_insertion_point(class_scope:perfetto.protos.InterceptorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::perfetto::protos::ConsoleConfig* console_config_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AndroidPowerConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidPowerConfig) */ {
 public:
  AndroidPowerConfig();
  virtual ~AndroidPowerConfig();

  AndroidPowerConfig(const AndroidPowerConfig& from);
  AndroidPowerConfig(AndroidPowerConfig&& from) noexcept
    : AndroidPowerConfig() {
    *this = ::std::move(from);
  }

  inline AndroidPowerConfig& operator=(const AndroidPowerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidPowerConfig& operator=(AndroidPowerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidPowerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidPowerConfig* internal_default_instance() {
    return reinterpret_cast<const AndroidPowerConfig*>(
               &_AndroidPowerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AndroidPowerConfig& a, AndroidPowerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidPowerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidPowerConfig* New() const final {
    return CreateMaybeMessage<AndroidPowerConfig>(nullptr);
  }

  AndroidPowerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidPowerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidPowerConfig& from);
  void MergeFrom(const AndroidPowerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidPowerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidPowerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AndroidPowerConfig_BatteryCounters BatteryCounters;
  static constexpr BatteryCounters BATTERY_COUNTER_UNSPECIFIED =
    AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_UNSPECIFIED;
  static constexpr BatteryCounters BATTERY_COUNTER_CHARGE =
    AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CHARGE;
  static constexpr BatteryCounters BATTERY_COUNTER_CAPACITY_PERCENT =
    AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CAPACITY_PERCENT;
  static constexpr BatteryCounters BATTERY_COUNTER_CURRENT =
    AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT;
  static constexpr BatteryCounters BATTERY_COUNTER_CURRENT_AVG =
    AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT_AVG;
  static inline bool BatteryCounters_IsValid(int value) {
    return AndroidPowerConfig_BatteryCounters_IsValid(value);
  }
  static constexpr BatteryCounters BatteryCounters_MIN =
    AndroidPowerConfig_BatteryCounters_BatteryCounters_MIN;
  static constexpr BatteryCounters BatteryCounters_MAX =
    AndroidPowerConfig_BatteryCounters_BatteryCounters_MAX;
  static constexpr int BatteryCounters_ARRAYSIZE =
    AndroidPowerConfig_BatteryCounters_BatteryCounters_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BatteryCounters_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BatteryCounters>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BatteryCounters_Name.");
    return AndroidPowerConfig_BatteryCounters_Name(enum_t_value);
  }
  static inline bool BatteryCounters_Parse(const std::string& name,
      BatteryCounters* value) {
    return AndroidPowerConfig_BatteryCounters_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryCountersFieldNumber = 2,
    kBatteryPollMsFieldNumber = 1,
    kCollectPowerRailsFieldNumber = 3,
  };
  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  int battery_counters_size() const;
  void clear_battery_counters();
  ::perfetto::protos::AndroidPowerConfig_BatteryCounters battery_counters(int index) const;
  void set_battery_counters(int index, ::perfetto::protos::AndroidPowerConfig_BatteryCounters value);
  void add_battery_counters(::perfetto::protos::AndroidPowerConfig_BatteryCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& battery_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_battery_counters();

  // optional uint32 battery_poll_ms = 1;
  bool has_battery_poll_ms() const;
  void clear_battery_poll_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 battery_poll_ms() const;
  void set_battery_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool collect_power_rails = 3;
  bool has_collect_power_rails() const;
  void clear_collect_power_rails();
  bool collect_power_rails() const;
  void set_collect_power_rails(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidPowerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> battery_counters_;
  ::PROTOBUF_NAMESPACE_ID::uint32 battery_poll_ms_;
  bool collect_power_rails_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProcessStatsConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStatsConfig) */ {
 public:
  ProcessStatsConfig();
  virtual ~ProcessStatsConfig();

  ProcessStatsConfig(const ProcessStatsConfig& from);
  ProcessStatsConfig(ProcessStatsConfig&& from) noexcept
    : ProcessStatsConfig() {
    *this = ::std::move(from);
  }

  inline ProcessStatsConfig& operator=(const ProcessStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStatsConfig& operator=(ProcessStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessStatsConfig* internal_default_instance() {
    return reinterpret_cast<const ProcessStatsConfig*>(
               &_ProcessStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ProcessStatsConfig& a, ProcessStatsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStatsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStatsConfig* New() const final {
    return CreateMaybeMessage<ProcessStatsConfig>(nullptr);
  }

  ProcessStatsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStatsConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessStatsConfig& from);
  void MergeFrom(const ProcessStatsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStatsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStatsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessStatsConfig_Quirks Quirks;
  static constexpr Quirks QUIRKS_UNSPECIFIED =
    ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED;
  PROTOBUF_DEPRECATED static constexpr Quirks DISABLE_INITIAL_DUMP =
    ProcessStatsConfig_Quirks_DISABLE_INITIAL_DUMP;
  static constexpr Quirks DISABLE_ON_DEMAND =
    ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND;
  static inline bool Quirks_IsValid(int value) {
    return ProcessStatsConfig_Quirks_IsValid(value);
  }
  static constexpr Quirks Quirks_MIN =
    ProcessStatsConfig_Quirks_Quirks_MIN;
  static constexpr Quirks Quirks_MAX =
    ProcessStatsConfig_Quirks_Quirks_MAX;
  static constexpr int Quirks_ARRAYSIZE =
    ProcessStatsConfig_Quirks_Quirks_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Quirks_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Quirks>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Quirks_Name.");
    return ProcessStatsConfig_Quirks_Name(enum_t_value);
  }
  static inline bool Quirks_Parse(const std::string& name,
      Quirks* value) {
    return ProcessStatsConfig_Quirks_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQuirksFieldNumber = 1,
    kProcStatsPollMsFieldNumber = 4,
    kScanAllProcessesOnStartFieldNumber = 2,
    kRecordThreadNamesFieldNumber = 3,
    kRecordThreadTimeInStateFieldNumber = 7,
    kProcStatsCacheTtlMsFieldNumber = 6,
    kThreadTimeInStateCacheSizeFieldNumber = 8,
  };
  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  int quirks_size() const;
  void clear_quirks();
  ::perfetto::protos::ProcessStatsConfig_Quirks quirks(int index) const;
  void set_quirks(int index, ::perfetto::protos::ProcessStatsConfig_Quirks value);
  void add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& quirks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_quirks();

  // optional uint32 proc_stats_poll_ms = 4;
  bool has_proc_stats_poll_ms() const;
  void clear_proc_stats_poll_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 proc_stats_poll_ms() const;
  void set_proc_stats_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool scan_all_processes_on_start = 2;
  bool has_scan_all_processes_on_start() const;
  void clear_scan_all_processes_on_start();
  bool scan_all_processes_on_start() const;
  void set_scan_all_processes_on_start(bool value);

  // optional bool record_thread_names = 3;
  bool has_record_thread_names() const;
  void clear_record_thread_names();
  bool record_thread_names() const;
  void set_record_thread_names(bool value);

  // optional bool record_thread_time_in_state = 7;
  bool has_record_thread_time_in_state() const;
  void clear_record_thread_time_in_state();
  bool record_thread_time_in_state() const;
  void set_record_thread_time_in_state(bool value);

  // optional uint32 proc_stats_cache_ttl_ms = 6;
  bool has_proc_stats_cache_ttl_ms() const;
  void clear_proc_stats_cache_ttl_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 proc_stats_cache_ttl_ms() const;
  void set_proc_stats_cache_ttl_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 thread_time_in_state_cache_size = 8;
  bool has_thread_time_in_state_cache_size() const;
  void clear_thread_time_in_state_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_time_in_state_cache_size() const;
  void set_thread_time_in_state_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStatsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> quirks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proc_stats_poll_ms_;
  bool scan_all_processes_on_start_;
  bool record_thread_names_;
  bool record_thread_time_in_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proc_stats_cache_ttl_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_time_in_state_cache_size_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class HeapprofdConfig_ContinuousDumpConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig) */ {
 public:
  HeapprofdConfig_ContinuousDumpConfig();
  virtual ~HeapprofdConfig_ContinuousDumpConfig();

  HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from);
  HeapprofdConfig_ContinuousDumpConfig(HeapprofdConfig_ContinuousDumpConfig&& from) noexcept
    : HeapprofdConfig_ContinuousDumpConfig() {
    *this = ::std::move(from);
  }

  inline HeapprofdConfig_ContinuousDumpConfig& operator=(const HeapprofdConfig_ContinuousDumpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapprofdConfig_ContinuousDumpConfig& operator=(HeapprofdConfig_ContinuousDumpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeapprofdConfig_ContinuousDumpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeapprofdConfig_ContinuousDumpConfig* internal_default_instance() {
    return reinterpret_cast<const HeapprofdConfig_ContinuousDumpConfig*>(
               &_HeapprofdConfig_ContinuousDumpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HeapprofdConfig_ContinuousDumpConfig& a, HeapprofdConfig_ContinuousDumpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HeapprofdConfig_ContinuousDumpConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeapprofdConfig_ContinuousDumpConfig* New() const final {
    return CreateMaybeMessage<HeapprofdConfig_ContinuousDumpConfig>(nullptr);
  }

  HeapprofdConfig_ContinuousDumpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeapprofdConfig_ContinuousDumpConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from);
  void MergeFrom(const HeapprofdConfig_ContinuousDumpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapprofdConfig.ContinuousDumpConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDumpPhaseMsFieldNumber = 5,
    kDumpIntervalMsFieldNumber = 6,
  };
  // optional uint32 dump_phase_ms = 5;
  bool has_dump_phase_ms() const;
  void clear_dump_phase_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_phase_ms() const;
  void set_dump_phase_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dump_interval_ms = 6;
  bool has_dump_interval_ms() const;
  void clear_dump_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_interval_ms() const;
  void set_dump_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_phase_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_interval_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class HeapprofdConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapprofdConfig) */ {
 public:
  HeapprofdConfig();
  virtual ~HeapprofdConfig();

  HeapprofdConfig(const HeapprofdConfig& from);
  HeapprofdConfig(HeapprofdConfig&& from) noexcept
    : HeapprofdConfig() {
    *this = ::std::move(from);
  }

  inline HeapprofdConfig& operator=(const HeapprofdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapprofdConfig& operator=(HeapprofdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeapprofdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeapprofdConfig* internal_default_instance() {
    return reinterpret_cast<const HeapprofdConfig*>(
               &_HeapprofdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HeapprofdConfig& a, HeapprofdConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HeapprofdConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeapprofdConfig* New() const final {
    return CreateMaybeMessage<HeapprofdConfig>(nullptr);
  }

  HeapprofdConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeapprofdConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HeapprofdConfig& from);
  void MergeFrom(const HeapprofdConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapprofdConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapprofdConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HeapprofdConfig_ContinuousDumpConfig ContinuousDumpConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessCmdlineFieldNumber = 2,
    kPidFieldNumber = 4,
    kSkipSymbolPrefixFieldNumber = 7,
    kHeapsFieldNumber = 20,
    kHeapSamplingIntervalsFieldNumber = 22,
    kContinuousDumpConfigFieldNumber = 6,
    kSamplingIntervalBytesFieldNumber = 1,
    kShmemSizeBytesFieldNumber = 8,
    kNoStartupFieldNumber = 10,
    kNoRunningFieldNumber = 11,
    kDumpAtMaxFieldNumber = 13,
    kDisableForkTeardownFieldNumber = 18,
    kBlockClientTimeoutUsFieldNumber = 14,
    kStreamAllocationsFieldNumber = 23,
    kAllHeapsFieldNumber = 21,
    kAllFieldNumber = 5,
    kBlockClientFieldNumber = 9,
    kMinAnonymousMemoryKbFieldNumber = 15,
    kMaxHeapprofdCpuSecsFieldNumber = 17,
    kMaxHeapprofdMemoryKbFieldNumber = 16,
    kDisableVforkDetectionFieldNumber = 19,
    kAdaptiveSamplingShmemThresholdFieldNumber = 24,
    kAdaptiveSamplingMaxSamplingIntervalBytesFieldNumber = 25,
  };
  // repeated string process_cmdline = 2;
  int process_cmdline_size() const;
  void clear_process_cmdline();
  const std::string& process_cmdline(int index) const;
  std::string* mutable_process_cmdline(int index);
  void set_process_cmdline(int index, const std::string& value);
  void set_process_cmdline(int index, std::string&& value);
  void set_process_cmdline(int index, const char* value);
  void set_process_cmdline(int index, const char* value, size_t size);
  std::string* add_process_cmdline();
  void add_process_cmdline(const std::string& value);
  void add_process_cmdline(std::string&& value);
  void add_process_cmdline(const char* value);
  void add_process_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& process_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_process_cmdline();

  // repeated uint64 pid = 4;
  int pid_size() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint64 pid(int index) const;
  void set_pid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pid();

  // repeated string skip_symbol_prefix = 7;
  int skip_symbol_prefix_size() const;
  void clear_skip_symbol_prefix();
  const std::string& skip_symbol_prefix(int index) const;
  std::string* mutable_skip_symbol_prefix(int index);
  void set_skip_symbol_prefix(int index, const std::string& value);
  void set_skip_symbol_prefix(int index, std::string&& value);
  void set_skip_symbol_prefix(int index, const char* value);
  void set_skip_symbol_prefix(int index, const char* value, size_t size);
  std::string* add_skip_symbol_prefix();
  void add_skip_symbol_prefix(const std::string& value);
  void add_skip_symbol_prefix(std::string&& value);
  void add_skip_symbol_prefix(const char* value);
  void add_skip_symbol_prefix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skip_symbol_prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skip_symbol_prefix();

  // repeated string heaps = 20;
  int heaps_size() const;
  void clear_heaps();
  const std::string& heaps(int index) const;
  std::string* mutable_heaps(int index);
  void set_heaps(int index, const std::string& value);
  void set_heaps(int index, std::string&& value);
  void set_heaps(int index, const char* value);
  void set_heaps(int index, const char* value, size_t size);
  std::string* add_heaps();
  void add_heaps(const std::string& value);
  void add_heaps(std::string&& value);
  void add_heaps(const char* value);
  void add_heaps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& heaps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_heaps();

  // repeated uint64 heap_sampling_intervals = 22;
  int heap_sampling_intervals_size() const;
  void clear_heap_sampling_intervals();
  ::PROTOBUF_NAMESPACE_ID::uint64 heap_sampling_intervals(int index) const;
  void set_heap_sampling_intervals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_heap_sampling_intervals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      heap_sampling_intervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_heap_sampling_intervals();

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  bool has_continuous_dump_config() const;
  void clear_continuous_dump_config();
  const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config() const;
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* release_continuous_dump_config();
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* mutable_continuous_dump_config();
  void set_allocated_continuous_dump_config(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config);

  // optional uint64 sampling_interval_bytes = 1;
  bool has_sampling_interval_bytes() const;
  void clear_sampling_interval_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 sampling_interval_bytes() const;
  void set_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 shmem_size_bytes = 8;
  bool has_shmem_size_bytes() const;
  void clear_shmem_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 shmem_size_bytes() const;
  void set_shmem_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool no_startup = 10;
  bool has_no_startup() const;
  void clear_no_startup();
  bool no_startup() const;
  void set_no_startup(bool value);

  // optional bool no_running = 11;
  bool has_no_running() const;
  void clear_no_running();
  bool no_running() const;
  void set_no_running(bool value);

  // optional bool dump_at_max = 13;
  bool has_dump_at_max() const;
  void clear_dump_at_max();
  bool dump_at_max() const;
  void set_dump_at_max(bool value);

  // optional bool disable_fork_teardown = 18;
  bool has_disable_fork_teardown() const;
  void clear_disable_fork_teardown();
  bool disable_fork_teardown() const;
  void set_disable_fork_teardown(bool value);

  // optional uint32 block_client_timeout_us = 14;
  bool has_block_client_timeout_us() const;
  void clear_block_client_timeout_us();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_client_timeout_us() const;
  void set_block_client_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool stream_allocations = 23;
  bool has_stream_allocations() const;
  void clear_stream_allocations();
  bool stream_allocations() const;
  void set_stream_allocations(bool value);

  // optional bool all_heaps = 21;
  bool has_all_heaps() const;
  void clear_all_heaps();
  bool all_heaps() const;
  void set_all_heaps(bool value);

  // optional bool all = 5;
  bool has_all() const;
  void clear_all();
  bool all() const;
  void set_all(bool value);

  // optional bool block_client = 9;
  bool has_block_client() const;
  void clear_block_client();
  bool block_client() const;
  void set_block_client(bool value);

  // optional uint32 min_anonymous_memory_kb = 15;
  bool has_min_anonymous_memory_kb() const;
  void clear_min_anonymous_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_anonymous_memory_kb() const;
  void set_min_anonymous_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 max_heapprofd_cpu_secs = 17;
  bool has_max_heapprofd_cpu_secs() const;
  void clear_max_heapprofd_cpu_secs();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_heapprofd_cpu_secs() const;
  void set_max_heapprofd_cpu_secs(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 max_heapprofd_memory_kb = 16;
  bool has_max_heapprofd_memory_kb() const;
  void clear_max_heapprofd_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heapprofd_memory_kb() const;
  void set_max_heapprofd_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool disable_vfork_detection = 19;
  bool has_disable_vfork_detection() const;
  void clear_disable_vfork_detection();
  bool disable_vfork_detection() const;
  void set_disable_vfork_detection(bool value);

  // optional uint64 adaptive_sampling_shmem_threshold = 24;
  bool has_adaptive_sampling_shmem_threshold() const;
  void clear_adaptive_sampling_shmem_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 adaptive_sampling_shmem_threshold() const;
  void set_adaptive_sampling_shmem_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
  bool has_adaptive_sampling_max_sampling_interval_bytes() const;
  void clear_adaptive_sampling_max_sampling_interval_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 adaptive_sampling_max_sampling_interval_bytes() const;
  void set_adaptive_sampling_max_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> process_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skip_symbol_prefix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> heaps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > heap_sampling_intervals_;
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sampling_interval_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shmem_size_bytes_;
  bool no_startup_;
  bool no_running_;
  bool dump_at_max_;
  bool disable_fork_teardown_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_client_timeout_us_;
  bool stream_allocations_;
  bool all_heaps_;
  bool all_;
  bool block_client_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_anonymous_memory_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_heapprofd_cpu_secs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heapprofd_memory_kb_;
  bool disable_vfork_detection_;
  ::PROTOBUF_NAMESPACE_ID::uint64 adaptive_sampling_shmem_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint64 adaptive_sampling_max_sampling_interval_bytes_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class JavaHprofConfig_ContinuousDumpConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig) */ {
 public:
  JavaHprofConfig_ContinuousDumpConfig();
  virtual ~JavaHprofConfig_ContinuousDumpConfig();

  JavaHprofConfig_ContinuousDumpConfig(const JavaHprofConfig_ContinuousDumpConfig& from);
  JavaHprofConfig_ContinuousDumpConfig(JavaHprofConfig_ContinuousDumpConfig&& from) noexcept
    : JavaHprofConfig_ContinuousDumpConfig() {
    *this = ::std::move(from);
  }

  inline JavaHprofConfig_ContinuousDumpConfig& operator=(const JavaHprofConfig_ContinuousDumpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline JavaHprofConfig_ContinuousDumpConfig& operator=(JavaHprofConfig_ContinuousDumpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const JavaHprofConfig_ContinuousDumpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JavaHprofConfig_ContinuousDumpConfig* internal_default_instance() {
    return reinterpret_cast<const JavaHprofConfig_ContinuousDumpConfig*>(
               &_JavaHprofConfig_ContinuousDumpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(JavaHprofConfig_ContinuousDumpConfig& a, JavaHprofConfig_ContinuousDumpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(JavaHprofConfig_ContinuousDumpConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JavaHprofConfig_ContinuousDumpConfig* New() const final {
    return CreateMaybeMessage<JavaHprofConfig_ContinuousDumpConfig>(nullptr);
  }

  JavaHprofConfig_ContinuousDumpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JavaHprofConfig_ContinuousDumpConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const JavaHprofConfig_ContinuousDumpConfig& from);
  void MergeFrom(const JavaHprofConfig_ContinuousDumpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JavaHprofConfig_ContinuousDumpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.JavaHprofConfig.ContinuousDumpConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDumpPhaseMsFieldNumber = 1,
    kDumpIntervalMsFieldNumber = 2,
  };
  // optional uint32 dump_phase_ms = 1;
  bool has_dump_phase_ms() const;
  void clear_dump_phase_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_phase_ms() const;
  void set_dump_phase_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dump_interval_ms = 2;
  bool has_dump_interval_ms() const;
  void clear_dump_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_interval_ms() const;
  void set_dump_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_phase_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dump_interval_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class JavaHprofConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.JavaHprofConfig) */ {
 public:
  JavaHprofConfig();
  virtual ~JavaHprofConfig();

  JavaHprofConfig(const JavaHprofConfig& from);
  JavaHprofConfig(JavaHprofConfig&& from) noexcept
    : JavaHprofConfig() {
    *this = ::std::move(from);
  }

  inline JavaHprofConfig& operator=(const JavaHprofConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline JavaHprofConfig& operator=(JavaHprofConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const JavaHprofConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JavaHprofConfig* internal_default_instance() {
    return reinterpret_cast<const JavaHprofConfig*>(
               &_JavaHprofConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(JavaHprofConfig& a, JavaHprofConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(JavaHprofConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JavaHprofConfig* New() const final {
    return CreateMaybeMessage<JavaHprofConfig>(nullptr);
  }

  JavaHprofConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JavaHprofConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const JavaHprofConfig& from);
  void MergeFrom(const JavaHprofConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JavaHprofConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.JavaHprofConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef JavaHprofConfig_ContinuousDumpConfig ContinuousDumpConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessCmdlineFieldNumber = 1,
    kPidFieldNumber = 2,
    kIgnoredTypesFieldNumber = 6,
    kContinuousDumpConfigFieldNumber = 3,
    kMinAnonymousMemoryKbFieldNumber = 4,
    kDumpSmapsFieldNumber = 5,
  };
  // repeated string process_cmdline = 1;
  int process_cmdline_size() const;
  void clear_process_cmdline();
  const std::string& process_cmdline(int index) const;
  std::string* mutable_process_cmdline(int index);
  void set_process_cmdline(int index, const std::string& value);
  void set_process_cmdline(int index, std::string&& value);
  void set_process_cmdline(int index, const char* value);
  void set_process_cmdline(int index, const char* value, size_t size);
  std::string* add_process_cmdline();
  void add_process_cmdline(const std::string& value);
  void add_process_cmdline(std::string&& value);
  void add_process_cmdline(const char* value);
  void add_process_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& process_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_process_cmdline();

  // repeated uint64 pid = 2;
  int pid_size() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint64 pid(int index) const;
  void set_pid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pid();

  // repeated string ignored_types = 6;
  int ignored_types_size() const;
  void clear_ignored_types();
  const std::string& ignored_types(int index) const;
  std::string* mutable_ignored_types(int index);
  void set_ignored_types(int index, const std::string& value);
  void set_ignored_types(int index, std::string&& value);
  void set_ignored_types(int index, const char* value);
  void set_ignored_types(int index, const char* value, size_t size);
  std::string* add_ignored_types();
  void add_ignored_types(const std::string& value);
  void add_ignored_types(std::string&& value);
  void add_ignored_types(const char* value);
  void add_ignored_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignored_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignored_types();

  // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
  bool has_continuous_dump_config() const;
  void clear_continuous_dump_config();
  const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig& continuous_dump_config() const;
  ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* release_continuous_dump_config();
  ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* mutable_continuous_dump_config();
  void set_allocated_continuous_dump_config(::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* continuous_dump_config);

  // optional uint32 min_anonymous_memory_kb = 4;
  bool has_min_anonymous_memory_kb() const;
  void clear_min_anonymous_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_anonymous_memory_kb() const;
  void set_min_anonymous_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool dump_smaps = 5;
  bool has_dump_smaps() const;
  void clear_dump_smaps();
  bool dump_smaps() const;
  void set_dump_smaps(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.JavaHprofConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> process_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignored_types_;
  ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* continuous_dump_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_anonymous_memory_kb_;
  bool dump_smaps_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig_Timebase :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.Timebase) */ {
 public:
  PerfEventConfig_Timebase();
  virtual ~PerfEventConfig_Timebase();

  PerfEventConfig_Timebase(const PerfEventConfig_Timebase& from);
  PerfEventConfig_Timebase(PerfEventConfig_Timebase&& from) noexcept
    : PerfEventConfig_Timebase() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_Timebase& operator=(const PerfEventConfig_Timebase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_Timebase& operator=(PerfEventConfig_Timebase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_Timebase& default_instance();

  enum IntervalCase {
    kFrequency = 2,
    kPeriod = 1,
    INTERVAL_NOT_SET = 0,
  };

  enum EventCase {
    kCounter = 4,
    kTracepoint = 3,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_Timebase* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_Timebase*>(
               &_PerfEventConfig_Timebase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PerfEventConfig_Timebase& a, PerfEventConfig_Timebase& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_Timebase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_Timebase* New() const final {
    return CreateMaybeMessage<PerfEventConfig_Timebase>(nullptr);
  }

  PerfEventConfig_Timebase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_Timebase>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_Timebase& from);
  void MergeFrom(const PerfEventConfig_Timebase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_Timebase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.Timebase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 2,
    kPeriodFieldNumber = 1,
    kCounterFieldNumber = 4,
    kTracepointFieldNumber = 3,
  };
  // optional uint64 frequency = 2;
  bool has_frequency() const;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 period = 1;
  bool has_period() const;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.PerfEventConfig.Counter counter = 4;
  bool has_counter() const;
  void clear_counter();
  ::perfetto::protos::PerfEventConfig_Counter counter() const;
  void set_counter(::perfetto::protos::PerfEventConfig_Counter value);

  // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 3;
  bool has_tracepoint() const;
  void clear_tracepoint();
  const ::perfetto::protos::PerfEventConfig_Tracepoint& tracepoint() const;
  ::perfetto::protos::PerfEventConfig_Tracepoint* release_tracepoint();
  ::perfetto::protos::PerfEventConfig_Tracepoint* mutable_tracepoint();
  void set_allocated_tracepoint(::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint);

  void clear_interval();
  IntervalCase interval_case() const;
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.Timebase)
 private:
  class _Internal;
  void set_has_frequency();
  void set_has_period();
  void set_has_counter();
  void set_has_tracepoint();

  inline bool has_interval() const;
  inline void clear_has_interval();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union IntervalUnion {
    IntervalUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 frequency_;
    ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  } interval_;
  union EventUnion {
    EventUnion() {}
    int counter_;
    ::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig_CallstackSampling :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.CallstackSampling) */ {
 public:
  PerfEventConfig_CallstackSampling();
  virtual ~PerfEventConfig_CallstackSampling();

  PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from);
  PerfEventConfig_CallstackSampling(PerfEventConfig_CallstackSampling&& from) noexcept
    : PerfEventConfig_CallstackSampling() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_CallstackSampling& operator=(const PerfEventConfig_CallstackSampling& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_CallstackSampling& operator=(PerfEventConfig_CallstackSampling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_CallstackSampling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_CallstackSampling* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_CallstackSampling*>(
               &_PerfEventConfig_CallstackSampling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PerfEventConfig_CallstackSampling& a, PerfEventConfig_CallstackSampling& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_CallstackSampling* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_CallstackSampling* New() const final {
    return CreateMaybeMessage<PerfEventConfig_CallstackSampling>(nullptr);
  }

  PerfEventConfig_CallstackSampling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_CallstackSampling>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_CallstackSampling& from);
  void MergeFrom(const PerfEventConfig_CallstackSampling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_CallstackSampling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.CallstackSampling";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeFieldNumber = 1,
    kKernelFramesFieldNumber = 2,
  };
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  bool has_scope() const;
  void clear_scope();
  const ::perfetto::protos::PerfEventConfig_Scope& scope() const;
  ::perfetto::protos::PerfEventConfig_Scope* release_scope();
  ::perfetto::protos::PerfEventConfig_Scope* mutable_scope();
  void set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope);

  // optional bool kernel_frames = 2;
  bool has_kernel_frames() const;
  void clear_kernel_frames();
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.CallstackSampling)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::PerfEventConfig_Scope* scope_;
  bool kernel_frames_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig_Scope :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.Scope) */ {
 public:
  PerfEventConfig_Scope();
  virtual ~PerfEventConfig_Scope();

  PerfEventConfig_Scope(const PerfEventConfig_Scope& from);
  PerfEventConfig_Scope(PerfEventConfig_Scope&& from) noexcept
    : PerfEventConfig_Scope() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_Scope& operator=(const PerfEventConfig_Scope& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_Scope& operator=(PerfEventConfig_Scope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_Scope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_Scope* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_Scope*>(
               &_PerfEventConfig_Scope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PerfEventConfig_Scope& a, PerfEventConfig_Scope& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_Scope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_Scope* New() const final {
    return CreateMaybeMessage<PerfEventConfig_Scope>(nullptr);
  }

  PerfEventConfig_Scope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_Scope>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_Scope& from);
  void MergeFrom(const PerfEventConfig_Scope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_Scope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.Scope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 1,
    kTargetCmdlineFieldNumber = 2,
    kExcludePidFieldNumber = 3,
    kExcludeCmdlineFieldNumber = 4,
    kAdditionalCmdlineCountFieldNumber = 5,
  };
  // repeated int32 target_pid = 1;
  int target_pid_size() const;
  void clear_target_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_pid(int index) const;
  void set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_target_pid();

  // repeated string target_cmdline = 2;
  int target_cmdline_size() const;
  void clear_target_cmdline();
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, size_t size);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  // repeated int32 exclude_pid = 3;
  int exclude_pid_size() const;
  void clear_exclude_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 exclude_pid(int index) const;
  void set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_exclude_pid();

  // repeated string exclude_cmdline = 4;
  int exclude_cmdline_size() const;
  void clear_exclude_cmdline();
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, size_t size);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  // optional uint32 additional_cmdline_count = 5;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count() const;
  void set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.Scope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > target_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > exclude_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig_Tracepoint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.Tracepoint) */ {
 public:
  PerfEventConfig_Tracepoint();
  virtual ~PerfEventConfig_Tracepoint();

  PerfEventConfig_Tracepoint(const PerfEventConfig_Tracepoint& from);
  PerfEventConfig_Tracepoint(PerfEventConfig_Tracepoint&& from) noexcept
    : PerfEventConfig_Tracepoint() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_Tracepoint& operator=(const PerfEventConfig_Tracepoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_Tracepoint& operator=(PerfEventConfig_Tracepoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_Tracepoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_Tracepoint* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_Tracepoint*>(
               &_PerfEventConfig_Tracepoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PerfEventConfig_Tracepoint& a, PerfEventConfig_Tracepoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_Tracepoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_Tracepoint* New() const final {
    return CreateMaybeMessage<PerfEventConfig_Tracepoint>(nullptr);
  }

  PerfEventConfig_Tracepoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_Tracepoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_Tracepoint& from);
  void MergeFrom(const PerfEventConfig_Tracepoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_Tracepoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.Tracepoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string filter = 2;
  bool has_filter() const;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.Tracepoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig) */ {
 public:
  PerfEventConfig();
  virtual ~PerfEventConfig();

  PerfEventConfig(const PerfEventConfig& from);
  PerfEventConfig(PerfEventConfig&& from) noexcept
    : PerfEventConfig() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig& operator=(const PerfEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig& operator=(PerfEventConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig*>(
               &_PerfEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PerfEventConfig& a, PerfEventConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig* New() const final {
    return CreateMaybeMessage<PerfEventConfig>(nullptr);
  }

  PerfEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig& from);
  void MergeFrom(const PerfEventConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfEventConfig_Timebase Timebase;
  typedef PerfEventConfig_CallstackSampling CallstackSampling;
  typedef PerfEventConfig_Scope Scope;
  typedef PerfEventConfig_Tracepoint Tracepoint;

  typedef PerfEventConfig_Counter Counter;
  static constexpr Counter UNKNOWN_COUNTER =
    PerfEventConfig_Counter_UNKNOWN_COUNTER;
  static constexpr Counter SW_CPU_CLOCK =
    PerfEventConfig_Counter_SW_CPU_CLOCK;
  static constexpr Counter SW_PAGE_FAULTS =
    PerfEventConfig_Counter_SW_PAGE_FAULTS;
  static constexpr Counter HW_CPU_CYCLES =
    PerfEventConfig_Counter_HW_CPU_CYCLES;
  static constexpr Counter HW_INSTRUCTIONS =
    PerfEventConfig_Counter_HW_INSTRUCTIONS;
  static inline bool Counter_IsValid(int value) {
    return PerfEventConfig_Counter_IsValid(value);
  }
  static constexpr Counter Counter_MIN =
    PerfEventConfig_Counter_Counter_MIN;
  static constexpr Counter Counter_MAX =
    PerfEventConfig_Counter_Counter_MAX;
  static constexpr int Counter_ARRAYSIZE =
    PerfEventConfig_Counter_Counter_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Counter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Counter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Counter_Name.");
    return PerfEventConfig_Counter_Name(enum_t_value);
  }
  static inline bool Counter_Parse(const std::string& name,
      Counter* value) {
    return PerfEventConfig_Counter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 4,
    kTargetCmdlineFieldNumber = 5,
    kExcludePidFieldNumber = 6,
    kExcludeCmdlineFieldNumber = 7,
    kTracepointFieldNumber = 14,
    kTimebaseFieldNumber = 15,
    kCallstackSamplingFieldNumber = 16,
    kSamplingFrequencyFieldNumber = 2,
    kRingBufferPagesFieldNumber = 3,
    kAllCpusFieldNumber = 1,
    kKernelFramesFieldNumber = 12,
    kRingBufferReadPeriodMsFieldNumber = 8,
    kRemoteDescriptorTimeoutMsFieldNumber = 9,
    kUnwindStateClearPeriodMsFieldNumber = 10,
    kAdditionalCmdlineCountFieldNumber = 11,
    kMaxDaemonMemoryKbFieldNumber = 13,
  };
  // repeated int32 target_pid = 4;
  int target_pid_size() const;
  void clear_target_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_pid(int index) const;
  void set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_target_pid();

  // repeated string target_cmdline = 5;
  int target_cmdline_size() const;
  void clear_target_cmdline();
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, size_t size);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  // repeated int32 exclude_pid = 6;
  int exclude_pid_size() const;
  void clear_exclude_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 exclude_pid(int index) const;
  void set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_exclude_pid();

  // repeated string exclude_cmdline = 7;
  int exclude_cmdline_size() const;
  void clear_exclude_cmdline();
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, size_t size);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
  bool has_tracepoint() const;
  void clear_tracepoint();
  const ::perfetto::protos::PerfEventConfig_Tracepoint& tracepoint() const;
  ::perfetto::protos::PerfEventConfig_Tracepoint* release_tracepoint();
  ::perfetto::protos::PerfEventConfig_Tracepoint* mutable_tracepoint();
  void set_allocated_tracepoint(::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint);

  // optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
  bool has_timebase() const;
  void clear_timebase();
  const ::perfetto::protos::PerfEventConfig_Timebase& timebase() const;
  ::perfetto::protos::PerfEventConfig_Timebase* release_timebase();
  ::perfetto::protos::PerfEventConfig_Timebase* mutable_timebase();
  void set_allocated_timebase(::perfetto::protos::PerfEventConfig_Timebase* timebase);

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  bool has_callstack_sampling() const;
  void clear_callstack_sampling();
  const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling() const;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* release_callstack_sampling();
  ::perfetto::protos::PerfEventConfig_CallstackSampling* mutable_callstack_sampling();
  void set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling);

  // optional uint32 sampling_frequency = 2;
  bool has_sampling_frequency() const;
  void clear_sampling_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_frequency() const;
  void set_sampling_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ring_buffer_pages = 3;
  bool has_ring_buffer_pages() const;
  void clear_ring_buffer_pages();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_pages() const;
  void set_ring_buffer_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool all_cpus = 1;
  bool has_all_cpus() const;
  void clear_all_cpus();
  bool all_cpus() const;
  void set_all_cpus(bool value);

  // optional bool kernel_frames = 12;
  bool has_kernel_frames() const;
  void clear_kernel_frames();
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  // optional uint32 ring_buffer_read_period_ms = 8;
  bool has_ring_buffer_read_period_ms() const;
  void clear_ring_buffer_read_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_read_period_ms() const;
  void set_ring_buffer_read_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 remote_descriptor_timeout_ms = 9;
  bool has_remote_descriptor_timeout_ms() const;
  void clear_remote_descriptor_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_descriptor_timeout_ms() const;
  void set_remote_descriptor_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 unwind_state_clear_period_ms = 10;
  bool has_unwind_state_clear_period_ms() const;
  void clear_unwind_state_clear_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 unwind_state_clear_period_ms() const;
  void set_unwind_state_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 additional_cmdline_count = 11;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count() const;
  void set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_daemon_memory_kb = 13;
  bool has_max_daemon_memory_kb() const;
  void clear_max_daemon_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daemon_memory_kb() const;
  void set_max_daemon_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > target_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > exclude_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
  ::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint_;
  ::perfetto::protos::PerfEventConfig_Timebase* timebase_;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_pages_;
  bool all_cpus_;
  bool kernel_frames_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_read_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_descriptor_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unwind_state_clear_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daemon_memory_kb_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SysStatsConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStatsConfig) */ {
 public:
  SysStatsConfig();
  virtual ~SysStatsConfig();

  SysStatsConfig(const SysStatsConfig& from);
  SysStatsConfig(SysStatsConfig&& from) noexcept
    : SysStatsConfig() {
    *this = ::std::move(from);
  }

  inline SysStatsConfig& operator=(const SysStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStatsConfig& operator=(SysStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStatsConfig* internal_default_instance() {
    return reinterpret_cast<const SysStatsConfig*>(
               &_SysStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SysStatsConfig& a, SysStatsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStatsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStatsConfig* New() const final {
    return CreateMaybeMessage<SysStatsConfig>(nullptr);
  }

  SysStatsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStatsConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStatsConfig& from);
  void MergeFrom(const SysStatsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStatsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStatsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SysStatsConfig_StatCounters StatCounters;
  static constexpr StatCounters STAT_UNSPECIFIED =
    SysStatsConfig_StatCounters_STAT_UNSPECIFIED;
  static constexpr StatCounters STAT_CPU_TIMES =
    SysStatsConfig_StatCounters_STAT_CPU_TIMES;
  static constexpr StatCounters STAT_IRQ_COUNTS =
    SysStatsConfig_StatCounters_STAT_IRQ_COUNTS;
  static constexpr StatCounters STAT_SOFTIRQ_COUNTS =
    SysStatsConfig_StatCounters_STAT_SOFTIRQ_COUNTS;
  static constexpr StatCounters STAT_FORK_COUNT =
    SysStatsConfig_StatCounters_STAT_FORK_COUNT;
  static inline bool StatCounters_IsValid(int value) {
    return SysStatsConfig_StatCounters_IsValid(value);
  }
  static constexpr StatCounters StatCounters_MIN =
    SysStatsConfig_StatCounters_StatCounters_MIN;
  static constexpr StatCounters StatCounters_MAX =
    SysStatsConfig_StatCounters_StatCounters_MAX;
  static constexpr int StatCounters_ARRAYSIZE =
    SysStatsConfig_StatCounters_StatCounters_ARRAYSIZE;
  template<typename T>
  static inline const std::string& StatCounters_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatCounters>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatCounters_Name.");
    return SysStatsConfig_StatCounters_Name(enum_t_value);
  }
  static inline bool StatCounters_Parse(const std::string& name,
      StatCounters* value) {
    return SysStatsConfig_StatCounters_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeminfoCountersFieldNumber = 2,
    kVmstatCountersFieldNumber = 4,
    kStatCountersFieldNumber = 6,
    kMeminfoPeriodMsFieldNumber = 1,
    kVmstatPeriodMsFieldNumber = 3,
    kStatPeriodMsFieldNumber = 5,
  };
  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  int meminfo_counters_size() const;
  void clear_meminfo_counters();
  ::perfetto::protos::MeminfoCounters meminfo_counters(int index) const;
  void set_meminfo_counters(int index, ::perfetto::protos::MeminfoCounters value);
  void add_meminfo_counters(::perfetto::protos::MeminfoCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& meminfo_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_meminfo_counters();

  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  int vmstat_counters_size() const;
  void clear_vmstat_counters();
  ::perfetto::protos::VmstatCounters vmstat_counters(int index) const;
  void set_vmstat_counters(int index, ::perfetto::protos::VmstatCounters value);
  void add_vmstat_counters(::perfetto::protos::VmstatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& vmstat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_vmstat_counters();

  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  int stat_counters_size() const;
  void clear_stat_counters();
  ::perfetto::protos::SysStatsConfig_StatCounters stat_counters(int index) const;
  void set_stat_counters(int index, ::perfetto::protos::SysStatsConfig_StatCounters value);
  void add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stat_counters();

  // optional uint32 meminfo_period_ms = 1;
  bool has_meminfo_period_ms() const;
  void clear_meminfo_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 meminfo_period_ms() const;
  void set_meminfo_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 vmstat_period_ms = 3;
  bool has_vmstat_period_ms() const;
  void clear_vmstat_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 vmstat_period_ms() const;
  void set_vmstat_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 stat_period_ms = 5;
  bool has_stat_period_ms() const;
  void clear_stat_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 stat_period_ms() const;
  void set_stat_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStatsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> meminfo_counters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> vmstat_counters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stat_counters_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meminfo_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vmstat_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stat_period_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestConfig_DummyFields :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestConfig.DummyFields) */ {
 public:
  TestConfig_DummyFields();
  virtual ~TestConfig_DummyFields();

  TestConfig_DummyFields(const TestConfig_DummyFields& from);
  TestConfig_DummyFields(TestConfig_DummyFields&& from) noexcept
    : TestConfig_DummyFields() {
    *this = ::std::move(from);
  }

  inline TestConfig_DummyFields& operator=(const TestConfig_DummyFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConfig_DummyFields& operator=(TestConfig_DummyFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestConfig_DummyFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConfig_DummyFields* internal_default_instance() {
    return reinterpret_cast<const TestConfig_DummyFields*>(
               &_TestConfig_DummyFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TestConfig_DummyFields& a, TestConfig_DummyFields& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConfig_DummyFields* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConfig_DummyFields* New() const final {
    return CreateMaybeMessage<TestConfig_DummyFields>(nullptr);
  }

  TestConfig_DummyFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConfig_DummyFields>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestConfig_DummyFields& from);
  void MergeFrom(const TestConfig_DummyFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestConfig_DummyFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestConfig.DummyFields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldStringFieldNumber = 13,
    kFieldBytesFieldNumber = 14,
    kFieldUint32FieldNumber = 1,
    kFieldInt32FieldNumber = 2,
    kFieldUint64FieldNumber = 3,
    kFieldInt64FieldNumber = 4,
    kFieldFixed64FieldNumber = 5,
    kFieldSfixed64FieldNumber = 6,
    kFieldFixed32FieldNumber = 7,
    kFieldSfixed32FieldNumber = 8,
    kFieldDoubleFieldNumber = 9,
    kFieldSint64FieldNumber = 11,
    kFieldFloatFieldNumber = 10,
    kFieldSint32FieldNumber = 12,
  };
  // optional string field_string = 13;
  bool has_field_string() const;
  void clear_field_string();
  const std::string& field_string() const;
  void set_field_string(const std::string& value);
  void set_field_string(std::string&& value);
  void set_field_string(const char* value);
  void set_field_string(const char* value, size_t size);
  std::string* mutable_field_string();
  std::string* release_field_string();
  void set_allocated_field_string(std::string* field_string);

  // optional bytes field_bytes = 14;
  bool has_field_bytes() const;
  void clear_field_bytes();
  const std::string& field_bytes() const;
  void set_field_bytes(const std::string& value);
  void set_field_bytes(std::string&& value);
  void set_field_bytes(const char* value);
  void set_field_bytes(const void* value, size_t size);
  std::string* mutable_field_bytes();
  std::string* release_field_bytes();
  void set_allocated_field_bytes(std::string* field_bytes);

  // optional uint32 field_uint32 = 1;
  bool has_field_uint32() const;
  void clear_field_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_uint32() const;
  void set_field_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 field_int32 = 2;
  bool has_field_int32() const;
  void clear_field_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 field_int32() const;
  void set_field_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 field_uint64 = 3;
  bool has_field_uint64() const;
  void clear_field_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 field_uint64() const;
  void set_field_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 field_int64 = 4;
  bool has_field_int64() const;
  void clear_field_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 field_int64() const;
  void set_field_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed64 field_fixed64 = 5;
  bool has_field_fixed64() const;
  void clear_field_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 field_fixed64() const;
  void set_field_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional sfixed64 field_sfixed64 = 6;
  bool has_field_sfixed64() const;
  void clear_field_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 field_sfixed64() const;
  void set_field_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed32 field_fixed32 = 7;
  bool has_field_fixed32() const;
  void clear_field_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_fixed32() const;
  void set_field_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional sfixed32 field_sfixed32 = 8;
  bool has_field_sfixed32() const;
  void clear_field_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 field_sfixed32() const;
  void set_field_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double field_double = 9;
  bool has_field_double() const;
  void clear_field_double();
  double field_double() const;
  void set_field_double(double value);

  // optional sint64 field_sint64 = 11;
  bool has_field_sint64() const;
  void clear_field_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 field_sint64() const;
  void set_field_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float field_float = 10;
  bool has_field_float() const;
  void clear_field_float();
  float field_float() const;
  void set_field_float(float value);

  // optional sint32 field_sint32 = 12;
  bool has_field_sint32() const;
  void clear_field_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 field_sint32() const;
  void set_field_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestConfig.DummyFields)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_uint32_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_int32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 field_uint64_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_int64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 field_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_sfixed32_;
  double field_double_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_sint64_;
  float field_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_sint32_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestConfig) */ {
 public:
  TestConfig();
  virtual ~TestConfig();

  TestConfig(const TestConfig& from);
  TestConfig(TestConfig&& from) noexcept
    : TestConfig() {
    *this = ::std::move(from);
  }

  inline TestConfig& operator=(const TestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConfig& operator=(TestConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConfig* internal_default_instance() {
    return reinterpret_cast<const TestConfig*>(
               &_TestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TestConfig& a, TestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConfig* New() const final {
    return CreateMaybeMessage<TestConfig>(nullptr);
  }

  TestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestConfig& from);
  void MergeFrom(const TestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestConfig_DummyFields DummyFields;

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldsFieldNumber = 6,
    kMessageCountFieldNumber = 1,
    kMaxMessagesPerSecondFieldNumber = 2,
    kSeedFieldNumber = 3,
    kMessageSizeFieldNumber = 4,
    kSendBatchOnRegisterFieldNumber = 5,
  };
  // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
  bool has_dummy_fields() const;
  void clear_dummy_fields();
  const ::perfetto::protos::TestConfig_DummyFields& dummy_fields() const;
  ::perfetto::protos::TestConfig_DummyFields* release_dummy_fields();
  ::perfetto::protos::TestConfig_DummyFields* mutable_dummy_fields();
  void set_allocated_dummy_fields(::perfetto::protos::TestConfig_DummyFields* dummy_fields);

  // optional uint32 message_count = 1;
  bool has_message_count() const;
  void clear_message_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count() const;
  void set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_messages_per_second = 2;
  bool has_max_messages_per_second() const;
  void clear_max_messages_per_second();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_messages_per_second() const;
  void set_max_messages_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seed = 3;
  bool has_seed() const;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 message_size = 4;
  bool has_message_size() const;
  void clear_message_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_size() const;
  void set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool send_batch_on_register = 5;
  bool has_send_batch_on_register() const;
  void clear_send_batch_on_register();
  bool send_batch_on_register() const;
  void set_send_batch_on_register(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::TestConfig_DummyFields* dummy_fields_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_messages_per_second_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_size_;
  bool send_batch_on_register_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TrackEventConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventConfig) */ {
 public:
  TrackEventConfig();
  virtual ~TrackEventConfig();

  TrackEventConfig(const TrackEventConfig& from);
  TrackEventConfig(TrackEventConfig&& from) noexcept
    : TrackEventConfig() {
    *this = ::std::move(from);
  }

  inline TrackEventConfig& operator=(const TrackEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventConfig& operator=(TrackEventConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEventConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEventConfig* internal_default_instance() {
    return reinterpret_cast<const TrackEventConfig*>(
               &_TrackEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TrackEventConfig& a, TrackEventConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEventConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEventConfig* New() const final {
    return CreateMaybeMessage<TrackEventConfig>(nullptr);
  }

  TrackEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEventConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEventConfig& from);
  void MergeFrom(const TrackEventConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledCategoriesFieldNumber = 1,
    kEnabledCategoriesFieldNumber = 2,
    kDisabledTagsFieldNumber = 3,
    kEnabledTagsFieldNumber = 4,
  };
  // repeated string disabled_categories = 1;
  int disabled_categories_size() const;
  void clear_disabled_categories();
  const std::string& disabled_categories(int index) const;
  std::string* mutable_disabled_categories(int index);
  void set_disabled_categories(int index, const std::string& value);
  void set_disabled_categories(int index, std::string&& value);
  void set_disabled_categories(int index, const char* value);
  void set_disabled_categories(int index, const char* value, size_t size);
  std::string* add_disabled_categories();
  void add_disabled_categories(const std::string& value);
  void add_disabled_categories(std::string&& value);
  void add_disabled_categories(const char* value);
  void add_disabled_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disabled_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disabled_categories();

  // repeated string enabled_categories = 2;
  int enabled_categories_size() const;
  void clear_enabled_categories();
  const std::string& enabled_categories(int index) const;
  std::string* mutable_enabled_categories(int index);
  void set_enabled_categories(int index, const std::string& value);
  void set_enabled_categories(int index, std::string&& value);
  void set_enabled_categories(int index, const char* value);
  void set_enabled_categories(int index, const char* value, size_t size);
  std::string* add_enabled_categories();
  void add_enabled_categories(const std::string& value);
  void add_enabled_categories(std::string&& value);
  void add_enabled_categories(const char* value);
  void add_enabled_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_categories();

  // repeated string disabled_tags = 3;
  int disabled_tags_size() const;
  void clear_disabled_tags();
  const std::string& disabled_tags(int index) const;
  std::string* mutable_disabled_tags(int index);
  void set_disabled_tags(int index, const std::string& value);
  void set_disabled_tags(int index, std::string&& value);
  void set_disabled_tags(int index, const char* value);
  void set_disabled_tags(int index, const char* value, size_t size);
  std::string* add_disabled_tags();
  void add_disabled_tags(const std::string& value);
  void add_disabled_tags(std::string&& value);
  void add_disabled_tags(const char* value);
  void add_disabled_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disabled_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disabled_tags();

  // repeated string enabled_tags = 4;
  int enabled_tags_size() const;
  void clear_enabled_tags();
  const std::string& enabled_tags(int index) const;
  std::string* mutable_enabled_tags(int index);
  void set_enabled_tags(int index, const std::string& value);
  void set_enabled_tags(int index, std::string&& value);
  void set_enabled_tags(int index, const char* value);
  void set_enabled_tags(int index, const char* value, size_t size);
  std::string* add_enabled_tags();
  void add_enabled_tags(const std::string& value);
  void add_enabled_tags(std::string&& value);
  void add_enabled_tags(const char* value);
  void add_enabled_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_tags();

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disabled_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disabled_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_tags_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataSourceConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DataSourceConfig) */ {
 public:
  DataSourceConfig();
  virtual ~DataSourceConfig();

  DataSourceConfig(const DataSourceConfig& from);
  DataSourceConfig(DataSourceConfig&& from) noexcept
    : DataSourceConfig() {
    *this = ::std::move(from);
  }

  inline DataSourceConfig& operator=(const DataSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceConfig& operator=(DataSourceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DataSourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSourceConfig* internal_default_instance() {
    return reinterpret_cast<const DataSourceConfig*>(
               &_DataSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DataSourceConfig& a, DataSourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceConfig* New() const final {
    return CreateMaybeMessage<DataSourceConfig>(nullptr);
  }

  DataSourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataSourceConfig& from);
  void MergeFrom(const DataSourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DataSourceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLegacyConfigFieldNumber = 1000,
    kFtraceConfigFieldNumber = 100,
    kChromeConfigFieldNumber = 101,
    kInodeFileConfigFieldNumber = 102,
    kProcessStatsConfigFieldNumber = 103,
    kSysStatsConfigFieldNumber = 104,
    kHeapprofdConfigFieldNumber = 105,
    kAndroidPowerConfigFieldNumber = 106,
    kAndroidLogConfigFieldNumber = 107,
    kGpuCounterConfigFieldNumber = 108,
    kPackagesListConfigFieldNumber = 109,
    kJavaHprofConfigFieldNumber = 110,
    kPerfEventConfigFieldNumber = 111,
    kVulkanMemoryConfigFieldNumber = 112,
    kTrackEventConfigFieldNumber = 113,
    kAndroidPolledStateConfigFieldNumber = 114,
    kInterceptorConfigFieldNumber = 115,
    kForTestingFieldNumber = 1001,
    kTargetBufferFieldNumber = 2,
    kTraceDurationMsFieldNumber = 3,
    kTracingSessionIdFieldNumber = 4,
    kEnableExtraGuardrailsFieldNumber = 6,
    kStopTimeoutMsFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string legacy_config = 1000;
  bool has_legacy_config() const;
  void clear_legacy_config();
  const std::string& legacy_config() const;
  void set_legacy_config(const std::string& value);
  void set_legacy_config(std::string&& value);
  void set_legacy_config(const char* value);
  void set_legacy_config(const char* value, size_t size);
  std::string* mutable_legacy_config();
  std::string* release_legacy_config();
  void set_allocated_legacy_config(std::string* legacy_config);

  // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
  bool has_ftrace_config() const;
  void clear_ftrace_config();
  const ::perfetto::protos::FtraceConfig& ftrace_config() const;
  ::perfetto::protos::FtraceConfig* release_ftrace_config();
  ::perfetto::protos::FtraceConfig* mutable_ftrace_config();
  void set_allocated_ftrace_config(::perfetto::protos::FtraceConfig* ftrace_config);

  // optional .perfetto.protos.ChromeConfig chrome_config = 101;
  bool has_chrome_config() const;
  void clear_chrome_config();
  const ::perfetto::protos::ChromeConfig& chrome_config() const;
  ::perfetto::protos::ChromeConfig* release_chrome_config();
  ::perfetto::protos::ChromeConfig* mutable_chrome_config();
  void set_allocated_chrome_config(::perfetto::protos::ChromeConfig* chrome_config);

  // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
  bool has_inode_file_config() const;
  void clear_inode_file_config();
  const ::perfetto::protos::InodeFileConfig& inode_file_config() const;
  ::perfetto::protos::InodeFileConfig* release_inode_file_config();
  ::perfetto::protos::InodeFileConfig* mutable_inode_file_config();
  void set_allocated_inode_file_config(::perfetto::protos::InodeFileConfig* inode_file_config);

  // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
  bool has_process_stats_config() const;
  void clear_process_stats_config();
  const ::perfetto::protos::ProcessStatsConfig& process_stats_config() const;
  ::perfetto::protos::ProcessStatsConfig* release_process_stats_config();
  ::perfetto::protos::ProcessStatsConfig* mutable_process_stats_config();
  void set_allocated_process_stats_config(::perfetto::protos::ProcessStatsConfig* process_stats_config);

  // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
  bool has_sys_stats_config() const;
  void clear_sys_stats_config();
  const ::perfetto::protos::SysStatsConfig& sys_stats_config() const;
  ::perfetto::protos::SysStatsConfig* release_sys_stats_config();
  ::perfetto::protos::SysStatsConfig* mutable_sys_stats_config();
  void set_allocated_sys_stats_config(::perfetto::protos::SysStatsConfig* sys_stats_config);

  // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
  bool has_heapprofd_config() const;
  void clear_heapprofd_config();
  const ::perfetto::protos::HeapprofdConfig& heapprofd_config() const;
  ::perfetto::protos::HeapprofdConfig* release_heapprofd_config();
  ::perfetto::protos::HeapprofdConfig* mutable_heapprofd_config();
  void set_allocated_heapprofd_config(::perfetto::protos::HeapprofdConfig* heapprofd_config);

  // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
  bool has_android_power_config() const;
  void clear_android_power_config();
  const ::perfetto::protos::AndroidPowerConfig& android_power_config() const;
  ::perfetto::protos::AndroidPowerConfig* release_android_power_config();
  ::perfetto::protos::AndroidPowerConfig* mutable_android_power_config();
  void set_allocated_android_power_config(::perfetto::protos::AndroidPowerConfig* android_power_config);

  // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
  bool has_android_log_config() const;
  void clear_android_log_config();
  const ::perfetto::protos::AndroidLogConfig& android_log_config() const;
  ::perfetto::protos::AndroidLogConfig* release_android_log_config();
  ::perfetto::protos::AndroidLogConfig* mutable_android_log_config();
  void set_allocated_android_log_config(::perfetto::protos::AndroidLogConfig* android_log_config);

  // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
  bool has_gpu_counter_config() const;
  void clear_gpu_counter_config();
  const ::perfetto::protos::GpuCounterConfig& gpu_counter_config() const;
  ::perfetto::protos::GpuCounterConfig* release_gpu_counter_config();
  ::perfetto::protos::GpuCounterConfig* mutable_gpu_counter_config();
  void set_allocated_gpu_counter_config(::perfetto::protos::GpuCounterConfig* gpu_counter_config);

  // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
  bool has_packages_list_config() const;
  void clear_packages_list_config();
  const ::perfetto::protos::PackagesListConfig& packages_list_config() const;
  ::perfetto::protos::PackagesListConfig* release_packages_list_config();
  ::perfetto::protos::PackagesListConfig* mutable_packages_list_config();
  void set_allocated_packages_list_config(::perfetto::protos::PackagesListConfig* packages_list_config);

  // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
  bool has_java_hprof_config() const;
  void clear_java_hprof_config();
  const ::perfetto::protos::JavaHprofConfig& java_hprof_config() const;
  ::perfetto::protos::JavaHprofConfig* release_java_hprof_config();
  ::perfetto::protos::JavaHprofConfig* mutable_java_hprof_config();
  void set_allocated_java_hprof_config(::perfetto::protos::JavaHprofConfig* java_hprof_config);

  // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
  bool has_perf_event_config() const;
  void clear_perf_event_config();
  const ::perfetto::protos::PerfEventConfig& perf_event_config() const;
  ::perfetto::protos::PerfEventConfig* release_perf_event_config();
  ::perfetto::protos::PerfEventConfig* mutable_perf_event_config();
  void set_allocated_perf_event_config(::perfetto::protos::PerfEventConfig* perf_event_config);

  // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
  bool has_vulkan_memory_config() const;
  void clear_vulkan_memory_config();
  const ::perfetto::protos::VulkanMemoryConfig& vulkan_memory_config() const;
  ::perfetto::protos::VulkanMemoryConfig* release_vulkan_memory_config();
  ::perfetto::protos::VulkanMemoryConfig* mutable_vulkan_memory_config();
  void set_allocated_vulkan_memory_config(::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config);

  // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
  bool has_track_event_config() const;
  void clear_track_event_config();
  const ::perfetto::protos::TrackEventConfig& track_event_config() const;
  ::perfetto::protos::TrackEventConfig* release_track_event_config();
  ::perfetto::protos::TrackEventConfig* mutable_track_event_config();
  void set_allocated_track_event_config(::perfetto::protos::TrackEventConfig* track_event_config);

  // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
  bool has_android_polled_state_config() const;
  void clear_android_polled_state_config();
  const ::perfetto::protos::AndroidPolledStateConfig& android_polled_state_config() const;
  ::perfetto::protos::AndroidPolledStateConfig* release_android_polled_state_config();
  ::perfetto::protos::AndroidPolledStateConfig* mutable_android_polled_state_config();
  void set_allocated_android_polled_state_config(::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config);

  // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
  bool has_interceptor_config() const;
  void clear_interceptor_config();
  const ::perfetto::protos::InterceptorConfig& interceptor_config() const;
  ::perfetto::protos::InterceptorConfig* release_interceptor_config();
  ::perfetto::protos::InterceptorConfig* mutable_interceptor_config();
  void set_allocated_interceptor_config(::perfetto::protos::InterceptorConfig* interceptor_config);

  // optional .perfetto.protos.TestConfig for_testing = 1001;
  bool has_for_testing() const;
  void clear_for_testing();
  const ::perfetto::protos::TestConfig& for_testing() const;
  ::perfetto::protos::TestConfig* release_for_testing();
  ::perfetto::protos::TestConfig* mutable_for_testing();
  void set_allocated_for_testing(::perfetto::protos::TestConfig* for_testing);

  // optional uint32 target_buffer = 2;
  bool has_target_buffer() const;
  void clear_target_buffer();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_buffer() const;
  void set_target_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 trace_duration_ms = 3;
  bool has_trace_duration_ms() const;
  void clear_trace_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_duration_ms() const;
  void set_trace_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 tracing_session_id = 4;
  bool has_tracing_session_id() const;
  void clear_tracing_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tracing_session_id() const;
  void set_tracing_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool enable_extra_guardrails = 6;
  bool has_enable_extra_guardrails() const;
  void clear_enable_extra_guardrails();
  bool enable_extra_guardrails() const;
  void set_enable_extra_guardrails(bool value);

  // optional uint32 stop_timeout_ms = 7;
  bool has_stop_timeout_ms() const;
  void clear_stop_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_timeout_ms() const;
  void set_stop_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.DataSourceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_config_;
  ::perfetto::protos::FtraceConfig* ftrace_config_;
  ::perfetto::protos::ChromeConfig* chrome_config_;
  ::perfetto::protos::InodeFileConfig* inode_file_config_;
  ::perfetto::protos::ProcessStatsConfig* process_stats_config_;
  ::perfetto::protos::SysStatsConfig* sys_stats_config_;
  ::perfetto::protos::HeapprofdConfig* heapprofd_config_;
  ::perfetto::protos::AndroidPowerConfig* android_power_config_;
  ::perfetto::protos::AndroidLogConfig* android_log_config_;
  ::perfetto::protos::GpuCounterConfig* gpu_counter_config_;
  ::perfetto::protos::PackagesListConfig* packages_list_config_;
  ::perfetto::protos::JavaHprofConfig* java_hprof_config_;
  ::perfetto::protos::PerfEventConfig* perf_event_config_;
  ::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config_;
  ::perfetto::protos::TrackEventConfig* track_event_config_;
  ::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config_;
  ::perfetto::protos::InterceptorConfig* interceptor_config_;
  ::perfetto::protos::TestConfig* for_testing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_buffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tracing_session_id_;
  bool enable_extra_guardrails_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_timeout_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_BufferConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.BufferConfig) */ {
 public:
  TraceConfig_BufferConfig();
  virtual ~TraceConfig_BufferConfig();

  TraceConfig_BufferConfig(const TraceConfig_BufferConfig& from);
  TraceConfig_BufferConfig(TraceConfig_BufferConfig&& from) noexcept
    : TraceConfig_BufferConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_BufferConfig& operator=(const TraceConfig_BufferConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_BufferConfig& operator=(TraceConfig_BufferConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_BufferConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_BufferConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_BufferConfig*>(
               &_TraceConfig_BufferConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TraceConfig_BufferConfig& a, TraceConfig_BufferConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_BufferConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_BufferConfig* New() const final {
    return CreateMaybeMessage<TraceConfig_BufferConfig>(nullptr);
  }

  TraceConfig_BufferConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_BufferConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_BufferConfig& from);
  void MergeFrom(const TraceConfig_BufferConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_BufferConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.BufferConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_BufferConfig_FillPolicy FillPolicy;
  static constexpr FillPolicy UNSPECIFIED =
    TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED;
  static constexpr FillPolicy RING_BUFFER =
    TraceConfig_BufferConfig_FillPolicy_RING_BUFFER;
  static constexpr FillPolicy DISCARD =
    TraceConfig_BufferConfig_FillPolicy_DISCARD;
  static inline bool FillPolicy_IsValid(int value) {
    return TraceConfig_BufferConfig_FillPolicy_IsValid(value);
  }
  static constexpr FillPolicy FillPolicy_MIN =
    TraceConfig_BufferConfig_FillPolicy_FillPolicy_MIN;
  static constexpr FillPolicy FillPolicy_MAX =
    TraceConfig_BufferConfig_FillPolicy_FillPolicy_MAX;
  static constexpr int FillPolicy_ARRAYSIZE =
    TraceConfig_BufferConfig_FillPolicy_FillPolicy_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FillPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FillPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FillPolicy_Name.");
    return TraceConfig_BufferConfig_FillPolicy_Name(enum_t_value);
  }
  static inline bool FillPolicy_Parse(const std::string& name,
      FillPolicy* value) {
    return TraceConfig_BufferConfig_FillPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeKbFieldNumber = 1,
    kFillPolicyFieldNumber = 4,
  };
  // optional uint32 size_kb = 1;
  bool has_size_kb() const;
  void clear_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_kb() const;
  void set_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
  bool has_fill_policy() const;
  void clear_fill_policy();
  ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy fill_policy() const;
  void set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BufferConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_kb_;
  int fill_policy_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_DataSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.DataSource) */ {
 public:
  TraceConfig_DataSource();
  virtual ~TraceConfig_DataSource();

  TraceConfig_DataSource(const TraceConfig_DataSource& from);
  TraceConfig_DataSource(TraceConfig_DataSource&& from) noexcept
    : TraceConfig_DataSource() {
    *this = ::std::move(from);
  }

  inline TraceConfig_DataSource& operator=(const TraceConfig_DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_DataSource& operator=(TraceConfig_DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_DataSource* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_DataSource*>(
               &_TraceConfig_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TraceConfig_DataSource& a, TraceConfig_DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_DataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_DataSource* New() const final {
    return CreateMaybeMessage<TraceConfig_DataSource>(nullptr);
  }

  TraceConfig_DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_DataSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_DataSource& from);
  void MergeFrom(const TraceConfig_DataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_DataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.DataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFilterFieldNumber = 2,
    kProducerNameRegexFilterFieldNumber = 3,
    kConfigFieldNumber = 1,
  };
  // repeated string producer_name_filter = 2;
  int producer_name_filter_size() const;
  void clear_producer_name_filter();
  const std::string& producer_name_filter(int index) const;
  std::string* mutable_producer_name_filter(int index);
  void set_producer_name_filter(int index, const std::string& value);
  void set_producer_name_filter(int index, std::string&& value);
  void set_producer_name_filter(int index, const char* value);
  void set_producer_name_filter(int index, const char* value, size_t size);
  std::string* add_producer_name_filter();
  void add_producer_name_filter(const std::string& value);
  void add_producer_name_filter(std::string&& value);
  void add_producer_name_filter(const char* value);
  void add_producer_name_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& producer_name_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_producer_name_filter();

  // repeated string producer_name_regex_filter = 3;
  int producer_name_regex_filter_size() const;
  void clear_producer_name_regex_filter();
  const std::string& producer_name_regex_filter(int index) const;
  std::string* mutable_producer_name_regex_filter(int index);
  void set_producer_name_regex_filter(int index, const std::string& value);
  void set_producer_name_regex_filter(int index, std::string&& value);
  void set_producer_name_regex_filter(int index, const char* value);
  void set_producer_name_regex_filter(int index, const char* value, size_t size);
  std::string* add_producer_name_regex_filter();
  void add_producer_name_regex_filter(const std::string& value);
  void add_producer_name_regex_filter(std::string&& value);
  void add_producer_name_regex_filter(const char* value);
  void add_producer_name_regex_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& producer_name_regex_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_producer_name_regex_filter();

  // optional .perfetto.protos.DataSourceConfig config = 1;
  bool has_config() const;
  void clear_config();
  const ::perfetto::protos::DataSourceConfig& config() const;
  ::perfetto::protos::DataSourceConfig* release_config();
  ::perfetto::protos::DataSourceConfig* mutable_config();
  void set_allocated_config(::perfetto::protos::DataSourceConfig* config);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.DataSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> producer_name_filter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> producer_name_regex_filter_;
  ::perfetto::protos::DataSourceConfig* config_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_BuiltinDataSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.BuiltinDataSource) */ {
 public:
  TraceConfig_BuiltinDataSource();
  virtual ~TraceConfig_BuiltinDataSource();

  TraceConfig_BuiltinDataSource(const TraceConfig_BuiltinDataSource& from);
  TraceConfig_BuiltinDataSource(TraceConfig_BuiltinDataSource&& from) noexcept
    : TraceConfig_BuiltinDataSource() {
    *this = ::std::move(from);
  }

  inline TraceConfig_BuiltinDataSource& operator=(const TraceConfig_BuiltinDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_BuiltinDataSource& operator=(TraceConfig_BuiltinDataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_BuiltinDataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_BuiltinDataSource* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_BuiltinDataSource*>(
               &_TraceConfig_BuiltinDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TraceConfig_BuiltinDataSource& a, TraceConfig_BuiltinDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_BuiltinDataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_BuiltinDataSource* New() const final {
    return CreateMaybeMessage<TraceConfig_BuiltinDataSource>(nullptr);
  }

  TraceConfig_BuiltinDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_BuiltinDataSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_BuiltinDataSource& from);
  void MergeFrom(const TraceConfig_BuiltinDataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_BuiltinDataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.BuiltinDataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisableClockSnapshottingFieldNumber = 1,
    kDisableTraceConfigFieldNumber = 2,
    kDisableSystemInfoFieldNumber = 3,
    kDisableServiceEventsFieldNumber = 4,
    kPrimaryTraceClockFieldNumber = 5,
    kSnapshotIntervalMsFieldNumber = 6,
  };
  // optional bool disable_clock_snapshotting = 1;
  bool has_disable_clock_snapshotting() const;
  void clear_disable_clock_snapshotting();
  bool disable_clock_snapshotting() const;
  void set_disable_clock_snapshotting(bool value);

  // optional bool disable_trace_config = 2;
  bool has_disable_trace_config() const;
  void clear_disable_trace_config();
  bool disable_trace_config() const;
  void set_disable_trace_config(bool value);

  // optional bool disable_system_info = 3;
  bool has_disable_system_info() const;
  void clear_disable_system_info();
  bool disable_system_info() const;
  void set_disable_system_info(bool value);

  // optional bool disable_service_events = 4;
  bool has_disable_service_events() const;
  void clear_disable_service_events();
  bool disable_service_events() const;
  void set_disable_service_events(bool value);

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
  bool has_primary_trace_clock() const;
  void clear_primary_trace_clock();
  ::perfetto::protos::BuiltinClock primary_trace_clock() const;
  void set_primary_trace_clock(::perfetto::protos::BuiltinClock value);

  // optional uint32 snapshot_interval_ms = 6;
  bool has_snapshot_interval_ms() const;
  void clear_snapshot_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 snapshot_interval_ms() const;
  void set_snapshot_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BuiltinDataSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool disable_clock_snapshotting_;
  bool disable_trace_config_;
  bool disable_system_info_;
  bool disable_service_events_;
  int primary_trace_clock_;
  ::PROTOBUF_NAMESPACE_ID::uint32 snapshot_interval_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_ProducerConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.ProducerConfig) */ {
 public:
  TraceConfig_ProducerConfig();
  virtual ~TraceConfig_ProducerConfig();

  TraceConfig_ProducerConfig(const TraceConfig_ProducerConfig& from);
  TraceConfig_ProducerConfig(TraceConfig_ProducerConfig&& from) noexcept
    : TraceConfig_ProducerConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_ProducerConfig& operator=(const TraceConfig_ProducerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_ProducerConfig& operator=(TraceConfig_ProducerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_ProducerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_ProducerConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_ProducerConfig*>(
               &_TraceConfig_ProducerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TraceConfig_ProducerConfig& a, TraceConfig_ProducerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_ProducerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_ProducerConfig* New() const final {
    return CreateMaybeMessage<TraceConfig_ProducerConfig>(nullptr);
  }

  TraceConfig_ProducerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_ProducerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_ProducerConfig& from);
  void MergeFrom(const TraceConfig_ProducerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_ProducerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.ProducerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFieldNumber = 1,
    kShmSizeKbFieldNumber = 2,
    kPageSizeKbFieldNumber = 3,
  };
  // optional string producer_name = 1;
  bool has_producer_name() const;
  void clear_producer_name();
  const std::string& producer_name() const;
  void set_producer_name(const std::string& value);
  void set_producer_name(std::string&& value);
  void set_producer_name(const char* value);
  void set_producer_name(const char* value, size_t size);
  std::string* mutable_producer_name();
  std::string* release_producer_name();
  void set_allocated_producer_name(std::string* producer_name);

  // optional uint32 shm_size_kb = 2;
  bool has_shm_size_kb() const;
  void clear_shm_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 shm_size_kb() const;
  void set_shm_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 page_size_kb = 3;
  bool has_page_size_kb() const;
  void clear_page_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_kb() const;
  void set_page_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.ProducerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shm_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_kb_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_StatsdMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.StatsdMetadata) */ {
 public:
  TraceConfig_StatsdMetadata();
  virtual ~TraceConfig_StatsdMetadata();

  TraceConfig_StatsdMetadata(const TraceConfig_StatsdMetadata& from);
  TraceConfig_StatsdMetadata(TraceConfig_StatsdMetadata&& from) noexcept
    : TraceConfig_StatsdMetadata() {
    *this = ::std::move(from);
  }

  inline TraceConfig_StatsdMetadata& operator=(const TraceConfig_StatsdMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_StatsdMetadata& operator=(TraceConfig_StatsdMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_StatsdMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_StatsdMetadata* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_StatsdMetadata*>(
               &_TraceConfig_StatsdMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TraceConfig_StatsdMetadata& a, TraceConfig_StatsdMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_StatsdMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_StatsdMetadata* New() const final {
    return CreateMaybeMessage<TraceConfig_StatsdMetadata>(nullptr);
  }

  TraceConfig_StatsdMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_StatsdMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_StatsdMetadata& from);
  void MergeFrom(const TraceConfig_StatsdMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_StatsdMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.StatsdMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeringAlertIdFieldNumber = 1,
    kTriggeringConfigIdFieldNumber = 3,
    kTriggeringSubscriptionIdFieldNumber = 4,
    kTriggeringConfigUidFieldNumber = 2,
  };
  // optional int64 triggering_alert_id = 1;
  bool has_triggering_alert_id() const;
  void clear_triggering_alert_id();
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_alert_id() const;
  void set_triggering_alert_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 triggering_config_id = 3;
  bool has_triggering_config_id() const;
  void clear_triggering_config_id();
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_config_id() const;
  void set_triggering_config_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 triggering_subscription_id = 4;
  bool has_triggering_subscription_id() const;
  void clear_triggering_subscription_id();
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_subscription_id() const;
  void set_triggering_subscription_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 triggering_config_uid = 2;
  bool has_triggering_config_uid() const;
  void clear_triggering_config_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 triggering_config_uid() const;
  void set_triggering_config_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.StatsdMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_alert_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_config_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 triggering_subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 triggering_config_uid_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_GuardrailOverrides :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.GuardrailOverrides) */ {
 public:
  TraceConfig_GuardrailOverrides();
  virtual ~TraceConfig_GuardrailOverrides();

  TraceConfig_GuardrailOverrides(const TraceConfig_GuardrailOverrides& from);
  TraceConfig_GuardrailOverrides(TraceConfig_GuardrailOverrides&& from) noexcept
    : TraceConfig_GuardrailOverrides() {
    *this = ::std::move(from);
  }

  inline TraceConfig_GuardrailOverrides& operator=(const TraceConfig_GuardrailOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_GuardrailOverrides& operator=(TraceConfig_GuardrailOverrides&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_GuardrailOverrides& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_GuardrailOverrides* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_GuardrailOverrides*>(
               &_TraceConfig_GuardrailOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TraceConfig_GuardrailOverrides& a, TraceConfig_GuardrailOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_GuardrailOverrides* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_GuardrailOverrides* New() const final {
    return CreateMaybeMessage<TraceConfig_GuardrailOverrides>(nullptr);
  }

  TraceConfig_GuardrailOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_GuardrailOverrides>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_GuardrailOverrides& from);
  void MergeFrom(const TraceConfig_GuardrailOverrides& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_GuardrailOverrides* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.GuardrailOverrides";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxUploadPerDayBytesFieldNumber = 1,
  };
  // optional uint64 max_upload_per_day_bytes = 1;
  bool has_max_upload_per_day_bytes() const;
  void clear_max_upload_per_day_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_upload_per_day_bytes() const;
  void set_max_upload_per_day_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.GuardrailOverrides)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_upload_per_day_bytes_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_TriggerConfig_Trigger :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TriggerConfig.Trigger) */ {
 public:
  TraceConfig_TriggerConfig_Trigger();
  virtual ~TraceConfig_TriggerConfig_Trigger();

  TraceConfig_TriggerConfig_Trigger(const TraceConfig_TriggerConfig_Trigger& from);
  TraceConfig_TriggerConfig_Trigger(TraceConfig_TriggerConfig_Trigger&& from) noexcept
    : TraceConfig_TriggerConfig_Trigger() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TriggerConfig_Trigger& operator=(const TraceConfig_TriggerConfig_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TriggerConfig_Trigger& operator=(TraceConfig_TriggerConfig_Trigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_TriggerConfig_Trigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_TriggerConfig_Trigger* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TriggerConfig_Trigger*>(
               &_TraceConfig_TriggerConfig_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TraceConfig_TriggerConfig_Trigger& a, TraceConfig_TriggerConfig_Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TriggerConfig_Trigger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_TriggerConfig_Trigger* New() const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig_Trigger>(nullptr);
  }

  TraceConfig_TriggerConfig_Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig_Trigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_TriggerConfig_Trigger& from);
  void MergeFrom(const TraceConfig_TriggerConfig_Trigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_TriggerConfig_Trigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.TriggerConfig.Trigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProducerNameRegexFieldNumber = 2,
    kStopDelayMsFieldNumber = 3,
    kMaxPer24HFieldNumber = 4,
    kSkipProbabilityFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string producer_name_regex = 2;
  bool has_producer_name_regex() const;
  void clear_producer_name_regex();
  const std::string& producer_name_regex() const;
  void set_producer_name_regex(const std::string& value);
  void set_producer_name_regex(std::string&& value);
  void set_producer_name_regex(const char* value);
  void set_producer_name_regex(const char* value, size_t size);
  std::string* mutable_producer_name_regex();
  std::string* release_producer_name_regex();
  void set_allocated_producer_name_regex(std::string* producer_name_regex);

  // optional uint32 stop_delay_ms = 3;
  bool has_stop_delay_ms() const;
  void clear_stop_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_delay_ms() const;
  void set_stop_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_per_24_h = 4;
  bool has_max_per_24_h() const;
  void clear_max_per_24_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_per_24_h() const;
  void set_max_per_24_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional double skip_probability = 5;
  bool has_skip_probability() const;
  void clear_skip_probability();
  double skip_probability() const;
  void set_skip_probability(double value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_regex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_delay_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_per_24_h_;
  double skip_probability_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_TriggerConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TriggerConfig) */ {
 public:
  TraceConfig_TriggerConfig();
  virtual ~TraceConfig_TriggerConfig();

  TraceConfig_TriggerConfig(const TraceConfig_TriggerConfig& from);
  TraceConfig_TriggerConfig(TraceConfig_TriggerConfig&& from) noexcept
    : TraceConfig_TriggerConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TriggerConfig& operator=(const TraceConfig_TriggerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TriggerConfig& operator=(TraceConfig_TriggerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_TriggerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_TriggerConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TriggerConfig*>(
               &_TraceConfig_TriggerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TraceConfig_TriggerConfig& a, TraceConfig_TriggerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TriggerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_TriggerConfig* New() const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig>(nullptr);
  }

  TraceConfig_TriggerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_TriggerConfig& from);
  void MergeFrom(const TraceConfig_TriggerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_TriggerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.TriggerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_TriggerConfig_Trigger Trigger;

  typedef TraceConfig_TriggerConfig_TriggerMode TriggerMode;
  static constexpr TriggerMode UNSPECIFIED =
    TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED;
  static constexpr TriggerMode START_TRACING =
    TraceConfig_TriggerConfig_TriggerMode_START_TRACING;
  static constexpr TriggerMode STOP_TRACING =
    TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING;
  static inline bool TriggerMode_IsValid(int value) {
    return TraceConfig_TriggerConfig_TriggerMode_IsValid(value);
  }
  static constexpr TriggerMode TriggerMode_MIN =
    TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MIN;
  static constexpr TriggerMode TriggerMode_MAX =
    TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MAX;
  static constexpr int TriggerMode_ARRAYSIZE =
    TraceConfig_TriggerConfig_TriggerMode_TriggerMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TriggerMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerMode_Name.");
    return TraceConfig_TriggerConfig_TriggerMode_Name(enum_t_value);
  }
  static inline bool TriggerMode_Parse(const std::string& name,
      TriggerMode* value) {
    return TraceConfig_TriggerConfig_TriggerMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTriggersFieldNumber = 2,
    kTriggerModeFieldNumber = 1,
    kTriggerTimeoutMsFieldNumber = 3,
  };
  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  int triggers_size() const;
  void clear_triggers();
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >*
      mutable_triggers();
  const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& triggers(int index) const;
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >&
      triggers() const;

  // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
  bool has_trigger_mode() const;
  void clear_trigger_mode();
  ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode trigger_mode() const;
  void set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value);

  // optional uint32 trigger_timeout_ms = 3;
  bool has_trigger_timeout_ms() const;
  void clear_trigger_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 trigger_timeout_ms() const;
  void set_trigger_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger > triggers_;
  int trigger_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trigger_timeout_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_IncrementalStateConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.IncrementalStateConfig) */ {
 public:
  TraceConfig_IncrementalStateConfig();
  virtual ~TraceConfig_IncrementalStateConfig();

  TraceConfig_IncrementalStateConfig(const TraceConfig_IncrementalStateConfig& from);
  TraceConfig_IncrementalStateConfig(TraceConfig_IncrementalStateConfig&& from) noexcept
    : TraceConfig_IncrementalStateConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_IncrementalStateConfig& operator=(const TraceConfig_IncrementalStateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_IncrementalStateConfig& operator=(TraceConfig_IncrementalStateConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_IncrementalStateConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_IncrementalStateConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_IncrementalStateConfig*>(
               &_TraceConfig_IncrementalStateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TraceConfig_IncrementalStateConfig& a, TraceConfig_IncrementalStateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_IncrementalStateConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_IncrementalStateConfig* New() const final {
    return CreateMaybeMessage<TraceConfig_IncrementalStateConfig>(nullptr);
  }

  TraceConfig_IncrementalStateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_IncrementalStateConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_IncrementalStateConfig& from);
  void MergeFrom(const TraceConfig_IncrementalStateConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_IncrementalStateConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.IncrementalStateConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearPeriodMsFieldNumber = 1,
  };
  // optional uint32 clear_period_ms = 1;
  bool has_clear_period_ms() const;
  void clear_clear_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 clear_period_ms() const;
  void set_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncrementalStateConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clear_period_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig_IncidentReportConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.IncidentReportConfig) */ {
 public:
  TraceConfig_IncidentReportConfig();
  virtual ~TraceConfig_IncidentReportConfig();

  TraceConfig_IncidentReportConfig(const TraceConfig_IncidentReportConfig& from);
  TraceConfig_IncidentReportConfig(TraceConfig_IncidentReportConfig&& from) noexcept
    : TraceConfig_IncidentReportConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_IncidentReportConfig& operator=(const TraceConfig_IncidentReportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_IncidentReportConfig& operator=(TraceConfig_IncidentReportConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig_IncidentReportConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig_IncidentReportConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_IncidentReportConfig*>(
               &_TraceConfig_IncidentReportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TraceConfig_IncidentReportConfig& a, TraceConfig_IncidentReportConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_IncidentReportConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig_IncidentReportConfig* New() const final {
    return CreateMaybeMessage<TraceConfig_IncidentReportConfig>(nullptr);
  }

  TraceConfig_IncidentReportConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig_IncidentReportConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig_IncidentReportConfig& from);
  void MergeFrom(const TraceConfig_IncidentReportConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig_IncidentReportConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig.IncidentReportConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationPackageFieldNumber = 1,
    kDestinationClassFieldNumber = 2,
    kPrivacyLevelFieldNumber = 3,
    kSkipDropboxFieldNumber = 4,
  };
  // optional string destination_package = 1;
  bool has_destination_package() const;
  void clear_destination_package();
  const std::string& destination_package() const;
  void set_destination_package(const std::string& value);
  void set_destination_package(std::string&& value);
  void set_destination_package(const char* value);
  void set_destination_package(const char* value, size_t size);
  std::string* mutable_destination_package();
  std::string* release_destination_package();
  void set_allocated_destination_package(std::string* destination_package);

  // optional string destination_class = 2;
  bool has_destination_class() const;
  void clear_destination_class();
  const std::string& destination_class() const;
  void set_destination_class(const std::string& value);
  void set_destination_class(std::string&& value);
  void set_destination_class(const char* value);
  void set_destination_class(const char* value, size_t size);
  std::string* mutable_destination_class();
  std::string* release_destination_class();
  void set_allocated_destination_class(std::string* destination_class);

  // optional int32 privacy_level = 3;
  bool has_privacy_level() const;
  void clear_privacy_level();
  ::PROTOBUF_NAMESPACE_ID::int32 privacy_level() const;
  void set_privacy_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool skip_dropbox = 4;
  bool has_skip_dropbox() const;
  void clear_skip_dropbox();
  bool skip_dropbox() const;
  void set_skip_dropbox(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncidentReportConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 privacy_level_;
  bool skip_dropbox_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig) */ {
 public:
  TraceConfig();
  virtual ~TraceConfig();

  TraceConfig(const TraceConfig& from);
  TraceConfig(TraceConfig&& from) noexcept
    : TraceConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig& operator=(const TraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig& operator=(TraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig*>(
               &_TraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TraceConfig& a, TraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig* New() const final {
    return CreateMaybeMessage<TraceConfig>(nullptr);
  }

  TraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceConfig& from);
  void MergeFrom(const TraceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_BufferConfig BufferConfig;
  typedef TraceConfig_DataSource DataSource;
  typedef TraceConfig_BuiltinDataSource BuiltinDataSource;
  typedef TraceConfig_ProducerConfig ProducerConfig;
  typedef TraceConfig_StatsdMetadata StatsdMetadata;
  typedef TraceConfig_GuardrailOverrides GuardrailOverrides;
  typedef TraceConfig_TriggerConfig TriggerConfig;
  typedef TraceConfig_IncrementalStateConfig IncrementalStateConfig;
  typedef TraceConfig_IncidentReportConfig IncidentReportConfig;

  typedef TraceConfig_LockdownModeOperation LockdownModeOperation;
  static constexpr LockdownModeOperation LOCKDOWN_UNCHANGED =
    TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED;
  static constexpr LockdownModeOperation LOCKDOWN_CLEAR =
    TraceConfig_LockdownModeOperation_LOCKDOWN_CLEAR;
  static constexpr LockdownModeOperation LOCKDOWN_SET =
    TraceConfig_LockdownModeOperation_LOCKDOWN_SET;
  static inline bool LockdownModeOperation_IsValid(int value) {
    return TraceConfig_LockdownModeOperation_IsValid(value);
  }
  static constexpr LockdownModeOperation LockdownModeOperation_MIN =
    TraceConfig_LockdownModeOperation_LockdownModeOperation_MIN;
  static constexpr LockdownModeOperation LockdownModeOperation_MAX =
    TraceConfig_LockdownModeOperation_LockdownModeOperation_MAX;
  static constexpr int LockdownModeOperation_ARRAYSIZE =
    TraceConfig_LockdownModeOperation_LockdownModeOperation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LockdownModeOperation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LockdownModeOperation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LockdownModeOperation_Name.");
    return TraceConfig_LockdownModeOperation_Name(enum_t_value);
  }
  static inline bool LockdownModeOperation_Parse(const std::string& name,
      LockdownModeOperation* value) {
    return TraceConfig_LockdownModeOperation_Parse(name, value);
  }

  typedef TraceConfig_CompressionType CompressionType;
  static constexpr CompressionType COMPRESSION_TYPE_UNSPECIFIED =
    TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED;
  static constexpr CompressionType COMPRESSION_TYPE_DEFLATE =
    TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE;
  static inline bool CompressionType_IsValid(int value) {
    return TraceConfig_CompressionType_IsValid(value);
  }
  static constexpr CompressionType CompressionType_MIN =
    TraceConfig_CompressionType_CompressionType_MIN;
  static constexpr CompressionType CompressionType_MAX =
    TraceConfig_CompressionType_CompressionType_MAX;
  static constexpr int CompressionType_ARRAYSIZE =
    TraceConfig_CompressionType_CompressionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CompressionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompressionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompressionType_Name.");
    return TraceConfig_CompressionType_Name(enum_t_value);
  }
  static inline bool CompressionType_Parse(const std::string& name,
      CompressionType* value) {
    return TraceConfig_CompressionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBuffersFieldNumber = 1,
    kDataSourcesFieldNumber = 2,
    kProducersFieldNumber = 6,
    kActivateTriggersFieldNumber = 18,
    kUniqueSessionNameFieldNumber = 22,
    kOutputPathFieldNumber = 29,
    kStatsdMetadataFieldNumber = 7,
    kGuardrailOverridesFieldNumber = 11,
    kTriggerConfigFieldNumber = 17,
    kBuiltinDataSourcesFieldNumber = 20,
    kIncrementalStateConfigFieldNumber = 21,
    kIncidentReportConfigFieldNumber = 25,
    kDurationMsFieldNumber = 3,
    kLockdownModeFieldNumber = 5,
    kFileWritePeriodMsFieldNumber = 9,
    kEnableExtraGuardrailsFieldNumber = 4,
    kWriteIntoFileFieldNumber = 8,
    kDeferredStartFieldNumber = 12,
    kNotifyTraceurFieldNumber = 16,
    kMaxFileSizeBytesFieldNumber = 10,
    kFlushPeriodMsFieldNumber = 13,
    kFlushTimeoutMsFieldNumber = 14,
    kAllowUserBuildTracingFieldNumber = 19,
    kDataSourceStopTimeoutMsFieldNumber = 23,
    kTraceUuidMsbFieldNumber = 27,
    kCompressionTypeFieldNumber = 24,
    kBugreportScoreFieldNumber = 30,
    kTraceUuidLsbFieldNumber = 28,
  };
  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  int buffers_size() const;
  void clear_buffers();
  ::perfetto::protos::TraceConfig_BufferConfig* mutable_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >*
      mutable_buffers();
  const ::perfetto::protos::TraceConfig_BufferConfig& buffers(int index) const;
  ::perfetto::protos::TraceConfig_BufferConfig* add_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >&
      buffers() const;

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  int data_sources_size() const;
  void clear_data_sources();
  ::perfetto::protos::TraceConfig_DataSource* mutable_data_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >*
      mutable_data_sources();
  const ::perfetto::protos::TraceConfig_DataSource& data_sources(int index) const;
  ::perfetto::protos::TraceConfig_DataSource* add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >&
      data_sources() const;

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  int producers_size() const;
  void clear_producers();
  ::perfetto::protos::TraceConfig_ProducerConfig* mutable_producers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >*
      mutable_producers();
  const ::perfetto::protos::TraceConfig_ProducerConfig& producers(int index) const;
  ::perfetto::protos::TraceConfig_ProducerConfig* add_producers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >&
      producers() const;

  // repeated string activate_triggers = 18;
  int activate_triggers_size() const;
  void clear_activate_triggers();
  const std::string& activate_triggers(int index) const;
  std::string* mutable_activate_triggers(int index);
  void set_activate_triggers(int index, const std::string& value);
  void set_activate_triggers(int index, std::string&& value);
  void set_activate_triggers(int index, const char* value);
  void set_activate_triggers(int index, const char* value, size_t size);
  std::string* add_activate_triggers();
  void add_activate_triggers(const std::string& value);
  void add_activate_triggers(std::string&& value);
  void add_activate_triggers(const char* value);
  void add_activate_triggers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& activate_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_activate_triggers();

  // optional string unique_session_name = 22;
  bool has_unique_session_name() const;
  void clear_unique_session_name();
  const std::string& unique_session_name() const;
  void set_unique_session_name(const std::string& value);
  void set_unique_session_name(std::string&& value);
  void set_unique_session_name(const char* value);
  void set_unique_session_name(const char* value, size_t size);
  std::string* mutable_unique_session_name();
  std::string* release_unique_session_name();
  void set_allocated_unique_session_name(std::string* unique_session_name);

  // optional string output_path = 29;
  bool has_output_path() const;
  void clear_output_path();
  const std::string& output_path() const;
  void set_output_path(const std::string& value);
  void set_output_path(std::string&& value);
  void set_output_path(const char* value);
  void set_output_path(const char* value, size_t size);
  std::string* mutable_output_path();
  std::string* release_output_path();
  void set_allocated_output_path(std::string* output_path);

  // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
  bool has_statsd_metadata() const;
  void clear_statsd_metadata();
  const ::perfetto::protos::TraceConfig_StatsdMetadata& statsd_metadata() const;
  ::perfetto::protos::TraceConfig_StatsdMetadata* release_statsd_metadata();
  ::perfetto::protos::TraceConfig_StatsdMetadata* mutable_statsd_metadata();
  void set_allocated_statsd_metadata(::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata);

  // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
  bool has_guardrail_overrides() const;
  void clear_guardrail_overrides();
  const ::perfetto::protos::TraceConfig_GuardrailOverrides& guardrail_overrides() const;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* release_guardrail_overrides();
  ::perfetto::protos::TraceConfig_GuardrailOverrides* mutable_guardrail_overrides();
  void set_allocated_guardrail_overrides(::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides);

  // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
  bool has_trigger_config() const;
  void clear_trigger_config();
  const ::perfetto::protos::TraceConfig_TriggerConfig& trigger_config() const;
  ::perfetto::protos::TraceConfig_TriggerConfig* release_trigger_config();
  ::perfetto::protos::TraceConfig_TriggerConfig* mutable_trigger_config();
  void set_allocated_trigger_config(::perfetto::protos::TraceConfig_TriggerConfig* trigger_config);

  // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
  bool has_builtin_data_sources() const;
  void clear_builtin_data_sources();
  const ::perfetto::protos::TraceConfig_BuiltinDataSource& builtin_data_sources() const;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* release_builtin_data_sources();
  ::perfetto::protos::TraceConfig_BuiltinDataSource* mutable_builtin_data_sources();
  void set_allocated_builtin_data_sources(::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources);

  // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
  bool has_incremental_state_config() const;
  void clear_incremental_state_config();
  const ::perfetto::protos::TraceConfig_IncrementalStateConfig& incremental_state_config() const;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* release_incremental_state_config();
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* mutable_incremental_state_config();
  void set_allocated_incremental_state_config(::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config);

  // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
  bool has_incident_report_config() const;
  void clear_incident_report_config();
  const ::perfetto::protos::TraceConfig_IncidentReportConfig& incident_report_config() const;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* release_incident_report_config();
  ::perfetto::protos::TraceConfig_IncidentReportConfig* mutable_incident_report_config();
  void set_allocated_incident_report_config(::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config);

  // optional uint32 duration_ms = 3;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
  bool has_lockdown_mode() const;
  void clear_lockdown_mode();
  ::perfetto::protos::TraceConfig_LockdownModeOperation lockdown_mode() const;
  void set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value);

  // optional uint32 file_write_period_ms = 9;
  bool has_file_write_period_ms() const;
  void clear_file_write_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_write_period_ms() const;
  void set_file_write_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool enable_extra_guardrails = 4;
  bool has_enable_extra_guardrails() const;
  void clear_enable_extra_guardrails();
  bool enable_extra_guardrails() const;
  void set_enable_extra_guardrails(bool value);

  // optional bool write_into_file = 8;
  bool has_write_into_file() const;
  void clear_write_into_file();
  bool write_into_file() const;
  void set_write_into_file(bool value);

  // optional bool deferred_start = 12;
  bool has_deferred_start() const;
  void clear_deferred_start();
  bool deferred_start() const;
  void set_deferred_start(bool value);

  // optional bool notify_traceur = 16;
  bool has_notify_traceur() const;
  void clear_notify_traceur();
  bool notify_traceur() const;
  void set_notify_traceur(bool value);

  // optional uint64 max_file_size_bytes = 10;
  bool has_max_file_size_bytes() const;
  void clear_max_file_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_file_size_bytes() const;
  void set_max_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flush_period_ms = 13;
  bool has_flush_period_ms() const;
  void clear_flush_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 flush_period_ms() const;
  void set_flush_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flush_timeout_ms = 14;
  bool has_flush_timeout_ms() const;
  void clear_flush_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 flush_timeout_ms() const;
  void set_flush_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool allow_user_build_tracing = 19;
  bool has_allow_user_build_tracing() const;
  void clear_allow_user_build_tracing();
  bool allow_user_build_tracing() const;
  void set_allow_user_build_tracing(bool value);

  // optional uint32 data_source_stop_timeout_ms = 23;
  bool has_data_source_stop_timeout_ms() const;
  void clear_data_source_stop_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_source_stop_timeout_ms() const;
  void set_data_source_stop_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int64 trace_uuid_msb = 27;
  bool has_trace_uuid_msb() const;
  void clear_trace_uuid_msb();
  ::PROTOBUF_NAMESPACE_ID::int64 trace_uuid_msb() const;
  void set_trace_uuid_msb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
  bool has_compression_type() const;
  void clear_compression_type();
  ::perfetto::protos::TraceConfig_CompressionType compression_type() const;
  void set_compression_type(::perfetto::protos::TraceConfig_CompressionType value);

  // optional int32 bugreport_score = 30;
  bool has_bugreport_score() const;
  void clear_bugreport_score();
  ::PROTOBUF_NAMESPACE_ID::int32 bugreport_score() const;
  void set_bugreport_score(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 trace_uuid_lsb = 28;
  bool has_trace_uuid_lsb() const;
  void clear_trace_uuid_lsb();
  ::PROTOBUF_NAMESPACE_ID::int64 trace_uuid_lsb() const;
  void set_trace_uuid_lsb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig > buffers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource > data_sources_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig > producers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> activate_triggers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_session_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_path_;
  ::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata_;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides_;
  ::perfetto::protos::TraceConfig_TriggerConfig* trigger_config_;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources_;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config_;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms_;
  int lockdown_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_write_period_ms_;
  bool enable_extra_guardrails_;
  bool write_into_file_;
  bool deferred_start_;
  bool notify_traceur_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_file_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flush_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flush_timeout_ms_;
  bool allow_user_build_tracing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_source_stop_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 trace_uuid_msb_;
  int compression_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 bugreport_score_;
  ::PROTOBUF_NAMESPACE_ID::int64 trace_uuid_lsb_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpuCounterDescriptor_GpuCounterSpec

// optional uint32 counter_id = 1;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_counter_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_counter_id() {
  counter_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterSpec::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
  return counter_id_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  counter_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
}

// optional string name = 2;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return name_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}

// optional string description = 3;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return description_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}

// optional int64 int_peak_value = 5;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_int_peak_value() const {
  return peak_value_case() == kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_int_peak_value() {
  _oneof_case_[0] = kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_int_peak_value() {
  if (has_int_peak_value()) {
    peak_value_.int_peak_value_ = PROTOBUF_LONGLONG(0);
    clear_has_peak_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GpuCounterDescriptor_GpuCounterSpec::int_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
  if (has_int_peak_value()) {
    return peak_value_.int_peak_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_int_peak_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int_peak_value()) {
    clear_peak_value();
    set_has_int_peak_value();
  }
  peak_value_.int_peak_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
}

// optional double double_peak_value = 6;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_double_peak_value() const {
  return peak_value_case() == kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_double_peak_value() {
  _oneof_case_[0] = kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_double_peak_value() {
  if (has_double_peak_value()) {
    peak_value_.double_peak_value_ = 0;
    clear_has_peak_value();
  }
}
inline double GpuCounterDescriptor_GpuCounterSpec::double_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
  if (has_double_peak_value()) {
    return peak_value_.double_peak_value_;
  }
  return 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_double_peak_value(double value) {
  if (!has_double_peak_value()) {
    clear_peak_value();
    set_has_double_peak_value();
  }
  peak_value_.double_peak_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
inline int GpuCounterDescriptor_GpuCounterSpec::numerator_units_size() const {
  return numerator_units_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_numerator_units() {
  numerator_units_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::numerator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(numerator_units_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  numerator_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  numerator_units_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::numerator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return numerator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_numerator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return &numerator_units_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
inline int GpuCounterDescriptor_GpuCounterSpec::denominator_units_size() const {
  return denominator_units_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_denominator_units() {
  denominator_units_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::denominator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(denominator_units_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  denominator_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  denominator_units_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::denominator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return denominator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_denominator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return &denominator_units_;
}

// optional bool select_by_default = 9;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_select_by_default() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_select_by_default() {
  select_by_default_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GpuCounterDescriptor_GpuCounterSpec::select_by_default() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
  return select_by_default_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_select_by_default(bool value) {
  _has_bits_[0] |= 0x00000008u;
  select_by_default_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
inline int GpuCounterDescriptor_GpuCounterSpec::groups_size() const {
  return groups_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_groups() {
  groups_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterSpec::groups(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup >(groups_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::groups() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return &groups_;
}

inline bool GpuCounterDescriptor_GpuCounterSpec::has_peak_value() const {
  return peak_value_case() != PEAK_VALUE_NOT_SET;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_has_peak_value() {
  _oneof_case_[0] = PEAK_VALUE_NOT_SET;
}
inline GpuCounterDescriptor_GpuCounterSpec::PeakValueCase GpuCounterDescriptor_GpuCounterSpec::peak_value_case() const {
  return GpuCounterDescriptor_GpuCounterSpec::PeakValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GpuCounterDescriptor_GpuCounterBlock

// optional uint32 block_id = 1;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_id() {
  block_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::block_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
  return block_id_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  block_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
}

// optional uint32 block_capacity = 2;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_capacity() {
  block_capacity_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::block_capacity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
  return block_capacity_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  block_capacity_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
}

// optional string name = 3;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return name_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}

// optional string description = 4;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return description_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}

// repeated uint32 counter_ids = 5;
inline int GpuCounterDescriptor_GpuCounterBlock::counter_ids_size() const {
  return counter_ids_.size();
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_counter_ids() {
  counter_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::counter_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return counter_ids_.Get(index);
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline void GpuCounterDescriptor_GpuCounterBlock::add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GpuCounterDescriptor_GpuCounterBlock::counter_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return counter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GpuCounterDescriptor_GpuCounterBlock::mutable_counter_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return &counter_ids_;
}

// -------------------------------------------------------------------

// GpuCounterDescriptor

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
inline int GpuCounterDescriptor::specs_size() const {
  return specs_.size();
}
inline void GpuCounterDescriptor::clear_specs() {
  specs_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::mutable_specs(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
GpuCounterDescriptor::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.specs)
  return &specs_;
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor::specs(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Get(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::add_specs() {
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
GpuCounterDescriptor::specs() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
inline int GpuCounterDescriptor::blocks_size() const {
  return blocks_.size();
}
inline void GpuCounterDescriptor::clear_blocks() {
  blocks_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
GpuCounterDescriptor::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return &blocks_;
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor::blocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Get(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::add_blocks() {
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
GpuCounterDescriptor::blocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_;
}

// optional uint64 min_sampling_period_ns = 3;
inline bool GpuCounterDescriptor::has_min_sampling_period_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor::clear_min_sampling_period_ns() {
  min_sampling_period_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuCounterDescriptor::min_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
  return min_sampling_period_ns_;
}
inline void GpuCounterDescriptor::set_min_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  min_sampling_period_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
}

// optional uint64 max_sampling_period_ns = 4;
inline bool GpuCounterDescriptor::has_max_sampling_period_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor::clear_max_sampling_period_ns() {
  max_sampling_period_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuCounterDescriptor::max_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
  return max_sampling_period_ns_;
}
inline void GpuCounterDescriptor::set_max_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  max_sampling_period_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
}

// optional bool supports_instrumented_sampling = 5;
inline bool GpuCounterDescriptor::has_supports_instrumented_sampling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor::clear_supports_instrumented_sampling() {
  supports_instrumented_sampling_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GpuCounterDescriptor::supports_instrumented_sampling() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
  return supports_instrumented_sampling_;
}
inline void GpuCounterDescriptor::set_supports_instrumented_sampling(bool value) {
  _has_bits_[0] |= 0x00000004u;
  supports_instrumented_sampling_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
}

// -------------------------------------------------------------------

// TrackEventCategory

// optional string name = 1;
inline bool TrackEventCategory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackEventCategory::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackEventCategory::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventCategory.name)
  return name_.GetNoArena();
}
inline void TrackEventCategory::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventCategory.name)
}
inline void TrackEventCategory::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TrackEventCategory.name)
}
inline void TrackEventCategory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventCategory.name)
}
inline void TrackEventCategory::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventCategory.name)
}
inline std::string* TrackEventCategory::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventCategory.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackEventCategory::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEventCategory.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackEventCategory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEventCategory.name)
}

// optional string description = 2;
inline bool TrackEventCategory::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackEventCategory::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackEventCategory::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventCategory.description)
  return description_.GetNoArena();
}
inline void TrackEventCategory::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventCategory.description)
}
inline void TrackEventCategory::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TrackEventCategory.description)
}
inline void TrackEventCategory::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventCategory.description)
}
inline void TrackEventCategory::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventCategory.description)
}
inline std::string* TrackEventCategory::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventCategory.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackEventCategory::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEventCategory.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackEventCategory::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEventCategory.description)
}

// repeated string tags = 3;
inline int TrackEventCategory::tags_size() const {
  return tags_.size();
}
inline void TrackEventCategory::clear_tags() {
  tags_.Clear();
}
inline const std::string& TrackEventCategory::tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventCategory.tags)
  return tags_.Get(index);
}
inline std::string* TrackEventCategory::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventCategory.tags)
  return tags_.Mutable(index);
}
inline void TrackEventCategory::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventCategory.tags)
  tags_.Mutable(index)->assign(value);
}
inline void TrackEventCategory::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventCategory.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventCategory::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventCategory.tags)
}
inline void TrackEventCategory::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventCategory.tags)
}
inline std::string* TrackEventCategory::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventCategory.tags)
  return tags_.Add();
}
inline void TrackEventCategory::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventCategory.tags)
}
inline void TrackEventCategory::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventCategory.tags)
}
inline void TrackEventCategory::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventCategory.tags)
}
inline void TrackEventCategory::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventCategory.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventCategory::tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventCategory.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventCategory::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventCategory.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// TrackEventDescriptor

// repeated .perfetto.protos.TrackEventCategory available_categories = 1;
inline int TrackEventDescriptor::available_categories_size() const {
  return available_categories_.size();
}
inline void TrackEventDescriptor::clear_available_categories() {
  available_categories_.Clear();
}
inline ::perfetto::protos::TrackEventCategory* TrackEventDescriptor::mutable_available_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventDescriptor.available_categories)
  return available_categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TrackEventCategory >*
TrackEventDescriptor::mutable_available_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventDescriptor.available_categories)
  return &available_categories_;
}
inline const ::perfetto::protos::TrackEventCategory& TrackEventDescriptor::available_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDescriptor.available_categories)
  return available_categories_.Get(index);
}
inline ::perfetto::protos::TrackEventCategory* TrackEventDescriptor::add_available_categories() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventDescriptor.available_categories)
  return available_categories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TrackEventCategory >&
TrackEventDescriptor::available_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventDescriptor.available_categories)
  return available_categories_;
}

// -------------------------------------------------------------------

// DataSourceDescriptor

// optional string name = 1;
inline bool DataSourceDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSourceDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSourceDescriptor::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.name)
  return name_.GetNoArena();
}
inline void DataSourceDescriptor::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceDescriptor.name)
}
inline void DataSourceDescriptor::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DataSourceDescriptor.name)
}
inline void DataSourceDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DataSourceDescriptor.name)
}
inline void DataSourceDescriptor::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DataSourceDescriptor.name)
}
inline std::string* DataSourceDescriptor::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceDescriptor.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataSourceDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceDescriptor.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceDescriptor.name)
}

// optional bool will_notify_on_stop = 2;
inline bool DataSourceDescriptor::has_will_notify_on_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataSourceDescriptor::clear_will_notify_on_stop() {
  will_notify_on_stop_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DataSourceDescriptor::will_notify_on_stop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.will_notify_on_stop)
  return will_notify_on_stop_;
}
inline void DataSourceDescriptor::set_will_notify_on_stop(bool value) {
  _has_bits_[0] |= 0x00000008u;
  will_notify_on_stop_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceDescriptor.will_notify_on_stop)
}

// optional bool will_notify_on_start = 3;
inline bool DataSourceDescriptor::has_will_notify_on_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataSourceDescriptor::clear_will_notify_on_start() {
  will_notify_on_start_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DataSourceDescriptor::will_notify_on_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.will_notify_on_start)
  return will_notify_on_start_;
}
inline void DataSourceDescriptor::set_will_notify_on_start(bool value) {
  _has_bits_[0] |= 0x00000010u;
  will_notify_on_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceDescriptor.will_notify_on_start)
}

// optional bool handles_incremental_state_clear = 4;
inline bool DataSourceDescriptor::has_handles_incremental_state_clear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataSourceDescriptor::clear_handles_incremental_state_clear() {
  handles_incremental_state_clear_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DataSourceDescriptor::handles_incremental_state_clear() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.handles_incremental_state_clear)
  return handles_incremental_state_clear_;
}
inline void DataSourceDescriptor::set_handles_incremental_state_clear(bool value) {
  _has_bits_[0] |= 0x00000020u;
  handles_incremental_state_clear_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceDescriptor.handles_incremental_state_clear)
}

// optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
inline bool DataSourceDescriptor::has_gpu_counter_descriptor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSourceDescriptor::clear_gpu_counter_descriptor() {
  if (gpu_counter_descriptor_ != nullptr) gpu_counter_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::GpuCounterDescriptor& DataSourceDescriptor::gpu_counter_descriptor() const {
  const ::perfetto::protos::GpuCounterDescriptor* p = gpu_counter_descriptor_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.gpu_counter_descriptor)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::GpuCounterDescriptor*>(
      &::perfetto::protos::_GpuCounterDescriptor_default_instance_);
}
inline ::perfetto::protos::GpuCounterDescriptor* DataSourceDescriptor::release_gpu_counter_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceDescriptor.gpu_counter_descriptor)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::GpuCounterDescriptor* temp = gpu_counter_descriptor_;
  gpu_counter_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::GpuCounterDescriptor* DataSourceDescriptor::mutable_gpu_counter_descriptor() {
  _has_bits_[0] |= 0x00000002u;
  if (gpu_counter_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor>(GetArenaNoVirtual());
    gpu_counter_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceDescriptor.gpu_counter_descriptor)
  return gpu_counter_descriptor_;
}
inline void DataSourceDescriptor::set_allocated_gpu_counter_descriptor(::perfetto::protos::GpuCounterDescriptor* gpu_counter_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_counter_descriptor_;
  }
  if (gpu_counter_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_counter_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_counter_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gpu_counter_descriptor_ = gpu_counter_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceDescriptor.gpu_counter_descriptor)
}

// optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
inline bool DataSourceDescriptor::has_track_event_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataSourceDescriptor::clear_track_event_descriptor() {
  if (track_event_descriptor_ != nullptr) track_event_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::TrackEventDescriptor& DataSourceDescriptor::track_event_descriptor() const {
  const ::perfetto::protos::TrackEventDescriptor* p = track_event_descriptor_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceDescriptor.track_event_descriptor)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TrackEventDescriptor*>(
      &::perfetto::protos::_TrackEventDescriptor_default_instance_);
}
inline ::perfetto::protos::TrackEventDescriptor* DataSourceDescriptor::release_track_event_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceDescriptor.track_event_descriptor)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TrackEventDescriptor* temp = track_event_descriptor_;
  track_event_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEventDescriptor* DataSourceDescriptor::mutable_track_event_descriptor() {
  _has_bits_[0] |= 0x00000004u;
  if (track_event_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEventDescriptor>(GetArenaNoVirtual());
    track_event_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceDescriptor.track_event_descriptor)
  return track_event_descriptor_;
}
inline void DataSourceDescriptor::set_allocated_track_event_descriptor(::perfetto::protos::TrackEventDescriptor* track_event_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete track_event_descriptor_;
  }
  if (track_event_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      track_event_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  track_event_descriptor_ = track_event_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceDescriptor.track_event_descriptor)
}

// -------------------------------------------------------------------

// TracingServiceState_Producer

// optional int32 id = 1;
inline bool TracingServiceState_Producer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState_Producer::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_Producer::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.id)
  return id_;
}
inline void TracingServiceState_Producer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.id)
}

// optional string name = 2;
inline bool TracingServiceState_Producer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingServiceState_Producer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TracingServiceState_Producer::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.name)
  return name_.GetNoArena();
}
inline void TracingServiceState_Producer::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TracingServiceState.Producer.name)
}
inline std::string* TracingServiceState_Producer::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.Producer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TracingServiceState_Producer::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingServiceState.Producer.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TracingServiceState_Producer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingServiceState.Producer.name)
}

// optional int32 uid = 3;
inline bool TracingServiceState_Producer::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracingServiceState_Producer::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_Producer::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.uid)
  return uid_;
}
inline void TracingServiceState_Producer::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.uid)
}

// -------------------------------------------------------------------

// TracingServiceState_DataSource

// optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
inline bool TracingServiceState_DataSource::has_ds_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingServiceState_DataSource::clear_ds_descriptor() {
  if (ds_descriptor_ != nullptr) ds_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::DataSourceDescriptor& TracingServiceState_DataSource::ds_descriptor() const {
  const ::perfetto::protos::DataSourceDescriptor* p = ds_descriptor_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::DataSourceDescriptor*>(
      &::perfetto::protos::_DataSourceDescriptor_default_instance_);
}
inline ::perfetto::protos::DataSourceDescriptor* TracingServiceState_DataSource::release_ds_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::DataSourceDescriptor* temp = ds_descriptor_;
  ds_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::DataSourceDescriptor* TracingServiceState_DataSource::mutable_ds_descriptor() {
  _has_bits_[0] |= 0x00000001u;
  if (ds_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::DataSourceDescriptor>(GetArenaNoVirtual());
    ds_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  return ds_descriptor_;
}
inline void TracingServiceState_DataSource::set_allocated_ds_descriptor(::perfetto::protos::DataSourceDescriptor* ds_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ds_descriptor_;
  }
  if (ds_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ds_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ds_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ds_descriptor_ = ds_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
}

// optional int32 producer_id = 2;
inline bool TracingServiceState_DataSource::has_producer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState_DataSource::clear_producer_id() {
  producer_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_DataSource::producer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.DataSource.producer_id)
  return producer_id_;
}
inline void TracingServiceState_DataSource::set_producer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  producer_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.DataSource.producer_id)
}

// -------------------------------------------------------------------

// TracingServiceState

// repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
inline int TracingServiceState::producers_size() const {
  return producers_.size();
}
inline void TracingServiceState::clear_producers() {
  producers_.Clear();
}
inline ::perfetto::protos::TracingServiceState_Producer* TracingServiceState::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.producers)
  return producers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >*
TracingServiceState::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TracingServiceState.producers)
  return &producers_;
}
inline const ::perfetto::protos::TracingServiceState_Producer& TracingServiceState::producers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.producers)
  return producers_.Get(index);
}
inline ::perfetto::protos::TracingServiceState_Producer* TracingServiceState::add_producers() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TracingServiceState.producers)
  return producers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >&
TracingServiceState::producers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TracingServiceState.producers)
  return producers_;
}

// repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
inline int TracingServiceState::data_sources_size() const {
  return data_sources_.size();
}
inline void TracingServiceState::clear_data_sources() {
  data_sources_.Clear();
}
inline ::perfetto::protos::TracingServiceState_DataSource* TracingServiceState::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >*
TracingServiceState::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TracingServiceState.data_sources)
  return &data_sources_;
}
inline const ::perfetto::protos::TracingServiceState_DataSource& TracingServiceState::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Get(index);
}
inline ::perfetto::protos::TracingServiceState_DataSource* TracingServiceState::add_data_sources() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >&
TracingServiceState::data_sources() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_;
}

// optional int32 num_sessions = 3;
inline bool TracingServiceState::has_num_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingServiceState::clear_num_sessions() {
  num_sessions_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState::num_sessions() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.num_sessions)
  return num_sessions_;
}
inline void TracingServiceState::set_num_sessions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_sessions_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.num_sessions)
}

// optional int32 num_sessions_started = 4;
inline bool TracingServiceState::has_num_sessions_started() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState::clear_num_sessions_started() {
  num_sessions_started_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState::num_sessions_started() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.num_sessions_started)
  return num_sessions_started_;
}
inline void TracingServiceState::set_num_sessions_started(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_sessions_started_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.num_sessions_started)
}

// -------------------------------------------------------------------

// AndroidLogConfig

// repeated .perfetto.protos.AndroidLogId log_ids = 1;
inline int AndroidLogConfig::log_ids_size() const {
  return log_ids_.size();
}
inline void AndroidLogConfig::clear_log_ids() {
  log_ids_.Clear();
}
inline ::perfetto::protos::AndroidLogId AndroidLogConfig::log_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogConfig.log_ids)
  return static_cast< ::perfetto::protos::AndroidLogId >(log_ids_.Get(index));
}
inline void AndroidLogConfig::set_log_ids(int index, ::perfetto::protos::AndroidLogId value) {
  assert(::perfetto::protos::AndroidLogId_IsValid(value));
  log_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogConfig.log_ids)
}
inline void AndroidLogConfig::add_log_ids(::perfetto::protos::AndroidLogId value) {
  assert(::perfetto::protos::AndroidLogId_IsValid(value));
  log_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidLogConfig.log_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AndroidLogConfig::log_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidLogConfig.log_ids)
  return log_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AndroidLogConfig::mutable_log_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidLogConfig.log_ids)
  return &log_ids_;
}

// optional .perfetto.protos.AndroidLogPriority min_prio = 3;
inline bool AndroidLogConfig::has_min_prio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidLogConfig::clear_min_prio() {
  min_prio_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::AndroidLogPriority AndroidLogConfig::min_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogConfig.min_prio)
  return static_cast< ::perfetto::protos::AndroidLogPriority >(min_prio_);
}
inline void AndroidLogConfig::set_min_prio(::perfetto::protos::AndroidLogPriority value) {
  assert(::perfetto::protos::AndroidLogPriority_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  min_prio_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogConfig.min_prio)
}

// repeated string filter_tags = 4;
inline int AndroidLogConfig::filter_tags_size() const {
  return filter_tags_.size();
}
inline void AndroidLogConfig::clear_filter_tags() {
  filter_tags_.Clear();
}
inline const std::string& AndroidLogConfig::filter_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogConfig.filter_tags)
  return filter_tags_.Get(index);
}
inline std::string* AndroidLogConfig::mutable_filter_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogConfig.filter_tags)
  return filter_tags_.Mutable(index);
}
inline void AndroidLogConfig::set_filter_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogConfig.filter_tags)
  filter_tags_.Mutable(index)->assign(value);
}
inline void AndroidLogConfig::set_filter_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogConfig.filter_tags)
  filter_tags_.Mutable(index)->assign(std::move(value));
}
inline void AndroidLogConfig::set_filter_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline void AndroidLogConfig::set_filter_tags(int index, const char* value, size_t size) {
  filter_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline std::string* AndroidLogConfig::add_filter_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.AndroidLogConfig.filter_tags)
  return filter_tags_.Add();
}
inline void AndroidLogConfig::add_filter_tags(const std::string& value) {
  filter_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline void AndroidLogConfig::add_filter_tags(std::string&& value) {
  filter_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline void AndroidLogConfig::add_filter_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline void AndroidLogConfig::add_filter_tags(const char* value, size_t size) {
  filter_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.AndroidLogConfig.filter_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidLogConfig::filter_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidLogConfig.filter_tags)
  return filter_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidLogConfig::mutable_filter_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidLogConfig.filter_tags)
  return &filter_tags_;
}

// -------------------------------------------------------------------

// AndroidPolledStateConfig

// optional uint32 poll_ms = 1;
inline bool AndroidPolledStateConfig::has_poll_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidPolledStateConfig::clear_poll_ms() {
  poll_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AndroidPolledStateConfig::poll_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidPolledStateConfig.poll_ms)
  return poll_ms_;
}
inline void AndroidPolledStateConfig::set_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  poll_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidPolledStateConfig.poll_ms)
}

// -------------------------------------------------------------------

// PackagesListConfig

// repeated string package_name_filter = 1;
inline int PackagesListConfig::package_name_filter_size() const {
  return package_name_filter_.size();
}
inline void PackagesListConfig::clear_package_name_filter() {
  package_name_filter_.Clear();
}
inline const std::string& PackagesListConfig::package_name_filter(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PackagesListConfig.package_name_filter)
  return package_name_filter_.Get(index);
}
inline std::string* PackagesListConfig::mutable_package_name_filter(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PackagesListConfig.package_name_filter)
  return package_name_filter_.Mutable(index);
}
inline void PackagesListConfig::set_package_name_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PackagesListConfig.package_name_filter)
  package_name_filter_.Mutable(index)->assign(value);
}
inline void PackagesListConfig::set_package_name_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PackagesListConfig.package_name_filter)
  package_name_filter_.Mutable(index)->assign(std::move(value));
}
inline void PackagesListConfig::set_package_name_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  package_name_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline void PackagesListConfig::set_package_name_filter(int index, const char* value, size_t size) {
  package_name_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline std::string* PackagesListConfig::add_package_name_filter() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PackagesListConfig.package_name_filter)
  return package_name_filter_.Add();
}
inline void PackagesListConfig::add_package_name_filter(const std::string& value) {
  package_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline void PackagesListConfig::add_package_name_filter(std::string&& value) {
  package_name_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline void PackagesListConfig::add_package_name_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  package_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline void PackagesListConfig::add_package_name_filter(const char* value, size_t size) {
  package_name_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PackagesListConfig.package_name_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackagesListConfig::package_name_filter() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PackagesListConfig.package_name_filter)
  return package_name_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackagesListConfig::mutable_package_name_filter() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PackagesListConfig.package_name_filter)
  return &package_name_filter_;
}

// -------------------------------------------------------------------

// ChromeConfig

// optional string trace_config = 1;
inline bool ChromeConfig::has_trace_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeConfig::clear_trace_config() {
  trace_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeConfig::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.GetNoArena();
}
inline void ChromeConfig::set_trace_config(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeConfig.trace_config)
}
inline std::string* ChromeConfig::mutable_trace_config() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeConfig::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeConfig.trace_config)
  if (!has_trace_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeConfig::set_allocated_trace_config(std::string* trace_config) {
  if (trace_config != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_config);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeConfig.trace_config)
}

// optional bool privacy_filtering_enabled = 2;
inline bool ChromeConfig::has_privacy_filtering_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeConfig::clear_privacy_filtering_enabled() {
  privacy_filtering_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChromeConfig::privacy_filtering_enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
  return privacy_filtering_enabled_;
}
inline void ChromeConfig::set_privacy_filtering_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  privacy_filtering_enabled_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
}

// optional bool convert_to_legacy_json = 3;
inline bool ChromeConfig::has_convert_to_legacy_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeConfig::clear_convert_to_legacy_json() {
  convert_to_legacy_json_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChromeConfig::convert_to_legacy_json() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.convert_to_legacy_json)
  return convert_to_legacy_json_;
}
inline void ChromeConfig::set_convert_to_legacy_json(bool value) {
  _has_bits_[0] |= 0x00000008u;
  convert_to_legacy_json_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.convert_to_legacy_json)
}

// optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
inline bool ChromeConfig::has_client_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeConfig::clear_client_priority() {
  client_priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::ChromeConfig_ClientPriority ChromeConfig::client_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.client_priority)
  return static_cast< ::perfetto::protos::ChromeConfig_ClientPriority >(client_priority_);
}
inline void ChromeConfig::set_client_priority(::perfetto::protos::ChromeConfig_ClientPriority value) {
  assert(::perfetto::protos::ChromeConfig_ClientPriority_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  client_priority_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.client_priority)
}

// optional string json_agent_label_filter = 5;
inline bool ChromeConfig::has_json_agent_label_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeConfig::clear_json_agent_label_filter() {
  json_agent_label_filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeConfig::json_agent_label_filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.json_agent_label_filter)
  return json_agent_label_filter_.GetNoArena();
}
inline void ChromeConfig::set_json_agent_label_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline std::string* ChromeConfig::mutable_json_agent_label_filter() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeConfig.json_agent_label_filter)
  return json_agent_label_filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeConfig::release_json_agent_label_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeConfig.json_agent_label_filter)
  if (!has_json_agent_label_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return json_agent_label_filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeConfig::set_allocated_json_agent_label_filter(std::string* json_agent_label_filter) {
  if (json_agent_label_filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_agent_label_filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_agent_label_filter);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeConfig.json_agent_label_filter)
}

// -------------------------------------------------------------------

// FtraceConfig_CompactSchedConfig

// optional bool enabled = 1;
inline bool FtraceConfig_CompactSchedConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceConfig_CompactSchedConfig::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FtraceConfig_CompactSchedConfig::enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
  return enabled_;
}
inline void FtraceConfig_CompactSchedConfig::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
}

// -------------------------------------------------------------------

// FtraceConfig

// repeated string ftrace_events = 1;
inline int FtraceConfig::ftrace_events_size() const {
  return ftrace_events_.size();
}
inline void FtraceConfig::clear_ftrace_events() {
  ftrace_events_.Clear();
}
inline const std::string& FtraceConfig::ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Get(index);
}
inline std::string* FtraceConfig::mutable_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Mutable(index);
}
inline void FtraceConfig::set_ftrace_events(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_ftrace_events(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ftrace_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value, size_t size) {
  ftrace_events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline std::string* FtraceConfig::add_ftrace_events() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Add();
}
inline void FtraceConfig::add_ftrace_events(const std::string& value) {
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(std::string&& value) {
  ftrace_events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value, size_t size) {
  ftrace_events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.ftrace_events)
  return &ftrace_events_;
}

// repeated string atrace_categories = 2;
inline int FtraceConfig::atrace_categories_size() const {
  return atrace_categories_.size();
}
inline void FtraceConfig::clear_atrace_categories() {
  atrace_categories_.Clear();
}
inline const std::string& FtraceConfig::atrace_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Get(index);
}
inline std::string* FtraceConfig::mutable_atrace_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Mutable(index);
}
inline void FtraceConfig::set_atrace_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_atrace_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value, size_t size) {
  atrace_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline std::string* FtraceConfig::add_atrace_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Add();
}
inline void FtraceConfig::add_atrace_categories(const std::string& value) {
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(std::string&& value) {
  atrace_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value, size_t size) {
  atrace_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_atrace_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_categories)
  return &atrace_categories_;
}

// repeated string atrace_apps = 3;
inline int FtraceConfig::atrace_apps_size() const {
  return atrace_apps_.size();
}
inline void FtraceConfig::clear_atrace_apps() {
  atrace_apps_.Clear();
}
inline const std::string& FtraceConfig::atrace_apps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Get(index);
}
inline std::string* FtraceConfig::mutable_atrace_apps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Mutable(index);
}
inline void FtraceConfig::set_atrace_apps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_atrace_apps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_apps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value, size_t size) {
  atrace_apps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline std::string* FtraceConfig::add_atrace_apps() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Add();
}
inline void FtraceConfig::add_atrace_apps(const std::string& value) {
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(std::string&& value) {
  atrace_apps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value, size_t size) {
  atrace_apps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_apps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_atrace_apps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_apps)
  return &atrace_apps_;
}

// optional uint32 buffer_size_kb = 10;
inline bool FtraceConfig::has_buffer_size_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FtraceConfig::clear_buffer_size_kb() {
  buffer_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceConfig::buffer_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.buffer_size_kb)
  return buffer_size_kb_;
}
inline void FtraceConfig::set_buffer_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  buffer_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.buffer_size_kb)
}

// optional uint32 drain_period_ms = 11;
inline bool FtraceConfig::has_drain_period_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FtraceConfig::clear_drain_period_ms() {
  drain_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceConfig::drain_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.drain_period_ms)
  return drain_period_ms_;
}
inline void FtraceConfig::set_drain_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  drain_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.drain_period_ms)
}

// optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
inline bool FtraceConfig::has_compact_sched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceConfig::clear_compact_sched() {
  if (compact_sched_ != nullptr) compact_sched_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::FtraceConfig_CompactSchedConfig& FtraceConfig::compact_sched() const {
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig* p = compact_sched_;
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.compact_sched)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::FtraceConfig_CompactSchedConfig*>(
      &::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_);
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.compact_sched)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* temp = compact_sched_;
  compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::mutable_compact_sched() {
  _has_bits_[0] |= 0x00000001u;
  if (compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(GetArenaNoVirtual());
    compact_sched_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.compact_sched)
  return compact_sched_;
}
inline void FtraceConfig::set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.compact_sched)
}

// optional bool symbolize_ksyms = 13;
inline bool FtraceConfig::has_symbolize_ksyms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtraceConfig::clear_symbolize_ksyms() {
  symbolize_ksyms_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FtraceConfig::symbolize_ksyms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.symbolize_ksyms)
  return symbolize_ksyms_;
}
inline void FtraceConfig::set_symbolize_ksyms(bool value) {
  _has_bits_[0] |= 0x00000002u;
  symbolize_ksyms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.symbolize_ksyms)
}

// optional bool initialize_ksyms_synchronously_for_testing = 14;
inline bool FtraceConfig::has_initialize_ksyms_synchronously_for_testing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FtraceConfig::clear_initialize_ksyms_synchronously_for_testing() {
  initialize_ksyms_synchronously_for_testing_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FtraceConfig::initialize_ksyms_synchronously_for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
  return initialize_ksyms_synchronously_for_testing_;
}
inline void FtraceConfig::set_initialize_ksyms_synchronously_for_testing(bool value) {
  _has_bits_[0] |= 0x00000004u;
  initialize_ksyms_synchronously_for_testing_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
}

// -------------------------------------------------------------------

// GpuCounterConfig

// optional uint64 counter_period_ns = 1;
inline bool GpuCounterConfig::has_counter_period_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterConfig::clear_counter_period_ns() {
  counter_period_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuCounterConfig::counter_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterConfig.counter_period_ns)
  return counter_period_ns_;
}
inline void GpuCounterConfig::set_counter_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  counter_period_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterConfig.counter_period_ns)
}

// repeated uint32 counter_ids = 2;
inline int GpuCounterConfig::counter_ids_size() const {
  return counter_ids_.size();
}
inline void GpuCounterConfig::clear_counter_ids() {
  counter_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterConfig::counter_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterConfig.counter_ids)
  return counter_ids_.Get(index);
}
inline void GpuCounterConfig::set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterConfig.counter_ids)
}
inline void GpuCounterConfig::add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterConfig.counter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GpuCounterConfig::counter_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterConfig.counter_ids)
  return counter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GpuCounterConfig::mutable_counter_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterConfig.counter_ids)
  return &counter_ids_;
}

// optional bool instrumented_sampling = 3;
inline bool GpuCounterConfig::has_instrumented_sampling() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterConfig::clear_instrumented_sampling() {
  instrumented_sampling_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GpuCounterConfig::instrumented_sampling() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterConfig.instrumented_sampling)
  return instrumented_sampling_;
}
inline void GpuCounterConfig::set_instrumented_sampling(bool value) {
  _has_bits_[0] |= 0x00000002u;
  instrumented_sampling_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterConfig.instrumented_sampling)
}

// optional bool fix_gpu_clock = 4;
inline bool GpuCounterConfig::has_fix_gpu_clock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterConfig::clear_fix_gpu_clock() {
  fix_gpu_clock_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GpuCounterConfig::fix_gpu_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterConfig.fix_gpu_clock)
  return fix_gpu_clock_;
}
inline void GpuCounterConfig::set_fix_gpu_clock(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fix_gpu_clock_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterConfig.fix_gpu_clock)
}

// -------------------------------------------------------------------

// VulkanMemoryConfig

// optional bool track_driver_memory_usage = 1;
inline bool VulkanMemoryConfig::has_track_driver_memory_usage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VulkanMemoryConfig::clear_track_driver_memory_usage() {
  track_driver_memory_usage_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool VulkanMemoryConfig::track_driver_memory_usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryConfig.track_driver_memory_usage)
  return track_driver_memory_usage_;
}
inline void VulkanMemoryConfig::set_track_driver_memory_usage(bool value) {
  _has_bits_[0] |= 0x00000001u;
  track_driver_memory_usage_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryConfig.track_driver_memory_usage)
}

// optional bool track_device_memory_usage = 2;
inline bool VulkanMemoryConfig::has_track_device_memory_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VulkanMemoryConfig::clear_track_device_memory_usage() {
  track_device_memory_usage_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool VulkanMemoryConfig::track_device_memory_usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryConfig.track_device_memory_usage)
  return track_device_memory_usage_;
}
inline void VulkanMemoryConfig::set_track_device_memory_usage(bool value) {
  _has_bits_[0] |= 0x00000002u;
  track_device_memory_usage_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryConfig.track_device_memory_usage)
}

// -------------------------------------------------------------------

// InodeFileConfig_MountPointMappingEntry

// optional string mountpoint = 1;
inline bool InodeFileConfig_MountPointMappingEntry::has_mountpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InodeFileConfig_MountPointMappingEntry::clear_mountpoint() {
  mountpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::mountpoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  return mountpoint_.GetNoArena();
}
inline void InodeFileConfig_MountPointMappingEntry::set_mountpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}
inline void InodeFileConfig_MountPointMappingEntry::set_mountpoint(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mountpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}
inline void InodeFileConfig_MountPointMappingEntry::set_mountpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}
inline void InodeFileConfig_MountPointMappingEntry::set_mountpoint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}
inline std::string* InodeFileConfig_MountPointMappingEntry::mutable_mountpoint() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  return mountpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InodeFileConfig_MountPointMappingEntry::release_mountpoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  if (!has_mountpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mountpoint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InodeFileConfig_MountPointMappingEntry::set_allocated_mountpoint(std::string* mountpoint) {
  if (mountpoint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mountpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mountpoint);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}

// repeated string scan_roots = 2;
inline int InodeFileConfig_MountPointMappingEntry::scan_roots_size() const {
  return scan_roots_.size();
}
inline void InodeFileConfig_MountPointMappingEntry::clear_scan_roots() {
  scan_roots_.Clear();
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::scan_roots(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return scan_roots_.Get(index);
}
inline std::string* InodeFileConfig_MountPointMappingEntry::mutable_scan_roots(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return scan_roots_.Mutable(index);
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  scan_roots_.Mutable(index)->assign(value);
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  scan_roots_.Mutable(index)->assign(std::move(value));
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scan_roots_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const char* value, size_t size) {
  scan_roots_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline std::string* InodeFileConfig_MountPointMappingEntry::add_scan_roots() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return scan_roots_.Add();
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const std::string& value) {
  scan_roots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(std::string&& value) {
  scan_roots_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scan_roots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const char* value, size_t size) {
  scan_roots_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig_MountPointMappingEntry::scan_roots() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return scan_roots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileConfig_MountPointMappingEntry::mutable_scan_roots() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return &scan_roots_;
}

// -------------------------------------------------------------------

// InodeFileConfig

// optional uint32 scan_interval_ms = 1;
inline bool InodeFileConfig::has_scan_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InodeFileConfig::clear_scan_interval_ms() {
  scan_interval_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InodeFileConfig::scan_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_interval_ms)
  return scan_interval_ms_;
}
inline void InodeFileConfig::set_scan_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  scan_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_interval_ms)
}

// optional uint32 scan_delay_ms = 2;
inline bool InodeFileConfig::has_scan_delay_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InodeFileConfig::clear_scan_delay_ms() {
  scan_delay_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InodeFileConfig::scan_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_delay_ms)
  return scan_delay_ms_;
}
inline void InodeFileConfig::set_scan_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scan_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_delay_ms)
}

// optional uint32 scan_batch_size = 3;
inline bool InodeFileConfig::has_scan_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InodeFileConfig::clear_scan_batch_size() {
  scan_batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InodeFileConfig::scan_batch_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_batch_size)
  return scan_batch_size_;
}
inline void InodeFileConfig::set_scan_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  scan_batch_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_batch_size)
}

// optional bool do_not_scan = 4;
inline bool InodeFileConfig::has_do_not_scan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InodeFileConfig::clear_do_not_scan() {
  do_not_scan_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InodeFileConfig::do_not_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.do_not_scan)
  return do_not_scan_;
}
inline void InodeFileConfig::set_do_not_scan(bool value) {
  _has_bits_[0] |= 0x00000008u;
  do_not_scan_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.do_not_scan)
}

// repeated string scan_mount_points = 5;
inline int InodeFileConfig::scan_mount_points_size() const {
  return scan_mount_points_.size();
}
inline void InodeFileConfig::clear_scan_mount_points() {
  scan_mount_points_.Clear();
}
inline const std::string& InodeFileConfig::scan_mount_points(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_mount_points)
  return scan_mount_points_.Get(index);
}
inline std::string* InodeFileConfig::mutable_scan_mount_points(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.scan_mount_points)
  return scan_mount_points_.Mutable(index);
}
inline void InodeFileConfig::set_scan_mount_points(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_mount_points)
  scan_mount_points_.Mutable(index)->assign(value);
}
inline void InodeFileConfig::set_scan_mount_points(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_mount_points)
  scan_mount_points_.Mutable(index)->assign(std::move(value));
}
inline void InodeFileConfig::set_scan_mount_points(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scan_mount_points_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::set_scan_mount_points(int index, const char* value, size_t size) {
  scan_mount_points_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline std::string* InodeFileConfig::add_scan_mount_points() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileConfig.scan_mount_points)
  return scan_mount_points_.Add();
}
inline void InodeFileConfig::add_scan_mount_points(const std::string& value) {
  scan_mount_points_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(std::string&& value) {
  scan_mount_points_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scan_mount_points_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(const char* value, size_t size) {
  scan_mount_points_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig::scan_mount_points() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.scan_mount_points)
  return scan_mount_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileConfig::mutable_scan_mount_points() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.scan_mount_points)
  return &scan_mount_points_;
}

// repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
inline int InodeFileConfig::mount_point_mapping_size() const {
  return mount_point_mapping_.size();
}
inline void InodeFileConfig::clear_mount_point_mapping() {
  mount_point_mapping_.Clear();
}
inline ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* InodeFileConfig::mutable_mount_point_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return mount_point_mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >*
InodeFileConfig::mutable_mount_point_mapping() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return &mount_point_mapping_;
}
inline const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& InodeFileConfig::mount_point_mapping(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return mount_point_mapping_.Get(index);
}
inline ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* InodeFileConfig::add_mount_point_mapping() {
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return mount_point_mapping_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >&
InodeFileConfig::mount_point_mapping() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return mount_point_mapping_;
}

// -------------------------------------------------------------------

// ConsoleConfig

// optional .perfetto.protos.ConsoleConfig.Output output = 1;
inline bool ConsoleConfig::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsoleConfig::clear_output() {
  output_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ConsoleConfig_Output ConsoleConfig::output() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ConsoleConfig.output)
  return static_cast< ::perfetto::protos::ConsoleConfig_Output >(output_);
}
inline void ConsoleConfig::set_output(::perfetto::protos::ConsoleConfig_Output value) {
  assert(::perfetto::protos::ConsoleConfig_Output_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ConsoleConfig.output)
}

// optional bool enable_colors = 2;
inline bool ConsoleConfig::has_enable_colors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsoleConfig::clear_enable_colors() {
  enable_colors_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConsoleConfig::enable_colors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ConsoleConfig.enable_colors)
  return enable_colors_;
}
inline void ConsoleConfig::set_enable_colors(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_colors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ConsoleConfig.enable_colors)
}

// -------------------------------------------------------------------

// InterceptorConfig

// optional string name = 1;
inline bool InterceptorConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterceptorConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InterceptorConfig::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InterceptorConfig.name)
  return name_.GetNoArena();
}
inline void InterceptorConfig::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InterceptorConfig.name)
}
inline std::string* InterceptorConfig::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InterceptorConfig.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterceptorConfig::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InterceptorConfig.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterceptorConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InterceptorConfig.name)
}

// optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
inline bool InterceptorConfig::has_console_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterceptorConfig::clear_console_config() {
  if (console_config_ != nullptr) console_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::ConsoleConfig& InterceptorConfig::console_config() const {
  const ::perfetto::protos::ConsoleConfig* p = console_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.InterceptorConfig.console_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ConsoleConfig*>(
      &::perfetto::protos::_ConsoleConfig_default_instance_);
}
inline ::perfetto::protos::ConsoleConfig* InterceptorConfig::release_console_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InterceptorConfig.console_config)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ConsoleConfig* temp = console_config_;
  console_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ConsoleConfig* InterceptorConfig::mutable_console_config() {
  _has_bits_[0] |= 0x00000002u;
  if (console_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ConsoleConfig>(GetArenaNoVirtual());
    console_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InterceptorConfig.console_config)
  return console_config_;
}
inline void InterceptorConfig::set_allocated_console_config(::perfetto::protos::ConsoleConfig* console_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete console_config_;
  }
  if (console_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      console_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  console_config_ = console_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InterceptorConfig.console_config)
}

// -------------------------------------------------------------------

// AndroidPowerConfig

// optional uint32 battery_poll_ms = 1;
inline bool AndroidPowerConfig::has_battery_poll_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidPowerConfig::clear_battery_poll_ms() {
  battery_poll_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AndroidPowerConfig::battery_poll_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidPowerConfig.battery_poll_ms)
  return battery_poll_ms_;
}
inline void AndroidPowerConfig::set_battery_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  battery_poll_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidPowerConfig.battery_poll_ms)
}

// repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
inline int AndroidPowerConfig::battery_counters_size() const {
  return battery_counters_.size();
}
inline void AndroidPowerConfig::clear_battery_counters() {
  battery_counters_.Clear();
}
inline ::perfetto::protos::AndroidPowerConfig_BatteryCounters AndroidPowerConfig::battery_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidPowerConfig.battery_counters)
  return static_cast< ::perfetto::protos::AndroidPowerConfig_BatteryCounters >(battery_counters_.Get(index));
}
inline void AndroidPowerConfig::set_battery_counters(int index, ::perfetto::protos::AndroidPowerConfig_BatteryCounters value) {
  assert(::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(value));
  battery_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidPowerConfig.battery_counters)
}
inline void AndroidPowerConfig::add_battery_counters(::perfetto::protos::AndroidPowerConfig_BatteryCounters value) {
  assert(::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(value));
  battery_counters_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidPowerConfig.battery_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AndroidPowerConfig::battery_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidPowerConfig.battery_counters)
  return battery_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AndroidPowerConfig::mutable_battery_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidPowerConfig.battery_counters)
  return &battery_counters_;
}

// optional bool collect_power_rails = 3;
inline bool AndroidPowerConfig::has_collect_power_rails() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidPowerConfig::clear_collect_power_rails() {
  collect_power_rails_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AndroidPowerConfig::collect_power_rails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidPowerConfig.collect_power_rails)
  return collect_power_rails_;
}
inline void AndroidPowerConfig::set_collect_power_rails(bool value) {
  _has_bits_[0] |= 0x00000002u;
  collect_power_rails_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidPowerConfig.collect_power_rails)
}

// -------------------------------------------------------------------

// ProcessStatsConfig

// repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
inline int ProcessStatsConfig::quirks_size() const {
  return quirks_.size();
}
inline void ProcessStatsConfig::clear_quirks() {
  quirks_.Clear();
}
inline ::perfetto::protos::ProcessStatsConfig_Quirks ProcessStatsConfig::quirks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.quirks)
  return static_cast< ::perfetto::protos::ProcessStatsConfig_Quirks >(quirks_.Get(index));
}
inline void ProcessStatsConfig::set_quirks(int index, ::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  quirks_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.quirks)
}
inline void ProcessStatsConfig::add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  quirks_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStatsConfig.quirks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ProcessStatsConfig::quirks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStatsConfig.quirks)
  return quirks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ProcessStatsConfig::mutable_quirks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStatsConfig.quirks)
  return &quirks_;
}

// optional bool scan_all_processes_on_start = 2;
inline bool ProcessStatsConfig::has_scan_all_processes_on_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessStatsConfig::clear_scan_all_processes_on_start() {
  scan_all_processes_on_start_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProcessStatsConfig::scan_all_processes_on_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
  return scan_all_processes_on_start_;
}
inline void ProcessStatsConfig::set_scan_all_processes_on_start(bool value) {
  _has_bits_[0] |= 0x00000002u;
  scan_all_processes_on_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
}

// optional bool record_thread_names = 3;
inline bool ProcessStatsConfig::has_record_thread_names() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessStatsConfig::clear_record_thread_names() {
  record_thread_names_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProcessStatsConfig::record_thread_names() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.record_thread_names)
  return record_thread_names_;
}
inline void ProcessStatsConfig::set_record_thread_names(bool value) {
  _has_bits_[0] |= 0x00000004u;
  record_thread_names_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.record_thread_names)
}

// optional uint32 proc_stats_poll_ms = 4;
inline bool ProcessStatsConfig::has_proc_stats_poll_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessStatsConfig::clear_proc_stats_poll_ms() {
  proc_stats_poll_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStatsConfig::proc_stats_poll_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.proc_stats_poll_ms)
  return proc_stats_poll_ms_;
}
inline void ProcessStatsConfig::set_proc_stats_poll_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  proc_stats_poll_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.proc_stats_poll_ms)
}

// optional uint32 proc_stats_cache_ttl_ms = 6;
inline bool ProcessStatsConfig::has_proc_stats_cache_ttl_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessStatsConfig::clear_proc_stats_cache_ttl_ms() {
  proc_stats_cache_ttl_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStatsConfig::proc_stats_cache_ttl_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.proc_stats_cache_ttl_ms)
  return proc_stats_cache_ttl_ms_;
}
inline void ProcessStatsConfig::set_proc_stats_cache_ttl_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  proc_stats_cache_ttl_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.proc_stats_cache_ttl_ms)
}

// optional bool record_thread_time_in_state = 7;
inline bool ProcessStatsConfig::has_record_thread_time_in_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessStatsConfig::clear_record_thread_time_in_state() {
  record_thread_time_in_state_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProcessStatsConfig::record_thread_time_in_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.record_thread_time_in_state)
  return record_thread_time_in_state_;
}
inline void ProcessStatsConfig::set_record_thread_time_in_state(bool value) {
  _has_bits_[0] |= 0x00000008u;
  record_thread_time_in_state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.record_thread_time_in_state)
}

// optional uint32 thread_time_in_state_cache_size = 8;
inline bool ProcessStatsConfig::has_thread_time_in_state_cache_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessStatsConfig::clear_thread_time_in_state_cache_size() {
  thread_time_in_state_cache_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStatsConfig::thread_time_in_state_cache_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.thread_time_in_state_cache_size)
  return thread_time_in_state_cache_size_;
}
inline void ProcessStatsConfig::set_thread_time_in_state_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  thread_time_in_state_cache_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.thread_time_in_state_cache_size)
}

// -------------------------------------------------------------------

// HeapprofdConfig_ContinuousDumpConfig

// optional uint32 dump_phase_ms = 5;
inline bool HeapprofdConfig_ContinuousDumpConfig::has_dump_phase_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_dump_phase_ms() {
  dump_phase_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeapprofdConfig_ContinuousDumpConfig::dump_phase_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_phase_ms)
  return dump_phase_ms_;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_dump_phase_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dump_phase_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_phase_ms)
}

// optional uint32 dump_interval_ms = 6;
inline bool HeapprofdConfig_ContinuousDumpConfig::has_dump_interval_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_dump_interval_ms() {
  dump_interval_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeapprofdConfig_ContinuousDumpConfig::dump_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_interval_ms)
  return dump_interval_ms_;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_dump_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  dump_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_interval_ms)
}

// -------------------------------------------------------------------

// HeapprofdConfig

// optional uint64 sampling_interval_bytes = 1;
inline bool HeapprofdConfig::has_sampling_interval_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeapprofdConfig::clear_sampling_interval_bytes() {
  sampling_interval_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.sampling_interval_bytes)
  return sampling_interval_bytes_;
}
inline void HeapprofdConfig::set_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sampling_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.sampling_interval_bytes)
}

// optional uint64 adaptive_sampling_shmem_threshold = 24;
inline bool HeapprofdConfig::has_adaptive_sampling_shmem_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HeapprofdConfig::clear_adaptive_sampling_shmem_threshold() {
  adaptive_sampling_shmem_threshold_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::adaptive_sampling_shmem_threshold() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.adaptive_sampling_shmem_threshold)
  return adaptive_sampling_shmem_threshold_;
}
inline void HeapprofdConfig::set_adaptive_sampling_shmem_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  adaptive_sampling_shmem_threshold_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.adaptive_sampling_shmem_threshold)
}

// optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
inline bool HeapprofdConfig::has_adaptive_sampling_max_sampling_interval_bytes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void HeapprofdConfig::clear_adaptive_sampling_max_sampling_interval_bytes() {
  adaptive_sampling_max_sampling_interval_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::adaptive_sampling_max_sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.adaptive_sampling_max_sampling_interval_bytes)
  return adaptive_sampling_max_sampling_interval_bytes_;
}
inline void HeapprofdConfig::set_adaptive_sampling_max_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  adaptive_sampling_max_sampling_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.adaptive_sampling_max_sampling_interval_bytes)
}

// repeated string process_cmdline = 2;
inline int HeapprofdConfig::process_cmdline_size() const {
  return process_cmdline_.size();
}
inline void HeapprofdConfig::clear_process_cmdline() {
  process_cmdline_.Clear();
}
inline const std::string& HeapprofdConfig::process_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Get(index);
}
inline std::string* HeapprofdConfig::mutable_process_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Mutable(index);
}
inline void HeapprofdConfig::set_process_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(value);
}
inline void HeapprofdConfig::set_process_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void HeapprofdConfig::set_process_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::set_process_cmdline(int index, const char* value, size_t size) {
  process_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline std::string* HeapprofdConfig::add_process_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Add();
}
inline void HeapprofdConfig::add_process_cmdline(const std::string& value) {
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::add_process_cmdline(std::string&& value) {
  process_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::add_process_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::add_process_cmdline(const char* value, size_t size) {
  process_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeapprofdConfig::process_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeapprofdConfig::mutable_process_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.process_cmdline)
  return &process_cmdline_;
}

// repeated uint64 pid = 4;
inline int HeapprofdConfig::pid_size() const {
  return pid_.size();
}
inline void HeapprofdConfig::clear_pid() {
  pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.pid)
  return pid_.Get(index);
}
inline void HeapprofdConfig::set_pid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.pid)
}
inline void HeapprofdConfig::add_pid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
HeapprofdConfig::pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.pid)
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
HeapprofdConfig::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.pid)
  return &pid_;
}

// repeated string heaps = 20;
inline int HeapprofdConfig::heaps_size() const {
  return heaps_.size();
}
inline void HeapprofdConfig::clear_heaps() {
  heaps_.Clear();
}
inline const std::string& HeapprofdConfig::heaps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.heaps)
  return heaps_.Get(index);
}
inline std::string* HeapprofdConfig::mutable_heaps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.heaps)
  return heaps_.Mutable(index);
}
inline void HeapprofdConfig::set_heaps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.heaps)
  heaps_.Mutable(index)->assign(value);
}
inline void HeapprofdConfig::set_heaps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.heaps)
  heaps_.Mutable(index)->assign(std::move(value));
}
inline void HeapprofdConfig::set_heaps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  heaps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.HeapprofdConfig.heaps)
}
inline void HeapprofdConfig::set_heaps(int index, const char* value, size_t size) {
  heaps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.HeapprofdConfig.heaps)
}
inline std::string* HeapprofdConfig::add_heaps() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.HeapprofdConfig.heaps)
  return heaps_.Add();
}
inline void HeapprofdConfig::add_heaps(const std::string& value) {
  heaps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.heaps)
}
inline void HeapprofdConfig::add_heaps(std::string&& value) {
  heaps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.heaps)
}
inline void HeapprofdConfig::add_heaps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  heaps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.HeapprofdConfig.heaps)
}
inline void HeapprofdConfig::add_heaps(const char* value, size_t size) {
  heaps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.HeapprofdConfig.heaps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeapprofdConfig::heaps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.heaps)
  return heaps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeapprofdConfig::mutable_heaps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.heaps)
  return &heaps_;
}

// optional bool stream_allocations = 23;
inline bool HeapprofdConfig::has_stream_allocations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeapprofdConfig::clear_stream_allocations() {
  stream_allocations_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool HeapprofdConfig::stream_allocations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.stream_allocations)
  return stream_allocations_;
}
inline void HeapprofdConfig::set_stream_allocations(bool value) {
  _has_bits_[0] |= 0x00000100u;
  stream_allocations_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.stream_allocations)
}

// repeated uint64 heap_sampling_intervals = 22;
inline int HeapprofdConfig::heap_sampling_intervals_size() const {
  return heap_sampling_intervals_.size();
}
inline void HeapprofdConfig::clear_heap_sampling_intervals() {
  heap_sampling_intervals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::heap_sampling_intervals(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.heap_sampling_intervals)
  return heap_sampling_intervals_.Get(index);
}
inline void HeapprofdConfig::set_heap_sampling_intervals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  heap_sampling_intervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.heap_sampling_intervals)
}
inline void HeapprofdConfig::add_heap_sampling_intervals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  heap_sampling_intervals_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.heap_sampling_intervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
HeapprofdConfig::heap_sampling_intervals() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.heap_sampling_intervals)
  return heap_sampling_intervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
HeapprofdConfig::mutable_heap_sampling_intervals() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.heap_sampling_intervals)
  return &heap_sampling_intervals_;
}

// optional bool all_heaps = 21;
inline bool HeapprofdConfig::has_all_heaps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeapprofdConfig::clear_all_heaps() {
  all_heaps_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool HeapprofdConfig::all_heaps() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.all_heaps)
  return all_heaps_;
}
inline void HeapprofdConfig::set_all_heaps(bool value) {
  _has_bits_[0] |= 0x00000200u;
  all_heaps_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.all_heaps)
}

// optional bool all = 5;
inline bool HeapprofdConfig::has_all() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeapprofdConfig::clear_all() {
  all_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool HeapprofdConfig::all() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.all)
  return all_;
}
inline void HeapprofdConfig::set_all(bool value) {
  _has_bits_[0] |= 0x00000400u;
  all_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.all)
}

// optional uint32 min_anonymous_memory_kb = 15;
inline bool HeapprofdConfig::has_min_anonymous_memory_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HeapprofdConfig::clear_min_anonymous_memory_kb() {
  min_anonymous_memory_kb_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeapprofdConfig::min_anonymous_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.min_anonymous_memory_kb)
  return min_anonymous_memory_kb_;
}
inline void HeapprofdConfig::set_min_anonymous_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  min_anonymous_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.min_anonymous_memory_kb)
}

// optional uint32 max_heapprofd_memory_kb = 16;
inline bool HeapprofdConfig::has_max_heapprofd_memory_kb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HeapprofdConfig::clear_max_heapprofd_memory_kb() {
  max_heapprofd_memory_kb_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeapprofdConfig::max_heapprofd_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.max_heapprofd_memory_kb)
  return max_heapprofd_memory_kb_;
}
inline void HeapprofdConfig::set_max_heapprofd_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_heapprofd_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.max_heapprofd_memory_kb)
}

// optional uint64 max_heapprofd_cpu_secs = 17;
inline bool HeapprofdConfig::has_max_heapprofd_cpu_secs() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HeapprofdConfig::clear_max_heapprofd_cpu_secs() {
  max_heapprofd_cpu_secs_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::max_heapprofd_cpu_secs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.max_heapprofd_cpu_secs)
  return max_heapprofd_cpu_secs_;
}
inline void HeapprofdConfig::set_max_heapprofd_cpu_secs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  max_heapprofd_cpu_secs_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.max_heapprofd_cpu_secs)
}

// repeated string skip_symbol_prefix = 7;
inline int HeapprofdConfig::skip_symbol_prefix_size() const {
  return skip_symbol_prefix_.size();
}
inline void HeapprofdConfig::clear_skip_symbol_prefix() {
  skip_symbol_prefix_.Clear();
}
inline const std::string& HeapprofdConfig::skip_symbol_prefix(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Get(index);
}
inline std::string* HeapprofdConfig::mutable_skip_symbol_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Mutable(index);
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  skip_symbol_prefix_.Mutable(index)->assign(value);
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  skip_symbol_prefix_.Mutable(index)->assign(std::move(value));
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skip_symbol_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const char* value, size_t size) {
  skip_symbol_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline std::string* HeapprofdConfig::add_skip_symbol_prefix() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Add();
}
inline void HeapprofdConfig::add_skip_symbol_prefix(const std::string& value) {
  skip_symbol_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::add_skip_symbol_prefix(std::string&& value) {
  skip_symbol_prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::add_skip_symbol_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skip_symbol_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::add_skip_symbol_prefix(const char* value, size_t size) {
  skip_symbol_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeapprofdConfig::skip_symbol_prefix() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeapprofdConfig::mutable_skip_symbol_prefix() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return &skip_symbol_prefix_;
}

// optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
inline bool HeapprofdConfig::has_continuous_dump_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeapprofdConfig::clear_continuous_dump_config() {
  if (continuous_dump_config_ != nullptr) continuous_dump_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& HeapprofdConfig::continuous_dump_config() const {
  const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* p = continuous_dump_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*>(
      &::perfetto::protos::_HeapprofdConfig_ContinuousDumpConfig_default_instance_);
}
inline ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* HeapprofdConfig::release_continuous_dump_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* temp = continuous_dump_config_;
  continuous_dump_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* HeapprofdConfig::mutable_continuous_dump_config() {
  _has_bits_[0] |= 0x00000001u;
  if (continuous_dump_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig>(GetArenaNoVirtual());
    continuous_dump_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  return continuous_dump_config_;
}
inline void HeapprofdConfig::set_allocated_continuous_dump_config(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete continuous_dump_config_;
  }
  if (continuous_dump_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      continuous_dump_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuous_dump_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  continuous_dump_config_ = continuous_dump_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.HeapprofdConfig.continuous_dump_config)
}

// optional uint64 shmem_size_bytes = 8;
inline bool HeapprofdConfig::has_shmem_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeapprofdConfig::clear_shmem_size_bytes() {
  shmem_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeapprofdConfig::shmem_size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.shmem_size_bytes)
  return shmem_size_bytes_;
}
inline void HeapprofdConfig::set_shmem_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  shmem_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.shmem_size_bytes)
}

// optional bool block_client = 9;
inline bool HeapprofdConfig::has_block_client() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeapprofdConfig::clear_block_client() {
  block_client_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool HeapprofdConfig::block_client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.block_client)
  return block_client_;
}
inline void HeapprofdConfig::set_block_client(bool value) {
  _has_bits_[0] |= 0x00000800u;
  block_client_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.block_client)
}

// optional uint32 block_client_timeout_us = 14;
inline bool HeapprofdConfig::has_block_client_timeout_us() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeapprofdConfig::clear_block_client_timeout_us() {
  block_client_timeout_us_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeapprofdConfig::block_client_timeout_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.block_client_timeout_us)
  return block_client_timeout_us_;
}
inline void HeapprofdConfig::set_block_client_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  block_client_timeout_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.block_client_timeout_us)
}

// optional bool no_startup = 10;
inline bool HeapprofdConfig::has_no_startup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeapprofdConfig::clear_no_startup() {
  no_startup_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HeapprofdConfig::no_startup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.no_startup)
  return no_startup_;
}
inline void HeapprofdConfig::set_no_startup(bool value) {
  _has_bits_[0] |= 0x00000008u;
  no_startup_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.no_startup)
}

// optional bool no_running = 11;
inline bool HeapprofdConfig::has_no_running() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeapprofdConfig::clear_no_running() {
  no_running_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool HeapprofdConfig::no_running() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.no_running)
  return no_running_;
}
inline void HeapprofdConfig::set_no_running(bool value) {
  _has_bits_[0] |= 0x00000010u;
  no_running_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.no_running)
}

// optional bool dump_at_max = 13;
inline bool HeapprofdConfig::has_dump_at_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeapprofdConfig::clear_dump_at_max() {
  dump_at_max_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool HeapprofdConfig::dump_at_max() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.dump_at_max)
  return dump_at_max_;
}
inline void HeapprofdConfig::set_dump_at_max(bool value) {
  _has_bits_[0] |= 0x00000020u;
  dump_at_max_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.dump_at_max)
}

// optional bool disable_fork_teardown = 18;
inline bool HeapprofdConfig::has_disable_fork_teardown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeapprofdConfig::clear_disable_fork_teardown() {
  disable_fork_teardown_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HeapprofdConfig::disable_fork_teardown() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.disable_fork_teardown)
  return disable_fork_teardown_;
}
inline void HeapprofdConfig::set_disable_fork_teardown(bool value) {
  _has_bits_[0] |= 0x00000040u;
  disable_fork_teardown_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.disable_fork_teardown)
}

// optional bool disable_vfork_detection = 19;
inline bool HeapprofdConfig::has_disable_vfork_detection() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HeapprofdConfig::clear_disable_vfork_detection() {
  disable_vfork_detection_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool HeapprofdConfig::disable_vfork_detection() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.disable_vfork_detection)
  return disable_vfork_detection_;
}
inline void HeapprofdConfig::set_disable_vfork_detection(bool value) {
  _has_bits_[0] |= 0x00008000u;
  disable_vfork_detection_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.disable_vfork_detection)
}

// -------------------------------------------------------------------

// JavaHprofConfig_ContinuousDumpConfig

// optional uint32 dump_phase_ms = 1;
inline bool JavaHprofConfig_ContinuousDumpConfig::has_dump_phase_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JavaHprofConfig_ContinuousDumpConfig::clear_dump_phase_ms() {
  dump_phase_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JavaHprofConfig_ContinuousDumpConfig::dump_phase_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.dump_phase_ms)
  return dump_phase_ms_;
}
inline void JavaHprofConfig_ContinuousDumpConfig::set_dump_phase_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dump_phase_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.dump_phase_ms)
}

// optional uint32 dump_interval_ms = 2;
inline bool JavaHprofConfig_ContinuousDumpConfig::has_dump_interval_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JavaHprofConfig_ContinuousDumpConfig::clear_dump_interval_ms() {
  dump_interval_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JavaHprofConfig_ContinuousDumpConfig::dump_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.dump_interval_ms)
  return dump_interval_ms_;
}
inline void JavaHprofConfig_ContinuousDumpConfig::set_dump_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  dump_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.dump_interval_ms)
}

// -------------------------------------------------------------------

// JavaHprofConfig

// repeated string process_cmdline = 1;
inline int JavaHprofConfig::process_cmdline_size() const {
  return process_cmdline_.size();
}
inline void JavaHprofConfig::clear_process_cmdline() {
  process_cmdline_.Clear();
}
inline const std::string& JavaHprofConfig::process_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.process_cmdline)
  return process_cmdline_.Get(index);
}
inline std::string* JavaHprofConfig::mutable_process_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.JavaHprofConfig.process_cmdline)
  return process_cmdline_.Mutable(index);
}
inline void JavaHprofConfig::set_process_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(value);
}
inline void JavaHprofConfig::set_process_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void JavaHprofConfig::set_process_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline void JavaHprofConfig::set_process_cmdline(int index, const char* value, size_t size) {
  process_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline std::string* JavaHprofConfig::add_process_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.JavaHprofConfig.process_cmdline)
  return process_cmdline_.Add();
}
inline void JavaHprofConfig::add_process_cmdline(const std::string& value) {
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline void JavaHprofConfig::add_process_cmdline(std::string&& value) {
  process_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline void JavaHprofConfig::add_process_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline void JavaHprofConfig::add_process_cmdline(const char* value, size_t size) {
  process_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.JavaHprofConfig.process_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JavaHprofConfig::process_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.JavaHprofConfig.process_cmdline)
  return process_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JavaHprofConfig::mutable_process_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.JavaHprofConfig.process_cmdline)
  return &process_cmdline_;
}

// repeated uint64 pid = 2;
inline int JavaHprofConfig::pid_size() const {
  return pid_.size();
}
inline void JavaHprofConfig::clear_pid() {
  pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JavaHprofConfig::pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.pid)
  return pid_.Get(index);
}
inline void JavaHprofConfig::set_pid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.pid)
}
inline void JavaHprofConfig::add_pid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.JavaHprofConfig.pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
JavaHprofConfig::pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.JavaHprofConfig.pid)
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
JavaHprofConfig::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.JavaHprofConfig.pid)
  return &pid_;
}

// optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
inline bool JavaHprofConfig::has_continuous_dump_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JavaHprofConfig::clear_continuous_dump_config() {
  if (continuous_dump_config_ != nullptr) continuous_dump_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig& JavaHprofConfig::continuous_dump_config() const {
  const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* p = continuous_dump_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.continuous_dump_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig*>(
      &::perfetto::protos::_JavaHprofConfig_ContinuousDumpConfig_default_instance_);
}
inline ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* JavaHprofConfig::release_continuous_dump_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.JavaHprofConfig.continuous_dump_config)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* temp = continuous_dump_config_;
  continuous_dump_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* JavaHprofConfig::mutable_continuous_dump_config() {
  _has_bits_[0] |= 0x00000001u;
  if (continuous_dump_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig>(GetArenaNoVirtual());
    continuous_dump_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.JavaHprofConfig.continuous_dump_config)
  return continuous_dump_config_;
}
inline void JavaHprofConfig::set_allocated_continuous_dump_config(::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* continuous_dump_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete continuous_dump_config_;
  }
  if (continuous_dump_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      continuous_dump_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuous_dump_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  continuous_dump_config_ = continuous_dump_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.JavaHprofConfig.continuous_dump_config)
}

// optional uint32 min_anonymous_memory_kb = 4;
inline bool JavaHprofConfig::has_min_anonymous_memory_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JavaHprofConfig::clear_min_anonymous_memory_kb() {
  min_anonymous_memory_kb_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JavaHprofConfig::min_anonymous_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.min_anonymous_memory_kb)
  return min_anonymous_memory_kb_;
}
inline void JavaHprofConfig::set_min_anonymous_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_anonymous_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.min_anonymous_memory_kb)
}

// optional bool dump_smaps = 5;
inline bool JavaHprofConfig::has_dump_smaps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JavaHprofConfig::clear_dump_smaps() {
  dump_smaps_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool JavaHprofConfig::dump_smaps() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.dump_smaps)
  return dump_smaps_;
}
inline void JavaHprofConfig::set_dump_smaps(bool value) {
  _has_bits_[0] |= 0x00000004u;
  dump_smaps_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.dump_smaps)
}

// repeated string ignored_types = 6;
inline int JavaHprofConfig::ignored_types_size() const {
  return ignored_types_.size();
}
inline void JavaHprofConfig::clear_ignored_types() {
  ignored_types_.Clear();
}
inline const std::string& JavaHprofConfig::ignored_types(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.JavaHprofConfig.ignored_types)
  return ignored_types_.Get(index);
}
inline std::string* JavaHprofConfig::mutable_ignored_types(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.JavaHprofConfig.ignored_types)
  return ignored_types_.Mutable(index);
}
inline void JavaHprofConfig::set_ignored_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.ignored_types)
  ignored_types_.Mutable(index)->assign(value);
}
inline void JavaHprofConfig::set_ignored_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.JavaHprofConfig.ignored_types)
  ignored_types_.Mutable(index)->assign(std::move(value));
}
inline void JavaHprofConfig::set_ignored_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline void JavaHprofConfig::set_ignored_types(int index, const char* value, size_t size) {
  ignored_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline std::string* JavaHprofConfig::add_ignored_types() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.JavaHprofConfig.ignored_types)
  return ignored_types_.Add();
}
inline void JavaHprofConfig::add_ignored_types(const std::string& value) {
  ignored_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline void JavaHprofConfig::add_ignored_types(std::string&& value) {
  ignored_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline void JavaHprofConfig::add_ignored_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline void JavaHprofConfig::add_ignored_types(const char* value, size_t size) {
  ignored_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.JavaHprofConfig.ignored_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JavaHprofConfig::ignored_types() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.JavaHprofConfig.ignored_types)
  return ignored_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JavaHprofConfig::mutable_ignored_types() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.JavaHprofConfig.ignored_types)
  return &ignored_types_;
}

// -------------------------------------------------------------------

// PerfEventConfig_Timebase

// optional uint64 frequency = 2;
inline bool PerfEventConfig_Timebase::has_frequency() const {
  return interval_case() == kFrequency;
}
inline void PerfEventConfig_Timebase::set_has_frequency() {
  _oneof_case_[0] = kFrequency;
}
inline void PerfEventConfig_Timebase::clear_frequency() {
  if (has_frequency()) {
    interval_.frequency_ = PROTOBUF_ULONGLONG(0);
    clear_has_interval();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfEventConfig_Timebase::frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Timebase.frequency)
  if (has_frequency()) {
    return interval_.frequency_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void PerfEventConfig_Timebase::set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_frequency()) {
    clear_interval();
    set_has_frequency();
  }
  interval_.frequency_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Timebase.frequency)
}

// optional uint64 period = 1;
inline bool PerfEventConfig_Timebase::has_period() const {
  return interval_case() == kPeriod;
}
inline void PerfEventConfig_Timebase::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline void PerfEventConfig_Timebase::clear_period() {
  if (has_period()) {
    interval_.period_ = PROTOBUF_ULONGLONG(0);
    clear_has_interval();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfEventConfig_Timebase::period() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Timebase.period)
  if (has_period()) {
    return interval_.period_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void PerfEventConfig_Timebase::set_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_period()) {
    clear_interval();
    set_has_period();
  }
  interval_.period_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Timebase.period)
}

// optional .perfetto.protos.PerfEventConfig.Counter counter = 4;
inline bool PerfEventConfig_Timebase::has_counter() const {
  return event_case() == kCounter;
}
inline void PerfEventConfig_Timebase::set_has_counter() {
  _oneof_case_[1] = kCounter;
}
inline void PerfEventConfig_Timebase::clear_counter() {
  if (has_counter()) {
    event_.counter_ = 0;
    clear_has_event();
  }
}
inline ::perfetto::protos::PerfEventConfig_Counter PerfEventConfig_Timebase::counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Timebase.counter)
  if (has_counter()) {
    return static_cast< ::perfetto::protos::PerfEventConfig_Counter >(event_.counter_);
  }
  return static_cast< ::perfetto::protos::PerfEventConfig_Counter >(0);
}
inline void PerfEventConfig_Timebase::set_counter(::perfetto::protos::PerfEventConfig_Counter value) {
  assert(::perfetto::protos::PerfEventConfig_Counter_IsValid(value));
  if (!has_counter()) {
    clear_event();
    set_has_counter();
  }
  event_.counter_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Timebase.counter)
}

// optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 3;
inline bool PerfEventConfig_Timebase::has_tracepoint() const {
  return event_case() == kTracepoint;
}
inline void PerfEventConfig_Timebase::set_has_tracepoint() {
  _oneof_case_[1] = kTracepoint;
}
inline void PerfEventConfig_Timebase::clear_tracepoint() {
  if (has_tracepoint()) {
    delete event_.tracepoint_;
    clear_has_event();
  }
}
inline ::perfetto::protos::PerfEventConfig_Tracepoint* PerfEventConfig_Timebase::release_tracepoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.Timebase.tracepoint)
  if (has_tracepoint()) {
    clear_has_event();
      ::perfetto::protos::PerfEventConfig_Tracepoint* temp = event_.tracepoint_;
    event_.tracepoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfEventConfig_Tracepoint& PerfEventConfig_Timebase::tracepoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Timebase.tracepoint)
  return has_tracepoint()
      ? *event_.tracepoint_
      : *reinterpret_cast< ::perfetto::protos::PerfEventConfig_Tracepoint*>(&::perfetto::protos::_PerfEventConfig_Tracepoint_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_Tracepoint* PerfEventConfig_Timebase::mutable_tracepoint() {
  if (!has_tracepoint()) {
    clear_event();
    set_has_tracepoint();
    event_.tracepoint_ = CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Tracepoint >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Timebase.tracepoint)
  return event_.tracepoint_;
}

inline bool PerfEventConfig_Timebase::has_interval() const {
  return interval_case() != INTERVAL_NOT_SET;
}
inline void PerfEventConfig_Timebase::clear_has_interval() {
  _oneof_case_[0] = INTERVAL_NOT_SET;
}
inline bool PerfEventConfig_Timebase::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void PerfEventConfig_Timebase::clear_has_event() {
  _oneof_case_[1] = EVENT_NOT_SET;
}
inline PerfEventConfig_Timebase::IntervalCase PerfEventConfig_Timebase::interval_case() const {
  return PerfEventConfig_Timebase::IntervalCase(_oneof_case_[0]);
}
inline PerfEventConfig_Timebase::EventCase PerfEventConfig_Timebase::event_case() const {
  return PerfEventConfig_Timebase::EventCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// PerfEventConfig_CallstackSampling

// optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
inline bool PerfEventConfig_CallstackSampling::has_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig_CallstackSampling::clear_scope() {
  if (scope_ != nullptr) scope_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfEventConfig_Scope& PerfEventConfig_CallstackSampling::scope() const {
  const ::perfetto::protos::PerfEventConfig_Scope* p = scope_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_Scope*>(
      &::perfetto::protos::_PerfEventConfig_Scope_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEventConfig_Scope* temp = scope_;
  scope_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::mutable_scope() {
  _has_bits_[0] |= 0x00000001u;
  if (scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(GetArenaNoVirtual());
    scope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return scope_;
}
inline void PerfEventConfig_CallstackSampling::set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scope_;
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
}

// optional bool kernel_frames = 2;
inline bool PerfEventConfig_CallstackSampling::has_kernel_frames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEventConfig_CallstackSampling::clear_kernel_frames() {
  kernel_frames_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PerfEventConfig_CallstackSampling::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
  return kernel_frames_;
}
inline void PerfEventConfig_CallstackSampling::set_kernel_frames(bool value) {
  _has_bits_[0] |= 0x00000002u;
  kernel_frames_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
}

// -------------------------------------------------------------------

// PerfEventConfig_Scope

// repeated int32 target_pid = 1;
inline int PerfEventConfig_Scope::target_pid_size() const {
  return target_pid_.size();
}
inline void PerfEventConfig_Scope::clear_target_pid() {
  target_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig_Scope::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return target_pid_.Get(index);
}
inline void PerfEventConfig_Scope::set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline void PerfEventConfig_Scope::add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig_Scope::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig_Scope::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return &target_pid_;
}

// repeated string target_cmdline = 2;
inline int PerfEventConfig_Scope::target_cmdline_size() const {
  return target_cmdline_.size();
}
inline void PerfEventConfig_Scope::clear_target_cmdline() {
  target_cmdline_.Clear();
}
inline const std::string& PerfEventConfig_Scope::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Get(index);
}
inline std::string* PerfEventConfig_Scope::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Mutable(index);
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  target_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  target_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value, size_t size) {
  target_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline std::string* PerfEventConfig_Scope::add_target_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Add();
}
inline void PerfEventConfig_Scope::add_target_cmdline(const std::string& value) {
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(std::string&& value) {
  target_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value, size_t size) {
  target_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return &target_cmdline_;
}

// repeated int32 exclude_pid = 3;
inline int PerfEventConfig_Scope::exclude_pid_size() const {
  return exclude_pid_.size();
}
inline void PerfEventConfig_Scope::clear_exclude_pid() {
  exclude_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig_Scope::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return exclude_pid_.Get(index);
}
inline void PerfEventConfig_Scope::set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline void PerfEventConfig_Scope::add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig_Scope::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig_Scope::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return &exclude_pid_;
}

// repeated string exclude_cmdline = 4;
inline int PerfEventConfig_Scope::exclude_cmdline_size() const {
  return exclude_cmdline_.size();
}
inline void PerfEventConfig_Scope::clear_exclude_cmdline() {
  exclude_cmdline_.Clear();
}
inline const std::string& PerfEventConfig_Scope::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Get(index);
}
inline std::string* PerfEventConfig_Scope::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Mutable(index);
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value, size_t size) {
  exclude_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline std::string* PerfEventConfig_Scope::add_exclude_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Add();
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const std::string& value) {
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(std::string&& value) {
  exclude_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value, size_t size) {
  exclude_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return &exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 5;
inline bool PerfEventConfig_Scope::has_additional_cmdline_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig_Scope::clear_additional_cmdline_count() {
  additional_cmdline_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig_Scope::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
  return additional_cmdline_count_;
}
inline void PerfEventConfig_Scope::set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  additional_cmdline_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
}

// -------------------------------------------------------------------

// PerfEventConfig_Tracepoint

// optional string name = 1;
inline bool PerfEventConfig_Tracepoint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig_Tracepoint::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfEventConfig_Tracepoint::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Tracepoint.name)
  return name_.GetNoArena();
}
inline void PerfEventConfig_Tracepoint::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Tracepoint.name)
}
inline void PerfEventConfig_Tracepoint::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfEventConfig.Tracepoint.name)
}
inline void PerfEventConfig_Tracepoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Tracepoint.name)
}
inline void PerfEventConfig_Tracepoint::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Tracepoint.name)
}
inline std::string* PerfEventConfig_Tracepoint::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Tracepoint.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfEventConfig_Tracepoint::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.Tracepoint.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfEventConfig_Tracepoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.Tracepoint.name)
}

// optional string filter = 2;
inline bool PerfEventConfig_Tracepoint::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEventConfig_Tracepoint::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerfEventConfig_Tracepoint::filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Tracepoint.filter)
  return filter_.GetNoArena();
}
inline void PerfEventConfig_Tracepoint::set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Tracepoint.filter)
}
inline void PerfEventConfig_Tracepoint::set_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfEventConfig.Tracepoint.filter)
}
inline void PerfEventConfig_Tracepoint::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Tracepoint.filter)
}
inline void PerfEventConfig_Tracepoint::set_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Tracepoint.filter)
}
inline std::string* PerfEventConfig_Tracepoint::mutable_filter() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Tracepoint.filter)
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfEventConfig_Tracepoint::release_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.Tracepoint.filter)
  if (!has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfEventConfig_Tracepoint::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.Tracepoint.filter)
}

// -------------------------------------------------------------------

// PerfEventConfig

// optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
inline bool PerfEventConfig::has_timebase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEventConfig::clear_timebase() {
  if (timebase_ != nullptr) timebase_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::PerfEventConfig_Timebase& PerfEventConfig::timebase() const {
  const ::perfetto::protos::PerfEventConfig_Timebase* p = timebase_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.timebase)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_Timebase*>(
      &::perfetto::protos::_PerfEventConfig_Timebase_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_Timebase* PerfEventConfig::release_timebase() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.timebase)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::PerfEventConfig_Timebase* temp = timebase_;
  timebase_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Timebase* PerfEventConfig::mutable_timebase() {
  _has_bits_[0] |= 0x00000002u;
  if (timebase_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Timebase>(GetArenaNoVirtual());
    timebase_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.timebase)
  return timebase_;
}
inline void PerfEventConfig::set_allocated_timebase(::perfetto::protos::PerfEventConfig_Timebase* timebase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timebase_;
  }
  if (timebase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timebase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timebase, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timebase_ = timebase;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.timebase)
}

// optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
inline bool PerfEventConfig::has_callstack_sampling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfEventConfig::clear_callstack_sampling() {
  if (callstack_sampling_ != nullptr) callstack_sampling_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::PerfEventConfig_CallstackSampling& PerfEventConfig::callstack_sampling() const {
  const ::perfetto::protos::PerfEventConfig_CallstackSampling* p = callstack_sampling_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.callstack_sampling)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_CallstackSampling*>(
      &::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::release_callstack_sampling() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.callstack_sampling)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* temp = callstack_sampling_;
  callstack_sampling_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::mutable_callstack_sampling() {
  _has_bits_[0] |= 0x00000004u;
  if (callstack_sampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(GetArenaNoVirtual());
    callstack_sampling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.callstack_sampling)
  return callstack_sampling_;
}
inline void PerfEventConfig::set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete callstack_sampling_;
  }
  if (callstack_sampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      callstack_sampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callstack_sampling, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  callstack_sampling_ = callstack_sampling;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.callstack_sampling)
}

// optional uint32 ring_buffer_read_period_ms = 8;
inline bool PerfEventConfig::has_ring_buffer_read_period_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerfEventConfig::clear_ring_buffer_read_period_ms() {
  ring_buffer_read_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::ring_buffer_read_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
  return ring_buffer_read_period_ms_;
}
inline void PerfEventConfig::set_ring_buffer_read_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  ring_buffer_read_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
}

// optional uint32 ring_buffer_pages = 3;
inline bool PerfEventConfig::has_ring_buffer_pages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfEventConfig::clear_ring_buffer_pages() {
  ring_buffer_pages_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::ring_buffer_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_pages)
  return ring_buffer_pages_;
}
inline void PerfEventConfig::set_ring_buffer_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ring_buffer_pages_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_pages)
}

// optional uint32 max_daemon_memory_kb = 13;
inline bool PerfEventConfig::has_max_daemon_memory_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerfEventConfig::clear_max_daemon_memory_kb() {
  max_daemon_memory_kb_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::max_daemon_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
  return max_daemon_memory_kb_;
}
inline void PerfEventConfig::set_max_daemon_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_daemon_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
}

// optional uint32 remote_descriptor_timeout_ms = 9;
inline bool PerfEventConfig::has_remote_descriptor_timeout_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerfEventConfig::clear_remote_descriptor_timeout_ms() {
  remote_descriptor_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::remote_descriptor_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
  return remote_descriptor_timeout_ms_;
}
inline void PerfEventConfig::set_remote_descriptor_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  remote_descriptor_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
}

// optional uint32 unwind_state_clear_period_ms = 10;
inline bool PerfEventConfig::has_unwind_state_clear_period_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerfEventConfig::clear_unwind_state_clear_period_ms() {
  unwind_state_clear_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::unwind_state_clear_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
  return unwind_state_clear_period_ms_;
}
inline void PerfEventConfig::set_unwind_state_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  unwind_state_clear_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
}

// optional bool all_cpus = 1;
inline bool PerfEventConfig::has_all_cpus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfEventConfig::clear_all_cpus() {
  all_cpus_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PerfEventConfig::all_cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.all_cpus)
  return all_cpus_;
}
inline void PerfEventConfig::set_all_cpus(bool value) {
  _has_bits_[0] |= 0x00000020u;
  all_cpus_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.all_cpus)
}

// optional uint32 sampling_frequency = 2;
inline bool PerfEventConfig::has_sampling_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfEventConfig::clear_sampling_frequency() {
  sampling_frequency_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::sampling_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.sampling_frequency)
  return sampling_frequency_;
}
inline void PerfEventConfig::set_sampling_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sampling_frequency_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.sampling_frequency)
}

// optional bool kernel_frames = 12;
inline bool PerfEventConfig::has_kernel_frames() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfEventConfig::clear_kernel_frames() {
  kernel_frames_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PerfEventConfig::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.kernel_frames)
  return kernel_frames_;
}
inline void PerfEventConfig::set_kernel_frames(bool value) {
  _has_bits_[0] |= 0x00000040u;
  kernel_frames_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.kernel_frames)
}

// repeated int32 target_pid = 4;
inline int PerfEventConfig::target_pid_size() const {
  return target_pid_.size();
}
inline void PerfEventConfig::clear_target_pid() {
  target_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_pid)
  return target_pid_.Get(index);
}
inline void PerfEventConfig::set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_pid)
}
inline void PerfEventConfig::add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_pid)
  return target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_pid)
  return &target_pid_;
}

// repeated string target_cmdline = 5;
inline int PerfEventConfig::target_cmdline_size() const {
  return target_cmdline_.size();
}
inline void PerfEventConfig::clear_target_cmdline() {
  target_cmdline_.Clear();
}
inline const std::string& PerfEventConfig::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Get(index);
}
inline std::string* PerfEventConfig::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Mutable(index);
}
inline void PerfEventConfig::set_target_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
  target_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig::set_target_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
  target_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value, size_t size) {
  target_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline std::string* PerfEventConfig::add_target_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Add();
}
inline void PerfEventConfig::add_target_cmdline(const std::string& value) {
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(std::string&& value) {
  target_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value, size_t size) {
  target_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return &target_cmdline_;
}

// repeated int32 exclude_pid = 6;
inline int PerfEventConfig::exclude_pid_size() const {
  return exclude_pid_.size();
}
inline void PerfEventConfig::clear_exclude_pid() {
  exclude_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_pid)
  return exclude_pid_.Get(index);
}
inline void PerfEventConfig::set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline void PerfEventConfig::add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return &exclude_pid_;
}

// repeated string exclude_cmdline = 7;
inline int PerfEventConfig::exclude_cmdline_size() const {
  return exclude_cmdline_.size();
}
inline void PerfEventConfig::clear_exclude_cmdline() {
  exclude_cmdline_.Clear();
}
inline const std::string& PerfEventConfig::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Get(index);
}
inline std::string* PerfEventConfig::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Mutable(index);
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig::set_exclude_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value, size_t size) {
  exclude_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline std::string* PerfEventConfig::add_exclude_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Add();
}
inline void PerfEventConfig::add_exclude_cmdline(const std::string& value) {
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(std::string&& value) {
  exclude_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value, size_t size) {
  exclude_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return &exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 11;
inline bool PerfEventConfig::has_additional_cmdline_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerfEventConfig::clear_additional_cmdline_count() {
  additional_cmdline_count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.additional_cmdline_count)
  return additional_cmdline_count_;
}
inline void PerfEventConfig::set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  additional_cmdline_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.additional_cmdline_count)
}

// optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
inline bool PerfEventConfig::has_tracepoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig::clear_tracepoint() {
  if (tracepoint_ != nullptr) tracepoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfEventConfig_Tracepoint& PerfEventConfig::tracepoint() const {
  const ::perfetto::protos::PerfEventConfig_Tracepoint* p = tracepoint_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.tracepoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_Tracepoint*>(
      &::perfetto::protos::_PerfEventConfig_Tracepoint_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_Tracepoint* PerfEventConfig::release_tracepoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.tracepoint)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEventConfig_Tracepoint* temp = tracepoint_;
  tracepoint_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Tracepoint* PerfEventConfig::mutable_tracepoint() {
  _has_bits_[0] |= 0x00000001u;
  if (tracepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Tracepoint>(GetArenaNoVirtual());
    tracepoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.tracepoint)
  return tracepoint_;
}
inline void PerfEventConfig::set_allocated_tracepoint(::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracepoint_;
  }
  if (tracepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracepoint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracepoint_ = tracepoint;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.tracepoint)
}

// -------------------------------------------------------------------

// SysStatsConfig

// optional uint32 meminfo_period_ms = 1;
inline bool SysStatsConfig::has_meminfo_period_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStatsConfig::clear_meminfo_period_ms() {
  meminfo_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SysStatsConfig::meminfo_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.meminfo_period_ms)
  return meminfo_period_ms_;
}
inline void SysStatsConfig::set_meminfo_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  meminfo_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.meminfo_period_ms)
}

// repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
inline int SysStatsConfig::meminfo_counters_size() const {
  return meminfo_counters_.size();
}
inline void SysStatsConfig::clear_meminfo_counters() {
  meminfo_counters_.Clear();
}
inline ::perfetto::protos::MeminfoCounters SysStatsConfig::meminfo_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.meminfo_counters)
  return static_cast< ::perfetto::protos::MeminfoCounters >(meminfo_counters_.Get(index));
}
inline void SysStatsConfig::set_meminfo_counters(int index, ::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  meminfo_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.meminfo_counters)
}
inline void SysStatsConfig::add_meminfo_counters(::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  meminfo_counters_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.meminfo_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SysStatsConfig::meminfo_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.meminfo_counters)
  return meminfo_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SysStatsConfig::mutable_meminfo_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.meminfo_counters)
  return &meminfo_counters_;
}

// optional uint32 vmstat_period_ms = 3;
inline bool SysStatsConfig::has_vmstat_period_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStatsConfig::clear_vmstat_period_ms() {
  vmstat_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SysStatsConfig::vmstat_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.vmstat_period_ms)
  return vmstat_period_ms_;
}
inline void SysStatsConfig::set_vmstat_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  vmstat_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.vmstat_period_ms)
}

// repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
inline int SysStatsConfig::vmstat_counters_size() const {
  return vmstat_counters_.size();
}
inline void SysStatsConfig::clear_vmstat_counters() {
  vmstat_counters_.Clear();
}
inline ::perfetto::protos::VmstatCounters SysStatsConfig::vmstat_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.vmstat_counters)
  return static_cast< ::perfetto::protos::VmstatCounters >(vmstat_counters_.Get(index));
}
inline void SysStatsConfig::set_vmstat_counters(int index, ::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  vmstat_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.vmstat_counters)
}
inline void SysStatsConfig::add_vmstat_counters(::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  vmstat_counters_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.vmstat_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SysStatsConfig::vmstat_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.vmstat_counters)
  return vmstat_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SysStatsConfig::mutable_vmstat_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.vmstat_counters)
  return &vmstat_counters_;
}

// optional uint32 stat_period_ms = 5;
inline bool SysStatsConfig::has_stat_period_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysStatsConfig::clear_stat_period_ms() {
  stat_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SysStatsConfig::stat_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.stat_period_ms)
  return stat_period_ms_;
}
inline void SysStatsConfig::set_stat_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  stat_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.stat_period_ms)
}

// repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
inline int SysStatsConfig::stat_counters_size() const {
  return stat_counters_.size();
}
inline void SysStatsConfig::clear_stat_counters() {
  stat_counters_.Clear();
}
inline ::perfetto::protos::SysStatsConfig_StatCounters SysStatsConfig::stat_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.stat_counters)
  return static_cast< ::perfetto::protos::SysStatsConfig_StatCounters >(stat_counters_.Get(index));
}
inline void SysStatsConfig::set_stat_counters(int index, ::perfetto::protos::SysStatsConfig_StatCounters value) {
  assert(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(value));
  stat_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.stat_counters)
}
inline void SysStatsConfig::add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value) {
  assert(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(value));
  stat_counters_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.stat_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SysStatsConfig::stat_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.stat_counters)
  return stat_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SysStatsConfig::mutable_stat_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.stat_counters)
  return &stat_counters_;
}

// -------------------------------------------------------------------

// TestConfig_DummyFields

// optional uint32 field_uint32 = 1;
inline bool TestConfig_DummyFields::has_field_uint32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestConfig_DummyFields::clear_field_uint32() {
  field_uint32_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig_DummyFields::field_uint32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_uint32)
  return field_uint32_;
}
inline void TestConfig_DummyFields::set_field_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  field_uint32_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_uint32)
}

// optional int32 field_int32 = 2;
inline bool TestConfig_DummyFields::has_field_int32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestConfig_DummyFields::clear_field_int32() {
  field_int32_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConfig_DummyFields::field_int32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_int32)
  return field_int32_;
}
inline void TestConfig_DummyFields::set_field_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  field_int32_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_int32)
}

// optional uint64 field_uint64 = 3;
inline bool TestConfig_DummyFields::has_field_uint64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestConfig_DummyFields::clear_field_uint64() {
  field_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestConfig_DummyFields::field_uint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_uint64)
  return field_uint64_;
}
inline void TestConfig_DummyFields::set_field_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  field_uint64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_uint64)
}

// optional int64 field_int64 = 4;
inline bool TestConfig_DummyFields::has_field_int64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestConfig_DummyFields::clear_field_int64() {
  field_int64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestConfig_DummyFields::field_int64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_int64)
  return field_int64_;
}
inline void TestConfig_DummyFields::set_field_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  field_int64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_int64)
}

// optional fixed64 field_fixed64 = 5;
inline bool TestConfig_DummyFields::has_field_fixed64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestConfig_DummyFields::clear_field_fixed64() {
  field_fixed64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestConfig_DummyFields::field_fixed64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_fixed64)
  return field_fixed64_;
}
inline void TestConfig_DummyFields::set_field_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  field_fixed64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_fixed64)
}

// optional sfixed64 field_sfixed64 = 6;
inline bool TestConfig_DummyFields::has_field_sfixed64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestConfig_DummyFields::clear_field_sfixed64() {
  field_sfixed64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestConfig_DummyFields::field_sfixed64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sfixed64)
  return field_sfixed64_;
}
inline void TestConfig_DummyFields::set_field_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  field_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sfixed64)
}

// optional fixed32 field_fixed32 = 7;
inline bool TestConfig_DummyFields::has_field_fixed32() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestConfig_DummyFields::clear_field_fixed32() {
  field_fixed32_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig_DummyFields::field_fixed32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_fixed32)
  return field_fixed32_;
}
inline void TestConfig_DummyFields::set_field_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  field_fixed32_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_fixed32)
}

// optional sfixed32 field_sfixed32 = 8;
inline bool TestConfig_DummyFields::has_field_sfixed32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestConfig_DummyFields::clear_field_sfixed32() {
  field_sfixed32_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConfig_DummyFields::field_sfixed32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sfixed32)
  return field_sfixed32_;
}
inline void TestConfig_DummyFields::set_field_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  field_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sfixed32)
}

// optional double field_double = 9;
inline bool TestConfig_DummyFields::has_field_double() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TestConfig_DummyFields::clear_field_double() {
  field_double_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double TestConfig_DummyFields::field_double() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_double)
  return field_double_;
}
inline void TestConfig_DummyFields::set_field_double(double value) {
  _has_bits_[0] |= 0x00000400u;
  field_double_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_double)
}

// optional float field_float = 10;
inline bool TestConfig_DummyFields::has_field_float() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TestConfig_DummyFields::clear_field_float() {
  field_float_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TestConfig_DummyFields::field_float() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_float)
  return field_float_;
}
inline void TestConfig_DummyFields::set_field_float(float value) {
  _has_bits_[0] |= 0x00001000u;
  field_float_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_float)
}

// optional sint64 field_sint64 = 11;
inline bool TestConfig_DummyFields::has_field_sint64() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TestConfig_DummyFields::clear_field_sint64() {
  field_sint64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestConfig_DummyFields::field_sint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sint64)
  return field_sint64_;
}
inline void TestConfig_DummyFields::set_field_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  field_sint64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sint64)
}

// optional sint32 field_sint32 = 12;
inline bool TestConfig_DummyFields::has_field_sint32() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestConfig_DummyFields::clear_field_sint32() {
  field_sint32_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConfig_DummyFields::field_sint32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sint32)
  return field_sint32_;
}
inline void TestConfig_DummyFields::set_field_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  field_sint32_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sint32)
}

// optional string field_string = 13;
inline bool TestConfig_DummyFields::has_field_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConfig_DummyFields::clear_field_string() {
  field_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestConfig_DummyFields::field_string() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_string)
  return field_string_.GetNoArena();
}
inline void TestConfig_DummyFields::set_field_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_string)
}
inline void TestConfig_DummyFields::set_field_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TestConfig.DummyFields.field_string)
}
inline void TestConfig_DummyFields::set_field_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TestConfig.DummyFields.field_string)
}
inline void TestConfig_DummyFields::set_field_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TestConfig.DummyFields.field_string)
}
inline std::string* TestConfig_DummyFields::mutable_field_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.DummyFields.field_string)
  return field_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConfig_DummyFields::release_field_string() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.DummyFields.field_string)
  if (!has_field_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConfig_DummyFields::set_allocated_field_string(std::string* field_string) {
  if (field_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_string);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.DummyFields.field_string)
}

// optional bytes field_bytes = 14;
inline bool TestConfig_DummyFields::has_field_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestConfig_DummyFields::clear_field_bytes() {
  field_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestConfig_DummyFields::field_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_bytes)
  return field_bytes_.GetNoArena();
}
inline void TestConfig_DummyFields::set_field_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  field_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_bytes)
}
inline void TestConfig_DummyFields::set_field_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  field_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TestConfig.DummyFields.field_bytes)
}
inline void TestConfig_DummyFields::set_field_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  field_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TestConfig.DummyFields.field_bytes)
}
inline void TestConfig_DummyFields::set_field_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  field_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TestConfig.DummyFields.field_bytes)
}
inline std::string* TestConfig_DummyFields::mutable_field_bytes() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.DummyFields.field_bytes)
  return field_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConfig_DummyFields::release_field_bytes() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.DummyFields.field_bytes)
  if (!has_field_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return field_bytes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConfig_DummyFields::set_allocated_field_bytes(std::string* field_bytes) {
  if (field_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  field_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_bytes);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.DummyFields.field_bytes)
}

// -------------------------------------------------------------------

// TestConfig

// optional uint32 message_count = 1;
inline bool TestConfig::has_message_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestConfig::clear_message_count() {
  message_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig::message_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_count)
  return message_count_;
}
inline void TestConfig::set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  message_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_count)
}

// optional uint32 max_messages_per_second = 2;
inline bool TestConfig::has_max_messages_per_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestConfig::clear_max_messages_per_second() {
  max_messages_per_second_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig::max_messages_per_second() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.max_messages_per_second)
  return max_messages_per_second_;
}
inline void TestConfig::set_max_messages_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_messages_per_second_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.max_messages_per_second)
}

// optional uint32 seed = 3;
inline bool TestConfig::has_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestConfig::clear_seed() {
  seed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig::seed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.seed)
  return seed_;
}
inline void TestConfig::set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.seed)
}

// optional uint32 message_size = 4;
inline bool TestConfig::has_message_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestConfig::clear_message_size() {
  message_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConfig::message_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_size)
  return message_size_;
}
inline void TestConfig::set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  message_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_size)
}

// optional bool send_batch_on_register = 5;
inline bool TestConfig::has_send_batch_on_register() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestConfig::clear_send_batch_on_register() {
  send_batch_on_register_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TestConfig::send_batch_on_register() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.send_batch_on_register)
  return send_batch_on_register_;
}
inline void TestConfig::set_send_batch_on_register(bool value) {
  _has_bits_[0] |= 0x00000020u;
  send_batch_on_register_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.send_batch_on_register)
}

// optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
inline bool TestConfig::has_dummy_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConfig::clear_dummy_fields() {
  if (dummy_fields_ != nullptr) dummy_fields_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::TestConfig_DummyFields& TestConfig::dummy_fields() const {
  const ::perfetto::protos::TestConfig_DummyFields* p = dummy_fields_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.dummy_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TestConfig_DummyFields*>(
      &::perfetto::protos::_TestConfig_DummyFields_default_instance_);
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::release_dummy_fields() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.dummy_fields)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TestConfig_DummyFields* temp = dummy_fields_;
  dummy_fields_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::mutable_dummy_fields() {
  _has_bits_[0] |= 0x00000001u;
  if (dummy_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TestConfig_DummyFields>(GetArenaNoVirtual());
    dummy_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.dummy_fields)
  return dummy_fields_;
}
inline void TestConfig::set_allocated_dummy_fields(::perfetto::protos::TestConfig_DummyFields* dummy_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dummy_fields_;
  }
  if (dummy_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dummy_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_fields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dummy_fields_ = dummy_fields;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.dummy_fields)
}

// -------------------------------------------------------------------

// TrackEventConfig

// repeated string disabled_categories = 1;
inline int TrackEventConfig::disabled_categories_size() const {
  return disabled_categories_.size();
}
inline void TrackEventConfig::clear_disabled_categories() {
  disabled_categories_.Clear();
}
inline const std::string& TrackEventConfig::disabled_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Get(index);
}
inline std::string* TrackEventConfig::mutable_disabled_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Mutable(index);
}
inline void TrackEventConfig::set_disabled_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_categories)
  disabled_categories_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_disabled_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_categories)
  disabled_categories_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_disabled_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::set_disabled_categories(int index, const char* value, size_t size) {
  disabled_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline std::string* TrackEventConfig::add_disabled_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Add();
}
inline void TrackEventConfig::add_disabled_categories(const std::string& value) {
  disabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(std::string&& value) {
  disabled_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(const char* value, size_t size) {
  disabled_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::disabled_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_disabled_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.disabled_categories)
  return &disabled_categories_;
}

// repeated string enabled_categories = 2;
inline int TrackEventConfig::enabled_categories_size() const {
  return enabled_categories_.size();
}
inline void TrackEventConfig::clear_enabled_categories() {
  enabled_categories_.Clear();
}
inline const std::string& TrackEventConfig::enabled_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Get(index);
}
inline std::string* TrackEventConfig::mutable_enabled_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Mutable(index);
}
inline void TrackEventConfig::set_enabled_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_categories)
  enabled_categories_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_enabled_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_categories)
  enabled_categories_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_enabled_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::set_enabled_categories(int index, const char* value, size_t size) {
  enabled_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline std::string* TrackEventConfig::add_enabled_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Add();
}
inline void TrackEventConfig::add_enabled_categories(const std::string& value) {
  enabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(std::string&& value) {
  enabled_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(const char* value, size_t size) {
  enabled_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::enabled_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_enabled_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.enabled_categories)
  return &enabled_categories_;
}

// repeated string disabled_tags = 3;
inline int TrackEventConfig::disabled_tags_size() const {
  return disabled_tags_.size();
}
inline void TrackEventConfig::clear_disabled_tags() {
  disabled_tags_.Clear();
}
inline const std::string& TrackEventConfig::disabled_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Get(index);
}
inline std::string* TrackEventConfig::mutable_disabled_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Mutable(index);
}
inline void TrackEventConfig::set_disabled_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_tags)
  disabled_tags_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_disabled_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_tags)
  disabled_tags_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_disabled_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::set_disabled_tags(int index, const char* value, size_t size) {
  disabled_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline std::string* TrackEventConfig::add_disabled_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Add();
}
inline void TrackEventConfig::add_disabled_tags(const std::string& value) {
  disabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(std::string&& value) {
  disabled_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(const char* value, size_t size) {
  disabled_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::disabled_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_disabled_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.disabled_tags)
  return &disabled_tags_;
}

// repeated string enabled_tags = 4;
inline int TrackEventConfig::enabled_tags_size() const {
  return enabled_tags_.size();
}
inline void TrackEventConfig::clear_enabled_tags() {
  enabled_tags_.Clear();
}
inline const std::string& TrackEventConfig::enabled_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Get(index);
}
inline std::string* TrackEventConfig::mutable_enabled_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Mutable(index);
}
inline void TrackEventConfig::set_enabled_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_tags)
  enabled_tags_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_enabled_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_tags)
  enabled_tags_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_enabled_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::set_enabled_tags(int index, const char* value, size_t size) {
  enabled_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline std::string* TrackEventConfig::add_enabled_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Add();
}
inline void TrackEventConfig::add_enabled_tags(const std::string& value) {
  enabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(std::string&& value) {
  enabled_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(const char* value, size_t size) {
  enabled_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::enabled_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_enabled_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.enabled_tags)
  return &enabled_tags_;
}

// -------------------------------------------------------------------

// DataSourceConfig

// optional string name = 1;
inline bool DataSourceConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSourceConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSourceConfig::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.name)
  return name_.GetNoArena();
}
inline void DataSourceConfig::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.name)
}
inline void DataSourceConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DataSourceConfig.name)
}
inline void DataSourceConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DataSourceConfig.name)
}
inline void DataSourceConfig::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DataSourceConfig.name)
}
inline std::string* DataSourceConfig::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataSourceConfig::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.name)
}

// optional uint32 target_buffer = 2;
inline bool DataSourceConfig::has_target_buffer() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DataSourceConfig::clear_target_buffer() {
  target_buffer_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataSourceConfig::target_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.target_buffer)
  return target_buffer_;
}
inline void DataSourceConfig::set_target_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  target_buffer_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.target_buffer)
}

// optional uint32 trace_duration_ms = 3;
inline bool DataSourceConfig::has_trace_duration_ms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DataSourceConfig::clear_trace_duration_ms() {
  trace_duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataSourceConfig::trace_duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.trace_duration_ms)
  return trace_duration_ms_;
}
inline void DataSourceConfig::set_trace_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  trace_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.trace_duration_ms)
}

// optional uint32 stop_timeout_ms = 7;
inline bool DataSourceConfig::has_stop_timeout_ms() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DataSourceConfig::clear_stop_timeout_ms() {
  stop_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataSourceConfig::stop_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.stop_timeout_ms)
  return stop_timeout_ms_;
}
inline void DataSourceConfig::set_stop_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  stop_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.stop_timeout_ms)
}

// optional bool enable_extra_guardrails = 6;
inline bool DataSourceConfig::has_enable_extra_guardrails() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DataSourceConfig::clear_enable_extra_guardrails() {
  enable_extra_guardrails_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool DataSourceConfig::enable_extra_guardrails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.enable_extra_guardrails)
  return enable_extra_guardrails_;
}
inline void DataSourceConfig::set_enable_extra_guardrails(bool value) {
  _has_bits_[0] |= 0x00400000u;
  enable_extra_guardrails_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.enable_extra_guardrails)
}

// optional uint64 tracing_session_id = 4;
inline bool DataSourceConfig::has_tracing_session_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DataSourceConfig::clear_tracing_session_id() {
  tracing_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSourceConfig::tracing_session_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.tracing_session_id)
  return tracing_session_id_;
}
inline void DataSourceConfig::set_tracing_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  tracing_session_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.tracing_session_id)
}

// optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
inline bool DataSourceConfig::has_ftrace_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataSourceConfig::clear_ftrace_config() {
  if (ftrace_config_ != nullptr) ftrace_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::FtraceConfig& DataSourceConfig::ftrace_config() const {
  const ::perfetto::protos::FtraceConfig* p = ftrace_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.ftrace_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::FtraceConfig*>(
      &::perfetto::protos::_FtraceConfig_default_instance_);
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::release_ftrace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.ftrace_config)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::FtraceConfig* temp = ftrace_config_;
  ftrace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::mutable_ftrace_config() {
  _has_bits_[0] |= 0x00000004u;
  if (ftrace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig>(GetArenaNoVirtual());
    ftrace_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.ftrace_config)
  return ftrace_config_;
}
inline void DataSourceConfig::set_allocated_ftrace_config(::perfetto::protos::FtraceConfig* ftrace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ftrace_config_;
  }
  if (ftrace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ftrace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ftrace_config_ = ftrace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.ftrace_config)
}

// optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
inline bool DataSourceConfig::has_inode_file_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataSourceConfig::clear_inode_file_config() {
  if (inode_file_config_ != nullptr) inode_file_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::InodeFileConfig& DataSourceConfig::inode_file_config() const {
  const ::perfetto::protos::InodeFileConfig* p = inode_file_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.inode_file_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::InodeFileConfig*>(
      &::perfetto::protos::_InodeFileConfig_default_instance_);
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::release_inode_file_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.inode_file_config)
  _has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::InodeFileConfig* temp = inode_file_config_;
  inode_file_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::mutable_inode_file_config() {
  _has_bits_[0] |= 0x00000010u;
  if (inode_file_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InodeFileConfig>(GetArenaNoVirtual());
    inode_file_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.inode_file_config)
  return inode_file_config_;
}
inline void DataSourceConfig::set_allocated_inode_file_config(::perfetto::protos::InodeFileConfig* inode_file_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inode_file_config_;
  }
  if (inode_file_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inode_file_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inode_file_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  inode_file_config_ = inode_file_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.inode_file_config)
}

// optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
inline bool DataSourceConfig::has_process_stats_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataSourceConfig::clear_process_stats_config() {
  if (process_stats_config_ != nullptr) process_stats_config_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::perfetto::protos::ProcessStatsConfig& DataSourceConfig::process_stats_config() const {
  const ::perfetto::protos::ProcessStatsConfig* p = process_stats_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.process_stats_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ProcessStatsConfig*>(
      &::perfetto::protos::_ProcessStatsConfig_default_instance_);
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::release_process_stats_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.process_stats_config)
  _has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ProcessStatsConfig* temp = process_stats_config_;
  process_stats_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::mutable_process_stats_config() {
  _has_bits_[0] |= 0x00000020u;
  if (process_stats_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProcessStatsConfig>(GetArenaNoVirtual());
    process_stats_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.process_stats_config)
  return process_stats_config_;
}
inline void DataSourceConfig::set_allocated_process_stats_config(::perfetto::protos::ProcessStatsConfig* process_stats_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_stats_config_;
  }
  if (process_stats_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_stats_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_stats_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  process_stats_config_ = process_stats_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.process_stats_config)
}

// optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
inline bool DataSourceConfig::has_sys_stats_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataSourceConfig::clear_sys_stats_config() {
  if (sys_stats_config_ != nullptr) sys_stats_config_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::perfetto::protos::SysStatsConfig& DataSourceConfig::sys_stats_config() const {
  const ::perfetto::protos::SysStatsConfig* p = sys_stats_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.sys_stats_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::SysStatsConfig*>(
      &::perfetto::protos::_SysStatsConfig_default_instance_);
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::release_sys_stats_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.sys_stats_config)
  _has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::SysStatsConfig* temp = sys_stats_config_;
  sys_stats_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::mutable_sys_stats_config() {
  _has_bits_[0] |= 0x00000040u;
  if (sys_stats_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SysStatsConfig>(GetArenaNoVirtual());
    sys_stats_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.sys_stats_config)
  return sys_stats_config_;
}
inline void DataSourceConfig::set_allocated_sys_stats_config(::perfetto::protos::SysStatsConfig* sys_stats_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sys_stats_config_;
  }
  if (sys_stats_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys_stats_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_stats_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sys_stats_config_ = sys_stats_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.sys_stats_config)
}

// optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
inline bool DataSourceConfig::has_heapprofd_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataSourceConfig::clear_heapprofd_config() {
  if (heapprofd_config_ != nullptr) heapprofd_config_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::perfetto::protos::HeapprofdConfig& DataSourceConfig::heapprofd_config() const {
  const ::perfetto::protos::HeapprofdConfig* p = heapprofd_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.heapprofd_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::HeapprofdConfig*>(
      &::perfetto::protos::_HeapprofdConfig_default_instance_);
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::release_heapprofd_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.heapprofd_config)
  _has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::HeapprofdConfig* temp = heapprofd_config_;
  heapprofd_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::mutable_heapprofd_config() {
  _has_bits_[0] |= 0x00000080u;
  if (heapprofd_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::HeapprofdConfig>(GetArenaNoVirtual());
    heapprofd_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.heapprofd_config)
  return heapprofd_config_;
}
inline void DataSourceConfig::set_allocated_heapprofd_config(::perfetto::protos::HeapprofdConfig* heapprofd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete heapprofd_config_;
  }
  if (heapprofd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heapprofd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heapprofd_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  heapprofd_config_ = heapprofd_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.heapprofd_config)
}

// optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
inline bool DataSourceConfig::has_java_hprof_config() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataSourceConfig::clear_java_hprof_config() {
  if (java_hprof_config_ != nullptr) java_hprof_config_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::perfetto::protos::JavaHprofConfig& DataSourceConfig::java_hprof_config() const {
  const ::perfetto::protos::JavaHprofConfig* p = java_hprof_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.java_hprof_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::JavaHprofConfig*>(
      &::perfetto::protos::_JavaHprofConfig_default_instance_);
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::release_java_hprof_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.java_hprof_config)
  _has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::JavaHprofConfig* temp = java_hprof_config_;
  java_hprof_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::mutable_java_hprof_config() {
  _has_bits_[0] |= 0x00001000u;
  if (java_hprof_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::JavaHprofConfig>(GetArenaNoVirtual());
    java_hprof_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.java_hprof_config)
  return java_hprof_config_;
}
inline void DataSourceConfig::set_allocated_java_hprof_config(::perfetto::protos::JavaHprofConfig* java_hprof_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete java_hprof_config_;
  }
  if (java_hprof_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      java_hprof_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, java_hprof_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  java_hprof_config_ = java_hprof_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.java_hprof_config)
}

// optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
inline bool DataSourceConfig::has_android_power_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataSourceConfig::clear_android_power_config() {
  if (android_power_config_ != nullptr) android_power_config_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::perfetto::protos::AndroidPowerConfig& DataSourceConfig::android_power_config() const {
  const ::perfetto::protos::AndroidPowerConfig* p = android_power_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_power_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::AndroidPowerConfig*>(
      &::perfetto::protos::_AndroidPowerConfig_default_instance_);
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::release_android_power_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_power_config)
  _has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::AndroidPowerConfig* temp = android_power_config_;
  android_power_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::mutable_android_power_config() {
  _has_bits_[0] |= 0x00000100u;
  if (android_power_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidPowerConfig>(GetArenaNoVirtual());
    android_power_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_power_config)
  return android_power_config_;
}
inline void DataSourceConfig::set_allocated_android_power_config(::perfetto::protos::AndroidPowerConfig* android_power_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete android_power_config_;
  }
  if (android_power_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      android_power_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_power_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  android_power_config_ = android_power_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_power_config)
}

// optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
inline bool DataSourceConfig::has_android_log_config() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataSourceConfig::clear_android_log_config() {
  if (android_log_config_ != nullptr) android_log_config_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::perfetto::protos::AndroidLogConfig& DataSourceConfig::android_log_config() const {
  const ::perfetto::protos::AndroidLogConfig* p = android_log_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_log_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::AndroidLogConfig*>(
      &::perfetto::protos::_AndroidLogConfig_default_instance_);
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::release_android_log_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_log_config)
  _has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::AndroidLogConfig* temp = android_log_config_;
  android_log_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::mutable_android_log_config() {
  _has_bits_[0] |= 0x00000200u;
  if (android_log_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidLogConfig>(GetArenaNoVirtual());
    android_log_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_log_config)
  return android_log_config_;
}
inline void DataSourceConfig::set_allocated_android_log_config(::perfetto::protos::AndroidLogConfig* android_log_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete android_log_config_;
  }
  if (android_log_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      android_log_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_log_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  android_log_config_ = android_log_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_log_config)
}

// optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
inline bool DataSourceConfig::has_gpu_counter_config() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataSourceConfig::clear_gpu_counter_config() {
  if (gpu_counter_config_ != nullptr) gpu_counter_config_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::perfetto::protos::GpuCounterConfig& DataSourceConfig::gpu_counter_config() const {
  const ::perfetto::protos::GpuCounterConfig* p = gpu_counter_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.gpu_counter_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::GpuCounterConfig*>(
      &::perfetto::protos::_GpuCounterConfig_default_instance_);
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::release_gpu_counter_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.gpu_counter_config)
  _has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::GpuCounterConfig* temp = gpu_counter_config_;
  gpu_counter_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::mutable_gpu_counter_config() {
  _has_bits_[0] |= 0x00000400u;
  if (gpu_counter_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::GpuCounterConfig>(GetArenaNoVirtual());
    gpu_counter_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.gpu_counter_config)
  return gpu_counter_config_;
}
inline void DataSourceConfig::set_allocated_gpu_counter_config(::perfetto::protos::GpuCounterConfig* gpu_counter_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_counter_config_;
  }
  if (gpu_counter_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_counter_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_counter_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  gpu_counter_config_ = gpu_counter_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.gpu_counter_config)
}

// optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
inline bool DataSourceConfig::has_packages_list_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataSourceConfig::clear_packages_list_config() {
  if (packages_list_config_ != nullptr) packages_list_config_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::perfetto::protos::PackagesListConfig& DataSourceConfig::packages_list_config() const {
  const ::perfetto::protos::PackagesListConfig* p = packages_list_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.packages_list_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PackagesListConfig*>(
      &::perfetto::protos::_PackagesListConfig_default_instance_);
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::release_packages_list_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.packages_list_config)
  _has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::PackagesListConfig* temp = packages_list_config_;
  packages_list_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::mutable_packages_list_config() {
  _has_bits_[0] |= 0x00000800u;
  if (packages_list_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PackagesListConfig>(GetArenaNoVirtual());
    packages_list_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.packages_list_config)
  return packages_list_config_;
}
inline void DataSourceConfig::set_allocated_packages_list_config(::perfetto::protos::PackagesListConfig* packages_list_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packages_list_config_;
  }
  if (packages_list_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packages_list_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packages_list_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  packages_list_config_ = packages_list_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.packages_list_config)
}

// optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
inline bool DataSourceConfig::has_perf_event_config() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DataSourceConfig::clear_perf_event_config() {
  if (perf_event_config_ != nullptr) perf_event_config_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::perfetto::protos::PerfEventConfig& DataSourceConfig::perf_event_config() const {
  const ::perfetto::protos::PerfEventConfig* p = perf_event_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.perf_event_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig*>(
      &::perfetto::protos::_PerfEventConfig_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::release_perf_event_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.perf_event_config)
  _has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::PerfEventConfig* temp = perf_event_config_;
  perf_event_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::mutable_perf_event_config() {
  _has_bits_[0] |= 0x00002000u;
  if (perf_event_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig>(GetArenaNoVirtual());
    perf_event_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.perf_event_config)
  return perf_event_config_;
}
inline void DataSourceConfig::set_allocated_perf_event_config(::perfetto::protos::PerfEventConfig* perf_event_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete perf_event_config_;
  }
  if (perf_event_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perf_event_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_event_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  perf_event_config_ = perf_event_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.perf_event_config)
}

// optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
inline bool DataSourceConfig::has_vulkan_memory_config() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DataSourceConfig::clear_vulkan_memory_config() {
  if (vulkan_memory_config_ != nullptr) vulkan_memory_config_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::perfetto::protos::VulkanMemoryConfig& DataSourceConfig::vulkan_memory_config() const {
  const ::perfetto::protos::VulkanMemoryConfig* p = vulkan_memory_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::VulkanMemoryConfig*>(
      &::perfetto::protos::_VulkanMemoryConfig_default_instance_);
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::release_vulkan_memory_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  _has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::VulkanMemoryConfig* temp = vulkan_memory_config_;
  vulkan_memory_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::mutable_vulkan_memory_config() {
  _has_bits_[0] |= 0x00004000u;
  if (vulkan_memory_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::VulkanMemoryConfig>(GetArenaNoVirtual());
    vulkan_memory_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  return vulkan_memory_config_;
}
inline void DataSourceConfig::set_allocated_vulkan_memory_config(::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vulkan_memory_config_;
  }
  if (vulkan_memory_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vulkan_memory_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_memory_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  vulkan_memory_config_ = vulkan_memory_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.vulkan_memory_config)
}

// optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
inline bool DataSourceConfig::has_track_event_config() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DataSourceConfig::clear_track_event_config() {
  if (track_event_config_ != nullptr) track_event_config_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::perfetto::protos::TrackEventConfig& DataSourceConfig::track_event_config() const {
  const ::perfetto::protos::TrackEventConfig* p = track_event_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.track_event_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TrackEventConfig*>(
      &::perfetto::protos::_TrackEventConfig_default_instance_);
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::release_track_event_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.track_event_config)
  _has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::TrackEventConfig* temp = track_event_config_;
  track_event_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::mutable_track_event_config() {
  _has_bits_[0] |= 0x00008000u;
  if (track_event_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEventConfig>(GetArenaNoVirtual());
    track_event_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.track_event_config)
  return track_event_config_;
}
inline void DataSourceConfig::set_allocated_track_event_config(::perfetto::protos::TrackEventConfig* track_event_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete track_event_config_;
  }
  if (track_event_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      track_event_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  track_event_config_ = track_event_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.track_event_config)
}

// optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
inline bool DataSourceConfig::has_android_polled_state_config() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DataSourceConfig::clear_android_polled_state_config() {
  if (android_polled_state_config_ != nullptr) android_polled_state_config_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::perfetto::protos::AndroidPolledStateConfig& DataSourceConfig::android_polled_state_config() const {
  const ::perfetto::protos::AndroidPolledStateConfig* p = android_polled_state_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_polled_state_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::AndroidPolledStateConfig*>(
      &::perfetto::protos::_AndroidPolledStateConfig_default_instance_);
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::release_android_polled_state_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_polled_state_config)
  _has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::AndroidPolledStateConfig* temp = android_polled_state_config_;
  android_polled_state_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::mutable_android_polled_state_config() {
  _has_bits_[0] |= 0x00010000u;
  if (android_polled_state_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidPolledStateConfig>(GetArenaNoVirtual());
    android_polled_state_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_polled_state_config)
  return android_polled_state_config_;
}
inline void DataSourceConfig::set_allocated_android_polled_state_config(::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete android_polled_state_config_;
  }
  if (android_polled_state_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      android_polled_state_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_polled_state_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  android_polled_state_config_ = android_polled_state_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_polled_state_config)
}

// optional .perfetto.protos.ChromeConfig chrome_config = 101;
inline bool DataSourceConfig::has_chrome_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataSourceConfig::clear_chrome_config() {
  if (chrome_config_ != nullptr) chrome_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perfetto::protos::ChromeConfig& DataSourceConfig::chrome_config() const {
  const ::perfetto::protos::ChromeConfig* p = chrome_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.chrome_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeConfig*>(
      &::perfetto::protos::_ChromeConfig_default_instance_);
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::release_chrome_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.chrome_config)
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeConfig* temp = chrome_config_;
  chrome_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::mutable_chrome_config() {
  _has_bits_[0] |= 0x00000008u;
  if (chrome_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeConfig>(GetArenaNoVirtual());
    chrome_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.chrome_config)
  return chrome_config_;
}
inline void DataSourceConfig::set_allocated_chrome_config(::perfetto::protos::ChromeConfig* chrome_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chrome_config_;
  }
  if (chrome_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_config_ = chrome_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.chrome_config)
}

// optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
inline bool DataSourceConfig::has_interceptor_config() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DataSourceConfig::clear_interceptor_config() {
  if (interceptor_config_ != nullptr) interceptor_config_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::perfetto::protos::InterceptorConfig& DataSourceConfig::interceptor_config() const {
  const ::perfetto::protos::InterceptorConfig* p = interceptor_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.interceptor_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::InterceptorConfig*>(
      &::perfetto::protos::_InterceptorConfig_default_instance_);
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::release_interceptor_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.interceptor_config)
  _has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::InterceptorConfig* temp = interceptor_config_;
  interceptor_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::mutable_interceptor_config() {
  _has_bits_[0] |= 0x00020000u;
  if (interceptor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InterceptorConfig>(GetArenaNoVirtual());
    interceptor_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.interceptor_config)
  return interceptor_config_;
}
inline void DataSourceConfig::set_allocated_interceptor_config(::perfetto::protos::InterceptorConfig* interceptor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interceptor_config_;
  }
  if (interceptor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interceptor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interceptor_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  interceptor_config_ = interceptor_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.interceptor_config)
}

// optional string legacy_config = 1000;
inline bool DataSourceConfig::has_legacy_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSourceConfig::clear_legacy_config() {
  legacy_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataSourceConfig::legacy_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.legacy_config)
  return legacy_config_.GetNoArena();
}
inline void DataSourceConfig::set_legacy_config(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.legacy_config)
}
inline void DataSourceConfig::set_legacy_config(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DataSourceConfig.legacy_config)
}
inline void DataSourceConfig::set_legacy_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  legacy_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DataSourceConfig.legacy_config)
}
inline void DataSourceConfig::set_legacy_config(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  legacy_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DataSourceConfig.legacy_config)
}
inline std::string* DataSourceConfig::mutable_legacy_config() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.legacy_config)
  return legacy_config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataSourceConfig::release_legacy_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.legacy_config)
  if (!has_legacy_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return legacy_config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceConfig::set_allocated_legacy_config(std::string* legacy_config) {
  if (legacy_config != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  legacy_config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_config);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.legacy_config)
}

// optional .perfetto.protos.TestConfig for_testing = 1001;
inline bool DataSourceConfig::has_for_testing() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DataSourceConfig::clear_for_testing() {
  if (for_testing_ != nullptr) for_testing_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::perfetto::protos::TestConfig& DataSourceConfig::for_testing() const {
  const ::perfetto::protos::TestConfig* p = for_testing_;
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.for_testing)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TestConfig*>(
      &::perfetto::protos::_TestConfig_default_instance_);
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::release_for_testing() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.for_testing)
  _has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::TestConfig* temp = for_testing_;
  for_testing_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::mutable_for_testing() {
  _has_bits_[0] |= 0x00040000u;
  if (for_testing_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TestConfig>(GetArenaNoVirtual());
    for_testing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.for_testing)
  return for_testing_;
}
inline void DataSourceConfig::set_allocated_for_testing(::perfetto::protos::TestConfig* for_testing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete for_testing_;
  }
  if (for_testing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      for_testing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, for_testing, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  for_testing_ = for_testing;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.for_testing)
}

// -------------------------------------------------------------------

// TraceConfig_BufferConfig

// optional uint32 size_kb = 1;
inline bool TraceConfig_BufferConfig::has_size_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_BufferConfig::clear_size_kb() {
  size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_BufferConfig::size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BufferConfig.size_kb)
  return size_kb_;
}
inline void TraceConfig_BufferConfig::set_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BufferConfig.size_kb)
}

// optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
inline bool TraceConfig_BufferConfig::has_fill_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_BufferConfig::clear_fill_policy() {
  fill_policy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::fill_policy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BufferConfig.fill_policy)
  return static_cast< ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy >(fill_policy_);
}
inline void TraceConfig_BufferConfig::set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value) {
  assert(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  fill_policy_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BufferConfig.fill_policy)
}

// -------------------------------------------------------------------

// TraceConfig_DataSource

// optional .perfetto.protos.DataSourceConfig config = 1;
inline bool TraceConfig_DataSource::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_DataSource::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::DataSourceConfig& TraceConfig_DataSource::config() const {
  const ::perfetto::protos::DataSourceConfig* p = config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::DataSourceConfig*>(
      &::perfetto::protos::_DataSourceConfig_default_instance_);
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::release_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.DataSource.config)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::DataSourceConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::DataSourceConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.config)
  return config_;
}
inline void TraceConfig_DataSource::set_allocated_config(::perfetto::protos::DataSourceConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.DataSource.config)
}

// repeated string producer_name_filter = 2;
inline int TraceConfig_DataSource::producer_name_filter_size() const {
  return producer_name_filter_.size();
}
inline void TraceConfig_DataSource::clear_producer_name_filter() {
  producer_name_filter_.Clear();
}
inline const std::string& TraceConfig_DataSource::producer_name_filter(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return producer_name_filter_.Get(index);
}
inline std::string* TraceConfig_DataSource::mutable_producer_name_filter(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return producer_name_filter_.Mutable(index);
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  producer_name_filter_.Mutable(index)->assign(value);
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  producer_name_filter_.Mutable(index)->assign(std::move(value));
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  producer_name_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const char* value, size_t size) {
  producer_name_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline std::string* TraceConfig_DataSource::add_producer_name_filter() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return producer_name_filter_.Add();
}
inline void TraceConfig_DataSource::add_producer_name_filter(const std::string& value) {
  producer_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(std::string&& value) {
  producer_name_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  producer_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(const char* value, size_t size) {
  producer_name_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::producer_name_filter() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return producer_name_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig_DataSource::mutable_producer_name_filter() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return &producer_name_filter_;
}

// repeated string producer_name_regex_filter = 3;
inline int TraceConfig_DataSource::producer_name_regex_filter_size() const {
  return producer_name_regex_filter_.size();
}
inline void TraceConfig_DataSource::clear_producer_name_regex_filter() {
  producer_name_regex_filter_.Clear();
}
inline const std::string& TraceConfig_DataSource::producer_name_regex_filter(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return producer_name_regex_filter_.Get(index);
}
inline std::string* TraceConfig_DataSource::mutable_producer_name_regex_filter(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return producer_name_regex_filter_.Mutable(index);
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  producer_name_regex_filter_.Mutable(index)->assign(value);
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  producer_name_regex_filter_.Mutable(index)->assign(std::move(value));
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  producer_name_regex_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const char* value, size_t size) {
  producer_name_regex_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline std::string* TraceConfig_DataSource::add_producer_name_regex_filter() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return producer_name_regex_filter_.Add();
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const std::string& value) {
  producer_name_regex_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(std::string&& value) {
  producer_name_regex_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  producer_name_regex_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const char* value, size_t size) {
  producer_name_regex_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::producer_name_regex_filter() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return producer_name_regex_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig_DataSource::mutable_producer_name_regex_filter() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return &producer_name_regex_filter_;
}

// -------------------------------------------------------------------

// TraceConfig_BuiltinDataSource

// optional bool disable_clock_snapshotting = 1;
inline bool TraceConfig_BuiltinDataSource::has_disable_clock_snapshotting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_clock_snapshotting() {
  disable_clock_snapshotting_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TraceConfig_BuiltinDataSource::disable_clock_snapshotting() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_clock_snapshotting)
  return disable_clock_snapshotting_;
}
inline void TraceConfig_BuiltinDataSource::set_disable_clock_snapshotting(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disable_clock_snapshotting_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_clock_snapshotting)
}

// optional bool disable_trace_config = 2;
inline bool TraceConfig_BuiltinDataSource::has_disable_trace_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_trace_config() {
  disable_trace_config_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TraceConfig_BuiltinDataSource::disable_trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_trace_config)
  return disable_trace_config_;
}
inline void TraceConfig_BuiltinDataSource::set_disable_trace_config(bool value) {
  _has_bits_[0] |= 0x00000002u;
  disable_trace_config_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_trace_config)
}

// optional bool disable_system_info = 3;
inline bool TraceConfig_BuiltinDataSource::has_disable_system_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_system_info() {
  disable_system_info_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TraceConfig_BuiltinDataSource::disable_system_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_system_info)
  return disable_system_info_;
}
inline void TraceConfig_BuiltinDataSource::set_disable_system_info(bool value) {
  _has_bits_[0] |= 0x00000004u;
  disable_system_info_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_system_info)
}

// optional bool disable_service_events = 4;
inline bool TraceConfig_BuiltinDataSource::has_disable_service_events() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_service_events() {
  disable_service_events_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TraceConfig_BuiltinDataSource::disable_service_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_service_events)
  return disable_service_events_;
}
inline void TraceConfig_BuiltinDataSource::set_disable_service_events(bool value) {
  _has_bits_[0] |= 0x00000008u;
  disable_service_events_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_service_events)
}

// optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
inline bool TraceConfig_BuiltinDataSource::has_primary_trace_clock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_primary_trace_clock() {
  primary_trace_clock_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::BuiltinClock TraceConfig_BuiltinDataSource::primary_trace_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.primary_trace_clock)
  return static_cast< ::perfetto::protos::BuiltinClock >(primary_trace_clock_);
}
inline void TraceConfig_BuiltinDataSource::set_primary_trace_clock(::perfetto::protos::BuiltinClock value) {
  assert(::perfetto::protos::BuiltinClock_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  primary_trace_clock_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.primary_trace_clock)
}

// optional uint32 snapshot_interval_ms = 6;
inline bool TraceConfig_BuiltinDataSource::has_snapshot_interval_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TraceConfig_BuiltinDataSource::clear_snapshot_interval_ms() {
  snapshot_interval_ms_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_BuiltinDataSource::snapshot_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.snapshot_interval_ms)
  return snapshot_interval_ms_;
}
inline void TraceConfig_BuiltinDataSource::set_snapshot_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  snapshot_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.snapshot_interval_ms)
}

// -------------------------------------------------------------------

// TraceConfig_ProducerConfig

// optional string producer_name = 1;
inline bool TraceConfig_ProducerConfig::has_producer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_ProducerConfig::clear_producer_name() {
  producer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_ProducerConfig::producer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  return producer_name_.GetNoArena();
}
inline void TraceConfig_ProducerConfig::set_producer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}
inline void TraceConfig_ProducerConfig::set_producer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}
inline void TraceConfig_ProducerConfig::set_producer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}
inline void TraceConfig_ProducerConfig::set_producer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}
inline std::string* TraceConfig_ProducerConfig::mutable_producer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  return producer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig_ProducerConfig::release_producer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  if (!has_producer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return producer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig_ProducerConfig::set_allocated_producer_name(std::string* producer_name) {
  if (producer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  producer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}

// optional uint32 shm_size_kb = 2;
inline bool TraceConfig_ProducerConfig::has_shm_size_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_ProducerConfig::clear_shm_size_kb() {
  shm_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_ProducerConfig::shm_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.shm_size_kb)
  return shm_size_kb_;
}
inline void TraceConfig_ProducerConfig::set_shm_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  shm_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.shm_size_kb)
}

// optional uint32 page_size_kb = 3;
inline bool TraceConfig_ProducerConfig::has_page_size_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig_ProducerConfig::clear_page_size_kb() {
  page_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_ProducerConfig::page_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.page_size_kb)
  return page_size_kb_;
}
inline void TraceConfig_ProducerConfig::set_page_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  page_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.page_size_kb)
}

// -------------------------------------------------------------------

// TraceConfig_StatsdMetadata

// optional int64 triggering_alert_id = 1;
inline bool TraceConfig_StatsdMetadata::has_triggering_alert_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_alert_id() {
  triggering_alert_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceConfig_StatsdMetadata::triggering_alert_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_alert_id)
  return triggering_alert_id_;
}
inline void TraceConfig_StatsdMetadata::set_triggering_alert_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  triggering_alert_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_alert_id)
}

// optional int32 triggering_config_uid = 2;
inline bool TraceConfig_StatsdMetadata::has_triggering_config_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_config_uid() {
  triggering_config_uid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceConfig_StatsdMetadata::triggering_config_uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_uid)
  return triggering_config_uid_;
}
inline void TraceConfig_StatsdMetadata::set_triggering_config_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  triggering_config_uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_uid)
}

// optional int64 triggering_config_id = 3;
inline bool TraceConfig_StatsdMetadata::has_triggering_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_config_id() {
  triggering_config_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceConfig_StatsdMetadata::triggering_config_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_id)
  return triggering_config_id_;
}
inline void TraceConfig_StatsdMetadata::set_triggering_config_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  triggering_config_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_id)
}

// optional int64 triggering_subscription_id = 4;
inline bool TraceConfig_StatsdMetadata::has_triggering_subscription_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_subscription_id() {
  triggering_subscription_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceConfig_StatsdMetadata::triggering_subscription_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_subscription_id)
  return triggering_subscription_id_;
}
inline void TraceConfig_StatsdMetadata::set_triggering_subscription_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  triggering_subscription_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_subscription_id)
}

// -------------------------------------------------------------------

// TraceConfig_GuardrailOverrides

// optional uint64 max_upload_per_day_bytes = 1;
inline bool TraceConfig_GuardrailOverrides::has_max_upload_per_day_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_GuardrailOverrides::clear_max_upload_per_day_bytes() {
  max_upload_per_day_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceConfig_GuardrailOverrides::max_upload_per_day_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.GuardrailOverrides.max_upload_per_day_bytes)
  return max_upload_per_day_bytes_;
}
inline void TraceConfig_GuardrailOverrides::set_max_upload_per_day_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  max_upload_per_day_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.GuardrailOverrides.max_upload_per_day_bytes)
}

// -------------------------------------------------------------------

// TraceConfig_TriggerConfig_Trigger

// optional string name = 1;
inline bool TraceConfig_TriggerConfig_Trigger::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  return name_.GetNoArena();
}
inline void TraceConfig_TriggerConfig_Trigger::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}
inline void TraceConfig_TriggerConfig_Trigger::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}
inline void TraceConfig_TriggerConfig_Trigger::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}
inline void TraceConfig_TriggerConfig_Trigger::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}
inline std::string* TraceConfig_TriggerConfig_Trigger::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig_TriggerConfig_Trigger::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}

// optional string producer_name_regex = 2;
inline bool TraceConfig_TriggerConfig_Trigger::has_producer_name_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_producer_name_regex() {
  producer_name_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::producer_name_regex() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  return producer_name_regex_.GetNoArena();
}
inline void TraceConfig_TriggerConfig_Trigger::set_producer_name_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  producer_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}
inline void TraceConfig_TriggerConfig_Trigger::set_producer_name_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  producer_name_regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}
inline void TraceConfig_TriggerConfig_Trigger::set_producer_name_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  producer_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}
inline void TraceConfig_TriggerConfig_Trigger::set_producer_name_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  producer_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}
inline std::string* TraceConfig_TriggerConfig_Trigger::mutable_producer_name_regex() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  return producer_name_regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::release_producer_name_regex() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  if (!has_producer_name_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return producer_name_regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig_TriggerConfig_Trigger::set_allocated_producer_name_regex(std::string* producer_name_regex) {
  if (producer_name_regex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  producer_name_regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_name_regex);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}

// optional uint32 stop_delay_ms = 3;
inline bool TraceConfig_TriggerConfig_Trigger::has_stop_delay_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_stop_delay_ms() {
  stop_delay_ms_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_TriggerConfig_Trigger::stop_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.stop_delay_ms)
  return stop_delay_ms_;
}
inline void TraceConfig_TriggerConfig_Trigger::set_stop_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  stop_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.stop_delay_ms)
}

// optional uint32 max_per_24_h = 4;
inline bool TraceConfig_TriggerConfig_Trigger::has_max_per_24_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_max_per_24_h() {
  max_per_24_h_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_TriggerConfig_Trigger::max_per_24_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.max_per_24_h)
  return max_per_24_h_;
}
inline void TraceConfig_TriggerConfig_Trigger::set_max_per_24_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_per_24_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.max_per_24_h)
}

// optional double skip_probability = 5;
inline bool TraceConfig_TriggerConfig_Trigger::has_skip_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_skip_probability() {
  skip_probability_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TraceConfig_TriggerConfig_Trigger::skip_probability() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.skip_probability)
  return skip_probability_;
}
inline void TraceConfig_TriggerConfig_Trigger::set_skip_probability(double value) {
  _has_bits_[0] |= 0x00000010u;
  skip_probability_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.skip_probability)
}

// -------------------------------------------------------------------

// TraceConfig_TriggerConfig

// optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
inline bool TraceConfig_TriggerConfig::has_trigger_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_TriggerConfig::clear_trigger_mode() {
  trigger_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::trigger_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.trigger_mode)
  return static_cast< ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode >(trigger_mode_);
}
inline void TraceConfig_TriggerConfig::set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value) {
  assert(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  trigger_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.trigger_mode)
}

// repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
inline int TraceConfig_TriggerConfig::triggers_size() const {
  return triggers_.size();
}
inline void TraceConfig_TriggerConfig::clear_triggers() {
  triggers_.Clear();
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* TraceConfig_TriggerConfig::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >*
TraceConfig_TriggerConfig::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return &triggers_;
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& TraceConfig_TriggerConfig::triggers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return triggers_.Get(index);
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* TraceConfig_TriggerConfig::add_triggers() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return triggers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >&
TraceConfig_TriggerConfig::triggers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return triggers_;
}

// optional uint32 trigger_timeout_ms = 3;
inline bool TraceConfig_TriggerConfig::has_trigger_timeout_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_TriggerConfig::clear_trigger_timeout_ms() {
  trigger_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_TriggerConfig::trigger_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.trigger_timeout_ms)
  return trigger_timeout_ms_;
}
inline void TraceConfig_TriggerConfig::set_trigger_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  trigger_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.trigger_timeout_ms)
}

// -------------------------------------------------------------------

// TraceConfig_IncrementalStateConfig

// optional uint32 clear_period_ms = 1;
inline bool TraceConfig_IncrementalStateConfig::has_clear_period_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_IncrementalStateConfig::clear_clear_period_ms() {
  clear_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig_IncrementalStateConfig::clear_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncrementalStateConfig.clear_period_ms)
  return clear_period_ms_;
}
inline void TraceConfig_IncrementalStateConfig::set_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  clear_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncrementalStateConfig.clear_period_ms)
}

// -------------------------------------------------------------------

// TraceConfig_IncidentReportConfig

// optional string destination_package = 1;
inline bool TraceConfig_IncidentReportConfig::has_destination_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig_IncidentReportConfig::clear_destination_package() {
  destination_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_IncidentReportConfig::destination_package() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  return destination_package_.GetNoArena();
}
inline void TraceConfig_IncidentReportConfig::set_destination_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}
inline void TraceConfig_IncidentReportConfig::set_destination_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}
inline void TraceConfig_IncidentReportConfig::set_destination_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  destination_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}
inline void TraceConfig_IncidentReportConfig::set_destination_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  destination_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}
inline std::string* TraceConfig_IncidentReportConfig::mutable_destination_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  return destination_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig_IncidentReportConfig::release_destination_package() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  if (!has_destination_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return destination_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig_IncidentReportConfig::set_allocated_destination_package(std::string* destination_package) {
  if (destination_package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  destination_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_package);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}

// optional string destination_class = 2;
inline bool TraceConfig_IncidentReportConfig::has_destination_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig_IncidentReportConfig::clear_destination_class() {
  destination_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_IncidentReportConfig::destination_class() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  return destination_class_.GetNoArena();
}
inline void TraceConfig_IncidentReportConfig::set_destination_class(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}
inline void TraceConfig_IncidentReportConfig::set_destination_class(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}
inline void TraceConfig_IncidentReportConfig::set_destination_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  destination_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}
inline void TraceConfig_IncidentReportConfig::set_destination_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  destination_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}
inline std::string* TraceConfig_IncidentReportConfig::mutable_destination_class() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  return destination_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig_IncidentReportConfig::release_destination_class() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  if (!has_destination_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return destination_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig_IncidentReportConfig::set_allocated_destination_class(std::string* destination_class) {
  if (destination_class != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_class);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}

// optional int32 privacy_level = 3;
inline bool TraceConfig_IncidentReportConfig::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig_IncidentReportConfig::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceConfig_IncidentReportConfig::privacy_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.privacy_level)
  return privacy_level_;
}
inline void TraceConfig_IncidentReportConfig::set_privacy_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.privacy_level)
}

// optional bool skip_dropbox = 4;
inline bool TraceConfig_IncidentReportConfig::has_skip_dropbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceConfig_IncidentReportConfig::clear_skip_dropbox() {
  skip_dropbox_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TraceConfig_IncidentReportConfig::skip_dropbox() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox)
  return skip_dropbox_;
}
inline void TraceConfig_IncidentReportConfig::set_skip_dropbox(bool value) {
  _has_bits_[0] |= 0x00000008u;
  skip_dropbox_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox)
}

// -------------------------------------------------------------------

// TraceConfig

// repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
inline int TraceConfig::buffers_size() const {
  return buffers_.size();
}
inline void TraceConfig::clear_buffers() {
  buffers_.Clear();
}
inline ::perfetto::protos::TraceConfig_BufferConfig* TraceConfig::mutable_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.buffers)
  return buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >*
TraceConfig::mutable_buffers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.buffers)
  return &buffers_;
}
inline const ::perfetto::protos::TraceConfig_BufferConfig& TraceConfig::buffers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.buffers)
  return buffers_.Get(index);
}
inline ::perfetto::protos::TraceConfig_BufferConfig* TraceConfig::add_buffers() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.buffers)
  return buffers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >&
TraceConfig::buffers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.buffers)
  return buffers_;
}

// repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
inline int TraceConfig::data_sources_size() const {
  return data_sources_.size();
}
inline void TraceConfig::clear_data_sources() {
  data_sources_.Clear();
}
inline ::perfetto::protos::TraceConfig_DataSource* TraceConfig::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.data_sources)
  return data_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >*
TraceConfig::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.data_sources)
  return &data_sources_;
}
inline const ::perfetto::protos::TraceConfig_DataSource& TraceConfig::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.data_sources)
  return data_sources_.Get(index);
}
inline ::perfetto::protos::TraceConfig_DataSource* TraceConfig::add_data_sources() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.data_sources)
  return data_sources_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >&
TraceConfig::data_sources() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.data_sources)
  return data_sources_;
}

// optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
inline bool TraceConfig::has_builtin_data_sources() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TraceConfig::clear_builtin_data_sources() {
  if (builtin_data_sources_ != nullptr) builtin_data_sources_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::perfetto::protos::TraceConfig_BuiltinDataSource& TraceConfig::builtin_data_sources() const {
  const ::perfetto::protos::TraceConfig_BuiltinDataSource* p = builtin_data_sources_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.builtin_data_sources)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_BuiltinDataSource*>(
      &::perfetto::protos::_TraceConfig_BuiltinDataSource_default_instance_);
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::release_builtin_data_sources() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.builtin_data_sources)
  _has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* temp = builtin_data_sources_;
  builtin_data_sources_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::mutable_builtin_data_sources() {
  _has_bits_[0] |= 0x00000020u;
  if (builtin_data_sources_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_BuiltinDataSource>(GetArenaNoVirtual());
    builtin_data_sources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.builtin_data_sources)
  return builtin_data_sources_;
}
inline void TraceConfig::set_allocated_builtin_data_sources(::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete builtin_data_sources_;
  }
  if (builtin_data_sources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      builtin_data_sources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, builtin_data_sources, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  builtin_data_sources_ = builtin_data_sources;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.builtin_data_sources)
}

// optional uint32 duration_ms = 3;
inline bool TraceConfig::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TraceConfig::clear_duration_ms() {
  duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig::duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.duration_ms)
  return duration_ms_;
}
inline void TraceConfig::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.duration_ms)
}

// optional bool enable_extra_guardrails = 4;
inline bool TraceConfig::has_enable_extra_guardrails() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TraceConfig::clear_enable_extra_guardrails() {
  enable_extra_guardrails_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TraceConfig::enable_extra_guardrails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.enable_extra_guardrails)
  return enable_extra_guardrails_;
}
inline void TraceConfig::set_enable_extra_guardrails(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_extra_guardrails_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.enable_extra_guardrails)
}

// optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
inline bool TraceConfig::has_lockdown_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TraceConfig::clear_lockdown_mode() {
  lockdown_mode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::TraceConfig_LockdownModeOperation TraceConfig::lockdown_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.lockdown_mode)
  return static_cast< ::perfetto::protos::TraceConfig_LockdownModeOperation >(lockdown_mode_);
}
inline void TraceConfig::set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value) {
  assert(::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  lockdown_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.lockdown_mode)
}

// repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
inline int TraceConfig::producers_size() const {
  return producers_.size();
}
inline void TraceConfig::clear_producers() {
  producers_.Clear();
}
inline ::perfetto::protos::TraceConfig_ProducerConfig* TraceConfig::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.producers)
  return producers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >*
TraceConfig::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.producers)
  return &producers_;
}
inline const ::perfetto::protos::TraceConfig_ProducerConfig& TraceConfig::producers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.producers)
  return producers_.Get(index);
}
inline ::perfetto::protos::TraceConfig_ProducerConfig* TraceConfig::add_producers() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.producers)
  return producers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >&
TraceConfig::producers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.producers)
  return producers_;
}

// optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
inline bool TraceConfig::has_statsd_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceConfig::clear_statsd_metadata() {
  if (statsd_metadata_ != nullptr) statsd_metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::TraceConfig_StatsdMetadata& TraceConfig::statsd_metadata() const {
  const ::perfetto::protos::TraceConfig_StatsdMetadata* p = statsd_metadata_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.statsd_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_StatsdMetadata*>(
      &::perfetto::protos::_TraceConfig_StatsdMetadata_default_instance_);
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::release_statsd_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.statsd_metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TraceConfig_StatsdMetadata* temp = statsd_metadata_;
  statsd_metadata_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::mutable_statsd_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (statsd_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_StatsdMetadata>(GetArenaNoVirtual());
    statsd_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.statsd_metadata)
  return statsd_metadata_;
}
inline void TraceConfig::set_allocated_statsd_metadata(::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete statsd_metadata_;
  }
  if (statsd_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statsd_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statsd_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  statsd_metadata_ = statsd_metadata;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.statsd_metadata)
}

// optional bool write_into_file = 8;
inline bool TraceConfig::has_write_into_file() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TraceConfig::clear_write_into_file() {
  write_into_file_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TraceConfig::write_into_file() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.write_into_file)
  return write_into_file_;
}
inline void TraceConfig::set_write_into_file(bool value) {
  _has_bits_[0] |= 0x00001000u;
  write_into_file_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.write_into_file)
}

// optional string output_path = 29;
inline bool TraceConfig::has_output_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceConfig::clear_output_path() {
  output_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig::output_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.output_path)
  return output_path_.GetNoArena();
}
inline void TraceConfig::set_output_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.output_path)
}
inline void TraceConfig::set_output_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  output_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.output_path)
}
inline void TraceConfig::set_output_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  output_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.output_path)
}
inline void TraceConfig::set_output_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  output_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.output_path)
}
inline std::string* TraceConfig::mutable_output_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.output_path)
  return output_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig::release_output_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.output_path)
  if (!has_output_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig::set_allocated_output_path(std::string* output_path) {
  if (output_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_path);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.output_path)
}

// optional uint32 file_write_period_ms = 9;
inline bool TraceConfig::has_file_write_period_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TraceConfig::clear_file_write_period_ms() {
  file_write_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig::file_write_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.file_write_period_ms)
  return file_write_period_ms_;
}
inline void TraceConfig::set_file_write_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  file_write_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.file_write_period_ms)
}

// optional uint64 max_file_size_bytes = 10;
inline bool TraceConfig::has_max_file_size_bytes() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TraceConfig::clear_max_file_size_bytes() {
  max_file_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceConfig::max_file_size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.max_file_size_bytes)
  return max_file_size_bytes_;
}
inline void TraceConfig::set_max_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  max_file_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.max_file_size_bytes)
}

// optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
inline bool TraceConfig::has_guardrail_overrides() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceConfig::clear_guardrail_overrides() {
  if (guardrail_overrides_ != nullptr) guardrail_overrides_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perfetto::protos::TraceConfig_GuardrailOverrides& TraceConfig::guardrail_overrides() const {
  const ::perfetto::protos::TraceConfig_GuardrailOverrides* p = guardrail_overrides_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.guardrail_overrides)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_GuardrailOverrides*>(
      &::perfetto::protos::_TraceConfig_GuardrailOverrides_default_instance_);
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::release_guardrail_overrides() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.guardrail_overrides)
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* temp = guardrail_overrides_;
  guardrail_overrides_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::mutable_guardrail_overrides() {
  _has_bits_[0] |= 0x00000008u;
  if (guardrail_overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_GuardrailOverrides>(GetArenaNoVirtual());
    guardrail_overrides_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.guardrail_overrides)
  return guardrail_overrides_;
}
inline void TraceConfig::set_allocated_guardrail_overrides(::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete guardrail_overrides_;
  }
  if (guardrail_overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      guardrail_overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guardrail_overrides, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  guardrail_overrides_ = guardrail_overrides;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.guardrail_overrides)
}

// optional bool deferred_start = 12;
inline bool TraceConfig::has_deferred_start() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TraceConfig::clear_deferred_start() {
  deferred_start_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TraceConfig::deferred_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.deferred_start)
  return deferred_start_;
}
inline void TraceConfig::set_deferred_start(bool value) {
  _has_bits_[0] |= 0x00002000u;
  deferred_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.deferred_start)
}

// optional uint32 flush_period_ms = 13;
inline bool TraceConfig::has_flush_period_ms() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TraceConfig::clear_flush_period_ms() {
  flush_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig::flush_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.flush_period_ms)
  return flush_period_ms_;
}
inline void TraceConfig::set_flush_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  flush_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.flush_period_ms)
}

// optional uint32 flush_timeout_ms = 14;
inline bool TraceConfig::has_flush_timeout_ms() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TraceConfig::clear_flush_timeout_ms() {
  flush_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig::flush_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.flush_timeout_ms)
  return flush_timeout_ms_;
}
inline void TraceConfig::set_flush_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  flush_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.flush_timeout_ms)
}

// optional uint32 data_source_stop_timeout_ms = 23;
inline bool TraceConfig::has_data_source_stop_timeout_ms() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TraceConfig::clear_data_source_stop_timeout_ms() {
  data_source_stop_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceConfig::data_source_stop_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.data_source_stop_timeout_ms)
  return data_source_stop_timeout_ms_;
}
inline void TraceConfig::set_data_source_stop_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  data_source_stop_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.data_source_stop_timeout_ms)
}

// optional bool notify_traceur = 16;
inline bool TraceConfig::has_notify_traceur() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TraceConfig::clear_notify_traceur() {
  notify_traceur_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TraceConfig::notify_traceur() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.notify_traceur)
  return notify_traceur_;
}
inline void TraceConfig::set_notify_traceur(bool value) {
  _has_bits_[0] |= 0x00004000u;
  notify_traceur_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.notify_traceur)
}

// optional int32 bugreport_score = 30;
inline bool TraceConfig::has_bugreport_score() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TraceConfig::clear_bugreport_score() {
  bugreport_score_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceConfig::bugreport_score() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.bugreport_score)
  return bugreport_score_;
}
inline void TraceConfig::set_bugreport_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  bugreport_score_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.bugreport_score)
}

// optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
inline bool TraceConfig::has_trigger_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceConfig::clear_trigger_config() {
  if (trigger_config_ != nullptr) trigger_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig& TraceConfig::trigger_config() const {
  const ::perfetto::protos::TraceConfig_TriggerConfig* p = trigger_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trigger_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_TriggerConfig*>(
      &::perfetto::protos::_TraceConfig_TriggerConfig_default_instance_);
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::release_trigger_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.trigger_config)
  _has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::TraceConfig_TriggerConfig* temp = trigger_config_;
  trigger_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::mutable_trigger_config() {
  _has_bits_[0] |= 0x00000010u;
  if (trigger_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig>(GetArenaNoVirtual());
    trigger_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.trigger_config)
  return trigger_config_;
}
inline void TraceConfig::set_allocated_trigger_config(::perfetto::protos::TraceConfig_TriggerConfig* trigger_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trigger_config_;
  }
  if (trigger_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trigger_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  trigger_config_ = trigger_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.trigger_config)
}

// repeated string activate_triggers = 18;
inline int TraceConfig::activate_triggers_size() const {
  return activate_triggers_.size();
}
inline void TraceConfig::clear_activate_triggers() {
  activate_triggers_.Clear();
}
inline const std::string& TraceConfig::activate_triggers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.activate_triggers)
  return activate_triggers_.Get(index);
}
inline std::string* TraceConfig::mutable_activate_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.activate_triggers)
  return activate_triggers_.Mutable(index);
}
inline void TraceConfig::set_activate_triggers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.activate_triggers)
  activate_triggers_.Mutable(index)->assign(value);
}
inline void TraceConfig::set_activate_triggers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.activate_triggers)
  activate_triggers_.Mutable(index)->assign(std::move(value));
}
inline void TraceConfig::set_activate_triggers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  activate_triggers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::set_activate_triggers(int index, const char* value, size_t size) {
  activate_triggers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.activate_triggers)
}
inline std::string* TraceConfig::add_activate_triggers() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.activate_triggers)
  return activate_triggers_.Add();
}
inline void TraceConfig::add_activate_triggers(const std::string& value) {
  activate_triggers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(std::string&& value) {
  activate_triggers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  activate_triggers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(const char* value, size_t size) {
  activate_triggers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.activate_triggers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig::activate_triggers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.activate_triggers)
  return activate_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig::mutable_activate_triggers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.activate_triggers)
  return &activate_triggers_;
}

// optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
inline bool TraceConfig::has_incremental_state_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TraceConfig::clear_incremental_state_config() {
  if (incremental_state_config_ != nullptr) incremental_state_config_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::perfetto::protos::TraceConfig_IncrementalStateConfig& TraceConfig::incremental_state_config() const {
  const ::perfetto::protos::TraceConfig_IncrementalStateConfig* p = incremental_state_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.incremental_state_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_IncrementalStateConfig*>(
      &::perfetto::protos::_TraceConfig_IncrementalStateConfig_default_instance_);
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::release_incremental_state_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.incremental_state_config)
  _has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* temp = incremental_state_config_;
  incremental_state_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::mutable_incremental_state_config() {
  _has_bits_[0] |= 0x00000040u;
  if (incremental_state_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_IncrementalStateConfig>(GetArenaNoVirtual());
    incremental_state_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.incremental_state_config)
  return incremental_state_config_;
}
inline void TraceConfig::set_allocated_incremental_state_config(::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete incremental_state_config_;
  }
  if (incremental_state_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      incremental_state_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incremental_state_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  incremental_state_config_ = incremental_state_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.incremental_state_config)
}

// optional bool allow_user_build_tracing = 19;
inline bool TraceConfig::has_allow_user_build_tracing() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TraceConfig::clear_allow_user_build_tracing() {
  allow_user_build_tracing_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool TraceConfig::allow_user_build_tracing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.allow_user_build_tracing)
  return allow_user_build_tracing_;
}
inline void TraceConfig::set_allow_user_build_tracing(bool value) {
  _has_bits_[0] |= 0x00040000u;
  allow_user_build_tracing_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.allow_user_build_tracing)
}

// optional string unique_session_name = 22;
inline bool TraceConfig::has_unique_session_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceConfig::clear_unique_session_name() {
  unique_session_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig::unique_session_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.unique_session_name)
  return unique_session_name_.GetNoArena();
}
inline void TraceConfig::set_unique_session_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_session_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.unique_session_name)
}
inline void TraceConfig::set_unique_session_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_session_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TraceConfig.unique_session_name)
}
inline void TraceConfig::set_unique_session_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_session_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.unique_session_name)
}
inline void TraceConfig::set_unique_session_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_session_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.unique_session_name)
}
inline std::string* TraceConfig::mutable_unique_session_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.unique_session_name)
  return unique_session_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceConfig::release_unique_session_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.unique_session_name)
  if (!has_unique_session_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_session_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceConfig::set_allocated_unique_session_name(std::string* unique_session_name) {
  if (unique_session_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_session_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_session_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.unique_session_name)
}

// optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
inline bool TraceConfig::has_compression_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TraceConfig::clear_compression_type() {
  compression_type_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::perfetto::protos::TraceConfig_CompressionType TraceConfig::compression_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.compression_type)
  return static_cast< ::perfetto::protos::TraceConfig_CompressionType >(compression_type_);
}
inline void TraceConfig::set_compression_type(::perfetto::protos::TraceConfig_CompressionType value) {
  assert(::perfetto::protos::TraceConfig_CompressionType_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.compression_type)
}

// optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
inline bool TraceConfig::has_incident_report_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TraceConfig::clear_incident_report_config() {
  if (incident_report_config_ != nullptr) incident_report_config_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::perfetto::protos::TraceConfig_IncidentReportConfig& TraceConfig::incident_report_config() const {
  const ::perfetto::protos::TraceConfig_IncidentReportConfig* p = incident_report_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.incident_report_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig_IncidentReportConfig*>(
      &::perfetto::protos::_TraceConfig_IncidentReportConfig_default_instance_);
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::release_incident_report_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.incident_report_config)
  _has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* temp = incident_report_config_;
  incident_report_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::mutable_incident_report_config() {
  _has_bits_[0] |= 0x00000080u;
  if (incident_report_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_IncidentReportConfig>(GetArenaNoVirtual());
    incident_report_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.incident_report_config)
  return incident_report_config_;
}
inline void TraceConfig::set_allocated_incident_report_config(::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete incident_report_config_;
  }
  if (incident_report_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      incident_report_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incident_report_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  incident_report_config_ = incident_report_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.incident_report_config)
}

// optional int64 trace_uuid_msb = 27;
inline bool TraceConfig::has_trace_uuid_msb() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TraceConfig::clear_trace_uuid_msb() {
  trace_uuid_msb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceConfig::trace_uuid_msb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trace_uuid_msb)
  return trace_uuid_msb_;
}
inline void TraceConfig::set_trace_uuid_msb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  trace_uuid_msb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.trace_uuid_msb)
}

// optional int64 trace_uuid_lsb = 28;
inline bool TraceConfig::has_trace_uuid_lsb() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TraceConfig::clear_trace_uuid_lsb() {
  trace_uuid_lsb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceConfig::trace_uuid_lsb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trace_uuid_lsb)
  return trace_uuid_lsb_;
}
inline void TraceConfig::set_trace_uuid_lsb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00800000u;
  trace_uuid_lsb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.trace_uuid_lsb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ChromeConfig_ClientPriority> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ConsoleConfig_Output> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::AndroidPowerConfig_BatteryCounters> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ProcessStatsConfig_Quirks> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::PerfEventConfig_Counter> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::SysStatsConfig_StatCounters> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TraceConfig_LockdownModeOperation> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TraceConfig_CompressionType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::BuiltinClock> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::AndroidLogId> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::AndroidLogPriority> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::MeminfoCounters> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::VmstatCounters> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto
