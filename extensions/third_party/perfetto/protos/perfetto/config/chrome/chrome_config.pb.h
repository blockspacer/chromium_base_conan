// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/chrome/chrome_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ChromeConfig;
class ChromeConfigDefaultTypeInternal;
extern ChromeConfigDefaultTypeInternal _ChromeConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeConfig* Arena::CreateMaybeMessage<::perfetto::protos::ChromeConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ChromeConfig_ClientPriority : int {
  ChromeConfig_ClientPriority_UNKNOWN = 0,
  ChromeConfig_ClientPriority_BACKGROUND = 1,
  ChromeConfig_ClientPriority_USER_INITIATED = 2
};
bool ChromeConfig_ClientPriority_IsValid(int value);
constexpr ChromeConfig_ClientPriority ChromeConfig_ClientPriority_ClientPriority_MIN = ChromeConfig_ClientPriority_UNKNOWN;
constexpr ChromeConfig_ClientPriority ChromeConfig_ClientPriority_ClientPriority_MAX = ChromeConfig_ClientPriority_USER_INITIATED;
constexpr int ChromeConfig_ClientPriority_ClientPriority_ARRAYSIZE = ChromeConfig_ClientPriority_ClientPriority_MAX + 1;

const std::string& ChromeConfig_ClientPriority_Name(ChromeConfig_ClientPriority value);
template<typename T>
inline const std::string& ChromeConfig_ClientPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeConfig_ClientPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeConfig_ClientPriority_Name.");
  return ChromeConfig_ClientPriority_Name(static_cast<ChromeConfig_ClientPriority>(enum_t_value));
}
bool ChromeConfig_ClientPriority_Parse(
    const std::string& name, ChromeConfig_ClientPriority* value);
// ===================================================================

class ChromeConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeConfig) */ {
 public:
  ChromeConfig();
  virtual ~ChromeConfig();

  ChromeConfig(const ChromeConfig& from);
  ChromeConfig(ChromeConfig&& from) noexcept
    : ChromeConfig() {
    *this = ::std::move(from);
  }

  inline ChromeConfig& operator=(const ChromeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeConfig& operator=(ChromeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeConfig* internal_default_instance() {
    return reinterpret_cast<const ChromeConfig*>(
               &_ChromeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeConfig& a, ChromeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeConfig* New() const final {
    return CreateMaybeMessage<ChromeConfig>(nullptr);
  }

  ChromeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeConfig& from);
  void MergeFrom(const ChromeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeConfig_ClientPriority ClientPriority;
  static constexpr ClientPriority UNKNOWN =
    ChromeConfig_ClientPriority_UNKNOWN;
  static constexpr ClientPriority BACKGROUND =
    ChromeConfig_ClientPriority_BACKGROUND;
  static constexpr ClientPriority USER_INITIATED =
    ChromeConfig_ClientPriority_USER_INITIATED;
  static inline bool ClientPriority_IsValid(int value) {
    return ChromeConfig_ClientPriority_IsValid(value);
  }
  static constexpr ClientPriority ClientPriority_MIN =
    ChromeConfig_ClientPriority_ClientPriority_MIN;
  static constexpr ClientPriority ClientPriority_MAX =
    ChromeConfig_ClientPriority_ClientPriority_MAX;
  static constexpr int ClientPriority_ARRAYSIZE =
    ChromeConfig_ClientPriority_ClientPriority_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClientPriority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientPriority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientPriority_Name.");
    return ChromeConfig_ClientPriority_Name(enum_t_value);
  }
  static inline bool ClientPriority_Parse(const std::string& name,
      ClientPriority* value) {
    return ChromeConfig_ClientPriority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTraceConfigFieldNumber = 1,
    kJsonAgentLabelFilterFieldNumber = 5,
    kPrivacyFilteringEnabledFieldNumber = 2,
    kConvertToLegacyJsonFieldNumber = 3,
    kClientPriorityFieldNumber = 4,
  };
  // optional string trace_config = 1;
  bool has_trace_config() const;
  void clear_trace_config();
  const std::string& trace_config() const;
  void set_trace_config(const std::string& value);
  void set_trace_config(std::string&& value);
  void set_trace_config(const char* value);
  void set_trace_config(const char* value, size_t size);
  std::string* mutable_trace_config();
  std::string* release_trace_config();
  void set_allocated_trace_config(std::string* trace_config);

  // optional string json_agent_label_filter = 5;
  bool has_json_agent_label_filter() const;
  void clear_json_agent_label_filter();
  const std::string& json_agent_label_filter() const;
  void set_json_agent_label_filter(const std::string& value);
  void set_json_agent_label_filter(std::string&& value);
  void set_json_agent_label_filter(const char* value);
  void set_json_agent_label_filter(const char* value, size_t size);
  std::string* mutable_json_agent_label_filter();
  std::string* release_json_agent_label_filter();
  void set_allocated_json_agent_label_filter(std::string* json_agent_label_filter);

  // optional bool privacy_filtering_enabled = 2;
  bool has_privacy_filtering_enabled() const;
  void clear_privacy_filtering_enabled();
  bool privacy_filtering_enabled() const;
  void set_privacy_filtering_enabled(bool value);

  // optional bool convert_to_legacy_json = 3;
  bool has_convert_to_legacy_json() const;
  void clear_convert_to_legacy_json();
  bool convert_to_legacy_json() const;
  void set_convert_to_legacy_json(bool value);

  // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
  bool has_client_priority() const;
  void clear_client_priority();
  ::perfetto::protos::ChromeConfig_ClientPriority client_priority() const;
  void set_client_priority(::perfetto::protos::ChromeConfig_ClientPriority value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_agent_label_filter_;
  bool privacy_filtering_enabled_;
  bool convert_to_legacy_json_;
  int client_priority_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeConfig

// optional string trace_config = 1;
inline bool ChromeConfig::has_trace_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeConfig::clear_trace_config() {
  trace_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeConfig::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.GetNoArena();
}
inline void ChromeConfig::set_trace_config(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeConfig.trace_config)
}
inline std::string* ChromeConfig::mutable_trace_config() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeConfig::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeConfig.trace_config)
  if (!has_trace_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeConfig::set_allocated_trace_config(std::string* trace_config) {
  if (trace_config != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_config);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeConfig.trace_config)
}

// optional bool privacy_filtering_enabled = 2;
inline bool ChromeConfig::has_privacy_filtering_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeConfig::clear_privacy_filtering_enabled() {
  privacy_filtering_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChromeConfig::privacy_filtering_enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
  return privacy_filtering_enabled_;
}
inline void ChromeConfig::set_privacy_filtering_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  privacy_filtering_enabled_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
}

// optional bool convert_to_legacy_json = 3;
inline bool ChromeConfig::has_convert_to_legacy_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeConfig::clear_convert_to_legacy_json() {
  convert_to_legacy_json_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChromeConfig::convert_to_legacy_json() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.convert_to_legacy_json)
  return convert_to_legacy_json_;
}
inline void ChromeConfig::set_convert_to_legacy_json(bool value) {
  _has_bits_[0] |= 0x00000008u;
  convert_to_legacy_json_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.convert_to_legacy_json)
}

// optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
inline bool ChromeConfig::has_client_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeConfig::clear_client_priority() {
  client_priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::ChromeConfig_ClientPriority ChromeConfig::client_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.client_priority)
  return static_cast< ::perfetto::protos::ChromeConfig_ClientPriority >(client_priority_);
}
inline void ChromeConfig::set_client_priority(::perfetto::protos::ChromeConfig_ClientPriority value) {
  assert(::perfetto::protos::ChromeConfig_ClientPriority_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  client_priority_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.client_priority)
}

// optional string json_agent_label_filter = 5;
inline bool ChromeConfig::has_json_agent_label_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeConfig::clear_json_agent_label_filter() {
  json_agent_label_filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeConfig::json_agent_label_filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.json_agent_label_filter)
  return json_agent_label_filter_.GetNoArena();
}
inline void ChromeConfig::set_json_agent_label_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline void ChromeConfig::set_json_agent_label_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  json_agent_label_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeConfig.json_agent_label_filter)
}
inline std::string* ChromeConfig::mutable_json_agent_label_filter() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeConfig.json_agent_label_filter)
  return json_agent_label_filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeConfig::release_json_agent_label_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeConfig.json_agent_label_filter)
  if (!has_json_agent_label_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return json_agent_label_filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeConfig::set_allocated_json_agent_label_filter(std::string* json_agent_label_filter) {
  if (json_agent_label_filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_agent_label_filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_agent_label_filter);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeConfig.json_agent_label_filter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ChromeConfig_ClientPriority> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
