// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/track_event/track_event_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TrackEventConfig;
class TrackEventConfigDefaultTypeInternal;
extern TrackEventConfigDefaultTypeInternal _TrackEventConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TrackEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TrackEventConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventConfig) */ {
 public:
  TrackEventConfig();
  virtual ~TrackEventConfig();

  TrackEventConfig(const TrackEventConfig& from);
  TrackEventConfig(TrackEventConfig&& from) noexcept
    : TrackEventConfig() {
    *this = ::std::move(from);
  }

  inline TrackEventConfig& operator=(const TrackEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventConfig& operator=(TrackEventConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEventConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEventConfig* internal_default_instance() {
    return reinterpret_cast<const TrackEventConfig*>(
               &_TrackEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackEventConfig& a, TrackEventConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEventConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEventConfig* New() const final {
    return CreateMaybeMessage<TrackEventConfig>(nullptr);
  }

  TrackEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEventConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEventConfig& from);
  void MergeFrom(const TrackEventConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledCategoriesFieldNumber = 1,
    kEnabledCategoriesFieldNumber = 2,
    kDisabledTagsFieldNumber = 3,
    kEnabledTagsFieldNumber = 4,
  };
  // repeated string disabled_categories = 1;
  int disabled_categories_size() const;
  void clear_disabled_categories();
  const std::string& disabled_categories(int index) const;
  std::string* mutable_disabled_categories(int index);
  void set_disabled_categories(int index, const std::string& value);
  void set_disabled_categories(int index, std::string&& value);
  void set_disabled_categories(int index, const char* value);
  void set_disabled_categories(int index, const char* value, size_t size);
  std::string* add_disabled_categories();
  void add_disabled_categories(const std::string& value);
  void add_disabled_categories(std::string&& value);
  void add_disabled_categories(const char* value);
  void add_disabled_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disabled_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disabled_categories();

  // repeated string enabled_categories = 2;
  int enabled_categories_size() const;
  void clear_enabled_categories();
  const std::string& enabled_categories(int index) const;
  std::string* mutable_enabled_categories(int index);
  void set_enabled_categories(int index, const std::string& value);
  void set_enabled_categories(int index, std::string&& value);
  void set_enabled_categories(int index, const char* value);
  void set_enabled_categories(int index, const char* value, size_t size);
  std::string* add_enabled_categories();
  void add_enabled_categories(const std::string& value);
  void add_enabled_categories(std::string&& value);
  void add_enabled_categories(const char* value);
  void add_enabled_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_categories();

  // repeated string disabled_tags = 3;
  int disabled_tags_size() const;
  void clear_disabled_tags();
  const std::string& disabled_tags(int index) const;
  std::string* mutable_disabled_tags(int index);
  void set_disabled_tags(int index, const std::string& value);
  void set_disabled_tags(int index, std::string&& value);
  void set_disabled_tags(int index, const char* value);
  void set_disabled_tags(int index, const char* value, size_t size);
  std::string* add_disabled_tags();
  void add_disabled_tags(const std::string& value);
  void add_disabled_tags(std::string&& value);
  void add_disabled_tags(const char* value);
  void add_disabled_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disabled_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disabled_tags();

  // repeated string enabled_tags = 4;
  int enabled_tags_size() const;
  void clear_enabled_tags();
  const std::string& enabled_tags(int index) const;
  std::string* mutable_enabled_tags(int index);
  void set_enabled_tags(int index, const std::string& value);
  void set_enabled_tags(int index, std::string&& value);
  void set_enabled_tags(int index, const char* value);
  void set_enabled_tags(int index, const char* value, size_t size);
  std::string* add_enabled_tags();
  void add_enabled_tags(const std::string& value);
  void add_enabled_tags(std::string&& value);
  void add_enabled_tags(const char* value);
  void add_enabled_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_tags();

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disabled_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disabled_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_tags_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackEventConfig

// repeated string disabled_categories = 1;
inline int TrackEventConfig::disabled_categories_size() const {
  return disabled_categories_.size();
}
inline void TrackEventConfig::clear_disabled_categories() {
  disabled_categories_.Clear();
}
inline const std::string& TrackEventConfig::disabled_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Get(index);
}
inline std::string* TrackEventConfig::mutable_disabled_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Mutable(index);
}
inline void TrackEventConfig::set_disabled_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_categories)
  disabled_categories_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_disabled_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_categories)
  disabled_categories_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_disabled_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::set_disabled_categories(int index, const char* value, size_t size) {
  disabled_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline std::string* TrackEventConfig::add_disabled_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_.Add();
}
inline void TrackEventConfig::add_disabled_categories(const std::string& value) {
  disabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(std::string&& value) {
  disabled_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline void TrackEventConfig::add_disabled_categories(const char* value, size_t size) {
  disabled_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.disabled_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::disabled_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.disabled_categories)
  return disabled_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_disabled_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.disabled_categories)
  return &disabled_categories_;
}

// repeated string enabled_categories = 2;
inline int TrackEventConfig::enabled_categories_size() const {
  return enabled_categories_.size();
}
inline void TrackEventConfig::clear_enabled_categories() {
  enabled_categories_.Clear();
}
inline const std::string& TrackEventConfig::enabled_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Get(index);
}
inline std::string* TrackEventConfig::mutable_enabled_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Mutable(index);
}
inline void TrackEventConfig::set_enabled_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_categories)
  enabled_categories_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_enabled_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_categories)
  enabled_categories_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_enabled_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::set_enabled_categories(int index, const char* value, size_t size) {
  enabled_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline std::string* TrackEventConfig::add_enabled_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_.Add();
}
inline void TrackEventConfig::add_enabled_categories(const std::string& value) {
  enabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(std::string&& value) {
  enabled_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline void TrackEventConfig::add_enabled_categories(const char* value, size_t size) {
  enabled_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.enabled_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::enabled_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.enabled_categories)
  return enabled_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_enabled_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.enabled_categories)
  return &enabled_categories_;
}

// repeated string disabled_tags = 3;
inline int TrackEventConfig::disabled_tags_size() const {
  return disabled_tags_.size();
}
inline void TrackEventConfig::clear_disabled_tags() {
  disabled_tags_.Clear();
}
inline const std::string& TrackEventConfig::disabled_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Get(index);
}
inline std::string* TrackEventConfig::mutable_disabled_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Mutable(index);
}
inline void TrackEventConfig::set_disabled_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_tags)
  disabled_tags_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_disabled_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.disabled_tags)
  disabled_tags_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_disabled_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::set_disabled_tags(int index, const char* value, size_t size) {
  disabled_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline std::string* TrackEventConfig::add_disabled_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_.Add();
}
inline void TrackEventConfig::add_disabled_tags(const std::string& value) {
  disabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(std::string&& value) {
  disabled_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline void TrackEventConfig::add_disabled_tags(const char* value, size_t size) {
  disabled_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.disabled_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::disabled_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.disabled_tags)
  return disabled_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_disabled_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.disabled_tags)
  return &disabled_tags_;
}

// repeated string enabled_tags = 4;
inline int TrackEventConfig::enabled_tags_size() const {
  return enabled_tags_.size();
}
inline void TrackEventConfig::clear_enabled_tags() {
  enabled_tags_.Clear();
}
inline const std::string& TrackEventConfig::enabled_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Get(index);
}
inline std::string* TrackEventConfig::mutable_enabled_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Mutable(index);
}
inline void TrackEventConfig::set_enabled_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_tags)
  enabled_tags_.Mutable(index)->assign(value);
}
inline void TrackEventConfig::set_enabled_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventConfig.enabled_tags)
  enabled_tags_.Mutable(index)->assign(std::move(value));
}
inline void TrackEventConfig::set_enabled_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::set_enabled_tags(int index, const char* value, size_t size) {
  enabled_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline std::string* TrackEventConfig::add_enabled_tags() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_.Add();
}
inline void TrackEventConfig::add_enabled_tags(const std::string& value) {
  enabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(std::string&& value) {
  enabled_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline void TrackEventConfig::add_enabled_tags(const char* value, size_t size) {
  enabled_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEventConfig.enabled_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEventConfig::enabled_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventConfig.enabled_tags)
  return enabled_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEventConfig::mutable_enabled_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventConfig.enabled_tags)
  return &enabled_tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrack_5fevent_2ftrack_5fevent_5fconfig_2eproto
