// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_PROFILING_PERF_EVENT_CONFIG_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_PROFILING_PERF_EVENT_CONFIG_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class PerfEventConfig_CallstackSampling;
class PerfEventConfig_Scope;
class PerfEventConfig_Timebase;
class PerfEventConfig_Tracepoint;
enum PerfEventConfig_Counter : int32_t;

enum PerfEventConfig_Counter : int32_t {
  PerfEventConfig_Counter_UNKNOWN_COUNTER = 0,
  PerfEventConfig_Counter_SW_CPU_CLOCK = 1,
  PerfEventConfig_Counter_SW_PAGE_FAULTS = 2,
  PerfEventConfig_Counter_HW_CPU_CYCLES = 10,
  PerfEventConfig_Counter_HW_INSTRUCTIONS = 11,
};

const PerfEventConfig_Counter PerfEventConfig_Counter_MIN = PerfEventConfig_Counter_UNKNOWN_COUNTER;
const PerfEventConfig_Counter PerfEventConfig_Counter_MAX = PerfEventConfig_Counter_HW_INSTRUCTIONS;

class PerfEventConfig_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/16, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  PerfEventConfig_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PerfEventConfig_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PerfEventConfig_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_timebase() const { return at<15>().valid(); }
  ::protozero::ConstBytes timebase() const { return at<15>().as_bytes(); }
  bool has_callstack_sampling() const { return at<16>().valid(); }
  ::protozero::ConstBytes callstack_sampling() const { return at<16>().as_bytes(); }
  bool has_ring_buffer_read_period_ms() const { return at<8>().valid(); }
  uint32_t ring_buffer_read_period_ms() const { return at<8>().as_uint32(); }
  bool has_ring_buffer_pages() const { return at<3>().valid(); }
  uint32_t ring_buffer_pages() const { return at<3>().as_uint32(); }
  bool has_max_daemon_memory_kb() const { return at<13>().valid(); }
  uint32_t max_daemon_memory_kb() const { return at<13>().as_uint32(); }
  bool has_remote_descriptor_timeout_ms() const { return at<9>().valid(); }
  uint32_t remote_descriptor_timeout_ms() const { return at<9>().as_uint32(); }
  bool has_unwind_state_clear_period_ms() const { return at<10>().valid(); }
  uint32_t unwind_state_clear_period_ms() const { return at<10>().as_uint32(); }
  bool has_all_cpus() const { return at<1>().valid(); }
  bool all_cpus() const { return at<1>().as_bool(); }
  bool has_sampling_frequency() const { return at<2>().valid(); }
  uint32_t sampling_frequency() const { return at<2>().as_uint32(); }
  bool has_kernel_frames() const { return at<12>().valid(); }
  bool kernel_frames() const { return at<12>().as_bool(); }
  bool has_target_pid() const { return at<4>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> target_pid() const { return GetRepeated<int32_t>(4); }
  bool has_target_cmdline() const { return at<5>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> target_cmdline() const { return GetRepeated<::protozero::ConstChars>(5); }
  bool has_exclude_pid() const { return at<6>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> exclude_pid() const { return GetRepeated<int32_t>(6); }
  bool has_exclude_cmdline() const { return at<7>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> exclude_cmdline() const { return GetRepeated<::protozero::ConstChars>(7); }
  bool has_additional_cmdline_count() const { return at<11>().valid(); }
  uint32_t additional_cmdline_count() const { return at<11>().as_uint32(); }
  bool has_tracepoint() const { return at<14>().valid(); }
  ::protozero::ConstBytes tracepoint() const { return at<14>().as_bytes(); }
};

class PerfEventConfig : public ::protozero::Message {
 public:
  using Decoder = PerfEventConfig_Decoder;
  enum : int32_t {
    kTimebaseFieldNumber = 15,
    kCallstackSamplingFieldNumber = 16,
    kRingBufferReadPeriodMsFieldNumber = 8,
    kRingBufferPagesFieldNumber = 3,
    kMaxDaemonMemoryKbFieldNumber = 13,
    kRemoteDescriptorTimeoutMsFieldNumber = 9,
    kUnwindStateClearPeriodMsFieldNumber = 10,
    kAllCpusFieldNumber = 1,
    kSamplingFrequencyFieldNumber = 2,
    kKernelFramesFieldNumber = 12,
    kTargetPidFieldNumber = 4,
    kTargetCmdlineFieldNumber = 5,
    kExcludePidFieldNumber = 6,
    kExcludeCmdlineFieldNumber = 7,
    kAdditionalCmdlineCountFieldNumber = 11,
    kTracepointFieldNumber = 14,
  };
  using Timebase = ::perfetto::protos::pbzero::PerfEventConfig_Timebase;
  using CallstackSampling = ::perfetto::protos::pbzero::PerfEventConfig_CallstackSampling;
  using Scope = ::perfetto::protos::pbzero::PerfEventConfig_Scope;
  using Tracepoint = ::perfetto::protos::pbzero::PerfEventConfig_Tracepoint;
  using Counter = ::perfetto::protos::pbzero::PerfEventConfig_Counter;
  static const Counter UNKNOWN_COUNTER = PerfEventConfig_Counter_UNKNOWN_COUNTER;
  static const Counter SW_CPU_CLOCK = PerfEventConfig_Counter_SW_CPU_CLOCK;
  static const Counter SW_PAGE_FAULTS = PerfEventConfig_Counter_SW_PAGE_FAULTS;
  static const Counter HW_CPU_CYCLES = PerfEventConfig_Counter_HW_CPU_CYCLES;
  static const Counter HW_INSTRUCTIONS = PerfEventConfig_Counter_HW_INSTRUCTIONS;
  template <typename T = PerfEventConfig_Timebase> T* set_timebase() {
    return BeginNestedMessage<T>(15);
  }

  template <typename T = PerfEventConfig_CallstackSampling> T* set_callstack_sampling() {
    return BeginNestedMessage<T>(16);
  }

  void set_ring_buffer_read_period_ms(uint32_t value) {
    AppendVarInt(8, value);
  }
  void set_ring_buffer_pages(uint32_t value) {
    AppendVarInt(3, value);
  }
  void set_max_daemon_memory_kb(uint32_t value) {
    AppendVarInt(13, value);
  }
  void set_remote_descriptor_timeout_ms(uint32_t value) {
    AppendVarInt(9, value);
  }
  void set_unwind_state_clear_period_ms(uint32_t value) {
    AppendVarInt(10, value);
  }
  void set_all_cpus(bool value) {
    AppendTinyVarInt(1, value);
  }
  void set_sampling_frequency(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_kernel_frames(bool value) {
    AppendTinyVarInt(12, value);
  }
  void add_target_pid(int32_t value) {
    AppendVarInt(4, value);
  }
  void add_target_cmdline(const std::string& value) {
    AppendBytes(5, value.data(), value.size());
  }
  void add_target_cmdline(const char* data, size_t size) {
    AppendBytes(5, data, size);
  }
  void add_exclude_pid(int32_t value) {
    AppendVarInt(6, value);
  }
  void add_exclude_cmdline(const std::string& value) {
    AppendBytes(7, value.data(), value.size());
  }
  void add_exclude_cmdline(const char* data, size_t size) {
    AppendBytes(7, data, size);
  }
  void set_additional_cmdline_count(uint32_t value) {
    AppendVarInt(11, value);
  }
  template <typename T = PerfEventConfig_Tracepoint> T* set_tracepoint() {
    return BeginNestedMessage<T>(14);
  }

};

class PerfEventConfig_Tracepoint_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  PerfEventConfig_Tracepoint_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PerfEventConfig_Tracepoint_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PerfEventConfig_Tracepoint_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_name() const { return at<1>().valid(); }
  ::protozero::ConstChars name() const { return at<1>().as_string(); }
  bool has_filter() const { return at<2>().valid(); }
  ::protozero::ConstChars filter() const { return at<2>().as_string(); }
};

class PerfEventConfig_Tracepoint : public ::protozero::Message {
 public:
  using Decoder = PerfEventConfig_Tracepoint_Decoder;
  enum : int32_t {
    kNameFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  void set_name(const std::string& value) {
    AppendBytes(1, value.data(), value.size());
  }
  void set_name(const char* data, size_t size) {
    AppendBytes(1, data, size);
  }
  void set_filter(const std::string& value) {
    AppendBytes(2, value.data(), value.size());
  }
  void set_filter(const char* data, size_t size) {
    AppendBytes(2, data, size);
  }
};

class PerfEventConfig_Scope_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  PerfEventConfig_Scope_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PerfEventConfig_Scope_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PerfEventConfig_Scope_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_target_pid() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> target_pid() const { return GetRepeated<int32_t>(1); }
  bool has_target_cmdline() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> target_cmdline() const { return GetRepeated<::protozero::ConstChars>(2); }
  bool has_exclude_pid() const { return at<3>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> exclude_pid() const { return GetRepeated<int32_t>(3); }
  bool has_exclude_cmdline() const { return at<4>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> exclude_cmdline() const { return GetRepeated<::protozero::ConstChars>(4); }
  bool has_additional_cmdline_count() const { return at<5>().valid(); }
  uint32_t additional_cmdline_count() const { return at<5>().as_uint32(); }
};

class PerfEventConfig_Scope : public ::protozero::Message {
 public:
  using Decoder = PerfEventConfig_Scope_Decoder;
  enum : int32_t {
    kTargetPidFieldNumber = 1,
    kTargetCmdlineFieldNumber = 2,
    kExcludePidFieldNumber = 3,
    kExcludeCmdlineFieldNumber = 4,
    kAdditionalCmdlineCountFieldNumber = 5,
  };
  void add_target_pid(int32_t value) {
    AppendVarInt(1, value);
  }
  void add_target_cmdline(const std::string& value) {
    AppendBytes(2, value.data(), value.size());
  }
  void add_target_cmdline(const char* data, size_t size) {
    AppendBytes(2, data, size);
  }
  void add_exclude_pid(int32_t value) {
    AppendVarInt(3, value);
  }
  void add_exclude_cmdline(const std::string& value) {
    AppendBytes(4, value.data(), value.size());
  }
  void add_exclude_cmdline(const char* data, size_t size) {
    AppendBytes(4, data, size);
  }
  void set_additional_cmdline_count(uint32_t value) {
    AppendVarInt(5, value);
  }
};

class PerfEventConfig_CallstackSampling_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  PerfEventConfig_CallstackSampling_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PerfEventConfig_CallstackSampling_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PerfEventConfig_CallstackSampling_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_scope() const { return at<1>().valid(); }
  ::protozero::ConstBytes scope() const { return at<1>().as_bytes(); }
  bool has_kernel_frames() const { return at<2>().valid(); }
  bool kernel_frames() const { return at<2>().as_bool(); }
};

class PerfEventConfig_CallstackSampling : public ::protozero::Message {
 public:
  using Decoder = PerfEventConfig_CallstackSampling_Decoder;
  enum : int32_t {
    kScopeFieldNumber = 1,
    kKernelFramesFieldNumber = 2,
  };
  template <typename T = PerfEventConfig_Scope> T* set_scope() {
    return BeginNestedMessage<T>(1);
  }

  void set_kernel_frames(bool value) {
    AppendTinyVarInt(2, value);
  }
};

class PerfEventConfig_Timebase_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  PerfEventConfig_Timebase_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PerfEventConfig_Timebase_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PerfEventConfig_Timebase_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_frequency() const { return at<2>().valid(); }
  uint64_t frequency() const { return at<2>().as_uint64(); }
  bool has_period() const { return at<1>().valid(); }
  uint64_t period() const { return at<1>().as_uint64(); }
  bool has_counter() const { return at<4>().valid(); }
  int32_t counter() const { return at<4>().as_int32(); }
  bool has_tracepoint() const { return at<3>().valid(); }
  ::protozero::ConstBytes tracepoint() const { return at<3>().as_bytes(); }
};

class PerfEventConfig_Timebase : public ::protozero::Message {
 public:
  using Decoder = PerfEventConfig_Timebase_Decoder;
  enum : int32_t {
    kFrequencyFieldNumber = 2,
    kPeriodFieldNumber = 1,
    kCounterFieldNumber = 4,
    kTracepointFieldNumber = 3,
  };
  void set_frequency(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_period(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_counter(::perfetto::protos::pbzero::PerfEventConfig_Counter value) {
    AppendTinyVarInt(4, value);
  }
  template <typename T = PerfEventConfig_Tracepoint> T* set_tracepoint() {
    return BeginNestedMessage<T>(3);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
