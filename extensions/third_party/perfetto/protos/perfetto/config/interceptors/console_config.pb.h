// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/interceptors/console_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ConsoleConfig;
class ConsoleConfigDefaultTypeInternal;
extern ConsoleConfigDefaultTypeInternal _ConsoleConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ConsoleConfig* Arena::CreateMaybeMessage<::perfetto::protos::ConsoleConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ConsoleConfig_Output : int {
  ConsoleConfig_Output_OUTPUT_UNSPECIFIED = 0,
  ConsoleConfig_Output_OUTPUT_STDOUT = 1,
  ConsoleConfig_Output_OUTPUT_STDERR = 2
};
bool ConsoleConfig_Output_IsValid(int value);
constexpr ConsoleConfig_Output ConsoleConfig_Output_Output_MIN = ConsoleConfig_Output_OUTPUT_UNSPECIFIED;
constexpr ConsoleConfig_Output ConsoleConfig_Output_Output_MAX = ConsoleConfig_Output_OUTPUT_STDERR;
constexpr int ConsoleConfig_Output_Output_ARRAYSIZE = ConsoleConfig_Output_Output_MAX + 1;

const std::string& ConsoleConfig_Output_Name(ConsoleConfig_Output value);
template<typename T>
inline const std::string& ConsoleConfig_Output_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsoleConfig_Output>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsoleConfig_Output_Name.");
  return ConsoleConfig_Output_Name(static_cast<ConsoleConfig_Output>(enum_t_value));
}
bool ConsoleConfig_Output_Parse(
    const std::string& name, ConsoleConfig_Output* value);
// ===================================================================

class ConsoleConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ConsoleConfig) */ {
 public:
  ConsoleConfig();
  virtual ~ConsoleConfig();

  ConsoleConfig(const ConsoleConfig& from);
  ConsoleConfig(ConsoleConfig&& from) noexcept
    : ConsoleConfig() {
    *this = ::std::move(from);
  }

  inline ConsoleConfig& operator=(const ConsoleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsoleConfig& operator=(ConsoleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConsoleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleConfig* internal_default_instance() {
    return reinterpret_cast<const ConsoleConfig*>(
               &_ConsoleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsoleConfig& a, ConsoleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsoleConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsoleConfig* New() const final {
    return CreateMaybeMessage<ConsoleConfig>(nullptr);
  }

  ConsoleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConsoleConfig& from);
  void MergeFrom(const ConsoleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConsoleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ConsoleConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ConsoleConfig_Output Output;
  static constexpr Output OUTPUT_UNSPECIFIED =
    ConsoleConfig_Output_OUTPUT_UNSPECIFIED;
  static constexpr Output OUTPUT_STDOUT =
    ConsoleConfig_Output_OUTPUT_STDOUT;
  static constexpr Output OUTPUT_STDERR =
    ConsoleConfig_Output_OUTPUT_STDERR;
  static inline bool Output_IsValid(int value) {
    return ConsoleConfig_Output_IsValid(value);
  }
  static constexpr Output Output_MIN =
    ConsoleConfig_Output_Output_MIN;
  static constexpr Output Output_MAX =
    ConsoleConfig_Output_Output_MAX;
  static constexpr int Output_ARRAYSIZE =
    ConsoleConfig_Output_Output_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Output_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_Name.");
    return ConsoleConfig_Output_Name(enum_t_value);
  }
  static inline bool Output_Parse(const std::string& name,
      Output* value) {
    return ConsoleConfig_Output_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
    kEnableColorsFieldNumber = 2,
  };
  // optional .perfetto.protos.ConsoleConfig.Output output = 1;
  bool has_output() const;
  void clear_output();
  ::perfetto::protos::ConsoleConfig_Output output() const;
  void set_output(::perfetto::protos::ConsoleConfig_Output value);

  // optional bool enable_colors = 2;
  bool has_enable_colors() const;
  void clear_enable_colors();
  bool enable_colors() const;
  void set_enable_colors(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ConsoleConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_;
  bool enable_colors_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsoleConfig

// optional .perfetto.protos.ConsoleConfig.Output output = 1;
inline bool ConsoleConfig::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsoleConfig::clear_output() {
  output_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ConsoleConfig_Output ConsoleConfig::output() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ConsoleConfig.output)
  return static_cast< ::perfetto::protos::ConsoleConfig_Output >(output_);
}
inline void ConsoleConfig::set_output(::perfetto::protos::ConsoleConfig_Output value) {
  assert(::perfetto::protos::ConsoleConfig_Output_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ConsoleConfig.output)
}

// optional bool enable_colors = 2;
inline bool ConsoleConfig::has_enable_colors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsoleConfig::clear_enable_colors() {
  enable_colors_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConsoleConfig::enable_colors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ConsoleConfig.enable_colors)
  return enable_colors_;
}
inline void ConsoleConfig::set_enable_colors(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_colors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ConsoleConfig.enable_colors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ConsoleConfig_Output> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptors_2fconsole_5fconfig_2eproto
