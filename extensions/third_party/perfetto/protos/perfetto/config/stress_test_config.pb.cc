// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/stress_test_config.proto

#include "protos/perfetto/config/stress_test_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class StressTestConfig_WriterTimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StressTestConfig_WriterTiming> _instance;
} _StressTestConfig_WriterTiming_default_instance_;
class StressTestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StressTestConfig> _instance;
} _StressTestConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_StressTestConfig_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_StressTestConfig_default_instance_;
    new (ptr) ::perfetto::protos::StressTestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::StressTestConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StressTestConfig_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StressTestConfig_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto}, {
      &scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto.base,
      &scc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_StressTestConfig_WriterTiming_default_instance_;
    new (ptr) ::perfetto::protos::StressTestConfig_WriterTiming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::StressTestConfig_WriterTiming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void StressTestConfig_WriterTiming::InitAsDefaultInstance() {
}
class StressTestConfig_WriterTiming::_Internal {
 public:
  using HasBits = decltype(std::declval<StressTestConfig_WriterTiming>()._has_bits_);
  static void set_has_payload_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rate_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rate_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload_write_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StressTestConfig_WriterTiming::StressTestConfig_WriterTiming()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.StressTestConfig.WriterTiming)
}
StressTestConfig_WriterTiming::StressTestConfig_WriterTiming(const StressTestConfig_WriterTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&payload_mean_, &from.payload_mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&payload_write_time_ms_) -
    reinterpret_cast<char*>(&payload_mean_)) + sizeof(payload_write_time_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StressTestConfig.WriterTiming)
}

void StressTestConfig_WriterTiming::SharedCtor() {
  ::memset(&payload_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_write_time_ms_) -
      reinterpret_cast<char*>(&payload_mean_)) + sizeof(payload_write_time_ms_));
}

StressTestConfig_WriterTiming::~StressTestConfig_WriterTiming() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StressTestConfig.WriterTiming)
  SharedDtor();
}

void StressTestConfig_WriterTiming::SharedDtor() {
}

void StressTestConfig_WriterTiming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StressTestConfig_WriterTiming& StressTestConfig_WriterTiming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StressTestConfig_WriterTiming_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StressTestConfig_WriterTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StressTestConfig.WriterTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&payload_mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&payload_write_time_ms_) -
        reinterpret_cast<char*>(&payload_mean_)) + sizeof(payload_write_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StressTestConfig_WriterTiming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double payload_mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_payload_mean(&has_bits);
          payload_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double payload_stddev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_payload_stddev(&has_bits);
          payload_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rate_mean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_rate_mean(&has_bits);
          rate_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rate_stddev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_rate_stddev(&has_bits);
          rate_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 payload_write_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_payload_write_time_ms(&has_bits);
          payload_write_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StressTestConfig_WriterTiming::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.StressTestConfig.WriterTiming)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double payload_mean = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_payload_mean(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &payload_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double payload_stddev = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_payload_stddev(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &payload_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rate_mean = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_rate_mean(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rate_stddev = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_rate_stddev(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_write_time_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_payload_write_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_write_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.StressTestConfig.WriterTiming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.StressTestConfig.WriterTiming)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StressTestConfig_WriterTiming::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.StressTestConfig.WriterTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double payload_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->payload_mean(), output);
  }

  // optional double payload_stddev = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->payload_stddev(), output);
  }

  // optional double rate_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->rate_mean(), output);
  }

  // optional double rate_stddev = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->rate_stddev(), output);
  }

  // optional uint32 payload_write_time_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->payload_write_time_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.StressTestConfig.WriterTiming)
}

size_t StressTestConfig_WriterTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StressTestConfig.WriterTiming)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double payload_mean = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double payload_stddev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double rate_mean = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double rate_stddev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 payload_write_time_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->payload_write_time_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StressTestConfig_WriterTiming::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StressTestConfig_WriterTiming*>(
      &from));
}

void StressTestConfig_WriterTiming::MergeFrom(const StressTestConfig_WriterTiming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StressTestConfig.WriterTiming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      payload_mean_ = from.payload_mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      payload_stddev_ = from.payload_stddev_;
    }
    if (cached_has_bits & 0x00000004u) {
      rate_mean_ = from.rate_mean_;
    }
    if (cached_has_bits & 0x00000008u) {
      rate_stddev_ = from.rate_stddev_;
    }
    if (cached_has_bits & 0x00000010u) {
      payload_write_time_ms_ = from.payload_write_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StressTestConfig_WriterTiming::CopyFrom(const StressTestConfig_WriterTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StressTestConfig.WriterTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StressTestConfig_WriterTiming::IsInitialized() const {
  return true;
}

void StressTestConfig_WriterTiming::InternalSwap(StressTestConfig_WriterTiming* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(payload_mean_, other->payload_mean_);
  swap(payload_stddev_, other->payload_stddev_);
  swap(rate_mean_, other->rate_mean_);
  swap(rate_stddev_, other->rate_stddev_);
  swap(payload_write_time_ms_, other->payload_write_time_ms_);
}

std::string StressTestConfig_WriterTiming::GetTypeName() const {
  return "perfetto.protos.StressTestConfig.WriterTiming";
}


// ===================================================================

void StressTestConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_StressTestConfig_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::perfetto::protos::TraceConfig*>(
      ::perfetto::protos::TraceConfig::internal_default_instance());
  ::perfetto::protos::_StressTestConfig_default_instance_._instance.get_mutable()->steady_state_timings_ = const_cast< ::perfetto::protos::StressTestConfig_WriterTiming*>(
      ::perfetto::protos::StressTestConfig_WriterTiming::internal_default_instance());
  ::perfetto::protos::_StressTestConfig_default_instance_._instance.get_mutable()->burst_timings_ = const_cast< ::perfetto::protos::StressTestConfig_WriterTiming*>(
      ::perfetto::protos::StressTestConfig_WriterTiming::internal_default_instance());
}
class StressTestConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StressTestConfig>()._has_bits_);
  static const ::perfetto::protos::TraceConfig& trace_config(const StressTestConfig* msg);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shmem_page_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_processes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::StressTestConfig_WriterTiming& steady_state_timings(const StressTestConfig* msg);
  static void set_has_steady_state_timings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_burst_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_burst_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::StressTestConfig_WriterTiming& burst_timings(const StressTestConfig* msg);
  static void set_has_burst_timings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::TraceConfig&
StressTestConfig::_Internal::trace_config(const StressTestConfig* msg) {
  return *msg->trace_config_;
}
const ::perfetto::protos::StressTestConfig_WriterTiming&
StressTestConfig::_Internal::steady_state_timings(const StressTestConfig* msg) {
  return *msg->steady_state_timings_;
}
const ::perfetto::protos::StressTestConfig_WriterTiming&
StressTestConfig::_Internal::burst_timings(const StressTestConfig* msg) {
  return *msg->burst_timings_;
}
void StressTestConfig::clear_trace_config() {
  if (trace_config_ != nullptr) trace_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StressTestConfig::StressTestConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.StressTestConfig)
}
StressTestConfig::StressTestConfig(const StressTestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trace_config()) {
    trace_config_ = new ::perfetto::protos::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  if (from.has_steady_state_timings()) {
    steady_state_timings_ = new ::perfetto::protos::StressTestConfig_WriterTiming(*from.steady_state_timings_);
  } else {
    steady_state_timings_ = nullptr;
  }
  if (from.has_burst_timings()) {
    burst_timings_ = new ::perfetto::protos::StressTestConfig_WriterTiming(*from.burst_timings_);
  } else {
    burst_timings_ = nullptr;
  }
  ::memcpy(&shmem_size_kb_, &from.shmem_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&burst_duration_ms_) -
    reinterpret_cast<char*>(&shmem_size_kb_)) + sizeof(burst_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StressTestConfig)
}

void StressTestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StressTestConfig_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto.base);
  ::memset(&trace_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burst_duration_ms_) -
      reinterpret_cast<char*>(&trace_config_)) + sizeof(burst_duration_ms_));
}

StressTestConfig::~StressTestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StressTestConfig)
  SharedDtor();
}

void StressTestConfig::SharedDtor() {
  if (this != internal_default_instance()) delete trace_config_;
  if (this != internal_default_instance()) delete steady_state_timings_;
  if (this != internal_default_instance()) delete burst_timings_;
}

void StressTestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StressTestConfig& StressTestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StressTestConfig_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StressTestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StressTestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trace_config_ != nullptr);
      trace_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steady_state_timings_ != nullptr);
      steady_state_timings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(burst_timings_ != nullptr);
      burst_timings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&shmem_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_events_) -
        reinterpret_cast<char*>(&shmem_size_kb_)) + sizeof(max_events_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&nesting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&burst_duration_ms_) -
        reinterpret_cast<char*>(&nesting_)) + sizeof(burst_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StressTestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shmem_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shmem_size_kb(&has_bits);
          shmem_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shmem_page_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shmem_page_size_kb(&has_bits);
          shmem_page_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_processes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_processes(&has_bits);
          num_processes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_threads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_threads(&has_bits);
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_events(&has_bits);
          max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nesting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nesting(&has_bits);
          nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_steady_state_timings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 burst_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_burst_period_ms(&has_bits);
          burst_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 burst_duration_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_burst_duration_ms(&has_bits);
          burst_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_burst_timings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StressTestConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.StressTestConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.TraceConfig trace_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shmem_size_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_shmem_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shmem_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shmem_page_size_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_shmem_page_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shmem_page_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_processes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_processes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_processes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_threads = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_threads(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_events = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nesting = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_nesting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_steady_state_timings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 burst_period_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_burst_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burst_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 burst_duration_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_burst_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burst_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_burst_timings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.StressTestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.StressTestConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StressTestConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.StressTestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.TraceConfig trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::trace_config(this), output);
  }

  // optional uint32 shmem_size_kb = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->shmem_size_kb(), output);
  }

  // optional uint32 shmem_page_size_kb = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->shmem_page_size_kb(), output);
  }

  // optional uint32 num_processes = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->num_processes(), output);
  }

  // optional uint32 num_threads = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->num_threads(), output);
  }

  // optional uint32 max_events = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->max_events(), output);
  }

  // optional uint32 nesting = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->nesting(), output);
  }

  // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::steady_state_timings(this), output);
  }

  // optional uint32 burst_period_ms = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->burst_period_ms(), output);
  }

  // optional uint32 burst_duration_ms = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->burst_duration_ms(), output);
  }

  // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::burst_timings(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.StressTestConfig)
}

size_t StressTestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StressTestConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.TraceConfig trace_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trace_config_);
    }

    // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steady_state_timings_);
    }

    // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *burst_timings_);
    }

    // optional uint32 shmem_size_kb = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->shmem_size_kb());
    }

    // optional uint32 shmem_page_size_kb = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->shmem_page_size_kb());
    }

    // optional uint32 num_processes = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_processes());
    }

    // optional uint32 num_threads = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_threads());
    }

    // optional uint32 max_events = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_events());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 nesting = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->nesting());
    }

    // optional uint32 burst_period_ms = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->burst_period_ms());
    }

    // optional uint32 burst_duration_ms = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->burst_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StressTestConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StressTestConfig*>(
      &from));
}

void StressTestConfig::MergeFrom(const StressTestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StressTestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_steady_state_timings()->::perfetto::protos::StressTestConfig_WriterTiming::MergeFrom(from.steady_state_timings());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_burst_timings()->::perfetto::protos::StressTestConfig_WriterTiming::MergeFrom(from.burst_timings());
    }
    if (cached_has_bits & 0x00000008u) {
      shmem_size_kb_ = from.shmem_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      shmem_page_size_kb_ = from.shmem_page_size_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_processes_ = from.num_processes_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_threads_ = from.num_threads_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_events_ = from.max_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      nesting_ = from.nesting_;
    }
    if (cached_has_bits & 0x00000200u) {
      burst_period_ms_ = from.burst_period_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      burst_duration_ms_ = from.burst_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StressTestConfig::CopyFrom(const StressTestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StressTestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StressTestConfig::IsInitialized() const {
  return true;
}

void StressTestConfig::InternalSwap(StressTestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trace_config_, other->trace_config_);
  swap(steady_state_timings_, other->steady_state_timings_);
  swap(burst_timings_, other->burst_timings_);
  swap(shmem_size_kb_, other->shmem_size_kb_);
  swap(shmem_page_size_kb_, other->shmem_page_size_kb_);
  swap(num_processes_, other->num_processes_);
  swap(num_threads_, other->num_threads_);
  swap(max_events_, other->max_events_);
  swap(nesting_, other->nesting_);
  swap(burst_period_ms_, other->burst_period_ms_);
  swap(burst_duration_ms_, other->burst_duration_ms_);
}

std::string StressTestConfig::GetTypeName() const {
  return "perfetto.protos.StressTestConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::StressTestConfig_WriterTiming* Arena::CreateMaybeMessage< ::perfetto::protos::StressTestConfig_WriterTiming >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::StressTestConfig_WriterTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StressTestConfig* Arena::CreateMaybeMessage< ::perfetto::protos::StressTestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::StressTestConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
