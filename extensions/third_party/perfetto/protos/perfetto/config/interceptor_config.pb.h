// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/interceptor_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/config/interceptors/console_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class InterceptorConfig;
class InterceptorConfigDefaultTypeInternal;
extern InterceptorConfigDefaultTypeInternal _InterceptorConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::InterceptorConfig* Arena::CreateMaybeMessage<::perfetto::protos::InterceptorConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class InterceptorConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InterceptorConfig) */ {
 public:
  InterceptorConfig();
  virtual ~InterceptorConfig();

  InterceptorConfig(const InterceptorConfig& from);
  InterceptorConfig(InterceptorConfig&& from) noexcept
    : InterceptorConfig() {
    *this = ::std::move(from);
  }

  inline InterceptorConfig& operator=(const InterceptorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterceptorConfig& operator=(InterceptorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InterceptorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterceptorConfig* internal_default_instance() {
    return reinterpret_cast<const InterceptorConfig*>(
               &_InterceptorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InterceptorConfig& a, InterceptorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InterceptorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterceptorConfig* New() const final {
    return CreateMaybeMessage<InterceptorConfig>(nullptr);
  }

  InterceptorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterceptorConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InterceptorConfig& from);
  void MergeFrom(const InterceptorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InterceptorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InterceptorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConsoleConfigFieldNumber = 100,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
  bool has_console_config() const;
  void clear_console_config();
  const ::perfetto::protos::ConsoleConfig& console_config() const;
  ::perfetto::protos::ConsoleConfig* release_console_config();
  ::perfetto::protos::ConsoleConfig* mutable_console_config();
  void set_allocated_console_config(::perfetto::protos::ConsoleConfig* console_config);

  // @@protoc_insertion_point(class_scope:perfetto.protos.InterceptorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::perfetto::protos::ConsoleConfig* console_config_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterceptorConfig

// optional string name = 1;
inline bool InterceptorConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterceptorConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InterceptorConfig::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InterceptorConfig.name)
  return name_.GetNoArena();
}
inline void InterceptorConfig::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InterceptorConfig.name)
}
inline void InterceptorConfig::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InterceptorConfig.name)
}
inline std::string* InterceptorConfig::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InterceptorConfig.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterceptorConfig::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InterceptorConfig.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterceptorConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InterceptorConfig.name)
}

// optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
inline bool InterceptorConfig::has_console_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::perfetto::protos::ConsoleConfig& InterceptorConfig::console_config() const {
  const ::perfetto::protos::ConsoleConfig* p = console_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.InterceptorConfig.console_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ConsoleConfig*>(
      &::perfetto::protos::_ConsoleConfig_default_instance_);
}
inline ::perfetto::protos::ConsoleConfig* InterceptorConfig::release_console_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InterceptorConfig.console_config)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ConsoleConfig* temp = console_config_;
  console_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ConsoleConfig* InterceptorConfig::mutable_console_config() {
  _has_bits_[0] |= 0x00000002u;
  if (console_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ConsoleConfig>(GetArenaNoVirtual());
    console_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InterceptorConfig.console_config)
  return console_config_;
}
inline void InterceptorConfig::set_allocated_console_config(::perfetto::protos::ConsoleConfig* console_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_config_);
  }
  if (console_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      console_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  console_config_ = console_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InterceptorConfig.console_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finterceptor_5fconfig_2eproto
