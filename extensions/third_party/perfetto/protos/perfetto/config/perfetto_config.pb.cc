// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/perfetto_config.proto

#include "protos/perfetto/config/perfetto_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor_GpuCounterSpec> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value_;
  double double_peak_value_;
} _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
class GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor_GpuCounterBlock> _instance;
} _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
class GpuCounterDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor> _instance;
} _GpuCounterDescriptor_default_instance_;
class TrackEventCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEventCategory> _instance;
} _TrackEventCategory_default_instance_;
class TrackEventDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEventDescriptor> _instance;
} _TrackEventDescriptor_default_instance_;
class DataSourceDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSourceDescriptor> _instance;
} _DataSourceDescriptor_default_instance_;
class TracingServiceState_ProducerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_Producer> _instance;
} _TracingServiceState_Producer_default_instance_;
class TracingServiceState_DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_DataSource> _instance;
} _TracingServiceState_DataSource_default_instance_;
class TracingServiceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState> _instance;
} _TracingServiceState_default_instance_;
class AndroidLogConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidLogConfig> _instance;
} _AndroidLogConfig_default_instance_;
class AndroidPolledStateConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidPolledStateConfig> _instance;
} _AndroidPolledStateConfig_default_instance_;
class PackagesListConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackagesListConfig> _instance;
} _PackagesListConfig_default_instance_;
class ChromeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeConfig> _instance;
} _ChromeConfig_default_instance_;
class FtraceConfig_CompactSchedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceConfig_CompactSchedConfig> _instance;
} _FtraceConfig_CompactSchedConfig_default_instance_;
class FtraceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceConfig> _instance;
} _FtraceConfig_default_instance_;
class GpuCounterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterConfig> _instance;
} _GpuCounterConfig_default_instance_;
class VulkanMemoryConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VulkanMemoryConfig> _instance;
} _VulkanMemoryConfig_default_instance_;
class InodeFileConfig_MountPointMappingEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InodeFileConfig_MountPointMappingEntry> _instance;
} _InodeFileConfig_MountPointMappingEntry_default_instance_;
class InodeFileConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InodeFileConfig> _instance;
} _InodeFileConfig_default_instance_;
class ConsoleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsoleConfig> _instance;
} _ConsoleConfig_default_instance_;
class InterceptorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterceptorConfig> _instance;
} _InterceptorConfig_default_instance_;
class AndroidPowerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidPowerConfig> _instance;
} _AndroidPowerConfig_default_instance_;
class ProcessStatsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessStatsConfig> _instance;
} _ProcessStatsConfig_default_instance_;
class HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeapprofdConfig_ContinuousDumpConfig> _instance;
} _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
class HeapprofdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeapprofdConfig> _instance;
} _HeapprofdConfig_default_instance_;
class JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JavaHprofConfig_ContinuousDumpConfig> _instance;
} _JavaHprofConfig_ContinuousDumpConfig_default_instance_;
class JavaHprofConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JavaHprofConfig> _instance;
} _JavaHprofConfig_default_instance_;
class PerfEventConfig_TimebaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_Timebase> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  int counter_;
  const ::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint_;
} _PerfEventConfig_Timebase_default_instance_;
class PerfEventConfig_CallstackSamplingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_CallstackSampling> _instance;
} _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_ScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_Scope> _instance;
} _PerfEventConfig_Scope_default_instance_;
class PerfEventConfig_TracepointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_Tracepoint> _instance;
} _PerfEventConfig_Tracepoint_default_instance_;
class PerfEventConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig> _instance;
} _PerfEventConfig_default_instance_;
class SysStatsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStatsConfig> _instance;
} _SysStatsConfig_default_instance_;
class TestConfig_DummyFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestConfig_DummyFields> _instance;
} _TestConfig_DummyFields_default_instance_;
class TestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestConfig> _instance;
} _TestConfig_default_instance_;
class TrackEventConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEventConfig> _instance;
} _TrackEventConfig_default_instance_;
class DataSourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSourceConfig> _instance;
} _DataSourceConfig_default_instance_;
class TraceConfig_BufferConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_BufferConfig> _instance;
} _TraceConfig_BufferConfig_default_instance_;
class TraceConfig_DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_DataSource> _instance;
} _TraceConfig_DataSource_default_instance_;
class TraceConfig_BuiltinDataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_BuiltinDataSource> _instance;
} _TraceConfig_BuiltinDataSource_default_instance_;
class TraceConfig_ProducerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_ProducerConfig> _instance;
} _TraceConfig_ProducerConfig_default_instance_;
class TraceConfig_StatsdMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_StatsdMetadata> _instance;
} _TraceConfig_StatsdMetadata_default_instance_;
class TraceConfig_GuardrailOverridesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_GuardrailOverrides> _instance;
} _TraceConfig_GuardrailOverrides_default_instance_;
class TraceConfig_TriggerConfig_TriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_TriggerConfig_Trigger> _instance;
} _TraceConfig_TriggerConfig_Trigger_default_instance_;
class TraceConfig_TriggerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_TriggerConfig> _instance;
} _TraceConfig_TriggerConfig_default_instance_;
class TraceConfig_IncrementalStateConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_IncrementalStateConfig> _instance;
} _TraceConfig_IncrementalStateConfig_default_instance_;
class TraceConfig_IncidentReportConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig_IncidentReportConfig> _instance;
} _TraceConfig_IncidentReportConfig_default_instance_;
class TraceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig> _instance;
} _TraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_AndroidLogConfig_default_instance_;
    new (ptr) ::perfetto::protos::AndroidLogConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::AndroidLogConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_AndroidPolledStateConfig_default_instance_;
    new (ptr) ::perfetto::protos::AndroidPolledStateConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::AndroidPolledStateConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_AndroidPowerConfig_default_instance_;
    new (ptr) ::perfetto::protos::AndroidPowerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::AndroidPowerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeConfig_default_instance_;
    new (ptr) ::perfetto::protos::ChromeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ConsoleConfig_default_instance_;
    new (ptr) ::perfetto::protos::ConsoleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ConsoleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_DataSourceConfig_default_instance_;
    new (ptr) ::perfetto::protos::DataSourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::DataSourceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, InitDefaultsscc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_DataSourceDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::DataSourceDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::DataSourceDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceConfig_default_instance_;
    new (ptr) ::perfetto::protos::FtraceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_;
    new (ptr) ::perfetto::protos::FtraceConfig_CompactSchedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceConfig_CompactSchedConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterConfig_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_GpuCounterBlock_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_GpuCounterSpec_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_HeapprofdConfig_default_instance_;
    new (ptr) ::perfetto::protos::HeapprofdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::HeapprofdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_HeapprofdConfig_ContinuousDumpConfig_default_instance_;
    new (ptr) ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_InodeFileConfig_default_instance_;
    new (ptr) ::perfetto::protos::InodeFileConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::InodeFileConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_InodeFileConfig_MountPointMappingEntry_default_instance_;
    new (ptr) ::perfetto::protos::InodeFileConfig_MountPointMappingEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_InterceptorConfig_default_instance_;
    new (ptr) ::perfetto::protos::InterceptorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::InterceptorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_JavaHprofConfig_default_instance_;
    new (ptr) ::perfetto::protos::JavaHprofConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::JavaHprofConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_JavaHprofConfig_ContinuousDumpConfig_default_instance_;
    new (ptr) ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PackagesListConfig_default_instance_;
    new (ptr) ::perfetto::protos::PackagesListConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PackagesListConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_CallstackSampling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_CallstackSampling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_Scope_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_Scope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_Scope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_Timebase_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_Timebase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_Timebase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_Tracepoint_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_Tracepoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_Tracepoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProcessStatsConfig_default_instance_;
    new (ptr) ::perfetto::protos::ProcessStatsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ProcessStatsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStatsConfig_default_instance_;
    new (ptr) ::perfetto::protos::SysStatsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStatsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestConfig_default_instance_;
    new (ptr) ::perfetto::protos::TestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestConfig_DummyFields_default_instance_;
    new (ptr) ::perfetto::protos::TestConfig_DummyFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestConfig_DummyFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_TraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_BufferConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_BufferConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_BufferConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_BuiltinDataSource_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_BuiltinDataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_BuiltinDataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_DataSource_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_DataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_GuardrailOverrides_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_GuardrailOverrides();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_GuardrailOverrides::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_IncidentReportConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_IncidentReportConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_IncidentReportConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_IncrementalStateConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_IncrementalStateConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_IncrementalStateConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_ProducerConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_ProducerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_ProducerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_StatsdMetadata_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_StatsdMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_StatsdMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_TriggerConfig_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_TriggerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_TriggerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceConfig_TriggerConfig_Trigger_default_instance_;
    new (ptr) ::perfetto::protos::TraceConfig_TriggerConfig_Trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TracingServiceState_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,
      &scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_DataSource_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState_DataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_Producer_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_Producer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState_Producer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEventCategory_default_instance_;
    new (ptr) ::perfetto::protos::TrackEventCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEventCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEventConfig_default_instance_;
    new (ptr) ::perfetto::protos::TrackEventConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEventConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEventDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::TrackEventDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEventDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {
      &scc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_VulkanMemoryConfig_default_instance_;
    new (ptr) ::perfetto::protos::VulkanMemoryConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::VulkanMemoryConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_GpuCounterGroup_strings[7] = {};

static const char GpuCounterDescriptor_GpuCounterGroup_names[] =
  "COMPUTE"
  "FRAGMENTS"
  "MEMORY"
  "PRIMITIVES"
  "SYSTEM"
  "UNCLASSIFIED"
  "VERTICES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_GpuCounterGroup_entries[] = {
  { {GpuCounterDescriptor_GpuCounterGroup_names + 0, 7}, 6 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 7, 9}, 3 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 16, 6}, 5 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 22, 10}, 4 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 32, 6}, 1 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 38, 12}, 0 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 50, 8}, 2 },
};

static const int GpuCounterDescriptor_GpuCounterGroup_entries_by_number[] = {
  5, // 0 -> UNCLASSIFIED
  4, // 1 -> SYSTEM
  6, // 2 -> VERTICES
  1, // 3 -> FRAGMENTS
  3, // 4 -> PRIMITIVES
  2, // 5 -> MEMORY
  0, // 6 -> COMPUTE
};

const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(
    GpuCounterDescriptor_GpuCounterGroup value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_GpuCounterGroup_entries,
          GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
          7, GpuCounterDescriptor_GpuCounterGroup_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_GpuCounterGroup_entries,
      GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_GpuCounterGroup_strings[idx].get();
}
bool GpuCounterDescriptor_GpuCounterGroup_Parse(
    const std::string& name, GpuCounterDescriptor_GpuCounterGroup* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_GpuCounterGroup_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_GpuCounterGroup>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::SYSTEM;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::VERTICES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::FRAGMENTS;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::PRIMITIVES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::MEMORY;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::COMPUTE;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MIN;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MAX;
constexpr int GpuCounterDescriptor::GpuCounterGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_MeasureUnit_strings[41] = {};

static const char GpuCounterDescriptor_MeasureUnit_names[] =
  "AMPERE"
  "BIT"
  "BYTE"
  "CELSIUS"
  "FAHRENHEIT"
  "FRAGMENT"
  "GIGABIT"
  "GIGABYTE"
  "GIGAHERTZ"
  "HERTZ"
  "HOUR"
  "INSTRUCTION"
  "JOULE"
  "KELVIN"
  "KILOBIT"
  "KILOBYTE"
  "KILOHERTZ"
  "KILOWATT"
  "MEGABIT"
  "MEGABYTE"
  "MEGAHERTZ"
  "MICROSECOND"
  "MILLISECOND"
  "MILLIWATT"
  "MINUTE"
  "NANOSECOND"
  "NONE"
  "PERCENT"
  "PETABIT"
  "PETABYTE"
  "PETAHERTZ"
  "PIXEL"
  "PRIMITIVE"
  "SECOND"
  "TERABIT"
  "TERABYTE"
  "TERAHERTZ"
  "TRIANGLE"
  "VERTEX"
  "VOLT"
  "WATT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_MeasureUnit_entries[] = {
  { {GpuCounterDescriptor_MeasureUnit_names + 0, 6}, 33 },
  { {GpuCounterDescriptor_MeasureUnit_names + 6, 3}, 1 },
  { {GpuCounterDescriptor_MeasureUnit_names + 9, 4}, 7 },
  { {GpuCounterDescriptor_MeasureUnit_names + 13, 7}, 34 },
  { {GpuCounterDescriptor_MeasureUnit_names + 20, 10}, 35 },
  { {GpuCounterDescriptor_MeasureUnit_names + 30, 8}, 39 },
  { {GpuCounterDescriptor_MeasureUnit_names + 38, 7}, 4 },
  { {GpuCounterDescriptor_MeasureUnit_names + 45, 8}, 10 },
  { {GpuCounterDescriptor_MeasureUnit_names + 53, 9}, 16 },
  { {GpuCounterDescriptor_MeasureUnit_names + 62, 5}, 13 },
  { {GpuCounterDescriptor_MeasureUnit_names + 67, 4}, 24 },
  { {GpuCounterDescriptor_MeasureUnit_names + 71, 11}, 40 },
  { {GpuCounterDescriptor_MeasureUnit_names + 82, 5}, 31 },
  { {GpuCounterDescriptor_MeasureUnit_names + 87, 6}, 36 },
  { {GpuCounterDescriptor_MeasureUnit_names + 93, 7}, 2 },
  { {GpuCounterDescriptor_MeasureUnit_names + 100, 8}, 8 },
  { {GpuCounterDescriptor_MeasureUnit_names + 108, 9}, 14 },
  { {GpuCounterDescriptor_MeasureUnit_names + 117, 8}, 30 },
  { {GpuCounterDescriptor_MeasureUnit_names + 125, 7}, 3 },
  { {GpuCounterDescriptor_MeasureUnit_names + 132, 8}, 9 },
  { {GpuCounterDescriptor_MeasureUnit_names + 140, 9}, 15 },
  { {GpuCounterDescriptor_MeasureUnit_names + 149, 11}, 20 },
  { {GpuCounterDescriptor_MeasureUnit_names + 160, 11}, 21 },
  { {GpuCounterDescriptor_MeasureUnit_names + 171, 9}, 28 },
  { {GpuCounterDescriptor_MeasureUnit_names + 180, 6}, 23 },
  { {GpuCounterDescriptor_MeasureUnit_names + 186, 10}, 19 },
  { {GpuCounterDescriptor_MeasureUnit_names + 196, 4}, 0 },
  { {GpuCounterDescriptor_MeasureUnit_names + 200, 7}, 37 },
  { {GpuCounterDescriptor_MeasureUnit_names + 207, 7}, 6 },
  { {GpuCounterDescriptor_MeasureUnit_names + 214, 8}, 12 },
  { {GpuCounterDescriptor_MeasureUnit_names + 222, 9}, 18 },
  { {GpuCounterDescriptor_MeasureUnit_names + 231, 5}, 26 },
  { {GpuCounterDescriptor_MeasureUnit_names + 236, 9}, 38 },
  { {GpuCounterDescriptor_MeasureUnit_names + 245, 6}, 22 },
  { {GpuCounterDescriptor_MeasureUnit_names + 251, 7}, 5 },
  { {GpuCounterDescriptor_MeasureUnit_names + 258, 8}, 11 },
  { {GpuCounterDescriptor_MeasureUnit_names + 266, 9}, 17 },
  { {GpuCounterDescriptor_MeasureUnit_names + 275, 8}, 27 },
  { {GpuCounterDescriptor_MeasureUnit_names + 283, 6}, 25 },
  { {GpuCounterDescriptor_MeasureUnit_names + 289, 4}, 32 },
  { {GpuCounterDescriptor_MeasureUnit_names + 293, 4}, 29 },
};

static const int GpuCounterDescriptor_MeasureUnit_entries_by_number[] = {
  26, // 0 -> NONE
  1, // 1 -> BIT
  14, // 2 -> KILOBIT
  18, // 3 -> MEGABIT
  6, // 4 -> GIGABIT
  34, // 5 -> TERABIT
  28, // 6 -> PETABIT
  2, // 7 -> BYTE
  15, // 8 -> KILOBYTE
  19, // 9 -> MEGABYTE
  7, // 10 -> GIGABYTE
  35, // 11 -> TERABYTE
  29, // 12 -> PETABYTE
  9, // 13 -> HERTZ
  16, // 14 -> KILOHERTZ
  20, // 15 -> MEGAHERTZ
  8, // 16 -> GIGAHERTZ
  36, // 17 -> TERAHERTZ
  30, // 18 -> PETAHERTZ
  25, // 19 -> NANOSECOND
  21, // 20 -> MICROSECOND
  22, // 21 -> MILLISECOND
  33, // 22 -> SECOND
  24, // 23 -> MINUTE
  10, // 24 -> HOUR
  38, // 25 -> VERTEX
  31, // 26 -> PIXEL
  37, // 27 -> TRIANGLE
  23, // 28 -> MILLIWATT
  40, // 29 -> WATT
  17, // 30 -> KILOWATT
  12, // 31 -> JOULE
  39, // 32 -> VOLT
  0, // 33 -> AMPERE
  3, // 34 -> CELSIUS
  4, // 35 -> FAHRENHEIT
  13, // 36 -> KELVIN
  27, // 37 -> PERCENT
  32, // 38 -> PRIMITIVE
  5, // 39 -> FRAGMENT
  11, // 40 -> INSTRUCTION
};

const std::string& GpuCounterDescriptor_MeasureUnit_Name(
    GpuCounterDescriptor_MeasureUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_MeasureUnit_entries,
          GpuCounterDescriptor_MeasureUnit_entries_by_number,
          41, GpuCounterDescriptor_MeasureUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_MeasureUnit_entries,
      GpuCounterDescriptor_MeasureUnit_entries_by_number,
      41, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_MeasureUnit_strings[idx].get();
}
bool GpuCounterDescriptor_MeasureUnit_Parse(
    const std::string& name, GpuCounterDescriptor_MeasureUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_MeasureUnit_entries, 41, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_MeasureUnit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NANOSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MICROSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLISECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::SECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MINUTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HOUR;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VERTEX;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PIXEL;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TRIANGLE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PRIMITIVE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FRAGMENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLIWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::WATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::JOULE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VOLT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::AMPERE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::CELSIUS;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FAHRENHEIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KELVIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PERCENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::INSTRUCTION;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MAX;
constexpr int GpuCounterDescriptor::MeasureUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeConfig_ClientPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeConfig_ClientPriority_strings[3] = {};

static const char ChromeConfig_ClientPriority_names[] =
  "BACKGROUND"
  "UNKNOWN"
  "USER_INITIATED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeConfig_ClientPriority_entries[] = {
  { {ChromeConfig_ClientPriority_names + 0, 10}, 1 },
  { {ChromeConfig_ClientPriority_names + 10, 7}, 0 },
  { {ChromeConfig_ClientPriority_names + 17, 14}, 2 },
};

static const int ChromeConfig_ClientPriority_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> BACKGROUND
  2, // 2 -> USER_INITIATED
};

const std::string& ChromeConfig_ClientPriority_Name(
    ChromeConfig_ClientPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeConfig_ClientPriority_entries,
          ChromeConfig_ClientPriority_entries_by_number,
          3, ChromeConfig_ClientPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeConfig_ClientPriority_entries,
      ChromeConfig_ClientPriority_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeConfig_ClientPriority_strings[idx].get();
}
bool ChromeConfig_ClientPriority_Parse(
    const std::string& name, ChromeConfig_ClientPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeConfig_ClientPriority_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeConfig_ClientPriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeConfig_ClientPriority ChromeConfig::UNKNOWN;
constexpr ChromeConfig_ClientPriority ChromeConfig::BACKGROUND;
constexpr ChromeConfig_ClientPriority ChromeConfig::USER_INITIATED;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MIN;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MAX;
constexpr int ChromeConfig::ClientPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ConsoleConfig_Output_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConsoleConfig_Output_strings[3] = {};

static const char ConsoleConfig_Output_names[] =
  "OUTPUT_STDERR"
  "OUTPUT_STDOUT"
  "OUTPUT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConsoleConfig_Output_entries[] = {
  { {ConsoleConfig_Output_names + 0, 13}, 2 },
  { {ConsoleConfig_Output_names + 13, 13}, 1 },
  { {ConsoleConfig_Output_names + 26, 18}, 0 },
};

static const int ConsoleConfig_Output_entries_by_number[] = {
  2, // 0 -> OUTPUT_UNSPECIFIED
  1, // 1 -> OUTPUT_STDOUT
  0, // 2 -> OUTPUT_STDERR
};

const std::string& ConsoleConfig_Output_Name(
    ConsoleConfig_Output value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConsoleConfig_Output_entries,
          ConsoleConfig_Output_entries_by_number,
          3, ConsoleConfig_Output_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConsoleConfig_Output_entries,
      ConsoleConfig_Output_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConsoleConfig_Output_strings[idx].get();
}
bool ConsoleConfig_Output_Parse(
    const std::string& name, ConsoleConfig_Output* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConsoleConfig_Output_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ConsoleConfig_Output>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsoleConfig_Output ConsoleConfig::OUTPUT_UNSPECIFIED;
constexpr ConsoleConfig_Output ConsoleConfig::OUTPUT_STDOUT;
constexpr ConsoleConfig_Output ConsoleConfig::OUTPUT_STDERR;
constexpr ConsoleConfig_Output ConsoleConfig::Output_MIN;
constexpr ConsoleConfig_Output ConsoleConfig::Output_MAX;
constexpr int ConsoleConfig::Output_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AndroidPowerConfig_BatteryCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidPowerConfig_BatteryCounters_strings[5] = {};

static const char AndroidPowerConfig_BatteryCounters_names[] =
  "BATTERY_COUNTER_CAPACITY_PERCENT"
  "BATTERY_COUNTER_CHARGE"
  "BATTERY_COUNTER_CURRENT"
  "BATTERY_COUNTER_CURRENT_AVG"
  "BATTERY_COUNTER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidPowerConfig_BatteryCounters_entries[] = {
  { {AndroidPowerConfig_BatteryCounters_names + 0, 32}, 2 },
  { {AndroidPowerConfig_BatteryCounters_names + 32, 22}, 1 },
  { {AndroidPowerConfig_BatteryCounters_names + 54, 23}, 3 },
  { {AndroidPowerConfig_BatteryCounters_names + 77, 27}, 4 },
  { {AndroidPowerConfig_BatteryCounters_names + 104, 27}, 0 },
};

static const int AndroidPowerConfig_BatteryCounters_entries_by_number[] = {
  4, // 0 -> BATTERY_COUNTER_UNSPECIFIED
  1, // 1 -> BATTERY_COUNTER_CHARGE
  0, // 2 -> BATTERY_COUNTER_CAPACITY_PERCENT
  2, // 3 -> BATTERY_COUNTER_CURRENT
  3, // 4 -> BATTERY_COUNTER_CURRENT_AVG
};

const std::string& AndroidPowerConfig_BatteryCounters_Name(
    AndroidPowerConfig_BatteryCounters value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidPowerConfig_BatteryCounters_entries,
          AndroidPowerConfig_BatteryCounters_entries_by_number,
          5, AndroidPowerConfig_BatteryCounters_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidPowerConfig_BatteryCounters_entries,
      AndroidPowerConfig_BatteryCounters_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidPowerConfig_BatteryCounters_strings[idx].get();
}
bool AndroidPowerConfig_BatteryCounters_Parse(
    const std::string& name, AndroidPowerConfig_BatteryCounters* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidPowerConfig_BatteryCounters_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AndroidPowerConfig_BatteryCounters>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_UNSPECIFIED;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CHARGE;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CAPACITY_PERCENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT_AVG;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MIN;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MAX;
constexpr int AndroidPowerConfig::BatteryCounters_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ProcessStatsConfig_Quirks_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProcessStatsConfig_Quirks_strings[3] = {};

static const char ProcessStatsConfig_Quirks_names[] =
  "DISABLE_INITIAL_DUMP"
  "DISABLE_ON_DEMAND"
  "QUIRKS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProcessStatsConfig_Quirks_entries[] = {
  { {ProcessStatsConfig_Quirks_names + 0, 20}, 1 },
  { {ProcessStatsConfig_Quirks_names + 20, 17}, 2 },
  { {ProcessStatsConfig_Quirks_names + 37, 18}, 0 },
};

static const int ProcessStatsConfig_Quirks_entries_by_number[] = {
  2, // 0 -> QUIRKS_UNSPECIFIED
  0, // 1 -> DISABLE_INITIAL_DUMP
  1, // 2 -> DISABLE_ON_DEMAND
};

const std::string& ProcessStatsConfig_Quirks_Name(
    ProcessStatsConfig_Quirks value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProcessStatsConfig_Quirks_entries,
          ProcessStatsConfig_Quirks_entries_by_number,
          3, ProcessStatsConfig_Quirks_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProcessStatsConfig_Quirks_entries,
      ProcessStatsConfig_Quirks_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProcessStatsConfig_Quirks_strings[idx].get();
}
bool ProcessStatsConfig_Quirks_Parse(
    const std::string& name, ProcessStatsConfig_Quirks* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProcessStatsConfig_Quirks_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ProcessStatsConfig_Quirks>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::QUIRKS_UNSPECIFIED;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_INITIAL_DUMP;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_ON_DEMAND;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MIN;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MAX;
constexpr int ProcessStatsConfig::Quirks_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PerfEventConfig_Counter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEventConfig_Counter_strings[5] = {};

static const char PerfEventConfig_Counter_names[] =
  "HW_CPU_CYCLES"
  "HW_INSTRUCTIONS"
  "SW_CPU_CLOCK"
  "SW_PAGE_FAULTS"
  "UNKNOWN_COUNTER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEventConfig_Counter_entries[] = {
  { {PerfEventConfig_Counter_names + 0, 13}, 10 },
  { {PerfEventConfig_Counter_names + 13, 15}, 11 },
  { {PerfEventConfig_Counter_names + 28, 12}, 1 },
  { {PerfEventConfig_Counter_names + 40, 14}, 2 },
  { {PerfEventConfig_Counter_names + 54, 15}, 0 },
};

static const int PerfEventConfig_Counter_entries_by_number[] = {
  4, // 0 -> UNKNOWN_COUNTER
  2, // 1 -> SW_CPU_CLOCK
  3, // 2 -> SW_PAGE_FAULTS
  0, // 10 -> HW_CPU_CYCLES
  1, // 11 -> HW_INSTRUCTIONS
};

const std::string& PerfEventConfig_Counter_Name(
    PerfEventConfig_Counter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEventConfig_Counter_entries,
          PerfEventConfig_Counter_entries_by_number,
          5, PerfEventConfig_Counter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEventConfig_Counter_entries,
      PerfEventConfig_Counter_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEventConfig_Counter_strings[idx].get();
}
bool PerfEventConfig_Counter_Parse(
    const std::string& name, PerfEventConfig_Counter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEventConfig_Counter_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PerfEventConfig_Counter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerfEventConfig_Counter PerfEventConfig::UNKNOWN_COUNTER;
constexpr PerfEventConfig_Counter PerfEventConfig::SW_CPU_CLOCK;
constexpr PerfEventConfig_Counter PerfEventConfig::SW_PAGE_FAULTS;
constexpr PerfEventConfig_Counter PerfEventConfig::HW_CPU_CYCLES;
constexpr PerfEventConfig_Counter PerfEventConfig::HW_INSTRUCTIONS;
constexpr PerfEventConfig_Counter PerfEventConfig::Counter_MIN;
constexpr PerfEventConfig_Counter PerfEventConfig::Counter_MAX;
constexpr int PerfEventConfig::Counter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SysStatsConfig_StatCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SysStatsConfig_StatCounters_strings[5] = {};

static const char SysStatsConfig_StatCounters_names[] =
  "STAT_CPU_TIMES"
  "STAT_FORK_COUNT"
  "STAT_IRQ_COUNTS"
  "STAT_SOFTIRQ_COUNTS"
  "STAT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SysStatsConfig_StatCounters_entries[] = {
  { {SysStatsConfig_StatCounters_names + 0, 14}, 1 },
  { {SysStatsConfig_StatCounters_names + 14, 15}, 4 },
  { {SysStatsConfig_StatCounters_names + 29, 15}, 2 },
  { {SysStatsConfig_StatCounters_names + 44, 19}, 3 },
  { {SysStatsConfig_StatCounters_names + 63, 16}, 0 },
};

static const int SysStatsConfig_StatCounters_entries_by_number[] = {
  4, // 0 -> STAT_UNSPECIFIED
  0, // 1 -> STAT_CPU_TIMES
  2, // 2 -> STAT_IRQ_COUNTS
  3, // 3 -> STAT_SOFTIRQ_COUNTS
  1, // 4 -> STAT_FORK_COUNT
};

const std::string& SysStatsConfig_StatCounters_Name(
    SysStatsConfig_StatCounters value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SysStatsConfig_StatCounters_entries,
          SysStatsConfig_StatCounters_entries_by_number,
          5, SysStatsConfig_StatCounters_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SysStatsConfig_StatCounters_entries,
      SysStatsConfig_StatCounters_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SysStatsConfig_StatCounters_strings[idx].get();
}
bool SysStatsConfig_StatCounters_Parse(
    const std::string& name, SysStatsConfig_StatCounters* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SysStatsConfig_StatCounters_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SysStatsConfig_StatCounters>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_UNSPECIFIED;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_CPU_TIMES;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_IRQ_COUNTS;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_SOFTIRQ_COUNTS;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_FORK_COUNT;
constexpr SysStatsConfig_StatCounters SysStatsConfig::StatCounters_MIN;
constexpr SysStatsConfig_StatCounters SysStatsConfig::StatCounters_MAX;
constexpr int SysStatsConfig::StatCounters_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TraceConfig_BufferConfig_FillPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_BufferConfig_FillPolicy_strings[3] = {};

static const char TraceConfig_BufferConfig_FillPolicy_names[] =
  "DISCARD"
  "RING_BUFFER"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_BufferConfig_FillPolicy_entries[] = {
  { {TraceConfig_BufferConfig_FillPolicy_names + 0, 7}, 2 },
  { {TraceConfig_BufferConfig_FillPolicy_names + 7, 11}, 1 },
  { {TraceConfig_BufferConfig_FillPolicy_names + 18, 11}, 0 },
};

static const int TraceConfig_BufferConfig_FillPolicy_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  1, // 1 -> RING_BUFFER
  0, // 2 -> DISCARD
};

const std::string& TraceConfig_BufferConfig_FillPolicy_Name(
    TraceConfig_BufferConfig_FillPolicy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_BufferConfig_FillPolicy_entries,
          TraceConfig_BufferConfig_FillPolicy_entries_by_number,
          3, TraceConfig_BufferConfig_FillPolicy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_BufferConfig_FillPolicy_entries,
      TraceConfig_BufferConfig_FillPolicy_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_BufferConfig_FillPolicy_strings[idx].get();
}
bool TraceConfig_BufferConfig_FillPolicy_Parse(
    const std::string& name, TraceConfig_BufferConfig_FillPolicy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_BufferConfig_FillPolicy_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_BufferConfig_FillPolicy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::UNSPECIFIED;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::RING_BUFFER;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::DISCARD;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MIN;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MAX;
constexpr int TraceConfig_BufferConfig::FillPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TraceConfig_TriggerConfig_TriggerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_TriggerConfig_TriggerMode_strings[3] = {};

static const char TraceConfig_TriggerConfig_TriggerMode_names[] =
  "START_TRACING"
  "STOP_TRACING"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_TriggerConfig_TriggerMode_entries[] = {
  { {TraceConfig_TriggerConfig_TriggerMode_names + 0, 13}, 1 },
  { {TraceConfig_TriggerConfig_TriggerMode_names + 13, 12}, 2 },
  { {TraceConfig_TriggerConfig_TriggerMode_names + 25, 11}, 0 },
};

static const int TraceConfig_TriggerConfig_TriggerMode_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> START_TRACING
  1, // 2 -> STOP_TRACING
};

const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(
    TraceConfig_TriggerConfig_TriggerMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_TriggerConfig_TriggerMode_entries,
          TraceConfig_TriggerConfig_TriggerMode_entries_by_number,
          3, TraceConfig_TriggerConfig_TriggerMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_TriggerConfig_TriggerMode_entries,
      TraceConfig_TriggerConfig_TriggerMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_TriggerConfig_TriggerMode_strings[idx].get();
}
bool TraceConfig_TriggerConfig_TriggerMode_Parse(
    const std::string& name, TraceConfig_TriggerConfig_TriggerMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_TriggerConfig_TriggerMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_TriggerConfig_TriggerMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::UNSPECIFIED;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::START_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::STOP_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MIN;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MAX;
constexpr int TraceConfig_TriggerConfig::TriggerMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TraceConfig_LockdownModeOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_LockdownModeOperation_strings[3] = {};

static const char TraceConfig_LockdownModeOperation_names[] =
  "LOCKDOWN_CLEAR"
  "LOCKDOWN_SET"
  "LOCKDOWN_UNCHANGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_LockdownModeOperation_entries[] = {
  { {TraceConfig_LockdownModeOperation_names + 0, 14}, 1 },
  { {TraceConfig_LockdownModeOperation_names + 14, 12}, 2 },
  { {TraceConfig_LockdownModeOperation_names + 26, 18}, 0 },
};

static const int TraceConfig_LockdownModeOperation_entries_by_number[] = {
  2, // 0 -> LOCKDOWN_UNCHANGED
  0, // 1 -> LOCKDOWN_CLEAR
  1, // 2 -> LOCKDOWN_SET
};

const std::string& TraceConfig_LockdownModeOperation_Name(
    TraceConfig_LockdownModeOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_LockdownModeOperation_entries,
          TraceConfig_LockdownModeOperation_entries_by_number,
          3, TraceConfig_LockdownModeOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_LockdownModeOperation_entries,
      TraceConfig_LockdownModeOperation_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_LockdownModeOperation_strings[idx].get();
}
bool TraceConfig_LockdownModeOperation_Parse(
    const std::string& name, TraceConfig_LockdownModeOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_LockdownModeOperation_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_LockdownModeOperation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_UNCHANGED;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_CLEAR;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_SET;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MIN;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MAX;
constexpr int TraceConfig::LockdownModeOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TraceConfig_CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_CompressionType_strings[2] = {};

static const char TraceConfig_CompressionType_names[] =
  "COMPRESSION_TYPE_DEFLATE"
  "COMPRESSION_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_CompressionType_entries[] = {
  { {TraceConfig_CompressionType_names + 0, 24}, 1 },
  { {TraceConfig_CompressionType_names + 24, 28}, 0 },
};

static const int TraceConfig_CompressionType_entries_by_number[] = {
  1, // 0 -> COMPRESSION_TYPE_UNSPECIFIED
  0, // 1 -> COMPRESSION_TYPE_DEFLATE
};

const std::string& TraceConfig_CompressionType_Name(
    TraceConfig_CompressionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_CompressionType_entries,
          TraceConfig_CompressionType_entries_by_number,
          2, TraceConfig_CompressionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_CompressionType_entries,
      TraceConfig_CompressionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_CompressionType_strings[idx].get();
}
bool TraceConfig_CompressionType_Parse(
    const std::string& name, TraceConfig_CompressionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_CompressionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_CompressionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_UNSPECIFIED;
constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_DEFLATE;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MIN;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MAX;
constexpr int TraceConfig::CompressionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BuiltinClock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 63:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BuiltinClock_strings[8] = {};

static const char BuiltinClock_names[] =
  "BUILTIN_CLOCK_BOOTTIME"
  "BUILTIN_CLOCK_MAX_ID"
  "BUILTIN_CLOCK_MONOTONIC"
  "BUILTIN_CLOCK_MONOTONIC_COARSE"
  "BUILTIN_CLOCK_MONOTONIC_RAW"
  "BUILTIN_CLOCK_REALTIME"
  "BUILTIN_CLOCK_REALTIME_COARSE"
  "BUILTIN_CLOCK_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BuiltinClock_entries[] = {
  { {BuiltinClock_names + 0, 22}, 6 },
  { {BuiltinClock_names + 22, 20}, 63 },
  { {BuiltinClock_names + 42, 23}, 3 },
  { {BuiltinClock_names + 65, 30}, 4 },
  { {BuiltinClock_names + 95, 27}, 5 },
  { {BuiltinClock_names + 122, 22}, 1 },
  { {BuiltinClock_names + 144, 29}, 2 },
  { {BuiltinClock_names + 173, 21}, 0 },
};

static const int BuiltinClock_entries_by_number[] = {
  7, // 0 -> BUILTIN_CLOCK_UNKNOWN
  5, // 1 -> BUILTIN_CLOCK_REALTIME
  6, // 2 -> BUILTIN_CLOCK_REALTIME_COARSE
  2, // 3 -> BUILTIN_CLOCK_MONOTONIC
  3, // 4 -> BUILTIN_CLOCK_MONOTONIC_COARSE
  4, // 5 -> BUILTIN_CLOCK_MONOTONIC_RAW
  0, // 6 -> BUILTIN_CLOCK_BOOTTIME
  1, // 63 -> BUILTIN_CLOCK_MAX_ID
};

const std::string& BuiltinClock_Name(
    BuiltinClock value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BuiltinClock_entries,
          BuiltinClock_entries_by_number,
          8, BuiltinClock_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BuiltinClock_entries,
      BuiltinClock_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BuiltinClock_strings[idx].get();
}
bool BuiltinClock_Parse(
    const std::string& name, BuiltinClock* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BuiltinClock_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<BuiltinClock>(int_value);
  }
  return success;
}
bool AndroidLogId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidLogId_strings[8] = {};

static const char AndroidLogId_names[] =
  "LID_CRASH"
  "LID_DEFAULT"
  "LID_EVENTS"
  "LID_KERNEL"
  "LID_RADIO"
  "LID_SECURITY"
  "LID_STATS"
  "LID_SYSTEM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidLogId_entries[] = {
  { {AndroidLogId_names + 0, 9}, 4 },
  { {AndroidLogId_names + 9, 11}, 0 },
  { {AndroidLogId_names + 20, 10}, 2 },
  { {AndroidLogId_names + 30, 10}, 7 },
  { {AndroidLogId_names + 40, 9}, 1 },
  { {AndroidLogId_names + 49, 12}, 6 },
  { {AndroidLogId_names + 61, 9}, 5 },
  { {AndroidLogId_names + 70, 10}, 3 },
};

static const int AndroidLogId_entries_by_number[] = {
  1, // 0 -> LID_DEFAULT
  4, // 1 -> LID_RADIO
  2, // 2 -> LID_EVENTS
  7, // 3 -> LID_SYSTEM
  0, // 4 -> LID_CRASH
  6, // 5 -> LID_STATS
  5, // 6 -> LID_SECURITY
  3, // 7 -> LID_KERNEL
};

const std::string& AndroidLogId_Name(
    AndroidLogId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidLogId_entries,
          AndroidLogId_entries_by_number,
          8, AndroidLogId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidLogId_entries,
      AndroidLogId_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidLogId_strings[idx].get();
}
bool AndroidLogId_Parse(
    const std::string& name, AndroidLogId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidLogId_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<AndroidLogId>(int_value);
  }
  return success;
}
bool AndroidLogPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidLogPriority_strings[8] = {};

static const char AndroidLogPriority_names[] =
  "PRIO_DEBUG"
  "PRIO_ERROR"
  "PRIO_FATAL"
  "PRIO_INFO"
  "PRIO_UNSPECIFIED"
  "PRIO_UNUSED"
  "PRIO_VERBOSE"
  "PRIO_WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidLogPriority_entries[] = {
  { {AndroidLogPriority_names + 0, 10}, 3 },
  { {AndroidLogPriority_names + 10, 10}, 6 },
  { {AndroidLogPriority_names + 20, 10}, 7 },
  { {AndroidLogPriority_names + 30, 9}, 4 },
  { {AndroidLogPriority_names + 39, 16}, 0 },
  { {AndroidLogPriority_names + 55, 11}, 1 },
  { {AndroidLogPriority_names + 66, 12}, 2 },
  { {AndroidLogPriority_names + 78, 9}, 5 },
};

static const int AndroidLogPriority_entries_by_number[] = {
  4, // 0 -> PRIO_UNSPECIFIED
  5, // 1 -> PRIO_UNUSED
  6, // 2 -> PRIO_VERBOSE
  0, // 3 -> PRIO_DEBUG
  3, // 4 -> PRIO_INFO
  7, // 5 -> PRIO_WARN
  1, // 6 -> PRIO_ERROR
  2, // 7 -> PRIO_FATAL
};

const std::string& AndroidLogPriority_Name(
    AndroidLogPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidLogPriority_entries,
          AndroidLogPriority_entries_by_number,
          8, AndroidLogPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidLogPriority_entries,
      AndroidLogPriority_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidLogPriority_strings[idx].get();
}
bool AndroidLogPriority_Parse(
    const std::string& name, AndroidLogPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidLogPriority_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<AndroidLogPriority>(int_value);
  }
  return success;
}
bool MeminfoCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MeminfoCounters_strings[34] = {};

static const char MeminfoCounters_names[] =
  "MEMINFO_ACTIVE"
  "MEMINFO_ACTIVE_ANON"
  "MEMINFO_ACTIVE_FILE"
  "MEMINFO_ANON_PAGES"
  "MEMINFO_BUFFERS"
  "MEMINFO_CACHED"
  "MEMINFO_CMA_FREE"
  "MEMINFO_CMA_TOTAL"
  "MEMINFO_COMMITED_AS"
  "MEMINFO_COMMIT_LIMIT"
  "MEMINFO_DIRTY"
  "MEMINFO_INACTIVE"
  "MEMINFO_INACTIVE_ANON"
  "MEMINFO_INACTIVE_FILE"
  "MEMINFO_KERNEL_STACK"
  "MEMINFO_MAPPED"
  "MEMINFO_MEM_AVAILABLE"
  "MEMINFO_MEM_FREE"
  "MEMINFO_MEM_TOTAL"
  "MEMINFO_MLOCKED"
  "MEMINFO_PAGE_TABLES"
  "MEMINFO_SHMEM"
  "MEMINFO_SLAB"
  "MEMINFO_SLAB_RECLAIMABLE"
  "MEMINFO_SLAB_UNRECLAIMABLE"
  "MEMINFO_SWAP_CACHED"
  "MEMINFO_SWAP_FREE"
  "MEMINFO_SWAP_TOTAL"
  "MEMINFO_UNEVICTABLE"
  "MEMINFO_UNSPECIFIED"
  "MEMINFO_VMALLOC_CHUNK"
  "MEMINFO_VMALLOC_TOTAL"
  "MEMINFO_VMALLOC_USED"
  "MEMINFO_WRITEBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MeminfoCounters_entries[] = {
  { {MeminfoCounters_names + 0, 14}, 7 },
  { {MeminfoCounters_names + 14, 19}, 9 },
  { {MeminfoCounters_names + 33, 19}, 11 },
  { {MeminfoCounters_names + 52, 18}, 19 },
  { {MeminfoCounters_names + 70, 15}, 4 },
  { {MeminfoCounters_names + 85, 14}, 5 },
  { {MeminfoCounters_names + 99, 16}, 33 },
  { {MeminfoCounters_names + 115, 17}, 32 },
  { {MeminfoCounters_names + 132, 19}, 28 },
  { {MeminfoCounters_names + 151, 20}, 27 },
  { {MeminfoCounters_names + 171, 13}, 17 },
  { {MeminfoCounters_names + 184, 16}, 8 },
  { {MeminfoCounters_names + 200, 21}, 10 },
  { {MeminfoCounters_names + 221, 21}, 12 },
  { {MeminfoCounters_names + 242, 20}, 25 },
  { {MeminfoCounters_names + 262, 14}, 20 },
  { {MeminfoCounters_names + 276, 21}, 3 },
  { {MeminfoCounters_names + 297, 16}, 2 },
  { {MeminfoCounters_names + 313, 17}, 1 },
  { {MeminfoCounters_names + 330, 15}, 14 },
  { {MeminfoCounters_names + 345, 19}, 26 },
  { {MeminfoCounters_names + 364, 13}, 21 },
  { {MeminfoCounters_names + 377, 12}, 22 },
  { {MeminfoCounters_names + 389, 24}, 23 },
  { {MeminfoCounters_names + 413, 26}, 24 },
  { {MeminfoCounters_names + 439, 19}, 6 },
  { {MeminfoCounters_names + 458, 17}, 16 },
  { {MeminfoCounters_names + 475, 18}, 15 },
  { {MeminfoCounters_names + 493, 19}, 13 },
  { {MeminfoCounters_names + 512, 19}, 0 },
  { {MeminfoCounters_names + 531, 21}, 31 },
  { {MeminfoCounters_names + 552, 21}, 29 },
  { {MeminfoCounters_names + 573, 20}, 30 },
  { {MeminfoCounters_names + 593, 17}, 18 },
};

static const int MeminfoCounters_entries_by_number[] = {
  29, // 0 -> MEMINFO_UNSPECIFIED
  18, // 1 -> MEMINFO_MEM_TOTAL
  17, // 2 -> MEMINFO_MEM_FREE
  16, // 3 -> MEMINFO_MEM_AVAILABLE
  4, // 4 -> MEMINFO_BUFFERS
  5, // 5 -> MEMINFO_CACHED
  25, // 6 -> MEMINFO_SWAP_CACHED
  0, // 7 -> MEMINFO_ACTIVE
  11, // 8 -> MEMINFO_INACTIVE
  1, // 9 -> MEMINFO_ACTIVE_ANON
  12, // 10 -> MEMINFO_INACTIVE_ANON
  2, // 11 -> MEMINFO_ACTIVE_FILE
  13, // 12 -> MEMINFO_INACTIVE_FILE
  28, // 13 -> MEMINFO_UNEVICTABLE
  19, // 14 -> MEMINFO_MLOCKED
  27, // 15 -> MEMINFO_SWAP_TOTAL
  26, // 16 -> MEMINFO_SWAP_FREE
  10, // 17 -> MEMINFO_DIRTY
  33, // 18 -> MEMINFO_WRITEBACK
  3, // 19 -> MEMINFO_ANON_PAGES
  15, // 20 -> MEMINFO_MAPPED
  21, // 21 -> MEMINFO_SHMEM
  22, // 22 -> MEMINFO_SLAB
  23, // 23 -> MEMINFO_SLAB_RECLAIMABLE
  24, // 24 -> MEMINFO_SLAB_UNRECLAIMABLE
  14, // 25 -> MEMINFO_KERNEL_STACK
  20, // 26 -> MEMINFO_PAGE_TABLES
  9, // 27 -> MEMINFO_COMMIT_LIMIT
  8, // 28 -> MEMINFO_COMMITED_AS
  31, // 29 -> MEMINFO_VMALLOC_TOTAL
  32, // 30 -> MEMINFO_VMALLOC_USED
  30, // 31 -> MEMINFO_VMALLOC_CHUNK
  7, // 32 -> MEMINFO_CMA_TOTAL
  6, // 33 -> MEMINFO_CMA_FREE
};

const std::string& MeminfoCounters_Name(
    MeminfoCounters value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MeminfoCounters_entries,
          MeminfoCounters_entries_by_number,
          34, MeminfoCounters_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MeminfoCounters_entries,
      MeminfoCounters_entries_by_number,
      34, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MeminfoCounters_strings[idx].get();
}
bool MeminfoCounters_Parse(
    const std::string& name, MeminfoCounters* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MeminfoCounters_entries, 34, name, &int_value);
  if (success) {
    *value = static_cast<MeminfoCounters>(int_value);
  }
  return success;
}
bool VmstatCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VmstatCounters_strings[129] = {};

static const char VmstatCounters_names[] =
  "VMSTAT_ALLOCSTALL"
  "VMSTAT_ALLOCSTALL_DMA"
  "VMSTAT_ALLOCSTALL_MOVABLE"
  "VMSTAT_ALLOCSTALL_NORMAL"
  "VMSTAT_COMPACT_DAEMON_FREE_SCANNED"
  "VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED"
  "VMSTAT_COMPACT_DAEMON_WAKE"
  "VMSTAT_COMPACT_FAIL"
  "VMSTAT_COMPACT_FREE_SCANNED"
  "VMSTAT_COMPACT_ISOLATED"
  "VMSTAT_COMPACT_MIGRATE_SCANNED"
  "VMSTAT_COMPACT_STALL"
  "VMSTAT_COMPACT_SUCCESS"
  "VMSTAT_DROP_PAGECACHE"
  "VMSTAT_DROP_SLAB"
  "VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY"
  "VMSTAT_KSWAPD_INODESTEAL"
  "VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY"
  "VMSTAT_NR_ACTIVE_ANON"
  "VMSTAT_NR_ACTIVE_FILE"
  "VMSTAT_NR_ALLOC_BATCH"
  "VMSTAT_NR_ANON_PAGES"
  "VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES"
  "VMSTAT_NR_BOUNCE"
  "VMSTAT_NR_DIRTIED"
  "VMSTAT_NR_DIRTY"
  "VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD"
  "VMSTAT_NR_DIRTY_THRESHOLD"
  "VMSTAT_NR_FASTRPC"
  "VMSTAT_NR_FILE_PAGES"
  "VMSTAT_NR_FREE_CMA"
  "VMSTAT_NR_FREE_PAGES"
  "VMSTAT_NR_GPU_HEAP"
  "VMSTAT_NR_INACTIVE_ANON"
  "VMSTAT_NR_INACTIVE_FILE"
  "VMSTAT_NR_INDIRECTLY_RECLAIMABLE"
  "VMSTAT_NR_ION_HEAP"
  "VMSTAT_NR_ION_HEAP_POOL"
  "VMSTAT_NR_ISOLATED_ANON"
  "VMSTAT_NR_ISOLATED_FILE"
  "VMSTAT_NR_KERNEL_MISC_RECLAIMABLE"
  "VMSTAT_NR_KERNEL_STACK"
  "VMSTAT_NR_MAPPED"
  "VMSTAT_NR_MLOCK"
  "VMSTAT_NR_OVERHEAD"
  "VMSTAT_NR_PAGES_SCANNED"
  "VMSTAT_NR_PAGE_TABLE_PAGES"
  "VMSTAT_NR_SHADOW_CALL_STACK_BYTES"
  "VMSTAT_NR_SHMEM"
  "VMSTAT_NR_SHMEM_HUGEPAGES"
  "VMSTAT_NR_SHMEM_PMDMAPPED"
  "VMSTAT_NR_SLAB_RECLAIMABLE"
  "VMSTAT_NR_SLAB_UNRECLAIMABLE"
  "VMSTAT_NR_SWAPCACHE"
  "VMSTAT_NR_UNEVICTABLE"
  "VMSTAT_NR_UNRECLAIMABLE_PAGES"
  "VMSTAT_NR_UNSTABLE"
  "VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM"
  "VMSTAT_NR_VMSCAN_WRITE"
  "VMSTAT_NR_WRITEBACK"
  "VMSTAT_NR_WRITEBACK_TEMP"
  "VMSTAT_NR_WRITTEN"
  "VMSTAT_NR_ZONE_ACTIVE_ANON"
  "VMSTAT_NR_ZONE_ACTIVE_FILE"
  "VMSTAT_NR_ZONE_INACTIVE_ANON"
  "VMSTAT_NR_ZONE_INACTIVE_FILE"
  "VMSTAT_NR_ZONE_UNEVICTABLE"
  "VMSTAT_NR_ZONE_WRITE_PENDING"
  "VMSTAT_NR_ZSPAGES"
  "VMSTAT_OOM_KILL"
  "VMSTAT_PAGEOUTRUN"
  "VMSTAT_PGACTIVATE"
  "VMSTAT_PGALLOC_DMA"
  "VMSTAT_PGALLOC_MOVABLE"
  "VMSTAT_PGALLOC_NORMAL"
  "VMSTAT_PGDEACTIVATE"
  "VMSTAT_PGFAULT"
  "VMSTAT_PGFREE"
  "VMSTAT_PGINODESTEAL"
  "VMSTAT_PGLAZYFREE"
  "VMSTAT_PGLAZYFREED"
  "VMSTAT_PGMAJFAULT"
  "VMSTAT_PGMIGRATE_FAIL"
  "VMSTAT_PGMIGRATE_SUCCESS"
  "VMSTAT_PGPGIN"
  "VMSTAT_PGPGOUT"
  "VMSTAT_PGPGOUTCLEAN"
  "VMSTAT_PGREFILL"
  "VMSTAT_PGREFILL_DMA"
  "VMSTAT_PGREFILL_MOVABLE"
  "VMSTAT_PGREFILL_NORMAL"
  "VMSTAT_PGROTATED"
  "VMSTAT_PGSCAN_DIRECT"
  "VMSTAT_PGSCAN_DIRECT_DMA"
  "VMSTAT_PGSCAN_DIRECT_MOVABLE"
  "VMSTAT_PGSCAN_DIRECT_NORMAL"
  "VMSTAT_PGSCAN_DIRECT_THROTTLE"
  "VMSTAT_PGSCAN_KSWAPD"
  "VMSTAT_PGSCAN_KSWAPD_DMA"
  "VMSTAT_PGSCAN_KSWAPD_MOVABLE"
  "VMSTAT_PGSCAN_KSWAPD_NORMAL"
  "VMSTAT_PGSKIP_DMA"
  "VMSTAT_PGSKIP_MOVABLE"
  "VMSTAT_PGSKIP_NORMAL"
  "VMSTAT_PGSTEAL_DIRECT"
  "VMSTAT_PGSTEAL_DIRECT_DMA"
  "VMSTAT_PGSTEAL_DIRECT_MOVABLE"
  "VMSTAT_PGSTEAL_DIRECT_NORMAL"
  "VMSTAT_PGSTEAL_KSWAPD"
  "VMSTAT_PGSTEAL_KSWAPD_DMA"
  "VMSTAT_PGSTEAL_KSWAPD_MOVABLE"
  "VMSTAT_PGSTEAL_KSWAPD_NORMAL"
  "VMSTAT_PSWPIN"
  "VMSTAT_PSWPOUT"
  "VMSTAT_SLABS_SCANNED"
  "VMSTAT_SWAP_RA"
  "VMSTAT_SWAP_RA_HIT"
  "VMSTAT_UNEVICTABLE_PGS_CLEARED"
  "VMSTAT_UNEVICTABLE_PGS_CULLED"
  "VMSTAT_UNEVICTABLE_PGS_MLOCKED"
  "VMSTAT_UNEVICTABLE_PGS_MUNLOCKED"
  "VMSTAT_UNEVICTABLE_PGS_RESCUED"
  "VMSTAT_UNEVICTABLE_PGS_SCANNED"
  "VMSTAT_UNEVICTABLE_PGS_STRANDED"
  "VMSTAT_UNSPECIFIED"
  "VMSTAT_WORKINGSET_ACTIVATE"
  "VMSTAT_WORKINGSET_NODERECLAIM"
  "VMSTAT_WORKINGSET_REFAULT"
  "VMSTAT_WORKINGSET_RESTORE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VmstatCounters_entries[] = {
  { {VmstatCounters_names + 0, 17}, 73 },
  { {VmstatCounters_names + 17, 21}, 96 },
  { {VmstatCounters_names + 38, 25}, 97 },
  { {VmstatCounters_names + 63, 24}, 98 },
  { {VmstatCounters_names + 87, 34}, 99 },
  { {VmstatCounters_names + 121, 37}, 100 },
  { {VmstatCounters_names + 158, 26}, 85 },
  { {VmstatCounters_names + 184, 19}, 83 },
  { {VmstatCounters_names + 203, 27}, 80 },
  { {VmstatCounters_names + 230, 23}, 81 },
  { {VmstatCounters_names + 253, 30}, 79 },
  { {VmstatCounters_names + 283, 20}, 82 },
  { {VmstatCounters_names + 303, 22}, 84 },
  { {VmstatCounters_names + 325, 21}, 75 },
  { {VmstatCounters_names + 346, 16}, 76 },
  { {VmstatCounters_names + 362, 36}, 71 },
  { {VmstatCounters_names + 398, 24}, 69 },
  { {VmstatCounters_names + 422, 35}, 70 },
  { {VmstatCounters_names + 457, 21}, 4 },
  { {VmstatCounters_names + 478, 21}, 6 },
  { {VmstatCounters_names + 499, 21}, 2 },
  { {VmstatCounters_names + 520, 20}, 9 },
  { {VmstatCounters_names + 540, 36}, 33 },
  { {VmstatCounters_names + 576, 16}, 20 },
  { {VmstatCounters_names + 592, 17}, 27 },
  { {VmstatCounters_names + 609, 15}, 12 },
  { {VmstatCounters_names + 624, 36}, 37 },
  { {VmstatCounters_names + 660, 25}, 36 },
  { {VmstatCounters_names + 685, 17}, 101 },
  { {VmstatCounters_names + 702, 20}, 11 },
  { {VmstatCounters_names + 722, 18}, 34 },
  { {VmstatCounters_names + 740, 20}, 1 },
  { {VmstatCounters_names + 760, 18}, 95 },
  { {VmstatCounters_names + 778, 23}, 3 },
  { {VmstatCounters_names + 801, 23}, 5 },
  { {VmstatCounters_names + 824, 32}, 102 },
  { {VmstatCounters_names + 856, 18}, 94 },
  { {VmstatCounters_names + 874, 23}, 103 },
  { {VmstatCounters_names + 897, 23}, 24 },
  { {VmstatCounters_names + 920, 23}, 25 },
  { {VmstatCounters_names + 943, 33}, 104 },
  { {VmstatCounters_names + 976, 22}, 17 },
  { {VmstatCounters_names + 998, 16}, 10 },
  { {VmstatCounters_names + 1014, 15}, 8 },
  { {VmstatCounters_names + 1029, 18}, 18 },
  { {VmstatCounters_names + 1047, 23}, 29 },
  { {VmstatCounters_names + 1070, 26}, 16 },
  { {VmstatCounters_names + 1096, 33}, 105 },
  { {VmstatCounters_names + 1129, 15}, 26 },
  { {VmstatCounters_names + 1144, 25}, 106 },
  { {VmstatCounters_names + 1169, 25}, 107 },
  { {VmstatCounters_names + 1194, 26}, 14 },
  { {VmstatCounters_names + 1220, 28}, 15 },
  { {VmstatCounters_names + 1248, 19}, 35 },
  { {VmstatCounters_names + 1267, 21}, 7 },
  { {VmstatCounters_names + 1288, 29}, 108 },
  { {VmstatCounters_names + 1317, 18}, 19 },
  { {VmstatCounters_names + 1335, 34}, 22 },
  { {VmstatCounters_names + 1369, 22}, 21 },
  { {VmstatCounters_names + 1391, 19}, 13 },
  { {VmstatCounters_names + 1410, 24}, 23 },
  { {VmstatCounters_names + 1434, 17}, 28 },
  { {VmstatCounters_names + 1451, 26}, 109 },
  { {VmstatCounters_names + 1477, 26}, 110 },
  { {VmstatCounters_names + 1503, 28}, 111 },
  { {VmstatCounters_names + 1531, 28}, 112 },
  { {VmstatCounters_names + 1559, 26}, 113 },
  { {VmstatCounters_names + 1585, 28}, 114 },
  { {VmstatCounters_names + 1613, 17}, 93 },
  { {VmstatCounters_names + 1630, 15}, 115 },
  { {VmstatCounters_names + 1645, 17}, 72 },
  { {VmstatCounters_names + 1662, 17}, 47 },
  { {VmstatCounters_names + 1679, 18}, 43 },
  { {VmstatCounters_names + 1697, 22}, 45 },
  { {VmstatCounters_names + 1719, 21}, 44 },
  { {VmstatCounters_names + 1740, 19}, 48 },
  { {VmstatCounters_names + 1759, 14}, 49 },
  { {VmstatCounters_names + 1773, 13}, 46 },
  { {VmstatCounters_names + 1786, 19}, 67 },
  { {VmstatCounters_names + 1805, 17}, 116 },
  { {VmstatCounters_names + 1822, 18}, 117 },
  { {VmstatCounters_names + 1840, 17}, 50 },
  { {VmstatCounters_names + 1857, 21}, 78 },
  { {VmstatCounters_names + 1878, 24}, 77 },
  { {VmstatCounters_names + 1902, 13}, 38 },
  { {VmstatCounters_names + 1915, 14}, 39 },
  { {VmstatCounters_names + 1929, 19}, 40 },
  { {VmstatCounters_names + 1948, 15}, 118 },
  { {VmstatCounters_names + 1963, 19}, 51 },
  { {VmstatCounters_names + 1982, 23}, 53 },
  { {VmstatCounters_names + 2005, 22}, 52 },
  { {VmstatCounters_names + 2027, 16}, 74 },
  { {VmstatCounters_names + 2043, 20}, 119 },
  { {VmstatCounters_names + 2063, 24}, 63 },
  { {VmstatCounters_names + 2087, 28}, 65 },
  { {VmstatCounters_names + 2115, 27}, 64 },
  { {VmstatCounters_names + 2142, 29}, 66 },
  { {VmstatCounters_names + 2171, 20}, 120 },
  { {VmstatCounters_names + 2191, 24}, 60 },
  { {VmstatCounters_names + 2215, 28}, 62 },
  { {VmstatCounters_names + 2243, 27}, 61 },
  { {VmstatCounters_names + 2270, 17}, 121 },
  { {VmstatCounters_names + 2287, 21}, 122 },
  { {VmstatCounters_names + 2308, 20}, 123 },
  { {VmstatCounters_names + 2328, 21}, 124 },
  { {VmstatCounters_names + 2349, 25}, 57 },
  { {VmstatCounters_names + 2374, 29}, 59 },
  { {VmstatCounters_names + 2403, 28}, 58 },
  { {VmstatCounters_names + 2431, 21}, 125 },
  { {VmstatCounters_names + 2452, 25}, 54 },
  { {VmstatCounters_names + 2477, 29}, 56 },
  { {VmstatCounters_names + 2506, 28}, 55 },
  { {VmstatCounters_names + 2534, 13}, 41 },
  { {VmstatCounters_names + 2547, 14}, 42 },
  { {VmstatCounters_names + 2561, 20}, 68 },
  { {VmstatCounters_names + 2581, 14}, 126 },
  { {VmstatCounters_names + 2595, 18}, 127 },
  { {VmstatCounters_names + 2613, 30}, 91 },
  { {VmstatCounters_names + 2643, 29}, 86 },
  { {VmstatCounters_names + 2672, 30}, 89 },
  { {VmstatCounters_names + 2702, 32}, 90 },
  { {VmstatCounters_names + 2734, 30}, 88 },
  { {VmstatCounters_names + 2764, 30}, 87 },
  { {VmstatCounters_names + 2794, 31}, 92 },
  { {VmstatCounters_names + 2825, 18}, 0 },
  { {VmstatCounters_names + 2843, 26}, 31 },
  { {VmstatCounters_names + 2869, 29}, 32 },
  { {VmstatCounters_names + 2898, 25}, 30 },
  { {VmstatCounters_names + 2923, 25}, 128 },
};

static const int VmstatCounters_entries_by_number[] = {
  124, // 0 -> VMSTAT_UNSPECIFIED
  31, // 1 -> VMSTAT_NR_FREE_PAGES
  20, // 2 -> VMSTAT_NR_ALLOC_BATCH
  33, // 3 -> VMSTAT_NR_INACTIVE_ANON
  18, // 4 -> VMSTAT_NR_ACTIVE_ANON
  34, // 5 -> VMSTAT_NR_INACTIVE_FILE
  19, // 6 -> VMSTAT_NR_ACTIVE_FILE
  54, // 7 -> VMSTAT_NR_UNEVICTABLE
  43, // 8 -> VMSTAT_NR_MLOCK
  21, // 9 -> VMSTAT_NR_ANON_PAGES
  42, // 10 -> VMSTAT_NR_MAPPED
  29, // 11 -> VMSTAT_NR_FILE_PAGES
  25, // 12 -> VMSTAT_NR_DIRTY
  59, // 13 -> VMSTAT_NR_WRITEBACK
  51, // 14 -> VMSTAT_NR_SLAB_RECLAIMABLE
  52, // 15 -> VMSTAT_NR_SLAB_UNRECLAIMABLE
  46, // 16 -> VMSTAT_NR_PAGE_TABLE_PAGES
  41, // 17 -> VMSTAT_NR_KERNEL_STACK
  44, // 18 -> VMSTAT_NR_OVERHEAD
  56, // 19 -> VMSTAT_NR_UNSTABLE
  23, // 20 -> VMSTAT_NR_BOUNCE
  58, // 21 -> VMSTAT_NR_VMSCAN_WRITE
  57, // 22 -> VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM
  60, // 23 -> VMSTAT_NR_WRITEBACK_TEMP
  38, // 24 -> VMSTAT_NR_ISOLATED_ANON
  39, // 25 -> VMSTAT_NR_ISOLATED_FILE
  48, // 26 -> VMSTAT_NR_SHMEM
  24, // 27 -> VMSTAT_NR_DIRTIED
  61, // 28 -> VMSTAT_NR_WRITTEN
  45, // 29 -> VMSTAT_NR_PAGES_SCANNED
  127, // 30 -> VMSTAT_WORKINGSET_REFAULT
  125, // 31 -> VMSTAT_WORKINGSET_ACTIVATE
  126, // 32 -> VMSTAT_WORKINGSET_NODERECLAIM
  22, // 33 -> VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES
  30, // 34 -> VMSTAT_NR_FREE_CMA
  53, // 35 -> VMSTAT_NR_SWAPCACHE
  27, // 36 -> VMSTAT_NR_DIRTY_THRESHOLD
  26, // 37 -> VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD
  84, // 38 -> VMSTAT_PGPGIN
  85, // 39 -> VMSTAT_PGPGOUT
  86, // 40 -> VMSTAT_PGPGOUTCLEAN
  112, // 41 -> VMSTAT_PSWPIN
  113, // 42 -> VMSTAT_PSWPOUT
  72, // 43 -> VMSTAT_PGALLOC_DMA
  74, // 44 -> VMSTAT_PGALLOC_NORMAL
  73, // 45 -> VMSTAT_PGALLOC_MOVABLE
  77, // 46 -> VMSTAT_PGFREE
  71, // 47 -> VMSTAT_PGACTIVATE
  75, // 48 -> VMSTAT_PGDEACTIVATE
  76, // 49 -> VMSTAT_PGFAULT
  81, // 50 -> VMSTAT_PGMAJFAULT
  88, // 51 -> VMSTAT_PGREFILL_DMA
  90, // 52 -> VMSTAT_PGREFILL_NORMAL
  89, // 53 -> VMSTAT_PGREFILL_MOVABLE
  109, // 54 -> VMSTAT_PGSTEAL_KSWAPD_DMA
  111, // 55 -> VMSTAT_PGSTEAL_KSWAPD_NORMAL
  110, // 56 -> VMSTAT_PGSTEAL_KSWAPD_MOVABLE
  105, // 57 -> VMSTAT_PGSTEAL_DIRECT_DMA
  107, // 58 -> VMSTAT_PGSTEAL_DIRECT_NORMAL
  106, // 59 -> VMSTAT_PGSTEAL_DIRECT_MOVABLE
  98, // 60 -> VMSTAT_PGSCAN_KSWAPD_DMA
  100, // 61 -> VMSTAT_PGSCAN_KSWAPD_NORMAL
  99, // 62 -> VMSTAT_PGSCAN_KSWAPD_MOVABLE
  93, // 63 -> VMSTAT_PGSCAN_DIRECT_DMA
  95, // 64 -> VMSTAT_PGSCAN_DIRECT_NORMAL
  94, // 65 -> VMSTAT_PGSCAN_DIRECT_MOVABLE
  96, // 66 -> VMSTAT_PGSCAN_DIRECT_THROTTLE
  78, // 67 -> VMSTAT_PGINODESTEAL
  114, // 68 -> VMSTAT_SLABS_SCANNED
  16, // 69 -> VMSTAT_KSWAPD_INODESTEAL
  17, // 70 -> VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY
  15, // 71 -> VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY
  70, // 72 -> VMSTAT_PAGEOUTRUN
  0, // 73 -> VMSTAT_ALLOCSTALL
  91, // 74 -> VMSTAT_PGROTATED
  13, // 75 -> VMSTAT_DROP_PAGECACHE
  14, // 76 -> VMSTAT_DROP_SLAB
  83, // 77 -> VMSTAT_PGMIGRATE_SUCCESS
  82, // 78 -> VMSTAT_PGMIGRATE_FAIL
  10, // 79 -> VMSTAT_COMPACT_MIGRATE_SCANNED
  8, // 80 -> VMSTAT_COMPACT_FREE_SCANNED
  9, // 81 -> VMSTAT_COMPACT_ISOLATED
  11, // 82 -> VMSTAT_COMPACT_STALL
  7, // 83 -> VMSTAT_COMPACT_FAIL
  12, // 84 -> VMSTAT_COMPACT_SUCCESS
  6, // 85 -> VMSTAT_COMPACT_DAEMON_WAKE
  118, // 86 -> VMSTAT_UNEVICTABLE_PGS_CULLED
  122, // 87 -> VMSTAT_UNEVICTABLE_PGS_SCANNED
  121, // 88 -> VMSTAT_UNEVICTABLE_PGS_RESCUED
  119, // 89 -> VMSTAT_UNEVICTABLE_PGS_MLOCKED
  120, // 90 -> VMSTAT_UNEVICTABLE_PGS_MUNLOCKED
  117, // 91 -> VMSTAT_UNEVICTABLE_PGS_CLEARED
  123, // 92 -> VMSTAT_UNEVICTABLE_PGS_STRANDED
  68, // 93 -> VMSTAT_NR_ZSPAGES
  36, // 94 -> VMSTAT_NR_ION_HEAP
  32, // 95 -> VMSTAT_NR_GPU_HEAP
  1, // 96 -> VMSTAT_ALLOCSTALL_DMA
  2, // 97 -> VMSTAT_ALLOCSTALL_MOVABLE
  3, // 98 -> VMSTAT_ALLOCSTALL_NORMAL
  4, // 99 -> VMSTAT_COMPACT_DAEMON_FREE_SCANNED
  5, // 100 -> VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED
  28, // 101 -> VMSTAT_NR_FASTRPC
  35, // 102 -> VMSTAT_NR_INDIRECTLY_RECLAIMABLE
  37, // 103 -> VMSTAT_NR_ION_HEAP_POOL
  40, // 104 -> VMSTAT_NR_KERNEL_MISC_RECLAIMABLE
  47, // 105 -> VMSTAT_NR_SHADOW_CALL_STACK_BYTES
  49, // 106 -> VMSTAT_NR_SHMEM_HUGEPAGES
  50, // 107 -> VMSTAT_NR_SHMEM_PMDMAPPED
  55, // 108 -> VMSTAT_NR_UNRECLAIMABLE_PAGES
  62, // 109 -> VMSTAT_NR_ZONE_ACTIVE_ANON
  63, // 110 -> VMSTAT_NR_ZONE_ACTIVE_FILE
  64, // 111 -> VMSTAT_NR_ZONE_INACTIVE_ANON
  65, // 112 -> VMSTAT_NR_ZONE_INACTIVE_FILE
  66, // 113 -> VMSTAT_NR_ZONE_UNEVICTABLE
  67, // 114 -> VMSTAT_NR_ZONE_WRITE_PENDING
  69, // 115 -> VMSTAT_OOM_KILL
  79, // 116 -> VMSTAT_PGLAZYFREE
  80, // 117 -> VMSTAT_PGLAZYFREED
  87, // 118 -> VMSTAT_PGREFILL
  92, // 119 -> VMSTAT_PGSCAN_DIRECT
  97, // 120 -> VMSTAT_PGSCAN_KSWAPD
  101, // 121 -> VMSTAT_PGSKIP_DMA
  102, // 122 -> VMSTAT_PGSKIP_MOVABLE
  103, // 123 -> VMSTAT_PGSKIP_NORMAL
  104, // 124 -> VMSTAT_PGSTEAL_DIRECT
  108, // 125 -> VMSTAT_PGSTEAL_KSWAPD
  115, // 126 -> VMSTAT_SWAP_RA
  116, // 127 -> VMSTAT_SWAP_RA_HIT
  128, // 128 -> VMSTAT_WORKINGSET_RESTORE
};

const std::string& VmstatCounters_Name(
    VmstatCounters value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VmstatCounters_entries,
          VmstatCounters_entries_by_number,
          129, VmstatCounters_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VmstatCounters_entries,
      VmstatCounters_entries_by_number,
      129, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VmstatCounters_strings[idx].get();
}
bool VmstatCounters_Parse(
    const std::string& name, VmstatCounters* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VmstatCounters_entries, 129, name, &int_value);
  if (success) {
    *value = static_cast<VmstatCounters>(int_value);
  }
  return success;
}

// ===================================================================

void GpuCounterDescriptor_GpuCounterSpec::InitAsDefaultInstance() {
}
class GpuCounterDescriptor_GpuCounterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterSpec>()._has_bits_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_select_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}
GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      numerator_units_(from.numerator_units_),
      denominator_units_(from.denominator_units_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&counter_id_, &from.counter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_by_default_) -
    reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  clear_has_peak_value();
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      set_int_peak_value(from.int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      set_double_peak_value(from.double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

void GpuCounterDescriptor_GpuCounterSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&counter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_by_default_) -
      reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  clear_has_peak_value();
}

GpuCounterDescriptor_GpuCounterSpec::~GpuCounterDescriptor_GpuCounterSpec() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  SharedDtor();
}

void GpuCounterDescriptor_GpuCounterSpec::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_peak_value()) {
    clear_peak_value();
  }
}

void GpuCounterDescriptor_GpuCounterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor_GpuCounterSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor_GpuCounterSpec::clear_peak_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  switch (peak_value_case()) {
    case kIntPeakValue: {
      // No need to clear
      break;
    }
    case kDoublePeakValue: {
      // No need to clear
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PEAK_VALUE_NOT_SET;
}


void GpuCounterDescriptor_GpuCounterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numerator_units_.Clear();
  denominator_units_.Clear();
  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&counter_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&select_by_default_) -
        reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  }
  clear_peak_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor_GpuCounterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_peak_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_int_peak_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_peak_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          set_double_peak_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              add_numerator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 56);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_numerator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              add_denominator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_denominator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool select_by_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_select_by_default(&has_bits);
          select_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(val))) {
              add_groups(static_cast<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 80);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_groups(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor_GpuCounterSpec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 counter_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_counter_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_peak_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_peak_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_value_.int_peak_value_)));
          set_has_int_peak_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_peak_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          clear_peak_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_value_.double_peak_value_)));
          set_has_double_peak_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value)) {
            add_numerator_units(static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 7,
                 ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid,
                 &unknown_fields_stream,
                 this->mutable_numerator_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value)) {
            add_denominator_units(static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid,
                 &unknown_fields_stream,
                 this->mutable_denominator_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool select_by_default = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_select_by_default(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_by_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value)) {
            add_groups(static_cast< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 10,
                 ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid,
                 &unknown_fields_stream,
                 this->mutable_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor_GpuCounterSpec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->counter_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  switch (peak_value_case()) {
    case kIntPeakValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->int_peak_value(), output);
      break;
    case kDoublePeakValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->double_peak_value(), output);
      break;
    default: ;
  }
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  for (int i = 0, n = this->numerator_units_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->numerator_units(i), output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  for (int i = 0, n = this->denominator_units_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->denominator_units(i), output);
  }

  // optional bool select_by_default = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->select_by_default(), output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  for (int i = 0, n = this->groups_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->groups(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

size_t GpuCounterDescriptor_GpuCounterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->numerator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->numerator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->denominator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->denominator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->groups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->groups(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 counter_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->counter_id());
    }

    // optional bool select_by_default = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  switch (peak_value_case()) {
    // optional int64 int_peak_value = 5;
    case kIntPeakValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int_peak_value());
      break;
    }
    // optional double double_peak_value = 6;
    case kDoublePeakValue: {
      total_size += 1 + 8;
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor_GpuCounterSpec*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterSpec::MergeFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numerator_units_.MergeFrom(from.numerator_units_);
  denominator_units_.MergeFrom(from.denominator_units_);
  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      counter_id_ = from.counter_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      select_by_default_ = from.select_by_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      set_int_peak_value(from.int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      set_double_peak_value(from.double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
}

void GpuCounterDescriptor_GpuCounterSpec::CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterSpec::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterSpec::InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  numerator_units_.InternalSwap(&other->numerator_units_);
  denominator_units_.InternalSwap(&other->denominator_units_);
  groups_.InternalSwap(&other->groups_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(counter_id_, other->counter_id_);
  swap(select_by_default_, other->select_by_default_);
  swap(peak_value_, other->peak_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GpuCounterDescriptor_GpuCounterSpec::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
}


// ===================================================================

void GpuCounterDescriptor_GpuCounterBlock::InitAsDefaultInstance() {
}
class GpuCounterDescriptor_GpuCounterBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterBlock>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}
GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counter_ids_(from.counter_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_capacity_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

void GpuCounterDescriptor_GpuCounterBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_capacity_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
}

GpuCounterDescriptor_GpuCounterBlock::~GpuCounterDescriptor_GpuCounterBlock() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  SharedDtor();
}

void GpuCounterDescriptor_GpuCounterBlock::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpuCounterDescriptor_GpuCounterBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor_GpuCounterBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor_GpuCounterBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counter_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&block_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_capacity_) -
        reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor_GpuCounterBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_id(&has_bits);
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_block_capacity(&has_bits);
          block_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 counter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_counter_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 40);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_counter_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor_GpuCounterBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_block_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_capacity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_block_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 counter_ids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_counter_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor_GpuCounterBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 block_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  // optional uint32 block_capacity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->block_capacity(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // repeated uint32 counter_ids = 5;
  for (int i = 0, n = this->counter_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      5, this->counter_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

size_t GpuCounterDescriptor_GpuCounterBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counter_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->counter_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->counter_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 block_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 block_capacity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_capacity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterBlock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor_GpuCounterBlock*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterBlock::MergeFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counter_ids_.MergeFrom(from.counter_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      block_id_ = from.block_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      block_capacity_ = from.block_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterDescriptor_GpuCounterBlock::CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterBlock::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterBlock::InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counter_ids_.InternalSwap(&other->counter_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_id_, other->block_id_);
  swap(block_capacity_, other->block_capacity_);
}

std::string GpuCounterDescriptor_GpuCounterBlock::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
}


// ===================================================================

void GpuCounterDescriptor::InitAsDefaultInstance() {
}
class GpuCounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor>()._has_bits_);
  static void set_has_min_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_supports_instrumented_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpuCounterDescriptor::GpuCounterDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor)
}
GpuCounterDescriptor::GpuCounterDescriptor(const GpuCounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      specs_(from.specs_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_sampling_period_ns_, &from.min_sampling_period_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&supports_instrumented_sampling_) -
    reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor)
}

void GpuCounterDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&min_sampling_period_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supports_instrumented_sampling_) -
      reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
}

GpuCounterDescriptor::~GpuCounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor)
  SharedDtor();
}

void GpuCounterDescriptor::SharedDtor() {
}

void GpuCounterDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor& GpuCounterDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specs_.Clear();
  blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&min_sampling_period_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supports_instrumented_sampling_) -
        reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint64 min_sampling_period_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_sampling_period_ns(&has_bits);
          min_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_sampling_period_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_sampling_period_ns(&has_bits);
          max_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool supports_instrumented_sampling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_supports_instrumented_sampling(&has_bits);
          supports_instrumented_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_sampling_period_ns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_min_sampling_period_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_sampling_period_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_sampling_period_ns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_sampling_period_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_sampling_period_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_instrumented_sampling = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_supports_instrumented_sampling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_instrumented_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->specs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->specs(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_sampling_period_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->min_sampling_period_ns(), output);
  }

  // optional uint64 max_sampling_period_ns = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->max_sampling_period_ns(), output);
  }

  // optional bool supports_instrumented_sampling = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->supports_instrumented_sampling(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor)
}

size_t GpuCounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->specs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->specs(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 min_sampling_period_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->min_sampling_period_ns());
    }

    // optional uint64 max_sampling_period_ns = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_sampling_period_ns());
    }

    // optional bool supports_instrumented_sampling = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor*>(
      &from));
}

void GpuCounterDescriptor::MergeFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specs_.MergeFrom(from.specs_);
  blocks_.MergeFrom(from.blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      min_sampling_period_ns_ = from.min_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_sampling_period_ns_ = from.max_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      supports_instrumented_sampling_ = from.supports_instrumented_sampling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterDescriptor::CopyFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor::InternalSwap(GpuCounterDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&specs_)->InternalSwap(CastToBase(&other->specs_));
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  swap(min_sampling_period_ns_, other->min_sampling_period_ns_);
  swap(max_sampling_period_ns_, other->max_sampling_period_ns_);
  swap(supports_instrumented_sampling_, other->supports_instrumented_sampling_);
}

std::string GpuCounterDescriptor::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor";
}


// ===================================================================

void TrackEventCategory::InitAsDefaultInstance() {
}
class TrackEventCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEventCategory>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrackEventCategory::TrackEventCategory()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEventCategory)
}
TrackEventCategory::TrackEventCategory(const TrackEventCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEventCategory)
}

void TrackEventCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrackEventCategory::~TrackEventCategory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEventCategory)
  SharedDtor();
}

void TrackEventCategory::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackEventCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEventCategory& TrackEventCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEventCategory_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrackEventCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEventCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEventCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEventCategory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEventCategory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEventCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEventCategory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEventCategory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEventCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEventCategory)
}

size_t TrackEventCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEventCategory)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEventCategory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEventCategory*>(
      &from));
}

void TrackEventCategory::MergeFrom(const TrackEventCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEventCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
}

void TrackEventCategory::CopyFrom(const TrackEventCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEventCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEventCategory::IsInitialized() const {
  return true;
}

void TrackEventCategory::InternalSwap(TrackEventCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TrackEventCategory::GetTypeName() const {
  return "perfetto.protos.TrackEventCategory";
}


// ===================================================================

void TrackEventDescriptor::InitAsDefaultInstance() {
}
class TrackEventDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEventDescriptor>()._has_bits_);
};

TrackEventDescriptor::TrackEventDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEventDescriptor)
}
TrackEventDescriptor::TrackEventDescriptor(const TrackEventDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      available_categories_(from.available_categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEventDescriptor)
}

void TrackEventDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
}

TrackEventDescriptor::~TrackEventDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEventDescriptor)
  SharedDtor();
}

void TrackEventDescriptor::SharedDtor() {
}

void TrackEventDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEventDescriptor& TrackEventDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEventDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrackEventDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEventDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_categories_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEventDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TrackEventCategory available_categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_available_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEventDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEventDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TrackEventCategory available_categories = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_available_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEventDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEventDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEventDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEventDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TrackEventCategory available_categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->available_categories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->available_categories(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEventDescriptor)
}

size_t TrackEventDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEventDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TrackEventCategory available_categories = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->available_categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->available_categories(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEventDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEventDescriptor*>(
      &from));
}

void TrackEventDescriptor::MergeFrom(const TrackEventDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEventDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_categories_.MergeFrom(from.available_categories_);
}

void TrackEventDescriptor::CopyFrom(const TrackEventDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEventDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEventDescriptor::IsInitialized() const {
  return true;
}

void TrackEventDescriptor::InternalSwap(TrackEventDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&available_categories_)->InternalSwap(CastToBase(&other->available_categories_));
}

std::string TrackEventDescriptor::GetTypeName() const {
  return "perfetto.protos.TrackEventDescriptor";
}


// ===================================================================

void DataSourceDescriptor::InitAsDefaultInstance() {
  ::perfetto::protos::_DataSourceDescriptor_default_instance_._instance.get_mutable()->gpu_counter_descriptor_ = const_cast< ::perfetto::protos::GpuCounterDescriptor*>(
      ::perfetto::protos::GpuCounterDescriptor::internal_default_instance());
  ::perfetto::protos::_DataSourceDescriptor_default_instance_._instance.get_mutable()->track_event_descriptor_ = const_cast< ::perfetto::protos::TrackEventDescriptor*>(
      ::perfetto::protos::TrackEventDescriptor::internal_default_instance());
}
class DataSourceDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceDescriptor>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_will_notify_on_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_will_notify_on_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_handles_incremental_state_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::GpuCounterDescriptor& gpu_counter_descriptor(const DataSourceDescriptor* msg);
  static void set_has_gpu_counter_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TrackEventDescriptor& track_event_descriptor(const DataSourceDescriptor* msg);
  static void set_has_track_event_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::GpuCounterDescriptor&
DataSourceDescriptor::_Internal::gpu_counter_descriptor(const DataSourceDescriptor* msg) {
  return *msg->gpu_counter_descriptor_;
}
const ::perfetto::protos::TrackEventDescriptor&
DataSourceDescriptor::_Internal::track_event_descriptor(const DataSourceDescriptor* msg) {
  return *msg->track_event_descriptor_;
}
DataSourceDescriptor::DataSourceDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.DataSourceDescriptor)
}
DataSourceDescriptor::DataSourceDescriptor(const DataSourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_gpu_counter_descriptor()) {
    gpu_counter_descriptor_ = new ::perfetto::protos::GpuCounterDescriptor(*from.gpu_counter_descriptor_);
  } else {
    gpu_counter_descriptor_ = nullptr;
  }
  if (from.has_track_event_descriptor()) {
    track_event_descriptor_ = new ::perfetto::protos::TrackEventDescriptor(*from.track_event_descriptor_);
  } else {
    track_event_descriptor_ = nullptr;
  }
  ::memcpy(&will_notify_on_stop_, &from.will_notify_on_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&handles_incremental_state_clear_) -
    reinterpret_cast<char*>(&will_notify_on_stop_)) + sizeof(handles_incremental_state_clear_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DataSourceDescriptor)
}

void DataSourceDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gpu_counter_descriptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handles_incremental_state_clear_) -
      reinterpret_cast<char*>(&gpu_counter_descriptor_)) + sizeof(handles_incremental_state_clear_));
}

DataSourceDescriptor::~DataSourceDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DataSourceDescriptor)
  SharedDtor();
}

void DataSourceDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gpu_counter_descriptor_;
  if (this != internal_default_instance()) delete track_event_descriptor_;
}

void DataSourceDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSourceDescriptor& DataSourceDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSourceDescriptor_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DataSourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DataSourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gpu_counter_descriptor_ != nullptr);
      gpu_counter_descriptor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(track_event_descriptor_ != nullptr);
      track_event_descriptor_->Clear();
    }
  }
  ::memset(&will_notify_on_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handles_incremental_state_clear_) -
      reinterpret_cast<char*>(&will_notify_on_stop_)) + sizeof(handles_incremental_state_clear_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSourceDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool will_notify_on_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_will_notify_on_stop(&has_bits);
          will_notify_on_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool will_notify_on_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_will_notify_on_start(&has_bits);
          will_notify_on_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool handles_incremental_state_clear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_handles_incremental_state_clear(&has_bits);
          handles_incremental_state_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_gpu_counter_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_track_event_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSourceDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.DataSourceDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool will_notify_on_stop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_will_notify_on_stop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &will_notify_on_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool will_notify_on_start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_will_notify_on_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &will_notify_on_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool handles_incremental_state_clear = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_handles_incremental_state_clear(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handles_incremental_state_clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_counter_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_track_event_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.DataSourceDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.DataSourceDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSourceDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.DataSourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool will_notify_on_stop = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->will_notify_on_stop(), output);
  }

  // optional bool will_notify_on_start = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->will_notify_on_start(), output);
  }

  // optional bool handles_incremental_state_clear = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->handles_incremental_state_clear(), output);
  }

  // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::gpu_counter_descriptor(this), output);
  }

  // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::track_event_descriptor(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.DataSourceDescriptor)
}

size_t DataSourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DataSourceDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpu_counter_descriptor_);
    }

    // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_event_descriptor_);
    }

    // optional bool will_notify_on_stop = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool will_notify_on_start = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool handles_incremental_state_clear = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataSourceDescriptor*>(
      &from));
}

void DataSourceDescriptor::MergeFrom(const DataSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DataSourceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gpu_counter_descriptor()->::perfetto::protos::GpuCounterDescriptor::MergeFrom(from.gpu_counter_descriptor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_track_event_descriptor()->::perfetto::protos::TrackEventDescriptor::MergeFrom(from.track_event_descriptor());
    }
    if (cached_has_bits & 0x00000008u) {
      will_notify_on_stop_ = from.will_notify_on_stop_;
    }
    if (cached_has_bits & 0x00000010u) {
      will_notify_on_start_ = from.will_notify_on_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      handles_incremental_state_clear_ = from.handles_incremental_state_clear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSourceDescriptor::CopyFrom(const DataSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DataSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceDescriptor::IsInitialized() const {
  return true;
}

void DataSourceDescriptor::InternalSwap(DataSourceDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gpu_counter_descriptor_, other->gpu_counter_descriptor_);
  swap(track_event_descriptor_, other->track_event_descriptor_);
  swap(will_notify_on_stop_, other->will_notify_on_stop_);
  swap(will_notify_on_start_, other->will_notify_on_start_);
  swap(handles_incremental_state_clear_, other->handles_incremental_state_clear_);
}

std::string DataSourceDescriptor::GetTypeName() const {
  return "perfetto.protos.DataSourceDescriptor";
}


// ===================================================================

void TracingServiceState_Producer::InitAsDefaultInstance() {
}
class TracingServiceState_Producer::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_Producer>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TracingServiceState_Producer::TracingServiceState_Producer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState.Producer)
}
TracingServiceState_Producer::TracingServiceState_Producer(const TracingServiceState_Producer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.Producer)
}

void TracingServiceState_Producer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(uid_));
}

TracingServiceState_Producer::~TracingServiceState_Producer() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.Producer)
  SharedDtor();
}

void TracingServiceState_Producer::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingServiceState_Producer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_Producer& TracingServiceState_Producer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_Producer_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_Producer::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState_Producer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState_Producer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState.Producer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState.Producer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState.Producer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState_Producer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState.Producer)
}

size_t TracingServiceState_Producer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.Producer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_Producer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_Producer*>(
      &from));
}

void TracingServiceState_Producer::MergeFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.Producer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_Producer::CopyFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.Producer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_Producer::IsInitialized() const {
  return true;
}

void TracingServiceState_Producer::InternalSwap(TracingServiceState_Producer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(uid_, other->uid_);
}

std::string TracingServiceState_Producer::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.Producer";
}


// ===================================================================

void TracingServiceState_DataSource::InitAsDefaultInstance() {
  ::perfetto::protos::_TracingServiceState_DataSource_default_instance_._instance.get_mutable()->ds_descriptor_ = const_cast< ::perfetto::protos::DataSourceDescriptor*>(
      ::perfetto::protos::DataSourceDescriptor::internal_default_instance());
}
class TracingServiceState_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_DataSource>()._has_bits_);
  static const ::perfetto::protos::DataSourceDescriptor& ds_descriptor(const TracingServiceState_DataSource* msg);
  static void set_has_ds_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::DataSourceDescriptor&
TracingServiceState_DataSource::_Internal::ds_descriptor(const TracingServiceState_DataSource* msg) {
  return *msg->ds_descriptor_;
}
TracingServiceState_DataSource::TracingServiceState_DataSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState.DataSource)
}
TracingServiceState_DataSource::TracingServiceState_DataSource(const TracingServiceState_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ds_descriptor()) {
    ds_descriptor_ = new ::perfetto::protos::DataSourceDescriptor(*from.ds_descriptor_);
  } else {
    ds_descriptor_ = nullptr;
  }
  producer_id_ = from.producer_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.DataSource)
}

void TracingServiceState_DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&ds_descriptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&producer_id_) -
      reinterpret_cast<char*>(&ds_descriptor_)) + sizeof(producer_id_));
}

TracingServiceState_DataSource::~TracingServiceState_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.DataSource)
  SharedDtor();
}

void TracingServiceState_DataSource::SharedDtor() {
  if (this != internal_default_instance()) delete ds_descriptor_;
}

void TracingServiceState_DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_DataSource& TracingServiceState_DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ds_descriptor_ != nullptr);
    ds_descriptor_->Clear();
  }
  producer_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState_DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ds_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 producer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_producer_id(&has_bits);
          producer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState_DataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState.DataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ds_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 producer_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_producer_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &producer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState.DataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState_DataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ds_descriptor(this), output);
  }

  // optional int32 producer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->producer_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState.DataSource)
}

size_t TracingServiceState_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.DataSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ds_descriptor_);
    }

    // optional int32 producer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->producer_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_DataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_DataSource*>(
      &from));
}

void TracingServiceState_DataSource::MergeFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ds_descriptor()->::perfetto::protos::DataSourceDescriptor::MergeFrom(from.ds_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      producer_id_ = from.producer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_DataSource::CopyFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_DataSource::IsInitialized() const {
  return true;
}

void TracingServiceState_DataSource::InternalSwap(TracingServiceState_DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ds_descriptor_, other->ds_descriptor_);
  swap(producer_id_, other->producer_id_);
}

std::string TracingServiceState_DataSource::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.DataSource";
}


// ===================================================================

void TracingServiceState::InitAsDefaultInstance() {
}
class TracingServiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState>()._has_bits_);
  static void set_has_num_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_sessions_started(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TracingServiceState::TracingServiceState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState)
}
TracingServiceState::TracingServiceState(const TracingServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      producers_(from.producers_),
      data_sources_(from.data_sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_sessions_, &from.num_sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_started_) -
    reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState)
}

void TracingServiceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&num_sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_started_) -
      reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
}

TracingServiceState::~TracingServiceState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState)
  SharedDtor();
}

void TracingServiceState::SharedDtor() {
}

void TracingServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState& TracingServiceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producers_.Clear();
  data_sources_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sessions_started_) -
        reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_sessions(&has_bits);
          num_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_sessions_started(&has_bits);
          num_sessions_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_producers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sessions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_sessions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sessions_started = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_sessions_started(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sessions_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->producers(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_sources_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->data_sources(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_sessions = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_sessions(), output);
  }

  // optional int32 num_sessions_started = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_sessions_started(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState)
}

size_t TracingServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->producers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->producers(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_sources(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 num_sessions = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sessions());
    }

    // optional int32 num_sessions_started = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sessions_started());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState*>(
      &from));
}

void TracingServiceState::MergeFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producers_.MergeFrom(from.producers_);
  data_sources_.MergeFrom(from.data_sources_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_sessions_ = from.num_sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sessions_started_ = from.num_sessions_started_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState::CopyFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState::IsInitialized() const {
  return true;
}

void TracingServiceState::InternalSwap(TracingServiceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&producers_)->InternalSwap(CastToBase(&other->producers_));
  CastToBase(&data_sources_)->InternalSwap(CastToBase(&other->data_sources_));
  swap(num_sessions_, other->num_sessions_);
  swap(num_sessions_started_, other->num_sessions_started_);
}

std::string TracingServiceState::GetTypeName() const {
  return "perfetto.protos.TracingServiceState";
}


// ===================================================================

void AndroidLogConfig::InitAsDefaultInstance() {
}
class AndroidLogConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidLogConfig>()._has_bits_);
  static void set_has_min_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidLogConfig::AndroidLogConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.AndroidLogConfig)
}
AndroidLogConfig::AndroidLogConfig(const AndroidLogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      log_ids_(from.log_ids_),
      filter_tags_(from.filter_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_prio_ = from.min_prio_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidLogConfig)
}

void AndroidLogConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  min_prio_ = 0;
}

AndroidLogConfig::~AndroidLogConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidLogConfig)
  SharedDtor();
}

void AndroidLogConfig::SharedDtor() {
}

void AndroidLogConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidLogConfig& AndroidLogConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidLogConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AndroidLogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidLogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_ids_.Clear();
  filter_tags_.Clear();
  min_prio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidLogConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AndroidLogId log_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidLogId_IsValid(val))) {
              add_log_ids(static_cast<::perfetto::protos::AndroidLogId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_log_ids(), ptr, ctx, ::perfetto::protos::AndroidLogId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidLogPriority_IsValid(val))) {
            set_min_prio(static_cast<::perfetto::protos::AndroidLogPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string filter_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_filter_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidLogConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.AndroidLogConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.AndroidLogId log_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::AndroidLogId_IsValid(value)) {
            add_log_ids(static_cast< ::perfetto::protos::AndroidLogId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::perfetto::protos::AndroidLogId_IsValid,
                 &unknown_fields_stream,
                 this->mutable_log_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::AndroidLogPriority_IsValid(value)) {
            set_min_prio(static_cast< ::perfetto::protos::AndroidLogPriority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string filter_tags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_filter_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.AndroidLogConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.AndroidLogConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidLogConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.AndroidLogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidLogId log_ids = 1;
  for (int i = 0, n = this->log_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->log_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->min_prio(), output);
  }

  // repeated string filter_tags = 4;
  for (int i = 0, n = this->filter_tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->filter_tags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.AndroidLogConfig)
}

size_t AndroidLogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidLogConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidLogId log_ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->log_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->log_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string filter_tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->filter_tags_size());
  for (int i = 0, n = this->filter_tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->filter_tags(i));
  }

  // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->min_prio());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidLogConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidLogConfig*>(
      &from));
}

void AndroidLogConfig::MergeFrom(const AndroidLogConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidLogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_ids_.MergeFrom(from.log_ids_);
  filter_tags_.MergeFrom(from.filter_tags_);
  if (from.has_min_prio()) {
    set_min_prio(from.min_prio());
  }
}

void AndroidLogConfig::CopyFrom(const AndroidLogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidLogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidLogConfig::IsInitialized() const {
  return true;
}

void AndroidLogConfig::InternalSwap(AndroidLogConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  log_ids_.InternalSwap(&other->log_ids_);
  filter_tags_.InternalSwap(CastToBase(&other->filter_tags_));
  swap(min_prio_, other->min_prio_);
}

std::string AndroidLogConfig::GetTypeName() const {
  return "perfetto.protos.AndroidLogConfig";
}


// ===================================================================

void AndroidPolledStateConfig::InitAsDefaultInstance() {
}
class AndroidPolledStateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidPolledStateConfig>()._has_bits_);
  static void set_has_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidPolledStateConfig::AndroidPolledStateConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.AndroidPolledStateConfig)
}
AndroidPolledStateConfig::AndroidPolledStateConfig(const AndroidPolledStateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  poll_ms_ = from.poll_ms_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidPolledStateConfig)
}

void AndroidPolledStateConfig::SharedCtor() {
  poll_ms_ = 0u;
}

AndroidPolledStateConfig::~AndroidPolledStateConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidPolledStateConfig)
  SharedDtor();
}

void AndroidPolledStateConfig::SharedDtor() {
}

void AndroidPolledStateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidPolledStateConfig& AndroidPolledStateConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidPolledStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AndroidPolledStateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidPolledStateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poll_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidPolledStateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 poll_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_poll_ms(&has_bits);
          poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidPolledStateConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.AndroidPolledStateConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poll_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_poll_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.AndroidPolledStateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.AndroidPolledStateConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidPolledStateConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.AndroidPolledStateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->poll_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.AndroidPolledStateConfig)
}

size_t AndroidPolledStateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidPolledStateConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 poll_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->poll_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidPolledStateConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidPolledStateConfig*>(
      &from));
}

void AndroidPolledStateConfig::MergeFrom(const AndroidPolledStateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidPolledStateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_poll_ms()) {
    set_poll_ms(from.poll_ms());
  }
}

void AndroidPolledStateConfig::CopyFrom(const AndroidPolledStateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidPolledStateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidPolledStateConfig::IsInitialized() const {
  return true;
}

void AndroidPolledStateConfig::InternalSwap(AndroidPolledStateConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poll_ms_, other->poll_ms_);
}

std::string AndroidPolledStateConfig::GetTypeName() const {
  return "perfetto.protos.AndroidPolledStateConfig";
}


// ===================================================================

void PackagesListConfig::InitAsDefaultInstance() {
}
class PackagesListConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PackagesListConfig>()._has_bits_);
};

PackagesListConfig::PackagesListConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PackagesListConfig)
}
PackagesListConfig::PackagesListConfig(const PackagesListConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_name_filter_(from.package_name_filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PackagesListConfig)
}

void PackagesListConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
}

PackagesListConfig::~PackagesListConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PackagesListConfig)
  SharedDtor();
}

void PackagesListConfig::SharedDtor() {
}

void PackagesListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackagesListConfig& PackagesListConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PackagesListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PackagesListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_name_filter_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PackagesListConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string package_name_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_package_name_filter(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PackagesListConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PackagesListConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string package_name_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_package_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PackagesListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PackagesListConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PackagesListConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PackagesListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string package_name_filter = 1;
  for (int i = 0, n = this->package_name_filter_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->package_name_filter(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PackagesListConfig)
}

size_t PackagesListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PackagesListConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string package_name_filter = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->package_name_filter_size());
  for (int i = 0, n = this->package_name_filter_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->package_name_filter(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackagesListConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PackagesListConfig*>(
      &from));
}

void PackagesListConfig::MergeFrom(const PackagesListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PackagesListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_name_filter_.MergeFrom(from.package_name_filter_);
}

void PackagesListConfig::CopyFrom(const PackagesListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PackagesListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackagesListConfig::IsInitialized() const {
  return true;
}

void PackagesListConfig::InternalSwap(PackagesListConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_filter_.InternalSwap(CastToBase(&other->package_name_filter_));
}

std::string PackagesListConfig::GetTypeName() const {
  return "perfetto.protos.PackagesListConfig";
}


// ===================================================================

void ChromeConfig::InitAsDefaultInstance() {
}
class ChromeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeConfig>()._has_bits_);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_filtering_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_convert_to_legacy_json(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_json_agent_label_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeConfig::ChromeConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeConfig)
}
ChromeConfig::ChromeConfig(const ChromeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_config()) {
    trace_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_config_);
  }
  json_agent_label_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_agent_label_filter()) {
    json_agent_label_filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_agent_label_filter_);
  }
  ::memcpy(&privacy_filtering_enabled_, &from.privacy_filtering_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_priority_) -
    reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeConfig)
}

void ChromeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_agent_label_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&privacy_filtering_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_priority_) -
      reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
}

ChromeConfig::~ChromeConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeConfig)
  SharedDtor();
}

void ChromeConfig::SharedDtor() {
  trace_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_agent_label_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeConfig& ChromeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ChromeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trace_config_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      json_agent_label_filter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&privacy_filtering_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_priority_) -
        reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_trace_config(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool privacy_filtering_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_privacy_filtering_enabled(&has_bits);
          privacy_filtering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_legacy_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_convert_to_legacy_json(&has_bits);
          convert_to_legacy_json_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeConfig_ClientPriority_IsValid(val))) {
            set_client_priority(static_cast<::perfetto::protos::ChromeConfig_ClientPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string json_agent_label_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_json_agent_label_filter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trace_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool privacy_filtering_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_privacy_filtering_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacy_filtering_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_legacy_json = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_convert_to_legacy_json(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_legacy_json_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeConfig_ClientPriority_IsValid(value)) {
            set_client_priority(static_cast< ::perfetto::protos::ChromeConfig_ClientPriority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_agent_label_filter = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_json_agent_label_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trace_config(), output);
  }

  // optional bool privacy_filtering_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->privacy_filtering_enabled(), output);
  }

  // optional bool convert_to_legacy_json = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->convert_to_legacy_json(), output);
  }

  // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->client_priority(), output);
  }

  // optional string json_agent_label_filter = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_agent_label_filter(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeConfig)
}

size_t ChromeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->trace_config());
    }

    // optional string json_agent_label_filter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->json_agent_label_filter());
    }

    // optional bool privacy_filtering_enabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_legacy_json = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->client_priority());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeConfig*>(
      &from));
}

void ChromeConfig::MergeFrom(const ChromeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trace_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_config_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      json_agent_label_filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_agent_label_filter_);
    }
    if (cached_has_bits & 0x00000004u) {
      privacy_filtering_enabled_ = from.privacy_filtering_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      convert_to_legacy_json_ = from.convert_to_legacy_json_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_priority_ = from.client_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeConfig::CopyFrom(const ChromeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeConfig::IsInitialized() const {
  return true;
}

void ChromeConfig::InternalSwap(ChromeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_config_.Swap(&other->trace_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_agent_label_filter_.Swap(&other->json_agent_label_filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(privacy_filtering_enabled_, other->privacy_filtering_enabled_);
  swap(convert_to_legacy_json_, other->convert_to_legacy_json_);
  swap(client_priority_, other->client_priority_);
}

std::string ChromeConfig::GetTypeName() const {
  return "perfetto.protos.ChromeConfig";
}


// ===================================================================

void FtraceConfig_CompactSchedConfig::InitAsDefaultInstance() {
}
class FtraceConfig_CompactSchedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_CompactSchedConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}
FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}

void FtraceConfig_CompactSchedConfig::SharedCtor() {
  enabled_ = false;
}

FtraceConfig_CompactSchedConfig::~FtraceConfig_CompactSchedConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
  SharedDtor();
}

void FtraceConfig_CompactSchedConfig::SharedDtor() {
}

void FtraceConfig_CompactSchedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceConfig_CompactSchedConfig& FtraceConfig_CompactSchedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FtraceConfig_CompactSchedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceConfig_CompactSchedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceConfig_CompactSchedConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceConfig.CompactSchedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceConfig.CompactSchedConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceConfig_CompactSchedConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceConfig.CompactSchedConfig)
}

size_t FtraceConfig_CompactSchedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_CompactSchedConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceConfig_CompactSchedConfig*>(
      &from));
}

void FtraceConfig_CompactSchedConfig::MergeFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void FtraceConfig_CompactSchedConfig::CopyFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_CompactSchedConfig::IsInitialized() const {
  return true;
}

void FtraceConfig_CompactSchedConfig::InternalSwap(FtraceConfig_CompactSchedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string FtraceConfig_CompactSchedConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.CompactSchedConfig";
}


// ===================================================================

void FtraceConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_FtraceConfig_default_instance_._instance.get_mutable()->compact_sched_ = const_cast< ::perfetto::protos::FtraceConfig_CompactSchedConfig*>(
      ::perfetto::protos::FtraceConfig_CompactSchedConfig::internal_default_instance());
}
class FtraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig>()._has_bits_);
  static void set_has_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_drain_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched(const FtraceConfig* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbolize_ksyms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initialize_ksyms_synchronously_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::FtraceConfig_CompactSchedConfig&
FtraceConfig::_Internal::compact_sched(const FtraceConfig* msg) {
  return *msg->compact_sched_;
}
FtraceConfig::FtraceConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceConfig)
}
FtraceConfig::FtraceConfig(const FtraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ftrace_events_(from.ftrace_events_),
      atrace_categories_(from.atrace_categories_),
      atrace_apps_(from.atrace_apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compact_sched()) {
    compact_sched_ = new ::perfetto::protos::FtraceConfig_CompactSchedConfig(*from.compact_sched_);
  } else {
    compact_sched_ = nullptr;
  }
  ::memcpy(&symbolize_ksyms_, &from.symbolize_ksyms_,
    static_cast<size_t>(reinterpret_cast<char*>(&drain_period_ms_) -
    reinterpret_cast<char*>(&symbolize_ksyms_)) + sizeof(drain_period_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig)
}

void FtraceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&compact_sched_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drain_period_ms_) -
      reinterpret_cast<char*>(&compact_sched_)) + sizeof(drain_period_ms_));
}

FtraceConfig::~FtraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig)
  SharedDtor();
}

void FtraceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete compact_sched_;
}

void FtraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceConfig& FtraceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FtraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftrace_events_.Clear();
  atrace_categories_.Clear();
  atrace_apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compact_sched_ != nullptr);
    compact_sched_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&symbolize_ksyms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drain_period_ms_) -
        reinterpret_cast<char*>(&symbolize_ksyms_)) + sizeof(drain_period_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_ftrace_events(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string atrace_categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_atrace_categories(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string atrace_apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_atrace_apps(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional uint32 buffer_size_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_buffer_size_kb(&has_bits);
          buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drain_period_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_drain_period_ms(&has_bits);
          drain_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool symbolize_ksyms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_symbolize_ksyms(&has_bits);
          symbolize_ksyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initialize_ksyms_synchronously_for_testing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_initialize_ksyms_synchronously_for_testing(&has_bits);
          initialize_ksyms_synchronously_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ftrace_events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_ftrace_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string atrace_categories = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_atrace_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string atrace_apps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_atrace_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buffer_size_kb = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_buffer_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drain_period_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_drain_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drain_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_sched()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool symbolize_ksyms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_symbolize_ksyms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symbolize_ksyms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initialize_ksyms_synchronously_for_testing = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_initialize_ksyms_synchronously_for_testing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_ksyms_synchronously_for_testing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  for (int i = 0, n = this->ftrace_events_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->ftrace_events(i), output);
  }

  // repeated string atrace_categories = 2;
  for (int i = 0, n = this->atrace_categories_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->atrace_categories(i), output);
  }

  // repeated string atrace_apps = 3;
  for (int i = 0, n = this->atrace_apps_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->atrace_apps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 buffer_size_kb = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->buffer_size_kb(), output);
  }

  // optional uint32 drain_period_ms = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->drain_period_ms(), output);
  }

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::compact_sched(this), output);
  }

  // optional bool symbolize_ksyms = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->symbolize_ksyms(), output);
  }

  // optional bool initialize_ksyms_synchronously_for_testing = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->initialize_ksyms_synchronously_for_testing(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceConfig)
}

size_t FtraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->ftrace_events_size());
  for (int i = 0, n = this->ftrace_events_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->ftrace_events(i));
  }

  // repeated string atrace_categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->atrace_categories_size());
  for (int i = 0, n = this->atrace_categories_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->atrace_categories(i));
  }

  // repeated string atrace_apps = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->atrace_apps_size());
  for (int i = 0, n = this->atrace_apps_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->atrace_apps(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compact_sched_);
    }

    // optional bool symbolize_ksyms = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool initialize_ksyms_synchronously_for_testing = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 buffer_size_kb = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->buffer_size_kb());
    }

    // optional uint32 drain_period_ms = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->drain_period_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceConfig*>(
      &from));
}

void FtraceConfig::MergeFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ftrace_events_.MergeFrom(from.ftrace_events_);
  atrace_categories_.MergeFrom(from.atrace_categories_);
  atrace_apps_.MergeFrom(from.atrace_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_compact_sched()->::perfetto::protos::FtraceConfig_CompactSchedConfig::MergeFrom(from.compact_sched());
    }
    if (cached_has_bits & 0x00000002u) {
      symbolize_ksyms_ = from.symbolize_ksyms_;
    }
    if (cached_has_bits & 0x00000004u) {
      initialize_ksyms_synchronously_for_testing_ = from.initialize_ksyms_synchronously_for_testing_;
    }
    if (cached_has_bits & 0x00000008u) {
      buffer_size_kb_ = from.buffer_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      drain_period_ms_ = from.drain_period_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FtraceConfig::CopyFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig::IsInitialized() const {
  return true;
}

void FtraceConfig::InternalSwap(FtraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ftrace_events_.InternalSwap(CastToBase(&other->ftrace_events_));
  atrace_categories_.InternalSwap(CastToBase(&other->atrace_categories_));
  atrace_apps_.InternalSwap(CastToBase(&other->atrace_apps_));
  swap(compact_sched_, other->compact_sched_);
  swap(symbolize_ksyms_, other->symbolize_ksyms_);
  swap(initialize_ksyms_synchronously_for_testing_, other->initialize_ksyms_synchronously_for_testing_);
  swap(buffer_size_kb_, other->buffer_size_kb_);
  swap(drain_period_ms_, other->drain_period_ms_);
}

std::string FtraceConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig";
}


// ===================================================================

void GpuCounterConfig::InitAsDefaultInstance() {
}
class GpuCounterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterConfig>()._has_bits_);
  static void set_has_counter_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instrumented_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fix_gpu_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpuCounterConfig::GpuCounterConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterConfig)
}
GpuCounterConfig::GpuCounterConfig(const GpuCounterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counter_ids_(from.counter_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&counter_period_ns_, &from.counter_period_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&fix_gpu_clock_) -
    reinterpret_cast<char*>(&counter_period_ns_)) + sizeof(fix_gpu_clock_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterConfig)
}

void GpuCounterConfig::SharedCtor() {
  ::memset(&counter_period_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_gpu_clock_) -
      reinterpret_cast<char*>(&counter_period_ns_)) + sizeof(fix_gpu_clock_));
}

GpuCounterConfig::~GpuCounterConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterConfig)
  SharedDtor();
}

void GpuCounterConfig::SharedDtor() {
}

void GpuCounterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterConfig& GpuCounterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counter_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&counter_period_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fix_gpu_clock_) -
        reinterpret_cast<char*>(&counter_period_ns_)) + sizeof(fix_gpu_clock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 counter_period_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_counter_period_ns(&has_bits);
          counter_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 counter_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_counter_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_counter_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool instrumented_sampling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_instrumented_sampling(&has_bits);
          instrumented_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fix_gpu_clock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fix_gpu_clock(&has_bits);
          fix_gpu_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 counter_period_ns = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_counter_period_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_period_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 counter_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_counter_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool instrumented_sampling = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_instrumented_sampling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instrumented_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fix_gpu_clock = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_fix_gpu_clock(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fix_gpu_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 counter_period_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->counter_period_ns(), output);
  }

  // repeated uint32 counter_ids = 2;
  for (int i = 0, n = this->counter_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->counter_ids(i), output);
  }

  // optional bool instrumented_sampling = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->instrumented_sampling(), output);
  }

  // optional bool fix_gpu_clock = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->fix_gpu_clock(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterConfig)
}

size_t GpuCounterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counter_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->counter_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->counter_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 counter_period_ns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->counter_period_ns());
    }

    // optional bool instrumented_sampling = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool fix_gpu_clock = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterConfig*>(
      &from));
}

void GpuCounterConfig::MergeFrom(const GpuCounterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counter_ids_.MergeFrom(from.counter_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      counter_period_ns_ = from.counter_period_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      instrumented_sampling_ = from.instrumented_sampling_;
    }
    if (cached_has_bits & 0x00000004u) {
      fix_gpu_clock_ = from.fix_gpu_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterConfig::CopyFrom(const GpuCounterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterConfig::IsInitialized() const {
  return true;
}

void GpuCounterConfig::InternalSwap(GpuCounterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counter_ids_.InternalSwap(&other->counter_ids_);
  swap(counter_period_ns_, other->counter_period_ns_);
  swap(instrumented_sampling_, other->instrumented_sampling_);
  swap(fix_gpu_clock_, other->fix_gpu_clock_);
}

std::string GpuCounterConfig::GetTypeName() const {
  return "perfetto.protos.GpuCounterConfig";
}


// ===================================================================

void VulkanMemoryConfig::InitAsDefaultInstance() {
}
class VulkanMemoryConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryConfig>()._has_bits_);
  static void set_has_track_driver_memory_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_device_memory_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VulkanMemoryConfig::VulkanMemoryConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.VulkanMemoryConfig)
}
VulkanMemoryConfig::VulkanMemoryConfig(const VulkanMemoryConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&track_driver_memory_usage_, &from.track_driver_memory_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&track_device_memory_usage_) -
    reinterpret_cast<char*>(&track_driver_memory_usage_)) + sizeof(track_device_memory_usage_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryConfig)
}

void VulkanMemoryConfig::SharedCtor() {
  ::memset(&track_driver_memory_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_device_memory_usage_) -
      reinterpret_cast<char*>(&track_driver_memory_usage_)) + sizeof(track_device_memory_usage_));
}

VulkanMemoryConfig::~VulkanMemoryConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryConfig)
  SharedDtor();
}

void VulkanMemoryConfig::SharedDtor() {
}

void VulkanMemoryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VulkanMemoryConfig& VulkanMemoryConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VulkanMemoryConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VulkanMemoryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&track_driver_memory_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_device_memory_usage_) -
      reinterpret_cast<char*>(&track_driver_memory_usage_)) + sizeof(track_device_memory_usage_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VulkanMemoryConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool track_driver_memory_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_track_driver_memory_usage(&has_bits);
          track_driver_memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool track_device_memory_usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_track_device_memory_usage(&has_bits);
          track_device_memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VulkanMemoryConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.VulkanMemoryConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool track_driver_memory_usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_track_driver_memory_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_driver_memory_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool track_device_memory_usage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_track_device_memory_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_device_memory_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.VulkanMemoryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.VulkanMemoryConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VulkanMemoryConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.VulkanMemoryConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool track_driver_memory_usage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->track_driver_memory_usage(), output);
  }

  // optional bool track_device_memory_usage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->track_device_memory_usage(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.VulkanMemoryConfig)
}

size_t VulkanMemoryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool track_driver_memory_usage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool track_device_memory_usage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanMemoryConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VulkanMemoryConfig*>(
      &from));
}

void VulkanMemoryConfig::MergeFrom(const VulkanMemoryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      track_driver_memory_usage_ = from.track_driver_memory_usage_;
    }
    if (cached_has_bits & 0x00000002u) {
      track_device_memory_usage_ = from.track_device_memory_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VulkanMemoryConfig::CopyFrom(const VulkanMemoryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryConfig::IsInitialized() const {
  return true;
}

void VulkanMemoryConfig::InternalSwap(VulkanMemoryConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(track_driver_memory_usage_, other->track_driver_memory_usage_);
  swap(track_device_memory_usage_, other->track_device_memory_usage_);
}

std::string VulkanMemoryConfig::GetTypeName() const {
  return "perfetto.protos.VulkanMemoryConfig";
}


// ===================================================================

void InodeFileConfig_MountPointMappingEntry::InitAsDefaultInstance() {
}
class InodeFileConfig_MountPointMappingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileConfig_MountPointMappingEntry>()._has_bits_);
  static void set_has_mountpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InodeFileConfig_MountPointMappingEntry::InodeFileConfig_MountPointMappingEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
}
InodeFileConfig_MountPointMappingEntry::InodeFileConfig_MountPointMappingEntry(const InodeFileConfig_MountPointMappingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scan_roots_(from.scan_roots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mountpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mountpoint()) {
    mountpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mountpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
}

void InodeFileConfig_MountPointMappingEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  mountpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InodeFileConfig_MountPointMappingEntry::~InodeFileConfig_MountPointMappingEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  SharedDtor();
}

void InodeFileConfig_MountPointMappingEntry::SharedDtor() {
  mountpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InodeFileConfig_MountPointMappingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InodeFileConfig_MountPointMappingEntry& InodeFileConfig_MountPointMappingEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InodeFileConfig_MountPointMappingEntry_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void InodeFileConfig_MountPointMappingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scan_roots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mountpoint_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InodeFileConfig_MountPointMappingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mountpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mountpoint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scan_roots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_scan_roots(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InodeFileConfig_MountPointMappingEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mountpoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mountpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scan_roots = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_scan_roots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InodeFileConfig_MountPointMappingEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mountpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mountpoint(), output);
  }

  // repeated string scan_roots = 2;
  for (int i = 0, n = this->scan_roots_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->scan_roots(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
}

size_t InodeFileConfig_MountPointMappingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scan_roots = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->scan_roots_size());
  for (int i = 0, n = this->scan_roots_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->scan_roots(i));
  }

  // optional string mountpoint = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mountpoint());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileConfig_MountPointMappingEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InodeFileConfig_MountPointMappingEntry*>(
      &from));
}

void InodeFileConfig_MountPointMappingEntry::MergeFrom(const InodeFileConfig_MountPointMappingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scan_roots_.MergeFrom(from.scan_roots_);
  if (from.has_mountpoint()) {
    _has_bits_[0] |= 0x00000001u;
    mountpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mountpoint_);
  }
}

void InodeFileConfig_MountPointMappingEntry::CopyFrom(const InodeFileConfig_MountPointMappingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileConfig_MountPointMappingEntry::IsInitialized() const {
  return true;
}

void InodeFileConfig_MountPointMappingEntry::InternalSwap(InodeFileConfig_MountPointMappingEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scan_roots_.InternalSwap(CastToBase(&other->scan_roots_));
  mountpoint_.Swap(&other->mountpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string InodeFileConfig_MountPointMappingEntry::GetTypeName() const {
  return "perfetto.protos.InodeFileConfig.MountPointMappingEntry";
}


// ===================================================================

void InodeFileConfig::InitAsDefaultInstance() {
}
class InodeFileConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileConfig>()._has_bits_);
  static void set_has_scan_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scan_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scan_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_do_not_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

InodeFileConfig::InodeFileConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.InodeFileConfig)
}
InodeFileConfig::InodeFileConfig(const InodeFileConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scan_mount_points_(from.scan_mount_points_),
      mount_point_mapping_(from.mount_point_mapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scan_interval_ms_, &from.scan_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&do_not_scan_) -
    reinterpret_cast<char*>(&scan_interval_ms_)) + sizeof(do_not_scan_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileConfig)
}

void InodeFileConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&scan_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_not_scan_) -
      reinterpret_cast<char*>(&scan_interval_ms_)) + sizeof(do_not_scan_));
}

InodeFileConfig::~InodeFileConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileConfig)
  SharedDtor();
}

void InodeFileConfig::SharedDtor() {
}

void InodeFileConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InodeFileConfig& InodeFileConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InodeFileConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void InodeFileConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scan_mount_points_.Clear();
  mount_point_mapping_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&scan_interval_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&do_not_scan_) -
        reinterpret_cast<char*>(&scan_interval_ms_)) + sizeof(do_not_scan_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InodeFileConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 scan_interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scan_interval_ms(&has_bits);
          scan_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scan_delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scan_delay_ms(&has_bits);
          scan_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scan_batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scan_batch_size(&has_bits);
          scan_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_not_scan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_do_not_scan(&has_bits);
          do_not_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scan_mount_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_scan_mount_points(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mount_point_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InodeFileConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.InodeFileConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 scan_interval_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_scan_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scan_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scan_delay_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_scan_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scan_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scan_batch_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_scan_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scan_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_not_scan = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_do_not_scan(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_scan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scan_mount_points = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_scan_mount_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mount_point_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.InodeFileConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.InodeFileConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InodeFileConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.InodeFileConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 scan_interval_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->scan_interval_ms(), output);
  }

  // optional uint32 scan_delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->scan_delay_ms(), output);
  }

  // optional uint32 scan_batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->scan_batch_size(), output);
  }

  // optional bool do_not_scan = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->do_not_scan(), output);
  }

  // repeated string scan_mount_points = 5;
  for (int i = 0, n = this->scan_mount_points_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->scan_mount_points(i), output);
  }

  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mount_point_mapping_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->mount_point_mapping(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.InodeFileConfig)
}

size_t InodeFileConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scan_mount_points = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->scan_mount_points_size());
  for (int i = 0, n = this->scan_mount_points_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->scan_mount_points(i));
  }

  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mount_point_mapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mount_point_mapping(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 scan_interval_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->scan_interval_ms());
    }

    // optional uint32 scan_delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->scan_delay_ms());
    }

    // optional uint32 scan_batch_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->scan_batch_size());
    }

    // optional bool do_not_scan = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InodeFileConfig*>(
      &from));
}

void InodeFileConfig::MergeFrom(const InodeFileConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scan_mount_points_.MergeFrom(from.scan_mount_points_);
  mount_point_mapping_.MergeFrom(from.mount_point_mapping_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      scan_interval_ms_ = from.scan_interval_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      scan_delay_ms_ = from.scan_delay_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      scan_batch_size_ = from.scan_batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      do_not_scan_ = from.do_not_scan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InodeFileConfig::CopyFrom(const InodeFileConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileConfig::IsInitialized() const {
  return true;
}

void InodeFileConfig::InternalSwap(InodeFileConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scan_mount_points_.InternalSwap(CastToBase(&other->scan_mount_points_));
  CastToBase(&mount_point_mapping_)->InternalSwap(CastToBase(&other->mount_point_mapping_));
  swap(scan_interval_ms_, other->scan_interval_ms_);
  swap(scan_delay_ms_, other->scan_delay_ms_);
  swap(scan_batch_size_, other->scan_batch_size_);
  swap(do_not_scan_, other->do_not_scan_);
}

std::string InodeFileConfig::GetTypeName() const {
  return "perfetto.protos.InodeFileConfig";
}


// ===================================================================

void ConsoleConfig::InitAsDefaultInstance() {
}
class ConsoleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsoleConfig>()._has_bits_);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_colors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConsoleConfig::ConsoleConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ConsoleConfig)
}
ConsoleConfig::ConsoleConfig(const ConsoleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_, &from.output_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_colors_) -
    reinterpret_cast<char*>(&output_)) + sizeof(enable_colors_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ConsoleConfig)
}

void ConsoleConfig::SharedCtor() {
  ::memset(&output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_colors_) -
      reinterpret_cast<char*>(&output_)) + sizeof(enable_colors_));
}

ConsoleConfig::~ConsoleConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ConsoleConfig)
  SharedDtor();
}

void ConsoleConfig::SharedDtor() {
}

void ConsoleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsoleConfig& ConsoleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsoleConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ConsoleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ConsoleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_colors_) -
        reinterpret_cast<char*>(&output_)) + sizeof(enable_colors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsoleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ConsoleConfig.Output output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ConsoleConfig_Output_IsValid(val))) {
            set_output(static_cast<::perfetto::protos::ConsoleConfig_Output>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enable_colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_colors(&has_bits);
          enable_colors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsoleConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ConsoleConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ConsoleConfig.Output output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ConsoleConfig_Output_IsValid(value)) {
            set_output(static_cast< ::perfetto::protos::ConsoleConfig_Output >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_colors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_enable_colors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_colors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ConsoleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ConsoleConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsoleConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ConsoleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ConsoleConfig.Output output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->output(), output);
  }

  // optional bool enable_colors = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->enable_colors(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ConsoleConfig)
}

size_t ConsoleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ConsoleConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.ConsoleConfig.Output output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->output());
    }

    // optional bool enable_colors = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsoleConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConsoleConfig*>(
      &from));
}

void ConsoleConfig::MergeFrom(const ConsoleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ConsoleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      output_ = from.output_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_colors_ = from.enable_colors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConsoleConfig::CopyFrom(const ConsoleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ConsoleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsoleConfig::IsInitialized() const {
  return true;
}

void ConsoleConfig::InternalSwap(ConsoleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_, other->output_);
  swap(enable_colors_, other->enable_colors_);
}

std::string ConsoleConfig::GetTypeName() const {
  return "perfetto.protos.ConsoleConfig";
}


// ===================================================================

void InterceptorConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_InterceptorConfig_default_instance_._instance.get_mutable()->console_config_ = const_cast< ::perfetto::protos::ConsoleConfig*>(
      ::perfetto::protos::ConsoleConfig::internal_default_instance());
}
class InterceptorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InterceptorConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ConsoleConfig& console_config(const InterceptorConfig* msg);
  static void set_has_console_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ConsoleConfig&
InterceptorConfig::_Internal::console_config(const InterceptorConfig* msg) {
  return *msg->console_config_;
}
InterceptorConfig::InterceptorConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.InterceptorConfig)
}
InterceptorConfig::InterceptorConfig(const InterceptorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_console_config()) {
    console_config_ = new ::perfetto::protos::ConsoleConfig(*from.console_config_);
  } else {
    console_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InterceptorConfig)
}

void InterceptorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  console_config_ = nullptr;
}

InterceptorConfig::~InterceptorConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InterceptorConfig)
  SharedDtor();
}

void InterceptorConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_config_;
}

void InterceptorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterceptorConfig& InterceptorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterceptorConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void InterceptorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InterceptorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(console_config_ != nullptr);
      console_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InterceptorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_console_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InterceptorConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.InterceptorConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_console_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.InterceptorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.InterceptorConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InterceptorConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.InterceptorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      100, _Internal::console_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.InterceptorConfig)
}

size_t InterceptorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InterceptorConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .perfetto.protos.ConsoleConfig console_config = 100 [lazy = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *console_config_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterceptorConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InterceptorConfig*>(
      &from));
}

void InterceptorConfig::MergeFrom(const InterceptorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InterceptorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_console_config()->::perfetto::protos::ConsoleConfig::MergeFrom(from.console_config());
    }
  }
}

void InterceptorConfig::CopyFrom(const InterceptorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InterceptorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterceptorConfig::IsInitialized() const {
  return true;
}

void InterceptorConfig::InternalSwap(InterceptorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(console_config_, other->console_config_);
}

std::string InterceptorConfig::GetTypeName() const {
  return "perfetto.protos.InterceptorConfig";
}


// ===================================================================

void AndroidPowerConfig::InitAsDefaultInstance() {
}
class AndroidPowerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidPowerConfig>()._has_bits_);
  static void set_has_battery_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collect_power_rails(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidPowerConfig::AndroidPowerConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.AndroidPowerConfig)
}
AndroidPowerConfig::AndroidPowerConfig(const AndroidPowerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      battery_counters_(from.battery_counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_poll_ms_, &from.battery_poll_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_power_rails_) -
    reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidPowerConfig)
}

void AndroidPowerConfig::SharedCtor() {
  ::memset(&battery_poll_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_power_rails_) -
      reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
}

AndroidPowerConfig::~AndroidPowerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidPowerConfig)
  SharedDtor();
}

void AndroidPowerConfig::SharedDtor() {
}

void AndroidPowerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidPowerConfig& AndroidPowerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidPowerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AndroidPowerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidPowerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_counters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&battery_poll_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collect_power_rails_) -
        reinterpret_cast<char*>(&battery_poll_ms_)) + sizeof(collect_power_rails_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidPowerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battery_poll_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battery_poll_ms(&has_bits);
          battery_poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(val))) {
              add_battery_counters(static_cast<::perfetto::protos::AndroidPowerConfig_BatteryCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_battery_counters(), ptr, ctx, ::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool collect_power_rails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_collect_power_rails(&has_bits);
          collect_power_rails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidPowerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.AndroidPowerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battery_poll_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_battery_poll_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_poll_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(value)) {
            add_battery_counters(static_cast< ::perfetto::protos::AndroidPowerConfig_BatteryCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid,
                 &unknown_fields_stream,
                 this->mutable_battery_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool collect_power_rails = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_collect_power_rails(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collect_power_rails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.AndroidPowerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.AndroidPowerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidPowerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.AndroidPowerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battery_poll_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->battery_poll_ms(), output);
  }

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  for (int i = 0, n = this->battery_counters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->battery_counters(i), output);
  }

  // optional bool collect_power_rails = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->collect_power_rails(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.AndroidPowerConfig)
}

size_t AndroidPowerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidPowerConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->battery_counters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->battery_counters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 battery_poll_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->battery_poll_ms());
    }

    // optional bool collect_power_rails = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidPowerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidPowerConfig*>(
      &from));
}

void AndroidPowerConfig::MergeFrom(const AndroidPowerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidPowerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_counters_.MergeFrom(from.battery_counters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      battery_poll_ms_ = from.battery_poll_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      collect_power_rails_ = from.collect_power_rails_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AndroidPowerConfig::CopyFrom(const AndroidPowerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidPowerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidPowerConfig::IsInitialized() const {
  return true;
}

void AndroidPowerConfig::InternalSwap(AndroidPowerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battery_counters_.InternalSwap(&other->battery_counters_);
  swap(battery_poll_ms_, other->battery_poll_ms_);
  swap(collect_power_rails_, other->collect_power_rails_);
}

std::string AndroidPowerConfig::GetTypeName() const {
  return "perfetto.protos.AndroidPowerConfig";
}


// ===================================================================

void ProcessStatsConfig::InitAsDefaultInstance() {
}
class ProcessStatsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStatsConfig>()._has_bits_);
  static void set_has_scan_all_processes_on_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_record_thread_names(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proc_stats_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proc_stats_cache_ttl_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_record_thread_time_in_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thread_time_in_state_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProcessStatsConfig::ProcessStatsConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ProcessStatsConfig)
}
ProcessStatsConfig::ProcessStatsConfig(const ProcessStatsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      quirks_(from.quirks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&proc_stats_poll_ms_, &from.proc_stats_poll_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_time_in_state_cache_size_) -
    reinterpret_cast<char*>(&proc_stats_poll_ms_)) + sizeof(thread_time_in_state_cache_size_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStatsConfig)
}

void ProcessStatsConfig::SharedCtor() {
  ::memset(&proc_stats_poll_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_time_in_state_cache_size_) -
      reinterpret_cast<char*>(&proc_stats_poll_ms_)) + sizeof(thread_time_in_state_cache_size_));
}

ProcessStatsConfig::~ProcessStatsConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStatsConfig)
  SharedDtor();
}

void ProcessStatsConfig::SharedDtor() {
}

void ProcessStatsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessStatsConfig& ProcessStatsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ProcessStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStatsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quirks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&proc_stats_poll_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_time_in_state_cache_size_) -
        reinterpret_cast<char*>(&proc_stats_poll_ms_)) + sizeof(thread_time_in_state_cache_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessStatsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(val))) {
              add_quirks(static_cast<::perfetto::protos::ProcessStatsConfig_Quirks>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_quirks(), ptr, ctx, ::perfetto::protos::ProcessStatsConfig_Quirks_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scan_all_processes_on_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scan_all_processes_on_start(&has_bits);
          scan_all_processes_on_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool record_thread_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_record_thread_names(&has_bits);
          record_thread_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 proc_stats_poll_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_proc_stats_poll_ms(&has_bits);
          proc_stats_poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 proc_stats_cache_ttl_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_proc_stats_cache_ttl_ms(&has_bits);
          proc_stats_cache_ttl_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool record_thread_time_in_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_record_thread_time_in_state(&has_bits);
          record_thread_time_in_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thread_time_in_state_cache_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_thread_time_in_state_cache_size(&has_bits);
          thread_time_in_state_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessStatsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ProcessStatsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value)) {
            add_quirks(static_cast< ::perfetto::protos::ProcessStatsConfig_Quirks >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::perfetto::protos::ProcessStatsConfig_Quirks_IsValid,
                 &unknown_fields_stream,
                 this->mutable_quirks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scan_all_processes_on_start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_scan_all_processes_on_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_all_processes_on_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool record_thread_names = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_record_thread_names(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_thread_names_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 proc_stats_poll_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_proc_stats_poll_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_stats_poll_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 proc_stats_cache_ttl_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_proc_stats_cache_ttl_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_stats_cache_ttl_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool record_thread_time_in_state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_record_thread_time_in_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_thread_time_in_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thread_time_in_state_cache_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_thread_time_in_state_cache_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_time_in_state_cache_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ProcessStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ProcessStatsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessStatsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ProcessStatsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  for (int i = 0, n = this->quirks_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->quirks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool scan_all_processes_on_start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->scan_all_processes_on_start(), output);
  }

  // optional bool record_thread_names = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->record_thread_names(), output);
  }

  // optional uint32 proc_stats_poll_ms = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->proc_stats_poll_ms(), output);
  }

  // optional uint32 proc_stats_cache_ttl_ms = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->proc_stats_cache_ttl_ms(), output);
  }

  // optional bool record_thread_time_in_state = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->record_thread_time_in_state(), output);
  }

  // optional uint32 thread_time_in_state_cache_size = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->thread_time_in_state_cache_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ProcessStatsConfig)
}

size_t ProcessStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStatsConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->quirks_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->quirks(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 proc_stats_poll_ms = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->proc_stats_poll_ms());
    }

    // optional bool scan_all_processes_on_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool record_thread_names = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool record_thread_time_in_state = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 proc_stats_cache_ttl_ms = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->proc_stats_cache_ttl_ms());
    }

    // optional uint32 thread_time_in_state_cache_size = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->thread_time_in_state_cache_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStatsConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProcessStatsConfig*>(
      &from));
}

void ProcessStatsConfig::MergeFrom(const ProcessStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quirks_.MergeFrom(from.quirks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      proc_stats_poll_ms_ = from.proc_stats_poll_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      scan_all_processes_on_start_ = from.scan_all_processes_on_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      record_thread_names_ = from.record_thread_names_;
    }
    if (cached_has_bits & 0x00000008u) {
      record_thread_time_in_state_ = from.record_thread_time_in_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      proc_stats_cache_ttl_ms_ = from.proc_stats_cache_ttl_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      thread_time_in_state_cache_size_ = from.thread_time_in_state_cache_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessStatsConfig::CopyFrom(const ProcessStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatsConfig::IsInitialized() const {
  return true;
}

void ProcessStatsConfig::InternalSwap(ProcessStatsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quirks_.InternalSwap(&other->quirks_);
  swap(proc_stats_poll_ms_, other->proc_stats_poll_ms_);
  swap(scan_all_processes_on_start_, other->scan_all_processes_on_start_);
  swap(record_thread_names_, other->record_thread_names_);
  swap(record_thread_time_in_state_, other->record_thread_time_in_state_);
  swap(proc_stats_cache_ttl_ms_, other->proc_stats_cache_ttl_ms_);
  swap(thread_time_in_state_cache_size_, other->thread_time_in_state_cache_size_);
}

std::string ProcessStatsConfig::GetTypeName() const {
  return "perfetto.protos.ProcessStatsConfig";
}


// ===================================================================

void HeapprofdConfig_ContinuousDumpConfig::InitAsDefaultInstance() {
}
class HeapprofdConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig_ContinuousDumpConfig>()._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}
HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dump_phase_ms_, &from.dump_phase_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_interval_ms_) -
    reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

void HeapprofdConfig_ContinuousDumpConfig::SharedCtor() {
  ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_interval_ms_) -
      reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
}

HeapprofdConfig_ContinuousDumpConfig::~HeapprofdConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  SharedDtor();
}

void HeapprofdConfig_ContinuousDumpConfig::SharedDtor() {
}

void HeapprofdConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeapprofdConfig_ContinuousDumpConfig& HeapprofdConfig_ContinuousDumpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HeapprofdConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_interval_ms_) -
        reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeapprofdConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dump_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeapprofdConfig_ContinuousDumpConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dump_phase_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dump_phase_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_phase_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dump_interval_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_dump_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeapprofdConfig_ContinuousDumpConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dump_phase_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->dump_phase_ms(), output);
  }

  // optional uint32 dump_interval_ms = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->dump_interval_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

size_t HeapprofdConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dump_phase_ms = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_interval_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig_ContinuousDumpConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HeapprofdConfig_ContinuousDumpConfig*>(
      &from));
}

void HeapprofdConfig_ContinuousDumpConfig::MergeFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dump_phase_ms_ = from.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dump_interval_ms_ = from.dump_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeapprofdConfig_ContinuousDumpConfig::CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig_ContinuousDumpConfig::InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dump_phase_ms_, other->dump_phase_ms_);
  swap(dump_interval_ms_, other->dump_interval_ms_);
}

std::string HeapprofdConfig_ContinuousDumpConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig.ContinuousDumpConfig";
}


// ===================================================================

void HeapprofdConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_HeapprofdConfig_default_instance_._instance.get_mutable()->continuous_dump_config_ = const_cast< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*>(
      ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::internal_default_instance());
}
class HeapprofdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig>()._has_bits_);
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adaptive_sampling_shmem_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_adaptive_sampling_max_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_stream_allocations(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_heaps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_anonymous_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_heapprofd_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_heapprofd_cpu_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config(const HeapprofdConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_block_client_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_no_running(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dump_at_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_fork_teardown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_vfork_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig&
HeapprofdConfig::_Internal::continuous_dump_config(const HeapprofdConfig* msg) {
  return *msg->continuous_dump_config_;
}
HeapprofdConfig::HeapprofdConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.HeapprofdConfig)
}
HeapprofdConfig::HeapprofdConfig(const HeapprofdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      process_cmdline_(from.process_cmdline_),
      pid_(from.pid_),
      skip_symbol_prefix_(from.skip_symbol_prefix_),
      heaps_(from.heaps_),
      heap_sampling_intervals_(from.heap_sampling_intervals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_continuous_dump_config()) {
    continuous_dump_config_ = new ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig(*from.continuous_dump_config_);
  } else {
    continuous_dump_config_ = nullptr;
  }
  ::memcpy(&sampling_interval_bytes_, &from.sampling_interval_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&adaptive_sampling_max_sampling_interval_bytes_) -
    reinterpret_cast<char*>(&sampling_interval_bytes_)) + sizeof(adaptive_sampling_max_sampling_interval_bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig)
}

void HeapprofdConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&continuous_dump_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adaptive_sampling_max_sampling_interval_bytes_) -
      reinterpret_cast<char*>(&continuous_dump_config_)) + sizeof(adaptive_sampling_max_sampling_interval_bytes_));
}

HeapprofdConfig::~HeapprofdConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig)
  SharedDtor();
}

void HeapprofdConfig::SharedDtor() {
  if (this != internal_default_instance()) delete continuous_dump_config_;
}

void HeapprofdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeapprofdConfig& HeapprofdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HeapprofdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_cmdline_.Clear();
  pid_.Clear();
  skip_symbol_prefix_.Clear();
  heaps_.Clear();
  heap_sampling_intervals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(continuous_dump_config_ != nullptr);
    continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&sampling_interval_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_client_timeout_us_) -
        reinterpret_cast<char*>(&sampling_interval_bytes_)) + sizeof(block_client_timeout_us_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&stream_allocations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_vfork_detection_) -
        reinterpret_cast<char*>(&stream_allocations_)) + sizeof(disable_vfork_detection_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&adaptive_sampling_shmem_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adaptive_sampling_max_sampling_interval_bytes_) -
        reinterpret_cast<char*>(&adaptive_sampling_shmem_threshold_)) + sizeof(adaptive_sampling_max_sampling_interval_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeapprofdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string process_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_process_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_all(&has_bits);
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string skip_symbol_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_skip_symbol_prefix(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional uint64 shmem_size_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shmem_size_bytes(&has_bits);
          shmem_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool block_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_block_client(&has_bits);
          block_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_startup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_no_startup(&has_bits);
          no_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_no_running(&has_bits);
          no_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dump_at_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dump_at_max(&has_bits);
          dump_at_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block_client_timeout_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_block_client_timeout_us(&has_bits);
          block_client_timeout_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_anonymous_memory_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_min_anonymous_memory_kb(&has_bits);
          min_anonymous_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heapprofd_memory_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_heapprofd_memory_kb(&has_bits);
          max_heapprofd_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_heapprofd_cpu_secs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_heapprofd_cpu_secs(&has_bits);
          max_heapprofd_cpu_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_fork_teardown = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_disable_fork_teardown(&has_bits);
          disable_fork_teardown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_vfork_detection = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_disable_vfork_detection(&has_bits);
          disable_vfork_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string heaps = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_heaps(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // optional bool all_heaps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_all_heaps(&has_bits);
          all_heaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 heap_sampling_intervals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_heap_sampling_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 432);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_heap_sampling_intervals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stream_allocations = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_stream_allocations(&has_bits);
          stream_allocations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 adaptive_sampling_shmem_threshold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_adaptive_sampling_shmem_threshold(&has_bits);
          adaptive_sampling_shmem_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_adaptive_sampling_max_sampling_interval_bytes(&has_bits);
          adaptive_sampling_max_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeapprofdConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.HeapprofdConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sampling_interval_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sampling_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string process_cmdline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_process_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_all(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_continuous_dump_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string skip_symbol_prefix = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_skip_symbol_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shmem_size_bytes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_shmem_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shmem_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool block_client = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_block_client(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_startup = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_no_startup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_startup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_running = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_no_running(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dump_at_max = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_dump_at_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_at_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_client_timeout_us = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_block_client_timeout_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_client_timeout_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_anonymous_memory_kb = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_min_anonymous_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_anonymous_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heapprofd_memory_kb = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_max_heapprofd_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heapprofd_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_heapprofd_cpu_secs = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_max_heapprofd_cpu_secs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_heapprofd_cpu_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_fork_teardown = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_disable_fork_teardown(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fork_teardown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_vfork_detection = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_disable_vfork_detection(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_vfork_detection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string heaps = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_heaps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_heaps = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_all_heaps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_heaps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 heap_sampling_intervals = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 176u, input, this->mutable_heap_sampling_intervals())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heap_sampling_intervals())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stream_allocations = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_stream_allocations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_allocations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 adaptive_sampling_shmem_threshold = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_adaptive_sampling_shmem_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adaptive_sampling_shmem_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_adaptive_sampling_max_sampling_interval_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adaptive_sampling_max_sampling_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.HeapprofdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.HeapprofdConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeapprofdConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.HeapprofdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sampling_interval_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sampling_interval_bytes(), output);
  }

  // repeated string process_cmdline = 2;
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->process_cmdline(i), output);
  }

  // repeated uint64 pid = 4;
  for (int i = 0, n = this->pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->pid(i), output);
  }

  // optional bool all = 5;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->all(), output);
  }

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::continuous_dump_config(this), output);
  }

  // repeated string skip_symbol_prefix = 7;
  for (int i = 0, n = this->skip_symbol_prefix_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->skip_symbol_prefix(i), output);
  }

  // optional uint64 shmem_size_bytes = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->shmem_size_bytes(), output);
  }

  // optional bool block_client = 9;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->block_client(), output);
  }

  // optional bool no_startup = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->no_startup(), output);
  }

  // optional bool no_running = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->no_running(), output);
  }

  // optional bool dump_at_max = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->dump_at_max(), output);
  }

  // optional uint32 block_client_timeout_us = 14;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->block_client_timeout_us(), output);
  }

  // optional uint32 min_anonymous_memory_kb = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->min_anonymous_memory_kb(), output);
  }

  // optional uint32 max_heapprofd_memory_kb = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->max_heapprofd_memory_kb(), output);
  }

  // optional uint64 max_heapprofd_cpu_secs = 17;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->max_heapprofd_cpu_secs(), output);
  }

  // optional bool disable_fork_teardown = 18;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->disable_fork_teardown(), output);
  }

  // optional bool disable_vfork_detection = 19;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->disable_vfork_detection(), output);
  }

  // repeated string heaps = 20;
  for (int i = 0, n = this->heaps_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      20, this->heaps(i), output);
  }

  // optional bool all_heaps = 21;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->all_heaps(), output);
  }

  // repeated uint64 heap_sampling_intervals = 22;
  for (int i = 0, n = this->heap_sampling_intervals_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      22, this->heap_sampling_intervals(i), output);
  }

  // optional bool stream_allocations = 23;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->stream_allocations(), output);
  }

  // optional uint64 adaptive_sampling_shmem_threshold = 24;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(24, this->adaptive_sampling_shmem_threshold(), output);
  }

  // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(25, this->adaptive_sampling_max_sampling_interval_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.HeapprofdConfig)
}

size_t HeapprofdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->process_cmdline_size());
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->process_cmdline(i));
  }

  // repeated uint64 pid = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->pid_size());
    total_size += data_size;
  }

  // repeated string skip_symbol_prefix = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->skip_symbol_prefix_size());
  for (int i = 0, n = this->skip_symbol_prefix_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->skip_symbol_prefix(i));
  }

  // repeated string heaps = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->heaps_size());
  for (int i = 0, n = this->heaps_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->heaps(i));
  }

  // repeated uint64 heap_sampling_intervals = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->heap_sampling_intervals_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->heap_sampling_intervals_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *continuous_dump_config_);
    }

    // optional uint64 sampling_interval_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sampling_interval_bytes());
    }

    // optional uint64 shmem_size_bytes = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->shmem_size_bytes());
    }

    // optional bool no_startup = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool no_running = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool dump_at_max = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool disable_fork_teardown = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 block_client_timeout_us = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_client_timeout_us());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool stream_allocations = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool all_heaps = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool all = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool block_client = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_anonymous_memory_kb = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min_anonymous_memory_kb());
    }

    // optional uint64 max_heapprofd_cpu_secs = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_heapprofd_cpu_secs());
    }

    // optional uint32 max_heapprofd_memory_kb = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_heapprofd_memory_kb());
    }

    // optional bool disable_vfork_detection = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint64 adaptive_sampling_shmem_threshold = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->adaptive_sampling_shmem_threshold());
    }

    // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->adaptive_sampling_max_sampling_interval_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HeapprofdConfig*>(
      &from));
}

void HeapprofdConfig::MergeFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_cmdline_.MergeFrom(from.process_cmdline_);
  pid_.MergeFrom(from.pid_);
  skip_symbol_prefix_.MergeFrom(from.skip_symbol_prefix_);
  heaps_.MergeFrom(from.heaps_);
  heap_sampling_intervals_.MergeFrom(from.heap_sampling_intervals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_continuous_dump_config()->::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::MergeFrom(from.continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      sampling_interval_bytes_ = from.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      shmem_size_bytes_ = from.shmem_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      no_startup_ = from.no_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_running_ = from.no_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      dump_at_max_ = from.dump_at_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      disable_fork_teardown_ = from.disable_fork_teardown_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_client_timeout_us_ = from.block_client_timeout_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      stream_allocations_ = from.stream_allocations_;
    }
    if (cached_has_bits & 0x00000200u) {
      all_heaps_ = from.all_heaps_;
    }
    if (cached_has_bits & 0x00000400u) {
      all_ = from.all_;
    }
    if (cached_has_bits & 0x00000800u) {
      block_client_ = from.block_client_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_anonymous_memory_kb_ = from.min_anonymous_memory_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_heapprofd_cpu_secs_ = from.max_heapprofd_cpu_secs_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_heapprofd_memory_kb_ = from.max_heapprofd_memory_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      disable_vfork_detection_ = from.disable_vfork_detection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      adaptive_sampling_shmem_threshold_ = from.adaptive_sampling_shmem_threshold_;
    }
    if (cached_has_bits & 0x00020000u) {
      adaptive_sampling_max_sampling_interval_bytes_ = from.adaptive_sampling_max_sampling_interval_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeapprofdConfig::CopyFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig::InternalSwap(HeapprofdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_cmdline_.InternalSwap(CastToBase(&other->process_cmdline_));
  pid_.InternalSwap(&other->pid_);
  skip_symbol_prefix_.InternalSwap(CastToBase(&other->skip_symbol_prefix_));
  heaps_.InternalSwap(CastToBase(&other->heaps_));
  heap_sampling_intervals_.InternalSwap(&other->heap_sampling_intervals_);
  swap(continuous_dump_config_, other->continuous_dump_config_);
  swap(sampling_interval_bytes_, other->sampling_interval_bytes_);
  swap(shmem_size_bytes_, other->shmem_size_bytes_);
  swap(no_startup_, other->no_startup_);
  swap(no_running_, other->no_running_);
  swap(dump_at_max_, other->dump_at_max_);
  swap(disable_fork_teardown_, other->disable_fork_teardown_);
  swap(block_client_timeout_us_, other->block_client_timeout_us_);
  swap(stream_allocations_, other->stream_allocations_);
  swap(all_heaps_, other->all_heaps_);
  swap(all_, other->all_);
  swap(block_client_, other->block_client_);
  swap(min_anonymous_memory_kb_, other->min_anonymous_memory_kb_);
  swap(max_heapprofd_cpu_secs_, other->max_heapprofd_cpu_secs_);
  swap(max_heapprofd_memory_kb_, other->max_heapprofd_memory_kb_);
  swap(disable_vfork_detection_, other->disable_vfork_detection_);
  swap(adaptive_sampling_shmem_threshold_, other->adaptive_sampling_shmem_threshold_);
  swap(adaptive_sampling_max_sampling_interval_bytes_, other->adaptive_sampling_max_sampling_interval_bytes_);
}

std::string HeapprofdConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig";
}


// ===================================================================

void JavaHprofConfig_ContinuousDumpConfig::InitAsDefaultInstance() {
}
class JavaHprofConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<JavaHprofConfig_ContinuousDumpConfig>()._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

JavaHprofConfig_ContinuousDumpConfig::JavaHprofConfig_ContinuousDumpConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
}
JavaHprofConfig_ContinuousDumpConfig::JavaHprofConfig_ContinuousDumpConfig(const JavaHprofConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dump_phase_ms_, &from.dump_phase_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_interval_ms_) -
    reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
}

void JavaHprofConfig_ContinuousDumpConfig::SharedCtor() {
  ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_interval_ms_) -
      reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
}

JavaHprofConfig_ContinuousDumpConfig::~JavaHprofConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  SharedDtor();
}

void JavaHprofConfig_ContinuousDumpConfig::SharedDtor() {
}

void JavaHprofConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JavaHprofConfig_ContinuousDumpConfig& JavaHprofConfig_ContinuousDumpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JavaHprofConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void JavaHprofConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_interval_ms_) -
        reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JavaHprofConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dump_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JavaHprofConfig_ContinuousDumpConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dump_phase_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_dump_phase_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_phase_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dump_interval_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_dump_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JavaHprofConfig_ContinuousDumpConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dump_phase_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->dump_phase_ms(), output);
  }

  // optional uint32 dump_interval_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->dump_interval_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
}

size_t JavaHprofConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dump_phase_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_interval_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JavaHprofConfig_ContinuousDumpConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JavaHprofConfig_ContinuousDumpConfig*>(
      &from));
}

void JavaHprofConfig_ContinuousDumpConfig::MergeFrom(const JavaHprofConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dump_phase_ms_ = from.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dump_interval_ms_ = from.dump_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JavaHprofConfig_ContinuousDumpConfig::CopyFrom(const JavaHprofConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JavaHprofConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void JavaHprofConfig_ContinuousDumpConfig::InternalSwap(JavaHprofConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dump_phase_ms_, other->dump_phase_ms_);
  swap(dump_interval_ms_, other->dump_interval_ms_);
}

std::string JavaHprofConfig_ContinuousDumpConfig::GetTypeName() const {
  return "perfetto.protos.JavaHprofConfig.ContinuousDumpConfig";
}


// ===================================================================

void JavaHprofConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_JavaHprofConfig_default_instance_._instance.get_mutable()->continuous_dump_config_ = const_cast< ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig*>(
      ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig::internal_default_instance());
}
class JavaHprofConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<JavaHprofConfig>()._has_bits_);
  static const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig& continuous_dump_config(const JavaHprofConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_anonymous_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dump_smaps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig&
JavaHprofConfig::_Internal::continuous_dump_config(const JavaHprofConfig* msg) {
  return *msg->continuous_dump_config_;
}
JavaHprofConfig::JavaHprofConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.JavaHprofConfig)
}
JavaHprofConfig::JavaHprofConfig(const JavaHprofConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      process_cmdline_(from.process_cmdline_),
      pid_(from.pid_),
      ignored_types_(from.ignored_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_continuous_dump_config()) {
    continuous_dump_config_ = new ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig(*from.continuous_dump_config_);
  } else {
    continuous_dump_config_ = nullptr;
  }
  ::memcpy(&min_anonymous_memory_kb_, &from.min_anonymous_memory_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_smaps_) -
    reinterpret_cast<char*>(&min_anonymous_memory_kb_)) + sizeof(dump_smaps_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.JavaHprofConfig)
}

void JavaHprofConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&continuous_dump_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_smaps_) -
      reinterpret_cast<char*>(&continuous_dump_config_)) + sizeof(dump_smaps_));
}

JavaHprofConfig::~JavaHprofConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.JavaHprofConfig)
  SharedDtor();
}

void JavaHprofConfig::SharedDtor() {
  if (this != internal_default_instance()) delete continuous_dump_config_;
}

void JavaHprofConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JavaHprofConfig& JavaHprofConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JavaHprofConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void JavaHprofConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.JavaHprofConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_cmdline_.Clear();
  pid_.Clear();
  ignored_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(continuous_dump_config_ != nullptr);
    continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_anonymous_memory_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_smaps_) -
        reinterpret_cast<char*>(&min_anonymous_memory_kb_)) + sizeof(dump_smaps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JavaHprofConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string process_cmdline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_process_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_anonymous_memory_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_anonymous_memory_kb(&has_bits);
          min_anonymous_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dump_smaps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dump_smaps(&has_bits);
          dump_smaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ignored_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_ignored_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JavaHprofConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.JavaHprofConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string process_cmdline = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_process_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_continuous_dump_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_anonymous_memory_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_min_anonymous_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_anonymous_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dump_smaps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dump_smaps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_smaps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ignored_types = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_ignored_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.JavaHprofConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.JavaHprofConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JavaHprofConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.JavaHprofConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string process_cmdline = 1;
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->process_cmdline(i), output);
  }

  // repeated uint64 pid = 2;
  for (int i = 0, n = this->pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      2, this->pid(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::continuous_dump_config(this), output);
  }

  // optional uint32 min_anonymous_memory_kb = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->min_anonymous_memory_kb(), output);
  }

  // optional bool dump_smaps = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->dump_smaps(), output);
  }

  // repeated string ignored_types = 6;
  for (int i = 0, n = this->ignored_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->ignored_types(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.JavaHprofConfig)
}

size_t JavaHprofConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.JavaHprofConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->process_cmdline_size());
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->process_cmdline(i));
  }

  // repeated uint64 pid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->pid_size());
    total_size += data_size;
  }

  // repeated string ignored_types = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->ignored_types_size());
  for (int i = 0, n = this->ignored_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->ignored_types(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *continuous_dump_config_);
    }

    // optional uint32 min_anonymous_memory_kb = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min_anonymous_memory_kb());
    }

    // optional bool dump_smaps = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JavaHprofConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JavaHprofConfig*>(
      &from));
}

void JavaHprofConfig::MergeFrom(const JavaHprofConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.JavaHprofConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_cmdline_.MergeFrom(from.process_cmdline_);
  pid_.MergeFrom(from.pid_);
  ignored_types_.MergeFrom(from.ignored_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_continuous_dump_config()->::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig::MergeFrom(from.continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_anonymous_memory_kb_ = from.min_anonymous_memory_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      dump_smaps_ = from.dump_smaps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JavaHprofConfig::CopyFrom(const JavaHprofConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.JavaHprofConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JavaHprofConfig::IsInitialized() const {
  return true;
}

void JavaHprofConfig::InternalSwap(JavaHprofConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_cmdline_.InternalSwap(CastToBase(&other->process_cmdline_));
  pid_.InternalSwap(&other->pid_);
  ignored_types_.InternalSwap(CastToBase(&other->ignored_types_));
  swap(continuous_dump_config_, other->continuous_dump_config_);
  swap(min_anonymous_memory_kb_, other->min_anonymous_memory_kb_);
  swap(dump_smaps_, other->dump_smaps_);
}

std::string JavaHprofConfig::GetTypeName() const {
  return "perfetto.protos.JavaHprofConfig";
}


// ===================================================================

void PerfEventConfig_Timebase::InitAsDefaultInstance() {
}
class PerfEventConfig_Timebase::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Timebase>()._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Tracepoint& tracepoint(const PerfEventConfig_Timebase* msg);
};

const ::perfetto::protos::PerfEventConfig_Tracepoint&
PerfEventConfig_Timebase::_Internal::tracepoint(const PerfEventConfig_Timebase* msg) {
  return *msg->event_.tracepoint_;
}
void PerfEventConfig_Timebase::set_allocated_tracepoint(::perfetto::protos::PerfEventConfig_Tracepoint* tracepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (tracepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracepoint, submessage_arena);
    }
    set_has_tracepoint();
    event_.tracepoint_ = tracepoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.Timebase.tracepoint)
}
PerfEventConfig_Timebase::PerfEventConfig_Timebase()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.Timebase)
}
PerfEventConfig_Timebase::PerfEventConfig_Timebase(const PerfEventConfig_Timebase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_interval();
  switch (from.interval_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  clear_has_event();
  switch (from.event_case()) {
    case kCounter: {
      set_counter(from.counter());
      break;
    }
    case kTracepoint: {
      mutable_tracepoint()->::perfetto::protos::PerfEventConfig_Tracepoint::MergeFrom(from.tracepoint());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Timebase)
}

void PerfEventConfig_Timebase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  clear_has_interval();
  clear_has_event();
}

PerfEventConfig_Timebase::~PerfEventConfig_Timebase() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Timebase)
  SharedDtor();
}

void PerfEventConfig_Timebase::SharedDtor() {
  if (has_interval()) {
    clear_interval();
  }
  if (has_event()) {
    clear_event();
  }
}

void PerfEventConfig_Timebase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_Timebase& PerfEventConfig_Timebase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_Timebase_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_Timebase::clear_interval() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEventConfig.Timebase)
  switch (interval_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case kPeriod: {
      // No need to clear
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERVAL_NOT_SET;
}

void PerfEventConfig_Timebase::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEventConfig.Timebase)
  switch (event_case()) {
    case kCounter: {
      // No need to clear
      break;
    }
    case kTracepoint: {
      delete event_.tracepoint_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EVENT_NOT_SET;
}


void PerfEventConfig_Timebase::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Timebase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_interval();
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_Timebase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_period(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tracepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.Counter counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEventConfig_Counter_IsValid(val))) {
            set_counter(static_cast<::perfetto::protos::PerfEventConfig_Counter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_Timebase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.Timebase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 period = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_interval();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_.period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 frequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_interval();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_.frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tracepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.Counter counter = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::PerfEventConfig_Counter_IsValid(value)) {
            set_counter(static_cast< ::perfetto::protos::PerfEventConfig_Counter >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.Timebase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.Timebase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_Timebase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.Timebase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (interval_case()) {
    case kPeriod:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->period(), output);
      break;
    case kFrequency:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->frequency(), output);
      break;
    default: ;
  }
  switch (event_case()) {
    case kTracepoint:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::tracepoint(this), output);
      break;
    case kCounter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        4, this->counter(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.Timebase)
}

size_t PerfEventConfig_Timebase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Timebase)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (interval_case()) {
    // optional uint64 frequency = 2;
    case kFrequency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->frequency());
      break;
    }
    // optional uint64 period = 1;
    case kPeriod: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (event_case()) {
    // optional .perfetto.protos.PerfEventConfig.Counter counter = 4;
    case kCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->counter());
      break;
    }
    // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 3;
    case kTracepoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.tracepoint_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Timebase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_Timebase*>(
      &from));
}

void PerfEventConfig_Timebase::MergeFrom(const PerfEventConfig_Timebase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Timebase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.interval_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (from.event_case()) {
    case kCounter: {
      set_counter(from.counter());
      break;
    }
    case kTracepoint: {
      mutable_tracepoint()->::perfetto::protos::PerfEventConfig_Tracepoint::MergeFrom(from.tracepoint());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void PerfEventConfig_Timebase::CopyFrom(const PerfEventConfig_Timebase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Timebase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Timebase::IsInitialized() const {
  return true;
}

void PerfEventConfig_Timebase::InternalSwap(PerfEventConfig_Timebase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interval_, other->interval_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string PerfEventConfig_Timebase::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Timebase";
}


// ===================================================================

void PerfEventConfig_CallstackSampling::InitAsDefaultInstance() {
  ::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_._instance.get_mutable()->scope_ = const_cast< ::perfetto::protos::PerfEventConfig_Scope*>(
      ::perfetto::protos::PerfEventConfig_Scope::internal_default_instance());
}
class PerfEventConfig_CallstackSampling::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_CallstackSampling>()._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Scope& scope(const PerfEventConfig_CallstackSampling* msg);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::PerfEventConfig_Scope&
PerfEventConfig_CallstackSampling::_Internal::scope(const PerfEventConfig_CallstackSampling* msg) {
  return *msg->scope_;
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scope()) {
    scope_ = new ::perfetto::protos::PerfEventConfig_Scope(*from.scope_);
  } else {
    scope_ = nullptr;
  }
  kernel_frames_ = from.kernel_frames_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}

void PerfEventConfig_CallstackSampling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_frames_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(kernel_frames_));
}

PerfEventConfig_CallstackSampling::~PerfEventConfig_CallstackSampling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.CallstackSampling)
  SharedDtor();
}

void PerfEventConfig_CallstackSampling::SharedDtor() {
  if (this != internal_default_instance()) delete scope_;
}

void PerfEventConfig_CallstackSampling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_CallstackSampling& PerfEventConfig_CallstackSampling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_CallstackSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scope_ != nullptr);
    scope_->Clear();
  }
  kernel_frames_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_CallstackSampling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_scope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_CallstackSampling::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kernel_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_kernel_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kernel_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.CallstackSampling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.CallstackSampling)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_CallstackSampling::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::scope(this), output);
  }

  // optional bool kernel_frames = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->kernel_frames(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.CallstackSampling)
}

size_t PerfEventConfig_CallstackSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_);
    }

    // optional bool kernel_frames = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_CallstackSampling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_CallstackSampling*>(
      &from));
}

void PerfEventConfig_CallstackSampling::MergeFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scope()->::perfetto::protos::PerfEventConfig_Scope::MergeFrom(from.scope());
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_frames_ = from.kernel_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig_CallstackSampling::CopyFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_CallstackSampling::IsInitialized() const {
  return true;
}

void PerfEventConfig_CallstackSampling::InternalSwap(PerfEventConfig_CallstackSampling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scope_, other->scope_);
  swap(kernel_frames_, other->kernel_frames_);
}

std::string PerfEventConfig_CallstackSampling::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.CallstackSampling";
}


// ===================================================================

void PerfEventConfig_Scope::InitAsDefaultInstance() {
}
class PerfEventConfig_Scope::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Scope>()._has_bits_);
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfEventConfig_Scope::PerfEventConfig_Scope()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.Scope)
}
PerfEventConfig_Scope::PerfEventConfig_Scope(const PerfEventConfig_Scope& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  additional_cmdline_count_ = from.additional_cmdline_count_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Scope)
}

void PerfEventConfig_Scope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  additional_cmdline_count_ = 0u;
}

PerfEventConfig_Scope::~PerfEventConfig_Scope() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Scope)
  SharedDtor();
}

void PerfEventConfig_Scope::SharedDtor() {
}

void PerfEventConfig_Scope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_Scope& PerfEventConfig_Scope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  additional_cmdline_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_Scope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 target_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_target_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_exclude_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_Scope::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.Scope)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 target_pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_target_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_cmdline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exclude_pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_exclude_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exclude_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_cmdline = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 additional_cmdline_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_additional_cmdline_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_cmdline_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.Scope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.Scope)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_Scope::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  for (int i = 0, n = this->target_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->target_pid(i), output);
  }

  // repeated string target_cmdline = 2;
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->target_cmdline(i), output);
  }

  // repeated int32 exclude_pid = 3;
  for (int i = 0, n = this->exclude_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->exclude_pid(i), output);
  }

  // repeated string exclude_cmdline = 4;
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->exclude_cmdline(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_cmdline_count = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->additional_cmdline_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.Scope)
}

size_t PerfEventConfig_Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Scope)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_cmdline_size());
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_cmdline(i));
  }

  // repeated int32 exclude_pid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_cmdline_size());
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_cmdline(i));
  }

  // optional uint32 additional_cmdline_count = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->additional_cmdline_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Scope::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_Scope*>(
      &from));
}

void PerfEventConfig_Scope::MergeFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  if (from.has_additional_cmdline_count()) {
    set_additional_cmdline_count(from.additional_cmdline_count());
  }
}

void PerfEventConfig_Scope::CopyFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Scope::IsInitialized() const {
  return true;
}

void PerfEventConfig_Scope::InternalSwap(PerfEventConfig_Scope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(CastToBase(&other->target_cmdline_));
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(CastToBase(&other->exclude_cmdline_));
  swap(additional_cmdline_count_, other->additional_cmdline_count_);
}

std::string PerfEventConfig_Scope::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Scope";
}


// ===================================================================

void PerfEventConfig_Tracepoint::InitAsDefaultInstance() {
}
class PerfEventConfig_Tracepoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Tracepoint>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfEventConfig_Tracepoint::PerfEventConfig_Tracepoint()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.Tracepoint)
}
PerfEventConfig_Tracepoint::PerfEventConfig_Tracepoint(const PerfEventConfig_Tracepoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Tracepoint)
}

void PerfEventConfig_Tracepoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PerfEventConfig_Tracepoint::~PerfEventConfig_Tracepoint() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Tracepoint)
  SharedDtor();
}

void PerfEventConfig_Tracepoint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerfEventConfig_Tracepoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_Tracepoint& PerfEventConfig_Tracepoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_Tracepoint_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_Tracepoint::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Tracepoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_Tracepoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_filter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_Tracepoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.Tracepoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.Tracepoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.Tracepoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_Tracepoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.Tracepoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.Tracepoint)
}

size_t PerfEventConfig_Tracepoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Tracepoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string filter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Tracepoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_Tracepoint*>(
      &from));
}

void PerfEventConfig_Tracepoint::MergeFrom(const PerfEventConfig_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Tracepoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
  }
}

void PerfEventConfig_Tracepoint::CopyFrom(const PerfEventConfig_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Tracepoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Tracepoint::IsInitialized() const {
  return true;
}

void PerfEventConfig_Tracepoint::InternalSwap(PerfEventConfig_Tracepoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PerfEventConfig_Tracepoint::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Tracepoint";
}


// ===================================================================

void PerfEventConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_PerfEventConfig_default_instance_._instance.get_mutable()->timebase_ = const_cast< ::perfetto::protos::PerfEventConfig_Timebase*>(
      ::perfetto::protos::PerfEventConfig_Timebase::internal_default_instance());
  ::perfetto::protos::_PerfEventConfig_default_instance_._instance.get_mutable()->callstack_sampling_ = const_cast< ::perfetto::protos::PerfEventConfig_CallstackSampling*>(
      ::perfetto::protos::PerfEventConfig_CallstackSampling::internal_default_instance());
  ::perfetto::protos::_PerfEventConfig_default_instance_._instance.get_mutable()->tracepoint_ = const_cast< ::perfetto::protos::PerfEventConfig_Tracepoint*>(
      ::perfetto::protos::PerfEventConfig_Tracepoint::internal_default_instance());
}
class PerfEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig>()._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Timebase& timebase(const PerfEventConfig* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling(const PerfEventConfig* msg);
  static void set_has_callstack_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ring_buffer_read_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ring_buffer_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_daemon_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_remote_descriptor_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unwind_state_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_all_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::PerfEventConfig_Tracepoint& tracepoint(const PerfEventConfig* msg);
  static void set_has_tracepoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfEventConfig_Timebase&
PerfEventConfig::_Internal::timebase(const PerfEventConfig* msg) {
  return *msg->timebase_;
}
const ::perfetto::protos::PerfEventConfig_CallstackSampling&
PerfEventConfig::_Internal::callstack_sampling(const PerfEventConfig* msg) {
  return *msg->callstack_sampling_;
}
const ::perfetto::protos::PerfEventConfig_Tracepoint&
PerfEventConfig::_Internal::tracepoint(const PerfEventConfig* msg) {
  return *msg->tracepoint_;
}
PerfEventConfig::PerfEventConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig)
}
PerfEventConfig::PerfEventConfig(const PerfEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tracepoint()) {
    tracepoint_ = new ::perfetto::protos::PerfEventConfig_Tracepoint(*from.tracepoint_);
  } else {
    tracepoint_ = nullptr;
  }
  if (from.has_timebase()) {
    timebase_ = new ::perfetto::protos::PerfEventConfig_Timebase(*from.timebase_);
  } else {
    timebase_ = nullptr;
  }
  if (from.has_callstack_sampling()) {
    callstack_sampling_ = new ::perfetto::protos::PerfEventConfig_CallstackSampling(*from.callstack_sampling_);
  } else {
    callstack_sampling_ = nullptr;
  }
  ::memcpy(&sampling_frequency_, &from.sampling_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_daemon_memory_kb_) -
    reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(max_daemon_memory_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig)
}

void PerfEventConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&tracepoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_daemon_memory_kb_) -
      reinterpret_cast<char*>(&tracepoint_)) + sizeof(max_daemon_memory_kb_));
}

PerfEventConfig::~PerfEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig)
  SharedDtor();
}

void PerfEventConfig::SharedDtor() {
  if (this != internal_default_instance()) delete tracepoint_;
  if (this != internal_default_instance()) delete timebase_;
  if (this != internal_default_instance()) delete callstack_sampling_;
}

void PerfEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig& PerfEventConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tracepoint_ != nullptr);
      tracepoint_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timebase_ != nullptr);
      timebase_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(callstack_sampling_ != nullptr);
      callstack_sampling_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&sampling_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ring_buffer_read_period_ms_) -
        reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(ring_buffer_read_period_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&remote_descriptor_timeout_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_daemon_memory_kb_) -
        reinterpret_cast<char*>(&remote_descriptor_timeout_ms_)) + sizeof(max_daemon_memory_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_cpus(&has_bits);
          all_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sampling_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sampling_frequency(&has_bits);
          sampling_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ring_buffer_pages(&has_bits);
          ring_buffer_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 target_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_target_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_exclude_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ring_buffer_read_period_ms(&has_bits);
          ring_buffer_read_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&has_bits);
          remote_descriptor_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_unwind_state_clear_period_ms(&has_bits);
          unwind_state_clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_daemon_memory_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_daemon_memory_kb(&has_bits);
          max_daemon_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_tracepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_timebase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_callstack_sampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all_cpus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_all_cpus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_cpus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sampling_frequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sampling_frequency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ring_buffer_pages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ring_buffer_pages(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_buffer_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 target_pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_target_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_cmdline = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exclude_pid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_exclude_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exclude_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_cmdline = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ring_buffer_read_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_buffer_read_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_descriptor_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_unwind_state_clear_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unwind_state_clear_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 additional_cmdline_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_additional_cmdline_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_cmdline_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kernel_frames = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_kernel_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kernel_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_daemon_memory_kb = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_max_daemon_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_daemon_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tracepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timebase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_callstack_sampling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_cpus = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->all_cpus(), output);
  }

  // optional uint32 sampling_frequency = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sampling_frequency(), output);
  }

  // optional uint32 ring_buffer_pages = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ring_buffer_pages(), output);
  }

  // repeated int32 target_pid = 4;
  for (int i = 0, n = this->target_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->target_pid(i), output);
  }

  // repeated string target_cmdline = 5;
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->target_cmdline(i), output);
  }

  // repeated int32 exclude_pid = 6;
  for (int i = 0, n = this->exclude_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->exclude_pid(i), output);
  }

  // repeated string exclude_cmdline = 7;
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->exclude_cmdline(i), output);
  }

  // optional uint32 ring_buffer_read_period_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->ring_buffer_read_period_ms(), output);
  }

  // optional uint32 remote_descriptor_timeout_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->remote_descriptor_timeout_ms(), output);
  }

  // optional uint32 unwind_state_clear_period_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->unwind_state_clear_period_ms(), output);
  }

  // optional uint32 additional_cmdline_count = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->additional_cmdline_count(), output);
  }

  // optional bool kernel_frames = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->kernel_frames(), output);
  }

  // optional uint32 max_daemon_memory_kb = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->max_daemon_memory_kb(), output);
  }

  // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::tracepoint(this), output);
  }

  // optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::timebase(this), output);
  }

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::callstack_sampling(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig)
}

size_t PerfEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_cmdline_size());
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_cmdline(i));
  }

  // repeated int32 exclude_pid = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_cmdline_size());
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_cmdline(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfEventConfig.Tracepoint tracepoint = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracepoint_);
    }

    // optional .perfetto.protos.PerfEventConfig.Timebase timebase = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timebase_);
    }

    // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callstack_sampling_);
    }

    // optional uint32 sampling_frequency = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sampling_frequency());
    }

    // optional uint32 ring_buffer_pages = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ring_buffer_pages());
    }

    // optional bool all_cpus = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool kernel_frames = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 ring_buffer_read_period_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ring_buffer_read_period_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 remote_descriptor_timeout_ms = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->remote_descriptor_timeout_ms());
    }

    // optional uint32 unwind_state_clear_period_ms = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->unwind_state_clear_period_ms());
    }

    // optional uint32 additional_cmdline_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->additional_cmdline_count());
    }

    // optional uint32 max_daemon_memory_kb = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_daemon_memory_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig*>(
      &from));
}

void PerfEventConfig::MergeFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tracepoint()->::perfetto::protos::PerfEventConfig_Tracepoint::MergeFrom(from.tracepoint());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timebase()->::perfetto::protos::PerfEventConfig_Timebase::MergeFrom(from.timebase());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_callstack_sampling()->::perfetto::protos::PerfEventConfig_CallstackSampling::MergeFrom(from.callstack_sampling());
    }
    if (cached_has_bits & 0x00000008u) {
      sampling_frequency_ = from.sampling_frequency_;
    }
    if (cached_has_bits & 0x00000010u) {
      ring_buffer_pages_ = from.ring_buffer_pages_;
    }
    if (cached_has_bits & 0x00000020u) {
      all_cpus_ = from.all_cpus_;
    }
    if (cached_has_bits & 0x00000040u) {
      kernel_frames_ = from.kernel_frames_;
    }
    if (cached_has_bits & 0x00000080u) {
      ring_buffer_read_period_ms_ = from.ring_buffer_read_period_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      remote_descriptor_timeout_ms_ = from.remote_descriptor_timeout_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      unwind_state_clear_period_ms_ = from.unwind_state_clear_period_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      additional_cmdline_count_ = from.additional_cmdline_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_daemon_memory_kb_ = from.max_daemon_memory_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig::CopyFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig::IsInitialized() const {
  return true;
}

void PerfEventConfig::InternalSwap(PerfEventConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(CastToBase(&other->target_cmdline_));
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(CastToBase(&other->exclude_cmdline_));
  swap(tracepoint_, other->tracepoint_);
  swap(timebase_, other->timebase_);
  swap(callstack_sampling_, other->callstack_sampling_);
  swap(sampling_frequency_, other->sampling_frequency_);
  swap(ring_buffer_pages_, other->ring_buffer_pages_);
  swap(all_cpus_, other->all_cpus_);
  swap(kernel_frames_, other->kernel_frames_);
  swap(ring_buffer_read_period_ms_, other->ring_buffer_read_period_ms_);
  swap(remote_descriptor_timeout_ms_, other->remote_descriptor_timeout_ms_);
  swap(unwind_state_clear_period_ms_, other->unwind_state_clear_period_ms_);
  swap(additional_cmdline_count_, other->additional_cmdline_count_);
  swap(max_daemon_memory_kb_, other->max_daemon_memory_kb_);
}

std::string PerfEventConfig::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig";
}


// ===================================================================

void SysStatsConfig::InitAsDefaultInstance() {
}
class SysStatsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStatsConfig>()._has_bits_);
  static void set_has_meminfo_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vmstat_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stat_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SysStatsConfig::SysStatsConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStatsConfig)
}
SysStatsConfig::SysStatsConfig(const SysStatsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      meminfo_counters_(from.meminfo_counters_),
      vmstat_counters_(from.vmstat_counters_),
      stat_counters_(from.stat_counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&meminfo_period_ms_, &from.meminfo_period_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_period_ms_) -
    reinterpret_cast<char*>(&meminfo_period_ms_)) + sizeof(stat_period_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStatsConfig)
}

void SysStatsConfig::SharedCtor() {
  ::memset(&meminfo_period_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_period_ms_) -
      reinterpret_cast<char*>(&meminfo_period_ms_)) + sizeof(stat_period_ms_));
}

SysStatsConfig::~SysStatsConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStatsConfig)
  SharedDtor();
}

void SysStatsConfig::SharedDtor() {
}

void SysStatsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStatsConfig& SysStatsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStatsConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SysStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStatsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meminfo_counters_.Clear();
  vmstat_counters_.Clear();
  stat_counters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&meminfo_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_period_ms_) -
        reinterpret_cast<char*>(&meminfo_period_ms_)) + sizeof(stat_period_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStatsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 meminfo_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meminfo_period_ms(&has_bits);
          meminfo_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MeminfoCounters_IsValid(val))) {
              add_meminfo_counters(static_cast<::perfetto::protos::MeminfoCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_meminfo_counters(), ptr, ctx, ::perfetto::protos::MeminfoCounters_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vmstat_period_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vmstat_period_ms(&has_bits);
          vmstat_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VmstatCounters_IsValid(val))) {
              add_vmstat_counters(static_cast<::perfetto::protos::VmstatCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_vmstat_counters(), ptr, ctx, ::perfetto::protos::VmstatCounters_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_period_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stat_period_ms(&has_bits);
          stat_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(val))) {
              add_stat_counters(static_cast<::perfetto::protos::SysStatsConfig_StatCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_stat_counters(), ptr, ctx, ::perfetto::protos::SysStatsConfig_StatCounters_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStatsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStatsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 meminfo_period_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_meminfo_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meminfo_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::MeminfoCounters_IsValid(value)) {
            add_meminfo_counters(static_cast< ::perfetto::protos::MeminfoCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::perfetto::protos::MeminfoCounters_IsValid,
                 &unknown_fields_stream,
                 this->mutable_meminfo_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vmstat_period_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_vmstat_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vmstat_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::VmstatCounters_IsValid(value)) {
            add_vmstat_counters(static_cast< ::perfetto::protos::VmstatCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::perfetto::protos::VmstatCounters_IsValid,
                 &unknown_fields_stream,
                 this->mutable_vmstat_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_period_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_stat_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::SysStatsConfig_StatCounters_IsValid(value)) {
            add_stat_counters(static_cast< ::perfetto::protos::SysStatsConfig_StatCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::perfetto::protos::SysStatsConfig_StatCounters_IsValid,
                 &unknown_fields_stream,
                 this->mutable_stat_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStatsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStatsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStatsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 meminfo_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->meminfo_period_ms(), output);
  }

  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  for (int i = 0, n = this->meminfo_counters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->meminfo_counters(i), output);
  }

  // optional uint32 vmstat_period_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->vmstat_period_ms(), output);
  }

  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  for (int i = 0, n = this->vmstat_counters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->vmstat_counters(i), output);
  }

  // optional uint32 stat_period_ms = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->stat_period_ms(), output);
  }

  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  for (int i = 0, n = this->stat_counters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->stat_counters(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStatsConfig)
}

size_t SysStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStatsConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->meminfo_counters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->meminfo_counters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->vmstat_counters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->vmstat_counters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->stat_counters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->stat_counters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 meminfo_period_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->meminfo_period_ms());
    }

    // optional uint32 vmstat_period_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->vmstat_period_ms());
    }

    // optional uint32 stat_period_ms = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stat_period_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStatsConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStatsConfig*>(
      &from));
}

void SysStatsConfig::MergeFrom(const SysStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meminfo_counters_.MergeFrom(from.meminfo_counters_);
  vmstat_counters_.MergeFrom(from.vmstat_counters_);
  stat_counters_.MergeFrom(from.stat_counters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      meminfo_period_ms_ = from.meminfo_period_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      vmstat_period_ms_ = from.vmstat_period_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      stat_period_ms_ = from.stat_period_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStatsConfig::CopyFrom(const SysStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStatsConfig::IsInitialized() const {
  return true;
}

void SysStatsConfig::InternalSwap(SysStatsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  meminfo_counters_.InternalSwap(&other->meminfo_counters_);
  vmstat_counters_.InternalSwap(&other->vmstat_counters_);
  stat_counters_.InternalSwap(&other->stat_counters_);
  swap(meminfo_period_ms_, other->meminfo_period_ms_);
  swap(vmstat_period_ms_, other->vmstat_period_ms_);
  swap(stat_period_ms_, other->stat_period_ms_);
}

std::string SysStatsConfig::GetTypeName() const {
  return "perfetto.protos.SysStatsConfig";
}


// ===================================================================

void TestConfig_DummyFields::InitAsDefaultInstance() {
}
class TestConfig_DummyFields::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConfig_DummyFields>()._has_bits_);
  static void set_has_field_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_field_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_field_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_field_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_field_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_field_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_field_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestConfig_DummyFields::TestConfig_DummyFields()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestConfig.DummyFields)
}
TestConfig_DummyFields::TestConfig_DummyFields(const TestConfig_DummyFields& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_string()) {
    field_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_string_);
  }
  field_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_bytes()) {
    field_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_bytes_);
  }
  ::memcpy(&field_uint32_, &from.field_uint32_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_sint32_) -
    reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sint32_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig.DummyFields)
}

void TestConfig_DummyFields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  field_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_uint32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_sint32_) -
      reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sint32_));
}

TestConfig_DummyFields::~TestConfig_DummyFields() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig.DummyFields)
  SharedDtor();
}

void TestConfig_DummyFields::SharedDtor() {
  field_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestConfig_DummyFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestConfig_DummyFields& TestConfig_DummyFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestConfig_DummyFields_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TestConfig_DummyFields::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig.DummyFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      field_bytes_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&field_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_sfixed64_) -
        reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sfixed64_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&field_fixed32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_sint32_) -
        reinterpret_cast<char*>(&field_fixed32_)) + sizeof(field_sint32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestConfig_DummyFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 field_uint32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_uint32(&has_bits);
          field_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_int32(&has_bits);
          field_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 field_uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field_uint64(&has_bits);
          field_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 field_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_field_int64(&has_bits);
          field_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 field_fixed64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_field_fixed64(&has_bits);
          field_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 field_sfixed64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_field_sfixed64(&has_bits);
          field_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 field_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_field_fixed32(&has_bits);
          field_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 field_sfixed32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_field_sfixed32(&has_bits);
          field_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional double field_double = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_field_double(&has_bits);
          field_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float field_float = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_field_float(&has_bits);
          field_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional sint64 field_sint64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_field_sint64(&has_bits);
          field_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 field_sint32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_field_sint32(&has_bits);
          field_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_field_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes field_bytes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_field_bytes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestConfig_DummyFields::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestConfig.DummyFields)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 field_uint32 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_field_uint32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 field_int32 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_field_int32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 field_uint64 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_field_uint64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &field_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 field_int64 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_field_int64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 field_fixed64 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_field_fixed64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &field_fixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 field_sfixed64 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_field_sfixed64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &field_sfixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 field_fixed32 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_field_fixed32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &field_fixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 field_sfixed32 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_field_sfixed32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &field_sfixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double field_double = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {
          _Internal::set_has_field_double(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float field_float = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_field_float(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 field_sint64 = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_field_sint64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &field_sint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 field_sint32 = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_field_sint32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &field_sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string field_string = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes field_bytes = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestConfig.DummyFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestConfig.DummyFields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestConfig_DummyFields::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestConfig.DummyFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 field_uint32 = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->field_uint32(), output);
  }

  // optional int32 field_int32 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->field_int32(), output);
  }

  // optional uint64 field_uint64 = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->field_uint64(), output);
  }

  // optional int64 field_int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->field_int64(), output);
  }

  // optional fixed64 field_fixed64 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(5, this->field_fixed64(), output);
  }

  // optional sfixed64 field_sfixed64 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64(6, this->field_sfixed64(), output);
  }

  // optional fixed32 field_fixed32 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(7, this->field_fixed32(), output);
  }

  // optional sfixed32 field_sfixed32 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32(8, this->field_sfixed32(), output);
  }

  // optional double field_double = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->field_double(), output);
  }

  // optional float field_float = 10;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->field_float(), output);
  }

  // optional sint64 field_sint64 = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(11, this->field_sint64(), output);
  }

  // optional sint32 field_sint32 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(12, this->field_sint32(), output);
  }

  // optional string field_string = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->field_string(), output);
  }

  // optional bytes field_bytes = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->field_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestConfig.DummyFields)
}

size_t TestConfig_DummyFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig.DummyFields)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string field_string = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->field_string());
    }

    // optional bytes field_bytes = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->field_bytes());
    }

    // optional uint32 field_uint32 = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->field_uint32());
    }

    // optional int32 field_int32 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->field_int32());
    }

    // optional uint64 field_uint64 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->field_uint64());
    }

    // optional int64 field_int64 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->field_int64());
    }

    // optional fixed64 field_fixed64 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 field_sfixed64 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional fixed32 field_fixed32 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 field_sfixed32 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional double field_double = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional sint64 field_sint64 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->field_sint64());
    }

    // optional float field_float = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional sint32 field_sint32 = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->field_sint32());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig_DummyFields::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestConfig_DummyFields*>(
      &from));
}

void TestConfig_DummyFields::MergeFrom(const TestConfig_DummyFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig.DummyFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      field_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      field_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_bytes_);
    }
    if (cached_has_bits & 0x00000004u) {
      field_uint32_ = from.field_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_int32_ = from.field_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_uint64_ = from.field_uint64_;
    }
    if (cached_has_bits & 0x00000020u) {
      field_int64_ = from.field_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      field_fixed64_ = from.field_fixed64_;
    }
    if (cached_has_bits & 0x00000080u) {
      field_sfixed64_ = from.field_sfixed64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      field_fixed32_ = from.field_fixed32_;
    }
    if (cached_has_bits & 0x00000200u) {
      field_sfixed32_ = from.field_sfixed32_;
    }
    if (cached_has_bits & 0x00000400u) {
      field_double_ = from.field_double_;
    }
    if (cached_has_bits & 0x00000800u) {
      field_sint64_ = from.field_sint64_;
    }
    if (cached_has_bits & 0x00001000u) {
      field_float_ = from.field_float_;
    }
    if (cached_has_bits & 0x00002000u) {
      field_sint32_ = from.field_sint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConfig_DummyFields::CopyFrom(const TestConfig_DummyFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig.DummyFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig_DummyFields::IsInitialized() const {
  return true;
}

void TestConfig_DummyFields::InternalSwap(TestConfig_DummyFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_string_.Swap(&other->field_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_bytes_.Swap(&other->field_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_uint32_, other->field_uint32_);
  swap(field_int32_, other->field_int32_);
  swap(field_uint64_, other->field_uint64_);
  swap(field_int64_, other->field_int64_);
  swap(field_fixed64_, other->field_fixed64_);
  swap(field_sfixed64_, other->field_sfixed64_);
  swap(field_fixed32_, other->field_fixed32_);
  swap(field_sfixed32_, other->field_sfixed32_);
  swap(field_double_, other->field_double_);
  swap(field_sint64_, other->field_sint64_);
  swap(field_float_, other->field_float_);
  swap(field_sint32_, other->field_sint32_);
}

std::string TestConfig_DummyFields::GetTypeName() const {
  return "perfetto.protos.TestConfig.DummyFields";
}


// ===================================================================

void TestConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_TestConfig_default_instance_._instance.get_mutable()->dummy_fields_ = const_cast< ::perfetto::protos::TestConfig_DummyFields*>(
      ::perfetto::protos::TestConfig_DummyFields::internal_default_instance());
}
class TestConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConfig>()._has_bits_);
  static void set_has_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_messages_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send_batch_on_register(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::TestConfig_DummyFields& dummy_fields(const TestConfig* msg);
  static void set_has_dummy_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::TestConfig_DummyFields&
TestConfig::_Internal::dummy_fields(const TestConfig* msg) {
  return *msg->dummy_fields_;
}
TestConfig::TestConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestConfig)
}
TestConfig::TestConfig(const TestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dummy_fields()) {
    dummy_fields_ = new ::perfetto::protos::TestConfig_DummyFields(*from.dummy_fields_);
  } else {
    dummy_fields_ = nullptr;
  }
  ::memcpy(&message_count_, &from.message_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_batch_on_register_) -
    reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig)
}

void TestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&dummy_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_batch_on_register_) -
      reinterpret_cast<char*>(&dummy_fields_)) + sizeof(send_batch_on_register_));
}

TestConfig::~TestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig)
  SharedDtor();
}

void TestConfig::SharedDtor() {
  if (this != internal_default_instance()) delete dummy_fields_;
}

void TestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestConfig& TestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dummy_fields_ != nullptr);
    dummy_fields_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&message_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_batch_on_register_) -
        reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_count(&has_bits);
          message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_messages_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_messages_per_second(&has_bits);
          max_messages_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seed(&has_bits);
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_message_size(&has_bits);
          message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_batch_on_register = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_send_batch_on_register(&has_bits);
          send_batch_on_register_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_dummy_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_message_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_messages_per_second = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_messages_per_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_messages_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_seed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_message_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_batch_on_register = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_send_batch_on_register(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_batch_on_register_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dummy_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->message_count(), output);
  }

  // optional uint32 max_messages_per_second = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->max_messages_per_second(), output);
  }

  // optional uint32 seed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->seed(), output);
  }

  // optional uint32 message_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->message_size(), output);
  }

  // optional bool send_batch_on_register = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->send_batch_on_register(), output);
  }

  // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::dummy_fields(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestConfig)
}

size_t TestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dummy_fields_);
    }

    // optional uint32 message_count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

    // optional uint32 max_messages_per_second = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_messages_per_second());
    }

    // optional uint32 seed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint32 message_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->message_size());
    }

    // optional bool send_batch_on_register = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestConfig*>(
      &from));
}

void TestConfig::MergeFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dummy_fields()->::perfetto::protos::TestConfig_DummyFields::MergeFrom(from.dummy_fields());
    }
    if (cached_has_bits & 0x00000002u) {
      message_count_ = from.message_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_messages_per_second_ = from.max_messages_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000010u) {
      message_size_ = from.message_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_batch_on_register_ = from.send_batch_on_register_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConfig::CopyFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig::IsInitialized() const {
  return true;
}

void TestConfig::InternalSwap(TestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_fields_, other->dummy_fields_);
  swap(message_count_, other->message_count_);
  swap(max_messages_per_second_, other->max_messages_per_second_);
  swap(seed_, other->seed_);
  swap(message_size_, other->message_size_);
  swap(send_batch_on_register_, other->send_batch_on_register_);
}

std::string TestConfig::GetTypeName() const {
  return "perfetto.protos.TestConfig";
}


// ===================================================================

void TrackEventConfig::InitAsDefaultInstance() {
}
class TrackEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEventConfig>()._has_bits_);
};

TrackEventConfig::TrackEventConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEventConfig)
}
TrackEventConfig::TrackEventConfig(const TrackEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disabled_categories_(from.disabled_categories_),
      enabled_categories_(from.enabled_categories_),
      disabled_tags_(from.disabled_tags_),
      enabled_tags_(from.enabled_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEventConfig)
}

void TrackEventConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
}

TrackEventConfig::~TrackEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEventConfig)
  SharedDtor();
}

void TrackEventConfig::SharedDtor() {
}

void TrackEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEventConfig& TrackEventConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEventConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrackEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_categories_.Clear();
  enabled_categories_.Clear();
  disabled_tags_.Clear();
  enabled_tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string disabled_categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_disabled_categories(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string enabled_categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_enabled_categories(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string disabled_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_disabled_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string enabled_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_enabled_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEventConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEventConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string disabled_categories = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_disabled_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string enabled_categories = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_enabled_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string disabled_tags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_disabled_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string enabled_tags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_enabled_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEventConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEventConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEventConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string disabled_categories = 1;
  for (int i = 0, n = this->disabled_categories_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->disabled_categories(i), output);
  }

  // repeated string enabled_categories = 2;
  for (int i = 0, n = this->enabled_categories_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->enabled_categories(i), output);
  }

  // repeated string disabled_tags = 3;
  for (int i = 0, n = this->disabled_tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->disabled_tags(i), output);
  }

  // repeated string enabled_tags = 4;
  for (int i = 0, n = this->enabled_tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->enabled_tags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEventConfig)
}

size_t TrackEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEventConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string disabled_categories = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->disabled_categories_size());
  for (int i = 0, n = this->disabled_categories_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->disabled_categories(i));
  }

  // repeated string enabled_categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->enabled_categories_size());
  for (int i = 0, n = this->enabled_categories_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->enabled_categories(i));
  }

  // repeated string disabled_tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->disabled_tags_size());
  for (int i = 0, n = this->disabled_tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->disabled_tags(i));
  }

  // repeated string enabled_tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->enabled_tags_size());
  for (int i = 0, n = this->enabled_tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->enabled_tags(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEventConfig*>(
      &from));
}

void TrackEventConfig::MergeFrom(const TrackEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_categories_.MergeFrom(from.disabled_categories_);
  enabled_categories_.MergeFrom(from.enabled_categories_);
  disabled_tags_.MergeFrom(from.disabled_tags_);
  enabled_tags_.MergeFrom(from.enabled_tags_);
}

void TrackEventConfig::CopyFrom(const TrackEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEventConfig::IsInitialized() const {
  return true;
}

void TrackEventConfig::InternalSwap(TrackEventConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disabled_categories_.InternalSwap(CastToBase(&other->disabled_categories_));
  enabled_categories_.InternalSwap(CastToBase(&other->enabled_categories_));
  disabled_tags_.InternalSwap(CastToBase(&other->disabled_tags_));
  enabled_tags_.InternalSwap(CastToBase(&other->enabled_tags_));
}

std::string TrackEventConfig::GetTypeName() const {
  return "perfetto.protos.TrackEventConfig";
}


// ===================================================================

void DataSourceConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->ftrace_config_ = const_cast< ::perfetto::protos::FtraceConfig*>(
      ::perfetto::protos::FtraceConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->inode_file_config_ = const_cast< ::perfetto::protos::InodeFileConfig*>(
      ::perfetto::protos::InodeFileConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->process_stats_config_ = const_cast< ::perfetto::protos::ProcessStatsConfig*>(
      ::perfetto::protos::ProcessStatsConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->sys_stats_config_ = const_cast< ::perfetto::protos::SysStatsConfig*>(
      ::perfetto::protos::SysStatsConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->heapprofd_config_ = const_cast< ::perfetto::protos::HeapprofdConfig*>(
      ::perfetto::protos::HeapprofdConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->java_hprof_config_ = const_cast< ::perfetto::protos::JavaHprofConfig*>(
      ::perfetto::protos::JavaHprofConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->android_power_config_ = const_cast< ::perfetto::protos::AndroidPowerConfig*>(
      ::perfetto::protos::AndroidPowerConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->android_log_config_ = const_cast< ::perfetto::protos::AndroidLogConfig*>(
      ::perfetto::protos::AndroidLogConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->gpu_counter_config_ = const_cast< ::perfetto::protos::GpuCounterConfig*>(
      ::perfetto::protos::GpuCounterConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->packages_list_config_ = const_cast< ::perfetto::protos::PackagesListConfig*>(
      ::perfetto::protos::PackagesListConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->perf_event_config_ = const_cast< ::perfetto::protos::PerfEventConfig*>(
      ::perfetto::protos::PerfEventConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->vulkan_memory_config_ = const_cast< ::perfetto::protos::VulkanMemoryConfig*>(
      ::perfetto::protos::VulkanMemoryConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->track_event_config_ = const_cast< ::perfetto::protos::TrackEventConfig*>(
      ::perfetto::protos::TrackEventConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->android_polled_state_config_ = const_cast< ::perfetto::protos::AndroidPolledStateConfig*>(
      ::perfetto::protos::AndroidPolledStateConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->chrome_config_ = const_cast< ::perfetto::protos::ChromeConfig*>(
      ::perfetto::protos::ChromeConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->interceptor_config_ = const_cast< ::perfetto::protos::InterceptorConfig*>(
      ::perfetto::protos::InterceptorConfig::internal_default_instance());
  ::perfetto::protos::_DataSourceConfig_default_instance_._instance.get_mutable()->for_testing_ = const_cast< ::perfetto::protos::TestConfig*>(
      ::perfetto::protos::TestConfig::internal_default_instance());
}
class DataSourceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_trace_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_stop_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_enable_extra_guardrails(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tracing_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::perfetto::protos::FtraceConfig& ftrace_config(const DataSourceConfig* msg);
  static void set_has_ftrace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::InodeFileConfig& inode_file_config(const DataSourceConfig* msg);
  static void set_has_inode_file_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::ProcessStatsConfig& process_stats_config(const DataSourceConfig* msg);
  static void set_has_process_stats_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::SysStatsConfig& sys_stats_config(const DataSourceConfig* msg);
  static void set_has_sys_stats_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::HeapprofdConfig& heapprofd_config(const DataSourceConfig* msg);
  static void set_has_heapprofd_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::JavaHprofConfig& java_hprof_config(const DataSourceConfig* msg);
  static void set_has_java_hprof_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::AndroidPowerConfig& android_power_config(const DataSourceConfig* msg);
  static void set_has_android_power_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::AndroidLogConfig& android_log_config(const DataSourceConfig* msg);
  static void set_has_android_log_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::GpuCounterConfig& gpu_counter_config(const DataSourceConfig* msg);
  static void set_has_gpu_counter_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::PackagesListConfig& packages_list_config(const DataSourceConfig* msg);
  static void set_has_packages_list_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::perfetto::protos::PerfEventConfig& perf_event_config(const DataSourceConfig* msg);
  static void set_has_perf_event_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::VulkanMemoryConfig& vulkan_memory_config(const DataSourceConfig* msg);
  static void set_has_vulkan_memory_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::TrackEventConfig& track_event_config(const DataSourceConfig* msg);
  static void set_has_track_event_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::AndroidPolledStateConfig& android_polled_state_config(const DataSourceConfig* msg);
  static void set_has_android_polled_state_config(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::perfetto::protos::ChromeConfig& chrome_config(const DataSourceConfig* msg);
  static void set_has_chrome_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::InterceptorConfig& interceptor_config(const DataSourceConfig* msg);
  static void set_has_interceptor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_legacy_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TestConfig& for_testing(const DataSourceConfig* msg);
  static void set_has_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::perfetto::protos::FtraceConfig&
DataSourceConfig::_Internal::ftrace_config(const DataSourceConfig* msg) {
  return *msg->ftrace_config_;
}
const ::perfetto::protos::InodeFileConfig&
DataSourceConfig::_Internal::inode_file_config(const DataSourceConfig* msg) {
  return *msg->inode_file_config_;
}
const ::perfetto::protos::ProcessStatsConfig&
DataSourceConfig::_Internal::process_stats_config(const DataSourceConfig* msg) {
  return *msg->process_stats_config_;
}
const ::perfetto::protos::SysStatsConfig&
DataSourceConfig::_Internal::sys_stats_config(const DataSourceConfig* msg) {
  return *msg->sys_stats_config_;
}
const ::perfetto::protos::HeapprofdConfig&
DataSourceConfig::_Internal::heapprofd_config(const DataSourceConfig* msg) {
  return *msg->heapprofd_config_;
}
const ::perfetto::protos::JavaHprofConfig&
DataSourceConfig::_Internal::java_hprof_config(const DataSourceConfig* msg) {
  return *msg->java_hprof_config_;
}
const ::perfetto::protos::AndroidPowerConfig&
DataSourceConfig::_Internal::android_power_config(const DataSourceConfig* msg) {
  return *msg->android_power_config_;
}
const ::perfetto::protos::AndroidLogConfig&
DataSourceConfig::_Internal::android_log_config(const DataSourceConfig* msg) {
  return *msg->android_log_config_;
}
const ::perfetto::protos::GpuCounterConfig&
DataSourceConfig::_Internal::gpu_counter_config(const DataSourceConfig* msg) {
  return *msg->gpu_counter_config_;
}
const ::perfetto::protos::PackagesListConfig&
DataSourceConfig::_Internal::packages_list_config(const DataSourceConfig* msg) {
  return *msg->packages_list_config_;
}
const ::perfetto::protos::PerfEventConfig&
DataSourceConfig::_Internal::perf_event_config(const DataSourceConfig* msg) {
  return *msg->perf_event_config_;
}
const ::perfetto::protos::VulkanMemoryConfig&
DataSourceConfig::_Internal::vulkan_memory_config(const DataSourceConfig* msg) {
  return *msg->vulkan_memory_config_;
}
const ::perfetto::protos::TrackEventConfig&
DataSourceConfig::_Internal::track_event_config(const DataSourceConfig* msg) {
  return *msg->track_event_config_;
}
const ::perfetto::protos::AndroidPolledStateConfig&
DataSourceConfig::_Internal::android_polled_state_config(const DataSourceConfig* msg) {
  return *msg->android_polled_state_config_;
}
const ::perfetto::protos::ChromeConfig&
DataSourceConfig::_Internal::chrome_config(const DataSourceConfig* msg) {
  return *msg->chrome_config_;
}
const ::perfetto::protos::InterceptorConfig&
DataSourceConfig::_Internal::interceptor_config(const DataSourceConfig* msg) {
  return *msg->interceptor_config_;
}
const ::perfetto::protos::TestConfig&
DataSourceConfig::_Internal::for_testing(const DataSourceConfig* msg) {
  return *msg->for_testing_;
}
DataSourceConfig::DataSourceConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.DataSourceConfig)
}
DataSourceConfig::DataSourceConfig(const DataSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  legacy_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_legacy_config()) {
    legacy_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.legacy_config_);
  }
  if (from.has_ftrace_config()) {
    ftrace_config_ = new ::perfetto::protos::FtraceConfig(*from.ftrace_config_);
  } else {
    ftrace_config_ = nullptr;
  }
  if (from.has_chrome_config()) {
    chrome_config_ = new ::perfetto::protos::ChromeConfig(*from.chrome_config_);
  } else {
    chrome_config_ = nullptr;
  }
  if (from.has_inode_file_config()) {
    inode_file_config_ = new ::perfetto::protos::InodeFileConfig(*from.inode_file_config_);
  } else {
    inode_file_config_ = nullptr;
  }
  if (from.has_process_stats_config()) {
    process_stats_config_ = new ::perfetto::protos::ProcessStatsConfig(*from.process_stats_config_);
  } else {
    process_stats_config_ = nullptr;
  }
  if (from.has_sys_stats_config()) {
    sys_stats_config_ = new ::perfetto::protos::SysStatsConfig(*from.sys_stats_config_);
  } else {
    sys_stats_config_ = nullptr;
  }
  if (from.has_heapprofd_config()) {
    heapprofd_config_ = new ::perfetto::protos::HeapprofdConfig(*from.heapprofd_config_);
  } else {
    heapprofd_config_ = nullptr;
  }
  if (from.has_android_power_config()) {
    android_power_config_ = new ::perfetto::protos::AndroidPowerConfig(*from.android_power_config_);
  } else {
    android_power_config_ = nullptr;
  }
  if (from.has_android_log_config()) {
    android_log_config_ = new ::perfetto::protos::AndroidLogConfig(*from.android_log_config_);
  } else {
    android_log_config_ = nullptr;
  }
  if (from.has_gpu_counter_config()) {
    gpu_counter_config_ = new ::perfetto::protos::GpuCounterConfig(*from.gpu_counter_config_);
  } else {
    gpu_counter_config_ = nullptr;
  }
  if (from.has_packages_list_config()) {
    packages_list_config_ = new ::perfetto::protos::PackagesListConfig(*from.packages_list_config_);
  } else {
    packages_list_config_ = nullptr;
  }
  if (from.has_java_hprof_config()) {
    java_hprof_config_ = new ::perfetto::protos::JavaHprofConfig(*from.java_hprof_config_);
  } else {
    java_hprof_config_ = nullptr;
  }
  if (from.has_perf_event_config()) {
    perf_event_config_ = new ::perfetto::protos::PerfEventConfig(*from.perf_event_config_);
  } else {
    perf_event_config_ = nullptr;
  }
  if (from.has_vulkan_memory_config()) {
    vulkan_memory_config_ = new ::perfetto::protos::VulkanMemoryConfig(*from.vulkan_memory_config_);
  } else {
    vulkan_memory_config_ = nullptr;
  }
  if (from.has_track_event_config()) {
    track_event_config_ = new ::perfetto::protos::TrackEventConfig(*from.track_event_config_);
  } else {
    track_event_config_ = nullptr;
  }
  if (from.has_android_polled_state_config()) {
    android_polled_state_config_ = new ::perfetto::protos::AndroidPolledStateConfig(*from.android_polled_state_config_);
  } else {
    android_polled_state_config_ = nullptr;
  }
  if (from.has_interceptor_config()) {
    interceptor_config_ = new ::perfetto::protos::InterceptorConfig(*from.interceptor_config_);
  } else {
    interceptor_config_ = nullptr;
  }
  if (from.has_for_testing()) {
    for_testing_ = new ::perfetto::protos::TestConfig(*from.for_testing_);
  } else {
    for_testing_ = nullptr;
  }
  ::memcpy(&target_buffer_, &from.target_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timeout_ms_) -
    reinterpret_cast<char*>(&target_buffer_)) + sizeof(stop_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DataSourceConfig)
}

void DataSourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ftrace_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_timeout_ms_) -
      reinterpret_cast<char*>(&ftrace_config_)) + sizeof(stop_timeout_ms_));
}

DataSourceConfig::~DataSourceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DataSourceConfig)
  SharedDtor();
}

void DataSourceConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ftrace_config_;
  if (this != internal_default_instance()) delete chrome_config_;
  if (this != internal_default_instance()) delete inode_file_config_;
  if (this != internal_default_instance()) delete process_stats_config_;
  if (this != internal_default_instance()) delete sys_stats_config_;
  if (this != internal_default_instance()) delete heapprofd_config_;
  if (this != internal_default_instance()) delete android_power_config_;
  if (this != internal_default_instance()) delete android_log_config_;
  if (this != internal_default_instance()) delete gpu_counter_config_;
  if (this != internal_default_instance()) delete packages_list_config_;
  if (this != internal_default_instance()) delete java_hprof_config_;
  if (this != internal_default_instance()) delete perf_event_config_;
  if (this != internal_default_instance()) delete vulkan_memory_config_;
  if (this != internal_default_instance()) delete track_event_config_;
  if (this != internal_default_instance()) delete android_polled_state_config_;
  if (this != internal_default_instance()) delete interceptor_config_;
  if (this != internal_default_instance()) delete for_testing_;
}

void DataSourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSourceConfig& DataSourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSourceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DataSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DataSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_config_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ftrace_config_ != nullptr);
      ftrace_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_config_ != nullptr);
      chrome_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(inode_file_config_ != nullptr);
      inode_file_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(process_stats_config_ != nullptr);
      process_stats_config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sys_stats_config_ != nullptr);
      sys_stats_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(heapprofd_config_ != nullptr);
      heapprofd_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(android_power_config_ != nullptr);
      android_power_config_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(android_log_config_ != nullptr);
      android_log_config_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(gpu_counter_config_ != nullptr);
      gpu_counter_config_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(packages_list_config_ != nullptr);
      packages_list_config_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(java_hprof_config_ != nullptr);
      java_hprof_config_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(perf_event_config_ != nullptr);
      perf_event_config_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(vulkan_memory_config_ != nullptr);
      vulkan_memory_config_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(track_event_config_ != nullptr);
      track_event_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(android_polled_state_config_ != nullptr);
      android_polled_state_config_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(interceptor_config_ != nullptr);
      interceptor_config_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(for_testing_ != nullptr);
      for_testing_->Clear();
    }
  }
  if (cached_has_bits & 0x00f80000u) {
    ::memset(&target_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_timeout_ms_) -
        reinterpret_cast<char*>(&target_buffer_)) + sizeof(stop_timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_buffer(&has_bits);
          target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trace_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trace_duration_ms(&has_bits);
          trace_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tracing_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tracing_session_id(&has_bits);
          tracing_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_extra_guardrails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_extra_guardrails(&has_bits);
          enable_extra_guardrails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stop_timeout_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stop_timeout_ms(&has_bits);
          stop_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ftrace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeConfig chrome_config = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_chrome_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_inode_file_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_process_stats_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sys_stats_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_heapprofd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_android_power_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_android_log_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_gpu_counter_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_packages_list_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_java_hprof_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_perf_event_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_vulkan_memory_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_track_event_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_android_polled_state_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_interceptor_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string legacy_config = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_legacy_config(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TestConfig for_testing = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_for_testing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSourceConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.DataSourceConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_buffer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_target_buffer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trace_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tracing_session_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_tracing_session_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tracing_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_extra_guardrails = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_enable_extra_guardrails(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_extra_guardrails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stop_timeout_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_stop_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ftrace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeConfig chrome_config = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inode_file_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sys_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heapprofd_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_power_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_log_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_counter_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
      case 109: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packages_list_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_java_hprof_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
      case 111: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_event_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vulkan_memory_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
      case 113: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_track_event_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
      case 114: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_polled_state_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interceptor_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string legacy_config = 1000;
      case 1000: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_legacy_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TestConfig for_testing = 1001;
      case 1001: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_for_testing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.DataSourceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.DataSourceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSourceConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.DataSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 target_buffer = 2;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->target_buffer(), output);
  }

  // optional uint32 trace_duration_ms = 3;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->trace_duration_ms(), output);
  }

  // optional uint64 tracing_session_id = 4;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->tracing_session_id(), output);
  }

  // optional bool enable_extra_guardrails = 6;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->enable_extra_guardrails(), output);
  }

  // optional uint32 stop_timeout_ms = 7;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->stop_timeout_ms(), output);
  }

  // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      100, _Internal::ftrace_config(this), output);
  }

  // optional .perfetto.protos.ChromeConfig chrome_config = 101;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      101, _Internal::chrome_config(this), output);
  }

  // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      102, _Internal::inode_file_config(this), output);
  }

  // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      103, _Internal::process_stats_config(this), output);
  }

  // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      104, _Internal::sys_stats_config(this), output);
  }

  // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      105, _Internal::heapprofd_config(this), output);
  }

  // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      106, _Internal::android_power_config(this), output);
  }

  // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      107, _Internal::android_log_config(this), output);
  }

  // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      108, _Internal::gpu_counter_config(this), output);
  }

  // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      109, _Internal::packages_list_config(this), output);
  }

  // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      110, _Internal::java_hprof_config(this), output);
  }

  // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      111, _Internal::perf_event_config(this), output);
  }

  // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      112, _Internal::vulkan_memory_config(this), output);
  }

  // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      113, _Internal::track_event_config(this), output);
  }

  // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      114, _Internal::android_polled_state_config(this), output);
  }

  // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      115, _Internal::interceptor_config(this), output);
  }

  // optional string legacy_config = 1000;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1000, this->legacy_config(), output);
  }

  // optional .perfetto.protos.TestConfig for_testing = 1001;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1001, _Internal::for_testing(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.DataSourceConfig)
}

size_t DataSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DataSourceConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string legacy_config = 1000;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->legacy_config());
    }

    // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ftrace_config_);
    }

    // optional .perfetto.protos.ChromeConfig chrome_config = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_config_);
    }

    // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inode_file_config_);
    }

    // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_stats_config_);
    }

    // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sys_stats_config_);
    }

    // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heapprofd_config_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_power_config_);
    }

    // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_log_config_);
    }

    // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpu_counter_config_);
    }

    // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packages_list_config_);
    }

    // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *java_hprof_config_);
    }

    // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_event_config_);
    }

    // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vulkan_memory_config_);
    }

    // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_event_config_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_polled_state_config_);
    }

    // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interceptor_config_);
    }

    // optional .perfetto.protos.TestConfig for_testing = 1001;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *for_testing_);
    }

    // optional uint32 target_buffer = 2;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->target_buffer());
    }

    // optional uint32 trace_duration_ms = 3;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trace_duration_ms());
    }

    // optional uint64 tracing_session_id = 4;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->tracing_session_id());
    }

    // optional bool enable_extra_guardrails = 6;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional uint32 stop_timeout_ms = 7;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stop_timeout_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataSourceConfig*>(
      &from));
}

void DataSourceConfig::MergeFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DataSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      legacy_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.legacy_config_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ftrace_config()->::perfetto::protos::FtraceConfig::MergeFrom(from.ftrace_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_chrome_config()->::perfetto::protos::ChromeConfig::MergeFrom(from.chrome_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_inode_file_config()->::perfetto::protos::InodeFileConfig::MergeFrom(from.inode_file_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_process_stats_config()->::perfetto::protos::ProcessStatsConfig::MergeFrom(from.process_stats_config());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sys_stats_config()->::perfetto::protos::SysStatsConfig::MergeFrom(from.sys_stats_config());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_heapprofd_config()->::perfetto::protos::HeapprofdConfig::MergeFrom(from.heapprofd_config());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_android_power_config()->::perfetto::protos::AndroidPowerConfig::MergeFrom(from.android_power_config());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_android_log_config()->::perfetto::protos::AndroidLogConfig::MergeFrom(from.android_log_config());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_gpu_counter_config()->::perfetto::protos::GpuCounterConfig::MergeFrom(from.gpu_counter_config());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_packages_list_config()->::perfetto::protos::PackagesListConfig::MergeFrom(from.packages_list_config());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_java_hprof_config()->::perfetto::protos::JavaHprofConfig::MergeFrom(from.java_hprof_config());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_perf_event_config()->::perfetto::protos::PerfEventConfig::MergeFrom(from.perf_event_config());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_vulkan_memory_config()->::perfetto::protos::VulkanMemoryConfig::MergeFrom(from.vulkan_memory_config());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_track_event_config()->::perfetto::protos::TrackEventConfig::MergeFrom(from.track_event_config());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_android_polled_state_config()->::perfetto::protos::AndroidPolledStateConfig::MergeFrom(from.android_polled_state_config());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_interceptor_config()->::perfetto::protos::InterceptorConfig::MergeFrom(from.interceptor_config());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_for_testing()->::perfetto::protos::TestConfig::MergeFrom(from.for_testing());
    }
    if (cached_has_bits & 0x00080000u) {
      target_buffer_ = from.target_buffer_;
    }
    if (cached_has_bits & 0x00100000u) {
      trace_duration_ms_ = from.trace_duration_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      tracing_session_id_ = from.tracing_session_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_extra_guardrails_ = from.enable_extra_guardrails_;
    }
    if (cached_has_bits & 0x00800000u) {
      stop_timeout_ms_ = from.stop_timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSourceConfig::CopyFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DataSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceConfig::IsInitialized() const {
  return true;
}

void DataSourceConfig::InternalSwap(DataSourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  legacy_config_.Swap(&other->legacy_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ftrace_config_, other->ftrace_config_);
  swap(chrome_config_, other->chrome_config_);
  swap(inode_file_config_, other->inode_file_config_);
  swap(process_stats_config_, other->process_stats_config_);
  swap(sys_stats_config_, other->sys_stats_config_);
  swap(heapprofd_config_, other->heapprofd_config_);
  swap(android_power_config_, other->android_power_config_);
  swap(android_log_config_, other->android_log_config_);
  swap(gpu_counter_config_, other->gpu_counter_config_);
  swap(packages_list_config_, other->packages_list_config_);
  swap(java_hprof_config_, other->java_hprof_config_);
  swap(perf_event_config_, other->perf_event_config_);
  swap(vulkan_memory_config_, other->vulkan_memory_config_);
  swap(track_event_config_, other->track_event_config_);
  swap(android_polled_state_config_, other->android_polled_state_config_);
  swap(interceptor_config_, other->interceptor_config_);
  swap(for_testing_, other->for_testing_);
  swap(target_buffer_, other->target_buffer_);
  swap(trace_duration_ms_, other->trace_duration_ms_);
  swap(tracing_session_id_, other->tracing_session_id_);
  swap(enable_extra_guardrails_, other->enable_extra_guardrails_);
  swap(stop_timeout_ms_, other->stop_timeout_ms_);
}

std::string DataSourceConfig::GetTypeName() const {
  return "perfetto.protos.DataSourceConfig";
}


// ===================================================================

void TraceConfig_BufferConfig::InitAsDefaultInstance() {
}
class TraceConfig_BufferConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BufferConfig>()._has_bits_);
  static void set_has_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_BufferConfig::TraceConfig_BufferConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.BufferConfig)
}
TraceConfig_BufferConfig::TraceConfig_BufferConfig(const TraceConfig_BufferConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_kb_, &from.size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&fill_policy_) -
    reinterpret_cast<char*>(&size_kb_)) + sizeof(fill_policy_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BufferConfig)
}

void TraceConfig_BufferConfig::SharedCtor() {
  ::memset(&size_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_policy_) -
      reinterpret_cast<char*>(&size_kb_)) + sizeof(fill_policy_));
}

TraceConfig_BufferConfig::~TraceConfig_BufferConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BufferConfig)
  SharedDtor();
}

void TraceConfig_BufferConfig::SharedDtor() {
}

void TraceConfig_BufferConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_BufferConfig& TraceConfig_BufferConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_BufferConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_BufferConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BufferConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fill_policy_) -
        reinterpret_cast<char*>(&size_kb_)) + sizeof(fill_policy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_BufferConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 size_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size_kb(&has_bits);
          size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(val))) {
            set_fill_policy(static_cast<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_BufferConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.BufferConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_kb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(value)) {
            set_fill_policy(static_cast< ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.BufferConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.BufferConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_BufferConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.BufferConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->size_kb(), output);
  }

  // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->fill_policy(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.BufferConfig)
}

size_t TraceConfig_BufferConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BufferConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 size_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->size_kb());
    }

    // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fill_policy());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_BufferConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_BufferConfig*>(
      &from));
}

void TraceConfig_BufferConfig::MergeFrom(const TraceConfig_BufferConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BufferConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_kb_ = from.size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      fill_policy_ = from.fill_policy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_BufferConfig::CopyFrom(const TraceConfig_BufferConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BufferConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BufferConfig::IsInitialized() const {
  return true;
}

void TraceConfig_BufferConfig::InternalSwap(TraceConfig_BufferConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_kb_, other->size_kb_);
  swap(fill_policy_, other->fill_policy_);
}

std::string TraceConfig_BufferConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.BufferConfig";
}


// ===================================================================

void TraceConfig_DataSource::InitAsDefaultInstance() {
  ::perfetto::protos::_TraceConfig_DataSource_default_instance_._instance.get_mutable()->config_ = const_cast< ::perfetto::protos::DataSourceConfig*>(
      ::perfetto::protos::DataSourceConfig::internal_default_instance());
}
class TraceConfig_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_DataSource>()._has_bits_);
  static const ::perfetto::protos::DataSourceConfig& config(const TraceConfig_DataSource* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::DataSourceConfig&
TraceConfig_DataSource::_Internal::config(const TraceConfig_DataSource* msg) {
  return *msg->config_;
}
TraceConfig_DataSource::TraceConfig_DataSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.DataSource)
}
TraceConfig_DataSource::TraceConfig_DataSource(const TraceConfig_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      producer_name_filter_(from.producer_name_filter_),
      producer_name_regex_filter_(from.producer_name_regex_filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::perfetto::protos::DataSourceConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.DataSource)
}

void TraceConfig_DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  config_ = nullptr;
}

TraceConfig_DataSource::~TraceConfig_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.DataSource)
  SharedDtor();
}

void TraceConfig_DataSource::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
}

void TraceConfig_DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_DataSource& TraceConfig_DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_DataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producer_name_filter_.Clear();
  producer_name_regex_filter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(config_ != nullptr);
    config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string producer_name_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_producer_name_filter(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string producer_name_regex_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_producer_name_regex_filter(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_DataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.DataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.DataSourceConfig config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string producer_name_filter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_producer_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string producer_name_regex_filter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_producer_name_regex_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.DataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_DataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.DataSourceConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::config(this), output);
  }

  // repeated string producer_name_filter = 2;
  for (int i = 0, n = this->producer_name_filter_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->producer_name_filter(i), output);
  }

  // repeated string producer_name_regex_filter = 3;
  for (int i = 0, n = this->producer_name_regex_filter_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->producer_name_regex_filter(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.DataSource)
}

size_t TraceConfig_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.DataSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string producer_name_filter = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->producer_name_filter_size());
  for (int i = 0, n = this->producer_name_filter_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->producer_name_filter(i));
  }

  // repeated string producer_name_regex_filter = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->producer_name_regex_filter_size());
  for (int i = 0, n = this->producer_name_regex_filter_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->producer_name_regex_filter(i));
  }

  // optional .perfetto.protos.DataSourceConfig config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_DataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_DataSource*>(
      &from));
}

void TraceConfig_DataSource::MergeFrom(const TraceConfig_DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producer_name_filter_.MergeFrom(from.producer_name_filter_);
  producer_name_regex_filter_.MergeFrom(from.producer_name_regex_filter_);
  if (from.has_config()) {
    mutable_config()->::perfetto::protos::DataSourceConfig::MergeFrom(from.config());
  }
}

void TraceConfig_DataSource::CopyFrom(const TraceConfig_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_DataSource::IsInitialized() const {
  return true;
}

void TraceConfig_DataSource::InternalSwap(TraceConfig_DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  producer_name_filter_.InternalSwap(CastToBase(&other->producer_name_filter_));
  producer_name_regex_filter_.InternalSwap(CastToBase(&other->producer_name_regex_filter_));
  swap(config_, other->config_);
}

std::string TraceConfig_DataSource::GetTypeName() const {
  return "perfetto.protos.TraceConfig.DataSource";
}


// ===================================================================

void TraceConfig_BuiltinDataSource::InitAsDefaultInstance() {
}
class TraceConfig_BuiltinDataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BuiltinDataSource>()._has_bits_);
  static void set_has_disable_clock_snapshotting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disable_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_disable_service_events(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_trace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_snapshot_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}
TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(const TraceConfig_BuiltinDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disable_clock_snapshotting_, &from.disable_clock_snapshotting_,
    static_cast<size_t>(reinterpret_cast<char*>(&snapshot_interval_ms_) -
    reinterpret_cast<char*>(&disable_clock_snapshotting_)) + sizeof(snapshot_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}

void TraceConfig_BuiltinDataSource::SharedCtor() {
  ::memset(&disable_clock_snapshotting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snapshot_interval_ms_) -
      reinterpret_cast<char*>(&disable_clock_snapshotting_)) + sizeof(snapshot_interval_ms_));
}

TraceConfig_BuiltinDataSource::~TraceConfig_BuiltinDataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BuiltinDataSource)
  SharedDtor();
}

void TraceConfig_BuiltinDataSource::SharedDtor() {
}

void TraceConfig_BuiltinDataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_BuiltinDataSource& TraceConfig_BuiltinDataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_BuiltinDataSource_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_BuiltinDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&disable_clock_snapshotting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snapshot_interval_ms_) -
        reinterpret_cast<char*>(&disable_clock_snapshotting_)) + sizeof(snapshot_interval_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_BuiltinDataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool disable_clock_snapshotting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_disable_clock_snapshotting(&has_bits);
          disable_clock_snapshotting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_trace_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disable_trace_config(&has_bits);
          disable_trace_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_system_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_disable_system_info(&has_bits);
          disable_system_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_service_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_disable_service_events(&has_bits);
          disable_service_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BuiltinClock_IsValid(val))) {
            set_primary_trace_clock(static_cast<::perfetto::protos::BuiltinClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 snapshot_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_snapshot_interval_ms(&has_bits);
          snapshot_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_BuiltinDataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disable_clock_snapshotting = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_disable_clock_snapshotting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_clock_snapshotting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_trace_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_disable_trace_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_trace_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_system_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_disable_system_info(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_system_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_service_events = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_disable_service_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_service_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::BuiltinClock_IsValid(value)) {
            set_primary_trace_clock(static_cast< ::perfetto::protos::BuiltinClock >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 snapshot_interval_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_snapshot_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snapshot_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.BuiltinDataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.BuiltinDataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_BuiltinDataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disable_clock_snapshotting = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->disable_clock_snapshotting(), output);
  }

  // optional bool disable_trace_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->disable_trace_config(), output);
  }

  // optional bool disable_system_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->disable_system_info(), output);
  }

  // optional bool disable_service_events = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->disable_service_events(), output);
  }

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->primary_trace_clock(), output);
  }

  // optional uint32 snapshot_interval_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->snapshot_interval_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.BuiltinDataSource)
}

size_t TraceConfig_BuiltinDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool disable_clock_snapshotting = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool disable_trace_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool disable_system_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool disable_service_events = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->primary_trace_clock());
    }

    // optional uint32 snapshot_interval_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->snapshot_interval_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_BuiltinDataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_BuiltinDataSource*>(
      &from));
}

void TraceConfig_BuiltinDataSource::MergeFrom(const TraceConfig_BuiltinDataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      disable_clock_snapshotting_ = from.disable_clock_snapshotting_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_trace_config_ = from.disable_trace_config_;
    }
    if (cached_has_bits & 0x00000004u) {
      disable_system_info_ = from.disable_system_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      disable_service_events_ = from.disable_service_events_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_trace_clock_ = from.primary_trace_clock_;
    }
    if (cached_has_bits & 0x00000020u) {
      snapshot_interval_ms_ = from.snapshot_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_BuiltinDataSource::CopyFrom(const TraceConfig_BuiltinDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BuiltinDataSource::IsInitialized() const {
  return true;
}

void TraceConfig_BuiltinDataSource::InternalSwap(TraceConfig_BuiltinDataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disable_clock_snapshotting_, other->disable_clock_snapshotting_);
  swap(disable_trace_config_, other->disable_trace_config_);
  swap(disable_system_info_, other->disable_system_info_);
  swap(disable_service_events_, other->disable_service_events_);
  swap(primary_trace_clock_, other->primary_trace_clock_);
  swap(snapshot_interval_ms_, other->snapshot_interval_ms_);
}

std::string TraceConfig_BuiltinDataSource::GetTypeName() const {
  return "perfetto.protos.TraceConfig.BuiltinDataSource";
}


// ===================================================================

void TraceConfig_ProducerConfig::InitAsDefaultInstance() {
}
class TraceConfig_ProducerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_ProducerConfig>()._has_bits_);
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_ProducerConfig::TraceConfig_ProducerConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.ProducerConfig)
}
TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(const TraceConfig_ProducerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_producer_name()) {
    producer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.producer_name_);
  }
  ::memcpy(&shm_size_kb_, &from.shm_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_kb_) -
    reinterpret_cast<char*>(&shm_size_kb_)) + sizeof(page_size_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.ProducerConfig)
}

void TraceConfig_ProducerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shm_size_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_kb_) -
      reinterpret_cast<char*>(&shm_size_kb_)) + sizeof(page_size_kb_));
}

TraceConfig_ProducerConfig::~TraceConfig_ProducerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.ProducerConfig)
  SharedDtor();
}

void TraceConfig_ProducerConfig::SharedDtor() {
  producer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfig_ProducerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_ProducerConfig& TraceConfig_ProducerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_ProducerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_ProducerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.ProducerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    producer_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&shm_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_size_kb_) -
        reinterpret_cast<char*>(&shm_size_kb_)) + sizeof(page_size_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_ProducerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string producer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_producer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shm_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shm_size_kb(&has_bits);
          shm_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_page_size_kb(&has_bits);
          page_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_ProducerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.ProducerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string producer_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shm_size_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_shm_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shm_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_page_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.ProducerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.ProducerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_ProducerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.ProducerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string producer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->producer_name(), output);
  }

  // optional uint32 shm_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->shm_size_kb(), output);
  }

  // optional uint32 page_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->page_size_kb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.ProducerConfig)
}

size_t TraceConfig_ProducerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.ProducerConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string producer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->producer_name());
    }

    // optional uint32 shm_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->shm_size_kb());
    }

    // optional uint32 page_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->page_size_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_ProducerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_ProducerConfig*>(
      &from));
}

void TraceConfig_ProducerConfig::MergeFrom(const TraceConfig_ProducerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      producer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.producer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      shm_size_kb_ = from.shm_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      page_size_kb_ = from.page_size_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_ProducerConfig::CopyFrom(const TraceConfig_ProducerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_ProducerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_ProducerConfig::InternalSwap(TraceConfig_ProducerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  producer_name_.Swap(&other->producer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shm_size_kb_, other->shm_size_kb_);
  swap(page_size_kb_, other->page_size_kb_);
}

std::string TraceConfig_ProducerConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.ProducerConfig";
}


// ===================================================================

void TraceConfig_StatsdMetadata::InitAsDefaultInstance() {
}
class TraceConfig_StatsdMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_StatsdMetadata>()._has_bits_);
  static void set_has_triggering_alert_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_triggering_config_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_triggering_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_triggering_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}
TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(const TraceConfig_StatsdMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&triggering_alert_id_, &from.triggering_alert_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&triggering_config_uid_) -
    reinterpret_cast<char*>(&triggering_alert_id_)) + sizeof(triggering_config_uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}

void TraceConfig_StatsdMetadata::SharedCtor() {
  ::memset(&triggering_alert_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&triggering_config_uid_) -
      reinterpret_cast<char*>(&triggering_alert_id_)) + sizeof(triggering_config_uid_));
}

TraceConfig_StatsdMetadata::~TraceConfig_StatsdMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.StatsdMetadata)
  SharedDtor();
}

void TraceConfig_StatsdMetadata::SharedDtor() {
}

void TraceConfig_StatsdMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_StatsdMetadata& TraceConfig_StatsdMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_StatsdMetadata_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_StatsdMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&triggering_alert_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&triggering_config_uid_) -
        reinterpret_cast<char*>(&triggering_alert_id_)) + sizeof(triggering_config_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_StatsdMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 triggering_alert_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_triggering_alert_id(&has_bits);
          triggering_alert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 triggering_config_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_triggering_config_uid(&has_bits);
          triggering_config_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 triggering_config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_triggering_config_id(&has_bits);
          triggering_config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 triggering_subscription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_triggering_subscription_id(&has_bits);
          triggering_subscription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_StatsdMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.StatsdMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 triggering_alert_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_triggering_alert_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggering_alert_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 triggering_config_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_triggering_config_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggering_config_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 triggering_config_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_triggering_config_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggering_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 triggering_subscription_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_triggering_subscription_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggering_subscription_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.StatsdMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.StatsdMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_StatsdMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 triggering_alert_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->triggering_alert_id(), output);
  }

  // optional int32 triggering_config_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->triggering_config_uid(), output);
  }

  // optional int64 triggering_config_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->triggering_config_id(), output);
  }

  // optional int64 triggering_subscription_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->triggering_subscription_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.StatsdMetadata)
}

size_t TraceConfig_StatsdMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.StatsdMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 triggering_alert_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->triggering_alert_id());
    }

    // optional int64 triggering_config_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->triggering_config_id());
    }

    // optional int64 triggering_subscription_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->triggering_subscription_id());
    }

    // optional int32 triggering_config_uid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->triggering_config_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_StatsdMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_StatsdMetadata*>(
      &from));
}

void TraceConfig_StatsdMetadata::MergeFrom(const TraceConfig_StatsdMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      triggering_alert_id_ = from.triggering_alert_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      triggering_config_id_ = from.triggering_config_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      triggering_subscription_id_ = from.triggering_subscription_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      triggering_config_uid_ = from.triggering_config_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_StatsdMetadata::CopyFrom(const TraceConfig_StatsdMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_StatsdMetadata::IsInitialized() const {
  return true;
}

void TraceConfig_StatsdMetadata::InternalSwap(TraceConfig_StatsdMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(triggering_alert_id_, other->triggering_alert_id_);
  swap(triggering_config_id_, other->triggering_config_id_);
  swap(triggering_subscription_id_, other->triggering_subscription_id_);
  swap(triggering_config_uid_, other->triggering_config_uid_);
}

std::string TraceConfig_StatsdMetadata::GetTypeName() const {
  return "perfetto.protos.TraceConfig.StatsdMetadata";
}


// ===================================================================

void TraceConfig_GuardrailOverrides::InitAsDefaultInstance() {
}
class TraceConfig_GuardrailOverrides::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_GuardrailOverrides>()._has_bits_);
  static void set_has_max_upload_per_day_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}
TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(const TraceConfig_GuardrailOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_upload_per_day_bytes_ = from.max_upload_per_day_bytes_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}

void TraceConfig_GuardrailOverrides::SharedCtor() {
  max_upload_per_day_bytes_ = PROTOBUF_ULONGLONG(0);
}

TraceConfig_GuardrailOverrides::~TraceConfig_GuardrailOverrides() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.GuardrailOverrides)
  SharedDtor();
}

void TraceConfig_GuardrailOverrides::SharedDtor() {
}

void TraceConfig_GuardrailOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_GuardrailOverrides& TraceConfig_GuardrailOverrides::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_GuardrailOverrides_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_GuardrailOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_upload_per_day_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_GuardrailOverrides::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 max_upload_per_day_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_upload_per_day_bytes(&has_bits);
          max_upload_per_day_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_GuardrailOverrides::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 max_upload_per_day_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_max_upload_per_day_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_upload_per_day_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.GuardrailOverrides)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.GuardrailOverrides)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_GuardrailOverrides::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 max_upload_per_day_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->max_upload_per_day_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.GuardrailOverrides)
}

size_t TraceConfig_GuardrailOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 max_upload_per_day_bytes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_upload_per_day_bytes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_GuardrailOverrides::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_GuardrailOverrides*>(
      &from));
}

void TraceConfig_GuardrailOverrides::MergeFrom(const TraceConfig_GuardrailOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_upload_per_day_bytes()) {
    set_max_upload_per_day_bytes(from.max_upload_per_day_bytes());
  }
}

void TraceConfig_GuardrailOverrides::CopyFrom(const TraceConfig_GuardrailOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_GuardrailOverrides::IsInitialized() const {
  return true;
}

void TraceConfig_GuardrailOverrides::InternalSwap(TraceConfig_GuardrailOverrides* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_upload_per_day_bytes_, other->max_upload_per_day_bytes_);
}

std::string TraceConfig_GuardrailOverrides::GetTypeName() const {
  return "perfetto.protos.TraceConfig.GuardrailOverrides";
}


// ===================================================================

void TraceConfig_TriggerConfig_Trigger::InitAsDefaultInstance() {
}
class TraceConfig_TriggerConfig_Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig_Trigger>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_per_24_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}
TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(const TraceConfig_TriggerConfig_Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  producer_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_producer_name_regex()) {
    producer_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.producer_name_regex_);
  }
  ::memcpy(&stop_delay_ms_, &from.stop_delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_probability_) -
    reinterpret_cast<char*>(&stop_delay_ms_)) + sizeof(skip_probability_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}

void TraceConfig_TriggerConfig_Trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_delay_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_probability_) -
      reinterpret_cast<char*>(&stop_delay_ms_)) + sizeof(skip_probability_));
}

TraceConfig_TriggerConfig_Trigger::~TraceConfig_TriggerConfig_Trigger() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  SharedDtor();
}

void TraceConfig_TriggerConfig_Trigger::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_name_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfig_TriggerConfig_Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_TriggerConfig_Trigger& TraceConfig_TriggerConfig_Trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_TriggerConfig_Trigger_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_TriggerConfig_Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      producer_name_regex_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&stop_delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_probability_) -
        reinterpret_cast<char*>(&stop_delay_ms_)) + sizeof(skip_probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_TriggerConfig_Trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string producer_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_producer_name_regex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stop_delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stop_delay_ms(&has_bits);
          stop_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_per_24_h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_per_24_h(&has_bits);
          max_per_24_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double skip_probability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_skip_probability(&has_bits);
          skip_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_TriggerConfig_Trigger::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string producer_name_regex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_name_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stop_delay_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stop_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_per_24_h = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_per_24_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_per_24_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double skip_probability = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_skip_probability(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skip_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_TriggerConfig_Trigger::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string producer_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer_name_regex(), output);
  }

  // optional uint32 stop_delay_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->stop_delay_ms(), output);
  }

  // optional uint32 max_per_24_h = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->max_per_24_h(), output);
  }

  // optional double skip_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->skip_probability(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}

size_t TraceConfig_TriggerConfig_Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string producer_name_regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->producer_name_regex());
    }

    // optional uint32 stop_delay_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stop_delay_ms());
    }

    // optional uint32 max_per_24_h = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_per_24_h());
    }

    // optional double skip_probability = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TriggerConfig_Trigger::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_TriggerConfig_Trigger*>(
      &from));
}

void TraceConfig_TriggerConfig_Trigger::MergeFrom(const TraceConfig_TriggerConfig_Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      producer_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.producer_name_regex_);
    }
    if (cached_has_bits & 0x00000004u) {
      stop_delay_ms_ = from.stop_delay_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_per_24_h_ = from.max_per_24_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      skip_probability_ = from.skip_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_TriggerConfig_Trigger::CopyFrom(const TraceConfig_TriggerConfig_Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig_Trigger::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig_Trigger::InternalSwap(TraceConfig_TriggerConfig_Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  producer_name_regex_.Swap(&other->producer_name_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stop_delay_ms_, other->stop_delay_ms_);
  swap(max_per_24_h_, other->max_per_24_h_);
  swap(skip_probability_, other->skip_probability_);
}

std::string TraceConfig_TriggerConfig_Trigger::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TriggerConfig.Trigger";
}


// ===================================================================

void TraceConfig_TriggerConfig::InitAsDefaultInstance() {
}
class TraceConfig_TriggerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig>()._has_bits_);
  static void set_has_trigger_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trigger_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_TriggerConfig::TraceConfig_TriggerConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.TriggerConfig)
}
TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(const TraceConfig_TriggerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      triggers_(from.triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trigger_mode_, &from.trigger_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_timeout_ms_) -
    reinterpret_cast<char*>(&trigger_mode_)) + sizeof(trigger_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig)
}

void TraceConfig_TriggerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  ::memset(&trigger_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_timeout_ms_) -
      reinterpret_cast<char*>(&trigger_mode_)) + sizeof(trigger_timeout_ms_));
}

TraceConfig_TriggerConfig::~TraceConfig_TriggerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig)
  SharedDtor();
}

void TraceConfig_TriggerConfig::SharedDtor() {
}

void TraceConfig_TriggerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_TriggerConfig& TraceConfig_TriggerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_TriggerConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_TriggerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trigger_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_timeout_ms_) -
        reinterpret_cast<char*>(&trigger_mode_)) + sizeof(trigger_timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_TriggerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(val))) {
            set_trigger_mode(static_cast<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint32 trigger_timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trigger_timeout_ms(&has_bits);
          trigger_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_TriggerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.TriggerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(value)) {
            set_trigger_mode(static_cast< ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trigger_timeout_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trigger_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.TriggerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.TriggerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_TriggerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.TriggerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->trigger_mode(), output);
  }

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->triggers(static_cast<int>(i)),
      output);
  }

  // optional uint32 trigger_timeout_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->trigger_timeout_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.TriggerConfig)
}

size_t TraceConfig_TriggerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->triggers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trigger_mode());
    }

    // optional uint32 trigger_timeout_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trigger_timeout_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TriggerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_TriggerConfig*>(
      &from));
}

void TraceConfig_TriggerConfig::MergeFrom(const TraceConfig_TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggers_.MergeFrom(from.triggers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trigger_mode_ = from.trigger_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      trigger_timeout_ms_ = from.trigger_timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_TriggerConfig::CopyFrom(const TraceConfig_TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig::InternalSwap(TraceConfig_TriggerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&triggers_)->InternalSwap(CastToBase(&other->triggers_));
  swap(trigger_mode_, other->trigger_mode_);
  swap(trigger_timeout_ms_, other->trigger_timeout_ms_);
}

std::string TraceConfig_TriggerConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TriggerConfig";
}


// ===================================================================

void TraceConfig_IncrementalStateConfig::InitAsDefaultInstance() {
}
class TraceConfig_IncrementalStateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncrementalStateConfig>()._has_bits_);
  static void set_has_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}
TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(const TraceConfig_IncrementalStateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_period_ms_ = from.clear_period_ms_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}

void TraceConfig_IncrementalStateConfig::SharedCtor() {
  clear_period_ms_ = 0u;
}

TraceConfig_IncrementalStateConfig::~TraceConfig_IncrementalStateConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
  SharedDtor();
}

void TraceConfig_IncrementalStateConfig::SharedDtor() {
}

void TraceConfig_IncrementalStateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_IncrementalStateConfig& TraceConfig_IncrementalStateConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_IncrementalStateConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_IncrementalStateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_period_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_IncrementalStateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 clear_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clear_period_ms(&has_bits);
          clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_IncrementalStateConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clear_period_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_clear_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.IncrementalStateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.IncrementalStateConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_IncrementalStateConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clear_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->clear_period_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.IncrementalStateConfig)
}

size_t TraceConfig_IncrementalStateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 clear_period_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->clear_period_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_IncrementalStateConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_IncrementalStateConfig*>(
      &from));
}

void TraceConfig_IncrementalStateConfig::MergeFrom(const TraceConfig_IncrementalStateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clear_period_ms()) {
    set_clear_period_ms(from.clear_period_ms());
  }
}

void TraceConfig_IncrementalStateConfig::CopyFrom(const TraceConfig_IncrementalStateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncrementalStateConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncrementalStateConfig::InternalSwap(TraceConfig_IncrementalStateConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clear_period_ms_, other->clear_period_ms_);
}

std::string TraceConfig_IncrementalStateConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.IncrementalStateConfig";
}


// ===================================================================

void TraceConfig_IncidentReportConfig::InitAsDefaultInstance() {
}
class TraceConfig_IncidentReportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncidentReportConfig>()._has_bits_);
  static void set_has_destination_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_dropbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}
TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(const TraceConfig_IncidentReportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination_package()) {
    destination_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_package_);
  }
  destination_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination_class()) {
    destination_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_class_);
  }
  ::memcpy(&privacy_level_, &from.privacy_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_dropbox_) -
    reinterpret_cast<char*>(&privacy_level_)) + sizeof(skip_dropbox_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}

void TraceConfig_IncidentReportConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  destination_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&privacy_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_dropbox_) -
      reinterpret_cast<char*>(&privacy_level_)) + sizeof(skip_dropbox_));
}

TraceConfig_IncidentReportConfig::~TraceConfig_IncidentReportConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncidentReportConfig)
  SharedDtor();
}

void TraceConfig_IncidentReportConfig::SharedDtor() {
  destination_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfig_IncidentReportConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig_IncidentReportConfig& TraceConfig_IncidentReportConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_IncidentReportConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig_IncidentReportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      destination_package_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_class_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&privacy_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_dropbox_) -
        reinterpret_cast<char*>(&privacy_level_)) + sizeof(skip_dropbox_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig_IncidentReportConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string destination_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_destination_package(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string destination_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_destination_class(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 privacy_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_privacy_level(&has_bits);
          privacy_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_dropbox = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skip_dropbox(&has_bits);
          skip_dropbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig_IncidentReportConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string destination_package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string destination_class = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 privacy_level = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_privacy_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &privacy_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_dropbox = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_skip_dropbox(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_dropbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig.IncidentReportConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig.IncidentReportConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig_IncidentReportConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string destination_package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination_package(), output);
  }

  // optional string destination_class = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination_class(), output);
  }

  // optional int32 privacy_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->privacy_level(), output);
  }

  // optional bool skip_dropbox = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->skip_dropbox(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig.IncidentReportConfig)
}

size_t TraceConfig_IncidentReportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string destination_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->destination_package());
    }

    // optional string destination_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->destination_class());
    }

    // optional int32 privacy_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->privacy_level());
    }

    // optional bool skip_dropbox = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_IncidentReportConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig_IncidentReportConfig*>(
      &from));
}

void TraceConfig_IncidentReportConfig::MergeFrom(const TraceConfig_IncidentReportConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      destination_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_package_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      destination_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_class_);
    }
    if (cached_has_bits & 0x00000004u) {
      privacy_level_ = from.privacy_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      skip_dropbox_ = from.skip_dropbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig_IncidentReportConfig::CopyFrom(const TraceConfig_IncidentReportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncidentReportConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncidentReportConfig::InternalSwap(TraceConfig_IncidentReportConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  destination_package_.Swap(&other->destination_package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_class_.Swap(&other->destination_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(privacy_level_, other->privacy_level_);
  swap(skip_dropbox_, other->skip_dropbox_);
}

std::string TraceConfig_IncidentReportConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.IncidentReportConfig";
}


// ===================================================================

void TraceConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->builtin_data_sources_ = const_cast< ::perfetto::protos::TraceConfig_BuiltinDataSource*>(
      ::perfetto::protos::TraceConfig_BuiltinDataSource::internal_default_instance());
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->statsd_metadata_ = const_cast< ::perfetto::protos::TraceConfig_StatsdMetadata*>(
      ::perfetto::protos::TraceConfig_StatsdMetadata::internal_default_instance());
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->guardrail_overrides_ = const_cast< ::perfetto::protos::TraceConfig_GuardrailOverrides*>(
      ::perfetto::protos::TraceConfig_GuardrailOverrides::internal_default_instance());
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->trigger_config_ = const_cast< ::perfetto::protos::TraceConfig_TriggerConfig*>(
      ::perfetto::protos::TraceConfig_TriggerConfig::internal_default_instance());
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->incremental_state_config_ = const_cast< ::perfetto::protos::TraceConfig_IncrementalStateConfig*>(
      ::perfetto::protos::TraceConfig_IncrementalStateConfig::internal_default_instance());
  ::perfetto::protos::_TraceConfig_default_instance_._instance.get_mutable()->incident_report_config_ = const_cast< ::perfetto::protos::TraceConfig_IncidentReportConfig*>(
      ::perfetto::protos::TraceConfig_IncidentReportConfig::internal_default_instance());
}
class TraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig>()._has_bits_);
  static const ::perfetto::protos::TraceConfig_BuiltinDataSource& builtin_data_sources(const TraceConfig* msg);
  static void set_has_builtin_data_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enable_extra_guardrails(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lockdown_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::TraceConfig_StatsdMetadata& statsd_metadata(const TraceConfig* msg);
  static void set_has_statsd_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_write_into_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_write_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::TraceConfig_GuardrailOverrides& guardrail_overrides(const TraceConfig* msg);
  static void set_has_guardrail_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deferred_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_flush_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_flush_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_data_source_stop_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_notify_traceur(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bugreport_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::perfetto::protos::TraceConfig_TriggerConfig& trigger_config(const TraceConfig* msg);
  static void set_has_trigger_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::TraceConfig_IncrementalStateConfig& incremental_state_config(const TraceConfig* msg);
  static void set_has_incremental_state_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_allow_user_build_tracing(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_unique_session_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compression_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::perfetto::protos::TraceConfig_IncidentReportConfig& incident_report_config(const TraceConfig* msg);
  static void set_has_incident_report_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trace_uuid_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_trace_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::perfetto::protos::TraceConfig_BuiltinDataSource&
TraceConfig::_Internal::builtin_data_sources(const TraceConfig* msg) {
  return *msg->builtin_data_sources_;
}
const ::perfetto::protos::TraceConfig_StatsdMetadata&
TraceConfig::_Internal::statsd_metadata(const TraceConfig* msg) {
  return *msg->statsd_metadata_;
}
const ::perfetto::protos::TraceConfig_GuardrailOverrides&
TraceConfig::_Internal::guardrail_overrides(const TraceConfig* msg) {
  return *msg->guardrail_overrides_;
}
const ::perfetto::protos::TraceConfig_TriggerConfig&
TraceConfig::_Internal::trigger_config(const TraceConfig* msg) {
  return *msg->trigger_config_;
}
const ::perfetto::protos::TraceConfig_IncrementalStateConfig&
TraceConfig::_Internal::incremental_state_config(const TraceConfig* msg) {
  return *msg->incremental_state_config_;
}
const ::perfetto::protos::TraceConfig_IncidentReportConfig&
TraceConfig::_Internal::incident_report_config(const TraceConfig* msg) {
  return *msg->incident_report_config_;
}
TraceConfig::TraceConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buffers_(from.buffers_),
      data_sources_(from.data_sources_),
      producers_(from.producers_),
      activate_triggers_(from.activate_triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_session_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_session_name()) {
    unique_session_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_session_name_);
  }
  output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_path()) {
    output_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  if (from.has_statsd_metadata()) {
    statsd_metadata_ = new ::perfetto::protos::TraceConfig_StatsdMetadata(*from.statsd_metadata_);
  } else {
    statsd_metadata_ = nullptr;
  }
  if (from.has_guardrail_overrides()) {
    guardrail_overrides_ = new ::perfetto::protos::TraceConfig_GuardrailOverrides(*from.guardrail_overrides_);
  } else {
    guardrail_overrides_ = nullptr;
  }
  if (from.has_trigger_config()) {
    trigger_config_ = new ::perfetto::protos::TraceConfig_TriggerConfig(*from.trigger_config_);
  } else {
    trigger_config_ = nullptr;
  }
  if (from.has_builtin_data_sources()) {
    builtin_data_sources_ = new ::perfetto::protos::TraceConfig_BuiltinDataSource(*from.builtin_data_sources_);
  } else {
    builtin_data_sources_ = nullptr;
  }
  if (from.has_incremental_state_config()) {
    incremental_state_config_ = new ::perfetto::protos::TraceConfig_IncrementalStateConfig(*from.incremental_state_config_);
  } else {
    incremental_state_config_ = nullptr;
  }
  if (from.has_incident_report_config()) {
    incident_report_config_ = new ::perfetto::protos::TraceConfig_IncidentReportConfig(*from.incident_report_config_);
  } else {
    incident_report_config_ = nullptr;
  }
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_uuid_lsb_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(trace_uuid_lsb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig)
}

void TraceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  unique_session_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&statsd_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_uuid_lsb_) -
      reinterpret_cast<char*>(&statsd_metadata_)) + sizeof(trace_uuid_lsb_));
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig)
  SharedDtor();
}

void TraceConfig::SharedDtor() {
  unique_session_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete statsd_metadata_;
  if (this != internal_default_instance()) delete guardrail_overrides_;
  if (this != internal_default_instance()) delete trigger_config_;
  if (this != internal_default_instance()) delete builtin_data_sources_;
  if (this != internal_default_instance()) delete incremental_state_config_;
  if (this != internal_default_instance()) delete incident_report_config_;
}

void TraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig& TraceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_protos_2fperfetto_2fconfig_2fperfetto_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffers_.Clear();
  data_sources_.Clear();
  producers_.Clear();
  activate_triggers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      unique_session_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      output_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(statsd_metadata_ != nullptr);
      statsd_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(guardrail_overrides_ != nullptr);
      guardrail_overrides_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(trigger_config_ != nullptr);
      trigger_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(builtin_data_sources_ != nullptr);
      builtin_data_sources_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(incremental_state_config_ != nullptr);
      incremental_state_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(incident_report_config_ != nullptr);
      incident_report_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_file_size_bytes_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(max_file_size_bytes_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&flush_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_uuid_lsb_) -
        reinterpret_cast<char*>(&flush_period_ms_)) + sizeof(trace_uuid_lsb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_extra_guardrails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_extra_guardrails(&has_bits);
          enable_extra_guardrails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(val))) {
            set_lockdown_mode(static_cast<::perfetto::protos::TraceConfig_LockdownModeOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_statsd_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool write_into_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_write_into_file(&has_bits);
          write_into_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_write_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_file_write_period_ms(&has_bits);
          file_write_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_file_size_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_file_size_bytes(&has_bits);
          max_file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_guardrail_overrides(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deferred_start = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_deferred_start(&has_bits);
          deferred_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flush_period_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_flush_period_ms(&has_bits);
          flush_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flush_timeout_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_flush_timeout_ms(&has_bits);
          flush_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notify_traceur = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_notify_traceur(&has_bits);
          notify_traceur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_trigger_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string activate_triggers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_activate_triggers(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // optional bool allow_user_build_tracing = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_allow_user_build_tracing(&has_bits);
          allow_user_build_tracing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_builtin_data_sources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_incremental_state_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unique_session_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_unique_session_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_source_stop_timeout_ms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_data_source_stop_timeout_ms(&has_bits);
          data_source_stop_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_CompressionType_IsValid(val))) {
            set_compression_type(static_cast<::perfetto::protos::TraceConfig_CompressionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_incident_report_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trace_uuid_msb = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_trace_uuid_msb(&has_bits);
          trace_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trace_uuid_lsb = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_trace_uuid_lsb(&has_bits);
          trace_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_output_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bugreport_score = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_bugreport_score(&has_bits);
          bugreport_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_buffers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_extra_guardrails = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_enable_extra_guardrails(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_extra_guardrails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(value)) {
            set_lockdown_mode(static_cast< ::perfetto::protos::TraceConfig_LockdownModeOperation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_producers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_statsd_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool write_into_file = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_write_into_file(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_into_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_write_period_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_file_write_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_write_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_file_size_bytes = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_file_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_file_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_guardrail_overrides()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deferred_start = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_deferred_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deferred_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flush_period_ms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_flush_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flush_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flush_timeout_ms = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_flush_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flush_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_traceur = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_notify_traceur(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_traceur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string activate_triggers = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_activate_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_user_build_tracing = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_allow_user_build_tracing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_user_build_tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_builtin_data_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incremental_state_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unique_session_name = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_session_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_source_stop_timeout_ms = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_data_source_stop_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_source_stop_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TraceConfig_CompressionType_IsValid(value)) {
            set_compression_type(static_cast< ::perfetto::protos::TraceConfig_CompressionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(192u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incident_report_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trace_uuid_msb = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_trace_uuid_msb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_uuid_msb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trace_uuid_lsb = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_trace_uuid_lsb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_uuid_lsb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string output_path = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_output_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bugreport_score = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_bugreport_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bugreport_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->buffers(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_sources_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->data_sources(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration_ms = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->duration_ms(), output);
  }

  // optional bool enable_extra_guardrails = 4;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_extra_guardrails(), output);
  }

  // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->lockdown_mode(), output);
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->producers(static_cast<int>(i)),
      output);
  }

  // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::statsd_metadata(this), output);
  }

  // optional bool write_into_file = 8;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->write_into_file(), output);
  }

  // optional uint32 file_write_period_ms = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->file_write_period_ms(), output);
  }

  // optional uint64 max_file_size_bytes = 10;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->max_file_size_bytes(), output);
  }

  // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::guardrail_overrides(this), output);
  }

  // optional bool deferred_start = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->deferred_start(), output);
  }

  // optional uint32 flush_period_ms = 13;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->flush_period_ms(), output);
  }

  // optional uint32 flush_timeout_ms = 14;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->flush_timeout_ms(), output);
  }

  // optional bool notify_traceur = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->notify_traceur(), output);
  }

  // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::trigger_config(this), output);
  }

  // repeated string activate_triggers = 18;
  for (int i = 0, n = this->activate_triggers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      18, this->activate_triggers(i), output);
  }

  // optional bool allow_user_build_tracing = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->allow_user_build_tracing(), output);
  }

  // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::builtin_data_sources(this), output);
  }

  // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::incremental_state_config(this), output);
  }

  // optional string unique_session_name = 22;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->unique_session_name(), output);
  }

  // optional uint32 data_source_stop_timeout_ms = 23;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(23, this->data_source_stop_timeout_ms(), output);
  }

  // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      24, this->compression_type(), output);
  }

  // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::incident_report_config(this), output);
  }

  // optional int64 trace_uuid_msb = 27;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(27, this->trace_uuid_msb(), output);
  }

  // optional int64 trace_uuid_lsb = 28;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->trace_uuid_lsb(), output);
  }

  // optional string output_path = 29;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->output_path(), output);
  }

  // optional int32 bugreport_score = 30;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->bugreport_score(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceConfig)
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buffers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->buffers(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_sources(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->producers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->producers(static_cast<int>(i)));
    }
  }

  // repeated string activate_triggers = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->activate_triggers_size());
  for (int i = 0, n = this->activate_triggers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->activate_triggers(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_session_name = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_session_name());
    }

    // optional string output_path = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->output_path());
    }

    // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statsd_metadata_);
    }

    // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guardrail_overrides_);
    }

    // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_config_);
    }

    // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *builtin_data_sources_);
    }

    // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incremental_state_config_);
    }

    // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incident_report_config_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 duration_ms = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->duration_ms());
    }

    // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lockdown_mode());
    }

    // optional uint32 file_write_period_ms = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->file_write_period_ms());
    }

    // optional bool enable_extra_guardrails = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool write_into_file = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool deferred_start = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool notify_traceur = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint64 max_file_size_bytes = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_file_size_bytes());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 flush_period_ms = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->flush_period_ms());
    }

    // optional uint32 flush_timeout_ms = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->flush_timeout_ms());
    }

    // optional bool allow_user_build_tracing = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 data_source_stop_timeout_ms = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_source_stop_timeout_ms());
    }

    // optional int64 trace_uuid_msb = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trace_uuid_msb());
    }

    // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compression_type());
    }

    // optional int32 bugreport_score = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bugreport_score());
    }

    // optional int64 trace_uuid_lsb = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trace_uuid_lsb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceConfig*>(
      &from));
}

void TraceConfig::MergeFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffers_.MergeFrom(from.buffers_);
  data_sources_.MergeFrom(from.data_sources_);
  producers_.MergeFrom(from.producers_);
  activate_triggers_.MergeFrom(from.activate_triggers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_session_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_session_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      output_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_statsd_metadata()->::perfetto::protos::TraceConfig_StatsdMetadata::MergeFrom(from.statsd_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_guardrail_overrides()->::perfetto::protos::TraceConfig_GuardrailOverrides::MergeFrom(from.guardrail_overrides());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_trigger_config()->::perfetto::protos::TraceConfig_TriggerConfig::MergeFrom(from.trigger_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_builtin_data_sources()->::perfetto::protos::TraceConfig_BuiltinDataSource::MergeFrom(from.builtin_data_sources());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_incremental_state_config()->::perfetto::protos::TraceConfig_IncrementalStateConfig::MergeFrom(from.incremental_state_config());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_incident_report_config()->::perfetto::protos::TraceConfig_IncidentReportConfig::MergeFrom(from.incident_report_config());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      lockdown_mode_ = from.lockdown_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      file_write_period_ms_ = from.file_write_period_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_extra_guardrails_ = from.enable_extra_guardrails_;
    }
    if (cached_has_bits & 0x00001000u) {
      write_into_file_ = from.write_into_file_;
    }
    if (cached_has_bits & 0x00002000u) {
      deferred_start_ = from.deferred_start_;
    }
    if (cached_has_bits & 0x00004000u) {
      notify_traceur_ = from.notify_traceur_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_file_size_bytes_ = from.max_file_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      flush_period_ms_ = from.flush_period_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      flush_timeout_ms_ = from.flush_timeout_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      allow_user_build_tracing_ = from.allow_user_build_tracing_;
    }
    if (cached_has_bits & 0x00080000u) {
      data_source_stop_timeout_ms_ = from.data_source_stop_timeout_ms_;
    }
    if (cached_has_bits & 0x00100000u) {
      trace_uuid_msb_ = from.trace_uuid_msb_;
    }
    if (cached_has_bits & 0x00200000u) {
      compression_type_ = from.compression_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      bugreport_score_ = from.bugreport_score_;
    }
    if (cached_has_bits & 0x00800000u) {
      trace_uuid_lsb_ = from.trace_uuid_lsb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&buffers_)->InternalSwap(CastToBase(&other->buffers_));
  CastToBase(&data_sources_)->InternalSwap(CastToBase(&other->data_sources_));
  CastToBase(&producers_)->InternalSwap(CastToBase(&other->producers_));
  activate_triggers_.InternalSwap(CastToBase(&other->activate_triggers_));
  unique_session_name_.Swap(&other->unique_session_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_path_.Swap(&other->output_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(statsd_metadata_, other->statsd_metadata_);
  swap(guardrail_overrides_, other->guardrail_overrides_);
  swap(trigger_config_, other->trigger_config_);
  swap(builtin_data_sources_, other->builtin_data_sources_);
  swap(incremental_state_config_, other->incremental_state_config_);
  swap(incident_report_config_, other->incident_report_config_);
  swap(duration_ms_, other->duration_ms_);
  swap(lockdown_mode_, other->lockdown_mode_);
  swap(file_write_period_ms_, other->file_write_period_ms_);
  swap(enable_extra_guardrails_, other->enable_extra_guardrails_);
  swap(write_into_file_, other->write_into_file_);
  swap(deferred_start_, other->deferred_start_);
  swap(notify_traceur_, other->notify_traceur_);
  swap(max_file_size_bytes_, other->max_file_size_bytes_);
  swap(flush_period_ms_, other->flush_period_ms_);
  swap(flush_timeout_ms_, other->flush_timeout_ms_);
  swap(allow_user_build_tracing_, other->allow_user_build_tracing_);
  swap(data_source_stop_timeout_ms_, other->data_source_stop_timeout_ms_);
  swap(trace_uuid_msb_, other->trace_uuid_msb_);
  swap(compression_type_, other->compression_type_);
  swap(bugreport_score_, other->bugreport_score_);
  swap(trace_uuid_lsb_, other->trace_uuid_lsb_);
}

std::string TraceConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEventCategory* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEventCategory >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEventCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEventDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEventDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEventDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DataSourceDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::DataSourceDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::DataSourceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_Producer* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_Producer >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState_Producer >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_DataSource* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_DataSource >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidLogConfig* Arena::CreateMaybeMessage< ::perfetto::protos::AndroidLogConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::AndroidLogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidPolledStateConfig* Arena::CreateMaybeMessage< ::perfetto::protos::AndroidPolledStateConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::AndroidPolledStateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PackagesListConfig* Arena::CreateMaybeMessage< ::perfetto::protos::PackagesListConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PackagesListConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeConfig* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_CompactSchedConfig* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterConfig* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryConfig* Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::VulkanMemoryConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileConfig* Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::InodeFileConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ConsoleConfig* Arena::CreateMaybeMessage< ::perfetto::protos::ConsoleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ConsoleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InterceptorConfig* Arena::CreateMaybeMessage< ::perfetto::protos::InterceptorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::InterceptorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidPowerConfig* Arena::CreateMaybeMessage< ::perfetto::protos::AndroidPowerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::AndroidPowerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStatsConfig* Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStatsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ProcessStatsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig* Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::HeapprofdConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage< ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::JavaHprofConfig* Arena::CreateMaybeMessage< ::perfetto::protos::JavaHprofConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::JavaHprofConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Timebase* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Timebase >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_Timebase >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_CallstackSampling >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_CallstackSampling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Scope >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_Scope >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Tracepoint* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Tracepoint >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_Tracepoint >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStatsConfig* Arena::CreateMaybeMessage< ::perfetto::protos::SysStatsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStatsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestConfig_DummyFields* Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig_DummyFields >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestConfig_DummyFields >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEventConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEventConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEventConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DataSourceConfig* Arena::CreateMaybeMessage< ::perfetto::protos::DataSourceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::DataSourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BufferConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BufferConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_BufferConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_DataSource* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_DataSource >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BuiltinDataSource* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BuiltinDataSource >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_BuiltinDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_ProducerConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_ProducerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_ProducerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_StatsdMetadata* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_StatsdMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_StatsdMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_GuardrailOverrides* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_GuardrailOverrides >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_GuardrailOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_TriggerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncrementalStateConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncidentReportConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncidentReportConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig_IncidentReportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
