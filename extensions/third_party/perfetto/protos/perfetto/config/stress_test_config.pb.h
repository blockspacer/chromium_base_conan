// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/stress_test_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/config/trace_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class StressTestConfig;
class StressTestConfigDefaultTypeInternal;
extern StressTestConfigDefaultTypeInternal _StressTestConfig_default_instance_;
class StressTestConfig_WriterTiming;
class StressTestConfig_WriterTimingDefaultTypeInternal;
extern StressTestConfig_WriterTimingDefaultTypeInternal _StressTestConfig_WriterTiming_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::StressTestConfig* Arena::CreateMaybeMessage<::perfetto::protos::StressTestConfig>(Arena*);
template<> ::perfetto::protos::StressTestConfig_WriterTiming* Arena::CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class StressTestConfig_WriterTiming :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StressTestConfig.WriterTiming) */ {
 public:
  StressTestConfig_WriterTiming();
  virtual ~StressTestConfig_WriterTiming();

  StressTestConfig_WriterTiming(const StressTestConfig_WriterTiming& from);
  StressTestConfig_WriterTiming(StressTestConfig_WriterTiming&& from) noexcept
    : StressTestConfig_WriterTiming() {
    *this = ::std::move(from);
  }

  inline StressTestConfig_WriterTiming& operator=(const StressTestConfig_WriterTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline StressTestConfig_WriterTiming& operator=(StressTestConfig_WriterTiming&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StressTestConfig_WriterTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StressTestConfig_WriterTiming* internal_default_instance() {
    return reinterpret_cast<const StressTestConfig_WriterTiming*>(
               &_StressTestConfig_WriterTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StressTestConfig_WriterTiming& a, StressTestConfig_WriterTiming& b) {
    a.Swap(&b);
  }
  inline void Swap(StressTestConfig_WriterTiming* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StressTestConfig_WriterTiming* New() const final {
    return CreateMaybeMessage<StressTestConfig_WriterTiming>(nullptr);
  }

  StressTestConfig_WriterTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StressTestConfig_WriterTiming>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StressTestConfig_WriterTiming& from);
  void MergeFrom(const StressTestConfig_WriterTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StressTestConfig_WriterTiming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StressTestConfig.WriterTiming";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadMeanFieldNumber = 1,
    kPayloadStddevFieldNumber = 2,
    kRateMeanFieldNumber = 3,
    kRateStddevFieldNumber = 4,
    kPayloadWriteTimeMsFieldNumber = 5,
  };
  // optional double payload_mean = 1;
  bool has_payload_mean() const;
  void clear_payload_mean();
  double payload_mean() const;
  void set_payload_mean(double value);

  // optional double payload_stddev = 2;
  bool has_payload_stddev() const;
  void clear_payload_stddev();
  double payload_stddev() const;
  void set_payload_stddev(double value);

  // optional double rate_mean = 3;
  bool has_rate_mean() const;
  void clear_rate_mean();
  double rate_mean() const;
  void set_rate_mean(double value);

  // optional double rate_stddev = 4;
  bool has_rate_stddev() const;
  void clear_rate_stddev();
  double rate_stddev() const;
  void set_rate_stddev(double value);

  // optional uint32 payload_write_time_ms = 5;
  bool has_payload_write_time_ms() const;
  void clear_payload_write_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_write_time_ms() const;
  void set_payload_write_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig.WriterTiming)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double payload_mean_;
  double payload_stddev_;
  double rate_mean_;
  double rate_stddev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_write_time_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StressTestConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StressTestConfig) */ {
 public:
  StressTestConfig();
  virtual ~StressTestConfig();

  StressTestConfig(const StressTestConfig& from);
  StressTestConfig(StressTestConfig&& from) noexcept
    : StressTestConfig() {
    *this = ::std::move(from);
  }

  inline StressTestConfig& operator=(const StressTestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StressTestConfig& operator=(StressTestConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StressTestConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StressTestConfig* internal_default_instance() {
    return reinterpret_cast<const StressTestConfig*>(
               &_StressTestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StressTestConfig& a, StressTestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StressTestConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StressTestConfig* New() const final {
    return CreateMaybeMessage<StressTestConfig>(nullptr);
  }

  StressTestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StressTestConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StressTestConfig& from);
  void MergeFrom(const StressTestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StressTestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StressTestConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StressTestConfig_WriterTiming WriterTiming;

  // accessors -------------------------------------------------------

  enum : int {
    kTraceConfigFieldNumber = 1,
    kSteadyStateTimingsFieldNumber = 8,
    kBurstTimingsFieldNumber = 11,
    kShmemSizeKbFieldNumber = 2,
    kShmemPageSizeKbFieldNumber = 3,
    kNumProcessesFieldNumber = 4,
    kNumThreadsFieldNumber = 5,
    kMaxEventsFieldNumber = 6,
    kNestingFieldNumber = 7,
    kBurstPeriodMsFieldNumber = 9,
    kBurstDurationMsFieldNumber = 10,
  };
  // optional .perfetto.protos.TraceConfig trace_config = 1;
  bool has_trace_config() const;
  void clear_trace_config();
  const ::perfetto::protos::TraceConfig& trace_config() const;
  ::perfetto::protos::TraceConfig* release_trace_config();
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);

  // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
  bool has_steady_state_timings() const;
  void clear_steady_state_timings();
  const ::perfetto::protos::StressTestConfig_WriterTiming& steady_state_timings() const;
  ::perfetto::protos::StressTestConfig_WriterTiming* release_steady_state_timings();
  ::perfetto::protos::StressTestConfig_WriterTiming* mutable_steady_state_timings();
  void set_allocated_steady_state_timings(::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings);

  // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
  bool has_burst_timings() const;
  void clear_burst_timings();
  const ::perfetto::protos::StressTestConfig_WriterTiming& burst_timings() const;
  ::perfetto::protos::StressTestConfig_WriterTiming* release_burst_timings();
  ::perfetto::protos::StressTestConfig_WriterTiming* mutable_burst_timings();
  void set_allocated_burst_timings(::perfetto::protos::StressTestConfig_WriterTiming* burst_timings);

  // optional uint32 shmem_size_kb = 2;
  bool has_shmem_size_kb() const;
  void clear_shmem_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 shmem_size_kb() const;
  void set_shmem_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 shmem_page_size_kb = 3;
  bool has_shmem_page_size_kb() const;
  void clear_shmem_page_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 shmem_page_size_kb() const;
  void set_shmem_page_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_processes = 4;
  bool has_num_processes() const;
  void clear_num_processes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_processes() const;
  void set_num_processes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_threads = 5;
  bool has_num_threads() const;
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_events = 6;
  bool has_max_events() const;
  void clear_max_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_events() const;
  void set_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nesting = 7;
  bool has_nesting() const;
  void clear_nesting();
  ::PROTOBUF_NAMESPACE_ID::uint32 nesting() const;
  void set_nesting(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 burst_period_ms = 9;
  bool has_burst_period_ms() const;
  void clear_burst_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 burst_period_ms() const;
  void set_burst_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 burst_duration_ms = 10;
  bool has_burst_duration_ms() const;
  void clear_burst_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 burst_duration_ms() const;
  void set_burst_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::TraceConfig* trace_config_;
  ::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings_;
  ::perfetto::protos::StressTestConfig_WriterTiming* burst_timings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shmem_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shmem_page_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_processes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nesting_;
  ::PROTOBUF_NAMESPACE_ID::uint32 burst_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 burst_duration_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StressTestConfig_WriterTiming

// optional double payload_mean = 1;
inline bool StressTestConfig_WriterTiming::has_payload_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StressTestConfig_WriterTiming::clear_payload_mean() {
  payload_mean_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double StressTestConfig_WriterTiming::payload_mean() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_mean)
  return payload_mean_;
}
inline void StressTestConfig_WriterTiming::set_payload_mean(double value) {
  _has_bits_[0] |= 0x00000001u;
  payload_mean_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_mean)
}

// optional double payload_stddev = 2;
inline bool StressTestConfig_WriterTiming::has_payload_stddev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StressTestConfig_WriterTiming::clear_payload_stddev() {
  payload_stddev_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double StressTestConfig_WriterTiming::payload_stddev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_stddev)
  return payload_stddev_;
}
inline void StressTestConfig_WriterTiming::set_payload_stddev(double value) {
  _has_bits_[0] |= 0x00000002u;
  payload_stddev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_stddev)
}

// optional double rate_mean = 3;
inline bool StressTestConfig_WriterTiming::has_rate_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StressTestConfig_WriterTiming::clear_rate_mean() {
  rate_mean_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double StressTestConfig_WriterTiming::rate_mean() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.rate_mean)
  return rate_mean_;
}
inline void StressTestConfig_WriterTiming::set_rate_mean(double value) {
  _has_bits_[0] |= 0x00000004u;
  rate_mean_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.rate_mean)
}

// optional double rate_stddev = 4;
inline bool StressTestConfig_WriterTiming::has_rate_stddev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StressTestConfig_WriterTiming::clear_rate_stddev() {
  rate_stddev_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double StressTestConfig_WriterTiming::rate_stddev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.rate_stddev)
  return rate_stddev_;
}
inline void StressTestConfig_WriterTiming::set_rate_stddev(double value) {
  _has_bits_[0] |= 0x00000008u;
  rate_stddev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.rate_stddev)
}

// optional uint32 payload_write_time_ms = 5;
inline bool StressTestConfig_WriterTiming::has_payload_write_time_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StressTestConfig_WriterTiming::clear_payload_write_time_ms() {
  payload_write_time_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig_WriterTiming::payload_write_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_write_time_ms)
  return payload_write_time_ms_;
}
inline void StressTestConfig_WriterTiming::set_payload_write_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  payload_write_time_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_write_time_ms)
}

// -------------------------------------------------------------------

// StressTestConfig

// optional .perfetto.protos.TraceConfig trace_config = 1;
inline bool StressTestConfig::has_trace_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perfetto::protos::TraceConfig& StressTestConfig::trace_config() const {
  const ::perfetto::protos::TraceConfig* p = trace_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.trace_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TraceConfig*>(
      &::perfetto::protos::_TraceConfig_default_instance_);
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.trace_config)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TraceConfig* temp = trace_config_;
  trace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::mutable_trace_config() {
  _has_bits_[0] |= 0x00000001u;
  if (trace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig>(GetArenaNoVirtual());
    trace_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.trace_config)
  return trace_config_;
}
inline void StressTestConfig::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config_);
  }
  if (trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_config_ = trace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.trace_config)
}

// optional uint32 shmem_size_kb = 2;
inline bool StressTestConfig::has_shmem_size_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StressTestConfig::clear_shmem_size_kb() {
  shmem_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::shmem_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.shmem_size_kb)
  return shmem_size_kb_;
}
inline void StressTestConfig::set_shmem_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  shmem_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.shmem_size_kb)
}

// optional uint32 shmem_page_size_kb = 3;
inline bool StressTestConfig::has_shmem_page_size_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StressTestConfig::clear_shmem_page_size_kb() {
  shmem_page_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::shmem_page_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.shmem_page_size_kb)
  return shmem_page_size_kb_;
}
inline void StressTestConfig::set_shmem_page_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  shmem_page_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.shmem_page_size_kb)
}

// optional uint32 num_processes = 4;
inline bool StressTestConfig::has_num_processes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StressTestConfig::clear_num_processes() {
  num_processes_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::num_processes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.num_processes)
  return num_processes_;
}
inline void StressTestConfig::set_num_processes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_processes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.num_processes)
}

// optional uint32 num_threads = 5;
inline bool StressTestConfig::has_num_threads() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StressTestConfig::clear_num_threads() {
  num_threads_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.num_threads)
  return num_threads_;
}
inline void StressTestConfig::set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.num_threads)
}

// optional uint32 max_events = 6;
inline bool StressTestConfig::has_max_events() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StressTestConfig::clear_max_events() {
  max_events_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::max_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.max_events)
  return max_events_;
}
inline void StressTestConfig::set_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_events_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.max_events)
}

// optional uint32 nesting = 7;
inline bool StressTestConfig::has_nesting() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StressTestConfig::clear_nesting() {
  nesting_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::nesting() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.nesting)
  return nesting_;
}
inline void StressTestConfig::set_nesting(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  nesting_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.nesting)
}

// optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
inline bool StressTestConfig::has_steady_state_timings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StressTestConfig::clear_steady_state_timings() {
  if (steady_state_timings_ != nullptr) steady_state_timings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::steady_state_timings() const {
  const ::perfetto::protos::StressTestConfig_WriterTiming* p = steady_state_timings_;
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.steady_state_timings)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::StressTestConfig_WriterTiming*>(
      &::perfetto::protos::_StressTestConfig_WriterTiming_default_instance_);
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::release_steady_state_timings() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.steady_state_timings)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = steady_state_timings_;
  steady_state_timings_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::mutable_steady_state_timings() {
  _has_bits_[0] |= 0x00000002u;
  if (steady_state_timings_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(GetArenaNoVirtual());
    steady_state_timings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.steady_state_timings)
  return steady_state_timings_;
}
inline void StressTestConfig::set_allocated_steady_state_timings(::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steady_state_timings_;
  }
  if (steady_state_timings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steady_state_timings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steady_state_timings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steady_state_timings_ = steady_state_timings;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.steady_state_timings)
}

// optional uint32 burst_period_ms = 9;
inline bool StressTestConfig::has_burst_period_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StressTestConfig::clear_burst_period_ms() {
  burst_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::burst_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_period_ms)
  return burst_period_ms_;
}
inline void StressTestConfig::set_burst_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  burst_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.burst_period_ms)
}

// optional uint32 burst_duration_ms = 10;
inline bool StressTestConfig::has_burst_duration_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StressTestConfig::clear_burst_duration_ms() {
  burst_duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StressTestConfig::burst_duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_duration_ms)
  return burst_duration_ms_;
}
inline void StressTestConfig::set_burst_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  burst_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.burst_duration_ms)
}

// optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
inline bool StressTestConfig::has_burst_timings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StressTestConfig::clear_burst_timings() {
  if (burst_timings_ != nullptr) burst_timings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::burst_timings() const {
  const ::perfetto::protos::StressTestConfig_WriterTiming* p = burst_timings_;
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_timings)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::StressTestConfig_WriterTiming*>(
      &::perfetto::protos::_StressTestConfig_WriterTiming_default_instance_);
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::release_burst_timings() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.burst_timings)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = burst_timings_;
  burst_timings_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::mutable_burst_timings() {
  _has_bits_[0] |= 0x00000004u;
  if (burst_timings_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(GetArenaNoVirtual());
    burst_timings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.burst_timings)
  return burst_timings_;
}
inline void StressTestConfig::set_allocated_burst_timings(::perfetto::protos::StressTestConfig_WriterTiming* burst_timings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete burst_timings_;
  }
  if (burst_timings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      burst_timings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, burst_timings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  burst_timings_ = burst_timings;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.burst_timings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
