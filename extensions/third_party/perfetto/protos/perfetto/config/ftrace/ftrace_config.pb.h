// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/ftrace/ftrace_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class FtraceConfig;
class FtraceConfigDefaultTypeInternal;
extern FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
class FtraceConfig_CompactSchedConfig;
class FtraceConfig_CompactSchedConfigDefaultTypeInternal;
extern FtraceConfig_CompactSchedConfigDefaultTypeInternal _FtraceConfig_CompactSchedConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig>(Arena*);
template<> ::perfetto::protos::FtraceConfig_CompactSchedConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class FtraceConfig_CompactSchedConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.CompactSchedConfig) */ {
 public:
  FtraceConfig_CompactSchedConfig();
  virtual ~FtraceConfig_CompactSchedConfig();

  FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from);
  FtraceConfig_CompactSchedConfig(FtraceConfig_CompactSchedConfig&& from) noexcept
    : FtraceConfig_CompactSchedConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_CompactSchedConfig& operator=(const FtraceConfig_CompactSchedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_CompactSchedConfig& operator=(FtraceConfig_CompactSchedConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceConfig_CompactSchedConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceConfig_CompactSchedConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_CompactSchedConfig*>(
               &_FtraceConfig_CompactSchedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceConfig_CompactSchedConfig& a, FtraceConfig_CompactSchedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_CompactSchedConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceConfig_CompactSchedConfig* New() const final {
    return CreateMaybeMessage<FtraceConfig_CompactSchedConfig>(nullptr);
  }

  FtraceConfig_CompactSchedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceConfig_CompactSchedConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceConfig_CompactSchedConfig& from);
  void MergeFrom(const FtraceConfig_CompactSchedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceConfig_CompactSchedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceConfig.CompactSchedConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.CompactSchedConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FtraceConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig) */ {
 public:
  FtraceConfig();
  virtual ~FtraceConfig();

  FtraceConfig(const FtraceConfig& from);
  FtraceConfig(FtraceConfig&& from) noexcept
    : FtraceConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig& operator=(const FtraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig& operator=(FtraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig*>(
               &_FtraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceConfig& a, FtraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceConfig* New() const final {
    return CreateMaybeMessage<FtraceConfig>(nullptr);
  }

  FtraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceConfig& from);
  void MergeFrom(const FtraceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FtraceConfig_CompactSchedConfig CompactSchedConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kFtraceEventsFieldNumber = 1,
    kAtraceCategoriesFieldNumber = 2,
    kAtraceAppsFieldNumber = 3,
    kCompactSchedFieldNumber = 12,
    kSymbolizeKsymsFieldNumber = 13,
    kInitializeKsymsSynchronouslyForTestingFieldNumber = 14,
    kBufferSizeKbFieldNumber = 10,
    kDrainPeriodMsFieldNumber = 11,
  };
  // repeated string ftrace_events = 1;
  int ftrace_events_size() const;
  void clear_ftrace_events();
  const std::string& ftrace_events(int index) const;
  std::string* mutable_ftrace_events(int index);
  void set_ftrace_events(int index, const std::string& value);
  void set_ftrace_events(int index, std::string&& value);
  void set_ftrace_events(int index, const char* value);
  void set_ftrace_events(int index, const char* value, size_t size);
  std::string* add_ftrace_events();
  void add_ftrace_events(const std::string& value);
  void add_ftrace_events(std::string&& value);
  void add_ftrace_events(const char* value);
  void add_ftrace_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ftrace_events();

  // repeated string atrace_categories = 2;
  int atrace_categories_size() const;
  void clear_atrace_categories();
  const std::string& atrace_categories(int index) const;
  std::string* mutable_atrace_categories(int index);
  void set_atrace_categories(int index, const std::string& value);
  void set_atrace_categories(int index, std::string&& value);
  void set_atrace_categories(int index, const char* value);
  void set_atrace_categories(int index, const char* value, size_t size);
  std::string* add_atrace_categories();
  void add_atrace_categories(const std::string& value);
  void add_atrace_categories(std::string&& value);
  void add_atrace_categories(const char* value);
  void add_atrace_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_categories();

  // repeated string atrace_apps = 3;
  int atrace_apps_size() const;
  void clear_atrace_apps();
  const std::string& atrace_apps(int index) const;
  std::string* mutable_atrace_apps(int index);
  void set_atrace_apps(int index, const std::string& value);
  void set_atrace_apps(int index, std::string&& value);
  void set_atrace_apps(int index, const char* value);
  void set_atrace_apps(int index, const char* value, size_t size);
  std::string* add_atrace_apps();
  void add_atrace_apps(const std::string& value);
  void add_atrace_apps(std::string&& value);
  void add_atrace_apps(const char* value);
  void add_atrace_apps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_apps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_apps();

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  bool has_compact_sched() const;
  void clear_compact_sched();
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched() const;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* release_compact_sched();
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched);

  // optional bool symbolize_ksyms = 13;
  bool has_symbolize_ksyms() const;
  void clear_symbolize_ksyms();
  bool symbolize_ksyms() const;
  void set_symbolize_ksyms(bool value);

  // optional bool initialize_ksyms_synchronously_for_testing = 14;
  bool has_initialize_ksyms_synchronously_for_testing() const;
  void clear_initialize_ksyms_synchronously_for_testing();
  bool initialize_ksyms_synchronously_for_testing() const;
  void set_initialize_ksyms_synchronously_for_testing(bool value);

  // optional uint32 buffer_size_kb = 10;
  bool has_buffer_size_kb() const;
  void clear_buffer_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 buffer_size_kb() const;
  void set_buffer_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 drain_period_ms = 11;
  bool has_drain_period_ms() const;
  void clear_drain_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 drain_period_ms() const;
  void set_drain_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ftrace_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_apps_;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched_;
  bool symbolize_ksyms_;
  bool initialize_ksyms_synchronously_for_testing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buffer_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drain_period_ms_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtraceConfig_CompactSchedConfig

// optional bool enabled = 1;
inline bool FtraceConfig_CompactSchedConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceConfig_CompactSchedConfig::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FtraceConfig_CompactSchedConfig::enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
  return enabled_;
}
inline void FtraceConfig_CompactSchedConfig::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
}

// -------------------------------------------------------------------

// FtraceConfig

// repeated string ftrace_events = 1;
inline int FtraceConfig::ftrace_events_size() const {
  return ftrace_events_.size();
}
inline void FtraceConfig::clear_ftrace_events() {
  ftrace_events_.Clear();
}
inline const std::string& FtraceConfig::ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Get(index);
}
inline std::string* FtraceConfig::mutable_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Mutable(index);
}
inline void FtraceConfig::set_ftrace_events(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_ftrace_events(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ftrace_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value, size_t size) {
  ftrace_events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline std::string* FtraceConfig::add_ftrace_events() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Add();
}
inline void FtraceConfig::add_ftrace_events(const std::string& value) {
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(std::string&& value) {
  ftrace_events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value, size_t size) {
  ftrace_events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.ftrace_events)
  return &ftrace_events_;
}

// repeated string atrace_categories = 2;
inline int FtraceConfig::atrace_categories_size() const {
  return atrace_categories_.size();
}
inline void FtraceConfig::clear_atrace_categories() {
  atrace_categories_.Clear();
}
inline const std::string& FtraceConfig::atrace_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Get(index);
}
inline std::string* FtraceConfig::mutable_atrace_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Mutable(index);
}
inline void FtraceConfig::set_atrace_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_atrace_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value, size_t size) {
  atrace_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline std::string* FtraceConfig::add_atrace_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Add();
}
inline void FtraceConfig::add_atrace_categories(const std::string& value) {
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(std::string&& value) {
  atrace_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value, size_t size) {
  atrace_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_atrace_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_categories)
  return &atrace_categories_;
}

// repeated string atrace_apps = 3;
inline int FtraceConfig::atrace_apps_size() const {
  return atrace_apps_.size();
}
inline void FtraceConfig::clear_atrace_apps() {
  atrace_apps_.Clear();
}
inline const std::string& FtraceConfig::atrace_apps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Get(index);
}
inline std::string* FtraceConfig::mutable_atrace_apps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Mutable(index);
}
inline void FtraceConfig::set_atrace_apps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(value);
}
inline void FtraceConfig::set_atrace_apps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(std::move(value));
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_apps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value, size_t size) {
  atrace_apps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline std::string* FtraceConfig::add_atrace_apps() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Add();
}
inline void FtraceConfig::add_atrace_apps(const std::string& value) {
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(std::string&& value) {
  atrace_apps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value, size_t size) {
  atrace_apps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_apps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::mutable_atrace_apps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_apps)
  return &atrace_apps_;
}

// optional uint32 buffer_size_kb = 10;
inline bool FtraceConfig::has_buffer_size_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FtraceConfig::clear_buffer_size_kb() {
  buffer_size_kb_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceConfig::buffer_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.buffer_size_kb)
  return buffer_size_kb_;
}
inline void FtraceConfig::set_buffer_size_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  buffer_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.buffer_size_kb)
}

// optional uint32 drain_period_ms = 11;
inline bool FtraceConfig::has_drain_period_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FtraceConfig::clear_drain_period_ms() {
  drain_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceConfig::drain_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.drain_period_ms)
  return drain_period_ms_;
}
inline void FtraceConfig::set_drain_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  drain_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.drain_period_ms)
}

// optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
inline bool FtraceConfig::has_compact_sched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceConfig::clear_compact_sched() {
  if (compact_sched_ != nullptr) compact_sched_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::FtraceConfig_CompactSchedConfig& FtraceConfig::compact_sched() const {
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig* p = compact_sched_;
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.compact_sched)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::FtraceConfig_CompactSchedConfig*>(
      &::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_);
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.compact_sched)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* temp = compact_sched_;
  compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::mutable_compact_sched() {
  _has_bits_[0] |= 0x00000001u;
  if (compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(GetArenaNoVirtual());
    compact_sched_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.compact_sched)
  return compact_sched_;
}
inline void FtraceConfig::set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.compact_sched)
}

// optional bool symbolize_ksyms = 13;
inline bool FtraceConfig::has_symbolize_ksyms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtraceConfig::clear_symbolize_ksyms() {
  symbolize_ksyms_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FtraceConfig::symbolize_ksyms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.symbolize_ksyms)
  return symbolize_ksyms_;
}
inline void FtraceConfig::set_symbolize_ksyms(bool value) {
  _has_bits_[0] |= 0x00000002u;
  symbolize_ksyms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.symbolize_ksyms)
}

// optional bool initialize_ksyms_synchronously_for_testing = 14;
inline bool FtraceConfig::has_initialize_ksyms_synchronously_for_testing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FtraceConfig::clear_initialize_ksyms_synchronously_for_testing() {
  initialize_ksyms_synchronously_for_testing_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FtraceConfig::initialize_ksyms_synchronously_for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
  return initialize_ksyms_synchronously_for_testing_;
}
inline void FtraceConfig::set_initialize_ksyms_synchronously_for_testing(bool value) {
  _has_bits_[0] |= 0x00000004u;
  initialize_ksyms_synchronously_for_testing_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
