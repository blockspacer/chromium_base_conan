// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_BENCHMARK_METADATA_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_BENCHMARK_METADATA_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ChromeBenchmarkMetadata;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT ChromeBenchmarkMetadata : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBenchmarkStartTimeUsFieldNumber = 1,
    kStoryRunTimeUsFieldNumber = 2,
    kBenchmarkNameFieldNumber = 3,
    kBenchmarkDescriptionFieldNumber = 4,
    kLabelFieldNumber = 5,
    kStoryNameFieldNumber = 6,
    kStoryTagsFieldNumber = 7,
    kStoryRunIndexFieldNumber = 8,
    kHadFailuresFieldNumber = 9,
  };

  ChromeBenchmarkMetadata();
  ~ChromeBenchmarkMetadata() override;
  ChromeBenchmarkMetadata(ChromeBenchmarkMetadata&&) noexcept;
  ChromeBenchmarkMetadata& operator=(ChromeBenchmarkMetadata&&);
  ChromeBenchmarkMetadata(const ChromeBenchmarkMetadata&);
  ChromeBenchmarkMetadata& operator=(const ChromeBenchmarkMetadata&);
  bool operator==(const ChromeBenchmarkMetadata&) const;
  bool operator!=(const ChromeBenchmarkMetadata& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_benchmark_start_time_us() const { return _has_field_[1]; }
  int64_t benchmark_start_time_us() const { return benchmark_start_time_us_; }
  void set_benchmark_start_time_us(int64_t value) { benchmark_start_time_us_ = value; _has_field_.set(1); }

  bool has_story_run_time_us() const { return _has_field_[2]; }
  int64_t story_run_time_us() const { return story_run_time_us_; }
  void set_story_run_time_us(int64_t value) { story_run_time_us_ = value; _has_field_.set(2); }

  bool has_benchmark_name() const { return _has_field_[3]; }
  const std::string& benchmark_name() const { return benchmark_name_; }
  void set_benchmark_name(const std::string& value) { benchmark_name_ = value; _has_field_.set(3); }

  bool has_benchmark_description() const { return _has_field_[4]; }
  const std::string& benchmark_description() const { return benchmark_description_; }
  void set_benchmark_description(const std::string& value) { benchmark_description_ = value; _has_field_.set(4); }

  bool has_label() const { return _has_field_[5]; }
  const std::string& label() const { return label_; }
  void set_label(const std::string& value) { label_ = value; _has_field_.set(5); }

  bool has_story_name() const { return _has_field_[6]; }
  const std::string& story_name() const { return story_name_; }
  void set_story_name(const std::string& value) { story_name_ = value; _has_field_.set(6); }

  const std::vector<std::string>& story_tags() const { return story_tags_; }
  std::vector<std::string>* mutable_story_tags() { return &story_tags_; }
  int story_tags_size() const { return static_cast<int>(story_tags_.size()); }
  void clear_story_tags() { story_tags_.clear(); }
  void add_story_tags(std::string value) { story_tags_.emplace_back(value); }
  std::string* add_story_tags() { story_tags_.emplace_back(); return &story_tags_.back(); }

  bool has_story_run_index() const { return _has_field_[8]; }
  int32_t story_run_index() const { return story_run_index_; }
  void set_story_run_index(int32_t value) { story_run_index_ = value; _has_field_.set(8); }

  bool has_had_failures() const { return _has_field_[9]; }
  bool had_failures() const { return had_failures_; }
  void set_had_failures(bool value) { had_failures_ = value; _has_field_.set(9); }

 private:
  int64_t benchmark_start_time_us_{};
  int64_t story_run_time_us_{};
  std::string benchmark_name_{};
  std::string benchmark_description_{};
  std::string label_{};
  std::string story_name_{};
  std::vector<std::string> story_tags_;
  int32_t story_run_index_{};
  bool had_failures_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_BENCHMARK_METADATA_PROTO_CPP_H_
