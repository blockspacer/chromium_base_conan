// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class BackgroundTracingMetadata;
class BackgroundTracingMetadataDefaultTypeInternal;
extern BackgroundTracingMetadataDefaultTypeInternal _BackgroundTracingMetadata_default_instance_;
class BackgroundTracingMetadata_TriggerRule;
class BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_default_instance_;
class BackgroundTracingMetadata_TriggerRule_HistogramRule;
class BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
class BackgroundTracingMetadata_TriggerRule_NamedRule;
class BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
class ChromeMetadataPacket;
class ChromeMetadataPacketDefaultTypeInternal;
extern ChromeMetadataPacketDefaultTypeInternal _ChromeMetadataPacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BackgroundTracingMetadata* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule>(Arena*);
template<> ::perfetto::protos::ChromeMetadataPacket* Arena::CreateMaybeMessage<::perfetto::protos::ChromeMetadataPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum BackgroundTracingMetadata_TriggerRule_NamedRule_EventType : int {
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED = 0,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_SESSION_RESTORE = 1,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_NAVIGATION = 2,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_STARTUP = 3,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_REACHED_CODE = 4,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE = 1000
};
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(int value);
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MIN = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE;
constexpr int BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_ARRAYSIZE = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX + 1;

const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value);
template<typename T>
inline const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name.");
  return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(static_cast<BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(enum_t_value));
}
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(
    const std::string& name, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType* value);
enum BackgroundTracingMetadata_TriggerRule_TriggerType : int {
  BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED = 0,
  BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE = 1,
  BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED = 2
};
bool BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(int value);
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MIN = BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX = BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
constexpr int BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_ARRAYSIZE = BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX + 1;

const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(BackgroundTracingMetadata_TriggerRule_TriggerType value);
template<typename T>
inline const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundTracingMetadata_TriggerRule_TriggerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundTracingMetadata_TriggerRule_TriggerType_Name.");
  return BackgroundTracingMetadata_TriggerRule_TriggerType_Name(static_cast<BackgroundTracingMetadata_TriggerRule_TriggerType>(enum_t_value));
}
bool BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(
    const std::string& name, BackgroundTracingMetadata_TriggerRule_TriggerType* value);
// ===================================================================

class ChromeMetadataPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeMetadataPacket) */ {
 public:
  ChromeMetadataPacket();
  virtual ~ChromeMetadataPacket();

  ChromeMetadataPacket(const ChromeMetadataPacket& from);
  ChromeMetadataPacket(ChromeMetadataPacket&& from) noexcept
    : ChromeMetadataPacket() {
    *this = ::std::move(from);
  }

  inline ChromeMetadataPacket& operator=(const ChromeMetadataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeMetadataPacket& operator=(ChromeMetadataPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeMetadataPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeMetadataPacket* internal_default_instance() {
    return reinterpret_cast<const ChromeMetadataPacket*>(
               &_ChromeMetadataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeMetadataPacket& a, ChromeMetadataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeMetadataPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeMetadataPacket* New() const final {
    return CreateMaybeMessage<ChromeMetadataPacket>(nullptr);
  }

  ChromeMetadataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeMetadataPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeMetadataPacket& from);
  void MergeFrom(const ChromeMetadataPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeMetadataPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeMetadataPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundTracingMetadataFieldNumber = 1,
    kChromeVersionCodeFieldNumber = 2,
  };
  // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
  bool has_background_tracing_metadata() const;
  void clear_background_tracing_metadata();
  const ::perfetto::protos::BackgroundTracingMetadata& background_tracing_metadata() const;
  ::perfetto::protos::BackgroundTracingMetadata* release_background_tracing_metadata();
  ::perfetto::protos::BackgroundTracingMetadata* mutable_background_tracing_metadata();
  void set_allocated_background_tracing_metadata(::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata);

  // optional int32 chrome_version_code = 2;
  bool has_chrome_version_code() const;
  void clear_chrome_version_code();
  ::PROTOBUF_NAMESPACE_ID::int32 chrome_version_code() const;
  void set_chrome_version_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadataPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 chrome_version_code_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule_HistogramRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule) */ {
 public:
  BackgroundTracingMetadata_TriggerRule_HistogramRule();
  virtual ~BackgroundTracingMetadata_TriggerRule_HistogramRule();

  BackgroundTracingMetadata_TriggerRule_HistogramRule(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  BackgroundTracingMetadata_TriggerRule_HistogramRule(BackgroundTracingMetadata_TriggerRule_HistogramRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule_HistogramRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule_HistogramRule& operator=(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule_HistogramRule& operator=(BackgroundTracingMetadata_TriggerRule_HistogramRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundTracingMetadata_TriggerRule_HistogramRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundTracingMetadata_TriggerRule_HistogramRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule_HistogramRule*>(
               &_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackgroundTracingMetadata_TriggerRule_HistogramRule& a, BackgroundTracingMetadata_TriggerRule_HistogramRule& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundTracingMetadata_TriggerRule_HistogramRule* New() const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_HistogramRule>(nullptr);
  }

  BackgroundTracingMetadata_TriggerRule_HistogramRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_HistogramRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramNameHashFieldNumber = 1,
    kHistogramMinTriggerFieldNumber = 2,
    kHistogramMaxTriggerFieldNumber = 3,
  };
  // optional fixed64 histogram_name_hash = 1;
  bool has_histogram_name_hash() const;
  void clear_histogram_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 histogram_name_hash() const;
  void set_histogram_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 histogram_min_trigger = 2;
  bool has_histogram_min_trigger() const;
  void clear_histogram_min_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 histogram_min_trigger() const;
  void set_histogram_min_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 histogram_max_trigger = 3;
  bool has_histogram_max_trigger() const;
  void clear_histogram_max_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 histogram_max_trigger() const;
  void set_histogram_max_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 histogram_name_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 histogram_min_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 histogram_max_trigger_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule_NamedRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule) */ {
 public:
  BackgroundTracingMetadata_TriggerRule_NamedRule();
  virtual ~BackgroundTracingMetadata_TriggerRule_NamedRule();

  BackgroundTracingMetadata_TriggerRule_NamedRule(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  BackgroundTracingMetadata_TriggerRule_NamedRule(BackgroundTracingMetadata_TriggerRule_NamedRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule_NamedRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule_NamedRule& operator=(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule_NamedRule& operator=(BackgroundTracingMetadata_TriggerRule_NamedRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundTracingMetadata_TriggerRule_NamedRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundTracingMetadata_TriggerRule_NamedRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule_NamedRule*>(
               &_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BackgroundTracingMetadata_TriggerRule_NamedRule& a, BackgroundTracingMetadata_TriggerRule_NamedRule& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundTracingMetadata_TriggerRule_NamedRule* New() const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_NamedRule>(nullptr);
  }

  BackgroundTracingMetadata_TriggerRule_NamedRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_NamedRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule_NamedRule_EventType EventType;
  static constexpr EventType UNSPECIFIED =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED;
  static constexpr EventType SESSION_RESTORE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_SESSION_RESTORE;
  static constexpr EventType NAVIGATION =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_NAVIGATION;
  static constexpr EventType STARTUP =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_STARTUP;
  static constexpr EventType REACHED_CODE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_REACHED_CODE;
  static constexpr EventType TEST_RULE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE;
  static inline bool EventType_IsValid(int value) {
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
  };
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType event_type() const;
  void set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule) */ {
 public:
  BackgroundTracingMetadata_TriggerRule();
  virtual ~BackgroundTracingMetadata_TriggerRule();

  BackgroundTracingMetadata_TriggerRule(const BackgroundTracingMetadata_TriggerRule& from);
  BackgroundTracingMetadata_TriggerRule(BackgroundTracingMetadata_TriggerRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule& operator=(const BackgroundTracingMetadata_TriggerRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule& operator=(BackgroundTracingMetadata_TriggerRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundTracingMetadata_TriggerRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundTracingMetadata_TriggerRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule*>(
               &_BackgroundTracingMetadata_TriggerRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BackgroundTracingMetadata_TriggerRule& a, BackgroundTracingMetadata_TriggerRule& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundTracingMetadata_TriggerRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundTracingMetadata_TriggerRule* New() const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule>(nullptr);
  }

  BackgroundTracingMetadata_TriggerRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule_HistogramRule HistogramRule;
  typedef BackgroundTracingMetadata_TriggerRule_NamedRule NamedRule;

  typedef BackgroundTracingMetadata_TriggerRule_TriggerType TriggerType;
  static constexpr TriggerType TRIGGER_UNSPECIFIED =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED;
  static constexpr TriggerType MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE =
    BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
  static constexpr TriggerType MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED =
    BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
  static inline bool TriggerType_IsValid(int value) {
    return BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(value);
  }
  static constexpr TriggerType TriggerType_MIN =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MIN;
  static constexpr TriggerType TriggerType_MAX =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX;
  static constexpr int TriggerType_ARRAYSIZE =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TriggerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerType_Name.");
    return BackgroundTracingMetadata_TriggerRule_TriggerType_Name(enum_t_value);
  }
  static inline bool TriggerType_Parse(const std::string& name,
      TriggerType* value) {
    return BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramRuleFieldNumber = 2,
    kNamedRuleFieldNumber = 3,
    kTriggerTypeFieldNumber = 1,
  };
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
  bool has_histogram_rule() const;
  void clear_histogram_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& histogram_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* release_histogram_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* mutable_histogram_rule();
  void set_allocated_histogram_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule);

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
  bool has_named_rule() const;
  void clear_named_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& named_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* release_named_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* mutable_named_rule();
  void set_allocated_named_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule);

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
  bool has_trigger_type() const;
  void clear_trigger_type();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType trigger_type() const;
  void set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule_;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule_;
  int trigger_type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata) */ {
 public:
  BackgroundTracingMetadata();
  virtual ~BackgroundTracingMetadata();

  BackgroundTracingMetadata(const BackgroundTracingMetadata& from);
  BackgroundTracingMetadata(BackgroundTracingMetadata&& from) noexcept
    : BackgroundTracingMetadata() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata& operator=(const BackgroundTracingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata& operator=(BackgroundTracingMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundTracingMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundTracingMetadata* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata*>(
               &_BackgroundTracingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BackgroundTracingMetadata& a, BackgroundTracingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundTracingMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundTracingMetadata* New() const final {
    return CreateMaybeMessage<BackgroundTracingMetadata>(nullptr);
  }

  BackgroundTracingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundTracingMetadata& from);
  void MergeFrom(const BackgroundTracingMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule TriggerRule;

  // accessors -------------------------------------------------------

  enum : int {
    kActiveRulesFieldNumber = 2,
    kTriggeredRuleFieldNumber = 1,
  };
  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  int active_rules_size() const;
  void clear_active_rules();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* mutable_active_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >*
      mutable_active_rules();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& active_rules(int index) const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* add_active_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >&
      active_rules() const;

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  bool has_triggered_rule() const;
  void clear_triggered_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& triggered_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* release_triggered_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* mutable_triggered_rule();
  void set_allocated_triggered_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule > active_rules_;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeMetadataPacket

// optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
inline bool ChromeMetadataPacket::has_background_tracing_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeMetadataPacket::clear_background_tracing_metadata() {
  if (background_tracing_metadata_ != nullptr) background_tracing_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata& ChromeMetadataPacket::background_tracing_metadata() const {
  const ::perfetto::protos::BackgroundTracingMetadata* p = background_tracing_metadata_;
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata*>(
      &::perfetto::protos::_BackgroundTracingMetadata_default_instance_);
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::release_background_tracing_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata* temp = background_tracing_metadata_;
  background_tracing_metadata_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::mutable_background_tracing_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (background_tracing_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata>(GetArenaNoVirtual());
    background_tracing_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  return background_tracing_metadata_;
}
inline void ChromeMetadataPacket::set_allocated_background_tracing_metadata(::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_tracing_metadata_;
  }
  if (background_tracing_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_tracing_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_tracing_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_tracing_metadata_ = background_tracing_metadata;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
}

// optional int32 chrome_version_code = 2;
inline bool ChromeMetadataPacket::has_chrome_version_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeMetadataPacket::clear_chrome_version_code() {
  chrome_version_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChromeMetadataPacket::chrome_version_code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.chrome_version_code)
  return chrome_version_code_;
}
inline void ChromeMetadataPacket::set_chrome_version_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  chrome_version_code_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadataPacket.chrome_version_code)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule_HistogramRule

// optional fixed64 histogram_name_hash = 1;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_name_hash() {
  histogram_name_hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_name_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_name_hash)
  return histogram_name_hash_;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  histogram_name_hash_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_name_hash)
}

// optional int64 histogram_min_trigger = 2;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_min_trigger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_min_trigger() {
  histogram_min_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_min_trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_min_trigger)
  return histogram_min_trigger_;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_min_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  histogram_min_trigger_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_min_trigger)
}

// optional int64 histogram_max_trigger = 3;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_max_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_max_trigger() {
  histogram_max_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_max_trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_max_trigger)
  return histogram_max_trigger_;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_max_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  histogram_max_trigger_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_max_trigger)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule_NamedRule

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
inline bool BackgroundTracingMetadata_TriggerRule_NamedRule::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::event_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.event_type)
  return static_cast< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType >(event_type_);
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value) {
  assert(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.event_type)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
inline bool BackgroundTracingMetadata_TriggerRule::has_trigger_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule::clear_trigger_type() {
  trigger_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::trigger_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.trigger_type)
  return static_cast< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType >(trigger_type_);
}
inline void BackgroundTracingMetadata_TriggerRule::set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value) {
  assert(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  trigger_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.trigger_type)
}

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
inline bool BackgroundTracingMetadata_TriggerRule::has_histogram_rule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule::clear_histogram_rule() {
  if (histogram_rule_ != nullptr) histogram_rule_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& BackgroundTracingMetadata_TriggerRule::histogram_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* p = histogram_rule_;
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule*>(
      &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::release_histogram_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* temp = histogram_rule_;
  histogram_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::mutable_histogram_rule() {
  _has_bits_[0] |= 0x00000001u;
  if (histogram_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule>(GetArenaNoVirtual());
    histogram_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  return histogram_rule_;
}
inline void BackgroundTracingMetadata_TriggerRule::set_allocated_histogram_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete histogram_rule_;
  }
  if (histogram_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      histogram_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram_rule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  histogram_rule_ = histogram_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
}

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
inline bool BackgroundTracingMetadata_TriggerRule::has_named_rule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundTracingMetadata_TriggerRule::clear_named_rule() {
  if (named_rule_ != nullptr) named_rule_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& BackgroundTracingMetadata_TriggerRule::named_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* p = named_rule_;
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule*>(
      &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::release_named_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* temp = named_rule_;
  named_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::mutable_named_rule() {
  _has_bits_[0] |= 0x00000002u;
  if (named_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule>(GetArenaNoVirtual());
    named_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  return named_rule_;
}
inline void BackgroundTracingMetadata_TriggerRule::set_allocated_named_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete named_rule_;
  }
  if (named_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      named_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_rule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  named_rule_ = named_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
inline bool BackgroundTracingMetadata::has_triggered_rule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTracingMetadata::clear_triggered_rule() {
  if (triggered_rule_ != nullptr) triggered_rule_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::triggered_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* p = triggered_rule_;
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule*>(
      &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_default_instance_);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::release_triggered_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* temp = triggered_rule_;
  triggered_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::mutable_triggered_rule() {
  _has_bits_[0] |= 0x00000001u;
  if (triggered_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule>(GetArenaNoVirtual());
    triggered_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  return triggered_rule_;
}
inline void BackgroundTracingMetadata::set_allocated_triggered_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete triggered_rule_;
  }
  if (triggered_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      triggered_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triggered_rule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  triggered_rule_ = triggered_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
}

// repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
inline int BackgroundTracingMetadata::active_rules_size() const {
  return active_rules_.size();
}
inline void BackgroundTracingMetadata::clear_active_rules() {
  active_rules_.Clear();
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::mutable_active_rules(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return active_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >*
BackgroundTracingMetadata::mutable_active_rules() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return &active_rules_;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::active_rules(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return active_rules_.Get(index);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::add_active_rules() {
  // @@protoc_insertion_point(field_add:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return active_rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >&
BackgroundTracingMetadata::active_rules() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return active_rules_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
