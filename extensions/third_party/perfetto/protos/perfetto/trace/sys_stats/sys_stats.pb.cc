// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/sys_stats/sys_stats.proto

#include "protos/perfetto/trace/sys_stats/sys_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
namespace perfetto {
namespace protos {
class SysStats_MeminfoValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStats_MeminfoValue> _instance;
} _SysStats_MeminfoValue_default_instance_;
class SysStats_VmstatValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStats_VmstatValue> _instance;
} _SysStats_VmstatValue_default_instance_;
class SysStats_CpuTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStats_CpuTimes> _instance;
} _SysStats_CpuTimes_default_instance_;
class SysStats_InterruptCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStats_InterruptCount> _instance;
} _SysStats_InterruptCount_default_instance_;
class SysStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysStats> _instance;
} _SysStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStats_default_instance_;
    new (ptr) ::perfetto::protos::SysStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto}, {
      &scc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base,
      &scc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base,
      &scc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base,
      &scc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStats_CpuTimes_default_instance_;
    new (ptr) ::perfetto::protos::SysStats_CpuTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStats_CpuTimes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStats_InterruptCount_default_instance_;
    new (ptr) ::perfetto::protos::SysStats_InterruptCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStats_InterruptCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStats_MeminfoValue_default_instance_;
    new (ptr) ::perfetto::protos::SysStats_MeminfoValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStats_MeminfoValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SysStats_VmstatValue_default_instance_;
    new (ptr) ::perfetto::protos::SysStats_VmstatValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SysStats_VmstatValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void SysStats_MeminfoValue::InitAsDefaultInstance() {
}
class SysStats_MeminfoValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_MeminfoValue>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_MeminfoValue::SysStats_MeminfoValue()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStats.MeminfoValue)
}
SysStats_MeminfoValue::SysStats_MeminfoValue(const SysStats_MeminfoValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.MeminfoValue)
}

void SysStats_MeminfoValue::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

SysStats_MeminfoValue::~SysStats_MeminfoValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.MeminfoValue)
  SharedDtor();
}

void SysStats_MeminfoValue::SharedDtor() {
}

void SysStats_MeminfoValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStats_MeminfoValue& SysStats_MeminfoValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStats_MeminfoValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  return *internal_default_instance();
}


void SysStats_MeminfoValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.MeminfoValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_) -
        reinterpret_cast<char*>(&value_)) + sizeof(key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStats_MeminfoValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.MeminfoCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MeminfoCounters_IsValid(val))) {
            set_key(static_cast<::perfetto::protos::MeminfoCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStats_MeminfoValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStats.MeminfoValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.MeminfoCounters key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::MeminfoCounters_IsValid(value)) {
            set_key(static_cast< ::perfetto::protos::MeminfoCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStats.MeminfoValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStats.MeminfoValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStats_MeminfoValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStats.MeminfoValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.MeminfoCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStats.MeminfoValue)
}

size_t SysStats_MeminfoValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.MeminfoValue)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional .perfetto.protos.MeminfoCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->key());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_MeminfoValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStats_MeminfoValue*>(
      &from));
}

void SysStats_MeminfoValue::MergeFrom(const SysStats_MeminfoValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.MeminfoValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStats_MeminfoValue::CopyFrom(const SysStats_MeminfoValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.MeminfoValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_MeminfoValue::IsInitialized() const {
  return true;
}

void SysStats_MeminfoValue::InternalSwap(SysStats_MeminfoValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(key_, other->key_);
}

std::string SysStats_MeminfoValue::GetTypeName() const {
  return "perfetto.protos.SysStats.MeminfoValue";
}


// ===================================================================

void SysStats_VmstatValue::InitAsDefaultInstance() {
}
class SysStats_VmstatValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_VmstatValue>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_VmstatValue::SysStats_VmstatValue()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStats.VmstatValue)
}
SysStats_VmstatValue::SysStats_VmstatValue(const SysStats_VmstatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.VmstatValue)
}

void SysStats_VmstatValue::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

SysStats_VmstatValue::~SysStats_VmstatValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.VmstatValue)
  SharedDtor();
}

void SysStats_VmstatValue::SharedDtor() {
}

void SysStats_VmstatValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStats_VmstatValue& SysStats_VmstatValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStats_VmstatValue_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  return *internal_default_instance();
}


void SysStats_VmstatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.VmstatValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_) -
        reinterpret_cast<char*>(&value_)) + sizeof(key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStats_VmstatValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.VmstatCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VmstatCounters_IsValid(val))) {
            set_key(static_cast<::perfetto::protos::VmstatCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStats_VmstatValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStats.VmstatValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.VmstatCounters key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::VmstatCounters_IsValid(value)) {
            set_key(static_cast< ::perfetto::protos::VmstatCounters >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStats.VmstatValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStats.VmstatValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStats_VmstatValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStats.VmstatValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.VmstatCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStats.VmstatValue)
}

size_t SysStats_VmstatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.VmstatValue)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional .perfetto.protos.VmstatCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->key());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_VmstatValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStats_VmstatValue*>(
      &from));
}

void SysStats_VmstatValue::MergeFrom(const SysStats_VmstatValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.VmstatValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStats_VmstatValue::CopyFrom(const SysStats_VmstatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.VmstatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_VmstatValue::IsInitialized() const {
  return true;
}

void SysStats_VmstatValue::InternalSwap(SysStats_VmstatValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(key_, other->key_);
}

std::string SysStats_VmstatValue::GetTypeName() const {
  return "perfetto.protos.SysStats.VmstatValue";
}


// ===================================================================

void SysStats_CpuTimes::InitAsDefaultInstance() {
}
class SysStats_CpuTimes::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_CpuTimes>()._has_bits_);
  static void set_has_cpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_ice_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_mode_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idle_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_io_wait_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_irq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_softirq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SysStats_CpuTimes::SysStats_CpuTimes()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStats.CpuTimes)
}
SysStats_CpuTimes::SysStats_CpuTimes(const SysStats_CpuTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_ns_, &from.user_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_id_) -
    reinterpret_cast<char*>(&user_ns_)) + sizeof(cpu_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.CpuTimes)
}

void SysStats_CpuTimes::SharedCtor() {
  ::memset(&user_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_id_) -
      reinterpret_cast<char*>(&user_ns_)) + sizeof(cpu_id_));
}

SysStats_CpuTimes::~SysStats_CpuTimes() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.CpuTimes)
  SharedDtor();
}

void SysStats_CpuTimes::SharedDtor() {
}

void SysStats_CpuTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStats_CpuTimes& SysStats_CpuTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStats_CpuTimes_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  return *internal_default_instance();
}


void SysStats_CpuTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.CpuTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&user_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_id_) -
        reinterpret_cast<char*>(&user_ns_)) + sizeof(cpu_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStats_CpuTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cpu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu_id(&has_bits);
          cpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 user_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_ns(&has_bits);
          user_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 user_ice_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_ice_ns(&has_bits);
          user_ice_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 system_mode_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_system_mode_ns(&has_bits);
          system_mode_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 idle_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_idle_ns(&has_bits);
          idle_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 io_wait_ns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_io_wait_ns(&has_bits);
          io_wait_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 irq_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_irq_ns(&has_bits);
          irq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 softirq_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_softirq_ns(&has_bits);
          softirq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStats_CpuTimes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStats.CpuTimes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cpu_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cpu_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_ns = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_user_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_ice_ns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_user_ice_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_ice_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 system_mode_ns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_system_mode_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_mode_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 idle_ns = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_idle_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idle_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 io_wait_ns = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_io_wait_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &io_wait_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 irq_ns = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_irq_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &irq_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 softirq_ns = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_softirq_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &softirq_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStats.CpuTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStats.CpuTimes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStats_CpuTimes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStats.CpuTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cpu_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  // optional uint64 user_ns = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->user_ns(), output);
  }

  // optional uint64 user_ice_ns = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->user_ice_ns(), output);
  }

  // optional uint64 system_mode_ns = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->system_mode_ns(), output);
  }

  // optional uint64 idle_ns = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->idle_ns(), output);
  }

  // optional uint64 io_wait_ns = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->io_wait_ns(), output);
  }

  // optional uint64 irq_ns = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->irq_ns(), output);
  }

  // optional uint64 softirq_ns = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->softirq_ns(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStats.CpuTimes)
}

size_t SysStats_CpuTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.CpuTimes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 user_ns = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->user_ns());
    }

    // optional uint64 user_ice_ns = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->user_ice_ns());
    }

    // optional uint64 system_mode_ns = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->system_mode_ns());
    }

    // optional uint64 idle_ns = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->idle_ns());
    }

    // optional uint64 io_wait_ns = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->io_wait_ns());
    }

    // optional uint64 irq_ns = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->irq_ns());
    }

    // optional uint64 softirq_ns = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->softirq_ns());
    }

    // optional uint32 cpu_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_CpuTimes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStats_CpuTimes*>(
      &from));
}

void SysStats_CpuTimes::MergeFrom(const SysStats_CpuTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.CpuTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      user_ns_ = from.user_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_ice_ns_ = from.user_ice_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      system_mode_ns_ = from.system_mode_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      idle_ns_ = from.idle_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      io_wait_ns_ = from.io_wait_ns_;
    }
    if (cached_has_bits & 0x00000020u) {
      irq_ns_ = from.irq_ns_;
    }
    if (cached_has_bits & 0x00000040u) {
      softirq_ns_ = from.softirq_ns_;
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_id_ = from.cpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStats_CpuTimes::CopyFrom(const SysStats_CpuTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.CpuTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_CpuTimes::IsInitialized() const {
  return true;
}

void SysStats_CpuTimes::InternalSwap(SysStats_CpuTimes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_ns_, other->user_ns_);
  swap(user_ice_ns_, other->user_ice_ns_);
  swap(system_mode_ns_, other->system_mode_ns_);
  swap(idle_ns_, other->idle_ns_);
  swap(io_wait_ns_, other->io_wait_ns_);
  swap(irq_ns_, other->irq_ns_);
  swap(softirq_ns_, other->softirq_ns_);
  swap(cpu_id_, other->cpu_id_);
}

std::string SysStats_CpuTimes::GetTypeName() const {
  return "perfetto.protos.SysStats.CpuTimes";
}


// ===================================================================

void SysStats_InterruptCount::InitAsDefaultInstance() {
}
class SysStats_InterruptCount::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_InterruptCount>()._has_bits_);
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_InterruptCount::SysStats_InterruptCount()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStats.InterruptCount)
}
SysStats_InterruptCount::SysStats_InterruptCount(const SysStats_InterruptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&irq_) -
    reinterpret_cast<char*>(&count_)) + sizeof(irq_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.InterruptCount)
}

void SysStats_InterruptCount::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&irq_) -
      reinterpret_cast<char*>(&count_)) + sizeof(irq_));
}

SysStats_InterruptCount::~SysStats_InterruptCount() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.InterruptCount)
  SharedDtor();
}

void SysStats_InterruptCount::SharedDtor() {
}

void SysStats_InterruptCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStats_InterruptCount& SysStats_InterruptCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStats_InterruptCount_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  return *internal_default_instance();
}


void SysStats_InterruptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.InterruptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&irq_) -
        reinterpret_cast<char*>(&count_)) + sizeof(irq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStats_InterruptCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 irq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_irq(&has_bits);
          irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStats_InterruptCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStats.InterruptCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 irq = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_irq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &irq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStats.InterruptCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStats.InterruptCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStats_InterruptCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStats.InterruptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 irq = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->irq(), output);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStats.InterruptCount)
}

size_t SysStats_InterruptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.InterruptCount)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional int32 irq = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->irq());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_InterruptCount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStats_InterruptCount*>(
      &from));
}

void SysStats_InterruptCount::MergeFrom(const SysStats_InterruptCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.InterruptCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      irq_ = from.irq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStats_InterruptCount::CopyFrom(const SysStats_InterruptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.InterruptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_InterruptCount::IsInitialized() const {
  return true;
}

void SysStats_InterruptCount::InternalSwap(SysStats_InterruptCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(irq_, other->irq_);
}

std::string SysStats_InterruptCount::GetTypeName() const {
  return "perfetto.protos.SysStats.InterruptCount";
}


// ===================================================================

void SysStats::InitAsDefaultInstance() {
}
class SysStats::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats>()._has_bits_);
  static void set_has_num_forks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_irq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_softirq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SysStats::SysStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SysStats)
}
SysStats::SysStats(const SysStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      meminfo_(from.meminfo_),
      vmstat_(from.vmstat_),
      cpu_stat_(from.cpu_stat_),
      num_irq_(from.num_irq_),
      num_softirq_(from.num_softirq_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_forks_, &from.num_forks_,
    static_cast<size_t>(reinterpret_cast<char*>(&collection_end_timestamp_) -
    reinterpret_cast<char*>(&num_forks_)) + sizeof(collection_end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats)
}

void SysStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  ::memset(&num_forks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collection_end_timestamp_) -
      reinterpret_cast<char*>(&num_forks_)) + sizeof(collection_end_timestamp_));
}

SysStats::~SysStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats)
  SharedDtor();
}

void SysStats::SharedDtor() {
}

void SysStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysStats& SysStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base);
  return *internal_default_instance();
}


void SysStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meminfo_.Clear();
  vmstat_.Clear();
  cpu_stat_.Clear();
  num_irq_.Clear();
  num_softirq_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_forks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collection_end_timestamp_) -
        reinterpret_cast<char*>(&num_forks_)) + sizeof(collection_end_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SysStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_meminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vmstat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cpu_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_forks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_forks(&has_bits);
          num_forks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_irq_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_irq_total(&has_bits);
          num_irq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_num_irq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_softirq_total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_softirq_total(&has_bits);
          num_softirq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_num_softirq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional uint64 collection_end_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SysStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SysStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_meminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vmstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_forks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_forks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_forks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_irq_total = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_irq_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_irq_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_num_irq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_softirq_total = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_softirq_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_softirq_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_num_softirq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collection_end_timestamp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_collection_end_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SysStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SysStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SysStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SysStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meminfo_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->meminfo(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vmstat_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->vmstat(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_stat_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->cpu_stat(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 num_forks = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->num_forks(), output);
  }

  // optional uint64 num_irq_total = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->num_irq_total(), output);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->num_irq_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->num_irq(static_cast<int>(i)),
      output);
  }

  // optional uint64 num_softirq_total = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->num_softirq_total(), output);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->num_softirq_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->num_softirq(static_cast<int>(i)),
      output);
  }

  // optional uint64 collection_end_timestamp = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->collection_end_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SysStats)
}

size_t SysStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->meminfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->meminfo(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vmstat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vmstat(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_stat(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->num_irq_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->num_irq(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->num_softirq_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->num_softirq(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 num_forks = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->num_forks());
    }

    // optional uint64 num_irq_total = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->num_irq_total());
    }

    // optional uint64 num_softirq_total = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->num_softirq_total());
    }

    // optional uint64 collection_end_timestamp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->collection_end_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SysStats*>(
      &from));
}

void SysStats::MergeFrom(const SysStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meminfo_.MergeFrom(from.meminfo_);
  vmstat_.MergeFrom(from.vmstat_);
  cpu_stat_.MergeFrom(from.cpu_stat_);
  num_irq_.MergeFrom(from.num_irq_);
  num_softirq_.MergeFrom(from.num_softirq_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_forks_ = from.num_forks_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_irq_total_ = from.num_irq_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_softirq_total_ = from.num_softirq_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      collection_end_timestamp_ = from.collection_end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysStats::CopyFrom(const SysStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats::IsInitialized() const {
  return true;
}

void SysStats::InternalSwap(SysStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&meminfo_)->InternalSwap(CastToBase(&other->meminfo_));
  CastToBase(&vmstat_)->InternalSwap(CastToBase(&other->vmstat_));
  CastToBase(&cpu_stat_)->InternalSwap(CastToBase(&other->cpu_stat_));
  CastToBase(&num_irq_)->InternalSwap(CastToBase(&other->num_irq_));
  CastToBase(&num_softirq_)->InternalSwap(CastToBase(&other->num_softirq_));
  swap(num_forks_, other->num_forks_);
  swap(num_irq_total_, other->num_irq_total_);
  swap(num_softirq_total_, other->num_softirq_total_);
  swap(collection_end_timestamp_, other->collection_end_timestamp_);
}

std::string SysStats::GetTypeName() const {
  return "perfetto.protos.SysStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_MeminfoValue* Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_MeminfoValue >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStats_MeminfoValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_VmstatValue* Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_VmstatValue >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStats_VmstatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_CpuTimes* Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_CpuTimes >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStats_CpuTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_InterruptCount* Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_InterruptCount >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStats_InterruptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats* Arena::CreateMaybeMessage< ::perfetto::protos::SysStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SysStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
