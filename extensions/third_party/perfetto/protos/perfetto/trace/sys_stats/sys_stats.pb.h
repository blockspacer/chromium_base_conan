// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/sys_stats/sys_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/sys_stats_counters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SysStats;
class SysStatsDefaultTypeInternal;
extern SysStatsDefaultTypeInternal _SysStats_default_instance_;
class SysStats_CpuTimes;
class SysStats_CpuTimesDefaultTypeInternal;
extern SysStats_CpuTimesDefaultTypeInternal _SysStats_CpuTimes_default_instance_;
class SysStats_InterruptCount;
class SysStats_InterruptCountDefaultTypeInternal;
extern SysStats_InterruptCountDefaultTypeInternal _SysStats_InterruptCount_default_instance_;
class SysStats_MeminfoValue;
class SysStats_MeminfoValueDefaultTypeInternal;
extern SysStats_MeminfoValueDefaultTypeInternal _SysStats_MeminfoValue_default_instance_;
class SysStats_VmstatValue;
class SysStats_VmstatValueDefaultTypeInternal;
extern SysStats_VmstatValueDefaultTypeInternal _SysStats_VmstatValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SysStats* Arena::CreateMaybeMessage<::perfetto::protos::SysStats>(Arena*);
template<> ::perfetto::protos::SysStats_CpuTimes* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_CpuTimes>(Arena*);
template<> ::perfetto::protos::SysStats_InterruptCount* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_InterruptCount>(Arena*);
template<> ::perfetto::protos::SysStats_MeminfoValue* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_MeminfoValue>(Arena*);
template<> ::perfetto::protos::SysStats_VmstatValue* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_VmstatValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SysStats_MeminfoValue :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.MeminfoValue) */ {
 public:
  SysStats_MeminfoValue();
  virtual ~SysStats_MeminfoValue();

  SysStats_MeminfoValue(const SysStats_MeminfoValue& from);
  SysStats_MeminfoValue(SysStats_MeminfoValue&& from) noexcept
    : SysStats_MeminfoValue() {
    *this = ::std::move(from);
  }

  inline SysStats_MeminfoValue& operator=(const SysStats_MeminfoValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_MeminfoValue& operator=(SysStats_MeminfoValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStats_MeminfoValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStats_MeminfoValue* internal_default_instance() {
    return reinterpret_cast<const SysStats_MeminfoValue*>(
               &_SysStats_MeminfoValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SysStats_MeminfoValue& a, SysStats_MeminfoValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStats_MeminfoValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStats_MeminfoValue* New() const final {
    return CreateMaybeMessage<SysStats_MeminfoValue>(nullptr);
  }

  SysStats_MeminfoValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStats_MeminfoValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStats_MeminfoValue& from);
  void MergeFrom(const SysStats_MeminfoValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_MeminfoValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.MeminfoValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional uint64 value = 2;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.MeminfoCounters key = 1;
  bool has_key() const;
  void clear_key();
  ::perfetto::protos::MeminfoCounters key() const;
  void set_key(::perfetto::protos::MeminfoCounters value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.MeminfoValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  int key_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_VmstatValue :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.VmstatValue) */ {
 public:
  SysStats_VmstatValue();
  virtual ~SysStats_VmstatValue();

  SysStats_VmstatValue(const SysStats_VmstatValue& from);
  SysStats_VmstatValue(SysStats_VmstatValue&& from) noexcept
    : SysStats_VmstatValue() {
    *this = ::std::move(from);
  }

  inline SysStats_VmstatValue& operator=(const SysStats_VmstatValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_VmstatValue& operator=(SysStats_VmstatValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStats_VmstatValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStats_VmstatValue* internal_default_instance() {
    return reinterpret_cast<const SysStats_VmstatValue*>(
               &_SysStats_VmstatValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SysStats_VmstatValue& a, SysStats_VmstatValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStats_VmstatValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStats_VmstatValue* New() const final {
    return CreateMaybeMessage<SysStats_VmstatValue>(nullptr);
  }

  SysStats_VmstatValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStats_VmstatValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStats_VmstatValue& from);
  void MergeFrom(const SysStats_VmstatValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_VmstatValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.VmstatValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional uint64 value = 2;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.VmstatCounters key = 1;
  bool has_key() const;
  void clear_key();
  ::perfetto::protos::VmstatCounters key() const;
  void set_key(::perfetto::protos::VmstatCounters value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.VmstatValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  int key_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_CpuTimes :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.CpuTimes) */ {
 public:
  SysStats_CpuTimes();
  virtual ~SysStats_CpuTimes();

  SysStats_CpuTimes(const SysStats_CpuTimes& from);
  SysStats_CpuTimes(SysStats_CpuTimes&& from) noexcept
    : SysStats_CpuTimes() {
    *this = ::std::move(from);
  }

  inline SysStats_CpuTimes& operator=(const SysStats_CpuTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_CpuTimes& operator=(SysStats_CpuTimes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStats_CpuTimes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStats_CpuTimes* internal_default_instance() {
    return reinterpret_cast<const SysStats_CpuTimes*>(
               &_SysStats_CpuTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SysStats_CpuTimes& a, SysStats_CpuTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStats_CpuTimes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStats_CpuTimes* New() const final {
    return CreateMaybeMessage<SysStats_CpuTimes>(nullptr);
  }

  SysStats_CpuTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStats_CpuTimes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStats_CpuTimes& from);
  void MergeFrom(const SysStats_CpuTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_CpuTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.CpuTimes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNsFieldNumber = 2,
    kUserIceNsFieldNumber = 3,
    kSystemModeNsFieldNumber = 4,
    kIdleNsFieldNumber = 5,
    kIoWaitNsFieldNumber = 6,
    kIrqNsFieldNumber = 7,
    kSoftirqNsFieldNumber = 8,
    kCpuIdFieldNumber = 1,
  };
  // optional uint64 user_ns = 2;
  bool has_user_ns() const;
  void clear_user_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_ns() const;
  void set_user_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 user_ice_ns = 3;
  bool has_user_ice_ns() const;
  void clear_user_ice_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_ice_ns() const;
  void set_user_ice_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 system_mode_ns = 4;
  bool has_system_mode_ns() const;
  void clear_system_mode_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 system_mode_ns() const;
  void set_system_mode_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 idle_ns = 5;
  bool has_idle_ns() const;
  void clear_idle_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_ns() const;
  void set_idle_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 io_wait_ns = 6;
  bool has_io_wait_ns() const;
  void clear_io_wait_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 io_wait_ns() const;
  void set_io_wait_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 irq_ns = 7;
  bool has_irq_ns() const;
  void clear_irq_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 irq_ns() const;
  void set_irq_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 softirq_ns = 8;
  bool has_softirq_ns() const;
  void clear_softirq_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 softirq_ns() const;
  void set_softirq_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 cpu_id = 1;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.CpuTimes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_ice_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 system_mode_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 io_wait_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 irq_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 softirq_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_InterruptCount :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.InterruptCount) */ {
 public:
  SysStats_InterruptCount();
  virtual ~SysStats_InterruptCount();

  SysStats_InterruptCount(const SysStats_InterruptCount& from);
  SysStats_InterruptCount(SysStats_InterruptCount&& from) noexcept
    : SysStats_InterruptCount() {
    *this = ::std::move(from);
  }

  inline SysStats_InterruptCount& operator=(const SysStats_InterruptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_InterruptCount& operator=(SysStats_InterruptCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStats_InterruptCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStats_InterruptCount* internal_default_instance() {
    return reinterpret_cast<const SysStats_InterruptCount*>(
               &_SysStats_InterruptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SysStats_InterruptCount& a, SysStats_InterruptCount& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStats_InterruptCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStats_InterruptCount* New() const final {
    return CreateMaybeMessage<SysStats_InterruptCount>(nullptr);
  }

  SysStats_InterruptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStats_InterruptCount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStats_InterruptCount& from);
  void MergeFrom(const SysStats_InterruptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_InterruptCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.InterruptCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kIrqFieldNumber = 1,
  };
  // optional uint64 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq();
  ::PROTOBUF_NAMESPACE_ID::int32 irq() const;
  void set_irq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.InterruptCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 irq_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats) */ {
 public:
  SysStats();
  virtual ~SysStats();

  SysStats(const SysStats& from);
  SysStats(SysStats&& from) noexcept
    : SysStats() {
    *this = ::std::move(from);
  }

  inline SysStats& operator=(const SysStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats& operator=(SysStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SysStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysStats* internal_default_instance() {
    return reinterpret_cast<const SysStats*>(
               &_SysStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SysStats& a, SysStats& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysStats* New() const final {
    return CreateMaybeMessage<SysStats>(nullptr);
  }

  SysStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SysStats& from);
  void MergeFrom(const SysStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SysStats_MeminfoValue MeminfoValue;
  typedef SysStats_VmstatValue VmstatValue;
  typedef SysStats_CpuTimes CpuTimes;
  typedef SysStats_InterruptCount InterruptCount;

  // accessors -------------------------------------------------------

  enum : int {
    kMeminfoFieldNumber = 1,
    kVmstatFieldNumber = 2,
    kCpuStatFieldNumber = 3,
    kNumIrqFieldNumber = 6,
    kNumSoftirqFieldNumber = 8,
    kNumForksFieldNumber = 4,
    kNumIrqTotalFieldNumber = 5,
    kNumSoftirqTotalFieldNumber = 7,
    kCollectionEndTimestampFieldNumber = 9,
  };
  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  int meminfo_size() const;
  void clear_meminfo();
  ::perfetto::protos::SysStats_MeminfoValue* mutable_meminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >*
      mutable_meminfo();
  const ::perfetto::protos::SysStats_MeminfoValue& meminfo(int index) const;
  ::perfetto::protos::SysStats_MeminfoValue* add_meminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >&
      meminfo() const;

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  int vmstat_size() const;
  void clear_vmstat();
  ::perfetto::protos::SysStats_VmstatValue* mutable_vmstat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >*
      mutable_vmstat();
  const ::perfetto::protos::SysStats_VmstatValue& vmstat(int index) const;
  ::perfetto::protos::SysStats_VmstatValue* add_vmstat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >&
      vmstat() const;

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  int cpu_stat_size() const;
  void clear_cpu_stat();
  ::perfetto::protos::SysStats_CpuTimes* mutable_cpu_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >*
      mutable_cpu_stat();
  const ::perfetto::protos::SysStats_CpuTimes& cpu_stat(int index) const;
  ::perfetto::protos::SysStats_CpuTimes* add_cpu_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >&
      cpu_stat() const;

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  int num_irq_size() const;
  void clear_num_irq();
  ::perfetto::protos::SysStats_InterruptCount* mutable_num_irq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
      mutable_num_irq();
  const ::perfetto::protos::SysStats_InterruptCount& num_irq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* add_num_irq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
      num_irq() const;

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  int num_softirq_size() const;
  void clear_num_softirq();
  ::perfetto::protos::SysStats_InterruptCount* mutable_num_softirq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
      mutable_num_softirq();
  const ::perfetto::protos::SysStats_InterruptCount& num_softirq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* add_num_softirq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
      num_softirq() const;

  // optional uint64 num_forks = 4;
  bool has_num_forks() const;
  void clear_num_forks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_forks() const;
  void set_num_forks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 num_irq_total = 5;
  bool has_num_irq_total() const;
  void clear_num_irq_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_irq_total() const;
  void set_num_irq_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 num_softirq_total = 7;
  bool has_num_softirq_total() const;
  void clear_num_softirq_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_softirq_total() const;
  void set_num_softirq_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 collection_end_timestamp = 9;
  bool has_collection_end_timestamp() const;
  void clear_collection_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp() const;
  void set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue > meminfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue > vmstat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes > cpu_stat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount > num_irq_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount > num_softirq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_forks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_irq_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_softirq_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SysStats_MeminfoValue

// optional .perfetto.protos.MeminfoCounters key = 1;
inline bool SysStats_MeminfoValue::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStats_MeminfoValue::clear_key() {
  key_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::MeminfoCounters SysStats_MeminfoValue::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.MeminfoValue.key)
  return static_cast< ::perfetto::protos::MeminfoCounters >(key_);
}
inline void SysStats_MeminfoValue::set_key(::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.MeminfoValue.key)
}

// optional uint64 value = 2;
inline bool SysStats_MeminfoValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStats_MeminfoValue::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_MeminfoValue::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.MeminfoValue.value)
  return value_;
}
inline void SysStats_MeminfoValue::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.MeminfoValue.value)
}

// -------------------------------------------------------------------

// SysStats_VmstatValue

// optional .perfetto.protos.VmstatCounters key = 1;
inline bool SysStats_VmstatValue::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStats_VmstatValue::clear_key() {
  key_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::VmstatCounters SysStats_VmstatValue::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.VmstatValue.key)
  return static_cast< ::perfetto::protos::VmstatCounters >(key_);
}
inline void SysStats_VmstatValue::set_key(::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.VmstatValue.key)
}

// optional uint64 value = 2;
inline bool SysStats_VmstatValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStats_VmstatValue::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_VmstatValue::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.VmstatValue.value)
  return value_;
}
inline void SysStats_VmstatValue::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.VmstatValue.value)
}

// -------------------------------------------------------------------

// SysStats_CpuTimes

// optional uint32 cpu_id = 1;
inline bool SysStats_CpuTimes::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SysStats_CpuTimes::clear_cpu_id() {
  cpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SysStats_CpuTimes::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.cpu_id)
  return cpu_id_;
}
inline void SysStats_CpuTimes::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.cpu_id)
}

// optional uint64 user_ns = 2;
inline bool SysStats_CpuTimes::has_user_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStats_CpuTimes::clear_user_ns() {
  user_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::user_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.user_ns)
  return user_ns_;
}
inline void SysStats_CpuTimes::set_user_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  user_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.user_ns)
}

// optional uint64 user_ice_ns = 3;
inline bool SysStats_CpuTimes::has_user_ice_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStats_CpuTimes::clear_user_ice_ns() {
  user_ice_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::user_ice_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.user_ice_ns)
  return user_ice_ns_;
}
inline void SysStats_CpuTimes::set_user_ice_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  user_ice_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.user_ice_ns)
}

// optional uint64 system_mode_ns = 4;
inline bool SysStats_CpuTimes::has_system_mode_ns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysStats_CpuTimes::clear_system_mode_ns() {
  system_mode_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::system_mode_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.system_mode_ns)
  return system_mode_ns_;
}
inline void SysStats_CpuTimes::set_system_mode_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  system_mode_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.system_mode_ns)
}

// optional uint64 idle_ns = 5;
inline bool SysStats_CpuTimes::has_idle_ns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysStats_CpuTimes::clear_idle_ns() {
  idle_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::idle_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.idle_ns)
  return idle_ns_;
}
inline void SysStats_CpuTimes::set_idle_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  idle_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.idle_ns)
}

// optional uint64 io_wait_ns = 6;
inline bool SysStats_CpuTimes::has_io_wait_ns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SysStats_CpuTimes::clear_io_wait_ns() {
  io_wait_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::io_wait_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.io_wait_ns)
  return io_wait_ns_;
}
inline void SysStats_CpuTimes::set_io_wait_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  io_wait_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.io_wait_ns)
}

// optional uint64 irq_ns = 7;
inline bool SysStats_CpuTimes::has_irq_ns() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SysStats_CpuTimes::clear_irq_ns() {
  irq_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::irq_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.irq_ns)
  return irq_ns_;
}
inline void SysStats_CpuTimes::set_irq_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  irq_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.irq_ns)
}

// optional uint64 softirq_ns = 8;
inline bool SysStats_CpuTimes::has_softirq_ns() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SysStats_CpuTimes::clear_softirq_ns() {
  softirq_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_CpuTimes::softirq_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.softirq_ns)
  return softirq_ns_;
}
inline void SysStats_CpuTimes::set_softirq_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  softirq_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.softirq_ns)
}

// -------------------------------------------------------------------

// SysStats_InterruptCount

// optional int32 irq = 1;
inline bool SysStats_InterruptCount::has_irq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStats_InterruptCount::clear_irq() {
  irq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysStats_InterruptCount::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.InterruptCount.irq)
  return irq_;
}
inline void SysStats_InterruptCount::set_irq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  irq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.InterruptCount.irq)
}

// optional uint64 count = 2;
inline bool SysStats_InterruptCount::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStats_InterruptCount::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats_InterruptCount::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.InterruptCount.count)
  return count_;
}
inline void SysStats_InterruptCount::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.InterruptCount.count)
}

// -------------------------------------------------------------------

// SysStats

// repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
inline int SysStats::meminfo_size() const {
  return meminfo_.size();
}
inline void SysStats::clear_meminfo() {
  meminfo_.Clear();
}
inline ::perfetto::protos::SysStats_MeminfoValue* SysStats::mutable_meminfo(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.meminfo)
  return meminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >*
SysStats::mutable_meminfo() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.meminfo)
  return &meminfo_;
}
inline const ::perfetto::protos::SysStats_MeminfoValue& SysStats::meminfo(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.meminfo)
  return meminfo_.Get(index);
}
inline ::perfetto::protos::SysStats_MeminfoValue* SysStats::add_meminfo() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.meminfo)
  return meminfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >&
SysStats::meminfo() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.meminfo)
  return meminfo_;
}

// repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
inline int SysStats::vmstat_size() const {
  return vmstat_.size();
}
inline void SysStats::clear_vmstat() {
  vmstat_.Clear();
}
inline ::perfetto::protos::SysStats_VmstatValue* SysStats::mutable_vmstat(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.vmstat)
  return vmstat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >*
SysStats::mutable_vmstat() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.vmstat)
  return &vmstat_;
}
inline const ::perfetto::protos::SysStats_VmstatValue& SysStats::vmstat(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.vmstat)
  return vmstat_.Get(index);
}
inline ::perfetto::protos::SysStats_VmstatValue* SysStats::add_vmstat() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.vmstat)
  return vmstat_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >&
SysStats::vmstat() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.vmstat)
  return vmstat_;
}

// repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
inline int SysStats::cpu_stat_size() const {
  return cpu_stat_.size();
}
inline void SysStats::clear_cpu_stat() {
  cpu_stat_.Clear();
}
inline ::perfetto::protos::SysStats_CpuTimes* SysStats::mutable_cpu_stat(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.cpu_stat)
  return cpu_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >*
SysStats::mutable_cpu_stat() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.cpu_stat)
  return &cpu_stat_;
}
inline const ::perfetto::protos::SysStats_CpuTimes& SysStats::cpu_stat(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.cpu_stat)
  return cpu_stat_.Get(index);
}
inline ::perfetto::protos::SysStats_CpuTimes* SysStats::add_cpu_stat() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.cpu_stat)
  return cpu_stat_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >&
SysStats::cpu_stat() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.cpu_stat)
  return cpu_stat_;
}

// optional uint64 num_forks = 4;
inline bool SysStats::has_num_forks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysStats::clear_num_forks() {
  num_forks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats::num_forks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_forks)
  return num_forks_;
}
inline void SysStats::set_num_forks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_forks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_forks)
}

// optional uint64 num_irq_total = 5;
inline bool SysStats::has_num_irq_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysStats::clear_num_irq_total() {
  num_irq_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats::num_irq_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_irq_total)
  return num_irq_total_;
}
inline void SysStats::set_num_irq_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  num_irq_total_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_irq_total)
}

// repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
inline int SysStats::num_irq_size() const {
  return num_irq_.size();
}
inline void SysStats::clear_num_irq() {
  num_irq_.Clear();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::mutable_num_irq(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.num_irq)
  return num_irq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
SysStats::mutable_num_irq() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.num_irq)
  return &num_irq_;
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::num_irq(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_irq)
  return num_irq_.Get(index);
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::add_num_irq() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.num_irq)
  return num_irq_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
SysStats::num_irq() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.num_irq)
  return num_irq_;
}

// optional uint64 num_softirq_total = 7;
inline bool SysStats::has_num_softirq_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysStats::clear_num_softirq_total() {
  num_softirq_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats::num_softirq_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_softirq_total)
  return num_softirq_total_;
}
inline void SysStats::set_num_softirq_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  num_softirq_total_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_softirq_total)
}

// repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
inline int SysStats::num_softirq_size() const {
  return num_softirq_.size();
}
inline void SysStats::clear_num_softirq() {
  num_softirq_.Clear();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::mutable_num_softirq(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.num_softirq)
  return num_softirq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
SysStats::mutable_num_softirq() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.num_softirq)
  return &num_softirq_;
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::num_softirq(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_softirq)
  return num_softirq_.Get(index);
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::add_num_softirq() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.num_softirq)
  return num_softirq_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
SysStats::num_softirq() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.num_softirq)
  return num_softirq_;
}

// optional uint64 collection_end_timestamp = 9;
inline bool SysStats::has_collection_end_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysStats::clear_collection_end_timestamp() {
  collection_end_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SysStats::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.collection_end_timestamp)
  return collection_end_timestamp_;
}
inline void SysStats::set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  collection_end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.collection_end_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
