// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_EXTENSION_DESCRIPTOR_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_EXTENSION_DESCRIPTOR_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ExtensionDescriptor;
class FileDescriptorSet;
class FileDescriptorProto;
class FieldDescriptorProto;
class EnumDescriptorProto;
class EnumValueDescriptorProto;
class DescriptorProto;
class DescriptorProto_ReservedRange;
class OneofDescriptorProto;
class OneofOptions;
enum FieldDescriptorProto_Type : int;
enum FieldDescriptorProto_Label : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT ExtensionDescriptor : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kExtensionSetFieldNumber = 1,
  };

  ExtensionDescriptor();
  ~ExtensionDescriptor() override;
  ExtensionDescriptor(ExtensionDescriptor&&) noexcept;
  ExtensionDescriptor& operator=(ExtensionDescriptor&&);
  ExtensionDescriptor(const ExtensionDescriptor&);
  ExtensionDescriptor& operator=(const ExtensionDescriptor&);
  bool operator==(const ExtensionDescriptor&) const;
  bool operator!=(const ExtensionDescriptor& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_extension_set() const { return _has_field_[1]; }
  const FileDescriptorSet& extension_set() const { return *extension_set_; }
  FileDescriptorSet* mutable_extension_set() { _has_field_.set(1); return extension_set_.get(); }

 private:
  ::protozero::CopyablePtr<FileDescriptorSet> extension_set_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_EXTENSION_DESCRIPTOR_PROTO_CPP_H_
