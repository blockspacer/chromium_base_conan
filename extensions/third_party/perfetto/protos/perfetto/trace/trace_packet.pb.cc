// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/trace_packet.proto

#include "protos/perfetto/trace/trace_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AndroidLogPacket_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fpower_2fbattery_5fcounters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryCounters_protos_2fperfetto_2ftrace_2fpower_2fbattery_5fcounters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ChromeEventBundle_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClockSnapshot_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CpuInfo_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fdeobfuscation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeobfuscationMapping_protos_2fperfetto_2ftrace_2fprofiling_2fdeobfuscation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fextension_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionDescriptor_protos_2fperfetto_2ftrace_2fextension_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fgpu_5fmem_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuMemTotalEvent_protos_2fperfetto_2ftrace_2fandroid_2fgpu_5fmem_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5frender_5fstage_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuRenderStageEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5frender_5fstage_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HeapGraph_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2finitial_5fdisplay_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitialDisplayState_protos_2fperfetto_2ftrace_2fandroid_2finitial_5fdisplay_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_InternedData_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModuleSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fpackages_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PackagesList_protos_2fperfetto_2ftrace_2fandroid_2fpackages_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PowerRails_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessStats_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessTree_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfiledFrameSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SmapsPacket_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemInfo_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestEvent_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrace_5fpacket_5fdefaults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracePacketDefaults_protos_2fperfetto_2ftrace_2ftrace_5fpacket_5fdefaults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trigger_protos_2fperfetto_2ftrace_2ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VulkanApiEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto;
namespace perfetto {
namespace protos {
class TracePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracePacket> _instance;
  const ::perfetto::protos::ProcessTree* process_tree_;
  const ::perfetto::protos::ProcessStats* process_stats_;
  const ::perfetto::protos::InodeFileMap* inode_file_map_;
  const ::perfetto::protos::ChromeEventBundle* chrome_events_;
  const ::perfetto::protos::ClockSnapshot* clock_snapshot_;
  const ::perfetto::protos::SysStats* sys_stats_;
  const ::perfetto::protos::TrackEvent* track_event_;
  const ::perfetto::protos::TraceConfig* trace_config_;
  const ::perfetto::protos::FtraceStats* ftrace_stats_;
  const ::perfetto::protos::TraceStats* trace_stats_;
  const ::perfetto::protos::ProfilePacket* profile_packet_;
  const ::perfetto::protos::StreamingAllocation* streaming_allocation_;
  const ::perfetto::protos::StreamingFree* streaming_free_;
  const ::perfetto::protos::BatteryCounters* battery_;
  const ::perfetto::protos::PowerRails* power_rails_;
  const ::perfetto::protos::AndroidLogPacket* android_log_;
  const ::perfetto::protos::SystemInfo* system_info_;
  const ::perfetto::protos::Trigger* trigger_;
  const ::perfetto::protos::PackagesList* packages_list_;
  const ::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata_;
  const ::perfetto::protos::PerfettoMetatrace* perfetto_metatrace_;
  const ::perfetto::protos::ChromeMetadataPacket* chrome_metadata_;
  const ::perfetto::protos::GpuCounterEvent* gpu_counter_event_;
  const ::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event_;
  const ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet_;
  const ::perfetto::protos::HeapGraph* heap_graph_;
  const ::perfetto::protos::GraphicsFrameEvent* graphics_frame_event_;
  const ::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event_;
  const ::perfetto::protos::GpuLog* gpu_log_;
  const ::perfetto::protos::VulkanApiEvent* vulkan_api_event_;
  const ::perfetto::protos::PerfSample* perf_sample_;
  const ::perfetto::protos::CpuInfo* cpu_info_;
  const ::perfetto::protos::SmapsPacket* smaps_packet_;
  const ::perfetto::protos::TracingServiceEvent* service_event_;
  const ::perfetto::protos::InitialDisplayState* initial_display_state_;
  const ::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event_;
  const ::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot_;
  const ::perfetto::protos::FrameTimelineEvent* frame_timeline_event_;
  const ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols_;
  const ::perfetto::protos::ModuleSymbols* module_symbols_;
  const ::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping_;
  const ::perfetto::protos::TrackDescriptor* track_descriptor_;
  const ::perfetto::protos::ProcessDescriptor* process_descriptor_;
  const ::perfetto::protos::ThreadDescriptor* thread_descriptor_;
  const ::perfetto::protos::FtraceEventBundle* ftrace_events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronization_marker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_packets_;
  const ::perfetto::protos::ExtensionDescriptor* extension_descriptor_;
  const ::perfetto::protos::TestEvent* for_testing_;
  ::PROTOBUF_NAMESPACE_ID::int32 trusted_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trusted_packet_sequence_id_;
} _TracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TracePacket_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracePacket_default_instance_;
    new (ptr) ::perfetto::protos::TracePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<49> scc_info_TracePacket_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 49, InitDefaultsscc_info_TracePacket_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto}, {
      &scc_info_ProcessTree_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto.base,
      &scc_info_ProcessStats_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto.base,
      &scc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base,
      &scc_info_ChromeEventBundle_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto.base,
      &scc_info_ClockSnapshot_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto.base,
      &scc_info_SysStats_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto.base,
      &scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base,
      &scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto.base,
      &scc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto.base,
      &scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base,
      &scc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_BatteryCounters_protos_2fperfetto_2ftrace_2fpower_2fbattery_5fcounters_2eproto.base,
      &scc_info_PowerRails_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto.base,
      &scc_info_AndroidLogPacket_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto.base,
      &scc_info_SystemInfo_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto.base,
      &scc_info_Trigger_protos_2fperfetto_2ftrace_2ftrigger_2eproto.base,
      &scc_info_PackagesList_protos_2fperfetto_2ftrace_2fandroid_2fpackages_5flist_2eproto.base,
      &scc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto.base,
      &scc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base,
      &scc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base,
      &scc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto.base,
      &scc_info_GpuRenderStageEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5frender_5fstage_5fevent_2eproto.base,
      &scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_HeapGraph_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto.base,
      &scc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base,
      &scc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto.base,
      &scc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto.base,
      &scc_info_VulkanApiEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto.base,
      &scc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_CpuInfo_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto.base,
      &scc_info_SmapsPacket_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto.base,
      &scc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto.base,
      &scc_info_InitialDisplayState_protos_2fperfetto_2ftrace_2fandroid_2finitial_5fdisplay_5fstate_2eproto.base,
      &scc_info_GpuMemTotalEvent_protos_2fperfetto_2ftrace_2fandroid_2fgpu_5fmem_5fevent_2eproto.base,
      &scc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base,
      &scc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,
      &scc_info_ProfiledFrameSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_ModuleSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_DeobfuscationMapping_protos_2fperfetto_2ftrace_2fprofiling_2fdeobfuscation_2eproto.base,
      &scc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto.base,
      &scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto.base,
      &scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto.base,
      &scc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base,
      &scc_info_ExtensionDescriptor_protos_2fperfetto_2ftrace_2fextension_5fdescriptor_2eproto.base,
      &scc_info_TestEvent_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto.base,
      &scc_info_InternedData_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto.base,
      &scc_info_TracePacketDefaults_protos_2fperfetto_2ftrace_2ftrace_5fpacket_5fdefaults_2eproto.base,}};

namespace perfetto {
namespace protos {
bool TracePacket_SequenceFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TracePacket_SequenceFlags_strings[3] = {};

static const char TracePacket_SequenceFlags_names[] =
  "SEQ_INCREMENTAL_STATE_CLEARED"
  "SEQ_NEEDS_INCREMENTAL_STATE"
  "SEQ_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TracePacket_SequenceFlags_entries[] = {
  { {TracePacket_SequenceFlags_names + 0, 29}, 1 },
  { {TracePacket_SequenceFlags_names + 29, 27}, 2 },
  { {TracePacket_SequenceFlags_names + 56, 15}, 0 },
};

static const int TracePacket_SequenceFlags_entries_by_number[] = {
  2, // 0 -> SEQ_UNSPECIFIED
  0, // 1 -> SEQ_INCREMENTAL_STATE_CLEARED
  1, // 2 -> SEQ_NEEDS_INCREMENTAL_STATE
};

const std::string& TracePacket_SequenceFlags_Name(
    TracePacket_SequenceFlags value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TracePacket_SequenceFlags_entries,
          TracePacket_SequenceFlags_entries_by_number,
          3, TracePacket_SequenceFlags_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TracePacket_SequenceFlags_entries,
      TracePacket_SequenceFlags_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TracePacket_SequenceFlags_strings[idx].get();
}
bool TracePacket_SequenceFlags_Parse(
    const std::string& name, TracePacket_SequenceFlags* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TracePacket_SequenceFlags_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TracePacket_SequenceFlags>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TracePacket_SequenceFlags TracePacket::SEQ_UNSPECIFIED;
constexpr TracePacket_SequenceFlags TracePacket::SEQ_INCREMENTAL_STATE_CLEARED;
constexpr TracePacket_SequenceFlags TracePacket::SEQ_NEEDS_INCREMENTAL_STATE;
constexpr TracePacket_SequenceFlags TracePacket::SequenceFlags_MIN;
constexpr TracePacket_SequenceFlags TracePacket::SequenceFlags_MAX;
constexpr int TracePacket::SequenceFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TracePacket::InitAsDefaultInstance() {
  ::perfetto::protos::_TracePacket_default_instance_._instance.get_mutable()->interned_data_ = const_cast< ::perfetto::protos::InternedData*>(
      ::perfetto::protos::InternedData::internal_default_instance());
  ::perfetto::protos::_TracePacket_default_instance_._instance.get_mutable()->trace_packet_defaults_ = const_cast< ::perfetto::protos::TracePacketDefaults*>(
      ::perfetto::protos::TracePacketDefaults::internal_default_instance());
}
class TracePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TracePacket>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp_clock_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ProcessTree& process_tree(const TracePacket* msg);
  static const ::perfetto::protos::ProcessStats& process_stats(const TracePacket* msg);
  static const ::perfetto::protos::InodeFileMap& inode_file_map(const TracePacket* msg);
  static const ::perfetto::protos::ChromeEventBundle& chrome_events(const TracePacket* msg);
  static const ::perfetto::protos::ClockSnapshot& clock_snapshot(const TracePacket* msg);
  static const ::perfetto::protos::SysStats& sys_stats(const TracePacket* msg);
  static const ::perfetto::protos::TrackEvent& track_event(const TracePacket* msg);
  static const ::perfetto::protos::TraceConfig& trace_config(const TracePacket* msg);
  static const ::perfetto::protos::FtraceStats& ftrace_stats(const TracePacket* msg);
  static const ::perfetto::protos::TraceStats& trace_stats(const TracePacket* msg);
  static const ::perfetto::protos::ProfilePacket& profile_packet(const TracePacket* msg);
  static const ::perfetto::protos::StreamingAllocation& streaming_allocation(const TracePacket* msg);
  static const ::perfetto::protos::StreamingFree& streaming_free(const TracePacket* msg);
  static const ::perfetto::protos::BatteryCounters& battery(const TracePacket* msg);
  static const ::perfetto::protos::PowerRails& power_rails(const TracePacket* msg);
  static const ::perfetto::protos::AndroidLogPacket& android_log(const TracePacket* msg);
  static const ::perfetto::protos::SystemInfo& system_info(const TracePacket* msg);
  static const ::perfetto::protos::Trigger& trigger(const TracePacket* msg);
  static const ::perfetto::protos::PackagesList& packages_list(const TracePacket* msg);
  static const ::perfetto::protos::ChromeBenchmarkMetadata& chrome_benchmark_metadata(const TracePacket* msg);
  static const ::perfetto::protos::PerfettoMetatrace& perfetto_metatrace(const TracePacket* msg);
  static const ::perfetto::protos::ChromeMetadataPacket& chrome_metadata(const TracePacket* msg);
  static const ::perfetto::protos::GpuCounterEvent& gpu_counter_event(const TracePacket* msg);
  static const ::perfetto::protos::GpuRenderStageEvent& gpu_render_stage_event(const TracePacket* msg);
  static const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet(const TracePacket* msg);
  static const ::perfetto::protos::HeapGraph& heap_graph(const TracePacket* msg);
  static const ::perfetto::protos::GraphicsFrameEvent& graphics_frame_event(const TracePacket* msg);
  static const ::perfetto::protos::VulkanMemoryEvent& vulkan_memory_event(const TracePacket* msg);
  static const ::perfetto::protos::GpuLog& gpu_log(const TracePacket* msg);
  static const ::perfetto::protos::VulkanApiEvent& vulkan_api_event(const TracePacket* msg);
  static const ::perfetto::protos::PerfSample& perf_sample(const TracePacket* msg);
  static const ::perfetto::protos::CpuInfo& cpu_info(const TracePacket* msg);
  static const ::perfetto::protos::SmapsPacket& smaps_packet(const TracePacket* msg);
  static const ::perfetto::protos::TracingServiceEvent& service_event(const TracePacket* msg);
  static const ::perfetto::protos::InitialDisplayState& initial_display_state(const TracePacket* msg);
  static const ::perfetto::protos::GpuMemTotalEvent& gpu_mem_total_event(const TracePacket* msg);
  static const ::perfetto::protos::MemoryTrackerSnapshot& memory_tracker_snapshot(const TracePacket* msg);
  static const ::perfetto::protos::FrameTimelineEvent& frame_timeline_event(const TracePacket* msg);
  static const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols(const TracePacket* msg);
  static const ::perfetto::protos::ModuleSymbols& module_symbols(const TracePacket* msg);
  static const ::perfetto::protos::DeobfuscationMapping& deobfuscation_mapping(const TracePacket* msg);
  static const ::perfetto::protos::TrackDescriptor& track_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::ProcessDescriptor& process_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::ThreadDescriptor& thread_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::FtraceEventBundle& ftrace_events(const TracePacket* msg);
  static const ::perfetto::protos::ExtensionDescriptor& extension_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::TestEvent& for_testing(const TracePacket* msg);
  static const ::perfetto::protos::InternedData& interned_data(const TracePacket* msg);
  static void set_has_interned_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_incremental_state_cleared(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::TracePacketDefaults& trace_packet_defaults(const TracePacket* msg);
  static void set_has_trace_packet_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_previous_packet_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::perfetto::protos::ProcessTree&
TracePacket::_Internal::process_tree(const TracePacket* msg) {
  return *msg->data_.process_tree_;
}
const ::perfetto::protos::ProcessStats&
TracePacket::_Internal::process_stats(const TracePacket* msg) {
  return *msg->data_.process_stats_;
}
const ::perfetto::protos::InodeFileMap&
TracePacket::_Internal::inode_file_map(const TracePacket* msg) {
  return *msg->data_.inode_file_map_;
}
const ::perfetto::protos::ChromeEventBundle&
TracePacket::_Internal::chrome_events(const TracePacket* msg) {
  return *msg->data_.chrome_events_;
}
const ::perfetto::protos::ClockSnapshot&
TracePacket::_Internal::clock_snapshot(const TracePacket* msg) {
  return *msg->data_.clock_snapshot_;
}
const ::perfetto::protos::SysStats&
TracePacket::_Internal::sys_stats(const TracePacket* msg) {
  return *msg->data_.sys_stats_;
}
const ::perfetto::protos::TrackEvent&
TracePacket::_Internal::track_event(const TracePacket* msg) {
  return *msg->data_.track_event_;
}
const ::perfetto::protos::TraceConfig&
TracePacket::_Internal::trace_config(const TracePacket* msg) {
  return *msg->data_.trace_config_;
}
const ::perfetto::protos::FtraceStats&
TracePacket::_Internal::ftrace_stats(const TracePacket* msg) {
  return *msg->data_.ftrace_stats_;
}
const ::perfetto::protos::TraceStats&
TracePacket::_Internal::trace_stats(const TracePacket* msg) {
  return *msg->data_.trace_stats_;
}
const ::perfetto::protos::ProfilePacket&
TracePacket::_Internal::profile_packet(const TracePacket* msg) {
  return *msg->data_.profile_packet_;
}
const ::perfetto::protos::StreamingAllocation&
TracePacket::_Internal::streaming_allocation(const TracePacket* msg) {
  return *msg->data_.streaming_allocation_;
}
const ::perfetto::protos::StreamingFree&
TracePacket::_Internal::streaming_free(const TracePacket* msg) {
  return *msg->data_.streaming_free_;
}
const ::perfetto::protos::BatteryCounters&
TracePacket::_Internal::battery(const TracePacket* msg) {
  return *msg->data_.battery_;
}
const ::perfetto::protos::PowerRails&
TracePacket::_Internal::power_rails(const TracePacket* msg) {
  return *msg->data_.power_rails_;
}
const ::perfetto::protos::AndroidLogPacket&
TracePacket::_Internal::android_log(const TracePacket* msg) {
  return *msg->data_.android_log_;
}
const ::perfetto::protos::SystemInfo&
TracePacket::_Internal::system_info(const TracePacket* msg) {
  return *msg->data_.system_info_;
}
const ::perfetto::protos::Trigger&
TracePacket::_Internal::trigger(const TracePacket* msg) {
  return *msg->data_.trigger_;
}
const ::perfetto::protos::PackagesList&
TracePacket::_Internal::packages_list(const TracePacket* msg) {
  return *msg->data_.packages_list_;
}
const ::perfetto::protos::ChromeBenchmarkMetadata&
TracePacket::_Internal::chrome_benchmark_metadata(const TracePacket* msg) {
  return *msg->data_.chrome_benchmark_metadata_;
}
const ::perfetto::protos::PerfettoMetatrace&
TracePacket::_Internal::perfetto_metatrace(const TracePacket* msg) {
  return *msg->data_.perfetto_metatrace_;
}
const ::perfetto::protos::ChromeMetadataPacket&
TracePacket::_Internal::chrome_metadata(const TracePacket* msg) {
  return *msg->data_.chrome_metadata_;
}
const ::perfetto::protos::GpuCounterEvent&
TracePacket::_Internal::gpu_counter_event(const TracePacket* msg) {
  return *msg->data_.gpu_counter_event_;
}
const ::perfetto::protos::GpuRenderStageEvent&
TracePacket::_Internal::gpu_render_stage_event(const TracePacket* msg) {
  return *msg->data_.gpu_render_stage_event_;
}
const ::perfetto::protos::StreamingProfilePacket&
TracePacket::_Internal::streaming_profile_packet(const TracePacket* msg) {
  return *msg->data_.streaming_profile_packet_;
}
const ::perfetto::protos::HeapGraph&
TracePacket::_Internal::heap_graph(const TracePacket* msg) {
  return *msg->data_.heap_graph_;
}
const ::perfetto::protos::GraphicsFrameEvent&
TracePacket::_Internal::graphics_frame_event(const TracePacket* msg) {
  return *msg->data_.graphics_frame_event_;
}
const ::perfetto::protos::VulkanMemoryEvent&
TracePacket::_Internal::vulkan_memory_event(const TracePacket* msg) {
  return *msg->data_.vulkan_memory_event_;
}
const ::perfetto::protos::GpuLog&
TracePacket::_Internal::gpu_log(const TracePacket* msg) {
  return *msg->data_.gpu_log_;
}
const ::perfetto::protos::VulkanApiEvent&
TracePacket::_Internal::vulkan_api_event(const TracePacket* msg) {
  return *msg->data_.vulkan_api_event_;
}
const ::perfetto::protos::PerfSample&
TracePacket::_Internal::perf_sample(const TracePacket* msg) {
  return *msg->data_.perf_sample_;
}
const ::perfetto::protos::CpuInfo&
TracePacket::_Internal::cpu_info(const TracePacket* msg) {
  return *msg->data_.cpu_info_;
}
const ::perfetto::protos::SmapsPacket&
TracePacket::_Internal::smaps_packet(const TracePacket* msg) {
  return *msg->data_.smaps_packet_;
}
const ::perfetto::protos::TracingServiceEvent&
TracePacket::_Internal::service_event(const TracePacket* msg) {
  return *msg->data_.service_event_;
}
const ::perfetto::protos::InitialDisplayState&
TracePacket::_Internal::initial_display_state(const TracePacket* msg) {
  return *msg->data_.initial_display_state_;
}
const ::perfetto::protos::GpuMemTotalEvent&
TracePacket::_Internal::gpu_mem_total_event(const TracePacket* msg) {
  return *msg->data_.gpu_mem_total_event_;
}
const ::perfetto::protos::MemoryTrackerSnapshot&
TracePacket::_Internal::memory_tracker_snapshot(const TracePacket* msg) {
  return *msg->data_.memory_tracker_snapshot_;
}
const ::perfetto::protos::FrameTimelineEvent&
TracePacket::_Internal::frame_timeline_event(const TracePacket* msg) {
  return *msg->data_.frame_timeline_event_;
}
const ::perfetto::protos::ProfiledFrameSymbols&
TracePacket::_Internal::profiled_frame_symbols(const TracePacket* msg) {
  return *msg->data_.profiled_frame_symbols_;
}
const ::perfetto::protos::ModuleSymbols&
TracePacket::_Internal::module_symbols(const TracePacket* msg) {
  return *msg->data_.module_symbols_;
}
const ::perfetto::protos::DeobfuscationMapping&
TracePacket::_Internal::deobfuscation_mapping(const TracePacket* msg) {
  return *msg->data_.deobfuscation_mapping_;
}
const ::perfetto::protos::TrackDescriptor&
TracePacket::_Internal::track_descriptor(const TracePacket* msg) {
  return *msg->data_.track_descriptor_;
}
const ::perfetto::protos::ProcessDescriptor&
TracePacket::_Internal::process_descriptor(const TracePacket* msg) {
  return *msg->data_.process_descriptor_;
}
const ::perfetto::protos::ThreadDescriptor&
TracePacket::_Internal::thread_descriptor(const TracePacket* msg) {
  return *msg->data_.thread_descriptor_;
}
const ::perfetto::protos::FtraceEventBundle&
TracePacket::_Internal::ftrace_events(const TracePacket* msg) {
  return *msg->data_.ftrace_events_;
}
const ::perfetto::protos::ExtensionDescriptor&
TracePacket::_Internal::extension_descriptor(const TracePacket* msg) {
  return *msg->data_.extension_descriptor_;
}
const ::perfetto::protos::TestEvent&
TracePacket::_Internal::for_testing(const TracePacket* msg) {
  return *msg->data_.for_testing_;
}
const ::perfetto::protos::InternedData&
TracePacket::_Internal::interned_data(const TracePacket* msg) {
  return *msg->interned_data_;
}
const ::perfetto::protos::TracePacketDefaults&
TracePacket::_Internal::trace_packet_defaults(const TracePacket* msg) {
  return *msg->trace_packet_defaults_;
}
void TracePacket::set_allocated_process_tree(::perfetto::protos::ProcessTree* process_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (process_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_tree, submessage_arena);
    }
    set_has_process_tree();
    data_.process_tree_ = process_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_tree)
}
void TracePacket::clear_process_tree() {
  if (has_process_tree()) {
    delete data_.process_tree_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_process_stats(::perfetto::protos::ProcessStats* process_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (process_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_stats, submessage_arena);
    }
    set_has_process_stats();
    data_.process_stats_ = process_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_stats)
}
void TracePacket::clear_process_stats() {
  if (has_process_stats()) {
    delete data_.process_stats_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_inode_file_map(::perfetto::protos::InodeFileMap* inode_file_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (inode_file_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inode_file_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inode_file_map, submessage_arena);
    }
    set_has_inode_file_map();
    data_.inode_file_map_ = inode_file_map;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.inode_file_map)
}
void TracePacket::clear_inode_file_map() {
  if (has_inode_file_map()) {
    delete data_.inode_file_map_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (chrome_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_events, submessage_arena);
    }
    set_has_chrome_events();
    data_.chrome_events_ = chrome_events;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_events)
}
void TracePacket::clear_chrome_events() {
  if (has_chrome_events()) {
    delete data_.chrome_events_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (clock_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_snapshot, submessage_arena);
    }
    set_has_clock_snapshot();
    data_.clock_snapshot_ = clock_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.clock_snapshot)
}
void TracePacket::clear_clock_snapshot() {
  if (has_clock_snapshot()) {
    delete data_.clock_snapshot_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_sys_stats(::perfetto::protos::SysStats* sys_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (sys_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_stats, submessage_arena);
    }
    set_has_sys_stats();
    data_.sys_stats_ = sys_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.sys_stats)
}
void TracePacket::clear_sys_stats() {
  if (has_sys_stats()) {
    delete data_.sys_stats_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_track_event(::perfetto::protos::TrackEvent* track_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (track_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      track_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event, submessage_arena);
    }
    set_has_track_event();
    data_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.track_event)
}
void TracePacket::clear_track_event() {
  if (has_track_event()) {
    delete data_.track_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_config, submessage_arena);
    }
    set_has_trace_config();
    data_.trace_config_ = trace_config;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_config)
}
void TracePacket::clear_trace_config() {
  if (has_trace_config()) {
    delete data_.trace_config_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_ftrace_stats(::perfetto::protos::FtraceStats* ftrace_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (ftrace_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ftrace_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_stats, submessage_arena);
    }
    set_has_ftrace_stats();
    data_.ftrace_stats_ = ftrace_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.ftrace_stats)
}
void TracePacket::clear_ftrace_stats() {
  if (has_ftrace_stats()) {
    delete data_.ftrace_stats_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (trace_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trace_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_stats, submessage_arena);
    }
    set_has_trace_stats();
    data_.trace_stats_ = trace_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_stats)
}
void TracePacket::clear_trace_stats() {
  if (has_trace_stats()) {
    delete data_.trace_stats_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_profile_packet(::perfetto::protos::ProfilePacket* profile_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (profile_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      profile_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_packet, submessage_arena);
    }
    set_has_profile_packet();
    data_.profile_packet_ = profile_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.profile_packet)
}
void TracePacket::clear_profile_packet() {
  if (has_profile_packet()) {
    delete data_.profile_packet_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_allocation(::perfetto::protos::StreamingAllocation* streaming_allocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (streaming_allocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      streaming_allocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_allocation, submessage_arena);
    }
    set_has_streaming_allocation();
    data_.streaming_allocation_ = streaming_allocation;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_allocation)
}
void TracePacket::clear_streaming_allocation() {
  if (has_streaming_allocation()) {
    delete data_.streaming_allocation_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_free(::perfetto::protos::StreamingFree* streaming_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (streaming_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      streaming_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_free, submessage_arena);
    }
    set_has_streaming_free();
    data_.streaming_free_ = streaming_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_free)
}
void TracePacket::clear_streaming_free() {
  if (has_streaming_free()) {
    delete data_.streaming_free_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_battery(::perfetto::protos::BatteryCounters* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    set_has_battery();
    data_.battery_ = battery;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.battery)
}
void TracePacket::clear_battery() {
  if (has_battery()) {
    delete data_.battery_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_power_rails(::perfetto::protos::PowerRails* power_rails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (power_rails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_rails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_rails, submessage_arena);
    }
    set_has_power_rails();
    data_.power_rails_ = power_rails;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.power_rails)
}
void TracePacket::clear_power_rails() {
  if (has_power_rails()) {
    delete data_.power_rails_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_log(::perfetto::protos::AndroidLogPacket* android_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (android_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      android_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_log, submessage_arena);
    }
    set_has_android_log();
    data_.android_log_ = android_log;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_log)
}
void TracePacket::clear_android_log() {
  if (has_android_log()) {
    delete data_.android_log_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_system_info(::perfetto::protos::SystemInfo* system_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (system_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_info, submessage_arena);
    }
    set_has_system_info();
    data_.system_info_ = system_info;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.system_info)
}
void TracePacket::clear_system_info() {
  if (has_system_info()) {
    delete data_.system_info_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_trigger(::perfetto::protos::Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    set_has_trigger();
    data_.trigger_ = trigger;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trigger)
}
void TracePacket::clear_trigger() {
  if (has_trigger()) {
    delete data_.trigger_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_packages_list(::perfetto::protos::PackagesList* packages_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (packages_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packages_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packages_list, submessage_arena);
    }
    set_has_packages_list();
    data_.packages_list_ = packages_list;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.packages_list)
}
void TracePacket::clear_packages_list() {
  if (has_packages_list()) {
    delete data_.packages_list_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_benchmark_metadata(::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (chrome_benchmark_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_benchmark_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_benchmark_metadata, submessage_arena);
    }
    set_has_chrome_benchmark_metadata();
    data_.chrome_benchmark_metadata_ = chrome_benchmark_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_benchmark_metadata)
}
void TracePacket::clear_chrome_benchmark_metadata() {
  if (has_chrome_benchmark_metadata()) {
    delete data_.chrome_benchmark_metadata_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_perfetto_metatrace(::perfetto::protos::PerfettoMetatrace* perfetto_metatrace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (perfetto_metatrace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perfetto_metatrace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perfetto_metatrace, submessage_arena);
    }
    set_has_perfetto_metatrace();
    data_.perfetto_metatrace_ = perfetto_metatrace;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.perfetto_metatrace)
}
void TracePacket::clear_perfetto_metatrace() {
  if (has_perfetto_metatrace()) {
    delete data_.perfetto_metatrace_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_metadata(::perfetto::protos::ChromeMetadataPacket* chrome_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (chrome_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_metadata, submessage_arena);
    }
    set_has_chrome_metadata();
    data_.chrome_metadata_ = chrome_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_metadata)
}
void TracePacket::clear_chrome_metadata() {
  if (has_chrome_metadata()) {
    delete data_.chrome_metadata_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_counter_event(::perfetto::protos::GpuCounterEvent* gpu_counter_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (gpu_counter_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_counter_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_counter_event, submessage_arena);
    }
    set_has_gpu_counter_event();
    data_.gpu_counter_event_ = gpu_counter_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_counter_event)
}
void TracePacket::clear_gpu_counter_event() {
  if (has_gpu_counter_event()) {
    delete data_.gpu_counter_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_render_stage_event(::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (gpu_render_stage_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_render_stage_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_render_stage_event, submessage_arena);
    }
    set_has_gpu_render_stage_event();
    data_.gpu_render_stage_event_ = gpu_render_stage_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_render_stage_event)
}
void TracePacket::clear_gpu_render_stage_event() {
  if (has_gpu_render_stage_event()) {
    delete data_.gpu_render_stage_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (streaming_profile_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      streaming_profile_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_profile_packet, submessage_arena);
    }
    set_has_streaming_profile_packet();
    data_.streaming_profile_packet_ = streaming_profile_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_profile_packet)
}
void TracePacket::clear_streaming_profile_packet() {
  if (has_streaming_profile_packet()) {
    delete data_.streaming_profile_packet_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_heap_graph(::perfetto::protos::HeapGraph* heap_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (heap_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heap_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap_graph, submessage_arena);
    }
    set_has_heap_graph();
    data_.heap_graph_ = heap_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.heap_graph)
}
void TracePacket::clear_heap_graph() {
  if (has_heap_graph()) {
    delete data_.heap_graph_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_graphics_frame_event(::perfetto::protos::GraphicsFrameEvent* graphics_frame_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (graphics_frame_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graphics_frame_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graphics_frame_event, submessage_arena);
    }
    set_has_graphics_frame_event();
    data_.graphics_frame_event_ = graphics_frame_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.graphics_frame_event)
}
void TracePacket::clear_graphics_frame_event() {
  if (has_graphics_frame_event()) {
    delete data_.graphics_frame_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_vulkan_memory_event(::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (vulkan_memory_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vulkan_memory_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_memory_event, submessage_arena);
    }
    set_has_vulkan_memory_event();
    data_.vulkan_memory_event_ = vulkan_memory_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.vulkan_memory_event)
}
void TracePacket::clear_vulkan_memory_event() {
  if (has_vulkan_memory_event()) {
    delete data_.vulkan_memory_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_log(::perfetto::protos::GpuLog* gpu_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (gpu_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_log, submessage_arena);
    }
    set_has_gpu_log();
    data_.gpu_log_ = gpu_log;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_log)
}
void TracePacket::clear_gpu_log() {
  if (has_gpu_log()) {
    delete data_.gpu_log_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_vulkan_api_event(::perfetto::protos::VulkanApiEvent* vulkan_api_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (vulkan_api_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vulkan_api_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_api_event, submessage_arena);
    }
    set_has_vulkan_api_event();
    data_.vulkan_api_event_ = vulkan_api_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.vulkan_api_event)
}
void TracePacket::clear_vulkan_api_event() {
  if (has_vulkan_api_event()) {
    delete data_.vulkan_api_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_perf_sample(::perfetto::protos::PerfSample* perf_sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (perf_sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perf_sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_sample, submessage_arena);
    }
    set_has_perf_sample();
    data_.perf_sample_ = perf_sample;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.perf_sample)
}
void TracePacket::clear_perf_sample() {
  if (has_perf_sample()) {
    delete data_.perf_sample_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_cpu_info(::perfetto::protos::CpuInfo* cpu_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (cpu_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_info, submessage_arena);
    }
    set_has_cpu_info();
    data_.cpu_info_ = cpu_info;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.cpu_info)
}
void TracePacket::clear_cpu_info() {
  if (has_cpu_info()) {
    delete data_.cpu_info_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_smaps_packet(::perfetto::protos::SmapsPacket* smaps_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (smaps_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smaps_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smaps_packet, submessage_arena);
    }
    set_has_smaps_packet();
    data_.smaps_packet_ = smaps_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.smaps_packet)
}
void TracePacket::clear_smaps_packet() {
  if (has_smaps_packet()) {
    delete data_.smaps_packet_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_service_event(::perfetto::protos::TracingServiceEvent* service_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (service_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_event, submessage_arena);
    }
    set_has_service_event();
    data_.service_event_ = service_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.service_event)
}
void TracePacket::clear_service_event() {
  if (has_service_event()) {
    delete data_.service_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_initial_display_state(::perfetto::protos::InitialDisplayState* initial_display_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (initial_display_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initial_display_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_display_state, submessage_arena);
    }
    set_has_initial_display_state();
    data_.initial_display_state_ = initial_display_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.initial_display_state)
}
void TracePacket::clear_initial_display_state() {
  if (has_initial_display_state()) {
    delete data_.initial_display_state_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_mem_total_event(::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (gpu_mem_total_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_mem_total_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_mem_total_event, submessage_arena);
    }
    set_has_gpu_mem_total_event();
    data_.gpu_mem_total_event_ = gpu_mem_total_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_mem_total_event)
}
void TracePacket::clear_gpu_mem_total_event() {
  if (has_gpu_mem_total_event()) {
    delete data_.gpu_mem_total_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_memory_tracker_snapshot(::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (memory_tracker_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory_tracker_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_tracker_snapshot, submessage_arena);
    }
    set_has_memory_tracker_snapshot();
    data_.memory_tracker_snapshot_ = memory_tracker_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.memory_tracker_snapshot)
}
void TracePacket::clear_memory_tracker_snapshot() {
  if (has_memory_tracker_snapshot()) {
    delete data_.memory_tracker_snapshot_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_frame_timeline_event(::perfetto::protos::FrameTimelineEvent* frame_timeline_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (frame_timeline_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_timeline_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_timeline_event, submessage_arena);
    }
    set_has_frame_timeline_event();
    data_.frame_timeline_event_ = frame_timeline_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.frame_timeline_event)
}
void TracePacket::clear_frame_timeline_event() {
  if (has_frame_timeline_event()) {
    delete data_.frame_timeline_event_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (profiled_frame_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      profiled_frame_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiled_frame_symbols, submessage_arena);
    }
    set_has_profiled_frame_symbols();
    data_.profiled_frame_symbols_ = profiled_frame_symbols;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.profiled_frame_symbols)
}
void TracePacket::clear_profiled_frame_symbols() {
  if (has_profiled_frame_symbols()) {
    delete data_.profiled_frame_symbols_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_module_symbols(::perfetto::protos::ModuleSymbols* module_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (module_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      module_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module_symbols, submessage_arena);
    }
    set_has_module_symbols();
    data_.module_symbols_ = module_symbols;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.module_symbols)
}
void TracePacket::clear_module_symbols() {
  if (has_module_symbols()) {
    delete data_.module_symbols_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_deobfuscation_mapping(::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (deobfuscation_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deobfuscation_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deobfuscation_mapping, submessage_arena);
    }
    set_has_deobfuscation_mapping();
    data_.deobfuscation_mapping_ = deobfuscation_mapping;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.deobfuscation_mapping)
}
void TracePacket::clear_deobfuscation_mapping() {
  if (has_deobfuscation_mapping()) {
    delete data_.deobfuscation_mapping_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_track_descriptor(::perfetto::protos::TrackDescriptor* track_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (track_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      track_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_descriptor, submessage_arena);
    }
    set_has_track_descriptor();
    data_.track_descriptor_ = track_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.track_descriptor)
}
void TracePacket::clear_track_descriptor() {
  if (has_track_descriptor()) {
    delete data_.track_descriptor_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (process_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_descriptor, submessage_arena);
    }
    set_has_process_descriptor();
    data_.process_descriptor_ = process_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_descriptor)
}
void TracePacket::clear_process_descriptor() {
  if (has_process_descriptor()) {
    delete data_.process_descriptor_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (thread_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thread_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_descriptor, submessage_arena);
    }
    set_has_thread_descriptor();
    data_.thread_descriptor_ = thread_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.thread_descriptor)
}
void TracePacket::clear_thread_descriptor() {
  if (has_thread_descriptor()) {
    delete data_.thread_descriptor_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_ftrace_events(::perfetto::protos::FtraceEventBundle* ftrace_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (ftrace_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ftrace_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_events, submessage_arena);
    }
    set_has_ftrace_events();
    data_.ftrace_events_ = ftrace_events;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.ftrace_events)
}
void TracePacket::clear_ftrace_events() {
  if (has_ftrace_events()) {
    delete data_.ftrace_events_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_extension_descriptor(::perfetto::protos::ExtensionDescriptor* extension_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (extension_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extension_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_descriptor, submessage_arena);
    }
    set_has_extension_descriptor();
    data_.extension_descriptor_ = extension_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.extension_descriptor)
}
void TracePacket::clear_extension_descriptor() {
  if (has_extension_descriptor()) {
    delete data_.extension_descriptor_;
    clear_has_data();
  }
}
void TracePacket::set_allocated_for_testing(::perfetto::protos::TestEvent* for_testing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (for_testing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      for_testing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, for_testing, submessage_arena);
    }
    set_has_for_testing();
    data_.for_testing_ = for_testing;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.for_testing)
}
void TracePacket::clear_for_testing() {
  if (has_for_testing()) {
    delete data_.for_testing_;
    clear_has_data();
  }
}
void TracePacket::clear_interned_data() {
  if (interned_data_ != nullptr) interned_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TracePacket::clear_trace_packet_defaults() {
  if (trace_packet_defaults_ != nullptr) trace_packet_defaults_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TracePacket::TracePacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracePacket)
}
TracePacket::TracePacket(const TracePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interned_data()) {
    interned_data_ = new ::perfetto::protos::InternedData(*from.interned_data_);
  } else {
    interned_data_ = nullptr;
  }
  if (from.has_trace_packet_defaults()) {
    trace_packet_defaults_ = new ::perfetto::protos::TracePacketDefaults(*from.trace_packet_defaults_);
  } else {
    trace_packet_defaults_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_packet_dropped_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  clear_has_data();
  switch (from.data_case()) {
    case kProcessTree: {
      mutable_process_tree()->::perfetto::protos::ProcessTree::MergeFrom(from.process_tree());
      break;
    }
    case kProcessStats: {
      mutable_process_stats()->::perfetto::protos::ProcessStats::MergeFrom(from.process_stats());
      break;
    }
    case kInodeFileMap: {
      mutable_inode_file_map()->::perfetto::protos::InodeFileMap::MergeFrom(from.inode_file_map());
      break;
    }
    case kChromeEvents: {
      mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(from.chrome_events());
      break;
    }
    case kClockSnapshot: {
      mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(from.clock_snapshot());
      break;
    }
    case kSysStats: {
      mutable_sys_stats()->::perfetto::protos::SysStats::MergeFrom(from.sys_stats());
      break;
    }
    case kTrackEvent: {
      mutable_track_event()->::perfetto::protos::TrackEvent::MergeFrom(from.track_event());
      break;
    }
    case kTraceConfig: {
      mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
      break;
    }
    case kFtraceStats: {
      mutable_ftrace_stats()->::perfetto::protos::FtraceStats::MergeFrom(from.ftrace_stats());
      break;
    }
    case kTraceStats: {
      mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(from.trace_stats());
      break;
    }
    case kProfilePacket: {
      mutable_profile_packet()->::perfetto::protos::ProfilePacket::MergeFrom(from.profile_packet());
      break;
    }
    case kStreamingAllocation: {
      mutable_streaming_allocation()->::perfetto::protos::StreamingAllocation::MergeFrom(from.streaming_allocation());
      break;
    }
    case kStreamingFree: {
      mutable_streaming_free()->::perfetto::protos::StreamingFree::MergeFrom(from.streaming_free());
      break;
    }
    case kBattery: {
      mutable_battery()->::perfetto::protos::BatteryCounters::MergeFrom(from.battery());
      break;
    }
    case kPowerRails: {
      mutable_power_rails()->::perfetto::protos::PowerRails::MergeFrom(from.power_rails());
      break;
    }
    case kAndroidLog: {
      mutable_android_log()->::perfetto::protos::AndroidLogPacket::MergeFrom(from.android_log());
      break;
    }
    case kSystemInfo: {
      mutable_system_info()->::perfetto::protos::SystemInfo::MergeFrom(from.system_info());
      break;
    }
    case kTrigger: {
      mutable_trigger()->::perfetto::protos::Trigger::MergeFrom(from.trigger());
      break;
    }
    case kPackagesList: {
      mutable_packages_list()->::perfetto::protos::PackagesList::MergeFrom(from.packages_list());
      break;
    }
    case kChromeBenchmarkMetadata: {
      mutable_chrome_benchmark_metadata()->::perfetto::protos::ChromeBenchmarkMetadata::MergeFrom(from.chrome_benchmark_metadata());
      break;
    }
    case kPerfettoMetatrace: {
      mutable_perfetto_metatrace()->::perfetto::protos::PerfettoMetatrace::MergeFrom(from.perfetto_metatrace());
      break;
    }
    case kChromeMetadata: {
      mutable_chrome_metadata()->::perfetto::protos::ChromeMetadataPacket::MergeFrom(from.chrome_metadata());
      break;
    }
    case kGpuCounterEvent: {
      mutable_gpu_counter_event()->::perfetto::protos::GpuCounterEvent::MergeFrom(from.gpu_counter_event());
      break;
    }
    case kGpuRenderStageEvent: {
      mutable_gpu_render_stage_event()->::perfetto::protos::GpuRenderStageEvent::MergeFrom(from.gpu_render_stage_event());
      break;
    }
    case kStreamingProfilePacket: {
      mutable_streaming_profile_packet()->::perfetto::protos::StreamingProfilePacket::MergeFrom(from.streaming_profile_packet());
      break;
    }
    case kHeapGraph: {
      mutable_heap_graph()->::perfetto::protos::HeapGraph::MergeFrom(from.heap_graph());
      break;
    }
    case kGraphicsFrameEvent: {
      mutable_graphics_frame_event()->::perfetto::protos::GraphicsFrameEvent::MergeFrom(from.graphics_frame_event());
      break;
    }
    case kVulkanMemoryEvent: {
      mutable_vulkan_memory_event()->::perfetto::protos::VulkanMemoryEvent::MergeFrom(from.vulkan_memory_event());
      break;
    }
    case kGpuLog: {
      mutable_gpu_log()->::perfetto::protos::GpuLog::MergeFrom(from.gpu_log());
      break;
    }
    case kVulkanApiEvent: {
      mutable_vulkan_api_event()->::perfetto::protos::VulkanApiEvent::MergeFrom(from.vulkan_api_event());
      break;
    }
    case kPerfSample: {
      mutable_perf_sample()->::perfetto::protos::PerfSample::MergeFrom(from.perf_sample());
      break;
    }
    case kCpuInfo: {
      mutable_cpu_info()->::perfetto::protos::CpuInfo::MergeFrom(from.cpu_info());
      break;
    }
    case kSmapsPacket: {
      mutable_smaps_packet()->::perfetto::protos::SmapsPacket::MergeFrom(from.smaps_packet());
      break;
    }
    case kServiceEvent: {
      mutable_service_event()->::perfetto::protos::TracingServiceEvent::MergeFrom(from.service_event());
      break;
    }
    case kInitialDisplayState: {
      mutable_initial_display_state()->::perfetto::protos::InitialDisplayState::MergeFrom(from.initial_display_state());
      break;
    }
    case kGpuMemTotalEvent: {
      mutable_gpu_mem_total_event()->::perfetto::protos::GpuMemTotalEvent::MergeFrom(from.gpu_mem_total_event());
      break;
    }
    case kMemoryTrackerSnapshot: {
      mutable_memory_tracker_snapshot()->::perfetto::protos::MemoryTrackerSnapshot::MergeFrom(from.memory_tracker_snapshot());
      break;
    }
    case kFrameTimelineEvent: {
      mutable_frame_timeline_event()->::perfetto::protos::FrameTimelineEvent::MergeFrom(from.frame_timeline_event());
      break;
    }
    case kProfiledFrameSymbols: {
      mutable_profiled_frame_symbols()->::perfetto::protos::ProfiledFrameSymbols::MergeFrom(from.profiled_frame_symbols());
      break;
    }
    case kModuleSymbols: {
      mutable_module_symbols()->::perfetto::protos::ModuleSymbols::MergeFrom(from.module_symbols());
      break;
    }
    case kDeobfuscationMapping: {
      mutable_deobfuscation_mapping()->::perfetto::protos::DeobfuscationMapping::MergeFrom(from.deobfuscation_mapping());
      break;
    }
    case kTrackDescriptor: {
      mutable_track_descriptor()->::perfetto::protos::TrackDescriptor::MergeFrom(from.track_descriptor());
      break;
    }
    case kProcessDescriptor: {
      mutable_process_descriptor()->::perfetto::protos::ProcessDescriptor::MergeFrom(from.process_descriptor());
      break;
    }
    case kThreadDescriptor: {
      mutable_thread_descriptor()->::perfetto::protos::ThreadDescriptor::MergeFrom(from.thread_descriptor());
      break;
    }
    case kFtraceEvents: {
      mutable_ftrace_events()->::perfetto::protos::FtraceEventBundle::MergeFrom(from.ftrace_events());
      break;
    }
    case kSynchronizationMarker: {
      set_synchronization_marker(from.synchronization_marker());
      break;
    }
    case kCompressedPackets: {
      set_compressed_packets(from.compressed_packets());
      break;
    }
    case kExtensionDescriptor: {
      mutable_extension_descriptor()->::perfetto::protos::ExtensionDescriptor::MergeFrom(from.extension_descriptor());
      break;
    }
    case kForTesting: {
      mutable_for_testing()->::perfetto::protos::TestEvent::MergeFrom(from.for_testing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_uid();
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      set_trusted_uid(from.trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_packet_sequence_id();
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      set_trusted_packet_sequence_id(from.trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracePacket)
}

void TracePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracePacket_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto.base);
  ::memset(&interned_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_packet_dropped_) -
      reinterpret_cast<char*>(&interned_data_)) + sizeof(previous_packet_dropped_));
  clear_has_data();
  clear_has_optional_trusted_uid();
  clear_has_optional_trusted_packet_sequence_id();
}

TracePacket::~TracePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracePacket)
  SharedDtor();
}

void TracePacket::SharedDtor() {
  if (this != internal_default_instance()) delete interned_data_;
  if (this != internal_default_instance()) delete trace_packet_defaults_;
  if (has_data()) {
    clear_data();
  }
  if (has_optional_trusted_uid()) {
    clear_optional_trusted_uid();
  }
  if (has_optional_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
  }
}

void TracePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracePacket& TracePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracePacket_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void TracePacket::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (data_case()) {
    case kProcessTree: {
      delete data_.process_tree_;
      break;
    }
    case kProcessStats: {
      delete data_.process_stats_;
      break;
    }
    case kInodeFileMap: {
      delete data_.inode_file_map_;
      break;
    }
    case kChromeEvents: {
      delete data_.chrome_events_;
      break;
    }
    case kClockSnapshot: {
      delete data_.clock_snapshot_;
      break;
    }
    case kSysStats: {
      delete data_.sys_stats_;
      break;
    }
    case kTrackEvent: {
      delete data_.track_event_;
      break;
    }
    case kTraceConfig: {
      delete data_.trace_config_;
      break;
    }
    case kFtraceStats: {
      delete data_.ftrace_stats_;
      break;
    }
    case kTraceStats: {
      delete data_.trace_stats_;
      break;
    }
    case kProfilePacket: {
      delete data_.profile_packet_;
      break;
    }
    case kStreamingAllocation: {
      delete data_.streaming_allocation_;
      break;
    }
    case kStreamingFree: {
      delete data_.streaming_free_;
      break;
    }
    case kBattery: {
      delete data_.battery_;
      break;
    }
    case kPowerRails: {
      delete data_.power_rails_;
      break;
    }
    case kAndroidLog: {
      delete data_.android_log_;
      break;
    }
    case kSystemInfo: {
      delete data_.system_info_;
      break;
    }
    case kTrigger: {
      delete data_.trigger_;
      break;
    }
    case kPackagesList: {
      delete data_.packages_list_;
      break;
    }
    case kChromeBenchmarkMetadata: {
      delete data_.chrome_benchmark_metadata_;
      break;
    }
    case kPerfettoMetatrace: {
      delete data_.perfetto_metatrace_;
      break;
    }
    case kChromeMetadata: {
      delete data_.chrome_metadata_;
      break;
    }
    case kGpuCounterEvent: {
      delete data_.gpu_counter_event_;
      break;
    }
    case kGpuRenderStageEvent: {
      delete data_.gpu_render_stage_event_;
      break;
    }
    case kStreamingProfilePacket: {
      delete data_.streaming_profile_packet_;
      break;
    }
    case kHeapGraph: {
      delete data_.heap_graph_;
      break;
    }
    case kGraphicsFrameEvent: {
      delete data_.graphics_frame_event_;
      break;
    }
    case kVulkanMemoryEvent: {
      delete data_.vulkan_memory_event_;
      break;
    }
    case kGpuLog: {
      delete data_.gpu_log_;
      break;
    }
    case kVulkanApiEvent: {
      delete data_.vulkan_api_event_;
      break;
    }
    case kPerfSample: {
      delete data_.perf_sample_;
      break;
    }
    case kCpuInfo: {
      delete data_.cpu_info_;
      break;
    }
    case kSmapsPacket: {
      delete data_.smaps_packet_;
      break;
    }
    case kServiceEvent: {
      delete data_.service_event_;
      break;
    }
    case kInitialDisplayState: {
      delete data_.initial_display_state_;
      break;
    }
    case kGpuMemTotalEvent: {
      delete data_.gpu_mem_total_event_;
      break;
    }
    case kMemoryTrackerSnapshot: {
      delete data_.memory_tracker_snapshot_;
      break;
    }
    case kFrameTimelineEvent: {
      delete data_.frame_timeline_event_;
      break;
    }
    case kProfiledFrameSymbols: {
      delete data_.profiled_frame_symbols_;
      break;
    }
    case kModuleSymbols: {
      delete data_.module_symbols_;
      break;
    }
    case kDeobfuscationMapping: {
      delete data_.deobfuscation_mapping_;
      break;
    }
    case kTrackDescriptor: {
      delete data_.track_descriptor_;
      break;
    }
    case kProcessDescriptor: {
      delete data_.process_descriptor_;
      break;
    }
    case kThreadDescriptor: {
      delete data_.thread_descriptor_;
      break;
    }
    case kFtraceEvents: {
      delete data_.ftrace_events_;
      break;
    }
    case kSynchronizationMarker: {
      data_.synchronization_marker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCompressedPackets: {
      data_.compressed_packets_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kExtensionDescriptor: {
      delete data_.extension_descriptor_;
      break;
    }
    case kForTesting: {
      delete data_.for_testing_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}

void TracePacket::clear_optional_trusted_uid() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (optional_trusted_uid_case()) {
    case kTrustedUid: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_TRUSTED_UID_NOT_SET;
}

void TracePacket::clear_optional_trusted_packet_sequence_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}


void TracePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(interned_data_ != nullptr);
      interned_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trace_packet_defaults_ != nullptr);
      trace_packet_defaults_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_packet_dropped_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  }
  clear_data();
  clear_optional_trusted_uid();
  clear_optional_trusted_packet_sequence_id();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.FtraceEventBundle ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ftrace_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessTree process_tree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_process_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trusted_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_trusted_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InodeFileMap inode_file_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_inode_file_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_chrome_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_clock_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SysStats sys_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sys_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessStats process_stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_process_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trusted_packet_sequence_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEvent track_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_track_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InternedData interned_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_interned_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_sequence_flags(&has_bits);
          sequence_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig trace_config = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceStats ftrace_stats = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ftrace_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceStats trace_stats = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trace_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes synchronization_marker = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_synchronization_marker(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket profile_packet = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_profile_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BatteryCounters battery = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidLogPacket android_log = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_android_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PowerRails power_rails = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_power_rails(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool incremental_state_cleared = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_incremental_state_cleared(&has_bits);
          incremental_state_cleared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool previous_packet_dropped = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_previous_packet_dropped(&has_bits);
          previous_packet_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessDescriptor process_descriptor = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_process_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_thread_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SystemInfo system_info = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_system_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Trigger trigger = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PackagesList packages_list = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_packages_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_chrome_benchmark_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_perfetto_metatrace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes compressed_packets = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_compressed_packets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_chrome_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_gpu_counter_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_gpu_render_stage_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_streaming_profile_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_profiled_frame_symbols(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapGraph heap_graph = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_heap_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_graphics_frame_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp_clock_id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_timestamp_clock_id(&has_bits);
          timestamp_clock_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_trace_packet_defaults(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackDescriptor track_descriptor = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_track_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ModuleSymbols module_symbols = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_module_symbols(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_vulkan_memory_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuLog gpu_log = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_gpu_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_deobfuscation_mapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_vulkan_api_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfSample perf_sample = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_perf_sample(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuInfo cpu_info = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cpu_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SmapsPacket smaps_packet = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_smaps_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TracingServiceEvent service_event = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_service_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InitialDisplayState initial_display_state = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_initial_display_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_gpu_mem_total_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_extension_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_memory_tracker_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.StreamingAllocation streaming_allocation = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_streaming_allocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.StreamingFree streaming_free = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_streaming_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_frame_timeline_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TestEvent for_testing = 900;
      case 900:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_for_testing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracePacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracePacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.FtraceEventBundle ftrace_events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ftrace_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessTree process_tree = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trusted_uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_optional_trusted_uid();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_trusted_uid_.trusted_uid_)));
          set_has_trusted_uid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InodeFileMap inode_file_map = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inode_file_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SysStats sys_stats = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sys_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessStats process_stats = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trusted_packet_sequence_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          clear_optional_trusted_packet_sequence_id();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_)));
          set_has_trusted_packet_sequence_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEvent track_event = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_track_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InternedData interned_data = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interned_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_flags = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_sequence_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceConfig trace_config = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FtraceStats ftrace_stats = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ftrace_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TraceStats trace_stats = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes synchronization_marker = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_synchronization_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProfilePacket profile_packet = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profile_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BatteryCounters battery = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AndroidLogPacket android_log = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PowerRails power_rails = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_rails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incremental_state_cleared = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_incremental_state_cleared(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_state_cleared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool previous_packet_dropped = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_previous_packet_dropped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_packet_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessDescriptor process_descriptor = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thread_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SystemInfo system_info = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Trigger trigger = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PackagesList packages_list = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packages_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_benchmark_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perfetto_metatrace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes compressed_packets = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressed_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_counter_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_render_stage_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_profile_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profiled_frame_symbols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.HeapGraph heap_graph = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heap_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graphics_frame_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_clock_id = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (464 & 0xFF)) {
          _Internal::set_has_timestamp_clock_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_clock_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_packet_defaults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackDescriptor track_descriptor = 60;
      case 60: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_track_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ModuleSymbols module_symbols = 61;
      case 61: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_module_symbols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
      case 62: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vulkan_memory_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuLog gpu_log = 63;
      case 63: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
      case 64: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deobfuscation_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
      case 65: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vulkan_api_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfSample perf_sample = 66;
      case 66: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuInfo cpu_info = 67;
      case 67: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SmapsPacket smaps_packet = 68;
      case 68: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smaps_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TracingServiceEvent service_event = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InitialDisplayState initial_display_state = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_display_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_mem_total_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extension_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memory_tracker_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.StreamingAllocation streaming_allocation = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_allocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.StreamingFree streaming_free = 75;
      case 75: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
      case 76: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_timeline_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TestEvent for_testing = 900;
      case 900: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (7202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_for_testing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracePacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracePacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kFtraceEvents:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        1, _Internal::ftrace_events(this), output);
      break;
    case kProcessTree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::process_tree(this), output);
      break;
    default: ;
  }
  // optional int32 trusted_uid = 3;
  if (has_trusted_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->trusted_uid(), output);
  }

  switch (data_case()) {
    case kInodeFileMap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::inode_file_map(this), output);
      break;
    case kChromeEvents:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::chrome_events(this), output);
      break;
    case kClockSnapshot:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::clock_snapshot(this), output);
      break;
    case kSysStats:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        7, _Internal::sys_stats(this), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->timestamp(), output);
  }

  // optional .perfetto.protos.ProcessStats process_stats = 9;
  if (has_process_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::process_stats(this), output);
  }

  // optional uint32 trusted_packet_sequence_id = 10;
  if (has_trusted_packet_sequence_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->trusted_packet_sequence_id(), output);
  }

  // optional .perfetto.protos.TrackEvent track_event = 11;
  if (has_track_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::track_event(this), output);
  }

  // optional .perfetto.protos.InternedData interned_data = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::interned_data(this), output);
  }

  // optional uint32 sequence_flags = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->sequence_flags(), output);
  }

  switch (data_case()) {
    case kTraceConfig:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        33, _Internal::trace_config(this), output);
      break;
    case kFtraceStats:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        34, _Internal::ftrace_stats(this), output);
      break;
    case kTraceStats:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        35, _Internal::trace_stats(this), output);
      break;
    case kSynchronizationMarker:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        36, this->synchronization_marker(), output);
      break;
    case kProfilePacket:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        37, _Internal::profile_packet(this), output);
      break;
    case kBattery:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        38, _Internal::battery(this), output);
      break;
    case kAndroidLog:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        39, _Internal::android_log(this), output);
      break;
    case kPowerRails:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        40, _Internal::power_rails(this), output);
      break;
    default: ;
  }
  // optional bool incremental_state_cleared = 41;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(41, this->incremental_state_cleared(), output);
  }

  // optional bool previous_packet_dropped = 42;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(42, this->previous_packet_dropped(), output);
  }

  switch (data_case()) {
    case kProcessDescriptor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        43, _Internal::process_descriptor(this), output);
      break;
    case kThreadDescriptor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        44, _Internal::thread_descriptor(this), output);
      break;
    case kSystemInfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        45, _Internal::system_info(this), output);
      break;
    case kTrigger:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        46, _Internal::trigger(this), output);
      break;
    case kPackagesList:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        47, _Internal::packages_list(this), output);
      break;
    case kChromeBenchmarkMetadata:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        48, _Internal::chrome_benchmark_metadata(this), output);
      break;
    case kPerfettoMetatrace:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        49, _Internal::perfetto_metatrace(this), output);
      break;
    case kCompressedPackets:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        50, this->compressed_packets(), output);
      break;
    case kChromeMetadata:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        51, _Internal::chrome_metadata(this), output);
      break;
    case kGpuCounterEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        52, _Internal::gpu_counter_event(this), output);
      break;
    case kGpuRenderStageEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        53, _Internal::gpu_render_stage_event(this), output);
      break;
    case kStreamingProfilePacket:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        54, _Internal::streaming_profile_packet(this), output);
      break;
    case kProfiledFrameSymbols:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        55, _Internal::profiled_frame_symbols(this), output);
      break;
    case kHeapGraph:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        56, _Internal::heap_graph(this), output);
      break;
    case kGraphicsFrameEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        57, _Internal::graphics_frame_event(this), output);
      break;
    default: ;
  }
  // optional uint32 timestamp_clock_id = 58;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(58, this->timestamp_clock_id(), output);
  }

  // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      59, _Internal::trace_packet_defaults(this), output);
  }

  switch (data_case()) {
    case kTrackDescriptor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        60, _Internal::track_descriptor(this), output);
      break;
    case kModuleSymbols:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        61, _Internal::module_symbols(this), output);
      break;
    case kVulkanMemoryEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        62, _Internal::vulkan_memory_event(this), output);
      break;
    case kGpuLog:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        63, _Internal::gpu_log(this), output);
      break;
    case kDeobfuscationMapping:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        64, _Internal::deobfuscation_mapping(this), output);
      break;
    case kVulkanApiEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        65, _Internal::vulkan_api_event(this), output);
      break;
    case kPerfSample:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        66, _Internal::perf_sample(this), output);
      break;
    case kCpuInfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        67, _Internal::cpu_info(this), output);
      break;
    case kSmapsPacket:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        68, _Internal::smaps_packet(this), output);
      break;
    case kServiceEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        69, _Internal::service_event(this), output);
      break;
    case kInitialDisplayState:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        70, _Internal::initial_display_state(this), output);
      break;
    case kGpuMemTotalEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        71, _Internal::gpu_mem_total_event(this), output);
      break;
    case kExtensionDescriptor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        72, _Internal::extension_descriptor(this), output);
      break;
    case kMemoryTrackerSnapshot:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        73, _Internal::memory_tracker_snapshot(this), output);
      break;
    case kStreamingAllocation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        74, _Internal::streaming_allocation(this), output);
      break;
    case kStreamingFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        75, _Internal::streaming_free(this), output);
      break;
    case kFrameTimelineEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        76, _Internal::frame_timeline_event(this), output);
      break;
    case kForTesting:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        900, _Internal::for_testing(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracePacket)
}

size_t TracePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracePacket)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .perfetto.protos.InternedData interned_data = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interned_data_);
    }

    // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trace_packet_defaults_);
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 timestamp_clock_id = 58;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->timestamp_clock_id());
    }

    // optional uint32 sequence_flags = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sequence_flags());
    }

    // optional bool incremental_state_cleared = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool previous_packet_dropped = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

  }
  switch (data_case()) {
    // optional .perfetto.protos.ProcessTree process_tree = 2;
    case kProcessTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.process_tree_);
      break;
    }
    // optional .perfetto.protos.ProcessStats process_stats = 9;
    case kProcessStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.process_stats_);
      break;
    }
    // optional .perfetto.protos.InodeFileMap inode_file_map = 4;
    case kInodeFileMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.inode_file_map_);
      break;
    }
    // optional .perfetto.protos.ChromeEventBundle chrome_events = 5;
    case kChromeEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.chrome_events_);
      break;
    }
    // optional .perfetto.protos.ClockSnapshot clock_snapshot = 6;
    case kClockSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.clock_snapshot_);
      break;
    }
    // optional .perfetto.protos.SysStats sys_stats = 7;
    case kSysStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sys_stats_);
      break;
    }
    // optional .perfetto.protos.TrackEvent track_event = 11;
    case kTrackEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.track_event_);
      break;
    }
    // optional .perfetto.protos.TraceConfig trace_config = 33;
    case kTraceConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.trace_config_);
      break;
    }
    // optional .perfetto.protos.FtraceStats ftrace_stats = 34;
    case kFtraceStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.ftrace_stats_);
      break;
    }
    // optional .perfetto.protos.TraceStats trace_stats = 35;
    case kTraceStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.trace_stats_);
      break;
    }
    // optional .perfetto.protos.ProfilePacket profile_packet = 37;
    case kProfilePacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.profile_packet_);
      break;
    }
    // optional .perfetto.protos.StreamingAllocation streaming_allocation = 74;
    case kStreamingAllocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.streaming_allocation_);
      break;
    }
    // optional .perfetto.protos.StreamingFree streaming_free = 75;
    case kStreamingFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.streaming_free_);
      break;
    }
    // optional .perfetto.protos.BatteryCounters battery = 38;
    case kBattery: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.battery_);
      break;
    }
    // optional .perfetto.protos.PowerRails power_rails = 40;
    case kPowerRails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.power_rails_);
      break;
    }
    // optional .perfetto.protos.AndroidLogPacket android_log = 39;
    case kAndroidLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.android_log_);
      break;
    }
    // optional .perfetto.protos.SystemInfo system_info = 45;
    case kSystemInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.system_info_);
      break;
    }
    // optional .perfetto.protos.Trigger trigger = 46;
    case kTrigger: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.trigger_);
      break;
    }
    // optional .perfetto.protos.PackagesList packages_list = 47;
    case kPackagesList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.packages_list_);
      break;
    }
    // optional .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
    case kChromeBenchmarkMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.chrome_benchmark_metadata_);
      break;
    }
    // optional .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
    case kPerfettoMetatrace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.perfetto_metatrace_);
      break;
    }
    // optional .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
    case kChromeMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.chrome_metadata_);
      break;
    }
    // optional .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
    case kGpuCounterEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.gpu_counter_event_);
      break;
    }
    // optional .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
    case kGpuRenderStageEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.gpu_render_stage_event_);
      break;
    }
    // optional .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
    case kStreamingProfilePacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.streaming_profile_packet_);
      break;
    }
    // optional .perfetto.protos.HeapGraph heap_graph = 56;
    case kHeapGraph: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.heap_graph_);
      break;
    }
    // optional .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
    case kGraphicsFrameEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.graphics_frame_event_);
      break;
    }
    // optional .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
    case kVulkanMemoryEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.vulkan_memory_event_);
      break;
    }
    // optional .perfetto.protos.GpuLog gpu_log = 63;
    case kGpuLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.gpu_log_);
      break;
    }
    // optional .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
    case kVulkanApiEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.vulkan_api_event_);
      break;
    }
    // optional .perfetto.protos.PerfSample perf_sample = 66;
    case kPerfSample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.perf_sample_);
      break;
    }
    // optional .perfetto.protos.CpuInfo cpu_info = 67;
    case kCpuInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.cpu_info_);
      break;
    }
    // optional .perfetto.protos.SmapsPacket smaps_packet = 68;
    case kSmapsPacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.smaps_packet_);
      break;
    }
    // optional .perfetto.protos.TracingServiceEvent service_event = 69;
    case kServiceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.service_event_);
      break;
    }
    // optional .perfetto.protos.InitialDisplayState initial_display_state = 70;
    case kInitialDisplayState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.initial_display_state_);
      break;
    }
    // optional .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
    case kGpuMemTotalEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.gpu_mem_total_event_);
      break;
    }
    // optional .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
    case kMemoryTrackerSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.memory_tracker_snapshot_);
      break;
    }
    // optional .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
    case kFrameTimelineEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.frame_timeline_event_);
      break;
    }
    // optional .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
    case kProfiledFrameSymbols: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.profiled_frame_symbols_);
      break;
    }
    // optional .perfetto.protos.ModuleSymbols module_symbols = 61;
    case kModuleSymbols: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.module_symbols_);
      break;
    }
    // optional .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
    case kDeobfuscationMapping: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.deobfuscation_mapping_);
      break;
    }
    // optional .perfetto.protos.TrackDescriptor track_descriptor = 60;
    case kTrackDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.track_descriptor_);
      break;
    }
    // optional .perfetto.protos.ProcessDescriptor process_descriptor = 43;
    case kProcessDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.process_descriptor_);
      break;
    }
    // optional .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
    case kThreadDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.thread_descriptor_);
      break;
    }
    // optional .perfetto.protos.FtraceEventBundle ftrace_events = 1;
    case kFtraceEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.ftrace_events_);
      break;
    }
    // optional bytes synchronization_marker = 36;
    case kSynchronizationMarker: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->synchronization_marker());
      break;
    }
    // optional bytes compressed_packets = 50;
    case kCompressedPackets: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->compressed_packets());
      break;
    }
    // optional .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
    case kExtensionDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.extension_descriptor_);
      break;
    }
    // optional .perfetto.protos.TestEvent for_testing = 900;
    case kForTesting: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.for_testing_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_uid_case()) {
    // optional int32 trusted_uid = 3;
    case kTrustedUid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_packet_sequence_id_case()) {
    // optional uint32 trusted_packet_sequence_id = 10;
    case kTrustedPacketSequenceId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracePacket*>(
      &from));
}

void TracePacket::MergeFrom(const TracePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interned_data()->::perfetto::protos::InternedData::MergeFrom(from.interned_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trace_packet_defaults()->::perfetto::protos::TracePacketDefaults::MergeFrom(from.trace_packet_defaults());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_clock_id_ = from.timestamp_clock_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_flags_ = from.sequence_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      incremental_state_cleared_ = from.incremental_state_cleared_;
    }
    if (cached_has_bits & 0x00000040u) {
      previous_packet_dropped_ = from.previous_packet_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.data_case()) {
    case kProcessTree: {
      mutable_process_tree()->::perfetto::protos::ProcessTree::MergeFrom(from.process_tree());
      break;
    }
    case kProcessStats: {
      mutable_process_stats()->::perfetto::protos::ProcessStats::MergeFrom(from.process_stats());
      break;
    }
    case kInodeFileMap: {
      mutable_inode_file_map()->::perfetto::protos::InodeFileMap::MergeFrom(from.inode_file_map());
      break;
    }
    case kChromeEvents: {
      mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(from.chrome_events());
      break;
    }
    case kClockSnapshot: {
      mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(from.clock_snapshot());
      break;
    }
    case kSysStats: {
      mutable_sys_stats()->::perfetto::protos::SysStats::MergeFrom(from.sys_stats());
      break;
    }
    case kTrackEvent: {
      mutable_track_event()->::perfetto::protos::TrackEvent::MergeFrom(from.track_event());
      break;
    }
    case kTraceConfig: {
      mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
      break;
    }
    case kFtraceStats: {
      mutable_ftrace_stats()->::perfetto::protos::FtraceStats::MergeFrom(from.ftrace_stats());
      break;
    }
    case kTraceStats: {
      mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(from.trace_stats());
      break;
    }
    case kProfilePacket: {
      mutable_profile_packet()->::perfetto::protos::ProfilePacket::MergeFrom(from.profile_packet());
      break;
    }
    case kStreamingAllocation: {
      mutable_streaming_allocation()->::perfetto::protos::StreamingAllocation::MergeFrom(from.streaming_allocation());
      break;
    }
    case kStreamingFree: {
      mutable_streaming_free()->::perfetto::protos::StreamingFree::MergeFrom(from.streaming_free());
      break;
    }
    case kBattery: {
      mutable_battery()->::perfetto::protos::BatteryCounters::MergeFrom(from.battery());
      break;
    }
    case kPowerRails: {
      mutable_power_rails()->::perfetto::protos::PowerRails::MergeFrom(from.power_rails());
      break;
    }
    case kAndroidLog: {
      mutable_android_log()->::perfetto::protos::AndroidLogPacket::MergeFrom(from.android_log());
      break;
    }
    case kSystemInfo: {
      mutable_system_info()->::perfetto::protos::SystemInfo::MergeFrom(from.system_info());
      break;
    }
    case kTrigger: {
      mutable_trigger()->::perfetto::protos::Trigger::MergeFrom(from.trigger());
      break;
    }
    case kPackagesList: {
      mutable_packages_list()->::perfetto::protos::PackagesList::MergeFrom(from.packages_list());
      break;
    }
    case kChromeBenchmarkMetadata: {
      mutable_chrome_benchmark_metadata()->::perfetto::protos::ChromeBenchmarkMetadata::MergeFrom(from.chrome_benchmark_metadata());
      break;
    }
    case kPerfettoMetatrace: {
      mutable_perfetto_metatrace()->::perfetto::protos::PerfettoMetatrace::MergeFrom(from.perfetto_metatrace());
      break;
    }
    case kChromeMetadata: {
      mutable_chrome_metadata()->::perfetto::protos::ChromeMetadataPacket::MergeFrom(from.chrome_metadata());
      break;
    }
    case kGpuCounterEvent: {
      mutable_gpu_counter_event()->::perfetto::protos::GpuCounterEvent::MergeFrom(from.gpu_counter_event());
      break;
    }
    case kGpuRenderStageEvent: {
      mutable_gpu_render_stage_event()->::perfetto::protos::GpuRenderStageEvent::MergeFrom(from.gpu_render_stage_event());
      break;
    }
    case kStreamingProfilePacket: {
      mutable_streaming_profile_packet()->::perfetto::protos::StreamingProfilePacket::MergeFrom(from.streaming_profile_packet());
      break;
    }
    case kHeapGraph: {
      mutable_heap_graph()->::perfetto::protos::HeapGraph::MergeFrom(from.heap_graph());
      break;
    }
    case kGraphicsFrameEvent: {
      mutable_graphics_frame_event()->::perfetto::protos::GraphicsFrameEvent::MergeFrom(from.graphics_frame_event());
      break;
    }
    case kVulkanMemoryEvent: {
      mutable_vulkan_memory_event()->::perfetto::protos::VulkanMemoryEvent::MergeFrom(from.vulkan_memory_event());
      break;
    }
    case kGpuLog: {
      mutable_gpu_log()->::perfetto::protos::GpuLog::MergeFrom(from.gpu_log());
      break;
    }
    case kVulkanApiEvent: {
      mutable_vulkan_api_event()->::perfetto::protos::VulkanApiEvent::MergeFrom(from.vulkan_api_event());
      break;
    }
    case kPerfSample: {
      mutable_perf_sample()->::perfetto::protos::PerfSample::MergeFrom(from.perf_sample());
      break;
    }
    case kCpuInfo: {
      mutable_cpu_info()->::perfetto::protos::CpuInfo::MergeFrom(from.cpu_info());
      break;
    }
    case kSmapsPacket: {
      mutable_smaps_packet()->::perfetto::protos::SmapsPacket::MergeFrom(from.smaps_packet());
      break;
    }
    case kServiceEvent: {
      mutable_service_event()->::perfetto::protos::TracingServiceEvent::MergeFrom(from.service_event());
      break;
    }
    case kInitialDisplayState: {
      mutable_initial_display_state()->::perfetto::protos::InitialDisplayState::MergeFrom(from.initial_display_state());
      break;
    }
    case kGpuMemTotalEvent: {
      mutable_gpu_mem_total_event()->::perfetto::protos::GpuMemTotalEvent::MergeFrom(from.gpu_mem_total_event());
      break;
    }
    case kMemoryTrackerSnapshot: {
      mutable_memory_tracker_snapshot()->::perfetto::protos::MemoryTrackerSnapshot::MergeFrom(from.memory_tracker_snapshot());
      break;
    }
    case kFrameTimelineEvent: {
      mutable_frame_timeline_event()->::perfetto::protos::FrameTimelineEvent::MergeFrom(from.frame_timeline_event());
      break;
    }
    case kProfiledFrameSymbols: {
      mutable_profiled_frame_symbols()->::perfetto::protos::ProfiledFrameSymbols::MergeFrom(from.profiled_frame_symbols());
      break;
    }
    case kModuleSymbols: {
      mutable_module_symbols()->::perfetto::protos::ModuleSymbols::MergeFrom(from.module_symbols());
      break;
    }
    case kDeobfuscationMapping: {
      mutable_deobfuscation_mapping()->::perfetto::protos::DeobfuscationMapping::MergeFrom(from.deobfuscation_mapping());
      break;
    }
    case kTrackDescriptor: {
      mutable_track_descriptor()->::perfetto::protos::TrackDescriptor::MergeFrom(from.track_descriptor());
      break;
    }
    case kProcessDescriptor: {
      mutable_process_descriptor()->::perfetto::protos::ProcessDescriptor::MergeFrom(from.process_descriptor());
      break;
    }
    case kThreadDescriptor: {
      mutable_thread_descriptor()->::perfetto::protos::ThreadDescriptor::MergeFrom(from.thread_descriptor());
      break;
    }
    case kFtraceEvents: {
      mutable_ftrace_events()->::perfetto::protos::FtraceEventBundle::MergeFrom(from.ftrace_events());
      break;
    }
    case kSynchronizationMarker: {
      set_synchronization_marker(from.synchronization_marker());
      break;
    }
    case kCompressedPackets: {
      set_compressed_packets(from.compressed_packets());
      break;
    }
    case kExtensionDescriptor: {
      mutable_extension_descriptor()->::perfetto::protos::ExtensionDescriptor::MergeFrom(from.extension_descriptor());
      break;
    }
    case kForTesting: {
      mutable_for_testing()->::perfetto::protos::TestEvent::MergeFrom(from.for_testing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      set_trusted_uid(from.trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      set_trusted_packet_sequence_id(from.trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
}

void TracePacket::CopyFrom(const TracePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracePacket::IsInitialized() const {
  switch (data_case()) {
    case kProcessTree: {
      break;
    }
    case kProcessStats: {
      break;
    }
    case kInodeFileMap: {
      break;
    }
    case kChromeEvents: {
      break;
    }
    case kClockSnapshot: {
      break;
    }
    case kSysStats: {
      break;
    }
    case kTrackEvent: {
      if (has_track_event()) {
        if (!this->track_event().IsInitialized()) return false;
      }
      break;
    }
    case kTraceConfig: {
      break;
    }
    case kFtraceStats: {
      break;
    }
    case kTraceStats: {
      break;
    }
    case kProfilePacket: {
      break;
    }
    case kStreamingAllocation: {
      break;
    }
    case kStreamingFree: {
      break;
    }
    case kBattery: {
      break;
    }
    case kPowerRails: {
      break;
    }
    case kAndroidLog: {
      break;
    }
    case kSystemInfo: {
      break;
    }
    case kTrigger: {
      break;
    }
    case kPackagesList: {
      break;
    }
    case kChromeBenchmarkMetadata: {
      break;
    }
    case kPerfettoMetatrace: {
      break;
    }
    case kChromeMetadata: {
      break;
    }
    case kGpuCounterEvent: {
      break;
    }
    case kGpuRenderStageEvent: {
      if (has_gpu_render_stage_event()) {
        if (!this->gpu_render_stage_event().IsInitialized()) return false;
      }
      break;
    }
    case kStreamingProfilePacket: {
      break;
    }
    case kHeapGraph: {
      break;
    }
    case kGraphicsFrameEvent: {
      break;
    }
    case kVulkanMemoryEvent: {
      break;
    }
    case kGpuLog: {
      break;
    }
    case kVulkanApiEvent: {
      break;
    }
    case kPerfSample: {
      break;
    }
    case kCpuInfo: {
      break;
    }
    case kSmapsPacket: {
      break;
    }
    case kServiceEvent: {
      break;
    }
    case kInitialDisplayState: {
      break;
    }
    case kGpuMemTotalEvent: {
      break;
    }
    case kMemoryTrackerSnapshot: {
      break;
    }
    case kFrameTimelineEvent: {
      break;
    }
    case kProfiledFrameSymbols: {
      break;
    }
    case kModuleSymbols: {
      break;
    }
    case kDeobfuscationMapping: {
      break;
    }
    case kTrackDescriptor: {
      break;
    }
    case kProcessDescriptor: {
      break;
    }
    case kThreadDescriptor: {
      break;
    }
    case kFtraceEvents: {
      break;
    }
    case kSynchronizationMarker: {
      break;
    }
    case kCompressedPackets: {
      break;
    }
    case kExtensionDescriptor: {
      if (has_extension_descriptor()) {
        if (!this->extension_descriptor().IsInitialized()) return false;
      }
      break;
    }
    case kForTesting: {
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void TracePacket::InternalSwap(TracePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interned_data_, other->interned_data_);
  swap(trace_packet_defaults_, other->trace_packet_defaults_);
  swap(timestamp_, other->timestamp_);
  swap(timestamp_clock_id_, other->timestamp_clock_id_);
  swap(sequence_flags_, other->sequence_flags_);
  swap(incremental_state_cleared_, other->incremental_state_cleared_);
  swap(previous_packet_dropped_, other->previous_packet_dropped_);
  swap(data_, other->data_);
  swap(optional_trusted_uid_, other->optional_trusted_uid_);
  swap(optional_trusted_packet_sequence_id_, other->optional_trusted_packet_sequence_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

std::string TracePacket::GetTypeName() const {
  return "perfetto.protos.TracePacket";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracePacket* Arena::CreateMaybeMessage< ::perfetto::protos::TracePacket >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
