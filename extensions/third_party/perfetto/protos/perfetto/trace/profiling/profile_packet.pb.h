// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class PerfSample;
class PerfSampleDefaultTypeInternal;
extern PerfSampleDefaultTypeInternal _PerfSample_default_instance_;
class PerfSample_ProducerEvent;
class PerfSample_ProducerEventDefaultTypeInternal;
extern PerfSample_ProducerEventDefaultTypeInternal _PerfSample_ProducerEvent_default_instance_;
class ProfilePacket;
class ProfilePacketDefaultTypeInternal;
extern ProfilePacketDefaultTypeInternal _ProfilePacket_default_instance_;
class ProfilePacket_HeapSample;
class ProfilePacket_HeapSampleDefaultTypeInternal;
extern ProfilePacket_HeapSampleDefaultTypeInternal _ProfilePacket_HeapSample_default_instance_;
class ProfilePacket_Histogram;
class ProfilePacket_HistogramDefaultTypeInternal;
extern ProfilePacket_HistogramDefaultTypeInternal _ProfilePacket_Histogram_default_instance_;
class ProfilePacket_Histogram_Bucket;
class ProfilePacket_Histogram_BucketDefaultTypeInternal;
extern ProfilePacket_Histogram_BucketDefaultTypeInternal _ProfilePacket_Histogram_Bucket_default_instance_;
class ProfilePacket_ProcessHeapSamples;
class ProfilePacket_ProcessHeapSamplesDefaultTypeInternal;
extern ProfilePacket_ProcessHeapSamplesDefaultTypeInternal _ProfilePacket_ProcessHeapSamples_default_instance_;
class ProfilePacket_ProcessStats;
class ProfilePacket_ProcessStatsDefaultTypeInternal;
extern ProfilePacket_ProcessStatsDefaultTypeInternal _ProfilePacket_ProcessStats_default_instance_;
class Profiling;
class ProfilingDefaultTypeInternal;
extern ProfilingDefaultTypeInternal _Profiling_default_instance_;
class StreamingAllocation;
class StreamingAllocationDefaultTypeInternal;
extern StreamingAllocationDefaultTypeInternal _StreamingAllocation_default_instance_;
class StreamingFree;
class StreamingFreeDefaultTypeInternal;
extern StreamingFreeDefaultTypeInternal _StreamingFree_default_instance_;
class StreamingProfilePacket;
class StreamingProfilePacketDefaultTypeInternal;
extern StreamingProfilePacketDefaultTypeInternal _StreamingProfilePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PerfSample* Arena::CreateMaybeMessage<::perfetto::protos::PerfSample>(Arena*);
template<> ::perfetto::protos::PerfSample_ProducerEvent* Arena::CreateMaybeMessage<::perfetto::protos::PerfSample_ProducerEvent>(Arena*);
template<> ::perfetto::protos::ProfilePacket* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket>(Arena*);
template<> ::perfetto::protos::ProfilePacket_HeapSample* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_HeapSample>(Arena*);
template<> ::perfetto::protos::ProfilePacket_Histogram* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram>(Arena*);
template<> ::perfetto::protos::ProfilePacket_Histogram_Bucket* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram_Bucket>(Arena*);
template<> ::perfetto::protos::ProfilePacket_ProcessHeapSamples* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessHeapSamples>(Arena*);
template<> ::perfetto::protos::ProfilePacket_ProcessStats* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessStats>(Arena*);
template<> ::perfetto::protos::Profiling* Arena::CreateMaybeMessage<::perfetto::protos::Profiling>(Arena*);
template<> ::perfetto::protos::StreamingAllocation* Arena::CreateMaybeMessage<::perfetto::protos::StreamingAllocation>(Arena*);
template<> ::perfetto::protos::StreamingFree* Arena::CreateMaybeMessage<::perfetto::protos::StreamingFree>(Arena*);
template<> ::perfetto::protos::StreamingProfilePacket* Arena::CreateMaybeMessage<::perfetto::protos::StreamingProfilePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ProfilePacket_ProcessHeapSamples_ClientError : int {
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE = 0,
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_HIT_TIMEOUT = 1,
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS = 2
};
bool ProfilePacket_ProcessHeapSamples_ClientError_IsValid(int value);
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MIN = ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MAX = ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS;
constexpr int ProfilePacket_ProcessHeapSamples_ClientError_ClientError_ARRAYSIZE = ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MAX + 1;

const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(ProfilePacket_ProcessHeapSamples_ClientError value);
template<typename T>
inline const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProfilePacket_ProcessHeapSamples_ClientError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProfilePacket_ProcessHeapSamples_ClientError_Name.");
  return ProfilePacket_ProcessHeapSamples_ClientError_Name(static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(enum_t_value));
}
bool ProfilePacket_ProcessHeapSamples_ClientError_Parse(
    const std::string& name, ProfilePacket_ProcessHeapSamples_ClientError* value);
enum Profiling_CpuMode : int {
  Profiling_CpuMode_MODE_UNKNOWN = 0,
  Profiling_CpuMode_MODE_KERNEL = 1,
  Profiling_CpuMode_MODE_USER = 2,
  Profiling_CpuMode_MODE_HYPERVISOR = 3,
  Profiling_CpuMode_MODE_GUEST_KERNEL = 4,
  Profiling_CpuMode_MODE_GUEST_USER = 5
};
bool Profiling_CpuMode_IsValid(int value);
constexpr Profiling_CpuMode Profiling_CpuMode_CpuMode_MIN = Profiling_CpuMode_MODE_UNKNOWN;
constexpr Profiling_CpuMode Profiling_CpuMode_CpuMode_MAX = Profiling_CpuMode_MODE_GUEST_USER;
constexpr int Profiling_CpuMode_CpuMode_ARRAYSIZE = Profiling_CpuMode_CpuMode_MAX + 1;

const std::string& Profiling_CpuMode_Name(Profiling_CpuMode value);
template<typename T>
inline const std::string& Profiling_CpuMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Profiling_CpuMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Profiling_CpuMode_Name.");
  return Profiling_CpuMode_Name(static_cast<Profiling_CpuMode>(enum_t_value));
}
bool Profiling_CpuMode_Parse(
    const std::string& name, Profiling_CpuMode* value);
enum Profiling_StackUnwindError : int {
  Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN = 0,
  Profiling_StackUnwindError_UNWIND_ERROR_NONE = 1,
  Profiling_StackUnwindError_UNWIND_ERROR_MEMORY_INVALID = 2,
  Profiling_StackUnwindError_UNWIND_ERROR_UNWIND_INFO = 3,
  Profiling_StackUnwindError_UNWIND_ERROR_UNSUPPORTED = 4,
  Profiling_StackUnwindError_UNWIND_ERROR_INVALID_MAP = 5,
  Profiling_StackUnwindError_UNWIND_ERROR_MAX_FRAMES_EXCEEDED = 6,
  Profiling_StackUnwindError_UNWIND_ERROR_REPEATED_FRAME = 7,
  Profiling_StackUnwindError_UNWIND_ERROR_INVALID_ELF = 8,
  Profiling_StackUnwindError_UNWIND_ERROR_SYSTEM_CALL = 9,
  Profiling_StackUnwindError_UNWIND_ERROR_THREAD_TIMEOUT = 10,
  Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST = 11
};
bool Profiling_StackUnwindError_IsValid(int value);
constexpr Profiling_StackUnwindError Profiling_StackUnwindError_StackUnwindError_MIN = Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN;
constexpr Profiling_StackUnwindError Profiling_StackUnwindError_StackUnwindError_MAX = Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
constexpr int Profiling_StackUnwindError_StackUnwindError_ARRAYSIZE = Profiling_StackUnwindError_StackUnwindError_MAX + 1;

const std::string& Profiling_StackUnwindError_Name(Profiling_StackUnwindError value);
template<typename T>
inline const std::string& Profiling_StackUnwindError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Profiling_StackUnwindError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Profiling_StackUnwindError_Name.");
  return Profiling_StackUnwindError_Name(static_cast<Profiling_StackUnwindError>(enum_t_value));
}
bool Profiling_StackUnwindError_Parse(
    const std::string& name, Profiling_StackUnwindError* value);
enum PerfSample_ProducerEvent_DataSourceStopReason : int {
  PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN = 0,
  PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL = 1
};
bool PerfSample_ProducerEvent_DataSourceStopReason_IsValid(int value);
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MIN = PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MAX = PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL;
constexpr int PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_ARRAYSIZE = PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MAX + 1;

const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(PerfSample_ProducerEvent_DataSourceStopReason value);
template<typename T>
inline const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerfSample_ProducerEvent_DataSourceStopReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerfSample_ProducerEvent_DataSourceStopReason_Name.");
  return PerfSample_ProducerEvent_DataSourceStopReason_Name(static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(enum_t_value));
}
bool PerfSample_ProducerEvent_DataSourceStopReason_Parse(
    const std::string& name, PerfSample_ProducerEvent_DataSourceStopReason* value);
enum PerfSample_SampleSkipReason : int {
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN = 0,
  PerfSample_SampleSkipReason_PROFILER_SKIP_READ_STAGE = 1,
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_STAGE = 2,
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE = 3
};
bool PerfSample_SampleSkipReason_IsValid(int value);
constexpr PerfSample_SampleSkipReason PerfSample_SampleSkipReason_SampleSkipReason_MIN = PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN;
constexpr PerfSample_SampleSkipReason PerfSample_SampleSkipReason_SampleSkipReason_MAX = PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE;
constexpr int PerfSample_SampleSkipReason_SampleSkipReason_ARRAYSIZE = PerfSample_SampleSkipReason_SampleSkipReason_MAX + 1;

const std::string& PerfSample_SampleSkipReason_Name(PerfSample_SampleSkipReason value);
template<typename T>
inline const std::string& PerfSample_SampleSkipReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerfSample_SampleSkipReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerfSample_SampleSkipReason_Name.");
  return PerfSample_SampleSkipReason_Name(static_cast<PerfSample_SampleSkipReason>(enum_t_value));
}
bool PerfSample_SampleSkipReason_Parse(
    const std::string& name, PerfSample_SampleSkipReason* value);
// ===================================================================

class ProfilePacket_HeapSample :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.HeapSample) */ {
 public:
  ProfilePacket_HeapSample();
  virtual ~ProfilePacket_HeapSample();

  ProfilePacket_HeapSample(const ProfilePacket_HeapSample& from);
  ProfilePacket_HeapSample(ProfilePacket_HeapSample&& from) noexcept
    : ProfilePacket_HeapSample() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_HeapSample& operator=(const ProfilePacket_HeapSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_HeapSample& operator=(ProfilePacket_HeapSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket_HeapSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket_HeapSample* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_HeapSample*>(
               &_ProfilePacket_HeapSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilePacket_HeapSample& a, ProfilePacket_HeapSample& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_HeapSample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket_HeapSample* New() const final {
    return CreateMaybeMessage<ProfilePacket_HeapSample>(nullptr);
  }

  ProfilePacket_HeapSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket_HeapSample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket_HeapSample& from);
  void MergeFrom(const ProfilePacket_HeapSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket_HeapSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket.HeapSample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackIdFieldNumber = 1,
    kSelfAllocatedFieldNumber = 2,
    kSelfFreedFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kAllocCountFieldNumber = 5,
    kFreeCountFieldNumber = 6,
    kSelfMaxFieldNumber = 8,
    kSelfMaxCountFieldNumber = 9,
  };
  // optional uint64 callstack_id = 1;
  bool has_callstack_id() const;
  void clear_callstack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 callstack_id() const;
  void set_callstack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 self_allocated = 2;
  bool has_self_allocated() const;
  void clear_self_allocated();
  ::PROTOBUF_NAMESPACE_ID::uint64 self_allocated() const;
  void set_self_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 self_freed = 3;
  bool has_self_freed() const;
  void clear_self_freed();
  ::PROTOBUF_NAMESPACE_ID::uint64 self_freed() const;
  void set_self_freed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 alloc_count = 5;
  bool has_alloc_count() const;
  void clear_alloc_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 alloc_count() const;
  void set_alloc_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 free_count = 6;
  bool has_free_count() const;
  void clear_free_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 free_count() const;
  void set_free_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 self_max = 8;
  bool has_self_max() const;
  void clear_self_max();
  ::PROTOBUF_NAMESPACE_ID::uint64 self_max() const;
  void set_self_max(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 self_max_count = 9;
  bool has_self_max_count() const;
  void clear_self_max_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 self_max_count() const;
  void set_self_max_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.HeapSample)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 callstack_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 self_allocated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 self_freed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 alloc_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 free_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 self_max_;
  ::PROTOBUF_NAMESPACE_ID::uint64 self_max_count_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class ProfilePacket_Histogram_Bucket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.Histogram.Bucket) */ {
 public:
  ProfilePacket_Histogram_Bucket();
  virtual ~ProfilePacket_Histogram_Bucket();

  ProfilePacket_Histogram_Bucket(const ProfilePacket_Histogram_Bucket& from);
  ProfilePacket_Histogram_Bucket(ProfilePacket_Histogram_Bucket&& from) noexcept
    : ProfilePacket_Histogram_Bucket() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_Histogram_Bucket& operator=(const ProfilePacket_Histogram_Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_Histogram_Bucket& operator=(ProfilePacket_Histogram_Bucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket_Histogram_Bucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket_Histogram_Bucket* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_Histogram_Bucket*>(
               &_ProfilePacket_Histogram_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfilePacket_Histogram_Bucket& a, ProfilePacket_Histogram_Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_Histogram_Bucket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket_Histogram_Bucket* New() const final {
    return CreateMaybeMessage<ProfilePacket_Histogram_Bucket>(nullptr);
  }

  ProfilePacket_Histogram_Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket_Histogram_Bucket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket_Histogram_Bucket& from);
  void MergeFrom(const ProfilePacket_Histogram_Bucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket_Histogram_Bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket.Histogram.Bucket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperLimitFieldNumber = 1,
    kCountFieldNumber = 3,
    kMaxBucketFieldNumber = 2,
  };
  // optional uint64 upper_limit = 1;
  bool has_upper_limit() const;
  void clear_upper_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 upper_limit() const;
  void set_upper_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool max_bucket = 2;
  bool has_max_bucket() const;
  void clear_max_bucket();
  bool max_bucket() const;
  void set_max_bucket(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.Histogram.Bucket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upper_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  bool max_bucket_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class ProfilePacket_Histogram :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.Histogram) */ {
 public:
  ProfilePacket_Histogram();
  virtual ~ProfilePacket_Histogram();

  ProfilePacket_Histogram(const ProfilePacket_Histogram& from);
  ProfilePacket_Histogram(ProfilePacket_Histogram&& from) noexcept
    : ProfilePacket_Histogram() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_Histogram& operator=(const ProfilePacket_Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_Histogram& operator=(ProfilePacket_Histogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket_Histogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket_Histogram* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_Histogram*>(
               &_ProfilePacket_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProfilePacket_Histogram& a, ProfilePacket_Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_Histogram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket_Histogram* New() const final {
    return CreateMaybeMessage<ProfilePacket_Histogram>(nullptr);
  }

  ProfilePacket_Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket_Histogram>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket_Histogram& from);
  void MergeFrom(const ProfilePacket_Histogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket_Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket.Histogram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProfilePacket_Histogram_Bucket Bucket;

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
  };
  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  int buckets_size() const;
  void clear_buckets();
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >*
      mutable_buckets();
  const ::perfetto::protos::ProfilePacket_Histogram_Bucket& buckets(int index) const;
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >&
      buckets() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.Histogram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket > buckets_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class ProfilePacket_ProcessStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.ProcessStats) */ {
 public:
  ProfilePacket_ProcessStats();
  virtual ~ProfilePacket_ProcessStats();

  ProfilePacket_ProcessStats(const ProfilePacket_ProcessStats& from);
  ProfilePacket_ProcessStats(ProfilePacket_ProcessStats&& from) noexcept
    : ProfilePacket_ProcessStats() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_ProcessStats& operator=(const ProfilePacket_ProcessStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_ProcessStats& operator=(ProfilePacket_ProcessStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket_ProcessStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket_ProcessStats* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_ProcessStats*>(
               &_ProfilePacket_ProcessStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProfilePacket_ProcessStats& a, ProfilePacket_ProcessStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_ProcessStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket_ProcessStats* New() const final {
    return CreateMaybeMessage<ProfilePacket_ProcessStats>(nullptr);
  }

  ProfilePacket_ProcessStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket_ProcessStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket_ProcessStats& from);
  void MergeFrom(const ProfilePacket_ProcessStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket_ProcessStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket.ProcessStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnwindingTimeUsFieldNumber = 4,
    kUnwindingErrorsFieldNumber = 1,
    kHeapSamplesFieldNumber = 2,
    kMapReparsesFieldNumber = 3,
    kTotalUnwindingTimeUsFieldNumber = 5,
    kClientSpinlockBlockedUsFieldNumber = 6,
  };
  // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
  bool has_unwinding_time_us() const;
  void clear_unwinding_time_us();
  const ::perfetto::protos::ProfilePacket_Histogram& unwinding_time_us() const;
  ::perfetto::protos::ProfilePacket_Histogram* release_unwinding_time_us();
  ::perfetto::protos::ProfilePacket_Histogram* mutable_unwinding_time_us();
  void set_allocated_unwinding_time_us(::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us);

  // optional uint64 unwinding_errors = 1;
  bool has_unwinding_errors() const;
  void clear_unwinding_errors();
  ::PROTOBUF_NAMESPACE_ID::uint64 unwinding_errors() const;
  void set_unwinding_errors(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 heap_samples = 2;
  bool has_heap_samples() const;
  void clear_heap_samples();
  ::PROTOBUF_NAMESPACE_ID::uint64 heap_samples() const;
  void set_heap_samples(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 map_reparses = 3;
  bool has_map_reparses() const;
  void clear_map_reparses();
  ::PROTOBUF_NAMESPACE_ID::uint64 map_reparses() const;
  void set_map_reparses(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 total_unwinding_time_us = 5;
  bool has_total_unwinding_time_us() const;
  void clear_total_unwinding_time_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_unwinding_time_us() const;
  void set_total_unwinding_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 client_spinlock_blocked_us = 6;
  bool has_client_spinlock_blocked_us() const;
  void clear_client_spinlock_blocked_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_spinlock_blocked_us() const;
  void set_client_spinlock_blocked_us(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.ProcessStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unwinding_errors_;
  ::PROTOBUF_NAMESPACE_ID::uint64 heap_samples_;
  ::PROTOBUF_NAMESPACE_ID::uint64 map_reparses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_unwinding_time_us_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_spinlock_blocked_us_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class ProfilePacket_ProcessHeapSamples :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.ProcessHeapSamples) */ {
 public:
  ProfilePacket_ProcessHeapSamples();
  virtual ~ProfilePacket_ProcessHeapSamples();

  ProfilePacket_ProcessHeapSamples(const ProfilePacket_ProcessHeapSamples& from);
  ProfilePacket_ProcessHeapSamples(ProfilePacket_ProcessHeapSamples&& from) noexcept
    : ProfilePacket_ProcessHeapSamples() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_ProcessHeapSamples& operator=(const ProfilePacket_ProcessHeapSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_ProcessHeapSamples& operator=(ProfilePacket_ProcessHeapSamples&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket_ProcessHeapSamples& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket_ProcessHeapSamples* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_ProcessHeapSamples*>(
               &_ProfilePacket_ProcessHeapSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfilePacket_ProcessHeapSamples& a, ProfilePacket_ProcessHeapSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_ProcessHeapSamples* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket_ProcessHeapSamples* New() const final {
    return CreateMaybeMessage<ProfilePacket_ProcessHeapSamples>(nullptr);
  }

  ProfilePacket_ProcessHeapSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket_ProcessHeapSamples>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket_ProcessHeapSamples& from);
  void MergeFrom(const ProfilePacket_ProcessHeapSamples& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket_ProcessHeapSamples* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket.ProcessHeapSamples";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProfilePacket_ProcessHeapSamples_ClientError ClientError;
  static constexpr ClientError CLIENT_ERROR_NONE =
    ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE;
  static constexpr ClientError CLIENT_ERROR_HIT_TIMEOUT =
    ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_HIT_TIMEOUT;
  static constexpr ClientError CLIENT_ERROR_INVALID_STACK_BOUNDS =
    ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS;
  static inline bool ClientError_IsValid(int value) {
    return ProfilePacket_ProcessHeapSamples_ClientError_IsValid(value);
  }
  static constexpr ClientError ClientError_MIN =
    ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MIN;
  static constexpr ClientError ClientError_MAX =
    ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MAX;
  static constexpr int ClientError_ARRAYSIZE =
    ProfilePacket_ProcessHeapSamples_ClientError_ClientError_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClientError_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientError>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientError_Name.");
    return ProfilePacket_ProcessHeapSamples_ClientError_Name(enum_t_value);
  }
  static inline bool ClientError_Parse(const std::string& name,
      ClientError* value) {
    return ProfilePacket_ProcessHeapSamples_ClientError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 2,
    kHeapNameFieldNumber = 11,
    kStatsFieldNumber = 5,
    kPidFieldNumber = 1,
    kFromStartupFieldNumber = 3,
    kRejectedConcurrentFieldNumber = 4,
    kDisconnectedFieldNumber = 6,
    kBufferOverranFieldNumber = 7,
    kBufferCorruptedFieldNumber = 8,
    kHitGuardrailFieldNumber = 10,
    kTimestampFieldNumber = 9,
    kSamplingIntervalBytesFieldNumber = 12,
    kOrigSamplingIntervalBytesFieldNumber = 13,
    kClientErrorFieldNumber = 14,
  };
  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  int samples_size() const;
  void clear_samples();
  ::perfetto::protos::ProfilePacket_HeapSample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >*
      mutable_samples();
  const ::perfetto::protos::ProfilePacket_HeapSample& samples(int index) const;
  ::perfetto::protos::ProfilePacket_HeapSample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >&
      samples() const;

  // optional string heap_name = 11;
  bool has_heap_name() const;
  void clear_heap_name();
  const std::string& heap_name() const;
  void set_heap_name(const std::string& value);
  void set_heap_name(std::string&& value);
  void set_heap_name(const char* value);
  void set_heap_name(const char* value, size_t size);
  std::string* mutable_heap_name();
  std::string* release_heap_name();
  void set_allocated_heap_name(std::string* heap_name);

  // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
  bool has_stats() const;
  void clear_stats();
  const ::perfetto::protos::ProfilePacket_ProcessStats& stats() const;
  ::perfetto::protos::ProfilePacket_ProcessStats* release_stats();
  ::perfetto::protos::ProfilePacket_ProcessStats* mutable_stats();
  void set_allocated_stats(::perfetto::protos::ProfilePacket_ProcessStats* stats);

  // optional uint64 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint64 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool from_startup = 3;
  bool has_from_startup() const;
  void clear_from_startup();
  bool from_startup() const;
  void set_from_startup(bool value);

  // optional bool rejected_concurrent = 4;
  bool has_rejected_concurrent() const;
  void clear_rejected_concurrent();
  bool rejected_concurrent() const;
  void set_rejected_concurrent(bool value);

  // optional bool disconnected = 6;
  bool has_disconnected() const;
  void clear_disconnected();
  bool disconnected() const;
  void set_disconnected(bool value);

  // optional bool buffer_overran = 7;
  bool has_buffer_overran() const;
  void clear_buffer_overran();
  bool buffer_overran() const;
  void set_buffer_overran(bool value);

  // optional bool buffer_corrupted = 8;
  bool has_buffer_corrupted() const;
  void clear_buffer_corrupted();
  bool buffer_corrupted() const;
  void set_buffer_corrupted(bool value);

  // optional bool hit_guardrail = 10;
  bool has_hit_guardrail() const;
  void clear_hit_guardrail();
  bool hit_guardrail() const;
  void set_hit_guardrail(bool value);

  // optional uint64 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sampling_interval_bytes = 12;
  bool has_sampling_interval_bytes() const;
  void clear_sampling_interval_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 sampling_interval_bytes() const;
  void set_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 orig_sampling_interval_bytes = 13;
  bool has_orig_sampling_interval_bytes() const;
  void clear_orig_sampling_interval_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_sampling_interval_bytes() const;
  void set_orig_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
  bool has_client_error() const;
  void clear_client_error();
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError client_error() const;
  void set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.ProcessHeapSamples)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample > samples_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heap_name_;
  ::perfetto::protos::ProfilePacket_ProcessStats* stats_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pid_;
  bool from_startup_;
  bool rejected_concurrent_;
  bool disconnected_;
  bool buffer_overran_;
  bool buffer_corrupted_;
  bool hit_guardrail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sampling_interval_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_sampling_interval_bytes_;
  int client_error_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class ProfilePacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket) */ {
 public:
  ProfilePacket();
  virtual ~ProfilePacket();

  ProfilePacket(const ProfilePacket& from);
  ProfilePacket(ProfilePacket&& from) noexcept
    : ProfilePacket() {
    *this = ::std::move(from);
  }

  inline ProfilePacket& operator=(const ProfilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket& operator=(ProfilePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilePacket* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket*>(
               &_ProfilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProfilePacket& a, ProfilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilePacket* New() const final {
    return CreateMaybeMessage<ProfilePacket>(nullptr);
  }

  ProfilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilePacket& from);
  void MergeFrom(const ProfilePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfilePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProfilePacket_HeapSample HeapSample;
  typedef ProfilePacket_Histogram Histogram;
  typedef ProfilePacket_ProcessStats ProcessStats;
  typedef ProfilePacket_ProcessHeapSamples ProcessHeapSamples;

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 1,
    kFramesFieldNumber = 2,
    kCallstacksFieldNumber = 3,
    kMappingsFieldNumber = 4,
    kProcessDumpsFieldNumber = 5,
    kIndexFieldNumber = 7,
    kContinuedFieldNumber = 6,
  };
  // repeated .perfetto.protos.InternedString strings = 1;
  int strings_size() const;
  void clear_strings();
  ::perfetto::protos::InternedString* mutable_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
      mutable_strings();
  const ::perfetto::protos::InternedString& strings(int index) const;
  ::perfetto::protos::InternedString* add_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
      strings() const;

  // repeated .perfetto.protos.Frame frames = 2;
  int frames_size() const;
  void clear_frames();
  ::perfetto::protos::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >*
      mutable_frames();
  const ::perfetto::protos::Frame& frames(int index) const;
  ::perfetto::protos::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >&
      frames() const;

  // repeated .perfetto.protos.Callstack callstacks = 3;
  int callstacks_size() const;
  void clear_callstacks();
  ::perfetto::protos::Callstack* mutable_callstacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >*
      mutable_callstacks();
  const ::perfetto::protos::Callstack& callstacks(int index) const;
  ::perfetto::protos::Callstack* add_callstacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >&
      callstacks() const;

  // repeated .perfetto.protos.Mapping mappings = 4;
  int mappings_size() const;
  void clear_mappings();
  ::perfetto::protos::Mapping* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >*
      mutable_mappings();
  const ::perfetto::protos::Mapping& mappings(int index) const;
  ::perfetto::protos::Mapping* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >&
      mappings() const;

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  int process_dumps_size() const;
  void clear_process_dumps();
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* mutable_process_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >*
      mutable_process_dumps();
  const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& process_dumps(int index) const;
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* add_process_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >&
      process_dumps() const;

  // optional uint64 index = 7;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool continued = 6;
  bool has_continued() const;
  void clear_continued();
  bool continued() const;
  void set_continued(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString > strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack > callstacks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping > mappings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples > process_dumps_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  bool continued_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class StreamingAllocation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingAllocation) */ {
 public:
  StreamingAllocation();
  virtual ~StreamingAllocation();

  StreamingAllocation(const StreamingAllocation& from);
  StreamingAllocation(StreamingAllocation&& from) noexcept
    : StreamingAllocation() {
    *this = ::std::move(from);
  }

  inline StreamingAllocation& operator=(const StreamingAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingAllocation& operator=(StreamingAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StreamingAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingAllocation* internal_default_instance() {
    return reinterpret_cast<const StreamingAllocation*>(
               &_StreamingAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamingAllocation& a, StreamingAllocation& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingAllocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingAllocation* New() const final {
    return CreateMaybeMessage<StreamingAllocation>(nullptr);
  }

  StreamingAllocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingAllocation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StreamingAllocation& from);
  void MergeFrom(const StreamingAllocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingAllocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StreamingAllocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
    kSampleSizeFieldNumber = 3,
    kClockMonotonicCoarseTimestampFieldNumber = 4,
    kHeapIdFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
  };
  // repeated uint64 address = 1;
  int address_size() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address(int index) const;
  void set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_address();

  // repeated uint64 size = 2;
  int size_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size(int index) const;
  void set_size(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_size();

  // repeated uint64 sample_size = 3;
  int sample_size_size() const;
  void clear_sample_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_size(int index) const;
  void set_sample_size(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_sample_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      sample_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_sample_size();

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  int clock_monotonic_coarse_timestamp_size() const;
  void clear_clock_monotonic_coarse_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 clock_monotonic_coarse_timestamp(int index) const;
  void set_clock_monotonic_coarse_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_clock_monotonic_coarse_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      clock_monotonic_coarse_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_clock_monotonic_coarse_timestamp();

  // repeated uint32 heap_id = 5;
  int heap_id_size() const;
  void clear_heap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 heap_id(int index) const;
  void set_heap_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heap_id();

  // repeated uint64 sequence_number = 6;
  int sequence_number_size() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number(int index) const;
  void set_sequence_number(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_sequence_number();

  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingAllocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > sample_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > clock_monotonic_coarse_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heap_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > sequence_number_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class StreamingFree :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingFree) */ {
 public:
  StreamingFree();
  virtual ~StreamingFree();

  StreamingFree(const StreamingFree& from);
  StreamingFree(StreamingFree&& from) noexcept
    : StreamingFree() {
    *this = ::std::move(from);
  }

  inline StreamingFree& operator=(const StreamingFree& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingFree& operator=(StreamingFree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StreamingFree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingFree* internal_default_instance() {
    return reinterpret_cast<const StreamingFree*>(
               &_StreamingFree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamingFree& a, StreamingFree& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingFree* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingFree* New() const final {
    return CreateMaybeMessage<StreamingFree>(nullptr);
  }

  StreamingFree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingFree>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StreamingFree& from);
  void MergeFrom(const StreamingFree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingFree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StreamingFree";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kHeapIdFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
  };
  // repeated uint64 address = 1;
  int address_size() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address(int index) const;
  void set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_address();

  // repeated uint32 heap_id = 2;
  int heap_id_size() const;
  void clear_heap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 heap_id(int index) const;
  void set_heap_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heap_id();

  // repeated uint64 sequence_number = 3;
  int sequence_number_size() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number(int index) const;
  void set_sequence_number(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_sequence_number();

  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingFree)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heap_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > sequence_number_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class StreamingProfilePacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingProfilePacket) */ {
 public:
  StreamingProfilePacket();
  virtual ~StreamingProfilePacket();

  StreamingProfilePacket(const StreamingProfilePacket& from);
  StreamingProfilePacket(StreamingProfilePacket&& from) noexcept
    : StreamingProfilePacket() {
    *this = ::std::move(from);
  }

  inline StreamingProfilePacket& operator=(const StreamingProfilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingProfilePacket& operator=(StreamingProfilePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StreamingProfilePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingProfilePacket* internal_default_instance() {
    return reinterpret_cast<const StreamingProfilePacket*>(
               &_StreamingProfilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamingProfilePacket& a, StreamingProfilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingProfilePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingProfilePacket* New() const final {
    return CreateMaybeMessage<StreamingProfilePacket>(nullptr);
  }

  StreamingProfilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingProfilePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StreamingProfilePacket& from);
  void MergeFrom(const StreamingProfilePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingProfilePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StreamingProfilePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackIidFieldNumber = 1,
    kTimestampDeltaUsFieldNumber = 2,
    kProcessPriorityFieldNumber = 3,
  };
  // repeated uint64 callstack_iid = 1;
  int callstack_iid_size() const;
  void clear_callstack_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 callstack_iid(int index) const;
  void set_callstack_iid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_callstack_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      callstack_iid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_callstack_iid();

  // repeated int64 timestamp_delta_us = 2;
  int timestamp_delta_us_size() const;
  void clear_timestamp_delta_us();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_delta_us(int index) const;
  void set_timestamp_delta_us(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      timestamp_delta_us() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_timestamp_delta_us();

  // optional int32 process_priority = 3;
  bool has_process_priority() const;
  void clear_process_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 process_priority() const;
  void set_process_priority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingProfilePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > callstack_iid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > timestamp_delta_us_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_priority_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class Profiling :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Profiling) */ {
 public:
  Profiling();
  virtual ~Profiling();

  Profiling(const Profiling& from);
  Profiling(Profiling&& from) noexcept
    : Profiling() {
    *this = ::std::move(from);
  }

  inline Profiling& operator=(const Profiling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profiling& operator=(Profiling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Profiling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profiling* internal_default_instance() {
    return reinterpret_cast<const Profiling*>(
               &_Profiling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Profiling& a, Profiling& b) {
    a.Swap(&b);
  }
  inline void Swap(Profiling* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Profiling* New() const final {
    return CreateMaybeMessage<Profiling>(nullptr);
  }

  Profiling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Profiling>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Profiling& from);
  void MergeFrom(const Profiling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Profiling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Profiling";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Profiling_CpuMode CpuMode;
  static constexpr CpuMode MODE_UNKNOWN =
    Profiling_CpuMode_MODE_UNKNOWN;
  static constexpr CpuMode MODE_KERNEL =
    Profiling_CpuMode_MODE_KERNEL;
  static constexpr CpuMode MODE_USER =
    Profiling_CpuMode_MODE_USER;
  static constexpr CpuMode MODE_HYPERVISOR =
    Profiling_CpuMode_MODE_HYPERVISOR;
  static constexpr CpuMode MODE_GUEST_KERNEL =
    Profiling_CpuMode_MODE_GUEST_KERNEL;
  static constexpr CpuMode MODE_GUEST_USER =
    Profiling_CpuMode_MODE_GUEST_USER;
  static inline bool CpuMode_IsValid(int value) {
    return Profiling_CpuMode_IsValid(value);
  }
  static constexpr CpuMode CpuMode_MIN =
    Profiling_CpuMode_CpuMode_MIN;
  static constexpr CpuMode CpuMode_MAX =
    Profiling_CpuMode_CpuMode_MAX;
  static constexpr int CpuMode_ARRAYSIZE =
    Profiling_CpuMode_CpuMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CpuMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CpuMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CpuMode_Name.");
    return Profiling_CpuMode_Name(enum_t_value);
  }
  static inline bool CpuMode_Parse(const std::string& name,
      CpuMode* value) {
    return Profiling_CpuMode_Parse(name, value);
  }

  typedef Profiling_StackUnwindError StackUnwindError;
  static constexpr StackUnwindError UNWIND_ERROR_UNKNOWN =
    Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN;
  static constexpr StackUnwindError UNWIND_ERROR_NONE =
    Profiling_StackUnwindError_UNWIND_ERROR_NONE;
  static constexpr StackUnwindError UNWIND_ERROR_MEMORY_INVALID =
    Profiling_StackUnwindError_UNWIND_ERROR_MEMORY_INVALID;
  static constexpr StackUnwindError UNWIND_ERROR_UNWIND_INFO =
    Profiling_StackUnwindError_UNWIND_ERROR_UNWIND_INFO;
  static constexpr StackUnwindError UNWIND_ERROR_UNSUPPORTED =
    Profiling_StackUnwindError_UNWIND_ERROR_UNSUPPORTED;
  static constexpr StackUnwindError UNWIND_ERROR_INVALID_MAP =
    Profiling_StackUnwindError_UNWIND_ERROR_INVALID_MAP;
  static constexpr StackUnwindError UNWIND_ERROR_MAX_FRAMES_EXCEEDED =
    Profiling_StackUnwindError_UNWIND_ERROR_MAX_FRAMES_EXCEEDED;
  static constexpr StackUnwindError UNWIND_ERROR_REPEATED_FRAME =
    Profiling_StackUnwindError_UNWIND_ERROR_REPEATED_FRAME;
  static constexpr StackUnwindError UNWIND_ERROR_INVALID_ELF =
    Profiling_StackUnwindError_UNWIND_ERROR_INVALID_ELF;
  static constexpr StackUnwindError UNWIND_ERROR_SYSTEM_CALL =
    Profiling_StackUnwindError_UNWIND_ERROR_SYSTEM_CALL;
  static constexpr StackUnwindError UNWIND_ERROR_THREAD_TIMEOUT =
    Profiling_StackUnwindError_UNWIND_ERROR_THREAD_TIMEOUT;
  static constexpr StackUnwindError UNWIND_ERROR_THREAD_DOES_NOT_EXIST =
    Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
  static inline bool StackUnwindError_IsValid(int value) {
    return Profiling_StackUnwindError_IsValid(value);
  }
  static constexpr StackUnwindError StackUnwindError_MIN =
    Profiling_StackUnwindError_StackUnwindError_MIN;
  static constexpr StackUnwindError StackUnwindError_MAX =
    Profiling_StackUnwindError_StackUnwindError_MAX;
  static constexpr int StackUnwindError_ARRAYSIZE =
    Profiling_StackUnwindError_StackUnwindError_ARRAYSIZE;
  template<typename T>
  static inline const std::string& StackUnwindError_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StackUnwindError>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StackUnwindError_Name.");
    return Profiling_StackUnwindError_Name(enum_t_value);
  }
  static inline bool StackUnwindError_Parse(const std::string& name,
      StackUnwindError* value) {
    return Profiling_StackUnwindError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.Profiling)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class PerfSample_ProducerEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfSample.ProducerEvent) */ {
 public:
  PerfSample_ProducerEvent();
  virtual ~PerfSample_ProducerEvent();

  PerfSample_ProducerEvent(const PerfSample_ProducerEvent& from);
  PerfSample_ProducerEvent(PerfSample_ProducerEvent&& from) noexcept
    : PerfSample_ProducerEvent() {
    *this = ::std::move(from);
  }

  inline PerfSample_ProducerEvent& operator=(const PerfSample_ProducerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfSample_ProducerEvent& operator=(PerfSample_ProducerEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfSample_ProducerEvent& default_instance();

  enum OptionalSourceStopReasonCase {
    kSourceStopReason = 1,
    OPTIONAL_SOURCE_STOP_REASON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfSample_ProducerEvent* internal_default_instance() {
    return reinterpret_cast<const PerfSample_ProducerEvent*>(
               &_PerfSample_ProducerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PerfSample_ProducerEvent& a, PerfSample_ProducerEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfSample_ProducerEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfSample_ProducerEvent* New() const final {
    return CreateMaybeMessage<PerfSample_ProducerEvent>(nullptr);
  }

  PerfSample_ProducerEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfSample_ProducerEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfSample_ProducerEvent& from);
  void MergeFrom(const PerfSample_ProducerEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfSample_ProducerEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfSample.ProducerEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfSample_ProducerEvent_DataSourceStopReason DataSourceStopReason;
  static constexpr DataSourceStopReason PROFILER_STOP_UNKNOWN =
    PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN;
  static constexpr DataSourceStopReason PROFILER_STOP_GUARDRAIL =
    PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL;
  static inline bool DataSourceStopReason_IsValid(int value) {
    return PerfSample_ProducerEvent_DataSourceStopReason_IsValid(value);
  }
  static constexpr DataSourceStopReason DataSourceStopReason_MIN =
    PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MIN;
  static constexpr DataSourceStopReason DataSourceStopReason_MAX =
    PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MAX;
  static constexpr int DataSourceStopReason_ARRAYSIZE =
    PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DataSourceStopReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataSourceStopReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataSourceStopReason_Name.");
    return PerfSample_ProducerEvent_DataSourceStopReason_Name(enum_t_value);
  }
  static inline bool DataSourceStopReason_Parse(const std::string& name,
      DataSourceStopReason* value) {
    return PerfSample_ProducerEvent_DataSourceStopReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceStopReasonFieldNumber = 1,
  };
  // optional .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
  bool has_source_stop_reason() const;
  void clear_source_stop_reason();
  ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason source_stop_reason() const;
  void set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value);

  void clear_optional_source_stop_reason();
  OptionalSourceStopReasonCase optional_source_stop_reason_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfSample.ProducerEvent)
 private:
  class _Internal;
  void set_has_source_stop_reason();

  inline bool has_optional_source_stop_reason() const;
  inline void clear_has_optional_source_stop_reason();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union OptionalSourceStopReasonUnion {
    OptionalSourceStopReasonUnion() {}
    int source_stop_reason_;
  } optional_source_stop_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class PerfSample :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfSample) */ {
 public:
  PerfSample();
  virtual ~PerfSample();

  PerfSample(const PerfSample& from);
  PerfSample(PerfSample&& from) noexcept
    : PerfSample() {
    *this = ::std::move(from);
  }

  inline PerfSample& operator=(const PerfSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfSample& operator=(PerfSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfSample& default_instance();

  enum OptionalUnwindErrorCase {
    kUnwindError = 16,
    OPTIONAL_UNWIND_ERROR_NOT_SET = 0,
  };

  enum OptionalSampleSkippedReasonCase {
    kSampleSkippedReason = 18,
    OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfSample* internal_default_instance() {
    return reinterpret_cast<const PerfSample*>(
               &_PerfSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PerfSample& a, PerfSample& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfSample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfSample* New() const final {
    return CreateMaybeMessage<PerfSample>(nullptr);
  }

  PerfSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfSample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfSample& from);
  void MergeFrom(const PerfSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfSample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfSample_ProducerEvent ProducerEvent;

  typedef PerfSample_SampleSkipReason SampleSkipReason;
  static constexpr SampleSkipReason PROFILER_SKIP_UNKNOWN =
    PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN;
  static constexpr SampleSkipReason PROFILER_SKIP_READ_STAGE =
    PerfSample_SampleSkipReason_PROFILER_SKIP_READ_STAGE;
  static constexpr SampleSkipReason PROFILER_SKIP_UNWIND_STAGE =
    PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_STAGE;
  static constexpr SampleSkipReason PROFILER_SKIP_UNWIND_ENQUEUE =
    PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE;
  static inline bool SampleSkipReason_IsValid(int value) {
    return PerfSample_SampleSkipReason_IsValid(value);
  }
  static constexpr SampleSkipReason SampleSkipReason_MIN =
    PerfSample_SampleSkipReason_SampleSkipReason_MIN;
  static constexpr SampleSkipReason SampleSkipReason_MAX =
    PerfSample_SampleSkipReason_SampleSkipReason_MAX;
  static constexpr int SampleSkipReason_ARRAYSIZE =
    PerfSample_SampleSkipReason_SampleSkipReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SampleSkipReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SampleSkipReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SampleSkipReason_Name.");
    return PerfSample_SampleSkipReason_Name(enum_t_value);
  }
  static inline bool SampleSkipReason_Parse(const std::string& name,
      SampleSkipReason* value) {
    return PerfSample_SampleSkipReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProducerEventFieldNumber = 19,
    kCpuFieldNumber = 1,
    kPidFieldNumber = 2,
    kCallstackIidFieldNumber = 4,
    kTidFieldNumber = 3,
    kCpuModeFieldNumber = 5,
    kTimebaseCountFieldNumber = 6,
    kKernelRecordsLostFieldNumber = 17,
    kUnwindErrorFieldNumber = 16,
    kSampleSkippedReasonFieldNumber = 18,
  };
  // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
  bool has_producer_event() const;
  void clear_producer_event();
  const ::perfetto::protos::PerfSample_ProducerEvent& producer_event() const;
  ::perfetto::protos::PerfSample_ProducerEvent* release_producer_event();
  ::perfetto::protos::PerfSample_ProducerEvent* mutable_producer_event();
  void set_allocated_producer_event(::perfetto::protos::PerfSample_ProducerEvent* producer_event);

  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 callstack_iid = 4;
  bool has_callstack_iid() const;
  void clear_callstack_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 callstack_iid() const;
  void set_callstack_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 tid = 3;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
  bool has_cpu_mode() const;
  void clear_cpu_mode();
  ::perfetto::protos::Profiling_CpuMode cpu_mode() const;
  void set_cpu_mode(::perfetto::protos::Profiling_CpuMode value);

  // optional uint64 timebase_count = 6;
  bool has_timebase_count() const;
  void clear_timebase_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 timebase_count() const;
  void set_timebase_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 kernel_records_lost = 17;
  bool has_kernel_records_lost() const;
  void clear_kernel_records_lost();
  ::PROTOBUF_NAMESPACE_ID::uint64 kernel_records_lost() const;
  void set_kernel_records_lost(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
  bool has_unwind_error() const;
  void clear_unwind_error();
  ::perfetto::protos::Profiling_StackUnwindError unwind_error() const;
  void set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value);

  // optional .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
  bool has_sample_skipped_reason() const;
  void clear_sample_skipped_reason();
  ::perfetto::protos::PerfSample_SampleSkipReason sample_skipped_reason() const;
  void set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value);

  void clear_optional_unwind_error();
  OptionalUnwindErrorCase optional_unwind_error_case() const;
  void clear_optional_sample_skipped_reason();
  OptionalSampleSkippedReasonCase optional_sample_skipped_reason_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfSample)
 private:
  class _Internal;
  void set_has_unwind_error();
  void set_has_sample_skipped_reason();

  inline bool has_optional_unwind_error() const;
  inline void clear_has_optional_unwind_error();

  inline bool has_optional_sample_skipped_reason() const;
  inline void clear_has_optional_sample_skipped_reason();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::PerfSample_ProducerEvent* producer_event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 callstack_iid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  int cpu_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timebase_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kernel_records_lost_;
  union OptionalUnwindErrorUnion {
    OptionalUnwindErrorUnion() {}
    int unwind_error_;
  } optional_unwind_error_;
  union OptionalSampleSkippedReasonUnion {
    OptionalSampleSkippedReasonUnion() {}
    int sample_skipped_reason_;
  } optional_sample_skipped_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfilePacket_HeapSample

// optional uint64 callstack_id = 1;
inline bool ProfilePacket_HeapSample::has_callstack_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilePacket_HeapSample::clear_callstack_id() {
  callstack_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::callstack_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.callstack_id)
  return callstack_id_;
}
inline void ProfilePacket_HeapSample::set_callstack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  callstack_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.callstack_id)
}

// optional uint64 self_allocated = 2;
inline bool ProfilePacket_HeapSample::has_self_allocated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilePacket_HeapSample::clear_self_allocated() {
  self_allocated_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::self_allocated() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_allocated)
  return self_allocated_;
}
inline void ProfilePacket_HeapSample::set_self_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  self_allocated_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_allocated)
}

// optional uint64 self_freed = 3;
inline bool ProfilePacket_HeapSample::has_self_freed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilePacket_HeapSample::clear_self_freed() {
  self_freed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::self_freed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_freed)
  return self_freed_;
}
inline void ProfilePacket_HeapSample::set_self_freed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  self_freed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_freed)
}

// optional uint64 self_max = 8;
inline bool ProfilePacket_HeapSample::has_self_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProfilePacket_HeapSample::clear_self_max() {
  self_max_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::self_max() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_max)
  return self_max_;
}
inline void ProfilePacket_HeapSample::set_self_max(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  self_max_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_max)
}

// optional uint64 self_max_count = 9;
inline bool ProfilePacket_HeapSample::has_self_max_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProfilePacket_HeapSample::clear_self_max_count() {
  self_max_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::self_max_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_max_count)
  return self_max_count_;
}
inline void ProfilePacket_HeapSample::set_self_max_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  self_max_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_max_count)
}

// optional uint64 timestamp = 4;
inline bool ProfilePacket_HeapSample::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilePacket_HeapSample::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.timestamp)
  return timestamp_;
}
inline void ProfilePacket_HeapSample::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.timestamp)
}

// optional uint64 alloc_count = 5;
inline bool ProfilePacket_HeapSample::has_alloc_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilePacket_HeapSample::clear_alloc_count() {
  alloc_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::alloc_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.alloc_count)
  return alloc_count_;
}
inline void ProfilePacket_HeapSample::set_alloc_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  alloc_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.alloc_count)
}

// optional uint64 free_count = 6;
inline bool ProfilePacket_HeapSample::has_free_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilePacket_HeapSample::clear_free_count() {
  free_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_HeapSample::free_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.free_count)
  return free_count_;
}
inline void ProfilePacket_HeapSample::set_free_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  free_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.free_count)
}

// -------------------------------------------------------------------

// ProfilePacket_Histogram_Bucket

// optional uint64 upper_limit = 1;
inline bool ProfilePacket_Histogram_Bucket::has_upper_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilePacket_Histogram_Bucket::clear_upper_limit() {
  upper_limit_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_Histogram_Bucket::upper_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.upper_limit)
  return upper_limit_;
}
inline void ProfilePacket_Histogram_Bucket::set_upper_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  upper_limit_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.upper_limit)
}

// optional bool max_bucket = 2;
inline bool ProfilePacket_Histogram_Bucket::has_max_bucket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilePacket_Histogram_Bucket::clear_max_bucket() {
  max_bucket_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilePacket_Histogram_Bucket::max_bucket() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.max_bucket)
  return max_bucket_;
}
inline void ProfilePacket_Histogram_Bucket::set_max_bucket(bool value) {
  _has_bits_[0] |= 0x00000004u;
  max_bucket_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.max_bucket)
}

// optional uint64 count = 3;
inline bool ProfilePacket_Histogram_Bucket::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilePacket_Histogram_Bucket::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_Histogram_Bucket::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.count)
  return count_;
}
inline void ProfilePacket_Histogram_Bucket::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.count)
}

// -------------------------------------------------------------------

// ProfilePacket_Histogram

// repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
inline int ProfilePacket_Histogram::buckets_size() const {
  return buckets_.size();
}
inline void ProfilePacket_Histogram::clear_buckets() {
  buckets_.Clear();
}
inline ::perfetto::protos::ProfilePacket_Histogram_Bucket* ProfilePacket_Histogram::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.Histogram.buckets)
  return buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >*
ProfilePacket_Histogram::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.Histogram.buckets)
  return &buckets_;
}
inline const ::perfetto::protos::ProfilePacket_Histogram_Bucket& ProfilePacket_Histogram::buckets(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.buckets)
  return buckets_.Get(index);
}
inline ::perfetto::protos::ProfilePacket_Histogram_Bucket* ProfilePacket_Histogram::add_buckets() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.Histogram.buckets)
  return buckets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >&
ProfilePacket_Histogram::buckets() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.Histogram.buckets)
  return buckets_;
}

// -------------------------------------------------------------------

// ProfilePacket_ProcessStats

// optional uint64 unwinding_errors = 1;
inline bool ProfilePacket_ProcessStats::has_unwinding_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_unwinding_errors() {
  unwinding_errors_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessStats::unwinding_errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.unwinding_errors)
  return unwinding_errors_;
}
inline void ProfilePacket_ProcessStats::set_unwinding_errors(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  unwinding_errors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.unwinding_errors)
}

// optional uint64 heap_samples = 2;
inline bool ProfilePacket_ProcessStats::has_heap_samples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_heap_samples() {
  heap_samples_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessStats::heap_samples() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.heap_samples)
  return heap_samples_;
}
inline void ProfilePacket_ProcessStats::set_heap_samples(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  heap_samples_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.heap_samples)
}

// optional uint64 map_reparses = 3;
inline bool ProfilePacket_ProcessStats::has_map_reparses() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_map_reparses() {
  map_reparses_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessStats::map_reparses() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.map_reparses)
  return map_reparses_;
}
inline void ProfilePacket_ProcessStats::set_map_reparses(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  map_reparses_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.map_reparses)
}

// optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
inline bool ProfilePacket_ProcessStats::has_unwinding_time_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_unwinding_time_us() {
  if (unwinding_time_us_ != nullptr) unwinding_time_us_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::ProfilePacket_Histogram& ProfilePacket_ProcessStats::unwinding_time_us() const {
  const ::perfetto::protos::ProfilePacket_Histogram* p = unwinding_time_us_;
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ProfilePacket_Histogram*>(
      &::perfetto::protos::_ProfilePacket_Histogram_default_instance_);
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::release_unwinding_time_us() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ProfilePacket_Histogram* temp = unwinding_time_us_;
  unwinding_time_us_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::mutable_unwinding_time_us() {
  _has_bits_[0] |= 0x00000001u;
  if (unwinding_time_us_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram>(GetArenaNoVirtual());
    unwinding_time_us_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  return unwinding_time_us_;
}
inline void ProfilePacket_ProcessStats::set_allocated_unwinding_time_us(::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unwinding_time_us_;
  }
  if (unwinding_time_us) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unwinding_time_us = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unwinding_time_us, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unwinding_time_us_ = unwinding_time_us;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
}

// optional uint64 total_unwinding_time_us = 5;
inline bool ProfilePacket_ProcessStats::has_total_unwinding_time_us() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_total_unwinding_time_us() {
  total_unwinding_time_us_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessStats::total_unwinding_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.total_unwinding_time_us)
  return total_unwinding_time_us_;
}
inline void ProfilePacket_ProcessStats::set_total_unwinding_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_unwinding_time_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.total_unwinding_time_us)
}

// optional uint64 client_spinlock_blocked_us = 6;
inline bool ProfilePacket_ProcessStats::has_client_spinlock_blocked_us() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilePacket_ProcessStats::clear_client_spinlock_blocked_us() {
  client_spinlock_blocked_us_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessStats::client_spinlock_blocked_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.client_spinlock_blocked_us)
  return client_spinlock_blocked_us_;
}
inline void ProfilePacket_ProcessStats::set_client_spinlock_blocked_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  client_spinlock_blocked_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.client_spinlock_blocked_us)
}

// -------------------------------------------------------------------

// ProfilePacket_ProcessHeapSamples

// optional uint64 pid = 1;
inline bool ProfilePacket_ProcessHeapSamples::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_pid() {
  pid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessHeapSamples::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.pid)
  return pid_;
}
inline void ProfilePacket_ProcessHeapSamples::set_pid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.pid)
}

// optional bool from_startup = 3;
inline bool ProfilePacket_ProcessHeapSamples::has_from_startup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_from_startup() {
  from_startup_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilePacket_ProcessHeapSamples::from_startup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.from_startup)
  return from_startup_;
}
inline void ProfilePacket_ProcessHeapSamples::set_from_startup(bool value) {
  _has_bits_[0] |= 0x00000008u;
  from_startup_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.from_startup)
}

// optional bool rejected_concurrent = 4;
inline bool ProfilePacket_ProcessHeapSamples::has_rejected_concurrent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_rejected_concurrent() {
  rejected_concurrent_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilePacket_ProcessHeapSamples::rejected_concurrent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.rejected_concurrent)
  return rejected_concurrent_;
}
inline void ProfilePacket_ProcessHeapSamples::set_rejected_concurrent(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rejected_concurrent_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.rejected_concurrent)
}

// optional bool disconnected = 6;
inline bool ProfilePacket_ProcessHeapSamples::has_disconnected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_disconnected() {
  disconnected_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilePacket_ProcessHeapSamples::disconnected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.disconnected)
  return disconnected_;
}
inline void ProfilePacket_ProcessHeapSamples::set_disconnected(bool value) {
  _has_bits_[0] |= 0x00000020u;
  disconnected_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.disconnected)
}

// optional bool buffer_overran = 7;
inline bool ProfilePacket_ProcessHeapSamples::has_buffer_overran() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_buffer_overran() {
  buffer_overran_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProfilePacket_ProcessHeapSamples::buffer_overran() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_overran)
  return buffer_overran_;
}
inline void ProfilePacket_ProcessHeapSamples::set_buffer_overran(bool value) {
  _has_bits_[0] |= 0x00000040u;
  buffer_overran_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_overran)
}

// optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
inline bool ProfilePacket_ProcessHeapSamples::has_client_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_client_error() {
  client_error_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::client_error() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.client_error)
  return static_cast< ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError >(client_error_);
}
inline void ProfilePacket_ProcessHeapSamples::set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value) {
  assert(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  client_error_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.client_error)
}

// optional bool buffer_corrupted = 8;
inline bool ProfilePacket_ProcessHeapSamples::has_buffer_corrupted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_buffer_corrupted() {
  buffer_corrupted_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ProfilePacket_ProcessHeapSamples::buffer_corrupted() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_corrupted)
  return buffer_corrupted_;
}
inline void ProfilePacket_ProcessHeapSamples::set_buffer_corrupted(bool value) {
  _has_bits_[0] |= 0x00000080u;
  buffer_corrupted_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_corrupted)
}

// optional bool hit_guardrail = 10;
inline bool ProfilePacket_ProcessHeapSamples::has_hit_guardrail() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_hit_guardrail() {
  hit_guardrail_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProfilePacket_ProcessHeapSamples::hit_guardrail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.hit_guardrail)
  return hit_guardrail_;
}
inline void ProfilePacket_ProcessHeapSamples::set_hit_guardrail(bool value) {
  _has_bits_[0] |= 0x00000100u;
  hit_guardrail_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.hit_guardrail)
}

// optional string heap_name = 11;
inline bool ProfilePacket_ProcessHeapSamples::has_heap_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_heap_name() {
  heap_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilePacket_ProcessHeapSamples::heap_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  return heap_name_.GetNoArena();
}
inline void ProfilePacket_ProcessHeapSamples::set_heap_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  heap_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}
inline void ProfilePacket_ProcessHeapSamples::set_heap_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  heap_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}
inline void ProfilePacket_ProcessHeapSamples::set_heap_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  heap_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}
inline void ProfilePacket_ProcessHeapSamples::set_heap_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  heap_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}
inline std::string* ProfilePacket_ProcessHeapSamples::mutable_heap_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  return heap_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProfilePacket_ProcessHeapSamples::release_heap_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  if (!has_heap_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return heap_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProfilePacket_ProcessHeapSamples::set_allocated_heap_name(std::string* heap_name) {
  if (heap_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  heap_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heap_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}

// optional uint64 sampling_interval_bytes = 12;
inline bool ProfilePacket_ProcessHeapSamples::has_sampling_interval_bytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_sampling_interval_bytes() {
  sampling_interval_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessHeapSamples::sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.sampling_interval_bytes)
  return sampling_interval_bytes_;
}
inline void ProfilePacket_ProcessHeapSamples::set_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  sampling_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.sampling_interval_bytes)
}

// optional uint64 orig_sampling_interval_bytes = 13;
inline bool ProfilePacket_ProcessHeapSamples::has_orig_sampling_interval_bytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_orig_sampling_interval_bytes() {
  orig_sampling_interval_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessHeapSamples::orig_sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.orig_sampling_interval_bytes)
  return orig_sampling_interval_bytes_;
}
inline void ProfilePacket_ProcessHeapSamples::set_orig_sampling_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  orig_sampling_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.orig_sampling_interval_bytes)
}

// optional uint64 timestamp = 9;
inline bool ProfilePacket_ProcessHeapSamples::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket_ProcessHeapSamples::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.timestamp)
  return timestamp_;
}
inline void ProfilePacket_ProcessHeapSamples::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.timestamp)
}

// optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
inline bool ProfilePacket_ProcessHeapSamples::has_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilePacket_ProcessHeapSamples::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::ProfilePacket_ProcessStats& ProfilePacket_ProcessHeapSamples::stats() const {
  const ::perfetto::protos::ProfilePacket_ProcessStats* p = stats_;
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ProfilePacket_ProcessStats*>(
      &::perfetto::protos::_ProfilePacket_ProcessStats_default_instance_);
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::release_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ProfilePacket_ProcessStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::mutable_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessStats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  return stats_;
}
inline void ProfilePacket_ProcessHeapSamples::set_allocated_stats(::perfetto::protos::ProfilePacket_ProcessStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
}

// repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
inline int ProfilePacket_ProcessHeapSamples::samples_size() const {
  return samples_.size();
}
inline void ProfilePacket_ProcessHeapSamples::clear_samples() {
  samples_.Clear();
}
inline ::perfetto::protos::ProfilePacket_HeapSample* ProfilePacket_ProcessHeapSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >*
ProfilePacket_ProcessHeapSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return &samples_;
}
inline const ::perfetto::protos::ProfilePacket_HeapSample& ProfilePacket_ProcessHeapSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return samples_.Get(index);
}
inline ::perfetto::protos::ProfilePacket_HeapSample* ProfilePacket_ProcessHeapSamples::add_samples() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return samples_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >&
ProfilePacket_ProcessHeapSamples::samples() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return samples_;
}

// -------------------------------------------------------------------

// ProfilePacket

// repeated .perfetto.protos.InternedString strings = 1;
inline int ProfilePacket::strings_size() const {
  return strings_.size();
}
inline ::perfetto::protos::InternedString* ProfilePacket::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.strings)
  return strings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
ProfilePacket::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.strings)
  return &strings_;
}
inline const ::perfetto::protos::InternedString& ProfilePacket::strings(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.strings)
  return strings_.Get(index);
}
inline ::perfetto::protos::InternedString* ProfilePacket::add_strings() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.strings)
  return strings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
ProfilePacket::strings() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.strings)
  return strings_;
}

// repeated .perfetto.protos.Mapping mappings = 4;
inline int ProfilePacket::mappings_size() const {
  return mappings_.size();
}
inline ::perfetto::protos::Mapping* ProfilePacket::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >*
ProfilePacket::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.mappings)
  return &mappings_;
}
inline const ::perfetto::protos::Mapping& ProfilePacket::mappings(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.mappings)
  return mappings_.Get(index);
}
inline ::perfetto::protos::Mapping* ProfilePacket::add_mappings() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.mappings)
  return mappings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >&
ProfilePacket::mappings() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.mappings)
  return mappings_;
}

// repeated .perfetto.protos.Frame frames = 2;
inline int ProfilePacket::frames_size() const {
  return frames_.size();
}
inline ::perfetto::protos::Frame* ProfilePacket::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >*
ProfilePacket::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.frames)
  return &frames_;
}
inline const ::perfetto::protos::Frame& ProfilePacket::frames(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.frames)
  return frames_.Get(index);
}
inline ::perfetto::protos::Frame* ProfilePacket::add_frames() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.frames)
  return frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >&
ProfilePacket::frames() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.frames)
  return frames_;
}

// repeated .perfetto.protos.Callstack callstacks = 3;
inline int ProfilePacket::callstacks_size() const {
  return callstacks_.size();
}
inline ::perfetto::protos::Callstack* ProfilePacket::mutable_callstacks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.callstacks)
  return callstacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >*
ProfilePacket::mutable_callstacks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.callstacks)
  return &callstacks_;
}
inline const ::perfetto::protos::Callstack& ProfilePacket::callstacks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.callstacks)
  return callstacks_.Get(index);
}
inline ::perfetto::protos::Callstack* ProfilePacket::add_callstacks() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.callstacks)
  return callstacks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >&
ProfilePacket::callstacks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.callstacks)
  return callstacks_;
}

// repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
inline int ProfilePacket::process_dumps_size() const {
  return process_dumps_.size();
}
inline void ProfilePacket::clear_process_dumps() {
  process_dumps_.Clear();
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples* ProfilePacket::mutable_process_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.process_dumps)
  return process_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >*
ProfilePacket::mutable_process_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.process_dumps)
  return &process_dumps_;
}
inline const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& ProfilePacket::process_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.process_dumps)
  return process_dumps_.Get(index);
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples* ProfilePacket::add_process_dumps() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.process_dumps)
  return process_dumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >&
ProfilePacket::process_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.process_dumps)
  return process_dumps_;
}

// optional bool continued = 6;
inline bool ProfilePacket::has_continued() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilePacket::clear_continued() {
  continued_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilePacket::continued() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.continued)
  return continued_;
}
inline void ProfilePacket::set_continued(bool value) {
  _has_bits_[0] |= 0x00000002u;
  continued_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.continued)
}

// optional uint64 index = 7;
inline bool ProfilePacket::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilePacket::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfilePacket::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.index)
  return index_;
}
inline void ProfilePacket::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.index)
}

// -------------------------------------------------------------------

// StreamingAllocation

// repeated uint64 address = 1;
inline int StreamingAllocation::address_size() const {
  return address_.size();
}
inline void StreamingAllocation::clear_address() {
  address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingAllocation::address(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.address)
  return address_.Get(index);
}
inline void StreamingAllocation::set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.address)
}
inline void StreamingAllocation::add_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingAllocation::address() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingAllocation::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.address)
  return &address_;
}

// repeated uint64 size = 2;
inline int StreamingAllocation::size_size() const {
  return size_.size();
}
inline void StreamingAllocation::clear_size() {
  size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingAllocation::size(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.size)
  return size_.Get(index);
}
inline void StreamingAllocation::set_size(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.size)
}
inline void StreamingAllocation::add_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingAllocation::size() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.size)
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingAllocation::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.size)
  return &size_;
}

// repeated uint64 sample_size = 3;
inline int StreamingAllocation::sample_size_size() const {
  return sample_size_.size();
}
inline void StreamingAllocation::clear_sample_size() {
  sample_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingAllocation::sample_size(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.sample_size)
  return sample_size_.Get(index);
}
inline void StreamingAllocation::set_sample_size(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sample_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.sample_size)
}
inline void StreamingAllocation::add_sample_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sample_size_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.sample_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingAllocation::sample_size() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.sample_size)
  return sample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingAllocation::mutable_sample_size() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.sample_size)
  return &sample_size_;
}

// repeated uint64 clock_monotonic_coarse_timestamp = 4;
inline int StreamingAllocation::clock_monotonic_coarse_timestamp_size() const {
  return clock_monotonic_coarse_timestamp_.size();
}
inline void StreamingAllocation::clear_clock_monotonic_coarse_timestamp() {
  clock_monotonic_coarse_timestamp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingAllocation::clock_monotonic_coarse_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return clock_monotonic_coarse_timestamp_.Get(index);
}
inline void StreamingAllocation::set_clock_monotonic_coarse_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  clock_monotonic_coarse_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
}
inline void StreamingAllocation::add_clock_monotonic_coarse_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  clock_monotonic_coarse_timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingAllocation::clock_monotonic_coarse_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return clock_monotonic_coarse_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingAllocation::mutable_clock_monotonic_coarse_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return &clock_monotonic_coarse_timestamp_;
}

// repeated uint32 heap_id = 5;
inline int StreamingAllocation::heap_id_size() const {
  return heap_id_.size();
}
inline void StreamingAllocation::clear_heap_id() {
  heap_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingAllocation::heap_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.heap_id)
  return heap_id_.Get(index);
}
inline void StreamingAllocation::set_heap_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heap_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.heap_id)
}
inline void StreamingAllocation::add_heap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heap_id_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.heap_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StreamingAllocation::heap_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.heap_id)
  return heap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StreamingAllocation::mutable_heap_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.heap_id)
  return &heap_id_;
}

// repeated uint64 sequence_number = 6;
inline int StreamingAllocation::sequence_number_size() const {
  return sequence_number_.size();
}
inline void StreamingAllocation::clear_sequence_number() {
  sequence_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingAllocation::sequence_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.sequence_number)
  return sequence_number_.Get(index);
}
inline void StreamingAllocation::set_sequence_number(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sequence_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.sequence_number)
}
inline void StreamingAllocation::add_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sequence_number_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.sequence_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingAllocation::sequence_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.sequence_number)
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingAllocation::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.sequence_number)
  return &sequence_number_;
}

// -------------------------------------------------------------------

// StreamingFree

// repeated uint64 address = 1;
inline int StreamingFree::address_size() const {
  return address_.size();
}
inline void StreamingFree::clear_address() {
  address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingFree::address(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.address)
  return address_.Get(index);
}
inline void StreamingFree::set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.address)
}
inline void StreamingFree::add_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingFree::address() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingFree::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.address)
  return &address_;
}

// repeated uint32 heap_id = 2;
inline int StreamingFree::heap_id_size() const {
  return heap_id_.size();
}
inline void StreamingFree::clear_heap_id() {
  heap_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingFree::heap_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.heap_id)
  return heap_id_.Get(index);
}
inline void StreamingFree::set_heap_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heap_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.heap_id)
}
inline void StreamingFree::add_heap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heap_id_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.heap_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StreamingFree::heap_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.heap_id)
  return heap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StreamingFree::mutable_heap_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.heap_id)
  return &heap_id_;
}

// repeated uint64 sequence_number = 3;
inline int StreamingFree::sequence_number_size() const {
  return sequence_number_.size();
}
inline void StreamingFree::clear_sequence_number() {
  sequence_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingFree::sequence_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.sequence_number)
  return sequence_number_.Get(index);
}
inline void StreamingFree::set_sequence_number(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sequence_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.sequence_number)
}
inline void StreamingFree::add_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  sequence_number_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.sequence_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingFree::sequence_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.sequence_number)
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingFree::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.sequence_number)
  return &sequence_number_;
}

// -------------------------------------------------------------------

// StreamingProfilePacket

// repeated uint64 callstack_iid = 1;
inline int StreamingProfilePacket::callstack_iid_size() const {
  return callstack_iid_.size();
}
inline void StreamingProfilePacket::clear_callstack_iid() {
  callstack_iid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamingProfilePacket::callstack_iid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return callstack_iid_.Get(index);
}
inline void StreamingProfilePacket::set_callstack_iid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  callstack_iid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.callstack_iid)
}
inline void StreamingProfilePacket::add_callstack_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  callstack_iid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingProfilePacket.callstack_iid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamingProfilePacket::callstack_iid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return callstack_iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamingProfilePacket::mutable_callstack_iid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return &callstack_iid_;
}

// repeated int64 timestamp_delta_us = 2;
inline int StreamingProfilePacket::timestamp_delta_us_size() const {
  return timestamp_delta_us_.size();
}
inline void StreamingProfilePacket::clear_timestamp_delta_us() {
  timestamp_delta_us_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamingProfilePacket::timestamp_delta_us(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return timestamp_delta_us_.Get(index);
}
inline void StreamingProfilePacket::set_timestamp_delta_us(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  timestamp_delta_us_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
}
inline void StreamingProfilePacket::add_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  timestamp_delta_us_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
StreamingProfilePacket::timestamp_delta_us() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return timestamp_delta_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
StreamingProfilePacket::mutable_timestamp_delta_us() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return &timestamp_delta_us_;
}

// optional int32 process_priority = 3;
inline bool StreamingProfilePacket::has_process_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamingProfilePacket::clear_process_priority() {
  process_priority_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamingProfilePacket::process_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.process_priority)
  return process_priority_;
}
inline void StreamingProfilePacket::set_process_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  process_priority_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.process_priority)
}

// -------------------------------------------------------------------

// Profiling

// -------------------------------------------------------------------

// PerfSample_ProducerEvent

// optional .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
inline bool PerfSample_ProducerEvent::has_source_stop_reason() const {
  return optional_source_stop_reason_case() == kSourceStopReason;
}
inline void PerfSample_ProducerEvent::set_has_source_stop_reason() {
  _oneof_case_[0] = kSourceStopReason;
}
inline void PerfSample_ProducerEvent::clear_source_stop_reason() {
  if (has_source_stop_reason()) {
    optional_source_stop_reason_.source_stop_reason_ = 0;
    clear_has_optional_source_stop_reason();
  }
}
inline ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::source_stop_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.ProducerEvent.source_stop_reason)
  if (has_source_stop_reason()) {
    return static_cast< ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason >(optional_source_stop_reason_.source_stop_reason_);
  }
  return static_cast< ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason >(0);
}
inline void PerfSample_ProducerEvent::set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value) {
  assert(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_IsValid(value));
  if (!has_source_stop_reason()) {
    clear_optional_source_stop_reason();
    set_has_source_stop_reason();
  }
  optional_source_stop_reason_.source_stop_reason_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.ProducerEvent.source_stop_reason)
}

inline bool PerfSample_ProducerEvent::has_optional_source_stop_reason() const {
  return optional_source_stop_reason_case() != OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}
inline void PerfSample_ProducerEvent::clear_has_optional_source_stop_reason() {
  _oneof_case_[0] = OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}
inline PerfSample_ProducerEvent::OptionalSourceStopReasonCase PerfSample_ProducerEvent::optional_source_stop_reason_case() const {
  return PerfSample_ProducerEvent::OptionalSourceStopReasonCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerfSample

// optional uint32 cpu = 1;
inline bool PerfSample::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfSample::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfSample::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.cpu)
  return cpu_;
}
inline void PerfSample::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.cpu)
}

// optional uint32 pid = 2;
inline bool PerfSample::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfSample::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfSample::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.pid)
  return pid_;
}
inline void PerfSample::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.pid)
}

// optional uint32 tid = 3;
inline bool PerfSample::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfSample::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfSample::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.tid)
  return tid_;
}
inline void PerfSample::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.tid)
}

// optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
inline bool PerfSample::has_cpu_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfSample::clear_cpu_mode() {
  cpu_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::Profiling_CpuMode PerfSample::cpu_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.cpu_mode)
  return static_cast< ::perfetto::protos::Profiling_CpuMode >(cpu_mode_);
}
inline void PerfSample::set_cpu_mode(::perfetto::protos::Profiling_CpuMode value) {
  assert(::perfetto::protos::Profiling_CpuMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cpu_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.cpu_mode)
}

// optional uint64 timebase_count = 6;
inline bool PerfSample::has_timebase_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfSample::clear_timebase_count() {
  timebase_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfSample::timebase_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.timebase_count)
  return timebase_count_;
}
inline void PerfSample::set_timebase_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  timebase_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.timebase_count)
}

// optional uint64 callstack_iid = 4;
inline bool PerfSample::has_callstack_iid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfSample::clear_callstack_iid() {
  callstack_iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfSample::callstack_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.callstack_iid)
  return callstack_iid_;
}
inline void PerfSample::set_callstack_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  callstack_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.callstack_iid)
}

// optional .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
inline bool PerfSample::has_unwind_error() const {
  return optional_unwind_error_case() == kUnwindError;
}
inline void PerfSample::set_has_unwind_error() {
  _oneof_case_[0] = kUnwindError;
}
inline void PerfSample::clear_unwind_error() {
  if (has_unwind_error()) {
    optional_unwind_error_.unwind_error_ = 0;
    clear_has_optional_unwind_error();
  }
}
inline ::perfetto::protos::Profiling_StackUnwindError PerfSample::unwind_error() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.unwind_error)
  if (has_unwind_error()) {
    return static_cast< ::perfetto::protos::Profiling_StackUnwindError >(optional_unwind_error_.unwind_error_);
  }
  return static_cast< ::perfetto::protos::Profiling_StackUnwindError >(0);
}
inline void PerfSample::set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value) {
  assert(::perfetto::protos::Profiling_StackUnwindError_IsValid(value));
  if (!has_unwind_error()) {
    clear_optional_unwind_error();
    set_has_unwind_error();
  }
  optional_unwind_error_.unwind_error_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.unwind_error)
}

// optional uint64 kernel_records_lost = 17;
inline bool PerfSample::has_kernel_records_lost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerfSample::clear_kernel_records_lost() {
  kernel_records_lost_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfSample::kernel_records_lost() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.kernel_records_lost)
  return kernel_records_lost_;
}
inline void PerfSample::set_kernel_records_lost(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  kernel_records_lost_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.kernel_records_lost)
}

// optional .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
inline bool PerfSample::has_sample_skipped_reason() const {
  return optional_sample_skipped_reason_case() == kSampleSkippedReason;
}
inline void PerfSample::set_has_sample_skipped_reason() {
  _oneof_case_[1] = kSampleSkippedReason;
}
inline void PerfSample::clear_sample_skipped_reason() {
  if (has_sample_skipped_reason()) {
    optional_sample_skipped_reason_.sample_skipped_reason_ = 0;
    clear_has_optional_sample_skipped_reason();
  }
}
inline ::perfetto::protos::PerfSample_SampleSkipReason PerfSample::sample_skipped_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.sample_skipped_reason)
  if (has_sample_skipped_reason()) {
    return static_cast< ::perfetto::protos::PerfSample_SampleSkipReason >(optional_sample_skipped_reason_.sample_skipped_reason_);
  }
  return static_cast< ::perfetto::protos::PerfSample_SampleSkipReason >(0);
}
inline void PerfSample::set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value) {
  assert(::perfetto::protos::PerfSample_SampleSkipReason_IsValid(value));
  if (!has_sample_skipped_reason()) {
    clear_optional_sample_skipped_reason();
    set_has_sample_skipped_reason();
  }
  optional_sample_skipped_reason_.sample_skipped_reason_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.sample_skipped_reason)
}

// optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
inline bool PerfSample::has_producer_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfSample::clear_producer_event() {
  if (producer_event_ != nullptr) producer_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfSample_ProducerEvent& PerfSample::producer_event() const {
  const ::perfetto::protos::PerfSample_ProducerEvent* p = producer_event_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.producer_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfSample_ProducerEvent*>(
      &::perfetto::protos::_PerfSample_ProducerEvent_default_instance_);
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::release_producer_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfSample.producer_event)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfSample_ProducerEvent* temp = producer_event_;
  producer_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::mutable_producer_event() {
  _has_bits_[0] |= 0x00000001u;
  if (producer_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfSample_ProducerEvent>(GetArenaNoVirtual());
    producer_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfSample.producer_event)
  return producer_event_;
}
inline void PerfSample::set_allocated_producer_event(::perfetto::protos::PerfSample_ProducerEvent* producer_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete producer_event_;
  }
  if (producer_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      producer_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producer_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  producer_event_ = producer_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfSample.producer_event)
}

inline bool PerfSample::has_optional_unwind_error() const {
  return optional_unwind_error_case() != OPTIONAL_UNWIND_ERROR_NOT_SET;
}
inline void PerfSample::clear_has_optional_unwind_error() {
  _oneof_case_[0] = OPTIONAL_UNWIND_ERROR_NOT_SET;
}
inline bool PerfSample::has_optional_sample_skipped_reason() const {
  return optional_sample_skipped_reason_case() != OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}
inline void PerfSample::clear_has_optional_sample_skipped_reason() {
  _oneof_case_[1] = OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}
inline PerfSample::OptionalUnwindErrorCase PerfSample::optional_unwind_error_case() const {
  return PerfSample::OptionalUnwindErrorCase(_oneof_case_[0]);
}
inline PerfSample::OptionalSampleSkippedReasonCase PerfSample::optional_sample_skipped_reason_case() const {
  return PerfSample::OptionalSampleSkippedReasonCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::Profiling_CpuMode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::Profiling_StackUnwindError> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::PerfSample_SampleSkipReason> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto
