// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class AddressSymbols;
class AddressSymbolsDefaultTypeInternal;
extern AddressSymbolsDefaultTypeInternal _AddressSymbols_default_instance_;
class Callstack;
class CallstackDefaultTypeInternal;
extern CallstackDefaultTypeInternal _Callstack_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class InternedString;
class InternedStringDefaultTypeInternal;
extern InternedStringDefaultTypeInternal _InternedString_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Mapping;
class MappingDefaultTypeInternal;
extern MappingDefaultTypeInternal _Mapping_default_instance_;
class ModuleSymbols;
class ModuleSymbolsDefaultTypeInternal;
extern ModuleSymbolsDefaultTypeInternal _ModuleSymbols_default_instance_;
class ProfiledFrameSymbols;
class ProfiledFrameSymbolsDefaultTypeInternal;
extern ProfiledFrameSymbolsDefaultTypeInternal _ProfiledFrameSymbols_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::AddressSymbols* Arena::CreateMaybeMessage<::perfetto::protos::AddressSymbols>(Arena*);
template<> ::perfetto::protos::Callstack* Arena::CreateMaybeMessage<::perfetto::protos::Callstack>(Arena*);
template<> ::perfetto::protos::Frame* Arena::CreateMaybeMessage<::perfetto::protos::Frame>(Arena*);
template<> ::perfetto::protos::InternedString* Arena::CreateMaybeMessage<::perfetto::protos::InternedString>(Arena*);
template<> ::perfetto::protos::Line* Arena::CreateMaybeMessage<::perfetto::protos::Line>(Arena*);
template<> ::perfetto::protos::Mapping* Arena::CreateMaybeMessage<::perfetto::protos::Mapping>(Arena*);
template<> ::perfetto::protos::ModuleSymbols* Arena::CreateMaybeMessage<::perfetto::protos::ModuleSymbols>(Arena*);
template<> ::perfetto::protos::ProfiledFrameSymbols* Arena::CreateMaybeMessage<::perfetto::protos::ProfiledFrameSymbols>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class InternedString :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InternedString) */ {
 public:
  InternedString();
  virtual ~InternedString();

  InternedString(const InternedString& from);
  InternedString(InternedString&& from) noexcept
    : InternedString() {
    *this = ::std::move(from);
  }

  inline InternedString& operator=(const InternedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternedString& operator=(InternedString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InternedString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternedString* internal_default_instance() {
    return reinterpret_cast<const InternedString*>(
               &_InternedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternedString& a, InternedString& b) {
    a.Swap(&b);
  }
  inline void Swap(InternedString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternedString* New() const final {
    return CreateMaybeMessage<InternedString>(nullptr);
  }

  InternedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternedString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InternedString& from);
  void MergeFrom(const InternedString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternedString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InternedString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional bytes str = 2;
  bool has_str() const;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.InternedString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProfiledFrameSymbols :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfiledFrameSymbols) */ {
 public:
  ProfiledFrameSymbols();
  virtual ~ProfiledFrameSymbols();

  ProfiledFrameSymbols(const ProfiledFrameSymbols& from);
  ProfiledFrameSymbols(ProfiledFrameSymbols&& from) noexcept
    : ProfiledFrameSymbols() {
    *this = ::std::move(from);
  }

  inline ProfiledFrameSymbols& operator=(const ProfiledFrameSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfiledFrameSymbols& operator=(ProfiledFrameSymbols&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfiledFrameSymbols& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfiledFrameSymbols* internal_default_instance() {
    return reinterpret_cast<const ProfiledFrameSymbols*>(
               &_ProfiledFrameSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfiledFrameSymbols& a, ProfiledFrameSymbols& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfiledFrameSymbols* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfiledFrameSymbols* New() const final {
    return CreateMaybeMessage<ProfiledFrameSymbols>(nullptr);
  }

  ProfiledFrameSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfiledFrameSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfiledFrameSymbols& from);
  void MergeFrom(const ProfiledFrameSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfiledFrameSymbols* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfiledFrameSymbols";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameIdFieldNumber = 2,
    kFileNameIdFieldNumber = 3,
    kLineNumberFieldNumber = 4,
    kFrameIidFieldNumber = 1,
  };
  // repeated uint64 function_name_id = 2;
  int function_name_id_size() const;
  void clear_function_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 function_name_id(int index) const;
  void set_function_name_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_function_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      function_name_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_function_name_id();

  // repeated uint64 file_name_id = 3;
  int file_name_id_size() const;
  void clear_file_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_name_id(int index) const;
  void set_file_name_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_file_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      file_name_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_file_name_id();

  // repeated uint32 line_number = 4;
  int line_number_size() const;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number(int index) const;
  void set_line_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      line_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_line_number();

  // optional uint64 frame_iid = 1;
  bool has_frame_iid() const;
  void clear_frame_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_iid() const;
  void set_frame_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfiledFrameSymbols)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > function_name_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > file_name_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > line_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Line :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Line";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kSourceFileNameFieldNumber = 2,
    kLineNumberFieldNumber = 3,
  };
  // optional string function_name = 1;
  bool has_function_name() const;
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);

  // optional string source_file_name = 2;
  bool has_source_file_name() const;
  void clear_source_file_name();
  const std::string& source_file_name() const;
  void set_source_file_name(const std::string& value);
  void set_source_file_name(std::string&& value);
  void set_source_file_name(const char* value);
  void set_source_file_name(const char* value, size_t size);
  std::string* mutable_source_file_name();
  std::string* release_source_file_name();
  void set_allocated_source_file_name(std::string* source_file_name);

  // optional uint32 line_number = 3;
  bool has_line_number() const;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Line)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class AddressSymbols :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AddressSymbols) */ {
 public:
  AddressSymbols();
  virtual ~AddressSymbols();

  AddressSymbols(const AddressSymbols& from);
  AddressSymbols(AddressSymbols&& from) noexcept
    : AddressSymbols() {
    *this = ::std::move(from);
  }

  inline AddressSymbols& operator=(const AddressSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressSymbols& operator=(AddressSymbols&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AddressSymbols& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressSymbols* internal_default_instance() {
    return reinterpret_cast<const AddressSymbols*>(
               &_AddressSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddressSymbols& a, AddressSymbols& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressSymbols* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressSymbols* New() const final {
    return CreateMaybeMessage<AddressSymbols>(nullptr);
  }

  AddressSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddressSymbols& from);
  void MergeFrom(const AddressSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressSymbols* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AddressSymbols";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .perfetto.protos.Line lines = 2;
  int lines_size() const;
  void clear_lines();
  ::perfetto::protos::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >*
      mutable_lines();
  const ::perfetto::protos::Line& lines(int index) const;
  ::perfetto::protos::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >&
      lines() const;

  // optional uint64 address = 1;
  bool has_address() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AddressSymbols)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line > lines_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ModuleSymbols :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ModuleSymbols) */ {
 public:
  ModuleSymbols();
  virtual ~ModuleSymbols();

  ModuleSymbols(const ModuleSymbols& from);
  ModuleSymbols(ModuleSymbols&& from) noexcept
    : ModuleSymbols() {
    *this = ::std::move(from);
  }

  inline ModuleSymbols& operator=(const ModuleSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleSymbols& operator=(ModuleSymbols&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ModuleSymbols& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleSymbols* internal_default_instance() {
    return reinterpret_cast<const ModuleSymbols*>(
               &_ModuleSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleSymbols& a, ModuleSymbols& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleSymbols* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleSymbols* New() const final {
    return CreateMaybeMessage<ModuleSymbols>(nullptr);
  }

  ModuleSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ModuleSymbols& from);
  void MergeFrom(const ModuleSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModuleSymbols* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ModuleSymbols";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressSymbolsFieldNumber = 3,
    kPathFieldNumber = 1,
    kBuildIdFieldNumber = 2,
  };
  // repeated .perfetto.protos.AddressSymbols address_symbols = 3;
  int address_symbols_size() const;
  void clear_address_symbols();
  ::perfetto::protos::AddressSymbols* mutable_address_symbols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >*
      mutable_address_symbols();
  const ::perfetto::protos::AddressSymbols& address_symbols(int index) const;
  ::perfetto::protos::AddressSymbols* add_address_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >&
      address_symbols() const;

  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional string build_id = 2;
  bool has_build_id() const;
  void clear_build_id();
  const std::string& build_id() const;
  void set_build_id(const std::string& value);
  void set_build_id(std::string&& value);
  void set_build_id(const char* value);
  void set_build_id(const char* value, size_t size);
  std::string* mutable_build_id();
  std::string* release_build_id();
  void set_allocated_build_id(std::string* build_id);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ModuleSymbols)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols > address_symbols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Mapping :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Mapping) */ {
 public:
  Mapping();
  virtual ~Mapping();

  Mapping(const Mapping& from);
  Mapping(Mapping&& from) noexcept
    : Mapping() {
    *this = ::std::move(from);
  }

  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mapping& operator=(Mapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Mapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mapping* internal_default_instance() {
    return reinterpret_cast<const Mapping*>(
               &_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Mapping& a, Mapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Mapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mapping* New() const final {
    return CreateMaybeMessage<Mapping>(nullptr);
  }

  Mapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Mapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathStringIdsFieldNumber = 7,
    kIidFieldNumber = 1,
    kBuildIdFieldNumber = 2,
    kStartOffsetFieldNumber = 3,
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
    kLoadBiasFieldNumber = 6,
    kExactOffsetFieldNumber = 8,
  };
  // repeated uint64 path_string_ids = 7;
  int path_string_ids_size() const;
  void clear_path_string_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 path_string_ids(int index) const;
  void set_path_string_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_path_string_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      path_string_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_path_string_ids();

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 build_id = 2;
  bool has_build_id() const;
  void clear_build_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 build_id() const;
  void set_build_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 start_offset = 3;
  bool has_start_offset() const;
  void clear_start_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset() const;
  void set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 start = 4;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 end = 5;
  bool has_end() const;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 load_bias = 6;
  bool has_load_bias() const;
  void clear_load_bias();
  ::PROTOBUF_NAMESPACE_ID::uint64 load_bias() const;
  void set_load_bias(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 exact_offset = 8;
  bool has_exact_offset() const;
  void clear_exact_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 exact_offset() const;
  void set_exact_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Mapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > path_string_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 build_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 load_bias_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exact_offset_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kFunctionNameIdFieldNumber = 2,
    kMappingIdFieldNumber = 3,
    kRelPcFieldNumber = 4,
  };
  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 function_name_id = 2;
  bool has_function_name_id() const;
  void clear_function_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 function_name_id() const;
  void set_function_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 mapping_id = 3;
  bool has_mapping_id() const;
  void clear_mapping_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 mapping_id() const;
  void set_mapping_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rel_pc = 4;
  bool has_rel_pc() const;
  void clear_rel_pc();
  ::PROTOBUF_NAMESPACE_ID::uint64 rel_pc() const;
  void set_rel_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 function_name_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mapping_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rel_pc_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Callstack :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Callstack) */ {
 public:
  Callstack();
  virtual ~Callstack();

  Callstack(const Callstack& from);
  Callstack(Callstack&& from) noexcept
    : Callstack() {
    *this = ::std::move(from);
  }

  inline Callstack& operator=(const Callstack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Callstack& operator=(Callstack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Callstack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Callstack* internal_default_instance() {
    return reinterpret_cast<const Callstack*>(
               &_Callstack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Callstack& a, Callstack& b) {
    a.Swap(&b);
  }
  inline void Swap(Callstack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Callstack* New() const final {
    return CreateMaybeMessage<Callstack>(nullptr);
  }

  Callstack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Callstack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Callstack& from);
  void MergeFrom(const Callstack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Callstack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Callstack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdsFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // repeated uint64 frame_ids = 2;
  int frame_ids_size() const;
  void clear_frame_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_ids(int index) const;
  void set_frame_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_frame_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      frame_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_frame_ids();

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Callstack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > frame_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternedString

// optional uint64 iid = 1;
inline bool InternedString::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternedString::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InternedString::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InternedString.iid)
  return iid_;
}
inline void InternedString::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.InternedString.iid)
}

// optional bytes str = 2;
inline bool InternedString::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternedString::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InternedString::str() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InternedString.str)
  return str_.GetNoArena();
}
inline void InternedString::set_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InternedString.str)
}
inline void InternedString::set_str(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.InternedString.str)
}
inline void InternedString::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InternedString.str)
}
inline void InternedString::set_str(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InternedString.str)
}
inline std::string* InternedString::mutable_str() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InternedString.str)
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternedString::release_str() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InternedString.str)
  if (!has_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternedString::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InternedString.str)
}

// -------------------------------------------------------------------

// ProfiledFrameSymbols

// optional uint64 frame_iid = 1;
inline bool ProfiledFrameSymbols::has_frame_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfiledFrameSymbols::clear_frame_iid() {
  frame_iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfiledFrameSymbols::frame_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.frame_iid)
  return frame_iid_;
}
inline void ProfiledFrameSymbols::set_frame_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  frame_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.frame_iid)
}

// repeated uint64 function_name_id = 2;
inline int ProfiledFrameSymbols::function_name_id_size() const {
  return function_name_id_.size();
}
inline void ProfiledFrameSymbols::clear_function_name_id() {
  function_name_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfiledFrameSymbols::function_name_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return function_name_id_.Get(index);
}
inline void ProfiledFrameSymbols::set_function_name_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  function_name_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.function_name_id)
}
inline void ProfiledFrameSymbols::add_function_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  function_name_id_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.function_name_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ProfiledFrameSymbols::function_name_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return function_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ProfiledFrameSymbols::mutable_function_name_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return &function_name_id_;
}

// repeated uint64 file_name_id = 3;
inline int ProfiledFrameSymbols::file_name_id_size() const {
  return file_name_id_.size();
}
inline void ProfiledFrameSymbols::clear_file_name_id() {
  file_name_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfiledFrameSymbols::file_name_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return file_name_id_.Get(index);
}
inline void ProfiledFrameSymbols::set_file_name_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  file_name_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.file_name_id)
}
inline void ProfiledFrameSymbols::add_file_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  file_name_id_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.file_name_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ProfiledFrameSymbols::file_name_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return file_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ProfiledFrameSymbols::mutable_file_name_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return &file_name_id_;
}

// repeated uint32 line_number = 4;
inline int ProfiledFrameSymbols::line_number_size() const {
  return line_number_.size();
}
inline void ProfiledFrameSymbols::clear_line_number() {
  line_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfiledFrameSymbols::line_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.line_number)
  return line_number_.Get(index);
}
inline void ProfiledFrameSymbols::set_line_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  line_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.line_number)
}
inline void ProfiledFrameSymbols::add_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  line_number_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.line_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProfiledFrameSymbols::line_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.line_number)
  return line_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProfiledFrameSymbols::mutable_line_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.line_number)
  return &line_number_;
}

// -------------------------------------------------------------------

// Line

// optional string function_name = 1;
inline bool Line::has_function_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Line::function_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.function_name)
  return function_name_.GetNoArena();
}
inline void Line::set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.function_name)
}
inline void Line::set_function_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.Line.function_name)
}
inline void Line::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.Line.function_name)
}
inline void Line::set_function_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.Line.function_name)
}
inline std::string* Line::mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Line.function_name)
  return function_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Line::release_function_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Line.function_name)
  if (!has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Line.function_name)
}

// optional string source_file_name = 2;
inline bool Line::has_source_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::clear_source_file_name() {
  source_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Line::source_file_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.source_file_name)
  return source_file_name_.GetNoArena();
}
inline void Line::set_source_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.source_file_name)
}
inline void Line::set_source_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  source_file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.Line.source_file_name)
}
inline void Line::set_source_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  source_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.Line.source_file_name)
}
inline void Line::set_source_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  source_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.Line.source_file_name)
}
inline std::string* Line::mutable_source_file_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Line.source_file_name)
  return source_file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Line::release_source_file_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Line.source_file_name)
  if (!has_source_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return source_file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_source_file_name(std::string* source_file_name) {
  if (source_file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_file_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Line.source_file_name)
}

// optional uint32 line_number = 3;
inline bool Line::has_line_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Line::clear_line_number() {
  line_number_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Line::line_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.line_number)
  return line_number_;
}
inline void Line::set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  line_number_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.line_number)
}

// -------------------------------------------------------------------

// AddressSymbols

// optional uint64 address = 1;
inline bool AddressSymbols::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressSymbols::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressSymbols::address() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AddressSymbols.address)
  return address_;
}
inline void AddressSymbols::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  address_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AddressSymbols.address)
}

// repeated .perfetto.protos.Line lines = 2;
inline int AddressSymbols::lines_size() const {
  return lines_.size();
}
inline void AddressSymbols::clear_lines() {
  lines_.Clear();
}
inline ::perfetto::protos::Line* AddressSymbols::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AddressSymbols.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >*
AddressSymbols::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AddressSymbols.lines)
  return &lines_;
}
inline const ::perfetto::protos::Line& AddressSymbols::lines(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AddressSymbols.lines)
  return lines_.Get(index);
}
inline ::perfetto::protos::Line* AddressSymbols::add_lines() {
  // @@protoc_insertion_point(field_add:perfetto.protos.AddressSymbols.lines)
  return lines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >&
AddressSymbols::lines() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AddressSymbols.lines)
  return lines_;
}

// -------------------------------------------------------------------

// ModuleSymbols

// optional string path = 1;
inline bool ModuleSymbols::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleSymbols::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModuleSymbols::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.path)
  return path_.GetNoArena();
}
inline void ModuleSymbols::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ModuleSymbols.path)
}
inline void ModuleSymbols::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ModuleSymbols.path)
}
inline void ModuleSymbols::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ModuleSymbols.path)
}
inline void ModuleSymbols::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ModuleSymbols.path)
}
inline std::string* ModuleSymbols::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleSymbols::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ModuleSymbols.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSymbols::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ModuleSymbols.path)
}

// optional string build_id = 2;
inline bool ModuleSymbols::has_build_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleSymbols::clear_build_id() {
  build_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModuleSymbols::build_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.build_id)
  return build_id_.GetNoArena();
}
inline void ModuleSymbols::set_build_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ModuleSymbols.build_id)
}
inline void ModuleSymbols::set_build_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  build_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ModuleSymbols.build_id)
}
inline void ModuleSymbols::set_build_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ModuleSymbols.build_id)
}
inline void ModuleSymbols::set_build_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ModuleSymbols.build_id)
}
inline std::string* ModuleSymbols::mutable_build_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.build_id)
  return build_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleSymbols::release_build_id() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ModuleSymbols.build_id)
  if (!has_build_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return build_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSymbols::set_allocated_build_id(std::string* build_id) {
  if (build_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_id);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ModuleSymbols.build_id)
}

// repeated .perfetto.protos.AddressSymbols address_symbols = 3;
inline int ModuleSymbols::address_symbols_size() const {
  return address_symbols_.size();
}
inline void ModuleSymbols::clear_address_symbols() {
  address_symbols_.Clear();
}
inline ::perfetto::protos::AddressSymbols* ModuleSymbols::mutable_address_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.address_symbols)
  return address_symbols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >*
ModuleSymbols::mutable_address_symbols() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ModuleSymbols.address_symbols)
  return &address_symbols_;
}
inline const ::perfetto::protos::AddressSymbols& ModuleSymbols::address_symbols(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.address_symbols)
  return address_symbols_.Get(index);
}
inline ::perfetto::protos::AddressSymbols* ModuleSymbols::add_address_symbols() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ModuleSymbols.address_symbols)
  return address_symbols_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >&
ModuleSymbols::address_symbols() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ModuleSymbols.address_symbols)
  return address_symbols_;
}

// -------------------------------------------------------------------

// Mapping

// optional uint64 iid = 1;
inline bool Mapping::has_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mapping::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.iid)
  return iid_;
}
inline void Mapping::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.iid)
}

// optional uint64 build_id = 2;
inline bool Mapping::has_build_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mapping::clear_build_id() {
  build_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::build_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.build_id)
  return build_id_;
}
inline void Mapping::set_build_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  build_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.build_id)
}

// optional uint64 exact_offset = 8;
inline bool Mapping::has_exact_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mapping::clear_exact_offset() {
  exact_offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::exact_offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.exact_offset)
  return exact_offset_;
}
inline void Mapping::set_exact_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  exact_offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.exact_offset)
}

// optional uint64 start_offset = 3;
inline bool Mapping::has_start_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mapping::clear_start_offset() {
  start_offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::start_offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.start_offset)
  return start_offset_;
}
inline void Mapping::set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.start_offset)
}

// optional uint64 start = 4;
inline bool Mapping::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mapping::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.start)
  return start_;
}
inline void Mapping::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.start)
}

// optional uint64 end = 5;
inline bool Mapping::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mapping::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.end)
  return end_;
}
inline void Mapping::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.end)
}

// optional uint64 load_bias = 6;
inline bool Mapping::has_load_bias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mapping::clear_load_bias() {
  load_bias_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::load_bias() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.load_bias)
  return load_bias_;
}
inline void Mapping::set_load_bias(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  load_bias_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.load_bias)
}

// repeated uint64 path_string_ids = 7;
inline int Mapping::path_string_ids_size() const {
  return path_string_ids_.size();
}
inline void Mapping::clear_path_string_ids() {
  path_string_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::path_string_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.path_string_ids)
  return path_string_ids_.Get(index);
}
inline void Mapping::set_path_string_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  path_string_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.path_string_ids)
}
inline void Mapping::add_path_string_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  path_string_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.Mapping.path_string_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Mapping::path_string_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.Mapping.path_string_ids)
  return path_string_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Mapping::mutable_path_string_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.Mapping.path_string_ids)
  return &path_string_ids_;
}

// -------------------------------------------------------------------

// Frame

// optional uint64 iid = 1;
inline bool Frame::has_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.iid)
  return iid_;
}
inline void Frame::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.iid)
}

// optional uint64 function_name_id = 2;
inline bool Frame::has_function_name_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::clear_function_name_id() {
  function_name_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::function_name_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.function_name_id)
  return function_name_id_;
}
inline void Frame::set_function_name_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  function_name_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.function_name_id)
}

// optional uint64 mapping_id = 3;
inline bool Frame::has_mapping_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::clear_mapping_id() {
  mapping_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::mapping_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.mapping_id)
  return mapping_id_;
}
inline void Frame::set_mapping_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  mapping_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.mapping_id)
}

// optional uint64 rel_pc = 4;
inline bool Frame::has_rel_pc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Frame::clear_rel_pc() {
  rel_pc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::rel_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.rel_pc)
  return rel_pc_;
}
inline void Frame::set_rel_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  rel_pc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.rel_pc)
}

// -------------------------------------------------------------------

// Callstack

// optional uint64 iid = 1;
inline bool Callstack::has_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Callstack::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Callstack::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Callstack.iid)
  return iid_;
}
inline void Callstack::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Callstack.iid)
}

// repeated uint64 frame_ids = 2;
inline int Callstack::frame_ids_size() const {
  return frame_ids_.size();
}
inline void Callstack::clear_frame_ids() {
  frame_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Callstack::frame_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Callstack.frame_ids)
  return frame_ids_.Get(index);
}
inline void Callstack::set_frame_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  frame_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Callstack.frame_ids)
}
inline void Callstack::add_frame_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  frame_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.Callstack.frame_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Callstack::frame_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.Callstack.frame_ids)
  return frame_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Callstack::mutable_frame_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.Callstack.frame_ids)
  return &frame_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
