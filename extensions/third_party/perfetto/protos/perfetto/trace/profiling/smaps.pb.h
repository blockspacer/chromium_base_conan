// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/smaps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SmapsEntry;
class SmapsEntryDefaultTypeInternal;
extern SmapsEntryDefaultTypeInternal _SmapsEntry_default_instance_;
class SmapsPacket;
class SmapsPacketDefaultTypeInternal;
extern SmapsPacketDefaultTypeInternal _SmapsPacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SmapsEntry* Arena::CreateMaybeMessage<::perfetto::protos::SmapsEntry>(Arena*);
template<> ::perfetto::protos::SmapsPacket* Arena::CreateMaybeMessage<::perfetto::protos::SmapsPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SmapsEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmapsEntry) */ {
 public:
  SmapsEntry();
  virtual ~SmapsEntry();

  SmapsEntry(const SmapsEntry& from);
  SmapsEntry(SmapsEntry&& from) noexcept
    : SmapsEntry() {
    *this = ::std::move(from);
  }

  inline SmapsEntry& operator=(const SmapsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmapsEntry& operator=(SmapsEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmapsEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmapsEntry* internal_default_instance() {
    return reinterpret_cast<const SmapsEntry*>(
               &_SmapsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmapsEntry& a, SmapsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SmapsEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmapsEntry* New() const final {
    return CreateMaybeMessage<SmapsEntry>(nullptr);
  }

  SmapsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmapsEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmapsEntry& from);
  void MergeFrom(const SmapsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmapsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmapsEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFileNameFieldNumber = 5,
    kModuleDebugidFieldNumber = 8,
    kModuleDebugPathFieldNumber = 9,
    kSizeKbFieldNumber = 2,
    kPrivateDirtyKbFieldNumber = 3,
    kSwapKbFieldNumber = 4,
    kStartAddressFieldNumber = 6,
    kModuleTimestampFieldNumber = 7,
    kPrivateCleanResidentKbFieldNumber = 11,
    kSharedDirtyResidentKbFieldNumber = 12,
    kSharedCleanResidentKbFieldNumber = 13,
    kLockedKbFieldNumber = 14,
    kProportionalResidentKbFieldNumber = 15,
    kProtectionFlagsFieldNumber = 10,
  };
  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional string file_name = 5;
  bool has_file_name() const;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // optional string module_debugid = 8;
  bool has_module_debugid() const;
  void clear_module_debugid();
  const std::string& module_debugid() const;
  void set_module_debugid(const std::string& value);
  void set_module_debugid(std::string&& value);
  void set_module_debugid(const char* value);
  void set_module_debugid(const char* value, size_t size);
  std::string* mutable_module_debugid();
  std::string* release_module_debugid();
  void set_allocated_module_debugid(std::string* module_debugid);

  // optional string module_debug_path = 9;
  bool has_module_debug_path() const;
  void clear_module_debug_path();
  const std::string& module_debug_path() const;
  void set_module_debug_path(const std::string& value);
  void set_module_debug_path(std::string&& value);
  void set_module_debug_path(const char* value);
  void set_module_debug_path(const char* value, size_t size);
  std::string* mutable_module_debug_path();
  std::string* release_module_debug_path();
  void set_allocated_module_debug_path(std::string* module_debug_path);

  // optional uint64 size_kb = 2;
  bool has_size_kb() const;
  void clear_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_kb() const;
  void set_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 private_dirty_kb = 3;
  bool has_private_dirty_kb() const;
  void clear_private_dirty_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 private_dirty_kb() const;
  void set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 swap_kb = 4;
  bool has_swap_kb() const;
  void clear_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 swap_kb() const;
  void set_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 start_address = 6;
  bool has_start_address() const;
  void clear_start_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_address() const;
  void set_start_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 module_timestamp = 7;
  bool has_module_timestamp() const;
  void clear_module_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 module_timestamp() const;
  void set_module_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 private_clean_resident_kb = 11;
  bool has_private_clean_resident_kb() const;
  void clear_private_clean_resident_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 private_clean_resident_kb() const;
  void set_private_clean_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 shared_dirty_resident_kb = 12;
  bool has_shared_dirty_resident_kb() const;
  void clear_shared_dirty_resident_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 shared_dirty_resident_kb() const;
  void set_shared_dirty_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 shared_clean_resident_kb = 13;
  bool has_shared_clean_resident_kb() const;
  void clear_shared_clean_resident_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 shared_clean_resident_kb() const;
  void set_shared_clean_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 locked_kb = 14;
  bool has_locked_kb() const;
  void clear_locked_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 locked_kb() const;
  void set_locked_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 proportional_resident_kb = 15;
  bool has_proportional_resident_kb() const;
  void clear_proportional_resident_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 proportional_resident_kb() const;
  void set_proportional_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 protection_flags = 10;
  bool has_protection_flags() const;
  void clear_protection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 protection_flags() const;
  void set_protection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmapsEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_debugid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_debug_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 private_dirty_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 swap_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 module_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 private_clean_resident_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shared_dirty_resident_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shared_clean_resident_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 locked_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proportional_resident_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protection_flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
};
// -------------------------------------------------------------------

class SmapsPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmapsPacket) */ {
 public:
  SmapsPacket();
  virtual ~SmapsPacket();

  SmapsPacket(const SmapsPacket& from);
  SmapsPacket(SmapsPacket&& from) noexcept
    : SmapsPacket() {
    *this = ::std::move(from);
  }

  inline SmapsPacket& operator=(const SmapsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmapsPacket& operator=(SmapsPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmapsPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmapsPacket* internal_default_instance() {
    return reinterpret_cast<const SmapsPacket*>(
               &_SmapsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SmapsPacket& a, SmapsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SmapsPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmapsPacket* New() const final {
    return CreateMaybeMessage<SmapsPacket>(nullptr);
  }

  SmapsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmapsPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmapsPacket& from);
  void MergeFrom(const SmapsPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmapsPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmapsPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .perfetto.protos.SmapsEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::perfetto::protos::SmapsEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >*
      mutable_entries();
  const ::perfetto::protos::SmapsEntry& entries(int index) const;
  ::perfetto::protos::SmapsEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >&
      entries() const;

  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmapsPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmapsEntry

// optional string path = 1;
inline bool SmapsEntry::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmapsEntry::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmapsEntry::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.path)
  return path_.GetNoArena();
}
inline void SmapsEntry::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SmapsEntry.path)
}
inline std::string* SmapsEntry::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsEntry.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmapsEntry::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SmapsEntry.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmapsEntry::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SmapsEntry.path)
}

// optional uint64 size_kb = 2;
inline bool SmapsEntry::has_size_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmapsEntry::clear_size_kb() {
  size_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.size_kb)
  return size_kb_;
}
inline void SmapsEntry::set_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.size_kb)
}

// optional uint64 private_dirty_kb = 3;
inline bool SmapsEntry::has_private_dirty_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmapsEntry::clear_private_dirty_kb() {
  private_dirty_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::private_dirty_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.private_dirty_kb)
  return private_dirty_kb_;
}
inline void SmapsEntry::set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  private_dirty_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.private_dirty_kb)
}

// optional uint64 swap_kb = 4;
inline bool SmapsEntry::has_swap_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SmapsEntry::clear_swap_kb() {
  swap_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::swap_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.swap_kb)
  return swap_kb_;
}
inline void SmapsEntry::set_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  swap_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.swap_kb)
}

// optional string file_name = 5;
inline bool SmapsEntry::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmapsEntry::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SmapsEntry::file_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.file_name)
  return file_name_.GetNoArena();
}
inline void SmapsEntry::set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.file_name)
}
inline void SmapsEntry::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SmapsEntry.file_name)
}
inline void SmapsEntry::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SmapsEntry.file_name)
}
inline void SmapsEntry::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SmapsEntry.file_name)
}
inline std::string* SmapsEntry::mutable_file_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsEntry.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmapsEntry::release_file_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SmapsEntry.file_name)
  if (!has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmapsEntry::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SmapsEntry.file_name)
}

// optional uint64 start_address = 6;
inline bool SmapsEntry::has_start_address() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SmapsEntry::clear_start_address() {
  start_address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::start_address() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.start_address)
  return start_address_;
}
inline void SmapsEntry::set_start_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  start_address_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.start_address)
}

// optional uint64 module_timestamp = 7;
inline bool SmapsEntry::has_module_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SmapsEntry::clear_module_timestamp() {
  module_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::module_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.module_timestamp)
  return module_timestamp_;
}
inline void SmapsEntry::set_module_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  module_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.module_timestamp)
}

// optional string module_debugid = 8;
inline bool SmapsEntry::has_module_debugid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmapsEntry::clear_module_debugid() {
  module_debugid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SmapsEntry::module_debugid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.module_debugid)
  return module_debugid_.GetNoArena();
}
inline void SmapsEntry::set_module_debugid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  module_debugid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.module_debugid)
}
inline void SmapsEntry::set_module_debugid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  module_debugid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SmapsEntry.module_debugid)
}
inline void SmapsEntry::set_module_debugid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  module_debugid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SmapsEntry.module_debugid)
}
inline void SmapsEntry::set_module_debugid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  module_debugid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SmapsEntry.module_debugid)
}
inline std::string* SmapsEntry::mutable_module_debugid() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsEntry.module_debugid)
  return module_debugid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmapsEntry::release_module_debugid() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SmapsEntry.module_debugid)
  if (!has_module_debugid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return module_debugid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmapsEntry::set_allocated_module_debugid(std::string* module_debugid) {
  if (module_debugid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  module_debugid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_debugid);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SmapsEntry.module_debugid)
}

// optional string module_debug_path = 9;
inline bool SmapsEntry::has_module_debug_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmapsEntry::clear_module_debug_path() {
  module_debug_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SmapsEntry::module_debug_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.module_debug_path)
  return module_debug_path_.GetNoArena();
}
inline void SmapsEntry::set_module_debug_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  module_debug_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.module_debug_path)
}
inline void SmapsEntry::set_module_debug_path(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  module_debug_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SmapsEntry.module_debug_path)
}
inline void SmapsEntry::set_module_debug_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  module_debug_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SmapsEntry.module_debug_path)
}
inline void SmapsEntry::set_module_debug_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  module_debug_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SmapsEntry.module_debug_path)
}
inline std::string* SmapsEntry::mutable_module_debug_path() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsEntry.module_debug_path)
  return module_debug_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmapsEntry::release_module_debug_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SmapsEntry.module_debug_path)
  if (!has_module_debug_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return module_debug_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmapsEntry::set_allocated_module_debug_path(std::string* module_debug_path) {
  if (module_debug_path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  module_debug_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_debug_path);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SmapsEntry.module_debug_path)
}

// optional uint32 protection_flags = 10;
inline bool SmapsEntry::has_protection_flags() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SmapsEntry::clear_protection_flags() {
  protection_flags_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmapsEntry::protection_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.protection_flags)
  return protection_flags_;
}
inline void SmapsEntry::set_protection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  protection_flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.protection_flags)
}

// optional uint64 private_clean_resident_kb = 11;
inline bool SmapsEntry::has_private_clean_resident_kb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SmapsEntry::clear_private_clean_resident_kb() {
  private_clean_resident_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::private_clean_resident_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.private_clean_resident_kb)
  return private_clean_resident_kb_;
}
inline void SmapsEntry::set_private_clean_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  private_clean_resident_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.private_clean_resident_kb)
}

// optional uint64 shared_dirty_resident_kb = 12;
inline bool SmapsEntry::has_shared_dirty_resident_kb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SmapsEntry::clear_shared_dirty_resident_kb() {
  shared_dirty_resident_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::shared_dirty_resident_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.shared_dirty_resident_kb)
  return shared_dirty_resident_kb_;
}
inline void SmapsEntry::set_shared_dirty_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  shared_dirty_resident_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.shared_dirty_resident_kb)
}

// optional uint64 shared_clean_resident_kb = 13;
inline bool SmapsEntry::has_shared_clean_resident_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SmapsEntry::clear_shared_clean_resident_kb() {
  shared_clean_resident_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::shared_clean_resident_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.shared_clean_resident_kb)
  return shared_clean_resident_kb_;
}
inline void SmapsEntry::set_shared_clean_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  shared_clean_resident_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.shared_clean_resident_kb)
}

// optional uint64 locked_kb = 14;
inline bool SmapsEntry::has_locked_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SmapsEntry::clear_locked_kb() {
  locked_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::locked_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.locked_kb)
  return locked_kb_;
}
inline void SmapsEntry::set_locked_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  locked_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.locked_kb)
}

// optional uint64 proportional_resident_kb = 15;
inline bool SmapsEntry::has_proportional_resident_kb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SmapsEntry::clear_proportional_resident_kb() {
  proportional_resident_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::proportional_resident_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.proportional_resident_kb)
  return proportional_resident_kb_;
}
inline void SmapsEntry::set_proportional_resident_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  proportional_resident_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.proportional_resident_kb)
}

// -------------------------------------------------------------------

// SmapsPacket

// optional uint32 pid = 1;
inline bool SmapsPacket::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmapsPacket::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmapsPacket::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsPacket.pid)
  return pid_;
}
inline void SmapsPacket::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsPacket.pid)
}

// repeated .perfetto.protos.SmapsEntry entries = 2;
inline int SmapsPacket::entries_size() const {
  return entries_.size();
}
inline void SmapsPacket::clear_entries() {
  entries_.Clear();
}
inline ::perfetto::protos::SmapsEntry* SmapsPacket::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsPacket.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >*
SmapsPacket::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SmapsPacket.entries)
  return &entries_;
}
inline const ::perfetto::protos::SmapsEntry& SmapsPacket::entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsPacket.entries)
  return entries_.Get(index);
}
inline ::perfetto::protos::SmapsEntry* SmapsPacket::add_entries() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SmapsPacket.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >&
SmapsPacket::entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SmapsPacket.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto
