#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/test_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TestEvent::TestEvent() = default;
TestEvent::~TestEvent() = default;
TestEvent::TestEvent(const TestEvent&) = default;
TestEvent& TestEvent::operator=(const TestEvent&) = default;
TestEvent::TestEvent(TestEvent&&) noexcept = default;
TestEvent& TestEvent::operator=(TestEvent&&) = default;

bool TestEvent::operator==(const TestEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && str_ == other.str_
   && seq_value_ == other.seq_value_
   && counter_ == other.counter_
   && is_last_ == other.is_last_
   && payload_ == other.payload_;
}

bool TestEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* str */:
        field.get(&str_);
        break;
      case 2 /* seq_value */:
        field.get(&seq_value_);
        break;
      case 3 /* counter */:
        field.get(&counter_);
        break;
      case 4 /* is_last */:
        field.get(&is_last_);
        break;
      case 5 /* payload */:
        (*payload_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TestEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TestEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TestEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: str
  if (_has_field_[1]) {
    msg->AppendString(1, str_);
  }

  // Field 2: seq_value
  if (_has_field_[2]) {
    msg->AppendVarInt(2, seq_value_);
  }

  // Field 3: counter
  if (_has_field_[3]) {
    msg->AppendVarInt(3, counter_);
  }

  // Field 4: is_last
  if (_has_field_[4]) {
    msg->AppendTinyVarInt(4, is_last_);
  }

  // Field 5: payload
  if (_has_field_[5]) {
    (*payload_).Serialize(msg->BeginNestedMessage<::protozero::Message>(5));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


TestEvent_TestPayload::TestEvent_TestPayload() = default;
TestEvent_TestPayload::~TestEvent_TestPayload() = default;
TestEvent_TestPayload::TestEvent_TestPayload(const TestEvent_TestPayload&) = default;
TestEvent_TestPayload& TestEvent_TestPayload::operator=(const TestEvent_TestPayload&) = default;
TestEvent_TestPayload::TestEvent_TestPayload(TestEvent_TestPayload&&) noexcept = default;
TestEvent_TestPayload& TestEvent_TestPayload::operator=(TestEvent_TestPayload&&) = default;

bool TestEvent_TestPayload::operator==(const TestEvent_TestPayload& other) const {
  return unknown_fields_ == other.unknown_fields_
   && str_ == other.str_
   && nested_ == other.nested_
   && remaining_nesting_depth_ == other.remaining_nesting_depth_;
}

int TestEvent_TestPayload::nested_size() const { return static_cast<int>(nested_.size()); }
void TestEvent_TestPayload::clear_nested() { nested_.clear(); }
TestEvent_TestPayload* TestEvent_TestPayload::add_nested() { nested_.emplace_back(); return &nested_.back(); }
bool TestEvent_TestPayload::ParseFromArray(const void* raw, size_t size) {
  str_.clear();
  nested_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* str */:
        str_.emplace_back();
        field.get(&str_.back());
        break;
      case 2 /* nested */:
        nested_.emplace_back();
        nested_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* remaining_nesting_depth */:
        field.get(&remaining_nesting_depth_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TestEvent_TestPayload::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TestEvent_TestPayload::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TestEvent_TestPayload::Serialize(::protozero::Message* msg) const {
  // Field 1: str
  for (auto& it : str_) {
    msg->AppendString(1, it);
  }

  // Field 2: nested
  for (auto& it : nested_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: remaining_nesting_depth
  if (_has_field_[3]) {
    msg->AppendVarInt(3, remaining_nesting_depth_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
