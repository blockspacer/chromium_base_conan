// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/gpu_counter_event.proto

#include "protos/perfetto/trace/gpu/gpu_counter_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto;
namespace perfetto {
namespace protos {
class GpuCounterEvent_GpuCounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterEvent_GpuCounter> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
  double double_value_;
} _GpuCounterEvent_GpuCounter_default_instance_;
class GpuCounterEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterEvent> _instance;
} _GpuCounterEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterEvent_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto}, {
      &scc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base,
      &scc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterEvent_GpuCounter_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterEvent_GpuCounter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterEvent_GpuCounter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void GpuCounterEvent_GpuCounter::InitAsDefaultInstance() {
}
class GpuCounterEvent_GpuCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterEvent_GpuCounter>()._has_bits_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GpuCounterEvent_GpuCounter::GpuCounterEvent_GpuCounter()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterEvent.GpuCounter)
}
GpuCounterEvent_GpuCounter::GpuCounterEvent_GpuCounter(const GpuCounterEvent_GpuCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  counter_id_ = from.counter_id_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterEvent.GpuCounter)
}

void GpuCounterEvent_GpuCounter::SharedCtor() {
  counter_id_ = 0u;
  clear_has_value();
}

GpuCounterEvent_GpuCounter::~GpuCounterEvent_GpuCounter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterEvent.GpuCounter)
  SharedDtor();
}

void GpuCounterEvent_GpuCounter::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void GpuCounterEvent_GpuCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterEvent_GpuCounter& GpuCounterEvent_GpuCounter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterEvent_GpuCounter_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterEvent_GpuCounter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void GpuCounterEvent_GpuCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counter_id_ = 0u;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterEvent_GpuCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterEvent_GpuCounter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 counter_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_counter_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterEvent.GpuCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterEvent.GpuCounter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterEvent_GpuCounter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->counter_id(), output);
  }

  switch (value_case()) {
    case kIntValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
      break;
    case kDoubleValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterEvent.GpuCounter)
}

size_t GpuCounterEvent_GpuCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 counter_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->counter_id());
  }

  switch (value_case()) {
    // optional int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // optional double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterEvent_GpuCounter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterEvent_GpuCounter*>(
      &from));
}

void GpuCounterEvent_GpuCounter::MergeFrom(const GpuCounterEvent_GpuCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_counter_id()) {
    set_counter_id(from.counter_id());
  }
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void GpuCounterEvent_GpuCounter::CopyFrom(const GpuCounterEvent_GpuCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterEvent_GpuCounter::IsInitialized() const {
  return true;
}

void GpuCounterEvent_GpuCounter::InternalSwap(GpuCounterEvent_GpuCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(counter_id_, other->counter_id_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GpuCounterEvent_GpuCounter::GetTypeName() const {
  return "perfetto.protos.GpuCounterEvent.GpuCounter";
}


// ===================================================================

void GpuCounterEvent::InitAsDefaultInstance() {
  ::perfetto::protos::_GpuCounterEvent_default_instance_._instance.get_mutable()->counter_descriptor_ = const_cast< ::perfetto::protos::GpuCounterDescriptor*>(
      ::perfetto::protos::GpuCounterDescriptor::internal_default_instance());
}
class GpuCounterEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterEvent>()._has_bits_);
  static const ::perfetto::protos::GpuCounterDescriptor& counter_descriptor(const GpuCounterEvent* msg);
  static void set_has_counter_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::GpuCounterDescriptor&
GpuCounterEvent::_Internal::counter_descriptor(const GpuCounterEvent* msg) {
  return *msg->counter_descriptor_;
}
void GpuCounterEvent::clear_counter_descriptor() {
  if (counter_descriptor_ != nullptr) counter_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GpuCounterEvent::GpuCounterEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterEvent)
}
GpuCounterEvent::GpuCounterEvent(const GpuCounterEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counters_(from.counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_counter_descriptor()) {
    counter_descriptor_ = new ::perfetto::protos::GpuCounterDescriptor(*from.counter_descriptor_);
  } else {
    counter_descriptor_ = nullptr;
  }
  gpu_id_ = from.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterEvent)
}

void GpuCounterEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto.base);
  ::memset(&counter_descriptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&counter_descriptor_)) + sizeof(gpu_id_));
}

GpuCounterEvent::~GpuCounterEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterEvent)
  SharedDtor();
}

void GpuCounterEvent::SharedDtor() {
  if (this != internal_default_instance()) delete counter_descriptor_;
}

void GpuCounterEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterEvent& GpuCounterEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterEvent_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(counter_descriptor_ != nullptr);
    counter_descriptor_->Clear();
  }
  gpu_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_counter_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_counter_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_gpu_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::counter_descriptor(this), output);
  }

  // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->counters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->counters(static_cast<int>(i)),
      output);
  }

  // optional int32 gpu_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->gpu_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterEvent)
}

size_t GpuCounterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->counters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->counters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *counter_descriptor_);
    }

    // optional int32 gpu_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterEvent*>(
      &from));
}

void GpuCounterEvent::MergeFrom(const GpuCounterEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counters_.MergeFrom(from.counters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_counter_descriptor()->::perfetto::protos::GpuCounterDescriptor::MergeFrom(from.counter_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      gpu_id_ = from.gpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterEvent::CopyFrom(const GpuCounterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterEvent::IsInitialized() const {
  return true;
}

void GpuCounterEvent::InternalSwap(GpuCounterEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&counters_)->InternalSwap(CastToBase(&other->counters_));
  swap(counter_descriptor_, other->counter_descriptor_);
  swap(gpu_id_, other->gpu_id_);
}

std::string GpuCounterEvent::GetTypeName() const {
  return "perfetto.protos.GpuCounterEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterEvent_GpuCounter* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent_GpuCounter >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterEvent_GpuCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterEvent* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
