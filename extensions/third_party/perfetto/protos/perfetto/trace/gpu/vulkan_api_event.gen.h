// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_VULKAN_API_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_VULKAN_API_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class VulkanApiEvent;
class VulkanApiEvent_VkQueueSubmit;
class VulkanApiEvent_VkDebugUtilsObjectName;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT VulkanApiEvent : public ::protozero::CppMessageObj {
 public:
  using VkDebugUtilsObjectName = VulkanApiEvent_VkDebugUtilsObjectName;
  using VkQueueSubmit = VulkanApiEvent_VkQueueSubmit;
  enum FieldNumbers {
    kVkDebugUtilsObjectNameFieldNumber = 1,
    kVkQueueSubmitFieldNumber = 2,
  };

  VulkanApiEvent();
  ~VulkanApiEvent() override;
  VulkanApiEvent(VulkanApiEvent&&) noexcept;
  VulkanApiEvent& operator=(VulkanApiEvent&&);
  VulkanApiEvent(const VulkanApiEvent&);
  VulkanApiEvent& operator=(const VulkanApiEvent&);
  bool operator==(const VulkanApiEvent&) const;
  bool operator!=(const VulkanApiEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_vk_debug_utils_object_name() const { return _has_field_[1]; }
  const VulkanApiEvent_VkDebugUtilsObjectName& vk_debug_utils_object_name() const { return *vk_debug_utils_object_name_; }
  VulkanApiEvent_VkDebugUtilsObjectName* mutable_vk_debug_utils_object_name() { _has_field_.set(1); return vk_debug_utils_object_name_.get(); }

  bool has_vk_queue_submit() const { return _has_field_[2]; }
  const VulkanApiEvent_VkQueueSubmit& vk_queue_submit() const { return *vk_queue_submit_; }
  VulkanApiEvent_VkQueueSubmit* mutable_vk_queue_submit() { _has_field_.set(2); return vk_queue_submit_.get(); }

 private:
  ::protozero::CopyablePtr<VulkanApiEvent_VkDebugUtilsObjectName> vk_debug_utils_object_name_;
  ::protozero::CopyablePtr<VulkanApiEvent_VkQueueSubmit> vk_queue_submit_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT VulkanApiEvent_VkQueueSubmit : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDurationNsFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kVkQueueFieldNumber = 4,
    kVkCommandBuffersFieldNumber = 5,
    kSubmissionIdFieldNumber = 6,
  };

  VulkanApiEvent_VkQueueSubmit();
  ~VulkanApiEvent_VkQueueSubmit() override;
  VulkanApiEvent_VkQueueSubmit(VulkanApiEvent_VkQueueSubmit&&) noexcept;
  VulkanApiEvent_VkQueueSubmit& operator=(VulkanApiEvent_VkQueueSubmit&&);
  VulkanApiEvent_VkQueueSubmit(const VulkanApiEvent_VkQueueSubmit&);
  VulkanApiEvent_VkQueueSubmit& operator=(const VulkanApiEvent_VkQueueSubmit&);
  bool operator==(const VulkanApiEvent_VkQueueSubmit&) const;
  bool operator!=(const VulkanApiEvent_VkQueueSubmit& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_duration_ns() const { return _has_field_[1]; }
  uint64_t duration_ns() const { return duration_ns_; }
  void set_duration_ns(uint64_t value) { duration_ns_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  uint32_t pid() const { return pid_; }
  void set_pid(uint32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_tid() const { return _has_field_[3]; }
  uint32_t tid() const { return tid_; }
  void set_tid(uint32_t value) { tid_ = value; _has_field_.set(3); }

  bool has_vk_queue() const { return _has_field_[4]; }
  uint64_t vk_queue() const { return vk_queue_; }
  void set_vk_queue(uint64_t value) { vk_queue_ = value; _has_field_.set(4); }

  const std::vector<uint64_t>& vk_command_buffers() const { return vk_command_buffers_; }
  std::vector<uint64_t>* mutable_vk_command_buffers() { return &vk_command_buffers_; }
  int vk_command_buffers_size() const { return static_cast<int>(vk_command_buffers_.size()); }
  void clear_vk_command_buffers() { vk_command_buffers_.clear(); }
  void add_vk_command_buffers(uint64_t value) { vk_command_buffers_.emplace_back(value); }
  uint64_t* add_vk_command_buffers() { vk_command_buffers_.emplace_back(); return &vk_command_buffers_.back(); }

  bool has_submission_id() const { return _has_field_[6]; }
  uint32_t submission_id() const { return submission_id_; }
  void set_submission_id(uint32_t value) { submission_id_ = value; _has_field_.set(6); }

 private:
  uint64_t duration_ns_{};
  uint32_t pid_{};
  uint32_t tid_{};
  uint64_t vk_queue_{};
  std::vector<uint64_t> vk_command_buffers_;
  uint32_t submission_id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT VulkanApiEvent_VkDebugUtilsObjectName : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kVkDeviceFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
    kObjectFieldNumber = 4,
    kObjectNameFieldNumber = 5,
  };

  VulkanApiEvent_VkDebugUtilsObjectName();
  ~VulkanApiEvent_VkDebugUtilsObjectName() override;
  VulkanApiEvent_VkDebugUtilsObjectName(VulkanApiEvent_VkDebugUtilsObjectName&&) noexcept;
  VulkanApiEvent_VkDebugUtilsObjectName& operator=(VulkanApiEvent_VkDebugUtilsObjectName&&);
  VulkanApiEvent_VkDebugUtilsObjectName(const VulkanApiEvent_VkDebugUtilsObjectName&);
  VulkanApiEvent_VkDebugUtilsObjectName& operator=(const VulkanApiEvent_VkDebugUtilsObjectName&);
  bool operator==(const VulkanApiEvent_VkDebugUtilsObjectName&) const;
  bool operator!=(const VulkanApiEvent_VkDebugUtilsObjectName& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  uint32_t pid() const { return pid_; }
  void set_pid(uint32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_vk_device() const { return _has_field_[2]; }
  uint64_t vk_device() const { return vk_device_; }
  void set_vk_device(uint64_t value) { vk_device_ = value; _has_field_.set(2); }

  bool has_object_type() const { return _has_field_[3]; }
  int32_t object_type() const { return object_type_; }
  void set_object_type(int32_t value) { object_type_ = value; _has_field_.set(3); }

  bool has_object() const { return _has_field_[4]; }
  uint64_t object() const { return object_; }
  void set_object(uint64_t value) { object_ = value; _has_field_.set(4); }

  bool has_object_name() const { return _has_field_[5]; }
  const std::string& object_name() const { return object_name_; }
  void set_object_name(const std::string& value) { object_name_ = value; _has_field_.set(5); }

 private:
  uint32_t pid_{};
  uint64_t vk_device_{};
  int32_t object_type_{};
  uint64_t object_{};
  std::string object_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_VULKAN_API_EVENT_PROTO_CPP_H_
