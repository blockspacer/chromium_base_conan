#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/gpu/gpu_render_stage_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

InternedGpuRenderStageSpecification::InternedGpuRenderStageSpecification() = default;
InternedGpuRenderStageSpecification::~InternedGpuRenderStageSpecification() = default;
InternedGpuRenderStageSpecification::InternedGpuRenderStageSpecification(const InternedGpuRenderStageSpecification&) = default;
InternedGpuRenderStageSpecification& InternedGpuRenderStageSpecification::operator=(const InternedGpuRenderStageSpecification&) = default;
InternedGpuRenderStageSpecification::InternedGpuRenderStageSpecification(InternedGpuRenderStageSpecification&&) noexcept = default;
InternedGpuRenderStageSpecification& InternedGpuRenderStageSpecification::operator=(InternedGpuRenderStageSpecification&&) = default;

bool InternedGpuRenderStageSpecification::operator==(const InternedGpuRenderStageSpecification& other) const {
  return unknown_fields_ == other.unknown_fields_
   && iid_ == other.iid_
   && name_ == other.name_
   && description_ == other.description_
   && category_ == other.category_;
}

bool InternedGpuRenderStageSpecification::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* iid */:
        field.get(&iid_);
        break;
      case 2 /* name */:
        field.get(&name_);
        break;
      case 3 /* description */:
        field.get(&description_);
        break;
      case 4 /* category */:
        field.get(&category_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string InternedGpuRenderStageSpecification::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> InternedGpuRenderStageSpecification::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void InternedGpuRenderStageSpecification::Serialize(::protozero::Message* msg) const {
  // Field 1: iid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, iid_);
  }

  // Field 2: name
  if (_has_field_[2]) {
    msg->AppendString(2, name_);
  }

  // Field 3: description
  if (_has_field_[3]) {
    msg->AppendString(3, description_);
  }

  // Field 4: category
  if (_has_field_[4]) {
    msg->AppendVarInt(4, category_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


InternedGraphicsContext::InternedGraphicsContext() = default;
InternedGraphicsContext::~InternedGraphicsContext() = default;
InternedGraphicsContext::InternedGraphicsContext(const InternedGraphicsContext&) = default;
InternedGraphicsContext& InternedGraphicsContext::operator=(const InternedGraphicsContext&) = default;
InternedGraphicsContext::InternedGraphicsContext(InternedGraphicsContext&&) noexcept = default;
InternedGraphicsContext& InternedGraphicsContext::operator=(InternedGraphicsContext&&) = default;

bool InternedGraphicsContext::operator==(const InternedGraphicsContext& other) const {
  return unknown_fields_ == other.unknown_fields_
   && iid_ == other.iid_
   && pid_ == other.pid_
   && api_ == other.api_;
}

bool InternedGraphicsContext::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* iid */:
        field.get(&iid_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* api */:
        field.get(&api_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string InternedGraphicsContext::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> InternedGraphicsContext::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void InternedGraphicsContext::Serialize(::protozero::Message* msg) const {
  // Field 1: iid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, iid_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  // Field 3: api
  if (_has_field_[3]) {
    msg->AppendVarInt(3, api_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GpuRenderStageEvent::GpuRenderStageEvent() = default;
GpuRenderStageEvent::~GpuRenderStageEvent() = default;
GpuRenderStageEvent::GpuRenderStageEvent(const GpuRenderStageEvent&) = default;
GpuRenderStageEvent& GpuRenderStageEvent::operator=(const GpuRenderStageEvent&) = default;
GpuRenderStageEvent::GpuRenderStageEvent(GpuRenderStageEvent&&) noexcept = default;
GpuRenderStageEvent& GpuRenderStageEvent::operator=(GpuRenderStageEvent&&) = default;

bool GpuRenderStageEvent::operator==(const GpuRenderStageEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && event_id_ == other.event_id_
   && duration_ == other.duration_
   && hw_queue_iid_ == other.hw_queue_iid_
   && stage_iid_ == other.stage_iid_
   && gpu_id_ == other.gpu_id_
   && context_ == other.context_
   && render_target_handle_ == other.render_target_handle_
   && submission_id_ == other.submission_id_
   && extra_data_ == other.extra_data_
   && render_pass_handle_ == other.render_pass_handle_
   && render_subpass_index_mask_ == other.render_subpass_index_mask_
   && command_buffer_handle_ == other.command_buffer_handle_
   && specifications_ == other.specifications_
   && hw_queue_id_ == other.hw_queue_id_
   && stage_id_ == other.stage_id_;
}

int GpuRenderStageEvent::extra_data_size() const { return static_cast<int>(extra_data_.size()); }
void GpuRenderStageEvent::clear_extra_data() { extra_data_.clear(); }
GpuRenderStageEvent_ExtraData* GpuRenderStageEvent::add_extra_data() { extra_data_.emplace_back(); return &extra_data_.back(); }
bool GpuRenderStageEvent::ParseFromArray(const void* raw, size_t size) {
  extra_data_.clear();
  render_subpass_index_mask_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* event_id */:
        field.get(&event_id_);
        break;
      case 2 /* duration */:
        field.get(&duration_);
        break;
      case 13 /* hw_queue_iid */:
        field.get(&hw_queue_iid_);
        break;
      case 14 /* stage_iid */:
        field.get(&stage_iid_);
        break;
      case 11 /* gpu_id */:
        field.get(&gpu_id_);
        break;
      case 5 /* context */:
        field.get(&context_);
        break;
      case 8 /* render_target_handle */:
        field.get(&render_target_handle_);
        break;
      case 10 /* submission_id */:
        field.get(&submission_id_);
        break;
      case 6 /* extra_data */:
        extra_data_.emplace_back();
        extra_data_.back().ParseFromArray(field.data(), field.size());
        break;
      case 9 /* render_pass_handle */:
        field.get(&render_pass_handle_);
        break;
      case 15 /* render_subpass_index_mask */:
        render_subpass_index_mask_.emplace_back();
        field.get(&render_subpass_index_mask_.back());
        break;
      case 12 /* command_buffer_handle */:
        field.get(&command_buffer_handle_);
        break;
      case 7 /* specifications */:
        (*specifications_).ParseFromArray(field.data(), field.size());
        break;
      case 3 /* hw_queue_id */:
        field.get(&hw_queue_id_);
        break;
      case 4 /* stage_id */:
        field.get(&stage_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuRenderStageEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuRenderStageEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuRenderStageEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: event_id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, event_id_);
  }

  // Field 2: duration
  if (_has_field_[2]) {
    msg->AppendVarInt(2, duration_);
  }

  // Field 13: hw_queue_iid
  if (_has_field_[13]) {
    msg->AppendVarInt(13, hw_queue_iid_);
  }

  // Field 14: stage_iid
  if (_has_field_[14]) {
    msg->AppendVarInt(14, stage_iid_);
  }

  // Field 11: gpu_id
  if (_has_field_[11]) {
    msg->AppendVarInt(11, gpu_id_);
  }

  // Field 5: context
  if (_has_field_[5]) {
    msg->AppendVarInt(5, context_);
  }

  // Field 8: render_target_handle
  if (_has_field_[8]) {
    msg->AppendVarInt(8, render_target_handle_);
  }

  // Field 10: submission_id
  if (_has_field_[10]) {
    msg->AppendVarInt(10, submission_id_);
  }

  // Field 6: extra_data
  for (auto& it : extra_data_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 9: render_pass_handle
  if (_has_field_[9]) {
    msg->AppendVarInt(9, render_pass_handle_);
  }

  // Field 15: render_subpass_index_mask
  for (auto& it : render_subpass_index_mask_) {
    msg->AppendVarInt(15, it);
  }

  // Field 12: command_buffer_handle
  if (_has_field_[12]) {
    msg->AppendVarInt(12, command_buffer_handle_);
  }

  // Field 7: specifications
  if (_has_field_[7]) {
    (*specifications_).Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 3: hw_queue_id
  if (_has_field_[3]) {
    msg->AppendVarInt(3, hw_queue_id_);
  }

  // Field 4: stage_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, stage_id_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GpuRenderStageEvent_Specifications::GpuRenderStageEvent_Specifications() = default;
GpuRenderStageEvent_Specifications::~GpuRenderStageEvent_Specifications() = default;
GpuRenderStageEvent_Specifications::GpuRenderStageEvent_Specifications(const GpuRenderStageEvent_Specifications&) = default;
GpuRenderStageEvent_Specifications& GpuRenderStageEvent_Specifications::operator=(const GpuRenderStageEvent_Specifications&) = default;
GpuRenderStageEvent_Specifications::GpuRenderStageEvent_Specifications(GpuRenderStageEvent_Specifications&&) noexcept = default;
GpuRenderStageEvent_Specifications& GpuRenderStageEvent_Specifications::operator=(GpuRenderStageEvent_Specifications&&) = default;

bool GpuRenderStageEvent_Specifications::operator==(const GpuRenderStageEvent_Specifications& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_spec_ == other.context_spec_
   && hw_queue_ == other.hw_queue_
   && stage_ == other.stage_;
}

int GpuRenderStageEvent_Specifications::hw_queue_size() const { return static_cast<int>(hw_queue_.size()); }
void GpuRenderStageEvent_Specifications::clear_hw_queue() { hw_queue_.clear(); }
GpuRenderStageEvent_Specifications_Description* GpuRenderStageEvent_Specifications::add_hw_queue() { hw_queue_.emplace_back(); return &hw_queue_.back(); }
int GpuRenderStageEvent_Specifications::stage_size() const { return static_cast<int>(stage_.size()); }
void GpuRenderStageEvent_Specifications::clear_stage() { stage_.clear(); }
GpuRenderStageEvent_Specifications_Description* GpuRenderStageEvent_Specifications::add_stage() { stage_.emplace_back(); return &stage_.back(); }
bool GpuRenderStageEvent_Specifications::ParseFromArray(const void* raw, size_t size) {
  hw_queue_.clear();
  stage_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context_spec */:
        (*context_spec_).ParseFromArray(field.data(), field.size());
        break;
      case 2 /* hw_queue */:
        hw_queue_.emplace_back();
        hw_queue_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* stage */:
        stage_.emplace_back();
        stage_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuRenderStageEvent_Specifications::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuRenderStageEvent_Specifications::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuRenderStageEvent_Specifications::Serialize(::protozero::Message* msg) const {
  // Field 1: context_spec
  if (_has_field_[1]) {
    (*context_spec_).Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: hw_queue
  for (auto& it : hw_queue_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: stage
  for (auto& it : stage_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GpuRenderStageEvent_Specifications_Description::GpuRenderStageEvent_Specifications_Description() = default;
GpuRenderStageEvent_Specifications_Description::~GpuRenderStageEvent_Specifications_Description() = default;
GpuRenderStageEvent_Specifications_Description::GpuRenderStageEvent_Specifications_Description(const GpuRenderStageEvent_Specifications_Description&) = default;
GpuRenderStageEvent_Specifications_Description& GpuRenderStageEvent_Specifications_Description::operator=(const GpuRenderStageEvent_Specifications_Description&) = default;
GpuRenderStageEvent_Specifications_Description::GpuRenderStageEvent_Specifications_Description(GpuRenderStageEvent_Specifications_Description&&) noexcept = default;
GpuRenderStageEvent_Specifications_Description& GpuRenderStageEvent_Specifications_Description::operator=(GpuRenderStageEvent_Specifications_Description&&) = default;

bool GpuRenderStageEvent_Specifications_Description::operator==(const GpuRenderStageEvent_Specifications_Description& other) const {
  return unknown_fields_ == other.unknown_fields_
   && name_ == other.name_
   && description_ == other.description_;
}

bool GpuRenderStageEvent_Specifications_Description::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        field.get(&name_);
        break;
      case 2 /* description */:
        field.get(&description_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuRenderStageEvent_Specifications_Description::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuRenderStageEvent_Specifications_Description::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuRenderStageEvent_Specifications_Description::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    msg->AppendString(1, name_);
  }

  // Field 2: description
  if (_has_field_[2]) {
    msg->AppendString(2, description_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GpuRenderStageEvent_Specifications_ContextSpec::GpuRenderStageEvent_Specifications_ContextSpec() = default;
GpuRenderStageEvent_Specifications_ContextSpec::~GpuRenderStageEvent_Specifications_ContextSpec() = default;
GpuRenderStageEvent_Specifications_ContextSpec::GpuRenderStageEvent_Specifications_ContextSpec(const GpuRenderStageEvent_Specifications_ContextSpec&) = default;
GpuRenderStageEvent_Specifications_ContextSpec& GpuRenderStageEvent_Specifications_ContextSpec::operator=(const GpuRenderStageEvent_Specifications_ContextSpec&) = default;
GpuRenderStageEvent_Specifications_ContextSpec::GpuRenderStageEvent_Specifications_ContextSpec(GpuRenderStageEvent_Specifications_ContextSpec&&) noexcept = default;
GpuRenderStageEvent_Specifications_ContextSpec& GpuRenderStageEvent_Specifications_ContextSpec::operator=(GpuRenderStageEvent_Specifications_ContextSpec&&) = default;

bool GpuRenderStageEvent_Specifications_ContextSpec::operator==(const GpuRenderStageEvent_Specifications_ContextSpec& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_ == other.context_
   && pid_ == other.pid_;
}

bool GpuRenderStageEvent_Specifications_ContextSpec::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context */:
        field.get(&context_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuRenderStageEvent_Specifications_ContextSpec::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuRenderStageEvent_Specifications_ContextSpec::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuRenderStageEvent_Specifications_ContextSpec::Serialize(::protozero::Message* msg) const {
  // Field 1: context
  if (_has_field_[1]) {
    msg->AppendVarInt(1, context_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GpuRenderStageEvent_ExtraData::GpuRenderStageEvent_ExtraData() = default;
GpuRenderStageEvent_ExtraData::~GpuRenderStageEvent_ExtraData() = default;
GpuRenderStageEvent_ExtraData::GpuRenderStageEvent_ExtraData(const GpuRenderStageEvent_ExtraData&) = default;
GpuRenderStageEvent_ExtraData& GpuRenderStageEvent_ExtraData::operator=(const GpuRenderStageEvent_ExtraData&) = default;
GpuRenderStageEvent_ExtraData::GpuRenderStageEvent_ExtraData(GpuRenderStageEvent_ExtraData&&) noexcept = default;
GpuRenderStageEvent_ExtraData& GpuRenderStageEvent_ExtraData::operator=(GpuRenderStageEvent_ExtraData&&) = default;

bool GpuRenderStageEvent_ExtraData::operator==(const GpuRenderStageEvent_ExtraData& other) const {
  return unknown_fields_ == other.unknown_fields_
   && name_ == other.name_
   && value_ == other.value_;
}

bool GpuRenderStageEvent_ExtraData::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        field.get(&name_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuRenderStageEvent_ExtraData::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuRenderStageEvent_ExtraData::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuRenderStageEvent_ExtraData::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    msg->AppendString(1, name_);
  }

  // Field 2: value
  if (_has_field_[2]) {
    msg->AppendString(2, value_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
