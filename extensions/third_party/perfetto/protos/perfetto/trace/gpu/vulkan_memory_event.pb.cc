// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_memory_event.proto

#include "protos/perfetto/trace/gpu/vulkan_memory_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto;
namespace perfetto {
namespace protos {
class VulkanMemoryEventAnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VulkanMemoryEventAnnotation> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
  double double_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 string_iid_;
} _VulkanMemoryEventAnnotation_default_instance_;
class VulkanMemoryEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VulkanMemoryEvent> _instance;
} _VulkanMemoryEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_VulkanMemoryEvent_default_instance_;
    new (ptr) ::perfetto::protos::VulkanMemoryEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::VulkanMemoryEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto}, {
      &scc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_VulkanMemoryEventAnnotation_default_instance_;
    new (ptr) ::perfetto::protos::VulkanMemoryEventAnnotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::VulkanMemoryEventAnnotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {
bool VulkanMemoryEvent_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_Source_strings[6] = {};

static const char VulkanMemoryEvent_Source_names[] =
  "SOURCE_BUFFER"
  "SOURCE_DEVICE"
  "SOURCE_DEVICE_MEMORY"
  "SOURCE_DRIVER"
  "SOURCE_IMAGE"
  "SOURCE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_Source_entries[] = {
  { {VulkanMemoryEvent_Source_names + 0, 13}, 4 },
  { {VulkanMemoryEvent_Source_names + 13, 13}, 2 },
  { {VulkanMemoryEvent_Source_names + 26, 20}, 3 },
  { {VulkanMemoryEvent_Source_names + 46, 13}, 1 },
  { {VulkanMemoryEvent_Source_names + 59, 12}, 5 },
  { {VulkanMemoryEvent_Source_names + 71, 18}, 0 },
};

static const int VulkanMemoryEvent_Source_entries_by_number[] = {
  5, // 0 -> SOURCE_UNSPECIFIED
  3, // 1 -> SOURCE_DRIVER
  1, // 2 -> SOURCE_DEVICE
  2, // 3 -> SOURCE_DEVICE_MEMORY
  0, // 4 -> SOURCE_BUFFER
  4, // 5 -> SOURCE_IMAGE
};

const std::string& VulkanMemoryEvent_Source_Name(
    VulkanMemoryEvent_Source value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_Source_entries,
          VulkanMemoryEvent_Source_entries_by_number,
          6, VulkanMemoryEvent_Source_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_Source_entries,
      VulkanMemoryEvent_Source_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_Source_strings[idx].get();
}
bool VulkanMemoryEvent_Source_Parse(
    const std::string& name, VulkanMemoryEvent_Source* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_Source_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_Source>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_UNSPECIFIED;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DRIVER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE_MEMORY;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_BUFFER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_IMAGE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MIN;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MAX;
constexpr int VulkanMemoryEvent::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VulkanMemoryEvent_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_Operation_strings[6] = {};

static const char VulkanMemoryEvent_Operation_names[] =
  "OP_ANNOTATIONS"
  "OP_BIND"
  "OP_CREATE"
  "OP_DESTROY"
  "OP_DESTROY_BOUND"
  "OP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_Operation_entries[] = {
  { {VulkanMemoryEvent_Operation_names + 0, 14}, 5 },
  { {VulkanMemoryEvent_Operation_names + 14, 7}, 3 },
  { {VulkanMemoryEvent_Operation_names + 21, 9}, 1 },
  { {VulkanMemoryEvent_Operation_names + 30, 10}, 2 },
  { {VulkanMemoryEvent_Operation_names + 40, 16}, 4 },
  { {VulkanMemoryEvent_Operation_names + 56, 14}, 0 },
};

static const int VulkanMemoryEvent_Operation_entries_by_number[] = {
  5, // 0 -> OP_UNSPECIFIED
  2, // 1 -> OP_CREATE
  3, // 2 -> OP_DESTROY
  1, // 3 -> OP_BIND
  4, // 4 -> OP_DESTROY_BOUND
  0, // 5 -> OP_ANNOTATIONS
};

const std::string& VulkanMemoryEvent_Operation_Name(
    VulkanMemoryEvent_Operation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_Operation_entries,
          VulkanMemoryEvent_Operation_entries_by_number,
          6, VulkanMemoryEvent_Operation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_Operation_entries,
      VulkanMemoryEvent_Operation_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_Operation_strings[idx].get();
}
bool VulkanMemoryEvent_Operation_Parse(
    const std::string& name, VulkanMemoryEvent_Operation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_Operation_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_Operation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_UNSPECIFIED;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_CREATE;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_BIND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY_BOUND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_ANNOTATIONS;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MIN;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MAX;
constexpr int VulkanMemoryEvent::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VulkanMemoryEvent_AllocationScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_AllocationScope_strings[6] = {};

static const char VulkanMemoryEvent_AllocationScope_names[] =
  "SCOPE_CACHE"
  "SCOPE_COMMAND"
  "SCOPE_DEVICE"
  "SCOPE_INSTANCE"
  "SCOPE_OBJECT"
  "SCOPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_AllocationScope_entries[] = {
  { {VulkanMemoryEvent_AllocationScope_names + 0, 11}, 3 },
  { {VulkanMemoryEvent_AllocationScope_names + 11, 13}, 1 },
  { {VulkanMemoryEvent_AllocationScope_names + 24, 12}, 4 },
  { {VulkanMemoryEvent_AllocationScope_names + 36, 14}, 5 },
  { {VulkanMemoryEvent_AllocationScope_names + 50, 12}, 2 },
  { {VulkanMemoryEvent_AllocationScope_names + 62, 17}, 0 },
};

static const int VulkanMemoryEvent_AllocationScope_entries_by_number[] = {
  5, // 0 -> SCOPE_UNSPECIFIED
  1, // 1 -> SCOPE_COMMAND
  4, // 2 -> SCOPE_OBJECT
  0, // 3 -> SCOPE_CACHE
  2, // 4 -> SCOPE_DEVICE
  3, // 5 -> SCOPE_INSTANCE
};

const std::string& VulkanMemoryEvent_AllocationScope_Name(
    VulkanMemoryEvent_AllocationScope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_AllocationScope_entries,
          VulkanMemoryEvent_AllocationScope_entries_by_number,
          6, VulkanMemoryEvent_AllocationScope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_AllocationScope_entries,
      VulkanMemoryEvent_AllocationScope_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_AllocationScope_strings[idx].get();
}
bool VulkanMemoryEvent_AllocationScope_Parse(
    const std::string& name, VulkanMemoryEvent_AllocationScope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_AllocationScope_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_AllocationScope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_UNSPECIFIED;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_COMMAND;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_OBJECT;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_CACHE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_DEVICE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_INSTANCE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MIN;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MAX;
constexpr int VulkanMemoryEvent::AllocationScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VulkanMemoryEventAnnotation::InitAsDefaultInstance() {
}
class VulkanMemoryEventAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEventAnnotation>()._has_bits_);
  static void set_has_key_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}
VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(const VulkanMemoryEventAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_iid_ = from.key_iid_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringIid: {
      set_string_iid(from.string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}

void VulkanMemoryEventAnnotation::SharedCtor() {
  key_iid_ = PROTOBUF_ULONGLONG(0);
  clear_has_value();
}

VulkanMemoryEventAnnotation::~VulkanMemoryEventAnnotation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEventAnnotation)
  SharedDtor();
}

void VulkanMemoryEventAnnotation::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void VulkanMemoryEventAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VulkanMemoryEventAnnotation& VulkanMemoryEventAnnotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VulkanMemoryEventAnnotation_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto.base);
  return *internal_default_instance();
}


void VulkanMemoryEventAnnotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringIid: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void VulkanMemoryEventAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_iid_ = PROTOBUF_ULONGLONG(0);
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VulkanMemoryEventAnnotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 key_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key_iid(&has_bits);
          key_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 string_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_string_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VulkanMemoryEventAnnotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.VulkanMemoryEventAnnotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key_iid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_key_iid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 string_iid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.string_iid_)));
          set_has_string_iid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.VulkanMemoryEventAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.VulkanMemoryEventAnnotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VulkanMemoryEventAnnotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 key_iid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->key_iid(), output);
  }

  switch (value_case()) {
    case kIntValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
      break;
    case kDoubleValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
      break;
    case kStringIid:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->string_iid(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.VulkanMemoryEventAnnotation)
}

size_t VulkanMemoryEventAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEventAnnotation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 key_iid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->key_iid());
  }

  switch (value_case()) {
    // optional int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // optional double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional uint64 string_iid = 4;
    case kStringIid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanMemoryEventAnnotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VulkanMemoryEventAnnotation*>(
      &from));
}

void VulkanMemoryEventAnnotation::MergeFrom(const VulkanMemoryEventAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_iid()) {
    set_key_iid(from.key_iid());
  }
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringIid: {
      set_string_iid(from.string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void VulkanMemoryEventAnnotation::CopyFrom(const VulkanMemoryEventAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEventAnnotation::IsInitialized() const {
  return true;
}

void VulkanMemoryEventAnnotation::InternalSwap(VulkanMemoryEventAnnotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_iid_, other->key_iid_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string VulkanMemoryEventAnnotation::GetTypeName() const {
  return "perfetto.protos.VulkanMemoryEventAnnotation";
}


// ===================================================================

void VulkanMemoryEvent::InitAsDefaultInstance() {
}
class VulkanMemoryEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEvent>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memory_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_memory_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_caller_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_allocation_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_memory_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_object_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

VulkanMemoryEvent::VulkanMemoryEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.VulkanMemoryEvent)
}
VulkanMemoryEvent::VulkanMemoryEvent(const VulkanMemoryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_handle_) -
    reinterpret_cast<char*>(&source_)) + sizeof(object_handle_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEvent)
}

void VulkanMemoryEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto.base);
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_handle_) -
      reinterpret_cast<char*>(&source_)) + sizeof(object_handle_));
}

VulkanMemoryEvent::~VulkanMemoryEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEvent)
  SharedDtor();
}

void VulkanMemoryEvent::SharedDtor() {
}

void VulkanMemoryEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VulkanMemoryEvent& VulkanMemoryEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VulkanMemoryEvent_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto.base);
  return *internal_default_instance();
}


void VulkanMemoryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caller_iid_) -
        reinterpret_cast<char*>(&source_)) + sizeof(caller_iid_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&object_handle_) -
        reinterpret_cast<char*>(&device_)) + sizeof(object_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VulkanMemoryEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Source_IsValid(val))) {
            set_source(static_cast<::perfetto::protos::VulkanMemoryEvent_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Operation_IsValid(val))) {
            set_operation(static_cast<::perfetto::protos::VulkanMemoryEvent_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 memory_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_memory_address(&has_bits);
          memory_address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_memory_size(&has_bits);
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 caller_iid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_caller_iid(&has_bits);
          caller_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_AllocationScope_IsValid(val))) {
            set_allocation_scope(static_cast<::perfetto::protos::VulkanMemoryEvent_AllocationScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional fixed64 device = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 device_memory = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_device_memory(&has_bits);
          device_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 memory_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_memory_type(&has_bits);
          memory_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_heap(&has_bits);
          heap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 object_handle = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_object_handle(&has_bits);
          object_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VulkanMemoryEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.VulkanMemoryEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::VulkanMemoryEvent_Source_IsValid(value)) {
            set_source(static_cast< ::perfetto::protos::VulkanMemoryEvent_Source >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::VulkanMemoryEvent_Operation_IsValid(value)) {
            set_operation(static_cast< ::perfetto::protos::VulkanMemoryEvent_Operation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 memory_address = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_memory_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &memory_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 memory_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_memory_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 caller_iid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_caller_iid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caller_iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::VulkanMemoryEvent_AllocationScope_IsValid(value)) {
            set_allocation_scope(static_cast< ::perfetto::protos::VulkanMemoryEvent_AllocationScope >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 device = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {
          _Internal::set_has_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 device_memory = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {
          _Internal::set_has_device_memory(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 memory_type = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_memory_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heap = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_heap(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 object_handle = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {
          _Internal::set_has_object_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.VulkanMemoryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.VulkanMemoryEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VulkanMemoryEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.VulkanMemoryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional uint32 pid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->pid(), output);
  }

  // optional fixed64 memory_address = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(5, this->memory_address(), output);
  }

  // optional uint64 memory_size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->memory_size(), output);
  }

  // optional uint64 caller_iid = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->caller_iid(), output);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->allocation_scope(), output);
  }

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->annotations(static_cast<int>(i)),
      output);
  }

  // optional fixed64 device = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(16, this->device(), output);
  }

  // optional fixed64 device_memory = 17;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(17, this->device_memory(), output);
  }

  // optional uint32 memory_type = 18;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->memory_type(), output);
  }

  // optional uint32 heap = 19;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->heap(), output);
  }

  // optional fixed64 object_handle = 20;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(20, this->object_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.VulkanMemoryEvent)
}

size_t VulkanMemoryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->annotations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional fixed64 memory_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 memory_size = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->memory_size());
    }

    // optional uint32 pid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->allocation_scope());
    }

    // optional uint64 caller_iid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->caller_iid());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional fixed64 device = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional fixed64 device_memory = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional uint32 memory_type = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->memory_type());
    }

    // optional uint32 heap = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->heap());
    }

    // optional fixed64 object_handle = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanMemoryEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VulkanMemoryEvent*>(
      &from));
}

void VulkanMemoryEvent::MergeFrom(const VulkanMemoryEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      memory_address_ = from.memory_address_;
    }
    if (cached_has_bits & 0x00000010u) {
      memory_size_ = from.memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      allocation_scope_ = from.allocation_scope_;
    }
    if (cached_has_bits & 0x00000080u) {
      caller_iid_ = from.caller_iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000200u) {
      device_memory_ = from.device_memory_;
    }
    if (cached_has_bits & 0x00000400u) {
      memory_type_ = from.memory_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      heap_ = from.heap_;
    }
    if (cached_has_bits & 0x00001000u) {
      object_handle_ = from.object_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VulkanMemoryEvent::CopyFrom(const VulkanMemoryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEvent::IsInitialized() const {
  return true;
}

void VulkanMemoryEvent::InternalSwap(VulkanMemoryEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&annotations_)->InternalSwap(CastToBase(&other->annotations_));
  swap(source_, other->source_);
  swap(operation_, other->operation_);
  swap(timestamp_, other->timestamp_);
  swap(memory_address_, other->memory_address_);
  swap(memory_size_, other->memory_size_);
  swap(pid_, other->pid_);
  swap(allocation_scope_, other->allocation_scope_);
  swap(caller_iid_, other->caller_iid_);
  swap(device_, other->device_);
  swap(device_memory_, other->device_memory_);
  swap(memory_type_, other->memory_type_);
  swap(heap_, other->heap_);
  swap(object_handle_, other->object_handle_);
}

std::string VulkanMemoryEvent::GetTypeName() const {
  return "perfetto.protos.VulkanMemoryEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEventAnnotation* Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEventAnnotation >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::VulkanMemoryEventAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEvent* Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::VulkanMemoryEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
