// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/gpu_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class GpuLog;
class GpuLogDefaultTypeInternal;
extern GpuLogDefaultTypeInternal _GpuLog_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::GpuLog* Arena::CreateMaybeMessage<::perfetto::protos::GpuLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum GpuLog_Severity : int {
  GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED = 0,
  GpuLog_Severity_LOG_SEVERITY_VERBOSE = 1,
  GpuLog_Severity_LOG_SEVERITY_DEBUG = 2,
  GpuLog_Severity_LOG_SEVERITY_INFO = 3,
  GpuLog_Severity_LOG_SEVERITY_WARNING = 4,
  GpuLog_Severity_LOG_SEVERITY_ERROR = 5
};
bool GpuLog_Severity_IsValid(int value);
constexpr GpuLog_Severity GpuLog_Severity_Severity_MIN = GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED;
constexpr GpuLog_Severity GpuLog_Severity_Severity_MAX = GpuLog_Severity_LOG_SEVERITY_ERROR;
constexpr int GpuLog_Severity_Severity_ARRAYSIZE = GpuLog_Severity_Severity_MAX + 1;

const std::string& GpuLog_Severity_Name(GpuLog_Severity value);
template<typename T>
inline const std::string& GpuLog_Severity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuLog_Severity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuLog_Severity_Name.");
  return GpuLog_Severity_Name(static_cast<GpuLog_Severity>(enum_t_value));
}
bool GpuLog_Severity_Parse(
    const std::string& name, GpuLog_Severity* value);
// ===================================================================

class GpuLog :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuLog) */ {
 public:
  GpuLog();
  virtual ~GpuLog();

  GpuLog(const GpuLog& from);
  GpuLog(GpuLog&& from) noexcept
    : GpuLog() {
    *this = ::std::move(from);
  }

  inline GpuLog& operator=(const GpuLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuLog& operator=(GpuLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuLog* internal_default_instance() {
    return reinterpret_cast<const GpuLog*>(
               &_GpuLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuLog& a, GpuLog& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuLog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuLog* New() const final {
    return CreateMaybeMessage<GpuLog>(nullptr);
  }

  GpuLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuLog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuLog& from);
  void MergeFrom(const GpuLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GpuLog_Severity Severity;
  static constexpr Severity LOG_SEVERITY_UNSPECIFIED =
    GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED;
  static constexpr Severity LOG_SEVERITY_VERBOSE =
    GpuLog_Severity_LOG_SEVERITY_VERBOSE;
  static constexpr Severity LOG_SEVERITY_DEBUG =
    GpuLog_Severity_LOG_SEVERITY_DEBUG;
  static constexpr Severity LOG_SEVERITY_INFO =
    GpuLog_Severity_LOG_SEVERITY_INFO;
  static constexpr Severity LOG_SEVERITY_WARNING =
    GpuLog_Severity_LOG_SEVERITY_WARNING;
  static constexpr Severity LOG_SEVERITY_ERROR =
    GpuLog_Severity_LOG_SEVERITY_ERROR;
  static inline bool Severity_IsValid(int value) {
    return GpuLog_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN =
    GpuLog_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX =
    GpuLog_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE =
    GpuLog_Severity_Severity_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Severity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Severity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Severity_Name.");
    return GpuLog_Severity_Name(enum_t_value);
  }
  static inline bool Severity_Parse(const std::string& name,
      Severity* value) {
    return GpuLog_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kLogMessageFieldNumber = 3,
    kSeverityFieldNumber = 1,
  };
  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string log_message = 3;
  bool has_log_message() const;
  void clear_log_message();
  const std::string& log_message() const;
  void set_log_message(const std::string& value);
  void set_log_message(std::string&& value);
  void set_log_message(const char* value);
  void set_log_message(const char* value, size_t size);
  std::string* mutable_log_message();
  std::string* release_log_message();
  void set_allocated_log_message(std::string* log_message);

  // optional .perfetto.protos.GpuLog.Severity severity = 1;
  bool has_severity() const;
  void clear_severity();
  ::perfetto::protos::GpuLog_Severity severity() const;
  void set_severity(::perfetto::protos::GpuLog_Severity value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuLog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_message_;
  int severity_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpuLog

// optional .perfetto.protos.GpuLog.Severity severity = 1;
inline bool GpuLog::has_severity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuLog::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::GpuLog_Severity GpuLog::severity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuLog.severity)
  return static_cast< ::perfetto::protos::GpuLog_Severity >(severity_);
}
inline void GpuLog::set_severity(::perfetto::protos::GpuLog_Severity value) {
  assert(::perfetto::protos::GpuLog_Severity_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuLog.severity)
}

// optional string tag = 2;
inline bool GpuLog::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuLog::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuLog::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuLog.tag)
  return tag_.GetNoArena();
}
inline void GpuLog::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuLog.tag)
}
inline void GpuLog::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuLog.tag)
}
inline void GpuLog::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuLog.tag)
}
inline void GpuLog::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuLog.tag)
}
inline std::string* GpuLog::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuLog.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuLog::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuLog.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuLog::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuLog.tag)
}

// optional string log_message = 3;
inline bool GpuLog::has_log_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuLog::clear_log_message() {
  log_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuLog::log_message() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuLog.log_message)
  return log_message_.GetNoArena();
}
inline void GpuLog::set_log_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  log_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuLog.log_message)
}
inline void GpuLog::set_log_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  log_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuLog.log_message)
}
inline void GpuLog::set_log_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  log_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuLog.log_message)
}
inline void GpuLog::set_log_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  log_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuLog.log_message)
}
inline std::string* GpuLog::mutable_log_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuLog.log_message)
  return log_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuLog::release_log_message() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuLog.log_message)
  if (!has_log_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return log_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuLog::set_allocated_log_message(std::string* log_message) {
  if (log_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  log_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_message);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuLog.log_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::GpuLog_Severity> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto
