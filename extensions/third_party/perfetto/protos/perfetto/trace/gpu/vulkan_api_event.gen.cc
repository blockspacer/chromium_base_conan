#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/gpu/vulkan_api_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

VulkanApiEvent::VulkanApiEvent() = default;
VulkanApiEvent::~VulkanApiEvent() = default;
VulkanApiEvent::VulkanApiEvent(const VulkanApiEvent&) = default;
VulkanApiEvent& VulkanApiEvent::operator=(const VulkanApiEvent&) = default;
VulkanApiEvent::VulkanApiEvent(VulkanApiEvent&&) noexcept = default;
VulkanApiEvent& VulkanApiEvent::operator=(VulkanApiEvent&&) = default;

bool VulkanApiEvent::operator==(const VulkanApiEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && vk_debug_utils_object_name_ == other.vk_debug_utils_object_name_
   && vk_queue_submit_ == other.vk_queue_submit_;
}

bool VulkanApiEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* vk_debug_utils_object_name */:
        (*vk_debug_utils_object_name_).ParseFromArray(field.data(), field.size());
        break;
      case 2 /* vk_queue_submit */:
        (*vk_queue_submit_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VulkanApiEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VulkanApiEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VulkanApiEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: vk_debug_utils_object_name
  if (_has_field_[1]) {
    (*vk_debug_utils_object_name_).Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: vk_queue_submit
  if (_has_field_[2]) {
    (*vk_queue_submit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit() = default;
VulkanApiEvent_VkQueueSubmit::~VulkanApiEvent_VkQueueSubmit() = default;
VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit(const VulkanApiEvent_VkQueueSubmit&) = default;
VulkanApiEvent_VkQueueSubmit& VulkanApiEvent_VkQueueSubmit::operator=(const VulkanApiEvent_VkQueueSubmit&) = default;
VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit(VulkanApiEvent_VkQueueSubmit&&) noexcept = default;
VulkanApiEvent_VkQueueSubmit& VulkanApiEvent_VkQueueSubmit::operator=(VulkanApiEvent_VkQueueSubmit&&) = default;

bool VulkanApiEvent_VkQueueSubmit::operator==(const VulkanApiEvent_VkQueueSubmit& other) const {
  return unknown_fields_ == other.unknown_fields_
   && duration_ns_ == other.duration_ns_
   && pid_ == other.pid_
   && tid_ == other.tid_
   && vk_queue_ == other.vk_queue_
   && vk_command_buffers_ == other.vk_command_buffers_
   && submission_id_ == other.submission_id_;
}

bool VulkanApiEvent_VkQueueSubmit::ParseFromArray(const void* raw, size_t size) {
  vk_command_buffers_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* duration_ns */:
        field.get(&duration_ns_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* tid */:
        field.get(&tid_);
        break;
      case 4 /* vk_queue */:
        field.get(&vk_queue_);
        break;
      case 5 /* vk_command_buffers */:
        vk_command_buffers_.emplace_back();
        field.get(&vk_command_buffers_.back());
        break;
      case 6 /* submission_id */:
        field.get(&submission_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VulkanApiEvent_VkQueueSubmit::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VulkanApiEvent_VkQueueSubmit::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VulkanApiEvent_VkQueueSubmit::Serialize(::protozero::Message* msg) const {
  // Field 1: duration_ns
  if (_has_field_[1]) {
    msg->AppendVarInt(1, duration_ns_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  // Field 3: tid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, tid_);
  }

  // Field 4: vk_queue
  if (_has_field_[4]) {
    msg->AppendVarInt(4, vk_queue_);
  }

  // Field 5: vk_command_buffers
  for (auto& it : vk_command_buffers_) {
    msg->AppendVarInt(5, it);
  }

  // Field 6: submission_id
  if (_has_field_[6]) {
    msg->AppendVarInt(6, submission_id_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName() = default;
VulkanApiEvent_VkDebugUtilsObjectName::~VulkanApiEvent_VkDebugUtilsObjectName() = default;
VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName(const VulkanApiEvent_VkDebugUtilsObjectName&) = default;
VulkanApiEvent_VkDebugUtilsObjectName& VulkanApiEvent_VkDebugUtilsObjectName::operator=(const VulkanApiEvent_VkDebugUtilsObjectName&) = default;
VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName(VulkanApiEvent_VkDebugUtilsObjectName&&) noexcept = default;
VulkanApiEvent_VkDebugUtilsObjectName& VulkanApiEvent_VkDebugUtilsObjectName::operator=(VulkanApiEvent_VkDebugUtilsObjectName&&) = default;

bool VulkanApiEvent_VkDebugUtilsObjectName::operator==(const VulkanApiEvent_VkDebugUtilsObjectName& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && vk_device_ == other.vk_device_
   && object_type_ == other.object_type_
   && object_ == other.object_
   && object_name_ == other.object_name_;
}

bool VulkanApiEvent_VkDebugUtilsObjectName::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* vk_device */:
        field.get(&vk_device_);
        break;
      case 3 /* object_type */:
        field.get(&object_type_);
        break;
      case 4 /* object */:
        field.get(&object_);
        break;
      case 5 /* object_name */:
        field.get(&object_name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VulkanApiEvent_VkDebugUtilsObjectName::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VulkanApiEvent_VkDebugUtilsObjectName::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VulkanApiEvent_VkDebugUtilsObjectName::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: vk_device
  if (_has_field_[2]) {
    msg->AppendVarInt(2, vk_device_);
  }

  // Field 3: object_type
  if (_has_field_[3]) {
    msg->AppendVarInt(3, object_type_);
  }

  // Field 4: object
  if (_has_field_[4]) {
    msg->AppendVarInt(4, object_);
  }

  // Field 5: object_name
  if (_has_field_[5]) {
    msg->AppendString(5, object_name_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
