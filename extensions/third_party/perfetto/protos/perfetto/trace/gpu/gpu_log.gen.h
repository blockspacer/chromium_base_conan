// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_GPU_LOG_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_GPU_LOG_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class GpuLog;
enum GpuLog_Severity : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum GpuLog_Severity : int {
  GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED = 0,
  GpuLog_Severity_LOG_SEVERITY_VERBOSE = 1,
  GpuLog_Severity_LOG_SEVERITY_DEBUG = 2,
  GpuLog_Severity_LOG_SEVERITY_INFO = 3,
  GpuLog_Severity_LOG_SEVERITY_WARNING = 4,
  GpuLog_Severity_LOG_SEVERITY_ERROR = 5,
};

class PERFETTO_EXPORT GpuLog : public ::protozero::CppMessageObj {
 public:
  using Severity = GpuLog_Severity;
  static constexpr auto LOG_SEVERITY_UNSPECIFIED = GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED;
  static constexpr auto LOG_SEVERITY_VERBOSE = GpuLog_Severity_LOG_SEVERITY_VERBOSE;
  static constexpr auto LOG_SEVERITY_DEBUG = GpuLog_Severity_LOG_SEVERITY_DEBUG;
  static constexpr auto LOG_SEVERITY_INFO = GpuLog_Severity_LOG_SEVERITY_INFO;
  static constexpr auto LOG_SEVERITY_WARNING = GpuLog_Severity_LOG_SEVERITY_WARNING;
  static constexpr auto LOG_SEVERITY_ERROR = GpuLog_Severity_LOG_SEVERITY_ERROR;
  static constexpr auto Severity_MIN = GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED;
  static constexpr auto Severity_MAX = GpuLog_Severity_LOG_SEVERITY_ERROR;
  enum FieldNumbers {
    kSeverityFieldNumber = 1,
    kTagFieldNumber = 2,
    kLogMessageFieldNumber = 3,
  };

  GpuLog();
  ~GpuLog() override;
  GpuLog(GpuLog&&) noexcept;
  GpuLog& operator=(GpuLog&&);
  GpuLog(const GpuLog&);
  GpuLog& operator=(const GpuLog&);
  bool operator==(const GpuLog&) const;
  bool operator!=(const GpuLog& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_severity() const { return _has_field_[1]; }
  GpuLog_Severity severity() const { return severity_; }
  void set_severity(GpuLog_Severity value) { severity_ = value; _has_field_.set(1); }

  bool has_tag() const { return _has_field_[2]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(2); }

  bool has_log_message() const { return _has_field_[3]; }
  const std::string& log_message() const { return log_message_; }
  void set_log_message(const std::string& value) { log_message_ = value; _has_field_.set(3); }

 private:
  GpuLog_Severity severity_{};
  std::string tag_{};
  std::string log_message_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_GPU_GPU_LOG_PROTO_CPP_H_
