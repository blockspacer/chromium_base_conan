// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/power/power_rails.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class PowerRails;
class PowerRailsDefaultTypeInternal;
extern PowerRailsDefaultTypeInternal _PowerRails_default_instance_;
class PowerRails_EnergyData;
class PowerRails_EnergyDataDefaultTypeInternal;
extern PowerRails_EnergyDataDefaultTypeInternal _PowerRails_EnergyData_default_instance_;
class PowerRails_RailDescriptor;
class PowerRails_RailDescriptorDefaultTypeInternal;
extern PowerRails_RailDescriptorDefaultTypeInternal _PowerRails_RailDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PowerRails* Arena::CreateMaybeMessage<::perfetto::protos::PowerRails>(Arena*);
template<> ::perfetto::protos::PowerRails_EnergyData* Arena::CreateMaybeMessage<::perfetto::protos::PowerRails_EnergyData>(Arena*);
template<> ::perfetto::protos::PowerRails_RailDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::PowerRails_RailDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class PowerRails_RailDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PowerRails.RailDescriptor) */ {
 public:
  PowerRails_RailDescriptor();
  virtual ~PowerRails_RailDescriptor();

  PowerRails_RailDescriptor(const PowerRails_RailDescriptor& from);
  PowerRails_RailDescriptor(PowerRails_RailDescriptor&& from) noexcept
    : PowerRails_RailDescriptor() {
    *this = ::std::move(from);
  }

  inline PowerRails_RailDescriptor& operator=(const PowerRails_RailDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerRails_RailDescriptor& operator=(PowerRails_RailDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerRails_RailDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerRails_RailDescriptor* internal_default_instance() {
    return reinterpret_cast<const PowerRails_RailDescriptor*>(
               &_PowerRails_RailDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerRails_RailDescriptor& a, PowerRails_RailDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerRails_RailDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerRails_RailDescriptor* New() const final {
    return CreateMaybeMessage<PowerRails_RailDescriptor>(nullptr);
  }

  PowerRails_RailDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerRails_RailDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerRails_RailDescriptor& from);
  void MergeFrom(const PowerRails_RailDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerRails_RailDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PowerRails.RailDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRailNameFieldNumber = 2,
    kSubsysNameFieldNumber = 3,
    kIndexFieldNumber = 1,
    kSamplingRateFieldNumber = 4,
  };
  // optional string rail_name = 2;
  bool has_rail_name() const;
  void clear_rail_name();
  const std::string& rail_name() const;
  void set_rail_name(const std::string& value);
  void set_rail_name(std::string&& value);
  void set_rail_name(const char* value);
  void set_rail_name(const char* value, size_t size);
  std::string* mutable_rail_name();
  std::string* release_rail_name();
  void set_allocated_rail_name(std::string* rail_name);

  // optional string subsys_name = 3;
  bool has_subsys_name() const;
  void clear_subsys_name();
  const std::string& subsys_name() const;
  void set_subsys_name(const std::string& value);
  void set_subsys_name(std::string&& value);
  void set_subsys_name(const char* value);
  void set_subsys_name(const char* value, size_t size);
  std::string* mutable_subsys_name();
  std::string* release_subsys_name();
  void set_allocated_subsys_name(std::string* subsys_name);

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 sampling_rate = 4;
  bool has_sampling_rate() const;
  void clear_sampling_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate() const;
  void set_sampling_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PowerRails.RailDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rail_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subsys_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto;
};
// -------------------------------------------------------------------

class PowerRails_EnergyData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PowerRails.EnergyData) */ {
 public:
  PowerRails_EnergyData();
  virtual ~PowerRails_EnergyData();

  PowerRails_EnergyData(const PowerRails_EnergyData& from);
  PowerRails_EnergyData(PowerRails_EnergyData&& from) noexcept
    : PowerRails_EnergyData() {
    *this = ::std::move(from);
  }

  inline PowerRails_EnergyData& operator=(const PowerRails_EnergyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerRails_EnergyData& operator=(PowerRails_EnergyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerRails_EnergyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerRails_EnergyData* internal_default_instance() {
    return reinterpret_cast<const PowerRails_EnergyData*>(
               &_PowerRails_EnergyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PowerRails_EnergyData& a, PowerRails_EnergyData& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerRails_EnergyData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerRails_EnergyData* New() const final {
    return CreateMaybeMessage<PowerRails_EnergyData>(nullptr);
  }

  PowerRails_EnergyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerRails_EnergyData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerRails_EnergyData& from);
  void MergeFrom(const PowerRails_EnergyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerRails_EnergyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PowerRails.EnergyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 2,
    kEnergyFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // optional uint64 timestamp_ms = 2;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 energy = 3;
  bool has_energy() const;
  void clear_energy();
  ::PROTOBUF_NAMESPACE_ID::uint64 energy() const;
  void set_energy(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PowerRails.EnergyData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 energy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto;
};
// -------------------------------------------------------------------

class PowerRails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PowerRails) */ {
 public:
  PowerRails();
  virtual ~PowerRails();

  PowerRails(const PowerRails& from);
  PowerRails(PowerRails&& from) noexcept
    : PowerRails() {
    *this = ::std::move(from);
  }

  inline PowerRails& operator=(const PowerRails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerRails& operator=(PowerRails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerRails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerRails* internal_default_instance() {
    return reinterpret_cast<const PowerRails*>(
               &_PowerRails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerRails& a, PowerRails& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerRails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerRails* New() const final {
    return CreateMaybeMessage<PowerRails>(nullptr);
  }

  PowerRails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerRails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerRails& from);
  void MergeFrom(const PowerRails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerRails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PowerRails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerRails_RailDescriptor RailDescriptor;
  typedef PowerRails_EnergyData EnergyData;

  // accessors -------------------------------------------------------

  enum : int {
    kRailDescriptorFieldNumber = 1,
    kEnergyDataFieldNumber = 2,
  };
  // repeated .perfetto.protos.PowerRails.RailDescriptor rail_descriptor = 1;
  int rail_descriptor_size() const;
  void clear_rail_descriptor();
  ::perfetto::protos::PowerRails_RailDescriptor* mutable_rail_descriptor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_RailDescriptor >*
      mutable_rail_descriptor();
  const ::perfetto::protos::PowerRails_RailDescriptor& rail_descriptor(int index) const;
  ::perfetto::protos::PowerRails_RailDescriptor* add_rail_descriptor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_RailDescriptor >&
      rail_descriptor() const;

  // repeated .perfetto.protos.PowerRails.EnergyData energy_data = 2;
  int energy_data_size() const;
  void clear_energy_data();
  ::perfetto::protos::PowerRails_EnergyData* mutable_energy_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_EnergyData >*
      mutable_energy_data();
  const ::perfetto::protos::PowerRails_EnergyData& energy_data(int index) const;
  ::perfetto::protos::PowerRails_EnergyData* add_energy_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_EnergyData >&
      energy_data() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.PowerRails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_RailDescriptor > rail_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_EnergyData > energy_data_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerRails_RailDescriptor

// optional uint32 index = 1;
inline bool PowerRails_RailDescriptor::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerRails_RailDescriptor::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerRails_RailDescriptor::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.RailDescriptor.index)
  return index_;
}
inline void PowerRails_RailDescriptor::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.RailDescriptor.index)
}

// optional string rail_name = 2;
inline bool PowerRails_RailDescriptor::has_rail_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerRails_RailDescriptor::clear_rail_name() {
  rail_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerRails_RailDescriptor::rail_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.RailDescriptor.rail_name)
  return rail_name_.GetNoArena();
}
inline void PowerRails_RailDescriptor::set_rail_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rail_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.RailDescriptor.rail_name)
}
inline void PowerRails_RailDescriptor::set_rail_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rail_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PowerRails.RailDescriptor.rail_name)
}
inline void PowerRails_RailDescriptor::set_rail_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rail_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PowerRails.RailDescriptor.rail_name)
}
inline void PowerRails_RailDescriptor::set_rail_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rail_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PowerRails.RailDescriptor.rail_name)
}
inline std::string* PowerRails_RailDescriptor::mutable_rail_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PowerRails.RailDescriptor.rail_name)
  return rail_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerRails_RailDescriptor::release_rail_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PowerRails.RailDescriptor.rail_name)
  if (!has_rail_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rail_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerRails_RailDescriptor::set_allocated_rail_name(std::string* rail_name) {
  if (rail_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rail_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rail_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PowerRails.RailDescriptor.rail_name)
}

// optional string subsys_name = 3;
inline bool PowerRails_RailDescriptor::has_subsys_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerRails_RailDescriptor::clear_subsys_name() {
  subsys_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PowerRails_RailDescriptor::subsys_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
  return subsys_name_.GetNoArena();
}
inline void PowerRails_RailDescriptor::set_subsys_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subsys_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
}
inline void PowerRails_RailDescriptor::set_subsys_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subsys_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
}
inline void PowerRails_RailDescriptor::set_subsys_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subsys_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
}
inline void PowerRails_RailDescriptor::set_subsys_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subsys_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
}
inline std::string* PowerRails_RailDescriptor::mutable_subsys_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
  return subsys_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerRails_RailDescriptor::release_subsys_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
  if (!has_subsys_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subsys_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerRails_RailDescriptor::set_allocated_subsys_name(std::string* subsys_name) {
  if (subsys_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subsys_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subsys_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PowerRails.RailDescriptor.subsys_name)
}

// optional uint32 sampling_rate = 4;
inline bool PowerRails_RailDescriptor::has_sampling_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerRails_RailDescriptor::clear_sampling_rate() {
  sampling_rate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerRails_RailDescriptor::sampling_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.RailDescriptor.sampling_rate)
  return sampling_rate_;
}
inline void PowerRails_RailDescriptor::set_sampling_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.RailDescriptor.sampling_rate)
}

// -------------------------------------------------------------------

// PowerRails_EnergyData

// optional uint32 index = 1;
inline bool PowerRails_EnergyData::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerRails_EnergyData::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerRails_EnergyData::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.EnergyData.index)
  return index_;
}
inline void PowerRails_EnergyData::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.EnergyData.index)
}

// optional uint64 timestamp_ms = 2;
inline bool PowerRails_EnergyData::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerRails_EnergyData::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PowerRails_EnergyData::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.EnergyData.timestamp_ms)
  return timestamp_ms_;
}
inline void PowerRails_EnergyData::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.EnergyData.timestamp_ms)
}

// optional uint64 energy = 3;
inline bool PowerRails_EnergyData::has_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerRails_EnergyData::clear_energy() {
  energy_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PowerRails_EnergyData::energy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.EnergyData.energy)
  return energy_;
}
inline void PowerRails_EnergyData::set_energy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  energy_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PowerRails.EnergyData.energy)
}

// -------------------------------------------------------------------

// PowerRails

// repeated .perfetto.protos.PowerRails.RailDescriptor rail_descriptor = 1;
inline int PowerRails::rail_descriptor_size() const {
  return rail_descriptor_.size();
}
inline void PowerRails::clear_rail_descriptor() {
  rail_descriptor_.Clear();
}
inline ::perfetto::protos::PowerRails_RailDescriptor* PowerRails::mutable_rail_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PowerRails.rail_descriptor)
  return rail_descriptor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_RailDescriptor >*
PowerRails::mutable_rail_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PowerRails.rail_descriptor)
  return &rail_descriptor_;
}
inline const ::perfetto::protos::PowerRails_RailDescriptor& PowerRails::rail_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.rail_descriptor)
  return rail_descriptor_.Get(index);
}
inline ::perfetto::protos::PowerRails_RailDescriptor* PowerRails::add_rail_descriptor() {
  // @@protoc_insertion_point(field_add:perfetto.protos.PowerRails.rail_descriptor)
  return rail_descriptor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_RailDescriptor >&
PowerRails::rail_descriptor() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PowerRails.rail_descriptor)
  return rail_descriptor_;
}

// repeated .perfetto.protos.PowerRails.EnergyData energy_data = 2;
inline int PowerRails::energy_data_size() const {
  return energy_data_.size();
}
inline void PowerRails::clear_energy_data() {
  energy_data_.Clear();
}
inline ::perfetto::protos::PowerRails_EnergyData* PowerRails::mutable_energy_data(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PowerRails.energy_data)
  return energy_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_EnergyData >*
PowerRails::mutable_energy_data() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PowerRails.energy_data)
  return &energy_data_;
}
inline const ::perfetto::protos::PowerRails_EnergyData& PowerRails::energy_data(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PowerRails.energy_data)
  return energy_data_.Get(index);
}
inline ::perfetto::protos::PowerRails_EnergyData* PowerRails::add_energy_data() {
  // @@protoc_insertion_point(field_add:perfetto.protos.PowerRails.energy_data)
  return energy_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PowerRails_EnergyData >&
PowerRails::energy_data() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PowerRails.energy_data)
  return energy_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto
