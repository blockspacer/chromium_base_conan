// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_POWER_RAILS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_POWER_RAILS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class PowerRails;
class PowerRails_EnergyData;
class PowerRails_RailDescriptor;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT PowerRails : public ::protozero::CppMessageObj {
 public:
  using RailDescriptor = PowerRails_RailDescriptor;
  using EnergyData = PowerRails_EnergyData;
  enum FieldNumbers {
    kRailDescriptorFieldNumber = 1,
    kEnergyDataFieldNumber = 2,
  };

  PowerRails();
  ~PowerRails() override;
  PowerRails(PowerRails&&) noexcept;
  PowerRails& operator=(PowerRails&&);
  PowerRails(const PowerRails&);
  PowerRails& operator=(const PowerRails&);
  bool operator==(const PowerRails&) const;
  bool operator!=(const PowerRails& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<PowerRails_RailDescriptor>& rail_descriptor() const { return rail_descriptor_; }
  std::vector<PowerRails_RailDescriptor>* mutable_rail_descriptor() { return &rail_descriptor_; }
  int rail_descriptor_size() const;
  void clear_rail_descriptor();
  PowerRails_RailDescriptor* add_rail_descriptor();

  const std::vector<PowerRails_EnergyData>& energy_data() const { return energy_data_; }
  std::vector<PowerRails_EnergyData>* mutable_energy_data() { return &energy_data_; }
  int energy_data_size() const;
  void clear_energy_data();
  PowerRails_EnergyData* add_energy_data();

 private:
  std::vector<PowerRails_RailDescriptor> rail_descriptor_;
  std::vector<PowerRails_EnergyData> energy_data_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT PowerRails_EnergyData : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIndexFieldNumber = 1,
    kTimestampMsFieldNumber = 2,
    kEnergyFieldNumber = 3,
  };

  PowerRails_EnergyData();
  ~PowerRails_EnergyData() override;
  PowerRails_EnergyData(PowerRails_EnergyData&&) noexcept;
  PowerRails_EnergyData& operator=(PowerRails_EnergyData&&);
  PowerRails_EnergyData(const PowerRails_EnergyData&);
  PowerRails_EnergyData& operator=(const PowerRails_EnergyData&);
  bool operator==(const PowerRails_EnergyData&) const;
  bool operator!=(const PowerRails_EnergyData& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_index() const { return _has_field_[1]; }
  uint32_t index() const { return index_; }
  void set_index(uint32_t value) { index_ = value; _has_field_.set(1); }

  bool has_timestamp_ms() const { return _has_field_[2]; }
  uint64_t timestamp_ms() const { return timestamp_ms_; }
  void set_timestamp_ms(uint64_t value) { timestamp_ms_ = value; _has_field_.set(2); }

  bool has_energy() const { return _has_field_[3]; }
  uint64_t energy() const { return energy_; }
  void set_energy(uint64_t value) { energy_ = value; _has_field_.set(3); }

 private:
  uint32_t index_{};
  uint64_t timestamp_ms_{};
  uint64_t energy_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT PowerRails_RailDescriptor : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIndexFieldNumber = 1,
    kRailNameFieldNumber = 2,
    kSubsysNameFieldNumber = 3,
    kSamplingRateFieldNumber = 4,
  };

  PowerRails_RailDescriptor();
  ~PowerRails_RailDescriptor() override;
  PowerRails_RailDescriptor(PowerRails_RailDescriptor&&) noexcept;
  PowerRails_RailDescriptor& operator=(PowerRails_RailDescriptor&&);
  PowerRails_RailDescriptor(const PowerRails_RailDescriptor&);
  PowerRails_RailDescriptor& operator=(const PowerRails_RailDescriptor&);
  bool operator==(const PowerRails_RailDescriptor&) const;
  bool operator!=(const PowerRails_RailDescriptor& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_index() const { return _has_field_[1]; }
  uint32_t index() const { return index_; }
  void set_index(uint32_t value) { index_ = value; _has_field_.set(1); }

  bool has_rail_name() const { return _has_field_[2]; }
  const std::string& rail_name() const { return rail_name_; }
  void set_rail_name(const std::string& value) { rail_name_ = value; _has_field_.set(2); }

  bool has_subsys_name() const { return _has_field_[3]; }
  const std::string& subsys_name() const { return subsys_name_; }
  void set_subsys_name(const std::string& value) { subsys_name_ = value; _has_field_.set(3); }

  bool has_sampling_rate() const { return _has_field_[4]; }
  uint32_t sampling_rate() const { return sampling_rate_; }
  void set_sampling_rate(uint32_t value) { sampling_rate_ = value; _has_field_.set(4); }

 private:
  uint32_t index_{};
  std::string rail_name_{};
  std::string subsys_name_{};
  uint32_t sampling_rate_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_POWER_RAILS_PROTO_CPP_H_
