// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_BATTERY_COUNTERS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_BATTERY_COUNTERS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class BatteryCounters;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT BatteryCounters : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChargeCounterUahFieldNumber = 1,
    kCapacityPercentFieldNumber = 2,
    kCurrentUaFieldNumber = 3,
    kCurrentAvgUaFieldNumber = 4,
  };

  BatteryCounters();
  ~BatteryCounters() override;
  BatteryCounters(BatteryCounters&&) noexcept;
  BatteryCounters& operator=(BatteryCounters&&);
  BatteryCounters(const BatteryCounters&);
  BatteryCounters& operator=(const BatteryCounters&);
  bool operator==(const BatteryCounters&) const;
  bool operator!=(const BatteryCounters& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_charge_counter_uah() const { return _has_field_[1]; }
  int64_t charge_counter_uah() const { return charge_counter_uah_; }
  void set_charge_counter_uah(int64_t value) { charge_counter_uah_ = value; _has_field_.set(1); }

  bool has_capacity_percent() const { return _has_field_[2]; }
  float capacity_percent() const { return capacity_percent_; }
  void set_capacity_percent(float value) { capacity_percent_ = value; _has_field_.set(2); }

  bool has_current_ua() const { return _has_field_[3]; }
  int64_t current_ua() const { return current_ua_; }
  void set_current_ua(int64_t value) { current_ua_ = value; _has_field_.set(3); }

  bool has_current_avg_ua() const { return _has_field_[4]; }
  int64_t current_avg_ua() const { return current_avg_ua_; }
  void set_current_avg_ua(int64_t value) { current_avg_ua_ = value; _has_field_.set(4); }

 private:
  int64_t charge_counter_uah_{};
  float capacity_percent_{};
  int64_t current_ua_{};
  int64_t current_avg_ua_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_BATTERY_COUNTERS_PROTO_CPP_H_
