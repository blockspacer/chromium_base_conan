#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/power/battery_counters.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

BatteryCounters::BatteryCounters() = default;
BatteryCounters::~BatteryCounters() = default;
BatteryCounters::BatteryCounters(const BatteryCounters&) = default;
BatteryCounters& BatteryCounters::operator=(const BatteryCounters&) = default;
BatteryCounters::BatteryCounters(BatteryCounters&&) noexcept = default;
BatteryCounters& BatteryCounters::operator=(BatteryCounters&&) = default;

bool BatteryCounters::operator==(const BatteryCounters& other) const {
  return unknown_fields_ == other.unknown_fields_
   && charge_counter_uah_ == other.charge_counter_uah_
   && capacity_percent_ == other.capacity_percent_
   && current_ua_ == other.current_ua_
   && current_avg_ua_ == other.current_avg_ua_;
}

bool BatteryCounters::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* charge_counter_uah */:
        field.get(&charge_counter_uah_);
        break;
      case 2 /* capacity_percent */:
        field.get(&capacity_percent_);
        break;
      case 3 /* current_ua */:
        field.get(&current_ua_);
        break;
      case 4 /* current_avg_ua */:
        field.get(&current_avg_ua_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BatteryCounters::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BatteryCounters::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BatteryCounters::Serialize(::protozero::Message* msg) const {
  // Field 1: charge_counter_uah
  if (_has_field_[1]) {
    msg->AppendVarInt(1, charge_counter_uah_);
  }

  // Field 2: capacity_percent
  if (_has_field_[2]) {
    msg->AppendFixed(2, capacity_percent_);
  }

  // Field 3: current_ua
  if (_has_field_[3]) {
    msg->AppendVarInt(3, current_ua_);
  }

  // Field 4: current_avg_ua
  if (_has_field_[4]) {
    msg->AppendVarInt(4, current_avg_ua_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
