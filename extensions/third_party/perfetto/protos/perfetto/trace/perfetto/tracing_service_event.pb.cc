// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/tracing_service_event.proto

#include "protos/perfetto/trace/perfetto/tracing_service_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class TracingServiceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceEvent> _instance;
  bool tracing_started_;
  bool all_data_sources_started_;
  bool all_data_sources_flushed_;
  bool read_tracing_buffers_completed_;
  bool tracing_disabled_;
  bool seized_for_bugreport_;
} _TracingServiceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceEvent_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void TracingServiceEvent::InitAsDefaultInstance() {
}
class TracingServiceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceEvent>()._has_bits_);
};

TracingServiceEvent::TracingServiceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceEvent)
}
TracingServiceEvent::TracingServiceEvent(const TracingServiceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_event_type();
  switch (from.event_type_case()) {
    case kTracingStarted: {
      set_tracing_started(from.tracing_started());
      break;
    }
    case kAllDataSourcesStarted: {
      set_all_data_sources_started(from.all_data_sources_started());
      break;
    }
    case kAllDataSourcesFlushed: {
      set_all_data_sources_flushed(from.all_data_sources_flushed());
      break;
    }
    case kReadTracingBuffersCompleted: {
      set_read_tracing_buffers_completed(from.read_tracing_buffers_completed());
      break;
    }
    case kTracingDisabled: {
      set_tracing_disabled(from.tracing_disabled());
      break;
    }
    case kSeizedForBugreport: {
      set_seized_for_bugreport(from.seized_for_bugreport());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceEvent)
}

void TracingServiceEvent::SharedCtor() {
  clear_has_event_type();
}

TracingServiceEvent::~TracingServiceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceEvent)
  SharedDtor();
}

void TracingServiceEvent::SharedDtor() {
  if (has_event_type()) {
    clear_event_type();
  }
}

void TracingServiceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceEvent& TracingServiceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceEvent_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceEvent::clear_event_type() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracingServiceEvent)
  switch (event_type_case()) {
    case kTracingStarted: {
      // No need to clear
      break;
    }
    case kAllDataSourcesStarted: {
      // No need to clear
      break;
    }
    case kAllDataSourcesFlushed: {
      // No need to clear
      break;
    }
    case kReadTracingBuffersCompleted: {
      // No need to clear
      break;
    }
    case kTracingDisabled: {
      // No need to clear
      break;
    }
    case kSeizedForBugreport: {
      // No need to clear
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_TYPE_NOT_SET;
}


void TracingServiceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_data_sources_started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_all_data_sources_started(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tracing_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_tracing_started(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_data_sources_flushed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_all_data_sources_flushed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool read_tracing_buffers_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_read_tracing_buffers_completed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tracing_disabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_tracing_disabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool seized_for_bugreport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_seized_for_bugreport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all_data_sources_started = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.all_data_sources_started_)));
          set_has_all_data_sources_started();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tracing_started = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.tracing_started_)));
          set_has_tracing_started();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_data_sources_flushed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.all_data_sources_flushed_)));
          set_has_all_data_sources_flushed();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool read_tracing_buffers_completed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.read_tracing_buffers_completed_)));
          set_has_read_tracing_buffers_completed();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tracing_disabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.tracing_disabled_)));
          set_has_tracing_disabled();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seized_for_bugreport = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_event_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_type_.seized_for_bugreport_)));
          set_has_seized_for_bugreport();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_type_case()) {
    case kAllDataSourcesStarted:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->all_data_sources_started(), output);
      break;
    case kTracingStarted:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->tracing_started(), output);
      break;
    case kAllDataSourcesFlushed:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->all_data_sources_flushed(), output);
      break;
    case kReadTracingBuffersCompleted:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->read_tracing_buffers_completed(), output);
      break;
    case kTracingDisabled:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->tracing_disabled(), output);
      break;
    case kSeizedForBugreport:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->seized_for_bugreport(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceEvent)
}

size_t TracingServiceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_type_case()) {
    // optional bool tracing_started = 2;
    case kTracingStarted: {
      total_size += 1 + 1;
      break;
    }
    // optional bool all_data_sources_started = 1;
    case kAllDataSourcesStarted: {
      total_size += 1 + 1;
      break;
    }
    // optional bool all_data_sources_flushed = 3;
    case kAllDataSourcesFlushed: {
      total_size += 1 + 1;
      break;
    }
    // optional bool read_tracing_buffers_completed = 4;
    case kReadTracingBuffersCompleted: {
      total_size += 1 + 1;
      break;
    }
    // optional bool tracing_disabled = 5;
    case kTracingDisabled: {
      total_size += 1 + 1;
      break;
    }
    // optional bool seized_for_bugreport = 6;
    case kSeizedForBugreport: {
      total_size += 1 + 1;
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceEvent*>(
      &from));
}

void TracingServiceEvent::MergeFrom(const TracingServiceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_type_case()) {
    case kTracingStarted: {
      set_tracing_started(from.tracing_started());
      break;
    }
    case kAllDataSourcesStarted: {
      set_all_data_sources_started(from.all_data_sources_started());
      break;
    }
    case kAllDataSourcesFlushed: {
      set_all_data_sources_flushed(from.all_data_sources_flushed());
      break;
    }
    case kReadTracingBuffersCompleted: {
      set_read_tracing_buffers_completed(from.read_tracing_buffers_completed());
      break;
    }
    case kTracingDisabled: {
      set_tracing_disabled(from.tracing_disabled());
      break;
    }
    case kSeizedForBugreport: {
      set_seized_for_bugreport(from.seized_for_bugreport());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
}

void TracingServiceEvent::CopyFrom(const TracingServiceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceEvent::IsInitialized() const {
  return true;
}

void TracingServiceEvent::InternalSwap(TracingServiceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_type_, other->event_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TracingServiceEvent::GetTypeName() const {
  return "perfetto.protos.TracingServiceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
