// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_TRACING_SERVICE_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_TRACING_SERVICE_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class TracingServiceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT TracingServiceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTracingStartedFieldNumber = 2,
    kAllDataSourcesStartedFieldNumber = 1,
    kAllDataSourcesFlushedFieldNumber = 3,
    kReadTracingBuffersCompletedFieldNumber = 4,
    kTracingDisabledFieldNumber = 5,
    kSeizedForBugreportFieldNumber = 6,
  };

  TracingServiceEvent();
  ~TracingServiceEvent() override;
  TracingServiceEvent(TracingServiceEvent&&) noexcept;
  TracingServiceEvent& operator=(TracingServiceEvent&&);
  TracingServiceEvent(const TracingServiceEvent&);
  TracingServiceEvent& operator=(const TracingServiceEvent&);
  bool operator==(const TracingServiceEvent&) const;
  bool operator!=(const TracingServiceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tracing_started() const { return _has_field_[2]; }
  bool tracing_started() const { return tracing_started_; }
  void set_tracing_started(bool value) { tracing_started_ = value; _has_field_.set(2); }

  bool has_all_data_sources_started() const { return _has_field_[1]; }
  bool all_data_sources_started() const { return all_data_sources_started_; }
  void set_all_data_sources_started(bool value) { all_data_sources_started_ = value; _has_field_.set(1); }

  bool has_all_data_sources_flushed() const { return _has_field_[3]; }
  bool all_data_sources_flushed() const { return all_data_sources_flushed_; }
  void set_all_data_sources_flushed(bool value) { all_data_sources_flushed_ = value; _has_field_.set(3); }

  bool has_read_tracing_buffers_completed() const { return _has_field_[4]; }
  bool read_tracing_buffers_completed() const { return read_tracing_buffers_completed_; }
  void set_read_tracing_buffers_completed(bool value) { read_tracing_buffers_completed_ = value; _has_field_.set(4); }

  bool has_tracing_disabled() const { return _has_field_[5]; }
  bool tracing_disabled() const { return tracing_disabled_; }
  void set_tracing_disabled(bool value) { tracing_disabled_ = value; _has_field_.set(5); }

  bool has_seized_for_bugreport() const { return _has_field_[6]; }
  bool seized_for_bugreport() const { return seized_for_bugreport_; }
  void set_seized_for_bugreport(bool value) { seized_for_bugreport_ = value; _has_field_.set(6); }

 private:
  bool tracing_started_{};
  bool all_data_sources_started_{};
  bool all_data_sources_flushed_{};
  bool read_tracing_buffers_completed_{};
  bool tracing_disabled_{};
  bool seized_for_bugreport_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_TRACING_SERVICE_EVENT_PROTO_CPP_H_
