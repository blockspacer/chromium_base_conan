// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/perfetto_metatrace.proto

#include "protos/perfetto/trace/perfetto/perfetto_metatrace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
namespace perfetto {
namespace protos {
class PerfettoMetatrace_ArgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfettoMetatrace_Arg> _instance;
} _PerfettoMetatrace_Arg_default_instance_;
class PerfettoMetatraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfettoMetatrace> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
} _PerfettoMetatrace_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfettoMetatrace_default_instance_;
    new (ptr) ::perfetto::protos::PerfettoMetatrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfettoMetatrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto}, {
      &scc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base,}};

static void InitDefaultsscc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfettoMetatrace_Arg_default_instance_;
    new (ptr) ::perfetto::protos::PerfettoMetatrace_Arg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfettoMetatrace_Arg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void PerfettoMetatrace_Arg::InitAsDefaultInstance() {
}
class PerfettoMetatrace_Arg::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfettoMetatrace_Arg>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfettoMetatrace_Arg::PerfettoMetatrace_Arg()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfettoMetatrace.Arg)
}
PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfettoMetatrace.Arg)
}

void PerfettoMetatrace_Arg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PerfettoMetatrace_Arg::~PerfettoMetatrace_Arg() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfettoMetatrace.Arg)
  SharedDtor();
}

void PerfettoMetatrace_Arg::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerfettoMetatrace_Arg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfettoMetatrace_Arg& PerfettoMetatrace_Arg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfettoMetatrace_Arg_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base);
  return *internal_default_instance();
}


void PerfettoMetatrace_Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfettoMetatrace.Arg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfettoMetatrace_Arg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfettoMetatrace_Arg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfettoMetatrace.Arg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfettoMetatrace.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfettoMetatrace.Arg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfettoMetatrace_Arg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfettoMetatrace.Arg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfettoMetatrace.Arg)
}

size_t PerfettoMetatrace_Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfettoMetatrace.Arg)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfettoMetatrace_Arg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfettoMetatrace_Arg*>(
      &from));
}

void PerfettoMetatrace_Arg::MergeFrom(const PerfettoMetatrace_Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfettoMetatrace.Arg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void PerfettoMetatrace_Arg::CopyFrom(const PerfettoMetatrace_Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfettoMetatrace.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoMetatrace_Arg::IsInitialized() const {
  return true;
}

void PerfettoMetatrace_Arg::InternalSwap(PerfettoMetatrace_Arg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PerfettoMetatrace_Arg::GetTypeName() const {
  return "perfetto.protos.PerfettoMetatrace.Arg";
}


// ===================================================================

void PerfettoMetatrace::InitAsDefaultInstance() {
}
class PerfettoMetatrace::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfettoMetatrace>()._has_bits_);
  static void set_has_event_duration_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_counter_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_overruns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PerfettoMetatrace::PerfettoMetatrace()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfettoMetatrace)
}
PerfettoMetatrace::PerfettoMetatrace(const PerfettoMetatrace& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_duration_ns_, &from.event_duration_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_overruns_) -
    reinterpret_cast<char*>(&event_duration_ns_)) + sizeof(has_overruns_));
  clear_has_record_type();
  switch (from.record_type_case()) {
    case kEventId: {
      set_event_id(from.event_id());
      break;
    }
    case kCounterId: {
      set_counter_id(from.counter_id());
      break;
    }
    case kEventName: {
      set_event_name(from.event_name());
      break;
    }
    case kCounterName: {
      set_counter_name(from.counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfettoMetatrace)
}

void PerfettoMetatrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base);
  ::memset(&event_duration_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_overruns_) -
      reinterpret_cast<char*>(&event_duration_ns_)) + sizeof(has_overruns_));
  clear_has_record_type();
}

PerfettoMetatrace::~PerfettoMetatrace() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfettoMetatrace)
  SharedDtor();
}

void PerfettoMetatrace::SharedDtor() {
  if (has_record_type()) {
    clear_record_type();
  }
}

void PerfettoMetatrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfettoMetatrace& PerfettoMetatrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfettoMetatrace_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto.base);
  return *internal_default_instance();
}


void PerfettoMetatrace::clear_record_type() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfettoMetatrace)
  switch (record_type_case()) {
    case kEventId: {
      // No need to clear
      break;
    }
    case kCounterId: {
      // No need to clear
      break;
    }
    case kEventName: {
      record_type_.event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCounterName: {
      record_type_.counter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_TYPE_NOT_SET;
}


void PerfettoMetatrace::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfettoMetatrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_duration_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_overruns_) -
        reinterpret_cast<char*>(&event_duration_ns_)) + sizeof(has_overruns_));
  }
  clear_record_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfettoMetatrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_event_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 counter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_counter_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_duration_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_event_duration_ns(&has_bits);
          event_duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 counter_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_counter_value(&has_bits);
          counter_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thread_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_thread_id(&has_bits);
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_overruns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_overruns(&has_bits);
          has_overruns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional string event_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_event_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string counter_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_counter_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfettoMetatrace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfettoMetatrace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_record_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_type_.event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 counter_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_record_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_type_.counter_id_)));
          set_has_counter_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_duration_ns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_event_duration_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_duration_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 counter_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_counter_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thread_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_thread_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_overruns = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_has_overruns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_overruns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string counter_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_counter_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfettoMetatrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfettoMetatrace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfettoMetatrace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfettoMetatrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (record_type_case()) {
    case kEventId:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
      break;
    case kCounterId:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->counter_id(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional uint32 event_duration_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->event_duration_ns(), output);
  }

  // optional int32 counter_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->counter_value(), output);
  }

  // optional uint32 thread_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->thread_id(), output);
  }

  // optional bool has_overruns = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->has_overruns(), output);
  }

  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->args(static_cast<int>(i)),
      output);
  }

  switch (record_type_case()) {
    case kEventName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        8, this->event_name(), output);
      break;
    case kCounterName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        9, this->counter_name(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfettoMetatrace)
}

size_t PerfettoMetatrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfettoMetatrace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 event_duration_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->event_duration_ns());
    }

    // optional int32 counter_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->counter_value());
    }

    // optional uint32 thread_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional bool has_overruns = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  switch (record_type_case()) {
    // optional uint32 event_id = 1;
    case kEventId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->event_id());
      break;
    }
    // optional uint32 counter_id = 2;
    case kCounterId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->counter_id());
      break;
    }
    // optional string event_name = 8;
    case kEventName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->event_name());
      break;
    }
    // optional string counter_name = 9;
    case kCounterName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfettoMetatrace::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfettoMetatrace*>(
      &from));
}

void PerfettoMetatrace::MergeFrom(const PerfettoMetatrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfettoMetatrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_duration_ns_ = from.event_duration_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      counter_value_ = from.counter_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_overruns_ = from.has_overruns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.record_type_case()) {
    case kEventId: {
      set_event_id(from.event_id());
      break;
    }
    case kCounterId: {
      set_counter_id(from.counter_id());
      break;
    }
    case kEventName: {
      set_event_name(from.event_name());
      break;
    }
    case kCounterName: {
      set_counter_name(from.counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
}

void PerfettoMetatrace::CopyFrom(const PerfettoMetatrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfettoMetatrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoMetatrace::IsInitialized() const {
  return true;
}

void PerfettoMetatrace::InternalSwap(PerfettoMetatrace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  swap(event_duration_ns_, other->event_duration_ns_);
  swap(counter_value_, other->counter_value_);
  swap(thread_id_, other->thread_id_);
  swap(has_overruns_, other->has_overruns_);
  swap(record_type_, other->record_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PerfettoMetatrace::GetTypeName() const {
  return "perfetto.protos.PerfettoMetatrace";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfettoMetatrace_Arg* Arena::CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace_Arg >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfettoMetatrace_Arg >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfettoMetatrace* Arena::CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfettoMetatrace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
