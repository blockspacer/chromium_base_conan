// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/perfetto_metatrace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class PerfettoMetatrace;
class PerfettoMetatraceDefaultTypeInternal;
extern PerfettoMetatraceDefaultTypeInternal _PerfettoMetatrace_default_instance_;
class PerfettoMetatrace_Arg;
class PerfettoMetatrace_ArgDefaultTypeInternal;
extern PerfettoMetatrace_ArgDefaultTypeInternal _PerfettoMetatrace_Arg_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PerfettoMetatrace* Arena::CreateMaybeMessage<::perfetto::protos::PerfettoMetatrace>(Arena*);
template<> ::perfetto::protos::PerfettoMetatrace_Arg* Arena::CreateMaybeMessage<::perfetto::protos::PerfettoMetatrace_Arg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class PerfettoMetatrace_Arg :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfettoMetatrace.Arg) */ {
 public:
  PerfettoMetatrace_Arg();
  virtual ~PerfettoMetatrace_Arg();

  PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg& from);
  PerfettoMetatrace_Arg(PerfettoMetatrace_Arg&& from) noexcept
    : PerfettoMetatrace_Arg() {
    *this = ::std::move(from);
  }

  inline PerfettoMetatrace_Arg& operator=(const PerfettoMetatrace_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoMetatrace_Arg& operator=(PerfettoMetatrace_Arg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfettoMetatrace_Arg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfettoMetatrace_Arg* internal_default_instance() {
    return reinterpret_cast<const PerfettoMetatrace_Arg*>(
               &_PerfettoMetatrace_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfettoMetatrace_Arg& a, PerfettoMetatrace_Arg& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoMetatrace_Arg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfettoMetatrace_Arg* New() const final {
    return CreateMaybeMessage<PerfettoMetatrace_Arg>(nullptr);
  }

  PerfettoMetatrace_Arg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfettoMetatrace_Arg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfettoMetatrace_Arg& from);
  void MergeFrom(const PerfettoMetatrace_Arg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfettoMetatrace_Arg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfettoMetatrace.Arg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfettoMetatrace.Arg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
};
// -------------------------------------------------------------------

class PerfettoMetatrace :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfettoMetatrace) */ {
 public:
  PerfettoMetatrace();
  virtual ~PerfettoMetatrace();

  PerfettoMetatrace(const PerfettoMetatrace& from);
  PerfettoMetatrace(PerfettoMetatrace&& from) noexcept
    : PerfettoMetatrace() {
    *this = ::std::move(from);
  }

  inline PerfettoMetatrace& operator=(const PerfettoMetatrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoMetatrace& operator=(PerfettoMetatrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfettoMetatrace& default_instance();

  enum RecordTypeCase {
    kEventId = 1,
    kCounterId = 2,
    kEventName = 8,
    kCounterName = 9,
    RECORD_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfettoMetatrace* internal_default_instance() {
    return reinterpret_cast<const PerfettoMetatrace*>(
               &_PerfettoMetatrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfettoMetatrace& a, PerfettoMetatrace& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoMetatrace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfettoMetatrace* New() const final {
    return CreateMaybeMessage<PerfettoMetatrace>(nullptr);
  }

  PerfettoMetatrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfettoMetatrace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfettoMetatrace& from);
  void MergeFrom(const PerfettoMetatrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfettoMetatrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfettoMetatrace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfettoMetatrace_Arg Arg;

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 7,
    kEventDurationNsFieldNumber = 3,
    kCounterValueFieldNumber = 4,
    kThreadIdFieldNumber = 5,
    kHasOverrunsFieldNumber = 6,
    kEventIdFieldNumber = 1,
    kCounterIdFieldNumber = 2,
    kEventNameFieldNumber = 8,
    kCounterNameFieldNumber = 9,
  };
  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  int args_size() const;
  void clear_args();
  ::perfetto::protos::PerfettoMetatrace_Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >*
      mutable_args();
  const ::perfetto::protos::PerfettoMetatrace_Arg& args(int index) const;
  ::perfetto::protos::PerfettoMetatrace_Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >&
      args() const;

  // optional uint32 event_duration_ns = 3;
  bool has_event_duration_ns() const;
  void clear_event_duration_ns();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_duration_ns() const;
  void set_event_duration_ns(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 counter_value = 4;
  bool has_counter_value() const;
  void clear_counter_value();
  ::PROTOBUF_NAMESPACE_ID::int32 counter_value() const;
  void set_counter_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 thread_id = 5;
  bool has_thread_id() const;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool has_overruns = 6;
  bool has_has_overruns() const;
  void clear_has_overruns();
  bool has_overruns() const;
  void set_has_overruns(bool value);

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 counter_id = 2;
  bool has_counter_id() const;
  void clear_counter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id() const;
  void set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional string event_name = 8;
  bool has_event_name() const;
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);

  // optional string counter_name = 9;
  bool has_counter_name() const;
  void clear_counter_name();
  const std::string& counter_name() const;
  void set_counter_name(const std::string& value);
  void set_counter_name(std::string&& value);
  void set_counter_name(const char* value);
  void set_counter_name(const char* value, size_t size);
  std::string* mutable_counter_name();
  std::string* release_counter_name();
  void set_allocated_counter_name(std::string* counter_name);

  void clear_record_type();
  RecordTypeCase record_type_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfettoMetatrace)
 private:
  class _Internal;
  void set_has_event_id();
  void set_has_counter_id();
  void set_has_event_name();
  void set_has_counter_name();

  inline bool has_record_type() const;
  inline void clear_has_record_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg > args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_duration_ns_;
  ::PROTOBUF_NAMESPACE_ID::int32 counter_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  bool has_overruns_;
  union RecordTypeUnion {
    RecordTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
    ::PROTOBUF_NAMESPACE_ID::uint32 counter_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
  } record_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfettoMetatrace_Arg

// optional string key = 1;
inline bool PerfettoMetatrace_Arg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfettoMetatrace_Arg::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfettoMetatrace_Arg::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.key)
  return key_.GetNoArena();
}
inline void PerfettoMetatrace_Arg::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.key)
}
inline void PerfettoMetatrace_Arg::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfettoMetatrace.Arg.key)
}
inline void PerfettoMetatrace_Arg::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfettoMetatrace.Arg.key)
}
inline void PerfettoMetatrace_Arg::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfettoMetatrace.Arg.key)
}
inline std::string* PerfettoMetatrace_Arg::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.Arg.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfettoMetatrace_Arg::release_key() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.Arg.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfettoMetatrace_Arg::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.Arg.key)
}

// optional string value = 2;
inline bool PerfettoMetatrace_Arg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfettoMetatrace_Arg::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerfettoMetatrace_Arg::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.value)
  return value_.GetNoArena();
}
inline void PerfettoMetatrace_Arg::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.value)
}
inline void PerfettoMetatrace_Arg::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfettoMetatrace.Arg.value)
}
inline void PerfettoMetatrace_Arg::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfettoMetatrace.Arg.value)
}
inline void PerfettoMetatrace_Arg::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfettoMetatrace.Arg.value)
}
inline std::string* PerfettoMetatrace_Arg::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.Arg.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfettoMetatrace_Arg::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.Arg.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfettoMetatrace_Arg::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.Arg.value)
}

// -------------------------------------------------------------------

// PerfettoMetatrace

// optional uint32 event_id = 1;
inline bool PerfettoMetatrace::has_event_id() const {
  return record_type_case() == kEventId;
}
inline void PerfettoMetatrace::set_has_event_id() {
  _oneof_case_[0] = kEventId;
}
inline void PerfettoMetatrace::clear_event_id() {
  if (has_event_id()) {
    record_type_.event_id_ = 0u;
    clear_has_record_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfettoMetatrace::event_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_id)
  if (has_event_id()) {
    return record_type_.event_id_;
  }
  return 0u;
}
inline void PerfettoMetatrace::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_event_id()) {
    clear_record_type();
    set_has_event_id();
  }
  record_type_.event_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_id)
}

// optional uint32 counter_id = 2;
inline bool PerfettoMetatrace::has_counter_id() const {
  return record_type_case() == kCounterId;
}
inline void PerfettoMetatrace::set_has_counter_id() {
  _oneof_case_[0] = kCounterId;
}
inline void PerfettoMetatrace::clear_counter_id() {
  if (has_counter_id()) {
    record_type_.counter_id_ = 0u;
    clear_has_record_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfettoMetatrace::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_id)
  if (has_counter_id()) {
    return record_type_.counter_id_;
  }
  return 0u;
}
inline void PerfettoMetatrace::set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_counter_id()) {
    clear_record_type();
    set_has_counter_id();
  }
  record_type_.counter_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_id)
}

// optional string event_name = 8;
inline bool PerfettoMetatrace::has_event_name() const {
  return record_type_case() == kEventName;
}
inline void PerfettoMetatrace::set_has_event_name() {
  _oneof_case_[0] = kEventName;
}
inline void PerfettoMetatrace::clear_event_name() {
  if (has_event_name()) {
    record_type_.event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_record_type();
  }
}
inline const std::string& PerfettoMetatrace::event_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_name)
  if (has_event_name()) {
    return record_type_.event_name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PerfettoMetatrace::set_event_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_name)
  if (!has_event_name()) {
    clear_record_type();
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_name)
}
inline void PerfettoMetatrace::set_event_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_name)
  if (!has_event_name()) {
    clear_record_type();
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfettoMetatrace.event_name)
}
inline void PerfettoMetatrace::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_event_name()) {
    clear_record_type();
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfettoMetatrace.event_name)
}
inline void PerfettoMetatrace::set_event_name(const char* value, size_t size) {
  if (!has_event_name()) {
    clear_record_type();
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfettoMetatrace.event_name)
}
inline std::string* PerfettoMetatrace::mutable_event_name() {
  if (!has_event_name()) {
    clear_record_type();
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.event_name)
  return record_type_.event_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfettoMetatrace::release_event_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.event_name)
  if (has_event_name()) {
    clear_has_record_type();
    return record_type_.event_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void PerfettoMetatrace::set_allocated_event_name(std::string* event_name) {
  if (has_record_type()) {
    clear_record_type();
  }
  if (event_name != nullptr) {
    set_has_event_name();
    record_type_.event_name_.UnsafeSetDefault(event_name);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.event_name)
}

// optional string counter_name = 9;
inline bool PerfettoMetatrace::has_counter_name() const {
  return record_type_case() == kCounterName;
}
inline void PerfettoMetatrace::set_has_counter_name() {
  _oneof_case_[0] = kCounterName;
}
inline void PerfettoMetatrace::clear_counter_name() {
  if (has_counter_name()) {
    record_type_.counter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_record_type();
  }
}
inline const std::string& PerfettoMetatrace::counter_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_name)
  if (has_counter_name()) {
    return record_type_.counter_name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PerfettoMetatrace::set_counter_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_name)
  if (!has_counter_name()) {
    clear_record_type();
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_name)
}
inline void PerfettoMetatrace::set_counter_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_name)
  if (!has_counter_name()) {
    clear_record_type();
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfettoMetatrace.counter_name)
}
inline void PerfettoMetatrace::set_counter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_counter_name()) {
    clear_record_type();
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfettoMetatrace.counter_name)
}
inline void PerfettoMetatrace::set_counter_name(const char* value, size_t size) {
  if (!has_counter_name()) {
    clear_record_type();
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  record_type_.counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfettoMetatrace.counter_name)
}
inline std::string* PerfettoMetatrace::mutable_counter_name() {
  if (!has_counter_name()) {
    clear_record_type();
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.counter_name)
  return record_type_.counter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfettoMetatrace::release_counter_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.counter_name)
  if (has_counter_name()) {
    clear_has_record_type();
    return record_type_.counter_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void PerfettoMetatrace::set_allocated_counter_name(std::string* counter_name) {
  if (has_record_type()) {
    clear_record_type();
  }
  if (counter_name != nullptr) {
    set_has_counter_name();
    record_type_.counter_name_.UnsafeSetDefault(counter_name);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.counter_name)
}

// optional uint32 event_duration_ns = 3;
inline bool PerfettoMetatrace::has_event_duration_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfettoMetatrace::clear_event_duration_ns() {
  event_duration_ns_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfettoMetatrace::event_duration_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_duration_ns)
  return event_duration_ns_;
}
inline void PerfettoMetatrace::set_event_duration_ns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_duration_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_duration_ns)
}

// optional int32 counter_value = 4;
inline bool PerfettoMetatrace::has_counter_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfettoMetatrace::clear_counter_value() {
  counter_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfettoMetatrace::counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_value)
  return counter_value_;
}
inline void PerfettoMetatrace::set_counter_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  counter_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_value)
}

// optional uint32 thread_id = 5;
inline bool PerfettoMetatrace::has_thread_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfettoMetatrace::clear_thread_id() {
  thread_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfettoMetatrace::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.thread_id)
  return thread_id_;
}
inline void PerfettoMetatrace::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.thread_id)
}

// optional bool has_overruns = 6;
inline bool PerfettoMetatrace::has_has_overruns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfettoMetatrace::clear_has_overruns() {
  has_overruns_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PerfettoMetatrace::has_overruns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.has_overruns)
  return has_overruns_;
}
inline void PerfettoMetatrace::set_has_overruns(bool value) {
  _has_bits_[0] |= 0x00000008u;
  has_overruns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.has_overruns)
}

// repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
inline int PerfettoMetatrace::args_size() const {
  return args_.size();
}
inline void PerfettoMetatrace::clear_args() {
  args_.Clear();
}
inline ::perfetto::protos::PerfettoMetatrace_Arg* PerfettoMetatrace::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >*
PerfettoMetatrace::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfettoMetatrace.args)
  return &args_;
}
inline const ::perfetto::protos::PerfettoMetatrace_Arg& PerfettoMetatrace::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.args)
  return args_.Get(index);
}
inline ::perfetto::protos::PerfettoMetatrace_Arg* PerfettoMetatrace::add_args() {
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfettoMetatrace.args)
  return args_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >&
PerfettoMetatrace::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfettoMetatrace.args)
  return args_;
}

inline bool PerfettoMetatrace::has_record_type() const {
  return record_type_case() != RECORD_TYPE_NOT_SET;
}
inline void PerfettoMetatrace::clear_has_record_type() {
  _oneof_case_[0] = RECORD_TYPE_NOT_SET;
}
inline PerfettoMetatrace::RecordTypeCase PerfettoMetatrace::record_type_case() const {
  return PerfettoMetatrace::RecordTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto
