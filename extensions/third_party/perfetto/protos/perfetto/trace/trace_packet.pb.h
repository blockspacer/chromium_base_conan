// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/trace_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/common/trace_stats.pb.h"
#include "protos/perfetto/config/trace_config.pb.h"
#include "protos/perfetto/trace/extension_descriptor.pb.h"
#include "protos/perfetto/trace/android/android_log.pb.h"
#include "protos/perfetto/trace/android/frame_timeline_event.pb.h"
#include "protos/perfetto/trace/android/gpu_mem_event.pb.h"
#include "protos/perfetto/trace/android/graphics_frame_event.pb.h"
#include "protos/perfetto/trace/android/initial_display_state.pb.h"
#include "protos/perfetto/trace/android/packages_list.pb.h"
#include "protos/perfetto/trace/chrome/chrome_benchmark_metadata.pb.h"
#include "protos/perfetto/trace/chrome/chrome_metadata.pb.h"
#include "protos/perfetto/trace/chrome/chrome_trace_event.pb.h"
#include "protos/perfetto/trace/clock_snapshot.pb.h"
#include "protos/perfetto/trace/filesystem/inode_file_map.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"
#include "protos/perfetto/trace/gpu/gpu_counter_event.pb.h"
#include "protos/perfetto/trace/gpu/gpu_log.pb.h"
#include "protos/perfetto/trace/gpu/gpu_render_stage_event.pb.h"
#include "protos/perfetto/trace/gpu/vulkan_memory_event.pb.h"
#include "protos/perfetto/trace/gpu/vulkan_api_event.pb.h"
#include "protos/perfetto/trace/interned_data/interned_data.pb.h"
#include "protos/perfetto/trace/memory_graph.pb.h"
#include "protos/perfetto/trace/perfetto/perfetto_metatrace.pb.h"
#include "protos/perfetto/trace/perfetto/tracing_service_event.pb.h"
#include "protos/perfetto/trace/power/battery_counters.pb.h"
#include "protos/perfetto/trace/power/power_rails.pb.h"
#include "protos/perfetto/trace/profiling/deobfuscation.pb.h"
#include "protos/perfetto/trace/profiling/heap_graph.pb.h"
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
#include "protos/perfetto/trace/profiling/profile_packet.pb.h"
#include "protos/perfetto/trace/profiling/smaps.pb.h"
#include "protos/perfetto/trace/ps/process_stats.pb.h"
#include "protos/perfetto/trace/ps/process_tree.pb.h"
#include "protos/perfetto/trace/sys_stats/sys_stats.pb.h"
#include "protos/perfetto/trace/system_info.pb.h"
#include "protos/perfetto/trace/system_info/cpu_info.pb.h"
#include "protos/perfetto/trace/trace_packet_defaults.pb.h"
#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/track_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/track_event.pb.h"
#include "protos/perfetto/trace/trigger.pb.h"
#include "protos/perfetto/trace/test_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TracePacket;
class TracePacketDefaultTypeInternal;
extern TracePacketDefaultTypeInternal _TracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TracePacket* Arena::CreateMaybeMessage<::perfetto::protos::TracePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TracePacket_SequenceFlags : int {
  TracePacket_SequenceFlags_SEQ_UNSPECIFIED = 0,
  TracePacket_SequenceFlags_SEQ_INCREMENTAL_STATE_CLEARED = 1,
  TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE = 2
};
bool TracePacket_SequenceFlags_IsValid(int value);
constexpr TracePacket_SequenceFlags TracePacket_SequenceFlags_SequenceFlags_MIN = TracePacket_SequenceFlags_SEQ_UNSPECIFIED;
constexpr TracePacket_SequenceFlags TracePacket_SequenceFlags_SequenceFlags_MAX = TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE;
constexpr int TracePacket_SequenceFlags_SequenceFlags_ARRAYSIZE = TracePacket_SequenceFlags_SequenceFlags_MAX + 1;

const std::string& TracePacket_SequenceFlags_Name(TracePacket_SequenceFlags value);
template<typename T>
inline const std::string& TracePacket_SequenceFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TracePacket_SequenceFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TracePacket_SequenceFlags_Name.");
  return TracePacket_SequenceFlags_Name(static_cast<TracePacket_SequenceFlags>(enum_t_value));
}
bool TracePacket_SequenceFlags_Parse(
    const std::string& name, TracePacket_SequenceFlags* value);
// ===================================================================

class TracePacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracePacket) */ {
 public:
  TracePacket();
  virtual ~TracePacket();

  TracePacket(const TracePacket& from);
  TracePacket(TracePacket&& from) noexcept
    : TracePacket() {
    *this = ::std::move(from);
  }

  inline TracePacket& operator=(const TracePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracePacket& operator=(TracePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracePacket& default_instance();

  enum DataCase {
    kProcessTree = 2,
    kProcessStats = 9,
    kInodeFileMap = 4,
    kChromeEvents = 5,
    kClockSnapshot = 6,
    kSysStats = 7,
    kTrackEvent = 11,
    kTraceConfig = 33,
    kFtraceStats = 34,
    kTraceStats = 35,
    kProfilePacket = 37,
    kStreamingAllocation = 74,
    kStreamingFree = 75,
    kBattery = 38,
    kPowerRails = 40,
    kAndroidLog = 39,
    kSystemInfo = 45,
    kTrigger = 46,
    kPackagesList = 47,
    kChromeBenchmarkMetadata = 48,
    kPerfettoMetatrace = 49,
    kChromeMetadata = 51,
    kGpuCounterEvent = 52,
    kGpuRenderStageEvent = 53,
    kStreamingProfilePacket = 54,
    kHeapGraph = 56,
    kGraphicsFrameEvent = 57,
    kVulkanMemoryEvent = 62,
    kGpuLog = 63,
    kVulkanApiEvent = 65,
    kPerfSample = 66,
    kCpuInfo = 67,
    kSmapsPacket = 68,
    kServiceEvent = 69,
    kInitialDisplayState = 70,
    kGpuMemTotalEvent = 71,
    kMemoryTrackerSnapshot = 73,
    kFrameTimelineEvent = 76,
    kProfiledFrameSymbols = 55,
    kModuleSymbols = 61,
    kDeobfuscationMapping = 64,
    kTrackDescriptor = 60,
    kProcessDescriptor = 43,
    kThreadDescriptor = 44,
    kFtraceEvents = 1,
    kSynchronizationMarker = 36,
    kCompressedPackets = 50,
    kExtensionDescriptor = 72,
    kForTesting = 900,
    DATA_NOT_SET = 0,
  };

  enum OptionalTrustedUidCase {
    kTrustedUid = 3,
    OPTIONAL_TRUSTED_UID_NOT_SET = 0,
  };

  enum OptionalTrustedPacketSequenceIdCase {
    kTrustedPacketSequenceId = 10,
    OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracePacket* internal_default_instance() {
    return reinterpret_cast<const TracePacket*>(
               &_TracePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TracePacket& a, TracePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TracePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracePacket* New() const final {
    return CreateMaybeMessage<TracePacket>(nullptr);
  }

  TracePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracePacket& from);
  void MergeFrom(const TracePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TracePacket_SequenceFlags SequenceFlags;
  static constexpr SequenceFlags SEQ_UNSPECIFIED =
    TracePacket_SequenceFlags_SEQ_UNSPECIFIED;
  static constexpr SequenceFlags SEQ_INCREMENTAL_STATE_CLEARED =
    TracePacket_SequenceFlags_SEQ_INCREMENTAL_STATE_CLEARED;
  static constexpr SequenceFlags SEQ_NEEDS_INCREMENTAL_STATE =
    TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE;
  static inline bool SequenceFlags_IsValid(int value) {
    return TracePacket_SequenceFlags_IsValid(value);
  }
  static constexpr SequenceFlags SequenceFlags_MIN =
    TracePacket_SequenceFlags_SequenceFlags_MIN;
  static constexpr SequenceFlags SequenceFlags_MAX =
    TracePacket_SequenceFlags_SequenceFlags_MAX;
  static constexpr int SequenceFlags_ARRAYSIZE =
    TracePacket_SequenceFlags_SequenceFlags_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SequenceFlags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SequenceFlags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SequenceFlags_Name.");
    return TracePacket_SequenceFlags_Name(enum_t_value);
  }
  static inline bool SequenceFlags_Parse(const std::string& name,
      SequenceFlags* value) {
    return TracePacket_SequenceFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInternedDataFieldNumber = 12,
    kTracePacketDefaultsFieldNumber = 59,
    kTimestampFieldNumber = 8,
    kTimestampClockIdFieldNumber = 58,
    kSequenceFlagsFieldNumber = 13,
    kIncrementalStateClearedFieldNumber = 41,
    kPreviousPacketDroppedFieldNumber = 42,
    kProcessTreeFieldNumber = 2,
    kProcessStatsFieldNumber = 9,
    kInodeFileMapFieldNumber = 4,
    kChromeEventsFieldNumber = 5,
    kClockSnapshotFieldNumber = 6,
    kSysStatsFieldNumber = 7,
    kTrackEventFieldNumber = 11,
    kTraceConfigFieldNumber = 33,
    kFtraceStatsFieldNumber = 34,
    kTraceStatsFieldNumber = 35,
    kProfilePacketFieldNumber = 37,
    kStreamingAllocationFieldNumber = 74,
    kStreamingFreeFieldNumber = 75,
    kBatteryFieldNumber = 38,
    kPowerRailsFieldNumber = 40,
    kAndroidLogFieldNumber = 39,
    kSystemInfoFieldNumber = 45,
    kTriggerFieldNumber = 46,
    kPackagesListFieldNumber = 47,
    kChromeBenchmarkMetadataFieldNumber = 48,
    kPerfettoMetatraceFieldNumber = 49,
    kChromeMetadataFieldNumber = 51,
    kGpuCounterEventFieldNumber = 52,
    kGpuRenderStageEventFieldNumber = 53,
    kStreamingProfilePacketFieldNumber = 54,
    kHeapGraphFieldNumber = 56,
    kGraphicsFrameEventFieldNumber = 57,
    kVulkanMemoryEventFieldNumber = 62,
    kGpuLogFieldNumber = 63,
    kVulkanApiEventFieldNumber = 65,
    kPerfSampleFieldNumber = 66,
    kCpuInfoFieldNumber = 67,
    kSmapsPacketFieldNumber = 68,
    kServiceEventFieldNumber = 69,
    kInitialDisplayStateFieldNumber = 70,
    kGpuMemTotalEventFieldNumber = 71,
    kMemoryTrackerSnapshotFieldNumber = 73,
    kFrameTimelineEventFieldNumber = 76,
    kProfiledFrameSymbolsFieldNumber = 55,
    kModuleSymbolsFieldNumber = 61,
    kDeobfuscationMappingFieldNumber = 64,
    kTrackDescriptorFieldNumber = 60,
    kProcessDescriptorFieldNumber = 43,
    kThreadDescriptorFieldNumber = 44,
    kFtraceEventsFieldNumber = 1,
    kSynchronizationMarkerFieldNumber = 36,
    kCompressedPacketsFieldNumber = 50,
    kExtensionDescriptorFieldNumber = 72,
    kForTestingFieldNumber = 900,
    kTrustedUidFieldNumber = 3,
    kTrustedPacketSequenceIdFieldNumber = 10,
  };
  // optional .perfetto.protos.InternedData interned_data = 12;
  bool has_interned_data() const;
  void clear_interned_data();
  const ::perfetto::protos::InternedData& interned_data() const;
  ::perfetto::protos::InternedData* release_interned_data();
  ::perfetto::protos::InternedData* mutable_interned_data();
  void set_allocated_interned_data(::perfetto::protos::InternedData* interned_data);

  // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
  bool has_trace_packet_defaults() const;
  void clear_trace_packet_defaults();
  const ::perfetto::protos::TracePacketDefaults& trace_packet_defaults() const;
  ::perfetto::protos::TracePacketDefaults* release_trace_packet_defaults();
  ::perfetto::protos::TracePacketDefaults* mutable_trace_packet_defaults();
  void set_allocated_trace_packet_defaults(::perfetto::protos::TracePacketDefaults* trace_packet_defaults);

  // optional uint64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 timestamp_clock_id = 58;
  bool has_timestamp_clock_id() const;
  void clear_timestamp_clock_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_clock_id() const;
  void set_timestamp_clock_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 sequence_flags = 13;
  bool has_sequence_flags() const;
  void clear_sequence_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_flags() const;
  void set_sequence_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool incremental_state_cleared = 41;
  bool has_incremental_state_cleared() const;
  void clear_incremental_state_cleared();
  bool incremental_state_cleared() const;
  void set_incremental_state_cleared(bool value);

  // optional bool previous_packet_dropped = 42;
  bool has_previous_packet_dropped() const;
  void clear_previous_packet_dropped();
  bool previous_packet_dropped() const;
  void set_previous_packet_dropped(bool value);

  // optional .perfetto.protos.ProcessTree process_tree = 2;
  bool has_process_tree() const;
  void clear_process_tree();
  const ::perfetto::protos::ProcessTree& process_tree() const;
  ::perfetto::protos::ProcessTree* release_process_tree();
  ::perfetto::protos::ProcessTree* mutable_process_tree();
  void set_allocated_process_tree(::perfetto::protos::ProcessTree* process_tree);

  // optional .perfetto.protos.ProcessStats process_stats = 9;
  bool has_process_stats() const;
  void clear_process_stats();
  const ::perfetto::protos::ProcessStats& process_stats() const;
  ::perfetto::protos::ProcessStats* release_process_stats();
  ::perfetto::protos::ProcessStats* mutable_process_stats();
  void set_allocated_process_stats(::perfetto::protos::ProcessStats* process_stats);

  // optional .perfetto.protos.InodeFileMap inode_file_map = 4;
  bool has_inode_file_map() const;
  void clear_inode_file_map();
  const ::perfetto::protos::InodeFileMap& inode_file_map() const;
  ::perfetto::protos::InodeFileMap* release_inode_file_map();
  ::perfetto::protos::InodeFileMap* mutable_inode_file_map();
  void set_allocated_inode_file_map(::perfetto::protos::InodeFileMap* inode_file_map);

  // optional .perfetto.protos.ChromeEventBundle chrome_events = 5;
  bool has_chrome_events() const;
  void clear_chrome_events();
  const ::perfetto::protos::ChromeEventBundle& chrome_events() const;
  ::perfetto::protos::ChromeEventBundle* release_chrome_events();
  ::perfetto::protos::ChromeEventBundle* mutable_chrome_events();
  void set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events);

  // optional .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  bool has_clock_snapshot() const;
  void clear_clock_snapshot();
  const ::perfetto::protos::ClockSnapshot& clock_snapshot() const;
  ::perfetto::protos::ClockSnapshot* release_clock_snapshot();
  ::perfetto::protos::ClockSnapshot* mutable_clock_snapshot();
  void set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot);

  // optional .perfetto.protos.SysStats sys_stats = 7;
  bool has_sys_stats() const;
  void clear_sys_stats();
  const ::perfetto::protos::SysStats& sys_stats() const;
  ::perfetto::protos::SysStats* release_sys_stats();
  ::perfetto::protos::SysStats* mutable_sys_stats();
  void set_allocated_sys_stats(::perfetto::protos::SysStats* sys_stats);

  // optional .perfetto.protos.TrackEvent track_event = 11;
  bool has_track_event() const;
  void clear_track_event();
  const ::perfetto::protos::TrackEvent& track_event() const;
  ::perfetto::protos::TrackEvent* release_track_event();
  ::perfetto::protos::TrackEvent* mutable_track_event();
  void set_allocated_track_event(::perfetto::protos::TrackEvent* track_event);

  // optional .perfetto.protos.TraceConfig trace_config = 33;
  bool has_trace_config() const;
  void clear_trace_config();
  const ::perfetto::protos::TraceConfig& trace_config() const;
  ::perfetto::protos::TraceConfig* release_trace_config();
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);

  // optional .perfetto.protos.FtraceStats ftrace_stats = 34;
  bool has_ftrace_stats() const;
  void clear_ftrace_stats();
  const ::perfetto::protos::FtraceStats& ftrace_stats() const;
  ::perfetto::protos::FtraceStats* release_ftrace_stats();
  ::perfetto::protos::FtraceStats* mutable_ftrace_stats();
  void set_allocated_ftrace_stats(::perfetto::protos::FtraceStats* ftrace_stats);

  // optional .perfetto.protos.TraceStats trace_stats = 35;
  bool has_trace_stats() const;
  void clear_trace_stats();
  const ::perfetto::protos::TraceStats& trace_stats() const;
  ::perfetto::protos::TraceStats* release_trace_stats();
  ::perfetto::protos::TraceStats* mutable_trace_stats();
  void set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats);

  // optional .perfetto.protos.ProfilePacket profile_packet = 37;
  bool has_profile_packet() const;
  void clear_profile_packet();
  const ::perfetto::protos::ProfilePacket& profile_packet() const;
  ::perfetto::protos::ProfilePacket* release_profile_packet();
  ::perfetto::protos::ProfilePacket* mutable_profile_packet();
  void set_allocated_profile_packet(::perfetto::protos::ProfilePacket* profile_packet);

  // optional .perfetto.protos.StreamingAllocation streaming_allocation = 74;
  bool has_streaming_allocation() const;
  void clear_streaming_allocation();
  const ::perfetto::protos::StreamingAllocation& streaming_allocation() const;
  ::perfetto::protos::StreamingAllocation* release_streaming_allocation();
  ::perfetto::protos::StreamingAllocation* mutable_streaming_allocation();
  void set_allocated_streaming_allocation(::perfetto::protos::StreamingAllocation* streaming_allocation);

  // optional .perfetto.protos.StreamingFree streaming_free = 75;
  bool has_streaming_free() const;
  void clear_streaming_free();
  const ::perfetto::protos::StreamingFree& streaming_free() const;
  ::perfetto::protos::StreamingFree* release_streaming_free();
  ::perfetto::protos::StreamingFree* mutable_streaming_free();
  void set_allocated_streaming_free(::perfetto::protos::StreamingFree* streaming_free);

  // optional .perfetto.protos.BatteryCounters battery = 38;
  bool has_battery() const;
  void clear_battery();
  const ::perfetto::protos::BatteryCounters& battery() const;
  ::perfetto::protos::BatteryCounters* release_battery();
  ::perfetto::protos::BatteryCounters* mutable_battery();
  void set_allocated_battery(::perfetto::protos::BatteryCounters* battery);

  // optional .perfetto.protos.PowerRails power_rails = 40;
  bool has_power_rails() const;
  void clear_power_rails();
  const ::perfetto::protos::PowerRails& power_rails() const;
  ::perfetto::protos::PowerRails* release_power_rails();
  ::perfetto::protos::PowerRails* mutable_power_rails();
  void set_allocated_power_rails(::perfetto::protos::PowerRails* power_rails);

  // optional .perfetto.protos.AndroidLogPacket android_log = 39;
  bool has_android_log() const;
  void clear_android_log();
  const ::perfetto::protos::AndroidLogPacket& android_log() const;
  ::perfetto::protos::AndroidLogPacket* release_android_log();
  ::perfetto::protos::AndroidLogPacket* mutable_android_log();
  void set_allocated_android_log(::perfetto::protos::AndroidLogPacket* android_log);

  // optional .perfetto.protos.SystemInfo system_info = 45;
  bool has_system_info() const;
  void clear_system_info();
  const ::perfetto::protos::SystemInfo& system_info() const;
  ::perfetto::protos::SystemInfo* release_system_info();
  ::perfetto::protos::SystemInfo* mutable_system_info();
  void set_allocated_system_info(::perfetto::protos::SystemInfo* system_info);

  // optional .perfetto.protos.Trigger trigger = 46;
  bool has_trigger() const;
  void clear_trigger();
  const ::perfetto::protos::Trigger& trigger() const;
  ::perfetto::protos::Trigger* release_trigger();
  ::perfetto::protos::Trigger* mutable_trigger();
  void set_allocated_trigger(::perfetto::protos::Trigger* trigger);

  // optional .perfetto.protos.PackagesList packages_list = 47;
  bool has_packages_list() const;
  void clear_packages_list();
  const ::perfetto::protos::PackagesList& packages_list() const;
  ::perfetto::protos::PackagesList* release_packages_list();
  ::perfetto::protos::PackagesList* mutable_packages_list();
  void set_allocated_packages_list(::perfetto::protos::PackagesList* packages_list);

  // optional .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
  bool has_chrome_benchmark_metadata() const;
  void clear_chrome_benchmark_metadata();
  const ::perfetto::protos::ChromeBenchmarkMetadata& chrome_benchmark_metadata() const;
  ::perfetto::protos::ChromeBenchmarkMetadata* release_chrome_benchmark_metadata();
  ::perfetto::protos::ChromeBenchmarkMetadata* mutable_chrome_benchmark_metadata();
  void set_allocated_chrome_benchmark_metadata(::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata);

  // optional .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
  bool has_perfetto_metatrace() const;
  void clear_perfetto_metatrace();
  const ::perfetto::protos::PerfettoMetatrace& perfetto_metatrace() const;
  ::perfetto::protos::PerfettoMetatrace* release_perfetto_metatrace();
  ::perfetto::protos::PerfettoMetatrace* mutable_perfetto_metatrace();
  void set_allocated_perfetto_metatrace(::perfetto::protos::PerfettoMetatrace* perfetto_metatrace);

  // optional .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
  bool has_chrome_metadata() const;
  void clear_chrome_metadata();
  const ::perfetto::protos::ChromeMetadataPacket& chrome_metadata() const;
  ::perfetto::protos::ChromeMetadataPacket* release_chrome_metadata();
  ::perfetto::protos::ChromeMetadataPacket* mutable_chrome_metadata();
  void set_allocated_chrome_metadata(::perfetto::protos::ChromeMetadataPacket* chrome_metadata);

  // optional .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
  bool has_gpu_counter_event() const;
  void clear_gpu_counter_event();
  const ::perfetto::protos::GpuCounterEvent& gpu_counter_event() const;
  ::perfetto::protos::GpuCounterEvent* release_gpu_counter_event();
  ::perfetto::protos::GpuCounterEvent* mutable_gpu_counter_event();
  void set_allocated_gpu_counter_event(::perfetto::protos::GpuCounterEvent* gpu_counter_event);

  // optional .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
  bool has_gpu_render_stage_event() const;
  void clear_gpu_render_stage_event();
  const ::perfetto::protos::GpuRenderStageEvent& gpu_render_stage_event() const;
  ::perfetto::protos::GpuRenderStageEvent* release_gpu_render_stage_event();
  ::perfetto::protos::GpuRenderStageEvent* mutable_gpu_render_stage_event();
  void set_allocated_gpu_render_stage_event(::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event);

  // optional .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
  bool has_streaming_profile_packet() const;
  void clear_streaming_profile_packet();
  const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet() const;
  ::perfetto::protos::StreamingProfilePacket* release_streaming_profile_packet();
  ::perfetto::protos::StreamingProfilePacket* mutable_streaming_profile_packet();
  void set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet);

  // optional .perfetto.protos.HeapGraph heap_graph = 56;
  bool has_heap_graph() const;
  void clear_heap_graph();
  const ::perfetto::protos::HeapGraph& heap_graph() const;
  ::perfetto::protos::HeapGraph* release_heap_graph();
  ::perfetto::protos::HeapGraph* mutable_heap_graph();
  void set_allocated_heap_graph(::perfetto::protos::HeapGraph* heap_graph);

  // optional .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
  bool has_graphics_frame_event() const;
  void clear_graphics_frame_event();
  const ::perfetto::protos::GraphicsFrameEvent& graphics_frame_event() const;
  ::perfetto::protos::GraphicsFrameEvent* release_graphics_frame_event();
  ::perfetto::protos::GraphicsFrameEvent* mutable_graphics_frame_event();
  void set_allocated_graphics_frame_event(::perfetto::protos::GraphicsFrameEvent* graphics_frame_event);

  // optional .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
  bool has_vulkan_memory_event() const;
  void clear_vulkan_memory_event();
  const ::perfetto::protos::VulkanMemoryEvent& vulkan_memory_event() const;
  ::perfetto::protos::VulkanMemoryEvent* release_vulkan_memory_event();
  ::perfetto::protos::VulkanMemoryEvent* mutable_vulkan_memory_event();
  void set_allocated_vulkan_memory_event(::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event);

  // optional .perfetto.protos.GpuLog gpu_log = 63;
  bool has_gpu_log() const;
  void clear_gpu_log();
  const ::perfetto::protos::GpuLog& gpu_log() const;
  ::perfetto::protos::GpuLog* release_gpu_log();
  ::perfetto::protos::GpuLog* mutable_gpu_log();
  void set_allocated_gpu_log(::perfetto::protos::GpuLog* gpu_log);

  // optional .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
  bool has_vulkan_api_event() const;
  void clear_vulkan_api_event();
  const ::perfetto::protos::VulkanApiEvent& vulkan_api_event() const;
  ::perfetto::protos::VulkanApiEvent* release_vulkan_api_event();
  ::perfetto::protos::VulkanApiEvent* mutable_vulkan_api_event();
  void set_allocated_vulkan_api_event(::perfetto::protos::VulkanApiEvent* vulkan_api_event);

  // optional .perfetto.protos.PerfSample perf_sample = 66;
  bool has_perf_sample() const;
  void clear_perf_sample();
  const ::perfetto::protos::PerfSample& perf_sample() const;
  ::perfetto::protos::PerfSample* release_perf_sample();
  ::perfetto::protos::PerfSample* mutable_perf_sample();
  void set_allocated_perf_sample(::perfetto::protos::PerfSample* perf_sample);

  // optional .perfetto.protos.CpuInfo cpu_info = 67;
  bool has_cpu_info() const;
  void clear_cpu_info();
  const ::perfetto::protos::CpuInfo& cpu_info() const;
  ::perfetto::protos::CpuInfo* release_cpu_info();
  ::perfetto::protos::CpuInfo* mutable_cpu_info();
  void set_allocated_cpu_info(::perfetto::protos::CpuInfo* cpu_info);

  // optional .perfetto.protos.SmapsPacket smaps_packet = 68;
  bool has_smaps_packet() const;
  void clear_smaps_packet();
  const ::perfetto::protos::SmapsPacket& smaps_packet() const;
  ::perfetto::protos::SmapsPacket* release_smaps_packet();
  ::perfetto::protos::SmapsPacket* mutable_smaps_packet();
  void set_allocated_smaps_packet(::perfetto::protos::SmapsPacket* smaps_packet);

  // optional .perfetto.protos.TracingServiceEvent service_event = 69;
  bool has_service_event() const;
  void clear_service_event();
  const ::perfetto::protos::TracingServiceEvent& service_event() const;
  ::perfetto::protos::TracingServiceEvent* release_service_event();
  ::perfetto::protos::TracingServiceEvent* mutable_service_event();
  void set_allocated_service_event(::perfetto::protos::TracingServiceEvent* service_event);

  // optional .perfetto.protos.InitialDisplayState initial_display_state = 70;
  bool has_initial_display_state() const;
  void clear_initial_display_state();
  const ::perfetto::protos::InitialDisplayState& initial_display_state() const;
  ::perfetto::protos::InitialDisplayState* release_initial_display_state();
  ::perfetto::protos::InitialDisplayState* mutable_initial_display_state();
  void set_allocated_initial_display_state(::perfetto::protos::InitialDisplayState* initial_display_state);

  // optional .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
  bool has_gpu_mem_total_event() const;
  void clear_gpu_mem_total_event();
  const ::perfetto::protos::GpuMemTotalEvent& gpu_mem_total_event() const;
  ::perfetto::protos::GpuMemTotalEvent* release_gpu_mem_total_event();
  ::perfetto::protos::GpuMemTotalEvent* mutable_gpu_mem_total_event();
  void set_allocated_gpu_mem_total_event(::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event);

  // optional .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
  bool has_memory_tracker_snapshot() const;
  void clear_memory_tracker_snapshot();
  const ::perfetto::protos::MemoryTrackerSnapshot& memory_tracker_snapshot() const;
  ::perfetto::protos::MemoryTrackerSnapshot* release_memory_tracker_snapshot();
  ::perfetto::protos::MemoryTrackerSnapshot* mutable_memory_tracker_snapshot();
  void set_allocated_memory_tracker_snapshot(::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot);

  // optional .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
  bool has_frame_timeline_event() const;
  void clear_frame_timeline_event();
  const ::perfetto::protos::FrameTimelineEvent& frame_timeline_event() const;
  ::perfetto::protos::FrameTimelineEvent* release_frame_timeline_event();
  ::perfetto::protos::FrameTimelineEvent* mutable_frame_timeline_event();
  void set_allocated_frame_timeline_event(::perfetto::protos::FrameTimelineEvent* frame_timeline_event);

  // optional .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
  bool has_profiled_frame_symbols() const;
  void clear_profiled_frame_symbols();
  const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols() const;
  ::perfetto::protos::ProfiledFrameSymbols* release_profiled_frame_symbols();
  ::perfetto::protos::ProfiledFrameSymbols* mutable_profiled_frame_symbols();
  void set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols);

  // optional .perfetto.protos.ModuleSymbols module_symbols = 61;
  bool has_module_symbols() const;
  void clear_module_symbols();
  const ::perfetto::protos::ModuleSymbols& module_symbols() const;
  ::perfetto::protos::ModuleSymbols* release_module_symbols();
  ::perfetto::protos::ModuleSymbols* mutable_module_symbols();
  void set_allocated_module_symbols(::perfetto::protos::ModuleSymbols* module_symbols);

  // optional .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
  bool has_deobfuscation_mapping() const;
  void clear_deobfuscation_mapping();
  const ::perfetto::protos::DeobfuscationMapping& deobfuscation_mapping() const;
  ::perfetto::protos::DeobfuscationMapping* release_deobfuscation_mapping();
  ::perfetto::protos::DeobfuscationMapping* mutable_deobfuscation_mapping();
  void set_allocated_deobfuscation_mapping(::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping);

  // optional .perfetto.protos.TrackDescriptor track_descriptor = 60;
  bool has_track_descriptor() const;
  void clear_track_descriptor();
  const ::perfetto::protos::TrackDescriptor& track_descriptor() const;
  ::perfetto::protos::TrackDescriptor* release_track_descriptor();
  ::perfetto::protos::TrackDescriptor* mutable_track_descriptor();
  void set_allocated_track_descriptor(::perfetto::protos::TrackDescriptor* track_descriptor);

  // optional .perfetto.protos.ProcessDescriptor process_descriptor = 43;
  bool has_process_descriptor() const;
  void clear_process_descriptor();
  const ::perfetto::protos::ProcessDescriptor& process_descriptor() const;
  ::perfetto::protos::ProcessDescriptor* release_process_descriptor();
  ::perfetto::protos::ProcessDescriptor* mutable_process_descriptor();
  void set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor);

  // optional .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
  bool has_thread_descriptor() const;
  void clear_thread_descriptor();
  const ::perfetto::protos::ThreadDescriptor& thread_descriptor() const;
  ::perfetto::protos::ThreadDescriptor* release_thread_descriptor();
  ::perfetto::protos::ThreadDescriptor* mutable_thread_descriptor();
  void set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor);

  // optional .perfetto.protos.FtraceEventBundle ftrace_events = 1;
  bool has_ftrace_events() const;
  void clear_ftrace_events();
  const ::perfetto::protos::FtraceEventBundle& ftrace_events() const;
  ::perfetto::protos::FtraceEventBundle* release_ftrace_events();
  ::perfetto::protos::FtraceEventBundle* mutable_ftrace_events();
  void set_allocated_ftrace_events(::perfetto::protos::FtraceEventBundle* ftrace_events);

  // optional bytes synchronization_marker = 36;
  bool has_synchronization_marker() const;
  void clear_synchronization_marker();
  const std::string& synchronization_marker() const;
  void set_synchronization_marker(const std::string& value);
  void set_synchronization_marker(std::string&& value);
  void set_synchronization_marker(const char* value);
  void set_synchronization_marker(const void* value, size_t size);
  std::string* mutable_synchronization_marker();
  std::string* release_synchronization_marker();
  void set_allocated_synchronization_marker(std::string* synchronization_marker);

  // optional bytes compressed_packets = 50;
  bool has_compressed_packets() const;
  void clear_compressed_packets();
  const std::string& compressed_packets() const;
  void set_compressed_packets(const std::string& value);
  void set_compressed_packets(std::string&& value);
  void set_compressed_packets(const char* value);
  void set_compressed_packets(const void* value, size_t size);
  std::string* mutable_compressed_packets();
  std::string* release_compressed_packets();
  void set_allocated_compressed_packets(std::string* compressed_packets);

  // optional .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
  bool has_extension_descriptor() const;
  void clear_extension_descriptor();
  const ::perfetto::protos::ExtensionDescriptor& extension_descriptor() const;
  ::perfetto::protos::ExtensionDescriptor* release_extension_descriptor();
  ::perfetto::protos::ExtensionDescriptor* mutable_extension_descriptor();
  void set_allocated_extension_descriptor(::perfetto::protos::ExtensionDescriptor* extension_descriptor);

  // optional .perfetto.protos.TestEvent for_testing = 900;
  bool has_for_testing() const;
  void clear_for_testing();
  const ::perfetto::protos::TestEvent& for_testing() const;
  ::perfetto::protos::TestEvent* release_for_testing();
  ::perfetto::protos::TestEvent* mutable_for_testing();
  void set_allocated_for_testing(::perfetto::protos::TestEvent* for_testing);

  // optional int32 trusted_uid = 3;
  bool has_trusted_uid() const;
  void clear_trusted_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 trusted_uid() const;
  void set_trusted_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trusted_packet_sequence_id = 10;
  bool has_trusted_packet_sequence_id() const;
  void clear_trusted_packet_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 trusted_packet_sequence_id() const;
  void set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  void clear_data();
  DataCase data_case() const;
  void clear_optional_trusted_uid();
  OptionalTrustedUidCase optional_trusted_uid_case() const;
  void clear_optional_trusted_packet_sequence_id();
  OptionalTrustedPacketSequenceIdCase optional_trusted_packet_sequence_id_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TracePacket)
 private:
  class _Internal;
  void set_has_process_tree();
  void set_has_process_stats();
  void set_has_inode_file_map();
  void set_has_chrome_events();
  void set_has_clock_snapshot();
  void set_has_sys_stats();
  void set_has_track_event();
  void set_has_trace_config();
  void set_has_ftrace_stats();
  void set_has_trace_stats();
  void set_has_profile_packet();
  void set_has_streaming_allocation();
  void set_has_streaming_free();
  void set_has_battery();
  void set_has_power_rails();
  void set_has_android_log();
  void set_has_system_info();
  void set_has_trigger();
  void set_has_packages_list();
  void set_has_chrome_benchmark_metadata();
  void set_has_perfetto_metatrace();
  void set_has_chrome_metadata();
  void set_has_gpu_counter_event();
  void set_has_gpu_render_stage_event();
  void set_has_streaming_profile_packet();
  void set_has_heap_graph();
  void set_has_graphics_frame_event();
  void set_has_vulkan_memory_event();
  void set_has_gpu_log();
  void set_has_vulkan_api_event();
  void set_has_perf_sample();
  void set_has_cpu_info();
  void set_has_smaps_packet();
  void set_has_service_event();
  void set_has_initial_display_state();
  void set_has_gpu_mem_total_event();
  void set_has_memory_tracker_snapshot();
  void set_has_frame_timeline_event();
  void set_has_profiled_frame_symbols();
  void set_has_module_symbols();
  void set_has_deobfuscation_mapping();
  void set_has_track_descriptor();
  void set_has_process_descriptor();
  void set_has_thread_descriptor();
  void set_has_ftrace_events();
  void set_has_synchronization_marker();
  void set_has_compressed_packets();
  void set_has_extension_descriptor();
  void set_has_for_testing();
  void set_has_trusted_uid();
  void set_has_trusted_packet_sequence_id();

  inline bool has_data() const;
  inline void clear_has_data();

  inline bool has_optional_trusted_uid() const;
  inline void clear_has_optional_trusted_uid();

  inline bool has_optional_trusted_packet_sequence_id() const;
  inline void clear_has_optional_trusted_packet_sequence_id();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::InternedData* interned_data_;
  ::perfetto::protos::TracePacketDefaults* trace_packet_defaults_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_clock_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_flags_;
  bool incremental_state_cleared_;
  bool previous_packet_dropped_;
  union DataUnion {
    DataUnion() {}
    ::perfetto::protos::ProcessTree* process_tree_;
    ::perfetto::protos::ProcessStats* process_stats_;
    ::perfetto::protos::InodeFileMap* inode_file_map_;
    ::perfetto::protos::ChromeEventBundle* chrome_events_;
    ::perfetto::protos::ClockSnapshot* clock_snapshot_;
    ::perfetto::protos::SysStats* sys_stats_;
    ::perfetto::protos::TrackEvent* track_event_;
    ::perfetto::protos::TraceConfig* trace_config_;
    ::perfetto::protos::FtraceStats* ftrace_stats_;
    ::perfetto::protos::TraceStats* trace_stats_;
    ::perfetto::protos::ProfilePacket* profile_packet_;
    ::perfetto::protos::StreamingAllocation* streaming_allocation_;
    ::perfetto::protos::StreamingFree* streaming_free_;
    ::perfetto::protos::BatteryCounters* battery_;
    ::perfetto::protos::PowerRails* power_rails_;
    ::perfetto::protos::AndroidLogPacket* android_log_;
    ::perfetto::protos::SystemInfo* system_info_;
    ::perfetto::protos::Trigger* trigger_;
    ::perfetto::protos::PackagesList* packages_list_;
    ::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata_;
    ::perfetto::protos::PerfettoMetatrace* perfetto_metatrace_;
    ::perfetto::protos::ChromeMetadataPacket* chrome_metadata_;
    ::perfetto::protos::GpuCounterEvent* gpu_counter_event_;
    ::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event_;
    ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet_;
    ::perfetto::protos::HeapGraph* heap_graph_;
    ::perfetto::protos::GraphicsFrameEvent* graphics_frame_event_;
    ::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event_;
    ::perfetto::protos::GpuLog* gpu_log_;
    ::perfetto::protos::VulkanApiEvent* vulkan_api_event_;
    ::perfetto::protos::PerfSample* perf_sample_;
    ::perfetto::protos::CpuInfo* cpu_info_;
    ::perfetto::protos::SmapsPacket* smaps_packet_;
    ::perfetto::protos::TracingServiceEvent* service_event_;
    ::perfetto::protos::InitialDisplayState* initial_display_state_;
    ::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event_;
    ::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot_;
    ::perfetto::protos::FrameTimelineEvent* frame_timeline_event_;
    ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols_;
    ::perfetto::protos::ModuleSymbols* module_symbols_;
    ::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping_;
    ::perfetto::protos::TrackDescriptor* track_descriptor_;
    ::perfetto::protos::ProcessDescriptor* process_descriptor_;
    ::perfetto::protos::ThreadDescriptor* thread_descriptor_;
    ::perfetto::protos::FtraceEventBundle* ftrace_events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronization_marker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_packets_;
    ::perfetto::protos::ExtensionDescriptor* extension_descriptor_;
    ::perfetto::protos::TestEvent* for_testing_;
  } data_;
  union OptionalTrustedUidUnion {
    OptionalTrustedUidUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 trusted_uid_;
  } optional_trusted_uid_;
  union OptionalTrustedPacketSequenceIdUnion {
    OptionalTrustedPacketSequenceIdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 trusted_packet_sequence_id_;
  } optional_trusted_packet_sequence_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TracePacket

// optional uint64 timestamp = 8;
inline bool TracePacket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracePacket::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TracePacket::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.timestamp)
  return timestamp_;
}
inline void TracePacket::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.timestamp)
}

// optional uint32 timestamp_clock_id = 58;
inline bool TracePacket::has_timestamp_clock_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TracePacket::clear_timestamp_clock_id() {
  timestamp_clock_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TracePacket::timestamp_clock_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.timestamp_clock_id)
  return timestamp_clock_id_;
}
inline void TracePacket::set_timestamp_clock_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_clock_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.timestamp_clock_id)
}

// optional .perfetto.protos.ProcessTree process_tree = 2;
inline bool TracePacket::has_process_tree() const {
  return data_case() == kProcessTree;
}
inline void TracePacket::set_has_process_tree() {
  _oneof_case_[0] = kProcessTree;
}
inline ::perfetto::protos::ProcessTree* TracePacket::release_process_tree() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_tree)
  if (has_process_tree()) {
    clear_has_data();
      ::perfetto::protos::ProcessTree* temp = data_.process_tree_;
    data_.process_tree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessTree& TracePacket::process_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_tree)
  return has_process_tree()
      ? *data_.process_tree_
      : *reinterpret_cast< ::perfetto::protos::ProcessTree*>(&::perfetto::protos::_ProcessTree_default_instance_);
}
inline ::perfetto::protos::ProcessTree* TracePacket::mutable_process_tree() {
  if (!has_process_tree()) {
    clear_data();
    set_has_process_tree();
    data_.process_tree_ = CreateMaybeMessage< ::perfetto::protos::ProcessTree >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_tree)
  return data_.process_tree_;
}

// optional .perfetto.protos.ProcessStats process_stats = 9;
inline bool TracePacket::has_process_stats() const {
  return data_case() == kProcessStats;
}
inline void TracePacket::set_has_process_stats() {
  _oneof_case_[0] = kProcessStats;
}
inline ::perfetto::protos::ProcessStats* TracePacket::release_process_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_stats)
  if (has_process_stats()) {
    clear_has_data();
      ::perfetto::protos::ProcessStats* temp = data_.process_stats_;
    data_.process_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessStats& TracePacket::process_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_stats)
  return has_process_stats()
      ? *data_.process_stats_
      : *reinterpret_cast< ::perfetto::protos::ProcessStats*>(&::perfetto::protos::_ProcessStats_default_instance_);
}
inline ::perfetto::protos::ProcessStats* TracePacket::mutable_process_stats() {
  if (!has_process_stats()) {
    clear_data();
    set_has_process_stats();
    data_.process_stats_ = CreateMaybeMessage< ::perfetto::protos::ProcessStats >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_stats)
  return data_.process_stats_;
}

// optional .perfetto.protos.InodeFileMap inode_file_map = 4;
inline bool TracePacket::has_inode_file_map() const {
  return data_case() == kInodeFileMap;
}
inline void TracePacket::set_has_inode_file_map() {
  _oneof_case_[0] = kInodeFileMap;
}
inline ::perfetto::protos::InodeFileMap* TracePacket::release_inode_file_map() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.inode_file_map)
  if (has_inode_file_map()) {
    clear_has_data();
      ::perfetto::protos::InodeFileMap* temp = data_.inode_file_map_;
    data_.inode_file_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::InodeFileMap& TracePacket::inode_file_map() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.inode_file_map)
  return has_inode_file_map()
      ? *data_.inode_file_map_
      : *reinterpret_cast< ::perfetto::protos::InodeFileMap*>(&::perfetto::protos::_InodeFileMap_default_instance_);
}
inline ::perfetto::protos::InodeFileMap* TracePacket::mutable_inode_file_map() {
  if (!has_inode_file_map()) {
    clear_data();
    set_has_inode_file_map();
    data_.inode_file_map_ = CreateMaybeMessage< ::perfetto::protos::InodeFileMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.inode_file_map)
  return data_.inode_file_map_;
}

// optional .perfetto.protos.ChromeEventBundle chrome_events = 5;
inline bool TracePacket::has_chrome_events() const {
  return data_case() == kChromeEvents;
}
inline void TracePacket::set_has_chrome_events() {
  _oneof_case_[0] = kChromeEvents;
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::release_chrome_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_events)
  if (has_chrome_events()) {
    clear_has_data();
      ::perfetto::protos::ChromeEventBundle* temp = data_.chrome_events_;
    data_.chrome_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeEventBundle& TracePacket::chrome_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_events)
  return has_chrome_events()
      ? *data_.chrome_events_
      : *reinterpret_cast< ::perfetto::protos::ChromeEventBundle*>(&::perfetto::protos::_ChromeEventBundle_default_instance_);
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::mutable_chrome_events() {
  if (!has_chrome_events()) {
    clear_data();
    set_has_chrome_events();
    data_.chrome_events_ = CreateMaybeMessage< ::perfetto::protos::ChromeEventBundle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_events)
  return data_.chrome_events_;
}

// optional .perfetto.protos.ClockSnapshot clock_snapshot = 6;
inline bool TracePacket::has_clock_snapshot() const {
  return data_case() == kClockSnapshot;
}
inline void TracePacket::set_has_clock_snapshot() {
  _oneof_case_[0] = kClockSnapshot;
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::release_clock_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.clock_snapshot)
  if (has_clock_snapshot()) {
    clear_has_data();
      ::perfetto::protos::ClockSnapshot* temp = data_.clock_snapshot_;
    data_.clock_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockSnapshot& TracePacket::clock_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.clock_snapshot)
  return has_clock_snapshot()
      ? *data_.clock_snapshot_
      : *reinterpret_cast< ::perfetto::protos::ClockSnapshot*>(&::perfetto::protos::_ClockSnapshot_default_instance_);
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::mutable_clock_snapshot() {
  if (!has_clock_snapshot()) {
    clear_data();
    set_has_clock_snapshot();
    data_.clock_snapshot_ = CreateMaybeMessage< ::perfetto::protos::ClockSnapshot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.clock_snapshot)
  return data_.clock_snapshot_;
}

// optional .perfetto.protos.SysStats sys_stats = 7;
inline bool TracePacket::has_sys_stats() const {
  return data_case() == kSysStats;
}
inline void TracePacket::set_has_sys_stats() {
  _oneof_case_[0] = kSysStats;
}
inline ::perfetto::protos::SysStats* TracePacket::release_sys_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.sys_stats)
  if (has_sys_stats()) {
    clear_has_data();
      ::perfetto::protos::SysStats* temp = data_.sys_stats_;
    data_.sys_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysStats& TracePacket::sys_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.sys_stats)
  return has_sys_stats()
      ? *data_.sys_stats_
      : *reinterpret_cast< ::perfetto::protos::SysStats*>(&::perfetto::protos::_SysStats_default_instance_);
}
inline ::perfetto::protos::SysStats* TracePacket::mutable_sys_stats() {
  if (!has_sys_stats()) {
    clear_data();
    set_has_sys_stats();
    data_.sys_stats_ = CreateMaybeMessage< ::perfetto::protos::SysStats >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.sys_stats)
  return data_.sys_stats_;
}

// optional .perfetto.protos.TrackEvent track_event = 11;
inline bool TracePacket::has_track_event() const {
  return data_case() == kTrackEvent;
}
inline void TracePacket::set_has_track_event() {
  _oneof_case_[0] = kTrackEvent;
}
inline ::perfetto::protos::TrackEvent* TracePacket::release_track_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.track_event)
  if (has_track_event()) {
    clear_has_data();
      ::perfetto::protos::TrackEvent* temp = data_.track_event_;
    data_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrackEvent& TracePacket::track_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.track_event)
  return has_track_event()
      ? *data_.track_event_
      : *reinterpret_cast< ::perfetto::protos::TrackEvent*>(&::perfetto::protos::_TrackEvent_default_instance_);
}
inline ::perfetto::protos::TrackEvent* TracePacket::mutable_track_event() {
  if (!has_track_event()) {
    clear_data();
    set_has_track_event();
    data_.track_event_ = CreateMaybeMessage< ::perfetto::protos::TrackEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.track_event)
  return data_.track_event_;
}

// optional .perfetto.protos.TraceConfig trace_config = 33;
inline bool TracePacket::has_trace_config() const {
  return data_case() == kTraceConfig;
}
inline void TracePacket::set_has_trace_config() {
  _oneof_case_[0] = kTraceConfig;
}
inline ::perfetto::protos::TraceConfig* TracePacket::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_config)
  if (has_trace_config()) {
    clear_has_data();
      ::perfetto::protos::TraceConfig* temp = data_.trace_config_;
    data_.trace_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TraceConfig& TracePacket::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_config)
  return has_trace_config()
      ? *data_.trace_config_
      : *reinterpret_cast< ::perfetto::protos::TraceConfig*>(&::perfetto::protos::_TraceConfig_default_instance_);
}
inline ::perfetto::protos::TraceConfig* TracePacket::mutable_trace_config() {
  if (!has_trace_config()) {
    clear_data();
    set_has_trace_config();
    data_.trace_config_ = CreateMaybeMessage< ::perfetto::protos::TraceConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_config)
  return data_.trace_config_;
}

// optional .perfetto.protos.FtraceStats ftrace_stats = 34;
inline bool TracePacket::has_ftrace_stats() const {
  return data_case() == kFtraceStats;
}
inline void TracePacket::set_has_ftrace_stats() {
  _oneof_case_[0] = kFtraceStats;
}
inline ::perfetto::protos::FtraceStats* TracePacket::release_ftrace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.ftrace_stats)
  if (has_ftrace_stats()) {
    clear_has_data();
      ::perfetto::protos::FtraceStats* temp = data_.ftrace_stats_;
    data_.ftrace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FtraceStats& TracePacket::ftrace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.ftrace_stats)
  return has_ftrace_stats()
      ? *data_.ftrace_stats_
      : *reinterpret_cast< ::perfetto::protos::FtraceStats*>(&::perfetto::protos::_FtraceStats_default_instance_);
}
inline ::perfetto::protos::FtraceStats* TracePacket::mutable_ftrace_stats() {
  if (!has_ftrace_stats()) {
    clear_data();
    set_has_ftrace_stats();
    data_.ftrace_stats_ = CreateMaybeMessage< ::perfetto::protos::FtraceStats >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.ftrace_stats)
  return data_.ftrace_stats_;
}

// optional .perfetto.protos.TraceStats trace_stats = 35;
inline bool TracePacket::has_trace_stats() const {
  return data_case() == kTraceStats;
}
inline void TracePacket::set_has_trace_stats() {
  _oneof_case_[0] = kTraceStats;
}
inline ::perfetto::protos::TraceStats* TracePacket::release_trace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_stats)
  if (has_trace_stats()) {
    clear_has_data();
      ::perfetto::protos::TraceStats* temp = data_.trace_stats_;
    data_.trace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TraceStats& TracePacket::trace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_stats)
  return has_trace_stats()
      ? *data_.trace_stats_
      : *reinterpret_cast< ::perfetto::protos::TraceStats*>(&::perfetto::protos::_TraceStats_default_instance_);
}
inline ::perfetto::protos::TraceStats* TracePacket::mutable_trace_stats() {
  if (!has_trace_stats()) {
    clear_data();
    set_has_trace_stats();
    data_.trace_stats_ = CreateMaybeMessage< ::perfetto::protos::TraceStats >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_stats)
  return data_.trace_stats_;
}

// optional .perfetto.protos.ProfilePacket profile_packet = 37;
inline bool TracePacket::has_profile_packet() const {
  return data_case() == kProfilePacket;
}
inline void TracePacket::set_has_profile_packet() {
  _oneof_case_[0] = kProfilePacket;
}
inline ::perfetto::protos::ProfilePacket* TracePacket::release_profile_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.profile_packet)
  if (has_profile_packet()) {
    clear_has_data();
      ::perfetto::protos::ProfilePacket* temp = data_.profile_packet_;
    data_.profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProfilePacket& TracePacket::profile_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.profile_packet)
  return has_profile_packet()
      ? *data_.profile_packet_
      : *reinterpret_cast< ::perfetto::protos::ProfilePacket*>(&::perfetto::protos::_ProfilePacket_default_instance_);
}
inline ::perfetto::protos::ProfilePacket* TracePacket::mutable_profile_packet() {
  if (!has_profile_packet()) {
    clear_data();
    set_has_profile_packet();
    data_.profile_packet_ = CreateMaybeMessage< ::perfetto::protos::ProfilePacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.profile_packet)
  return data_.profile_packet_;
}

// optional .perfetto.protos.StreamingAllocation streaming_allocation = 74;
inline bool TracePacket::has_streaming_allocation() const {
  return data_case() == kStreamingAllocation;
}
inline void TracePacket::set_has_streaming_allocation() {
  _oneof_case_[0] = kStreamingAllocation;
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::release_streaming_allocation() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_allocation)
  if (has_streaming_allocation()) {
    clear_has_data();
      ::perfetto::protos::StreamingAllocation* temp = data_.streaming_allocation_;
    data_.streaming_allocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingAllocation& TracePacket::streaming_allocation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_allocation)
  return has_streaming_allocation()
      ? *data_.streaming_allocation_
      : *reinterpret_cast< ::perfetto::protos::StreamingAllocation*>(&::perfetto::protos::_StreamingAllocation_default_instance_);
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::mutable_streaming_allocation() {
  if (!has_streaming_allocation()) {
    clear_data();
    set_has_streaming_allocation();
    data_.streaming_allocation_ = CreateMaybeMessage< ::perfetto::protos::StreamingAllocation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_allocation)
  return data_.streaming_allocation_;
}

// optional .perfetto.protos.StreamingFree streaming_free = 75;
inline bool TracePacket::has_streaming_free() const {
  return data_case() == kStreamingFree;
}
inline void TracePacket::set_has_streaming_free() {
  _oneof_case_[0] = kStreamingFree;
}
inline ::perfetto::protos::StreamingFree* TracePacket::release_streaming_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_free)
  if (has_streaming_free()) {
    clear_has_data();
      ::perfetto::protos::StreamingFree* temp = data_.streaming_free_;
    data_.streaming_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingFree& TracePacket::streaming_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_free)
  return has_streaming_free()
      ? *data_.streaming_free_
      : *reinterpret_cast< ::perfetto::protos::StreamingFree*>(&::perfetto::protos::_StreamingFree_default_instance_);
}
inline ::perfetto::protos::StreamingFree* TracePacket::mutable_streaming_free() {
  if (!has_streaming_free()) {
    clear_data();
    set_has_streaming_free();
    data_.streaming_free_ = CreateMaybeMessage< ::perfetto::protos::StreamingFree >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_free)
  return data_.streaming_free_;
}

// optional .perfetto.protos.BatteryCounters battery = 38;
inline bool TracePacket::has_battery() const {
  return data_case() == kBattery;
}
inline void TracePacket::set_has_battery() {
  _oneof_case_[0] = kBattery;
}
inline ::perfetto::protos::BatteryCounters* TracePacket::release_battery() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.battery)
  if (has_battery()) {
    clear_has_data();
      ::perfetto::protos::BatteryCounters* temp = data_.battery_;
    data_.battery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BatteryCounters& TracePacket::battery() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.battery)
  return has_battery()
      ? *data_.battery_
      : *reinterpret_cast< ::perfetto::protos::BatteryCounters*>(&::perfetto::protos::_BatteryCounters_default_instance_);
}
inline ::perfetto::protos::BatteryCounters* TracePacket::mutable_battery() {
  if (!has_battery()) {
    clear_data();
    set_has_battery();
    data_.battery_ = CreateMaybeMessage< ::perfetto::protos::BatteryCounters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.battery)
  return data_.battery_;
}

// optional .perfetto.protos.PowerRails power_rails = 40;
inline bool TracePacket::has_power_rails() const {
  return data_case() == kPowerRails;
}
inline void TracePacket::set_has_power_rails() {
  _oneof_case_[0] = kPowerRails;
}
inline ::perfetto::protos::PowerRails* TracePacket::release_power_rails() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.power_rails)
  if (has_power_rails()) {
    clear_has_data();
      ::perfetto::protos::PowerRails* temp = data_.power_rails_;
    data_.power_rails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PowerRails& TracePacket::power_rails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.power_rails)
  return has_power_rails()
      ? *data_.power_rails_
      : *reinterpret_cast< ::perfetto::protos::PowerRails*>(&::perfetto::protos::_PowerRails_default_instance_);
}
inline ::perfetto::protos::PowerRails* TracePacket::mutable_power_rails() {
  if (!has_power_rails()) {
    clear_data();
    set_has_power_rails();
    data_.power_rails_ = CreateMaybeMessage< ::perfetto::protos::PowerRails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.power_rails)
  return data_.power_rails_;
}

// optional .perfetto.protos.AndroidLogPacket android_log = 39;
inline bool TracePacket::has_android_log() const {
  return data_case() == kAndroidLog;
}
inline void TracePacket::set_has_android_log() {
  _oneof_case_[0] = kAndroidLog;
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::release_android_log() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_log)
  if (has_android_log()) {
    clear_has_data();
      ::perfetto::protos::AndroidLogPacket* temp = data_.android_log_;
    data_.android_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidLogPacket& TracePacket::android_log() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_log)
  return has_android_log()
      ? *data_.android_log_
      : *reinterpret_cast< ::perfetto::protos::AndroidLogPacket*>(&::perfetto::protos::_AndroidLogPacket_default_instance_);
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::mutable_android_log() {
  if (!has_android_log()) {
    clear_data();
    set_has_android_log();
    data_.android_log_ = CreateMaybeMessage< ::perfetto::protos::AndroidLogPacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_log)
  return data_.android_log_;
}

// optional .perfetto.protos.SystemInfo system_info = 45;
inline bool TracePacket::has_system_info() const {
  return data_case() == kSystemInfo;
}
inline void TracePacket::set_has_system_info() {
  _oneof_case_[0] = kSystemInfo;
}
inline ::perfetto::protos::SystemInfo* TracePacket::release_system_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.system_info)
  if (has_system_info()) {
    clear_has_data();
      ::perfetto::protos::SystemInfo* temp = data_.system_info_;
    data_.system_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SystemInfo& TracePacket::system_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.system_info)
  return has_system_info()
      ? *data_.system_info_
      : *reinterpret_cast< ::perfetto::protos::SystemInfo*>(&::perfetto::protos::_SystemInfo_default_instance_);
}
inline ::perfetto::protos::SystemInfo* TracePacket::mutable_system_info() {
  if (!has_system_info()) {
    clear_data();
    set_has_system_info();
    data_.system_info_ = CreateMaybeMessage< ::perfetto::protos::SystemInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.system_info)
  return data_.system_info_;
}

// optional .perfetto.protos.Trigger trigger = 46;
inline bool TracePacket::has_trigger() const {
  return data_case() == kTrigger;
}
inline void TracePacket::set_has_trigger() {
  _oneof_case_[0] = kTrigger;
}
inline ::perfetto::protos::Trigger* TracePacket::release_trigger() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trigger)
  if (has_trigger()) {
    clear_has_data();
      ::perfetto::protos::Trigger* temp = data_.trigger_;
    data_.trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Trigger& TracePacket::trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trigger)
  return has_trigger()
      ? *data_.trigger_
      : *reinterpret_cast< ::perfetto::protos::Trigger*>(&::perfetto::protos::_Trigger_default_instance_);
}
inline ::perfetto::protos::Trigger* TracePacket::mutable_trigger() {
  if (!has_trigger()) {
    clear_data();
    set_has_trigger();
    data_.trigger_ = CreateMaybeMessage< ::perfetto::protos::Trigger >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trigger)
  return data_.trigger_;
}

// optional .perfetto.protos.PackagesList packages_list = 47;
inline bool TracePacket::has_packages_list() const {
  return data_case() == kPackagesList;
}
inline void TracePacket::set_has_packages_list() {
  _oneof_case_[0] = kPackagesList;
}
inline ::perfetto::protos::PackagesList* TracePacket::release_packages_list() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.packages_list)
  if (has_packages_list()) {
    clear_has_data();
      ::perfetto::protos::PackagesList* temp = data_.packages_list_;
    data_.packages_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PackagesList& TracePacket::packages_list() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.packages_list)
  return has_packages_list()
      ? *data_.packages_list_
      : *reinterpret_cast< ::perfetto::protos::PackagesList*>(&::perfetto::protos::_PackagesList_default_instance_);
}
inline ::perfetto::protos::PackagesList* TracePacket::mutable_packages_list() {
  if (!has_packages_list()) {
    clear_data();
    set_has_packages_list();
    data_.packages_list_ = CreateMaybeMessage< ::perfetto::protos::PackagesList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.packages_list)
  return data_.packages_list_;
}

// optional .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
inline bool TracePacket::has_chrome_benchmark_metadata() const {
  return data_case() == kChromeBenchmarkMetadata;
}
inline void TracePacket::set_has_chrome_benchmark_metadata() {
  _oneof_case_[0] = kChromeBenchmarkMetadata;
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::release_chrome_benchmark_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  if (has_chrome_benchmark_metadata()) {
    clear_has_data();
      ::perfetto::protos::ChromeBenchmarkMetadata* temp = data_.chrome_benchmark_metadata_;
    data_.chrome_benchmark_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeBenchmarkMetadata& TracePacket::chrome_benchmark_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  return has_chrome_benchmark_metadata()
      ? *data_.chrome_benchmark_metadata_
      : *reinterpret_cast< ::perfetto::protos::ChromeBenchmarkMetadata*>(&::perfetto::protos::_ChromeBenchmarkMetadata_default_instance_);
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::mutable_chrome_benchmark_metadata() {
  if (!has_chrome_benchmark_metadata()) {
    clear_data();
    set_has_chrome_benchmark_metadata();
    data_.chrome_benchmark_metadata_ = CreateMaybeMessage< ::perfetto::protos::ChromeBenchmarkMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  return data_.chrome_benchmark_metadata_;
}

// optional .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
inline bool TracePacket::has_perfetto_metatrace() const {
  return data_case() == kPerfettoMetatrace;
}
inline void TracePacket::set_has_perfetto_metatrace() {
  _oneof_case_[0] = kPerfettoMetatrace;
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::release_perfetto_metatrace() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.perfetto_metatrace)
  if (has_perfetto_metatrace()) {
    clear_has_data();
      ::perfetto::protos::PerfettoMetatrace* temp = data_.perfetto_metatrace_;
    data_.perfetto_metatrace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfettoMetatrace& TracePacket::perfetto_metatrace() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.perfetto_metatrace)
  return has_perfetto_metatrace()
      ? *data_.perfetto_metatrace_
      : *reinterpret_cast< ::perfetto::protos::PerfettoMetatrace*>(&::perfetto::protos::_PerfettoMetatrace_default_instance_);
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::mutable_perfetto_metatrace() {
  if (!has_perfetto_metatrace()) {
    clear_data();
    set_has_perfetto_metatrace();
    data_.perfetto_metatrace_ = CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.perfetto_metatrace)
  return data_.perfetto_metatrace_;
}

// optional .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
inline bool TracePacket::has_chrome_metadata() const {
  return data_case() == kChromeMetadata;
}
inline void TracePacket::set_has_chrome_metadata() {
  _oneof_case_[0] = kChromeMetadata;
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::release_chrome_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_metadata)
  if (has_chrome_metadata()) {
    clear_has_data();
      ::perfetto::protos::ChromeMetadataPacket* temp = data_.chrome_metadata_;
    data_.chrome_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeMetadataPacket& TracePacket::chrome_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_metadata)
  return has_chrome_metadata()
      ? *data_.chrome_metadata_
      : *reinterpret_cast< ::perfetto::protos::ChromeMetadataPacket*>(&::perfetto::protos::_ChromeMetadataPacket_default_instance_);
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::mutable_chrome_metadata() {
  if (!has_chrome_metadata()) {
    clear_data();
    set_has_chrome_metadata();
    data_.chrome_metadata_ = CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_metadata)
  return data_.chrome_metadata_;
}

// optional .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
inline bool TracePacket::has_gpu_counter_event() const {
  return data_case() == kGpuCounterEvent;
}
inline void TracePacket::set_has_gpu_counter_event() {
  _oneof_case_[0] = kGpuCounterEvent;
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::release_gpu_counter_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_counter_event)
  if (has_gpu_counter_event()) {
    clear_has_data();
      ::perfetto::protos::GpuCounterEvent* temp = data_.gpu_counter_event_;
    data_.gpu_counter_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuCounterEvent& TracePacket::gpu_counter_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_counter_event)
  return has_gpu_counter_event()
      ? *data_.gpu_counter_event_
      : *reinterpret_cast< ::perfetto::protos::GpuCounterEvent*>(&::perfetto::protos::_GpuCounterEvent_default_instance_);
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::mutable_gpu_counter_event() {
  if (!has_gpu_counter_event()) {
    clear_data();
    set_has_gpu_counter_event();
    data_.gpu_counter_event_ = CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_counter_event)
  return data_.gpu_counter_event_;
}

// optional .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
inline bool TracePacket::has_gpu_render_stage_event() const {
  return data_case() == kGpuRenderStageEvent;
}
inline void TracePacket::set_has_gpu_render_stage_event() {
  _oneof_case_[0] = kGpuRenderStageEvent;
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::release_gpu_render_stage_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_render_stage_event)
  if (has_gpu_render_stage_event()) {
    clear_has_data();
      ::perfetto::protos::GpuRenderStageEvent* temp = data_.gpu_render_stage_event_;
    data_.gpu_render_stage_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuRenderStageEvent& TracePacket::gpu_render_stage_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_render_stage_event)
  return has_gpu_render_stage_event()
      ? *data_.gpu_render_stage_event_
      : *reinterpret_cast< ::perfetto::protos::GpuRenderStageEvent*>(&::perfetto::protos::_GpuRenderStageEvent_default_instance_);
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::mutable_gpu_render_stage_event() {
  if (!has_gpu_render_stage_event()) {
    clear_data();
    set_has_gpu_render_stage_event();
    data_.gpu_render_stage_event_ = CreateMaybeMessage< ::perfetto::protos::GpuRenderStageEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_render_stage_event)
  return data_.gpu_render_stage_event_;
}

// optional .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
inline bool TracePacket::has_streaming_profile_packet() const {
  return data_case() == kStreamingProfilePacket;
}
inline void TracePacket::set_has_streaming_profile_packet() {
  _oneof_case_[0] = kStreamingProfilePacket;
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::release_streaming_profile_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_profile_packet)
  if (has_streaming_profile_packet()) {
    clear_has_data();
      ::perfetto::protos::StreamingProfilePacket* temp = data_.streaming_profile_packet_;
    data_.streaming_profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingProfilePacket& TracePacket::streaming_profile_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_profile_packet)
  return has_streaming_profile_packet()
      ? *data_.streaming_profile_packet_
      : *reinterpret_cast< ::perfetto::protos::StreamingProfilePacket*>(&::perfetto::protos::_StreamingProfilePacket_default_instance_);
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::mutable_streaming_profile_packet() {
  if (!has_streaming_profile_packet()) {
    clear_data();
    set_has_streaming_profile_packet();
    data_.streaming_profile_packet_ = CreateMaybeMessage< ::perfetto::protos::StreamingProfilePacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_profile_packet)
  return data_.streaming_profile_packet_;
}

// optional .perfetto.protos.HeapGraph heap_graph = 56;
inline bool TracePacket::has_heap_graph() const {
  return data_case() == kHeapGraph;
}
inline void TracePacket::set_has_heap_graph() {
  _oneof_case_[0] = kHeapGraph;
}
inline ::perfetto::protos::HeapGraph* TracePacket::release_heap_graph() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.heap_graph)
  if (has_heap_graph()) {
    clear_has_data();
      ::perfetto::protos::HeapGraph* temp = data_.heap_graph_;
    data_.heap_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HeapGraph& TracePacket::heap_graph() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.heap_graph)
  return has_heap_graph()
      ? *data_.heap_graph_
      : *reinterpret_cast< ::perfetto::protos::HeapGraph*>(&::perfetto::protos::_HeapGraph_default_instance_);
}
inline ::perfetto::protos::HeapGraph* TracePacket::mutable_heap_graph() {
  if (!has_heap_graph()) {
    clear_data();
    set_has_heap_graph();
    data_.heap_graph_ = CreateMaybeMessage< ::perfetto::protos::HeapGraph >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.heap_graph)
  return data_.heap_graph_;
}

// optional .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
inline bool TracePacket::has_graphics_frame_event() const {
  return data_case() == kGraphicsFrameEvent;
}
inline void TracePacket::set_has_graphics_frame_event() {
  _oneof_case_[0] = kGraphicsFrameEvent;
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::release_graphics_frame_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.graphics_frame_event)
  if (has_graphics_frame_event()) {
    clear_has_data();
      ::perfetto::protos::GraphicsFrameEvent* temp = data_.graphics_frame_event_;
    data_.graphics_frame_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GraphicsFrameEvent& TracePacket::graphics_frame_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.graphics_frame_event)
  return has_graphics_frame_event()
      ? *data_.graphics_frame_event_
      : *reinterpret_cast< ::perfetto::protos::GraphicsFrameEvent*>(&::perfetto::protos::_GraphicsFrameEvent_default_instance_);
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::mutable_graphics_frame_event() {
  if (!has_graphics_frame_event()) {
    clear_data();
    set_has_graphics_frame_event();
    data_.graphics_frame_event_ = CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.graphics_frame_event)
  return data_.graphics_frame_event_;
}

// optional .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
inline bool TracePacket::has_vulkan_memory_event() const {
  return data_case() == kVulkanMemoryEvent;
}
inline void TracePacket::set_has_vulkan_memory_event() {
  _oneof_case_[0] = kVulkanMemoryEvent;
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::release_vulkan_memory_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.vulkan_memory_event)
  if (has_vulkan_memory_event()) {
    clear_has_data();
      ::perfetto::protos::VulkanMemoryEvent* temp = data_.vulkan_memory_event_;
    data_.vulkan_memory_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanMemoryEvent& TracePacket::vulkan_memory_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.vulkan_memory_event)
  return has_vulkan_memory_event()
      ? *data_.vulkan_memory_event_
      : *reinterpret_cast< ::perfetto::protos::VulkanMemoryEvent*>(&::perfetto::protos::_VulkanMemoryEvent_default_instance_);
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::mutable_vulkan_memory_event() {
  if (!has_vulkan_memory_event()) {
    clear_data();
    set_has_vulkan_memory_event();
    data_.vulkan_memory_event_ = CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.vulkan_memory_event)
  return data_.vulkan_memory_event_;
}

// optional .perfetto.protos.GpuLog gpu_log = 63;
inline bool TracePacket::has_gpu_log() const {
  return data_case() == kGpuLog;
}
inline void TracePacket::set_has_gpu_log() {
  _oneof_case_[0] = kGpuLog;
}
inline ::perfetto::protos::GpuLog* TracePacket::release_gpu_log() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_log)
  if (has_gpu_log()) {
    clear_has_data();
      ::perfetto::protos::GpuLog* temp = data_.gpu_log_;
    data_.gpu_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuLog& TracePacket::gpu_log() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_log)
  return has_gpu_log()
      ? *data_.gpu_log_
      : *reinterpret_cast< ::perfetto::protos::GpuLog*>(&::perfetto::protos::_GpuLog_default_instance_);
}
inline ::perfetto::protos::GpuLog* TracePacket::mutable_gpu_log() {
  if (!has_gpu_log()) {
    clear_data();
    set_has_gpu_log();
    data_.gpu_log_ = CreateMaybeMessage< ::perfetto::protos::GpuLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_log)
  return data_.gpu_log_;
}

// optional .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
inline bool TracePacket::has_vulkan_api_event() const {
  return data_case() == kVulkanApiEvent;
}
inline void TracePacket::set_has_vulkan_api_event() {
  _oneof_case_[0] = kVulkanApiEvent;
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::release_vulkan_api_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.vulkan_api_event)
  if (has_vulkan_api_event()) {
    clear_has_data();
      ::perfetto::protos::VulkanApiEvent* temp = data_.vulkan_api_event_;
    data_.vulkan_api_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanApiEvent& TracePacket::vulkan_api_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.vulkan_api_event)
  return has_vulkan_api_event()
      ? *data_.vulkan_api_event_
      : *reinterpret_cast< ::perfetto::protos::VulkanApiEvent*>(&::perfetto::protos::_VulkanApiEvent_default_instance_);
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::mutable_vulkan_api_event() {
  if (!has_vulkan_api_event()) {
    clear_data();
    set_has_vulkan_api_event();
    data_.vulkan_api_event_ = CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.vulkan_api_event)
  return data_.vulkan_api_event_;
}

// optional .perfetto.protos.PerfSample perf_sample = 66;
inline bool TracePacket::has_perf_sample() const {
  return data_case() == kPerfSample;
}
inline void TracePacket::set_has_perf_sample() {
  _oneof_case_[0] = kPerfSample;
}
inline ::perfetto::protos::PerfSample* TracePacket::release_perf_sample() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.perf_sample)
  if (has_perf_sample()) {
    clear_has_data();
      ::perfetto::protos::PerfSample* temp = data_.perf_sample_;
    data_.perf_sample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfSample& TracePacket::perf_sample() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.perf_sample)
  return has_perf_sample()
      ? *data_.perf_sample_
      : *reinterpret_cast< ::perfetto::protos::PerfSample*>(&::perfetto::protos::_PerfSample_default_instance_);
}
inline ::perfetto::protos::PerfSample* TracePacket::mutable_perf_sample() {
  if (!has_perf_sample()) {
    clear_data();
    set_has_perf_sample();
    data_.perf_sample_ = CreateMaybeMessage< ::perfetto::protos::PerfSample >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.perf_sample)
  return data_.perf_sample_;
}

// optional .perfetto.protos.CpuInfo cpu_info = 67;
inline bool TracePacket::has_cpu_info() const {
  return data_case() == kCpuInfo;
}
inline void TracePacket::set_has_cpu_info() {
  _oneof_case_[0] = kCpuInfo;
}
inline ::perfetto::protos::CpuInfo* TracePacket::release_cpu_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.cpu_info)
  if (has_cpu_info()) {
    clear_has_data();
      ::perfetto::protos::CpuInfo* temp = data_.cpu_info_;
    data_.cpu_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuInfo& TracePacket::cpu_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.cpu_info)
  return has_cpu_info()
      ? *data_.cpu_info_
      : *reinterpret_cast< ::perfetto::protos::CpuInfo*>(&::perfetto::protos::_CpuInfo_default_instance_);
}
inline ::perfetto::protos::CpuInfo* TracePacket::mutable_cpu_info() {
  if (!has_cpu_info()) {
    clear_data();
    set_has_cpu_info();
    data_.cpu_info_ = CreateMaybeMessage< ::perfetto::protos::CpuInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.cpu_info)
  return data_.cpu_info_;
}

// optional .perfetto.protos.SmapsPacket smaps_packet = 68;
inline bool TracePacket::has_smaps_packet() const {
  return data_case() == kSmapsPacket;
}
inline void TracePacket::set_has_smaps_packet() {
  _oneof_case_[0] = kSmapsPacket;
}
inline ::perfetto::protos::SmapsPacket* TracePacket::release_smaps_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.smaps_packet)
  if (has_smaps_packet()) {
    clear_has_data();
      ::perfetto::protos::SmapsPacket* temp = data_.smaps_packet_;
    data_.smaps_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmapsPacket& TracePacket::smaps_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.smaps_packet)
  return has_smaps_packet()
      ? *data_.smaps_packet_
      : *reinterpret_cast< ::perfetto::protos::SmapsPacket*>(&::perfetto::protos::_SmapsPacket_default_instance_);
}
inline ::perfetto::protos::SmapsPacket* TracePacket::mutable_smaps_packet() {
  if (!has_smaps_packet()) {
    clear_data();
    set_has_smaps_packet();
    data_.smaps_packet_ = CreateMaybeMessage< ::perfetto::protos::SmapsPacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.smaps_packet)
  return data_.smaps_packet_;
}

// optional .perfetto.protos.TracingServiceEvent service_event = 69;
inline bool TracePacket::has_service_event() const {
  return data_case() == kServiceEvent;
}
inline void TracePacket::set_has_service_event() {
  _oneof_case_[0] = kServiceEvent;
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::release_service_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.service_event)
  if (has_service_event()) {
    clear_has_data();
      ::perfetto::protos::TracingServiceEvent* temp = data_.service_event_;
    data_.service_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TracingServiceEvent& TracePacket::service_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.service_event)
  return has_service_event()
      ? *data_.service_event_
      : *reinterpret_cast< ::perfetto::protos::TracingServiceEvent*>(&::perfetto::protos::_TracingServiceEvent_default_instance_);
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::mutable_service_event() {
  if (!has_service_event()) {
    clear_data();
    set_has_service_event();
    data_.service_event_ = CreateMaybeMessage< ::perfetto::protos::TracingServiceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.service_event)
  return data_.service_event_;
}

// optional .perfetto.protos.InitialDisplayState initial_display_state = 70;
inline bool TracePacket::has_initial_display_state() const {
  return data_case() == kInitialDisplayState;
}
inline void TracePacket::set_has_initial_display_state() {
  _oneof_case_[0] = kInitialDisplayState;
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::release_initial_display_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.initial_display_state)
  if (has_initial_display_state()) {
    clear_has_data();
      ::perfetto::protos::InitialDisplayState* temp = data_.initial_display_state_;
    data_.initial_display_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::InitialDisplayState& TracePacket::initial_display_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.initial_display_state)
  return has_initial_display_state()
      ? *data_.initial_display_state_
      : *reinterpret_cast< ::perfetto::protos::InitialDisplayState*>(&::perfetto::protos::_InitialDisplayState_default_instance_);
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::mutable_initial_display_state() {
  if (!has_initial_display_state()) {
    clear_data();
    set_has_initial_display_state();
    data_.initial_display_state_ = CreateMaybeMessage< ::perfetto::protos::InitialDisplayState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.initial_display_state)
  return data_.initial_display_state_;
}

// optional .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
inline bool TracePacket::has_gpu_mem_total_event() const {
  return data_case() == kGpuMemTotalEvent;
}
inline void TracePacket::set_has_gpu_mem_total_event() {
  _oneof_case_[0] = kGpuMemTotalEvent;
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::release_gpu_mem_total_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_mem_total_event)
  if (has_gpu_mem_total_event()) {
    clear_has_data();
      ::perfetto::protos::GpuMemTotalEvent* temp = data_.gpu_mem_total_event_;
    data_.gpu_mem_total_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuMemTotalEvent& TracePacket::gpu_mem_total_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_mem_total_event)
  return has_gpu_mem_total_event()
      ? *data_.gpu_mem_total_event_
      : *reinterpret_cast< ::perfetto::protos::GpuMemTotalEvent*>(&::perfetto::protos::_GpuMemTotalEvent_default_instance_);
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::mutable_gpu_mem_total_event() {
  if (!has_gpu_mem_total_event()) {
    clear_data();
    set_has_gpu_mem_total_event();
    data_.gpu_mem_total_event_ = CreateMaybeMessage< ::perfetto::protos::GpuMemTotalEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_mem_total_event)
  return data_.gpu_mem_total_event_;
}

// optional .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
inline bool TracePacket::has_memory_tracker_snapshot() const {
  return data_case() == kMemoryTrackerSnapshot;
}
inline void TracePacket::set_has_memory_tracker_snapshot() {
  _oneof_case_[0] = kMemoryTrackerSnapshot;
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::release_memory_tracker_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.memory_tracker_snapshot)
  if (has_memory_tracker_snapshot()) {
    clear_has_data();
      ::perfetto::protos::MemoryTrackerSnapshot* temp = data_.memory_tracker_snapshot_;
    data_.memory_tracker_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MemoryTrackerSnapshot& TracePacket::memory_tracker_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.memory_tracker_snapshot)
  return has_memory_tracker_snapshot()
      ? *data_.memory_tracker_snapshot_
      : *reinterpret_cast< ::perfetto::protos::MemoryTrackerSnapshot*>(&::perfetto::protos::_MemoryTrackerSnapshot_default_instance_);
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::mutable_memory_tracker_snapshot() {
  if (!has_memory_tracker_snapshot()) {
    clear_data();
    set_has_memory_tracker_snapshot();
    data_.memory_tracker_snapshot_ = CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.memory_tracker_snapshot)
  return data_.memory_tracker_snapshot_;
}

// optional .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
inline bool TracePacket::has_frame_timeline_event() const {
  return data_case() == kFrameTimelineEvent;
}
inline void TracePacket::set_has_frame_timeline_event() {
  _oneof_case_[0] = kFrameTimelineEvent;
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::release_frame_timeline_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.frame_timeline_event)
  if (has_frame_timeline_event()) {
    clear_has_data();
      ::perfetto::protos::FrameTimelineEvent* temp = data_.frame_timeline_event_;
    data_.frame_timeline_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent& TracePacket::frame_timeline_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.frame_timeline_event)
  return has_frame_timeline_event()
      ? *data_.frame_timeline_event_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent*>(&::perfetto::protos::_FrameTimelineEvent_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::mutable_frame_timeline_event() {
  if (!has_frame_timeline_event()) {
    clear_data();
    set_has_frame_timeline_event();
    data_.frame_timeline_event_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.frame_timeline_event)
  return data_.frame_timeline_event_;
}

// optional .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
inline bool TracePacket::has_profiled_frame_symbols() const {
  return data_case() == kProfiledFrameSymbols;
}
inline void TracePacket::set_has_profiled_frame_symbols() {
  _oneof_case_[0] = kProfiledFrameSymbols;
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::release_profiled_frame_symbols() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.profiled_frame_symbols)
  if (has_profiled_frame_symbols()) {
    clear_has_data();
      ::perfetto::protos::ProfiledFrameSymbols* temp = data_.profiled_frame_symbols_;
    data_.profiled_frame_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProfiledFrameSymbols& TracePacket::profiled_frame_symbols() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.profiled_frame_symbols)
  return has_profiled_frame_symbols()
      ? *data_.profiled_frame_symbols_
      : *reinterpret_cast< ::perfetto::protos::ProfiledFrameSymbols*>(&::perfetto::protos::_ProfiledFrameSymbols_default_instance_);
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::mutable_profiled_frame_symbols() {
  if (!has_profiled_frame_symbols()) {
    clear_data();
    set_has_profiled_frame_symbols();
    data_.profiled_frame_symbols_ = CreateMaybeMessage< ::perfetto::protos::ProfiledFrameSymbols >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.profiled_frame_symbols)
  return data_.profiled_frame_symbols_;
}

// optional .perfetto.protos.ModuleSymbols module_symbols = 61;
inline bool TracePacket::has_module_symbols() const {
  return data_case() == kModuleSymbols;
}
inline void TracePacket::set_has_module_symbols() {
  _oneof_case_[0] = kModuleSymbols;
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::release_module_symbols() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.module_symbols)
  if (has_module_symbols()) {
    clear_has_data();
      ::perfetto::protos::ModuleSymbols* temp = data_.module_symbols_;
    data_.module_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ModuleSymbols& TracePacket::module_symbols() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.module_symbols)
  return has_module_symbols()
      ? *data_.module_symbols_
      : *reinterpret_cast< ::perfetto::protos::ModuleSymbols*>(&::perfetto::protos::_ModuleSymbols_default_instance_);
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::mutable_module_symbols() {
  if (!has_module_symbols()) {
    clear_data();
    set_has_module_symbols();
    data_.module_symbols_ = CreateMaybeMessage< ::perfetto::protos::ModuleSymbols >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.module_symbols)
  return data_.module_symbols_;
}

// optional .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
inline bool TracePacket::has_deobfuscation_mapping() const {
  return data_case() == kDeobfuscationMapping;
}
inline void TracePacket::set_has_deobfuscation_mapping() {
  _oneof_case_[0] = kDeobfuscationMapping;
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::release_deobfuscation_mapping() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.deobfuscation_mapping)
  if (has_deobfuscation_mapping()) {
    clear_has_data();
      ::perfetto::protos::DeobfuscationMapping* temp = data_.deobfuscation_mapping_;
    data_.deobfuscation_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DeobfuscationMapping& TracePacket::deobfuscation_mapping() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.deobfuscation_mapping)
  return has_deobfuscation_mapping()
      ? *data_.deobfuscation_mapping_
      : *reinterpret_cast< ::perfetto::protos::DeobfuscationMapping*>(&::perfetto::protos::_DeobfuscationMapping_default_instance_);
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::mutable_deobfuscation_mapping() {
  if (!has_deobfuscation_mapping()) {
    clear_data();
    set_has_deobfuscation_mapping();
    data_.deobfuscation_mapping_ = CreateMaybeMessage< ::perfetto::protos::DeobfuscationMapping >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.deobfuscation_mapping)
  return data_.deobfuscation_mapping_;
}

// optional .perfetto.protos.TrackDescriptor track_descriptor = 60;
inline bool TracePacket::has_track_descriptor() const {
  return data_case() == kTrackDescriptor;
}
inline void TracePacket::set_has_track_descriptor() {
  _oneof_case_[0] = kTrackDescriptor;
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::release_track_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.track_descriptor)
  if (has_track_descriptor()) {
    clear_has_data();
      ::perfetto::protos::TrackDescriptor* temp = data_.track_descriptor_;
    data_.track_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrackDescriptor& TracePacket::track_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.track_descriptor)
  return has_track_descriptor()
      ? *data_.track_descriptor_
      : *reinterpret_cast< ::perfetto::protos::TrackDescriptor*>(&::perfetto::protos::_TrackDescriptor_default_instance_);
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::mutable_track_descriptor() {
  if (!has_track_descriptor()) {
    clear_data();
    set_has_track_descriptor();
    data_.track_descriptor_ = CreateMaybeMessage< ::perfetto::protos::TrackDescriptor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.track_descriptor)
  return data_.track_descriptor_;
}

// optional .perfetto.protos.ProcessDescriptor process_descriptor = 43;
inline bool TracePacket::has_process_descriptor() const {
  return data_case() == kProcessDescriptor;
}
inline void TracePacket::set_has_process_descriptor() {
  _oneof_case_[0] = kProcessDescriptor;
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::release_process_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_descriptor)
  if (has_process_descriptor()) {
    clear_has_data();
      ::perfetto::protos::ProcessDescriptor* temp = data_.process_descriptor_;
    data_.process_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessDescriptor& TracePacket::process_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_descriptor)
  return has_process_descriptor()
      ? *data_.process_descriptor_
      : *reinterpret_cast< ::perfetto::protos::ProcessDescriptor*>(&::perfetto::protos::_ProcessDescriptor_default_instance_);
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::mutable_process_descriptor() {
  if (!has_process_descriptor()) {
    clear_data();
    set_has_process_descriptor();
    data_.process_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ProcessDescriptor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_descriptor)
  return data_.process_descriptor_;
}

// optional .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
inline bool TracePacket::has_thread_descriptor() const {
  return data_case() == kThreadDescriptor;
}
inline void TracePacket::set_has_thread_descriptor() {
  _oneof_case_[0] = kThreadDescriptor;
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::release_thread_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.thread_descriptor)
  if (has_thread_descriptor()) {
    clear_has_data();
      ::perfetto::protos::ThreadDescriptor* temp = data_.thread_descriptor_;
    data_.thread_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ThreadDescriptor& TracePacket::thread_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.thread_descriptor)
  return has_thread_descriptor()
      ? *data_.thread_descriptor_
      : *reinterpret_cast< ::perfetto::protos::ThreadDescriptor*>(&::perfetto::protos::_ThreadDescriptor_default_instance_);
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::mutable_thread_descriptor() {
  if (!has_thread_descriptor()) {
    clear_data();
    set_has_thread_descriptor();
    data_.thread_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ThreadDescriptor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.thread_descriptor)
  return data_.thread_descriptor_;
}

// optional .perfetto.protos.FtraceEventBundle ftrace_events = 1;
inline bool TracePacket::has_ftrace_events() const {
  return data_case() == kFtraceEvents;
}
inline void TracePacket::set_has_ftrace_events() {
  _oneof_case_[0] = kFtraceEvents;
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::release_ftrace_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.ftrace_events)
  if (has_ftrace_events()) {
    clear_has_data();
      ::perfetto::protos::FtraceEventBundle* temp = data_.ftrace_events_;
    data_.ftrace_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FtraceEventBundle& TracePacket::ftrace_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.ftrace_events)
  return has_ftrace_events()
      ? *data_.ftrace_events_
      : *reinterpret_cast< ::perfetto::protos::FtraceEventBundle*>(&::perfetto::protos::_FtraceEventBundle_default_instance_);
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::mutable_ftrace_events() {
  if (!has_ftrace_events()) {
    clear_data();
    set_has_ftrace_events();
    data_.ftrace_events_ = CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.ftrace_events)
  return data_.ftrace_events_;
}

// optional bytes synchronization_marker = 36;
inline bool TracePacket::has_synchronization_marker() const {
  return data_case() == kSynchronizationMarker;
}
inline void TracePacket::set_has_synchronization_marker() {
  _oneof_case_[0] = kSynchronizationMarker;
}
inline void TracePacket::clear_synchronization_marker() {
  if (has_synchronization_marker()) {
    data_.synchronization_marker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& TracePacket::synchronization_marker() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.synchronization_marker)
  if (has_synchronization_marker()) {
    return data_.synchronization_marker_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TracePacket::set_synchronization_marker(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.synchronization_marker)
  if (!has_synchronization_marker()) {
    clear_data();
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.synchronization_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.synchronization_marker)
}
inline void TracePacket::set_synchronization_marker(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.synchronization_marker)
  if (!has_synchronization_marker()) {
    clear_data();
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.synchronization_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TracePacket.synchronization_marker)
}
inline void TracePacket::set_synchronization_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_synchronization_marker()) {
    clear_data();
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.synchronization_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TracePacket.synchronization_marker)
}
inline void TracePacket::set_synchronization_marker(const void* value, size_t size) {
  if (!has_synchronization_marker()) {
    clear_data();
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.synchronization_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TracePacket.synchronization_marker)
}
inline std::string* TracePacket::mutable_synchronization_marker() {
  if (!has_synchronization_marker()) {
    clear_data();
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.synchronization_marker)
  return data_.synchronization_marker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TracePacket::release_synchronization_marker() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.synchronization_marker)
  if (has_synchronization_marker()) {
    clear_has_data();
    return data_.synchronization_marker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TracePacket::set_allocated_synchronization_marker(std::string* synchronization_marker) {
  if (has_data()) {
    clear_data();
  }
  if (synchronization_marker != nullptr) {
    set_has_synchronization_marker();
    data_.synchronization_marker_.UnsafeSetDefault(synchronization_marker);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.synchronization_marker)
}

// optional bytes compressed_packets = 50;
inline bool TracePacket::has_compressed_packets() const {
  return data_case() == kCompressedPackets;
}
inline void TracePacket::set_has_compressed_packets() {
  _oneof_case_[0] = kCompressedPackets;
}
inline void TracePacket::clear_compressed_packets() {
  if (has_compressed_packets()) {
    data_.compressed_packets_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& TracePacket::compressed_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.compressed_packets)
  if (has_compressed_packets()) {
    return data_.compressed_packets_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TracePacket::set_compressed_packets(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.compressed_packets)
  if (!has_compressed_packets()) {
    clear_data();
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_packets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.compressed_packets)
}
inline void TracePacket::set_compressed_packets(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.compressed_packets)
  if (!has_compressed_packets()) {
    clear_data();
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_packets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TracePacket.compressed_packets)
}
inline void TracePacket::set_compressed_packets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_compressed_packets()) {
    clear_data();
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_packets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TracePacket.compressed_packets)
}
inline void TracePacket::set_compressed_packets(const void* value, size_t size) {
  if (!has_compressed_packets()) {
    clear_data();
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_packets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TracePacket.compressed_packets)
}
inline std::string* TracePacket::mutable_compressed_packets() {
  if (!has_compressed_packets()) {
    clear_data();
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.compressed_packets)
  return data_.compressed_packets_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TracePacket::release_compressed_packets() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.compressed_packets)
  if (has_compressed_packets()) {
    clear_has_data();
    return data_.compressed_packets_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TracePacket::set_allocated_compressed_packets(std::string* compressed_packets) {
  if (has_data()) {
    clear_data();
  }
  if (compressed_packets != nullptr) {
    set_has_compressed_packets();
    data_.compressed_packets_.UnsafeSetDefault(compressed_packets);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.compressed_packets)
}

// optional .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
inline bool TracePacket::has_extension_descriptor() const {
  return data_case() == kExtensionDescriptor;
}
inline void TracePacket::set_has_extension_descriptor() {
  _oneof_case_[0] = kExtensionDescriptor;
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::release_extension_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.extension_descriptor)
  if (has_extension_descriptor()) {
    clear_has_data();
      ::perfetto::protos::ExtensionDescriptor* temp = data_.extension_descriptor_;
    data_.extension_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ExtensionDescriptor& TracePacket::extension_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.extension_descriptor)
  return has_extension_descriptor()
      ? *data_.extension_descriptor_
      : *reinterpret_cast< ::perfetto::protos::ExtensionDescriptor*>(&::perfetto::protos::_ExtensionDescriptor_default_instance_);
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::mutable_extension_descriptor() {
  if (!has_extension_descriptor()) {
    clear_data();
    set_has_extension_descriptor();
    data_.extension_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ExtensionDescriptor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.extension_descriptor)
  return data_.extension_descriptor_;
}

// optional .perfetto.protos.TestEvent for_testing = 900;
inline bool TracePacket::has_for_testing() const {
  return data_case() == kForTesting;
}
inline void TracePacket::set_has_for_testing() {
  _oneof_case_[0] = kForTesting;
}
inline ::perfetto::protos::TestEvent* TracePacket::release_for_testing() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.for_testing)
  if (has_for_testing()) {
    clear_has_data();
      ::perfetto::protos::TestEvent* temp = data_.for_testing_;
    data_.for_testing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TestEvent& TracePacket::for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.for_testing)
  return has_for_testing()
      ? *data_.for_testing_
      : *reinterpret_cast< ::perfetto::protos::TestEvent*>(&::perfetto::protos::_TestEvent_default_instance_);
}
inline ::perfetto::protos::TestEvent* TracePacket::mutable_for_testing() {
  if (!has_for_testing()) {
    clear_data();
    set_has_for_testing();
    data_.for_testing_ = CreateMaybeMessage< ::perfetto::protos::TestEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.for_testing)
  return data_.for_testing_;
}

// optional int32 trusted_uid = 3;
inline bool TracePacket::has_trusted_uid() const {
  return optional_trusted_uid_case() == kTrustedUid;
}
inline void TracePacket::set_has_trusted_uid() {
  _oneof_case_[1] = kTrustedUid;
}
inline void TracePacket::clear_trusted_uid() {
  if (has_trusted_uid()) {
    optional_trusted_uid_.trusted_uid_ = 0;
    clear_has_optional_trusted_uid();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracePacket::trusted_uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trusted_uid)
  if (has_trusted_uid()) {
    return optional_trusted_uid_.trusted_uid_;
  }
  return 0;
}
inline void TracePacket::set_trusted_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_trusted_uid()) {
    clear_optional_trusted_uid();
    set_has_trusted_uid();
  }
  optional_trusted_uid_.trusted_uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.trusted_uid)
}

// optional uint32 trusted_packet_sequence_id = 10;
inline bool TracePacket::has_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId;
}
inline void TracePacket::set_has_trusted_packet_sequence_id() {
  _oneof_case_[2] = kTrustedPacketSequenceId;
}
inline void TracePacket::clear_trusted_packet_sequence_id() {
  if (has_trusted_packet_sequence_id()) {
    optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = 0u;
    clear_has_optional_trusted_packet_sequence_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TracePacket::trusted_packet_sequence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trusted_packet_sequence_id)
  if (has_trusted_packet_sequence_id()) {
    return optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_;
  }
  return 0u;
}
inline void TracePacket::set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
    set_has_trusted_packet_sequence_id();
  }
  optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.trusted_packet_sequence_id)
}

// optional .perfetto.protos.InternedData interned_data = 12;
inline bool TracePacket::has_interned_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perfetto::protos::InternedData& TracePacket::interned_data() const {
  const ::perfetto::protos::InternedData* p = interned_data_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.interned_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::InternedData*>(
      &::perfetto::protos::_InternedData_default_instance_);
}
inline ::perfetto::protos::InternedData* TracePacket::release_interned_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.interned_data)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::InternedData* temp = interned_data_;
  interned_data_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InternedData* TracePacket::mutable_interned_data() {
  _has_bits_[0] |= 0x00000001u;
  if (interned_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InternedData>(GetArenaNoVirtual());
    interned_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.interned_data)
  return interned_data_;
}
inline void TracePacket::set_allocated_interned_data(::perfetto::protos::InternedData* interned_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interned_data_);
  }
  if (interned_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interned_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interned_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interned_data_ = interned_data;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.interned_data)
}

// optional uint32 sequence_flags = 13;
inline bool TracePacket::has_sequence_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TracePacket::clear_sequence_flags() {
  sequence_flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TracePacket::sequence_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.sequence_flags)
  return sequence_flags_;
}
inline void TracePacket::set_sequence_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sequence_flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.sequence_flags)
}

// optional bool incremental_state_cleared = 41;
inline bool TracePacket::has_incremental_state_cleared() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TracePacket::clear_incremental_state_cleared() {
  incremental_state_cleared_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TracePacket::incremental_state_cleared() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.incremental_state_cleared)
  return incremental_state_cleared_;
}
inline void TracePacket::set_incremental_state_cleared(bool value) {
  _has_bits_[0] |= 0x00000020u;
  incremental_state_cleared_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.incremental_state_cleared)
}

// optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
inline bool TracePacket::has_trace_packet_defaults() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::perfetto::protos::TracePacketDefaults& TracePacket::trace_packet_defaults() const {
  const ::perfetto::protos::TracePacketDefaults* p = trace_packet_defaults_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_packet_defaults)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TracePacketDefaults*>(
      &::perfetto::protos::_TracePacketDefaults_default_instance_);
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::release_trace_packet_defaults() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_packet_defaults)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TracePacketDefaults* temp = trace_packet_defaults_;
  trace_packet_defaults_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::mutable_trace_packet_defaults() {
  _has_bits_[0] |= 0x00000002u;
  if (trace_packet_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TracePacketDefaults>(GetArenaNoVirtual());
    trace_packet_defaults_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_packet_defaults)
  return trace_packet_defaults_;
}
inline void TracePacket::set_allocated_trace_packet_defaults(::perfetto::protos::TracePacketDefaults* trace_packet_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_packet_defaults_);
  }
  if (trace_packet_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trace_packet_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_packet_defaults, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trace_packet_defaults_ = trace_packet_defaults;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_packet_defaults)
}

// optional bool previous_packet_dropped = 42;
inline bool TracePacket::has_previous_packet_dropped() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TracePacket::clear_previous_packet_dropped() {
  previous_packet_dropped_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TracePacket::previous_packet_dropped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.previous_packet_dropped)
  return previous_packet_dropped_;
}
inline void TracePacket::set_previous_packet_dropped(bool value) {
  _has_bits_[0] |= 0x00000040u;
  previous_packet_dropped_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.previous_packet_dropped)
}

inline bool TracePacket::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TracePacket::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline bool TracePacket::has_optional_trusted_uid() const {
  return optional_trusted_uid_case() != OPTIONAL_TRUSTED_UID_NOT_SET;
}
inline void TracePacket::clear_has_optional_trusted_uid() {
  _oneof_case_[1] = OPTIONAL_TRUSTED_UID_NOT_SET;
}
inline bool TracePacket::has_optional_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() != OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline void TracePacket::clear_has_optional_trusted_packet_sequence_id() {
  _oneof_case_[2] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline TracePacket::DataCase TracePacket::data_case() const {
  return TracePacket::DataCase(_oneof_case_[0]);
}
inline TracePacket::OptionalTrustedUidCase TracePacket::optional_trusted_uid_case() const {
  return TracePacket::OptionalTrustedUidCase(_oneof_case_[1]);
}
inline TracePacket::OptionalTrustedPacketSequenceIdCase TracePacket::optional_trusted_packet_sequence_id_case() const {
  return TracePacket::OptionalTrustedPacketSequenceIdCase(_oneof_case_[2]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TracePacket_SequenceFlags> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto
