// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/filesystem/inode_file_map.proto

#include "protos/perfetto/trace/filesystem/inode_file_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto;
namespace perfetto {
namespace protos {
class InodeFileMap_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InodeFileMap_Entry> _instance;
} _InodeFileMap_Entry_default_instance_;
class InodeFileMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InodeFileMap> _instance;
} _InodeFileMap_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_InodeFileMap_default_instance_;
    new (ptr) ::perfetto::protos::InodeFileMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::InodeFileMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto}, {
      &scc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_InodeFileMap_Entry_default_instance_;
    new (ptr) ::perfetto::protos::InodeFileMap_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::InodeFileMap_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto}, {}};

namespace perfetto {
namespace protos {
bool InodeFileMap_Entry_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InodeFileMap_Entry_Type_strings[3] = {};

static const char InodeFileMap_Entry_Type_names[] =
  "DIRECTORY"
  "FILE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InodeFileMap_Entry_Type_entries[] = {
  { {InodeFileMap_Entry_Type_names + 0, 9}, 2 },
  { {InodeFileMap_Entry_Type_names + 9, 4}, 1 },
  { {InodeFileMap_Entry_Type_names + 13, 7}, 0 },
};

static const int InodeFileMap_Entry_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> FILE
  0, // 2 -> DIRECTORY
};

const std::string& InodeFileMap_Entry_Type_Name(
    InodeFileMap_Entry_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InodeFileMap_Entry_Type_entries,
          InodeFileMap_Entry_Type_entries_by_number,
          3, InodeFileMap_Entry_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InodeFileMap_Entry_Type_entries,
      InodeFileMap_Entry_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InodeFileMap_Entry_Type_strings[idx].get();
}
bool InodeFileMap_Entry_Type_Parse(
    const std::string& name, InodeFileMap_Entry_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InodeFileMap_Entry_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<InodeFileMap_Entry_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::UNKNOWN;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::FILE;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::DIRECTORY;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::Type_MIN;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::Type_MAX;
constexpr int InodeFileMap_Entry::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InodeFileMap_Entry::InitAsDefaultInstance() {
}
class InodeFileMap_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileMap_Entry>()._has_bits_);
  static void set_has_inode_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InodeFileMap_Entry::InodeFileMap_Entry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.InodeFileMap.Entry)
}
InodeFileMap_Entry::InodeFileMap_Entry(const InodeFileMap_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&inode_number_, &from.inode_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&inode_number_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileMap.Entry)
}

void InodeFileMap_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base);
  ::memset(&inode_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&inode_number_)) + sizeof(type_));
}

InodeFileMap_Entry::~InodeFileMap_Entry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileMap.Entry)
  SharedDtor();
}

void InodeFileMap_Entry::SharedDtor() {
}

void InodeFileMap_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InodeFileMap_Entry& InodeFileMap_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InodeFileMap_Entry_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base);
  return *internal_default_instance();
}


void InodeFileMap_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileMap.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&inode_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&inode_number_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InodeFileMap_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 inode_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inode_number(&has_bits);
          inode_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_paths(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::InodeFileMap_Entry_Type_IsValid(val))) {
            set_type(static_cast<::perfetto::protos::InodeFileMap_Entry_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InodeFileMap_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.InodeFileMap.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 inode_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_inode_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inode_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string paths = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::InodeFileMap_Entry_Type_IsValid(value)) {
            set_type(static_cast< ::perfetto::protos::InodeFileMap_Entry_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.InodeFileMap.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.InodeFileMap.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InodeFileMap_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.InodeFileMap.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 inode_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->inode_number(), output);
  }

  // repeated string paths = 2;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->paths(i), output);
  }

  // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.InodeFileMap.Entry)
}

size_t InodeFileMap_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileMap.Entry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->paths_size());
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->paths(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 inode_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->inode_number());
    }

    // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileMap_Entry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InodeFileMap_Entry*>(
      &from));
}

void InodeFileMap_Entry::MergeFrom(const InodeFileMap_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileMap.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      inode_number_ = from.inode_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InodeFileMap_Entry::CopyFrom(const InodeFileMap_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileMap.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileMap_Entry::IsInitialized() const {
  return true;
}

void InodeFileMap_Entry::InternalSwap(InodeFileMap_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paths_.InternalSwap(CastToBase(&other->paths_));
  swap(inode_number_, other->inode_number_);
  swap(type_, other->type_);
}

std::string InodeFileMap_Entry::GetTypeName() const {
  return "perfetto.protos.InodeFileMap.Entry";
}


// ===================================================================

void InodeFileMap::InitAsDefaultInstance() {
}
class InodeFileMap::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileMap>()._has_bits_);
  static void set_has_block_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InodeFileMap::InodeFileMap()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.InodeFileMap)
}
InodeFileMap::InodeFileMap(const InodeFileMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mount_points_(from.mount_points_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_device_id_ = from.block_device_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileMap)
}

void InodeFileMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base);
  block_device_id_ = PROTOBUF_ULONGLONG(0);
}

InodeFileMap::~InodeFileMap() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileMap)
  SharedDtor();
}

void InodeFileMap::SharedDtor() {
}

void InodeFileMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InodeFileMap& InodeFileMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InodeFileMap_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto.base);
  return *internal_default_instance();
}


void InodeFileMap::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mount_points_.Clear();
  entries_.Clear();
  block_device_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InodeFileMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 block_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_device_id(&has_bits);
          block_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mount_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_mount_points(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InodeFileMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.InodeFileMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 block_device_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_block_device_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mount_points = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_mount_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.InodeFileMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.InodeFileMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InodeFileMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.InodeFileMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 block_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->block_device_id(), output);
  }

  // repeated string mount_points = 2;
  for (int i = 0, n = this->mount_points_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->mount_points(i), output);
  }

  // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.InodeFileMap)
}

size_t InodeFileMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mount_points = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mount_points_size());
  for (int i = 0, n = this->mount_points_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->mount_points(i));
  }

  // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // optional uint64 block_device_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->block_device_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InodeFileMap*>(
      &from));
}

void InodeFileMap::MergeFrom(const InodeFileMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mount_points_.MergeFrom(from.mount_points_);
  entries_.MergeFrom(from.entries_);
  if (from.has_block_device_id()) {
    set_block_device_id(from.block_device_id());
  }
}

void InodeFileMap::CopyFrom(const InodeFileMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileMap::IsInitialized() const {
  return true;
}

void InodeFileMap::InternalSwap(InodeFileMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mount_points_.InternalSwap(CastToBase(&other->mount_points_));
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(block_device_id_, other->block_device_id_);
}

std::string InodeFileMap::GetTypeName() const {
  return "perfetto.protos.InodeFileMap";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileMap_Entry* Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileMap_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::InodeFileMap_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileMap* Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileMap >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::InodeFileMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
