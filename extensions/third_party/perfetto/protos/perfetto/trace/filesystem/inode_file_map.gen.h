// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FILESYSTEM_INODE_FILE_MAP_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FILESYSTEM_INODE_FILE_MAP_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class InodeFileMap;
class InodeFileMap_Entry;
enum InodeFileMap_Entry_Type : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum InodeFileMap_Entry_Type : int {
  InodeFileMap_Entry_Type_UNKNOWN = 0,
  InodeFileMap_Entry_Type_FILE = 1,
  InodeFileMap_Entry_Type_DIRECTORY = 2,
};

class PERFETTO_EXPORT InodeFileMap : public ::protozero::CppMessageObj {
 public:
  using Entry = InodeFileMap_Entry;
  enum FieldNumbers {
    kBlockDeviceIdFieldNumber = 1,
    kMountPointsFieldNumber = 2,
    kEntriesFieldNumber = 3,
  };

  InodeFileMap();
  ~InodeFileMap() override;
  InodeFileMap(InodeFileMap&&) noexcept;
  InodeFileMap& operator=(InodeFileMap&&);
  InodeFileMap(const InodeFileMap&);
  InodeFileMap& operator=(const InodeFileMap&);
  bool operator==(const InodeFileMap&) const;
  bool operator!=(const InodeFileMap& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_block_device_id() const { return _has_field_[1]; }
  uint64_t block_device_id() const { return block_device_id_; }
  void set_block_device_id(uint64_t value) { block_device_id_ = value; _has_field_.set(1); }

  const std::vector<std::string>& mount_points() const { return mount_points_; }
  std::vector<std::string>* mutable_mount_points() { return &mount_points_; }
  int mount_points_size() const { return static_cast<int>(mount_points_.size()); }
  void clear_mount_points() { mount_points_.clear(); }
  void add_mount_points(std::string value) { mount_points_.emplace_back(value); }
  std::string* add_mount_points() { mount_points_.emplace_back(); return &mount_points_.back(); }

  const std::vector<InodeFileMap_Entry>& entries() const { return entries_; }
  std::vector<InodeFileMap_Entry>* mutable_entries() { return &entries_; }
  int entries_size() const;
  void clear_entries();
  InodeFileMap_Entry* add_entries();

 private:
  uint64_t block_device_id_{};
  std::vector<std::string> mount_points_;
  std::vector<InodeFileMap_Entry> entries_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT InodeFileMap_Entry : public ::protozero::CppMessageObj {
 public:
  using Type = InodeFileMap_Entry_Type;
  static constexpr auto UNKNOWN = InodeFileMap_Entry_Type_UNKNOWN;
  static constexpr auto FILE = InodeFileMap_Entry_Type_FILE;
  static constexpr auto DIRECTORY = InodeFileMap_Entry_Type_DIRECTORY;
  static constexpr auto Type_MIN = InodeFileMap_Entry_Type_UNKNOWN;
  static constexpr auto Type_MAX = InodeFileMap_Entry_Type_DIRECTORY;
  enum FieldNumbers {
    kInodeNumberFieldNumber = 1,
    kPathsFieldNumber = 2,
    kTypeFieldNumber = 3,
  };

  InodeFileMap_Entry();
  ~InodeFileMap_Entry() override;
  InodeFileMap_Entry(InodeFileMap_Entry&&) noexcept;
  InodeFileMap_Entry& operator=(InodeFileMap_Entry&&);
  InodeFileMap_Entry(const InodeFileMap_Entry&);
  InodeFileMap_Entry& operator=(const InodeFileMap_Entry&);
  bool operator==(const InodeFileMap_Entry&) const;
  bool operator!=(const InodeFileMap_Entry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_inode_number() const { return _has_field_[1]; }
  uint64_t inode_number() const { return inode_number_; }
  void set_inode_number(uint64_t value) { inode_number_ = value; _has_field_.set(1); }

  const std::vector<std::string>& paths() const { return paths_; }
  std::vector<std::string>* mutable_paths() { return &paths_; }
  int paths_size() const { return static_cast<int>(paths_.size()); }
  void clear_paths() { paths_.clear(); }
  void add_paths(std::string value) { paths_.emplace_back(value); }
  std::string* add_paths() { paths_.emplace_back(); return &paths_.back(); }

  bool has_type() const { return _has_field_[3]; }
  InodeFileMap_Entry_Type type() const { return type_; }
  void set_type(InodeFileMap_Entry_Type value) { type_ = value; _has_field_.set(3); }

 private:
  uint64_t inode_number_{};
  std::vector<std::string> paths_;
  InodeFileMap_Entry_Type type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FILESYSTEM_INODE_FILE_MAP_PROTO_CPP_H_
