// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/memory_graph.proto

#include "protos/perfetto/trace/memory_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
namespace perfetto {
namespace protos {
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry> _instance;
} _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode> _instance;
} _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge> _instance;
} _MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryTrackerSnapshot_ProcessSnapshot> _instance;
} _MemoryTrackerSnapshot_ProcessSnapshot_default_instance_;
class MemoryTrackerSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryTrackerSnapshot> _instance;
} _MemoryTrackerSnapshot_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MemoryTrackerSnapshot_default_instance_;
    new (ptr) ::perfetto::protos::MemoryTrackerSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MemoryTrackerSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto}, {
      &scc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MemoryTrackerSnapshot_ProcessSnapshot_default_instance_;
    new (ptr) ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto}, {
      &scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base,
      &scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_;
    new (ptr) ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_;
    new (ptr) ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto}, {
      &scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_;
    new (ptr) ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto}, {}};

namespace perfetto {
namespace protos {
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings[3] = {};

static const char MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names[] =
  "BYTES"
  "COUNT"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries[] = {
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 0, 5}, 1 },
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 5, 5}, 2 },
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 10, 11}, 0 },
};

static const int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> BYTES
  1, // 2 -> COUNT
};

const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries,
          MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number,
          3, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries,
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings[idx].get();
}
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(
    const std::string& name, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::UNSPECIFIED;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::BYTES;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::COUNT;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_MIN;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_MAX;
constexpr int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool MemoryTrackerSnapshot_LevelOfDetail_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryTrackerSnapshot_LevelOfDetail_strings[3] = {};

static const char MemoryTrackerSnapshot_LevelOfDetail_names[] =
  "DETAIL_BACKGROUND"
  "DETAIL_FULL"
  "DETAIL_LIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryTrackerSnapshot_LevelOfDetail_entries[] = {
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 0, 17}, 2 },
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 17, 11}, 0 },
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 28, 12}, 1 },
};

static const int MemoryTrackerSnapshot_LevelOfDetail_entries_by_number[] = {
  1, // 0 -> DETAIL_FULL
  2, // 1 -> DETAIL_LIGHT
  0, // 2 -> DETAIL_BACKGROUND
};

const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(
    MemoryTrackerSnapshot_LevelOfDetail value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryTrackerSnapshot_LevelOfDetail_entries,
          MemoryTrackerSnapshot_LevelOfDetail_entries_by_number,
          3, MemoryTrackerSnapshot_LevelOfDetail_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryTrackerSnapshot_LevelOfDetail_entries,
      MemoryTrackerSnapshot_LevelOfDetail_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryTrackerSnapshot_LevelOfDetail_strings[idx].get();
}
bool MemoryTrackerSnapshot_LevelOfDetail_Parse(
    const std::string& name, MemoryTrackerSnapshot_LevelOfDetail* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryTrackerSnapshot_LevelOfDetail_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryTrackerSnapshot_LevelOfDetail>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_FULL;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_LIGHT;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_BACKGROUND;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::LevelOfDetail_MIN;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::LevelOfDetail_MAX;
constexpr int MemoryTrackerSnapshot::LevelOfDetail_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::InitAsDefaultInstance() {
}
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_string()) {
    value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_string_);
  }
  ::memcpy(&value_uint64_, &from.value_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&value_uint64_)) + sizeof(units_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_uint64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&units_) -
      reinterpret_cast<char*>(&value_uint64_)) + sizeof(units_));
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  SharedDtor();
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_string_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&value_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&units_) -
        reinterpret_cast<char*>(&value_uint64_)) + sizeof(units_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(val))) {
            set_units(static_cast<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 value_uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value_uint64(&has_bits);
          value_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(value)) {
            set_units(static_cast< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value_uint64 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_value_uint64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->units(), output);
  }

  // optional uint64 value_uint64 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->value_uint64(), output);
  }

  // optional string value_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value_string(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value_string());
    }

    // optional uint64 value_uint64 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->value_uint64());
    }

    // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->units());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      value_uint64_ = from.value_uint64_;
    }
    if (cached_has_bits & 0x00000008u) {
      units_ = from.units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_string_.Swap(&other->value_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_uint64_, other->value_uint64_);
  swap(units_, other->units_);
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry";
}


// ===================================================================

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::InitAsDefaultInstance() {
}
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weak(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  absolute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_name()) {
    absolute_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weak_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weak_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  absolute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weak_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weak_));
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  SharedDtor();
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SharedDtor() {
  absolute_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    absolute_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weak_) -
        reinterpret_cast<char*>(&id_)) + sizeof(weak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string absolute_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_absolute_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_weak(&has_bits);
          weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string absolute_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool weak = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_weak(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string absolute_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->absolute_name(), output);
  }

  // optional bool weak = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->weak(), output);
  }

  // optional uint64 size_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->size_bytes(), output);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string absolute_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->absolute_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 size_bytes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->size_bytes());
    }

    // optional bool weak = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      absolute_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      weak_ = from.weak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  absolute_name_.Swap(&other->absolute_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(size_bytes_, other->size_bytes_);
  swap(weak_, other->weak_);
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode";
}


// ===================================================================

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::InitAsDefaultInstance() {
}
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_importance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_overridable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&overridable_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(overridable_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SharedCtor() {
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overridable_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(overridable_));
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  SharedDtor();
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SharedDtor() {
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overridable_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(overridable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_id(&has_bits);
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 importance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_importance(&has_bits);
          importance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool overridable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_overridable(&has_bits);
          overridable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 source_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_source_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_target_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 importance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_importance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &importance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool overridable = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_overridable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overridable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->source_id(), output);
  }

  // optional uint64 target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->importance(), output);
  }

  // optional bool overridable = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->overridable(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->source_id());
    }

    // optional uint64 target_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 importance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->importance());
    }

    // optional bool overridable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      importance_ = from.importance_;
    }
    if (cached_has_bits & 0x00000008u) {
      overridable_ = from.overridable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_id_, other->source_id_);
  swap(target_id_, other->target_id_);
  swap(importance_, other->importance_);
  swap(overridable_, other->overridable_);
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge";
}


// ===================================================================

void MemoryTrackerSnapshot_ProcessSnapshot::InitAsDefaultInstance() {
}
class MemoryTrackerSnapshot_ProcessSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot::MemoryTrackerSnapshot_ProcessSnapshot()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
}
MemoryTrackerSnapshot_ProcessSnapshot::MemoryTrackerSnapshot_ProcessSnapshot(const MemoryTrackerSnapshot_ProcessSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allocator_dumps_(from.allocator_dumps_),
      memory_edges_(from.memory_edges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
}

void MemoryTrackerSnapshot_ProcessSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  pid_ = 0;
}

MemoryTrackerSnapshot_ProcessSnapshot::~MemoryTrackerSnapshot_ProcessSnapshot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  SharedDtor();
}

void MemoryTrackerSnapshot_ProcessSnapshot::SharedDtor() {
}

void MemoryTrackerSnapshot_ProcessSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryTrackerSnapshot_ProcessSnapshot& MemoryTrackerSnapshot_ProcessSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryTrackerSnapshot_ProcessSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MemoryTrackerSnapshot_ProcessSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocator_dumps_.Clear();
  memory_edges_.Clear();
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryTrackerSnapshot_ProcessSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_allocator_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_memory_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryTrackerSnapshot_ProcessSnapshot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_allocator_dumps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_memory_edges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryTrackerSnapshot_ProcessSnapshot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allocator_dumps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->allocator_dumps(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_edges_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->memory_edges(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
}

size_t MemoryTrackerSnapshot_ProcessSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->allocator_dumps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->allocator_dumps(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->memory_edges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->memory_edges(static_cast<int>(i)));
    }
  }

  // optional int32 pid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allocator_dumps_.MergeFrom(from.allocator_dumps_);
  memory_edges_.MergeFrom(from.memory_edges_);
  if (from.has_pid()) {
    set_pid(from.pid());
  }
}

void MemoryTrackerSnapshot_ProcessSnapshot::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&allocator_dumps_)->InternalSwap(CastToBase(&other->allocator_dumps_));
  CastToBase(&memory_edges_)->InternalSwap(CastToBase(&other->memory_edges_));
  swap(pid_, other->pid_);
}

std::string MemoryTrackerSnapshot_ProcessSnapshot::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot";
}


// ===================================================================

void MemoryTrackerSnapshot::InitAsDefaultInstance() {
}
class MemoryTrackerSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot>()._has_bits_);
  static void set_has_global_dump_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level_of_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryTrackerSnapshot::MemoryTrackerSnapshot()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MemoryTrackerSnapshot)
}
MemoryTrackerSnapshot::MemoryTrackerSnapshot(const MemoryTrackerSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      process_memory_dumps_(from.process_memory_dumps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&global_dump_id_, &from.global_dump_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_of_detail_) -
    reinterpret_cast<char*>(&global_dump_id_)) + sizeof(level_of_detail_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot)
}

void MemoryTrackerSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  ::memset(&global_dump_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_of_detail_) -
      reinterpret_cast<char*>(&global_dump_id_)) + sizeof(level_of_detail_));
}

MemoryTrackerSnapshot::~MemoryTrackerSnapshot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot)
  SharedDtor();
}

void MemoryTrackerSnapshot::SharedDtor() {
}

void MemoryTrackerSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryTrackerSnapshot& MemoryTrackerSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryTrackerSnapshot_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MemoryTrackerSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_memory_dumps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&global_dump_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_of_detail_) -
        reinterpret_cast<char*>(&global_dump_id_)) + sizeof(level_of_detail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryTrackerSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 global_dump_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_global_dump_id(&has_bits);
          global_dump_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail_IsValid(val))) {
            set_level_of_detail(static_cast<::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_process_memory_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryTrackerSnapshot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MemoryTrackerSnapshot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 global_dump_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_global_dump_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &global_dump_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail_IsValid(value)) {
            set_level_of_detail(static_cast< ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_process_memory_dumps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MemoryTrackerSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MemoryTrackerSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryTrackerSnapshot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MemoryTrackerSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 global_dump_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->global_dump_id(), output);
  }

  // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->level_of_detail(), output);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->process_memory_dumps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->process_memory_dumps(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MemoryTrackerSnapshot)
}

size_t MemoryTrackerSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->process_memory_dumps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->process_memory_dumps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 global_dump_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->global_dump_id());
    }

    // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->level_of_detail());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryTrackerSnapshot*>(
      &from));
}

void MemoryTrackerSnapshot::MergeFrom(const MemoryTrackerSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_memory_dumps_.MergeFrom(from.process_memory_dumps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      global_dump_id_ = from.global_dump_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_of_detail_ = from.level_of_detail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryTrackerSnapshot::CopyFrom(const MemoryTrackerSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot::InternalSwap(MemoryTrackerSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&process_memory_dumps_)->InternalSwap(CastToBase(&other->process_memory_dumps_));
  swap(global_dump_id_, other->global_dump_id_);
  swap(level_of_detail_, other->level_of_detail_);
}

std::string MemoryTrackerSnapshot::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot* Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MemoryTrackerSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
