// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/compaction.proto

#include "protos/perfetto/trace/ftrace/compaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class MmCompactionBeginFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionBeginFtraceEvent> _instance;
} _MmCompactionBeginFtraceEvent_default_instance_;
class MmCompactionDeferCompactionFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionDeferCompactionFtraceEvent> _instance;
} _MmCompactionDeferCompactionFtraceEvent_default_instance_;
class MmCompactionDeferredFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionDeferredFtraceEvent> _instance;
} _MmCompactionDeferredFtraceEvent_default_instance_;
class MmCompactionDeferResetFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionDeferResetFtraceEvent> _instance;
} _MmCompactionDeferResetFtraceEvent_default_instance_;
class MmCompactionEndFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionEndFtraceEvent> _instance;
} _MmCompactionEndFtraceEvent_default_instance_;
class MmCompactionFinishedFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionFinishedFtraceEvent> _instance;
} _MmCompactionFinishedFtraceEvent_default_instance_;
class MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionIsolateFreepagesFtraceEvent> _instance;
} _MmCompactionIsolateFreepagesFtraceEvent_default_instance_;
class MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionIsolateMigratepagesFtraceEvent> _instance;
} _MmCompactionIsolateMigratepagesFtraceEvent_default_instance_;
class MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionKcompactdSleepFtraceEvent> _instance;
} _MmCompactionKcompactdSleepFtraceEvent_default_instance_;
class MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionKcompactdWakeFtraceEvent> _instance;
} _MmCompactionKcompactdWakeFtraceEvent_default_instance_;
class MmCompactionMigratepagesFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionMigratepagesFtraceEvent> _instance;
} _MmCompactionMigratepagesFtraceEvent_default_instance_;
class MmCompactionSuitableFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionSuitableFtraceEvent> _instance;
} _MmCompactionSuitableFtraceEvent_default_instance_;
class MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionTryToCompactPagesFtraceEvent> _instance;
} _MmCompactionTryToCompactPagesFtraceEvent_default_instance_;
class MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmCompactionWakeupKcompactdFtraceEvent> _instance;
} _MmCompactionWakeupKcompactdFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionBeginFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionBeginFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionBeginFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionDeferCompactionFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionDeferResetFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionDeferResetFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionDeferredFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionDeferredFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionDeferredFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionEndFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionEndFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionEndFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionFinishedFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionFinishedFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionFinishedFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionIsolateFreepagesFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionIsolateMigratepagesFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionKcompactdSleepFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionKcompactdWakeFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionMigratepagesFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionMigratepagesFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionSuitableFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionSuitableFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionSuitableFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionTryToCompactPagesFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

static void InitDefaultsscc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmCompactionWakeupKcompactdFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void MmCompactionBeginFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionBeginFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionBeginFtraceEvent>()._has_bits_);
  static void set_has_zone_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_migrate_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zone_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionBeginFtraceEvent)
}
MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(const MmCompactionBeginFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zone_start_, &from.zone_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
    reinterpret_cast<char*>(&zone_start_)) + sizeof(sync_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionBeginFtraceEvent)
}

void MmCompactionBeginFtraceEvent::SharedCtor() {
  ::memset(&zone_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&zone_start_)) + sizeof(sync_));
}

MmCompactionBeginFtraceEvent::~MmCompactionBeginFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionBeginFtraceEvent)
  SharedDtor();
}

void MmCompactionBeginFtraceEvent::SharedDtor() {
}

void MmCompactionBeginFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionBeginFtraceEvent& MmCompactionBeginFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionBeginFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&zone_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_) -
        reinterpret_cast<char*>(&zone_start_)) + sizeof(sync_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionBeginFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 zone_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_zone_start(&has_bits);
          zone_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 migrate_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_migrate_pfn(&has_bits);
          migrate_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 free_pfn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_free_pfn(&has_bits);
          free_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 zone_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_zone_end(&has_bits);
          zone_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sync = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sync(&has_bits);
          sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionBeginFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 zone_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_zone_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zone_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 migrate_pfn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_migrate_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &migrate_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 free_pfn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_free_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 zone_end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_zone_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zone_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sync = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_sync(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionBeginFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionBeginFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionBeginFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 zone_start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->zone_start(), output);
  }

  // optional uint64 migrate_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->migrate_pfn(), output);
  }

  // optional uint64 free_pfn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->free_pfn(), output);
  }

  // optional uint64 zone_end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->zone_end(), output);
  }

  // optional uint32 sync = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->sync(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionBeginFtraceEvent)
}

size_t MmCompactionBeginFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 zone_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->zone_start());
    }

    // optional uint64 migrate_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->migrate_pfn());
    }

    // optional uint64 free_pfn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->free_pfn());
    }

    // optional uint64 zone_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->zone_end());
    }

    // optional uint32 sync = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sync());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionBeginFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionBeginFtraceEvent*>(
      &from));
}

void MmCompactionBeginFtraceEvent::MergeFrom(const MmCompactionBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      zone_start_ = from.zone_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      migrate_pfn_ = from.migrate_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_pfn_ = from.free_pfn_;
    }
    if (cached_has_bits & 0x00000008u) {
      zone_end_ = from.zone_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      sync_ = from.sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionBeginFtraceEvent::CopyFrom(const MmCompactionBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionBeginFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionBeginFtraceEvent::InternalSwap(MmCompactionBeginFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(zone_start_, other->zone_start_);
  swap(migrate_pfn_, other->migrate_pfn_);
  swap(free_pfn_, other->free_pfn_);
  swap(zone_end_, other->zone_end_);
  swap(sync_, other->sync_);
}

std::string MmCompactionBeginFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionBeginFtraceEvent";
}


// ===================================================================

void MmCompactionDeferCompactionFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionDeferCompactionFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferCompactionFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
}
MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(const MmCompactionDeferCompactionFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_failed_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
}

void MmCompactionDeferCompactionFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_failed_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
}

MmCompactionDeferCompactionFtraceEvent::~MmCompactionDeferCompactionFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  SharedDtor();
}

void MmCompactionDeferCompactionFtraceEvent::SharedDtor() {
}

void MmCompactionDeferCompactionFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionDeferCompactionFtraceEvent& MmCompactionDeferCompactionFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionDeferCompactionFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_failed_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionDeferCompactionFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionDeferCompactionFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 considered = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_considered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &considered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defer_shift = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_defer_shift(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defer_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_failed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_order_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionDeferCompactionFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->considered(), output);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->defer_shift(), output);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->order_failed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
}

size_t MmCompactionDeferCompactionFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order_failed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionDeferCompactionFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionDeferCompactionFtraceEvent*>(
      &from));
}

void MmCompactionDeferCompactionFtraceEvent::MergeFrom(const MmCompactionDeferCompactionFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      considered_ = from.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      defer_shift_ = from.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_failed_ = from.order_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionDeferCompactionFtraceEvent::CopyFrom(const MmCompactionDeferCompactionFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferCompactionFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferCompactionFtraceEvent::InternalSwap(MmCompactionDeferCompactionFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(idx_, other->idx_);
  swap(order_, other->order_);
  swap(considered_, other->considered_);
  swap(defer_shift_, other->defer_shift_);
  swap(order_failed_, other->order_failed_);
}

std::string MmCompactionDeferCompactionFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionDeferCompactionFtraceEvent";
}


// ===================================================================

void MmCompactionDeferredFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionDeferredFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferredFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
}
MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(const MmCompactionDeferredFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_failed_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
}

void MmCompactionDeferredFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_failed_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
}

MmCompactionDeferredFtraceEvent::~MmCompactionDeferredFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
  SharedDtor();
}

void MmCompactionDeferredFtraceEvent::SharedDtor() {
}

void MmCompactionDeferredFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionDeferredFtraceEvent& MmCompactionDeferredFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionDeferredFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_failed_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionDeferredFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionDeferredFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 considered = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_considered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &considered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defer_shift = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_defer_shift(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defer_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_failed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_order_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionDeferredFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionDeferredFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionDeferredFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->considered(), output);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->defer_shift(), output);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->order_failed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionDeferredFtraceEvent)
}

size_t MmCompactionDeferredFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order_failed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionDeferredFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionDeferredFtraceEvent*>(
      &from));
}

void MmCompactionDeferredFtraceEvent::MergeFrom(const MmCompactionDeferredFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      considered_ = from.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      defer_shift_ = from.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_failed_ = from.order_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionDeferredFtraceEvent::CopyFrom(const MmCompactionDeferredFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferredFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferredFtraceEvent::InternalSwap(MmCompactionDeferredFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(idx_, other->idx_);
  swap(order_, other->order_);
  swap(considered_, other->considered_);
  swap(defer_shift_, other->defer_shift_);
  swap(order_failed_, other->order_failed_);
}

std::string MmCompactionDeferredFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionDeferredFtraceEvent";
}


// ===================================================================

void MmCompactionDeferResetFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionDeferResetFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferResetFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
}
MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(const MmCompactionDeferResetFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_failed_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
}

void MmCompactionDeferResetFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_failed_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
}

MmCompactionDeferResetFtraceEvent::~MmCompactionDeferResetFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  SharedDtor();
}

void MmCompactionDeferResetFtraceEvent::SharedDtor() {
}

void MmCompactionDeferResetFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionDeferResetFtraceEvent& MmCompactionDeferResetFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionDeferResetFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_failed_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(order_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionDeferResetFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionDeferResetFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 considered = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_considered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &considered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defer_shift = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_defer_shift(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defer_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_failed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_order_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionDeferResetFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->considered(), output);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->defer_shift(), output);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->order_failed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionDeferResetFtraceEvent)
}

size_t MmCompactionDeferResetFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order_failed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionDeferResetFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionDeferResetFtraceEvent*>(
      &from));
}

void MmCompactionDeferResetFtraceEvent::MergeFrom(const MmCompactionDeferResetFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      considered_ = from.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      defer_shift_ = from.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_failed_ = from.order_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionDeferResetFtraceEvent::CopyFrom(const MmCompactionDeferResetFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferResetFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferResetFtraceEvent::InternalSwap(MmCompactionDeferResetFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(idx_, other->idx_);
  swap(order_, other->order_);
  swap(considered_, other->considered_);
  swap(defer_shift_, other->defer_shift_);
  swap(order_failed_, other->order_failed_);
}

std::string MmCompactionDeferResetFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionDeferResetFtraceEvent";
}


// ===================================================================

void MmCompactionEndFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionEndFtraceEvent>()._has_bits_);
  static void set_has_zone_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_migrate_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zone_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionEndFtraceEvent)
}
MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(const MmCompactionEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zone_start_, &from.zone_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&zone_start_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionEndFtraceEvent)
}

void MmCompactionEndFtraceEvent::SharedCtor() {
  ::memset(&zone_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&zone_start_)) + sizeof(status_));
}

MmCompactionEndFtraceEvent::~MmCompactionEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionEndFtraceEvent)
  SharedDtor();
}

void MmCompactionEndFtraceEvent::SharedDtor() {
}

void MmCompactionEndFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionEndFtraceEvent& MmCompactionEndFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&zone_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&zone_start_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionEndFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 zone_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_zone_start(&has_bits);
          zone_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 migrate_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_migrate_pfn(&has_bits);
          migrate_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 free_pfn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_free_pfn(&has_bits);
          free_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 zone_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_zone_end(&has_bits);
          zone_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sync = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sync(&has_bits);
          sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionEndFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionEndFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 zone_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_zone_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zone_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 migrate_pfn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_migrate_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &migrate_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 free_pfn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_free_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 zone_end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_zone_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zone_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sync = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_sync(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionEndFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionEndFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionEndFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 zone_start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->zone_start(), output);
  }

  // optional uint64 migrate_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->migrate_pfn(), output);
  }

  // optional uint64 free_pfn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->free_pfn(), output);
  }

  // optional uint64 zone_end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->zone_end(), output);
  }

  // optional uint32 sync = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->sync(), output);
  }

  // optional int32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionEndFtraceEvent)
}

size_t MmCompactionEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionEndFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 zone_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->zone_start());
    }

    // optional uint64 migrate_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->migrate_pfn());
    }

    // optional uint64 free_pfn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->free_pfn());
    }

    // optional uint64 zone_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->zone_end());
    }

    // optional uint32 sync = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sync());
    }

    // optional int32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionEndFtraceEvent*>(
      &from));
}

void MmCompactionEndFtraceEvent::MergeFrom(const MmCompactionEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      zone_start_ = from.zone_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      migrate_pfn_ = from.migrate_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_pfn_ = from.free_pfn_;
    }
    if (cached_has_bits & 0x00000008u) {
      zone_end_ = from.zone_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      sync_ = from.sync_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionEndFtraceEvent::CopyFrom(const MmCompactionEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionEndFtraceEvent::InternalSwap(MmCompactionEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(zone_start_, other->zone_start_);
  swap(migrate_pfn_, other->migrate_pfn_);
  swap(free_pfn_, other->free_pfn_);
  swap(zone_end_, other->zone_end_);
  swap(sync_, other->sync_);
  swap(status_, other->status_);
}

std::string MmCompactionEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionEndFtraceEvent";
}


// ===================================================================

void MmCompactionFinishedFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionFinishedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionFinishedFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
}
MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(const MmCompactionFinishedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
}

void MmCompactionFinishedFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
}

MmCompactionFinishedFtraceEvent::~MmCompactionFinishedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
  SharedDtor();
}

void MmCompactionFinishedFtraceEvent::SharedDtor() {
}

void MmCompactionFinishedFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionFinishedFtraceEvent& MmCompactionFinishedFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionFinishedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionFinishedFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionFinishedFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionFinishedFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionFinishedFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionFinishedFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional int32 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionFinishedFtraceEvent)
}

size_t MmCompactionFinishedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 ret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionFinishedFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionFinishedFtraceEvent*>(
      &from));
}

void MmCompactionFinishedFtraceEvent::MergeFrom(const MmCompactionFinishedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionFinishedFtraceEvent::CopyFrom(const MmCompactionFinishedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionFinishedFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionFinishedFtraceEvent::InternalSwap(MmCompactionFinishedFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(idx_, other->idx_);
  swap(order_, other->order_);
  swap(ret_, other->ret_);
}

std::string MmCompactionFinishedFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionFinishedFtraceEvent";
}


// ===================================================================

void MmCompactionIsolateFreepagesFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionIsolateFreepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionIsolateFreepagesFtraceEvent>()._has_bits_);
  static void set_has_start_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nr_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
}
MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(const MmCompactionIsolateFreepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_pfn_, &from.start_pfn_,
    static_cast<size_t>(reinterpret_cast<char*>(&nr_taken_) -
    reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
}

void MmCompactionIsolateFreepagesFtraceEvent::SharedCtor() {
  ::memset(&start_pfn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nr_taken_) -
      reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
}

MmCompactionIsolateFreepagesFtraceEvent::~MmCompactionIsolateFreepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  SharedDtor();
}

void MmCompactionIsolateFreepagesFtraceEvent::SharedDtor() {
}

void MmCompactionIsolateFreepagesFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionIsolateFreepagesFtraceEvent& MmCompactionIsolateFreepagesFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionIsolateFreepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&start_pfn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nr_taken_) -
        reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionIsolateFreepagesFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 start_pfn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_pfn(&has_bits);
          start_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_pfn(&has_bits);
          end_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nr_scanned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nr_scanned(&has_bits);
          nr_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nr_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nr_taken(&has_bits);
          nr_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionIsolateFreepagesFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_pfn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_pfn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nr_scanned = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nr_scanned(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_scanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nr_taken = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_nr_taken(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionIsolateFreepagesFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_pfn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_pfn(), output);
  }

  // optional uint64 end_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_pfn(), output);
  }

  // optional uint64 nr_scanned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->nr_scanned(), output);
  }

  // optional uint64 nr_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->nr_taken(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
}

size_t MmCompactionIsolateFreepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 start_pfn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->start_pfn());
    }

    // optional uint64 end_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->end_pfn());
    }

    // optional uint64 nr_scanned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_scanned());
    }

    // optional uint64 nr_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_taken());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionIsolateFreepagesFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionIsolateFreepagesFtraceEvent*>(
      &from));
}

void MmCompactionIsolateFreepagesFtraceEvent::MergeFrom(const MmCompactionIsolateFreepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_pfn_ = from.start_pfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_pfn_ = from.end_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      nr_scanned_ = from.nr_scanned_;
    }
    if (cached_has_bits & 0x00000008u) {
      nr_taken_ = from.nr_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionIsolateFreepagesFtraceEvent::CopyFrom(const MmCompactionIsolateFreepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionIsolateFreepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionIsolateFreepagesFtraceEvent::InternalSwap(MmCompactionIsolateFreepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_pfn_, other->start_pfn_);
  swap(end_pfn_, other->end_pfn_);
  swap(nr_scanned_, other->nr_scanned_);
  swap(nr_taken_, other->nr_taken_);
}

std::string MmCompactionIsolateFreepagesFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent";
}


// ===================================================================

void MmCompactionIsolateMigratepagesFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionIsolateMigratepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionIsolateMigratepagesFtraceEvent>()._has_bits_);
  static void set_has_start_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nr_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
}
MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(const MmCompactionIsolateMigratepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_pfn_, &from.start_pfn_,
    static_cast<size_t>(reinterpret_cast<char*>(&nr_taken_) -
    reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
}

void MmCompactionIsolateMigratepagesFtraceEvent::SharedCtor() {
  ::memset(&start_pfn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nr_taken_) -
      reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
}

MmCompactionIsolateMigratepagesFtraceEvent::~MmCompactionIsolateMigratepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  SharedDtor();
}

void MmCompactionIsolateMigratepagesFtraceEvent::SharedDtor() {
}

void MmCompactionIsolateMigratepagesFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionIsolateMigratepagesFtraceEvent& MmCompactionIsolateMigratepagesFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionIsolateMigratepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&start_pfn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nr_taken_) -
        reinterpret_cast<char*>(&start_pfn_)) + sizeof(nr_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionIsolateMigratepagesFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 start_pfn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_pfn(&has_bits);
          start_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_pfn(&has_bits);
          end_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nr_scanned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nr_scanned(&has_bits);
          nr_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nr_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nr_taken(&has_bits);
          nr_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionIsolateMigratepagesFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_pfn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_pfn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_pfn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_pfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nr_scanned = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nr_scanned(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_scanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nr_taken = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_nr_taken(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionIsolateMigratepagesFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_pfn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_pfn(), output);
  }

  // optional uint64 end_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_pfn(), output);
  }

  // optional uint64 nr_scanned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->nr_scanned(), output);
  }

  // optional uint64 nr_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->nr_taken(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
}

size_t MmCompactionIsolateMigratepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 start_pfn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->start_pfn());
    }

    // optional uint64 end_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->end_pfn());
    }

    // optional uint64 nr_scanned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_scanned());
    }

    // optional uint64 nr_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_taken());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionIsolateMigratepagesFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionIsolateMigratepagesFtraceEvent*>(
      &from));
}

void MmCompactionIsolateMigratepagesFtraceEvent::MergeFrom(const MmCompactionIsolateMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_pfn_ = from.start_pfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_pfn_ = from.end_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      nr_scanned_ = from.nr_scanned_;
    }
    if (cached_has_bits & 0x00000008u) {
      nr_taken_ = from.nr_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionIsolateMigratepagesFtraceEvent::CopyFrom(const MmCompactionIsolateMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionIsolateMigratepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionIsolateMigratepagesFtraceEvent::InternalSwap(MmCompactionIsolateMigratepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_pfn_, other->start_pfn_);
  swap(end_pfn_, other->end_pfn_);
  swap(nr_scanned_, other->nr_scanned_);
  swap(nr_taken_, other->nr_taken_);
}

std::string MmCompactionIsolateMigratepagesFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent";
}


// ===================================================================

void MmCompactionKcompactdSleepFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionKcompactdSleepFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionKcompactdSleepFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
}
MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(const MmCompactionKcompactdSleepFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nid_ = from.nid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
}

void MmCompactionKcompactdSleepFtraceEvent::SharedCtor() {
  nid_ = 0;
}

MmCompactionKcompactdSleepFtraceEvent::~MmCompactionKcompactdSleepFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  SharedDtor();
}

void MmCompactionKcompactdSleepFtraceEvent::SharedDtor() {
}

void MmCompactionKcompactdSleepFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionKcompactdSleepFtraceEvent& MmCompactionKcompactdSleepFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionKcompactdSleepFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionKcompactdSleepFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionKcompactdSleepFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionKcompactdSleepFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
}

size_t MmCompactionKcompactdSleepFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionKcompactdSleepFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionKcompactdSleepFtraceEvent*>(
      &from));
}

void MmCompactionKcompactdSleepFtraceEvent::MergeFrom(const MmCompactionKcompactdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nid()) {
    set_nid(from.nid());
  }
}

void MmCompactionKcompactdSleepFtraceEvent::CopyFrom(const MmCompactionKcompactdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionKcompactdSleepFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionKcompactdSleepFtraceEvent::InternalSwap(MmCompactionKcompactdSleepFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
}

std::string MmCompactionKcompactdSleepFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionKcompactdSleepFtraceEvent";
}


// ===================================================================

void MmCompactionKcompactdWakeFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionKcompactdWakeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionKcompactdWakeFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classzone_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
}
MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(const MmCompactionKcompactdWakeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&classzone_idx_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
}

void MmCompactionKcompactdWakeFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classzone_idx_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
}

MmCompactionKcompactdWakeFtraceEvent::~MmCompactionKcompactdWakeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  SharedDtor();
}

void MmCompactionKcompactdWakeFtraceEvent::SharedDtor() {
}

void MmCompactionKcompactdWakeFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionKcompactdWakeFtraceEvent& MmCompactionKcompactdWakeFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionKcompactdWakeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classzone_idx_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionKcompactdWakeFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 classzone_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_classzone_idx(&has_bits);
          classzone_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionKcompactdWakeFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classzone_idx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_classzone_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classzone_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionKcompactdWakeFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional uint32 classzone_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->classzone_idx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
}

size_t MmCompactionKcompactdWakeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 classzone_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->classzone_idx());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionKcompactdWakeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionKcompactdWakeFtraceEvent*>(
      &from));
}

void MmCompactionKcompactdWakeFtraceEvent::MergeFrom(const MmCompactionKcompactdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      classzone_idx_ = from.classzone_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionKcompactdWakeFtraceEvent::CopyFrom(const MmCompactionKcompactdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionKcompactdWakeFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionKcompactdWakeFtraceEvent::InternalSwap(MmCompactionKcompactdWakeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(order_, other->order_);
  swap(classzone_idx_, other->classzone_idx_);
}

std::string MmCompactionKcompactdWakeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionKcompactdWakeFtraceEvent";
}


// ===================================================================

void MmCompactionMigratepagesFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionMigratepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionMigratepagesFtraceEvent>()._has_bits_);
  static void set_has_nr_migrated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nr_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
}
MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(const MmCompactionMigratepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nr_migrated_, &from.nr_migrated_,
    static_cast<size_t>(reinterpret_cast<char*>(&nr_failed_) -
    reinterpret_cast<char*>(&nr_migrated_)) + sizeof(nr_failed_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
}

void MmCompactionMigratepagesFtraceEvent::SharedCtor() {
  ::memset(&nr_migrated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nr_failed_) -
      reinterpret_cast<char*>(&nr_migrated_)) + sizeof(nr_failed_));
}

MmCompactionMigratepagesFtraceEvent::~MmCompactionMigratepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  SharedDtor();
}

void MmCompactionMigratepagesFtraceEvent::SharedDtor() {
}

void MmCompactionMigratepagesFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionMigratepagesFtraceEvent& MmCompactionMigratepagesFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionMigratepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&nr_migrated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nr_failed_) -
        reinterpret_cast<char*>(&nr_migrated_)) + sizeof(nr_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionMigratepagesFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 nr_migrated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nr_migrated(&has_bits);
          nr_migrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nr_failed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nr_failed(&has_bits);
          nr_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionMigratepagesFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nr_migrated = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nr_migrated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_migrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nr_failed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nr_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionMigratepagesFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 nr_migrated = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->nr_migrated(), output);
  }

  // optional uint64 nr_failed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nr_failed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
}

size_t MmCompactionMigratepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 nr_migrated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_migrated());
    }

    // optional uint64 nr_failed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nr_failed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionMigratepagesFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionMigratepagesFtraceEvent*>(
      &from));
}

void MmCompactionMigratepagesFtraceEvent::MergeFrom(const MmCompactionMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nr_migrated_ = from.nr_migrated_;
    }
    if (cached_has_bits & 0x00000002u) {
      nr_failed_ = from.nr_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionMigratepagesFtraceEvent::CopyFrom(const MmCompactionMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionMigratepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionMigratepagesFtraceEvent::InternalSwap(MmCompactionMigratepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nr_migrated_, other->nr_migrated_);
  swap(nr_failed_, other->nr_failed_);
}

std::string MmCompactionMigratepagesFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionMigratepagesFtraceEvent";
}


// ===================================================================

void MmCompactionSuitableFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionSuitableFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionSuitableFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
}
MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(const MmCompactionSuitableFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
}

void MmCompactionSuitableFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
}

MmCompactionSuitableFtraceEvent::~MmCompactionSuitableFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
  SharedDtor();
}

void MmCompactionSuitableFtraceEvent::SharedDtor() {
}

void MmCompactionSuitableFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionSuitableFtraceEvent& MmCompactionSuitableFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionSuitableFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionSuitableFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionSuitableFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionSuitableFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionSuitableFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionSuitableFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional int32 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionSuitableFtraceEvent)
}

size_t MmCompactionSuitableFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 ret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionSuitableFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionSuitableFtraceEvent*>(
      &from));
}

void MmCompactionSuitableFtraceEvent::MergeFrom(const MmCompactionSuitableFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionSuitableFtraceEvent::CopyFrom(const MmCompactionSuitableFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionSuitableFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionSuitableFtraceEvent::InternalSwap(MmCompactionSuitableFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(idx_, other->idx_);
  swap(order_, other->order_);
  swap(ret_, other->ret_);
}

std::string MmCompactionSuitableFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionSuitableFtraceEvent";
}


// ===================================================================

void MmCompactionTryToCompactPagesFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionTryToCompactPagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionTryToCompactPagesFtraceEvent>()._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gfp_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
}
MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(const MmCompactionTryToCompactPagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_, &from.order_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&order_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
}

void MmCompactionTryToCompactPagesFtraceEvent::SharedCtor() {
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&order_)) + sizeof(mode_));
}

MmCompactionTryToCompactPagesFtraceEvent::~MmCompactionTryToCompactPagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  SharedDtor();
}

void MmCompactionTryToCompactPagesFtraceEvent::SharedDtor() {
}

void MmCompactionTryToCompactPagesFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionTryToCompactPagesFtraceEvent& MmCompactionTryToCompactPagesFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionTryToCompactPagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&order_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionTryToCompactPagesFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gfp_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gfp_mask(&has_bits);
          gfp_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionTryToCompactPagesFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gfp_mask = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_gfp_mask(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gfp_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionTryToCompactPagesFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // optional uint32 gfp_mask = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->gfp_mask(), output);
  }

  // optional uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
}

size_t MmCompactionTryToCompactPagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 gfp_mask = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->gfp_mask());
    }

    // optional uint32 mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionTryToCompactPagesFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionTryToCompactPagesFtraceEvent*>(
      &from));
}

void MmCompactionTryToCompactPagesFtraceEvent::MergeFrom(const MmCompactionTryToCompactPagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000002u) {
      gfp_mask_ = from.gfp_mask_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionTryToCompactPagesFtraceEvent::CopyFrom(const MmCompactionTryToCompactPagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionTryToCompactPagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionTryToCompactPagesFtraceEvent::InternalSwap(MmCompactionTryToCompactPagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_, other->order_);
  swap(gfp_mask_, other->gfp_mask_);
  swap(mode_, other->mode_);
}

std::string MmCompactionTryToCompactPagesFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent";
}


// ===================================================================

void MmCompactionWakeupKcompactdFtraceEvent::InitAsDefaultInstance() {
}
class MmCompactionWakeupKcompactdFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionWakeupKcompactdFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classzone_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
}
MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(const MmCompactionWakeupKcompactdFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&classzone_idx_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
}

void MmCompactionWakeupKcompactdFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classzone_idx_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
}

MmCompactionWakeupKcompactdFtraceEvent::~MmCompactionWakeupKcompactdFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  SharedDtor();
}

void MmCompactionWakeupKcompactdFtraceEvent::SharedDtor() {
}

void MmCompactionWakeupKcompactdFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmCompactionWakeupKcompactdFtraceEvent& MmCompactionWakeupKcompactdFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base);
  return *internal_default_instance();
}


void MmCompactionWakeupKcompactdFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classzone_idx_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(classzone_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmCompactionWakeupKcompactdFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 classzone_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_classzone_idx(&has_bits);
          classzone_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmCompactionWakeupKcompactdFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classzone_idx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_classzone_idx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classzone_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmCompactionWakeupKcompactdFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional uint32 classzone_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->classzone_idx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
}

size_t MmCompactionWakeupKcompactdFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional uint32 classzone_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->classzone_idx());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmCompactionWakeupKcompactdFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmCompactionWakeupKcompactdFtraceEvent*>(
      &from));
}

void MmCompactionWakeupKcompactdFtraceEvent::MergeFrom(const MmCompactionWakeupKcompactdFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      classzone_idx_ = from.classzone_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmCompactionWakeupKcompactdFtraceEvent::CopyFrom(const MmCompactionWakeupKcompactdFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionWakeupKcompactdFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionWakeupKcompactdFtraceEvent::InternalSwap(MmCompactionWakeupKcompactdFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(order_, other->order_);
  swap(classzone_idx_, other->classzone_idx_);
}

std::string MmCompactionWakeupKcompactdFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionBeginFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionBeginFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionBeginFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferredFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferResetFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionEndFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionEndFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionFinishedFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionSuitableFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
