// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_RAW_SYSCALLS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_RAW_SYSCALLS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class SysExitFtraceEvent;
class SysEnterFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT SysExitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kRetFieldNumber = 2,
  };

  SysExitFtraceEvent();
  ~SysExitFtraceEvent() override;
  SysExitFtraceEvent(SysExitFtraceEvent&&) noexcept;
  SysExitFtraceEvent& operator=(SysExitFtraceEvent&&);
  SysExitFtraceEvent(const SysExitFtraceEvent&);
  SysExitFtraceEvent& operator=(const SysExitFtraceEvent&);
  bool operator==(const SysExitFtraceEvent&) const;
  bool operator!=(const SysExitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  int64_t id() const { return id_; }
  void set_id(int64_t value) { id_ = value; _has_field_.set(1); }

  bool has_ret() const { return _has_field_[2]; }
  int64_t ret() const { return ret_; }
  void set_ret(int64_t value) { ret_ = value; _has_field_.set(2); }

 private:
  int64_t id_{};
  int64_t ret_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT SysEnterFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
  };

  SysEnterFtraceEvent();
  ~SysEnterFtraceEvent() override;
  SysEnterFtraceEvent(SysEnterFtraceEvent&&) noexcept;
  SysEnterFtraceEvent& operator=(SysEnterFtraceEvent&&);
  SysEnterFtraceEvent(const SysEnterFtraceEvent&);
  SysEnterFtraceEvent& operator=(const SysEnterFtraceEvent&);
  bool operator==(const SysEnterFtraceEvent&) const;
  bool operator!=(const SysEnterFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  int64_t id() const { return id_; }
  void set_id(int64_t value) { id_ = value; _has_field_.set(1); }

 private:
  int64_t id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_RAW_SYSCALLS_PROTO_CPP_H_
