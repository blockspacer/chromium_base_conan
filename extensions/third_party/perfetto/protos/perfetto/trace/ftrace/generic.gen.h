// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GENERIC_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GENERIC_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class GenericFtraceEvent;
class GenericFtraceEvent_Field;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT GenericFtraceEvent : public ::protozero::CppMessageObj {
 public:
  using Field = GenericFtraceEvent_Field;
  enum FieldNumbers {
    kEventNameFieldNumber = 1,
    kFieldFieldNumber = 2,
  };

  GenericFtraceEvent();
  ~GenericFtraceEvent() override;
  GenericFtraceEvent(GenericFtraceEvent&&) noexcept;
  GenericFtraceEvent& operator=(GenericFtraceEvent&&);
  GenericFtraceEvent(const GenericFtraceEvent&);
  GenericFtraceEvent& operator=(const GenericFtraceEvent&);
  bool operator==(const GenericFtraceEvent&) const;
  bool operator!=(const GenericFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_event_name() const { return _has_field_[1]; }
  const std::string& event_name() const { return event_name_; }
  void set_event_name(const std::string& value) { event_name_ = value; _has_field_.set(1); }

  const std::vector<GenericFtraceEvent_Field>& field() const { return field_; }
  std::vector<GenericFtraceEvent_Field>* mutable_field() { return &field_; }
  int field_size() const;
  void clear_field();
  GenericFtraceEvent_Field* add_field();

 private:
  std::string event_name_{};
  std::vector<GenericFtraceEvent_Field> field_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT GenericFtraceEvent_Field : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNameFieldNumber = 1,
    kStrValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kUintValueFieldNumber = 5,
  };

  GenericFtraceEvent_Field();
  ~GenericFtraceEvent_Field() override;
  GenericFtraceEvent_Field(GenericFtraceEvent_Field&&) noexcept;
  GenericFtraceEvent_Field& operator=(GenericFtraceEvent_Field&&);
  GenericFtraceEvent_Field(const GenericFtraceEvent_Field&);
  GenericFtraceEvent_Field& operator=(const GenericFtraceEvent_Field&);
  bool operator==(const GenericFtraceEvent_Field&) const;
  bool operator!=(const GenericFtraceEvent_Field& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_name() const { return _has_field_[1]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(1); }

  bool has_str_value() const { return _has_field_[3]; }
  const std::string& str_value() const { return str_value_; }
  void set_str_value(const std::string& value) { str_value_ = value; _has_field_.set(3); }

  bool has_int_value() const { return _has_field_[4]; }
  int64_t int_value() const { return int_value_; }
  void set_int_value(int64_t value) { int_value_ = value; _has_field_.set(4); }

  bool has_uint_value() const { return _has_field_[5]; }
  uint64_t uint_value() const { return uint_value_; }
  void set_uint_value(uint64_t value) { uint_value_ = value; _has_field_.set(5); }

 private:
  std::string name_{};
  std::string str_value_{};
  int64_t int_value_{};
  uint64_t uint_value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GENERIC_PROTO_CPP_H_
