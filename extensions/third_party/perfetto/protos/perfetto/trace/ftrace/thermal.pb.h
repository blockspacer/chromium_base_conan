// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/thermal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class CdevUpdateFtraceEvent;
class CdevUpdateFtraceEventDefaultTypeInternal;
extern CdevUpdateFtraceEventDefaultTypeInternal _CdevUpdateFtraceEvent_default_instance_;
class ThermalTemperatureFtraceEvent;
class ThermalTemperatureFtraceEventDefaultTypeInternal;
extern ThermalTemperatureFtraceEventDefaultTypeInternal _ThermalTemperatureFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CdevUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CdevUpdateFtraceEvent>(Arena*);
template<> ::perfetto::protos::ThermalTemperatureFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ThermalTemperatureFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ThermalTemperatureFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ThermalTemperatureFtraceEvent) */ {
 public:
  ThermalTemperatureFtraceEvent();
  virtual ~ThermalTemperatureFtraceEvent();

  ThermalTemperatureFtraceEvent(const ThermalTemperatureFtraceEvent& from);
  ThermalTemperatureFtraceEvent(ThermalTemperatureFtraceEvent&& from) noexcept
    : ThermalTemperatureFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ThermalTemperatureFtraceEvent& operator=(const ThermalTemperatureFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalTemperatureFtraceEvent& operator=(ThermalTemperatureFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ThermalTemperatureFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalTemperatureFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ThermalTemperatureFtraceEvent*>(
               &_ThermalTemperatureFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThermalTemperatureFtraceEvent& a, ThermalTemperatureFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalTemperatureFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalTemperatureFtraceEvent* New() const final {
    return CreateMaybeMessage<ThermalTemperatureFtraceEvent>(nullptr);
  }

  ThermalTemperatureFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalTemperatureFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ThermalTemperatureFtraceEvent& from);
  void MergeFrom(const ThermalTemperatureFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThermalTemperatureFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ThermalTemperatureFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThermalZoneFieldNumber = 4,
    kIdFieldNumber = 1,
    kTempFieldNumber = 2,
    kTempPrevFieldNumber = 3,
  };
  // optional string thermal_zone = 4;
  bool has_thermal_zone() const;
  void clear_thermal_zone();
  const std::string& thermal_zone() const;
  void set_thermal_zone(const std::string& value);
  void set_thermal_zone(std::string&& value);
  void set_thermal_zone(const char* value);
  void set_thermal_zone(const char* value, size_t size);
  std::string* mutable_thermal_zone();
  std::string* release_thermal_zone();
  void set_allocated_thermal_zone(std::string* thermal_zone);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 temp = 2;
  bool has_temp() const;
  void clear_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 temp() const;
  void set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 temp_prev = 3;
  bool has_temp_prev() const;
  void clear_temp_prev();
  ::PROTOBUF_NAMESPACE_ID::int32 temp_prev() const;
  void set_temp_prev(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ThermalTemperatureFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thermal_zone_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_prev_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto;
};
// -------------------------------------------------------------------

class CdevUpdateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CdevUpdateFtraceEvent) */ {
 public:
  CdevUpdateFtraceEvent();
  virtual ~CdevUpdateFtraceEvent();

  CdevUpdateFtraceEvent(const CdevUpdateFtraceEvent& from);
  CdevUpdateFtraceEvent(CdevUpdateFtraceEvent&& from) noexcept
    : CdevUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CdevUpdateFtraceEvent& operator=(const CdevUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CdevUpdateFtraceEvent& operator=(CdevUpdateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CdevUpdateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CdevUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CdevUpdateFtraceEvent*>(
               &_CdevUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CdevUpdateFtraceEvent& a, CdevUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CdevUpdateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CdevUpdateFtraceEvent* New() const final {
    return CreateMaybeMessage<CdevUpdateFtraceEvent>(nullptr);
  }

  CdevUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CdevUpdateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CdevUpdateFtraceEvent& from);
  void MergeFrom(const CdevUpdateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CdevUpdateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CdevUpdateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional uint64 target = 1;
  bool has_target() const;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::uint64 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CdevUpdateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThermalTemperatureFtraceEvent

// optional int32 id = 1;
inline bool ThermalTemperatureFtraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThermalTemperatureFtraceEvent::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThermalTemperatureFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalTemperatureFtraceEvent.id)
  return id_;
}
inline void ThermalTemperatureFtraceEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalTemperatureFtraceEvent.id)
}

// optional int32 temp = 2;
inline bool ThermalTemperatureFtraceEvent::has_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThermalTemperatureFtraceEvent::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThermalTemperatureFtraceEvent::temp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalTemperatureFtraceEvent.temp)
  return temp_;
}
inline void ThermalTemperatureFtraceEvent::set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  temp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalTemperatureFtraceEvent.temp)
}

// optional int32 temp_prev = 3;
inline bool ThermalTemperatureFtraceEvent::has_temp_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThermalTemperatureFtraceEvent::clear_temp_prev() {
  temp_prev_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThermalTemperatureFtraceEvent::temp_prev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalTemperatureFtraceEvent.temp_prev)
  return temp_prev_;
}
inline void ThermalTemperatureFtraceEvent::set_temp_prev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  temp_prev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalTemperatureFtraceEvent.temp_prev)
}

// optional string thermal_zone = 4;
inline bool ThermalTemperatureFtraceEvent::has_thermal_zone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThermalTemperatureFtraceEvent::clear_thermal_zone() {
  thermal_zone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThermalTemperatureFtraceEvent::thermal_zone() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
  return thermal_zone_.GetNoArena();
}
inline void ThermalTemperatureFtraceEvent::set_thermal_zone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thermal_zone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
}
inline void ThermalTemperatureFtraceEvent::set_thermal_zone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thermal_zone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
}
inline void ThermalTemperatureFtraceEvent::set_thermal_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thermal_zone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
}
inline void ThermalTemperatureFtraceEvent::set_thermal_zone(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thermal_zone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
}
inline std::string* ThermalTemperatureFtraceEvent::mutable_thermal_zone() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
  return thermal_zone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThermalTemperatureFtraceEvent::release_thermal_zone() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
  if (!has_thermal_zone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thermal_zone_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThermalTemperatureFtraceEvent::set_allocated_thermal_zone(std::string* thermal_zone) {
  if (thermal_zone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thermal_zone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thermal_zone);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ThermalTemperatureFtraceEvent.thermal_zone)
}

// -------------------------------------------------------------------

// CdevUpdateFtraceEvent

// optional uint64 target = 1;
inline bool CdevUpdateFtraceEvent::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CdevUpdateFtraceEvent::clear_target() {
  target_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CdevUpdateFtraceEvent::target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CdevUpdateFtraceEvent.target)
  return target_;
}
inline void CdevUpdateFtraceEvent::set_target(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  target_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CdevUpdateFtraceEvent.target)
}

// optional string type = 2;
inline bool CdevUpdateFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CdevUpdateFtraceEvent::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CdevUpdateFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CdevUpdateFtraceEvent.type)
  return type_.GetNoArena();
}
inline void CdevUpdateFtraceEvent::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CdevUpdateFtraceEvent.type)
}
inline void CdevUpdateFtraceEvent::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CdevUpdateFtraceEvent.type)
}
inline void CdevUpdateFtraceEvent::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CdevUpdateFtraceEvent.type)
}
inline void CdevUpdateFtraceEvent::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CdevUpdateFtraceEvent.type)
}
inline std::string* CdevUpdateFtraceEvent::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CdevUpdateFtraceEvent.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CdevUpdateFtraceEvent::release_type() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CdevUpdateFtraceEvent.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CdevUpdateFtraceEvent::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CdevUpdateFtraceEvent.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto
