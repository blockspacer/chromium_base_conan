#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/generic.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

GenericFtraceEvent::GenericFtraceEvent() = default;
GenericFtraceEvent::~GenericFtraceEvent() = default;
GenericFtraceEvent::GenericFtraceEvent(const GenericFtraceEvent&) = default;
GenericFtraceEvent& GenericFtraceEvent::operator=(const GenericFtraceEvent&) = default;
GenericFtraceEvent::GenericFtraceEvent(GenericFtraceEvent&&) noexcept = default;
GenericFtraceEvent& GenericFtraceEvent::operator=(GenericFtraceEvent&&) = default;

bool GenericFtraceEvent::operator==(const GenericFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && event_name_ == other.event_name_
   && field_ == other.field_;
}

int GenericFtraceEvent::field_size() const { return static_cast<int>(field_.size()); }
void GenericFtraceEvent::clear_field() { field_.clear(); }
GenericFtraceEvent_Field* GenericFtraceEvent::add_field() { field_.emplace_back(); return &field_.back(); }
bool GenericFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  field_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* event_name */:
        field.get(&event_name_);
        break;
      case 2 /* field */:
        field_.emplace_back();
        field_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GenericFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GenericFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GenericFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: event_name
  if (_has_field_[1]) {
    msg->AppendString(1, event_name_);
  }

  // Field 2: field
  for (auto& it : field_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


GenericFtraceEvent_Field::GenericFtraceEvent_Field() = default;
GenericFtraceEvent_Field::~GenericFtraceEvent_Field() = default;
GenericFtraceEvent_Field::GenericFtraceEvent_Field(const GenericFtraceEvent_Field&) = default;
GenericFtraceEvent_Field& GenericFtraceEvent_Field::operator=(const GenericFtraceEvent_Field&) = default;
GenericFtraceEvent_Field::GenericFtraceEvent_Field(GenericFtraceEvent_Field&&) noexcept = default;
GenericFtraceEvent_Field& GenericFtraceEvent_Field::operator=(GenericFtraceEvent_Field&&) = default;

bool GenericFtraceEvent_Field::operator==(const GenericFtraceEvent_Field& other) const {
  return unknown_fields_ == other.unknown_fields_
   && name_ == other.name_
   && str_value_ == other.str_value_
   && int_value_ == other.int_value_
   && uint_value_ == other.uint_value_;
}

bool GenericFtraceEvent_Field::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        field.get(&name_);
        break;
      case 3 /* str_value */:
        field.get(&str_value_);
        break;
      case 4 /* int_value */:
        field.get(&int_value_);
        break;
      case 5 /* uint_value */:
        field.get(&uint_value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GenericFtraceEvent_Field::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GenericFtraceEvent_Field::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GenericFtraceEvent_Field::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    msg->AppendString(1, name_);
  }

  // Field 3: str_value
  if (_has_field_[3]) {
    msg->AppendString(3, str_value_);
  }

  // Field 4: int_value
  if (_has_field_[4]) {
    msg->AppendVarInt(4, int_value_);
  }

  // Field 5: uint_value
  if (_has_field_[5]) {
    msg->AppendVarInt(5, uint_value_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
