// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SdeTracingMarkWriteFtraceEvent;
class SdeTracingMarkWriteFtraceEventDefaultTypeInternal;
extern SdeTracingMarkWriteFtraceEventDefaultTypeInternal _SdeTracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeTracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SdeTracingMarkWriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeTracingMarkWriteFtraceEvent) */ {
 public:
  SdeTracingMarkWriteFtraceEvent();
  virtual ~SdeTracingMarkWriteFtraceEvent();

  SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from);
  SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&& from) noexcept
    : SdeTracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeTracingMarkWriteFtraceEvent& operator=(const SdeTracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeTracingMarkWriteFtraceEvent& operator=(SdeTracingMarkWriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeTracingMarkWriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeTracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeTracingMarkWriteFtraceEvent*>(
               &_SdeTracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SdeTracingMarkWriteFtraceEvent& a, SdeTracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeTracingMarkWriteFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeTracingMarkWriteFtraceEvent>(nullptr);
  }

  SdeTracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeTracingMarkWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeTracingMarkWriteFtraceEvent& from);
  void MergeFrom(const SdeTracingMarkWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeTracingMarkWriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeTracingMarkWriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kTraceTypeFieldNumber = 3,
    kValueFieldNumber = 4,
    kTraceBeginFieldNumber = 5,
  };
  // optional string trace_name = 2;
  bool has_trace_name() const;
  void clear_trace_name();
  const std::string& trace_name() const;
  void set_trace_name(const std::string& value);
  void set_trace_name(std::string&& value);
  void set_trace_name(const char* value);
  void set_trace_name(const char* value, size_t size);
  std::string* mutable_trace_name();
  std::string* release_trace_name();
  void set_allocated_trace_name(std::string* trace_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trace_type = 3;
  bool has_trace_type() const;
  void clear_trace_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_type() const;
  void set_trace_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 value = 4;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trace_begin = 5;
  bool has_trace_begin() const;
  void clear_trace_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin() const;
  void set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SdeTracingMarkWriteFtraceEvent

// optional int32 pid = 1;
inline bool SdeTracingMarkWriteFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeTracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
  return pid_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
}

// optional string trace_name = 2;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_name() {
  trace_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdeTracingMarkWriteFtraceEvent::trace_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.GetNoArena();
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline std::string* SdeTracingMarkWriteFtraceEvent::mutable_trace_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SdeTracingMarkWriteFtraceEvent::release_trace_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  if (!has_trace_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SdeTracingMarkWriteFtraceEvent::set_allocated_trace_name(std::string* trace_name) {
  if (trace_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}

// optional uint32 trace_type = 3;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_type() {
  trace_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeTracingMarkWriteFtraceEvent::trace_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
  return trace_type_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  trace_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
}

// optional int32 value = 4;
inline bool SdeTracingMarkWriteFtraceEvent::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeTracingMarkWriteFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
  return value_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
}

// optional uint32 trace_begin = 5;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_begin() {
  trace_begin_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeTracingMarkWriteFtraceEvent::trace_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
  return trace_begin_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  trace_begin_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
