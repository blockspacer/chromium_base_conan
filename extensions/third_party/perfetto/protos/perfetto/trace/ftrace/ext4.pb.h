// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ext4.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[95]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class Ext4AllocDaBlocksFtraceEvent;
class Ext4AllocDaBlocksFtraceEventDefaultTypeInternal;
extern Ext4AllocDaBlocksFtraceEventDefaultTypeInternal _Ext4AllocDaBlocksFtraceEvent_default_instance_;
class Ext4AllocateBlocksFtraceEvent;
class Ext4AllocateBlocksFtraceEventDefaultTypeInternal;
extern Ext4AllocateBlocksFtraceEventDefaultTypeInternal _Ext4AllocateBlocksFtraceEvent_default_instance_;
class Ext4AllocateInodeFtraceEvent;
class Ext4AllocateInodeFtraceEventDefaultTypeInternal;
extern Ext4AllocateInodeFtraceEventDefaultTypeInternal _Ext4AllocateInodeFtraceEvent_default_instance_;
class Ext4BeginOrderedTruncateFtraceEvent;
class Ext4BeginOrderedTruncateFtraceEventDefaultTypeInternal;
extern Ext4BeginOrderedTruncateFtraceEventDefaultTypeInternal _Ext4BeginOrderedTruncateFtraceEvent_default_instance_;
class Ext4CollapseRangeFtraceEvent;
class Ext4CollapseRangeFtraceEventDefaultTypeInternal;
extern Ext4CollapseRangeFtraceEventDefaultTypeInternal _Ext4CollapseRangeFtraceEvent_default_instance_;
class Ext4DaReleaseSpaceFtraceEvent;
class Ext4DaReleaseSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaReleaseSpaceFtraceEventDefaultTypeInternal _Ext4DaReleaseSpaceFtraceEvent_default_instance_;
class Ext4DaReserveSpaceFtraceEvent;
class Ext4DaReserveSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaReserveSpaceFtraceEventDefaultTypeInternal _Ext4DaReserveSpaceFtraceEvent_default_instance_;
class Ext4DaUpdateReserveSpaceFtraceEvent;
class Ext4DaUpdateReserveSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaUpdateReserveSpaceFtraceEventDefaultTypeInternal _Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_;
class Ext4DaWriteBeginFtraceEvent;
class Ext4DaWriteBeginFtraceEventDefaultTypeInternal;
extern Ext4DaWriteBeginFtraceEventDefaultTypeInternal _Ext4DaWriteBeginFtraceEvent_default_instance_;
class Ext4DaWriteEndFtraceEvent;
class Ext4DaWriteEndFtraceEventDefaultTypeInternal;
extern Ext4DaWriteEndFtraceEventDefaultTypeInternal _Ext4DaWriteEndFtraceEvent_default_instance_;
class Ext4DaWritePagesExtentFtraceEvent;
class Ext4DaWritePagesExtentFtraceEventDefaultTypeInternal;
extern Ext4DaWritePagesExtentFtraceEventDefaultTypeInternal _Ext4DaWritePagesExtentFtraceEvent_default_instance_;
class Ext4DaWritePagesFtraceEvent;
class Ext4DaWritePagesFtraceEventDefaultTypeInternal;
extern Ext4DaWritePagesFtraceEventDefaultTypeInternal _Ext4DaWritePagesFtraceEvent_default_instance_;
class Ext4DirectIOEnterFtraceEvent;
class Ext4DirectIOEnterFtraceEventDefaultTypeInternal;
extern Ext4DirectIOEnterFtraceEventDefaultTypeInternal _Ext4DirectIOEnterFtraceEvent_default_instance_;
class Ext4DirectIOExitFtraceEvent;
class Ext4DirectIOExitFtraceEventDefaultTypeInternal;
extern Ext4DirectIOExitFtraceEventDefaultTypeInternal _Ext4DirectIOExitFtraceEvent_default_instance_;
class Ext4DiscardBlocksFtraceEvent;
class Ext4DiscardBlocksFtraceEventDefaultTypeInternal;
extern Ext4DiscardBlocksFtraceEventDefaultTypeInternal _Ext4DiscardBlocksFtraceEvent_default_instance_;
class Ext4DiscardPreallocationsFtraceEvent;
class Ext4DiscardPreallocationsFtraceEventDefaultTypeInternal;
extern Ext4DiscardPreallocationsFtraceEventDefaultTypeInternal _Ext4DiscardPreallocationsFtraceEvent_default_instance_;
class Ext4DropInodeFtraceEvent;
class Ext4DropInodeFtraceEventDefaultTypeInternal;
extern Ext4DropInodeFtraceEventDefaultTypeInternal _Ext4DropInodeFtraceEvent_default_instance_;
class Ext4EsCacheExtentFtraceEvent;
class Ext4EsCacheExtentFtraceEventDefaultTypeInternal;
extern Ext4EsCacheExtentFtraceEventDefaultTypeInternal _Ext4EsCacheExtentFtraceEvent_default_instance_;
class Ext4EsFindDelayedExtentRangeEnterFtraceEvent;
class Ext4EsFindDelayedExtentRangeEnterFtraceEventDefaultTypeInternal;
extern Ext4EsFindDelayedExtentRangeEnterFtraceEventDefaultTypeInternal _Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_;
class Ext4EsFindDelayedExtentRangeExitFtraceEvent;
class Ext4EsFindDelayedExtentRangeExitFtraceEventDefaultTypeInternal;
extern Ext4EsFindDelayedExtentRangeExitFtraceEventDefaultTypeInternal _Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_;
class Ext4EsInsertExtentFtraceEvent;
class Ext4EsInsertExtentFtraceEventDefaultTypeInternal;
extern Ext4EsInsertExtentFtraceEventDefaultTypeInternal _Ext4EsInsertExtentFtraceEvent_default_instance_;
class Ext4EsLookupExtentEnterFtraceEvent;
class Ext4EsLookupExtentEnterFtraceEventDefaultTypeInternal;
extern Ext4EsLookupExtentEnterFtraceEventDefaultTypeInternal _Ext4EsLookupExtentEnterFtraceEvent_default_instance_;
class Ext4EsLookupExtentExitFtraceEvent;
class Ext4EsLookupExtentExitFtraceEventDefaultTypeInternal;
extern Ext4EsLookupExtentExitFtraceEventDefaultTypeInternal _Ext4EsLookupExtentExitFtraceEvent_default_instance_;
class Ext4EsRemoveExtentFtraceEvent;
class Ext4EsRemoveExtentFtraceEventDefaultTypeInternal;
extern Ext4EsRemoveExtentFtraceEventDefaultTypeInternal _Ext4EsRemoveExtentFtraceEvent_default_instance_;
class Ext4EsShrinkCountFtraceEvent;
class Ext4EsShrinkCountFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkCountFtraceEventDefaultTypeInternal _Ext4EsShrinkCountFtraceEvent_default_instance_;
class Ext4EsShrinkFtraceEvent;
class Ext4EsShrinkFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkFtraceEventDefaultTypeInternal _Ext4EsShrinkFtraceEvent_default_instance_;
class Ext4EsShrinkScanEnterFtraceEvent;
class Ext4EsShrinkScanEnterFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkScanEnterFtraceEventDefaultTypeInternal _Ext4EsShrinkScanEnterFtraceEvent_default_instance_;
class Ext4EsShrinkScanExitFtraceEvent;
class Ext4EsShrinkScanExitFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkScanExitFtraceEventDefaultTypeInternal _Ext4EsShrinkScanExitFtraceEvent_default_instance_;
class Ext4EvictInodeFtraceEvent;
class Ext4EvictInodeFtraceEventDefaultTypeInternal;
extern Ext4EvictInodeFtraceEventDefaultTypeInternal _Ext4EvictInodeFtraceEvent_default_instance_;
class Ext4ExtConvertToInitializedEnterFtraceEvent;
class Ext4ExtConvertToInitializedEnterFtraceEventDefaultTypeInternal;
extern Ext4ExtConvertToInitializedEnterFtraceEventDefaultTypeInternal _Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_;
class Ext4ExtConvertToInitializedFastpathFtraceEvent;
class Ext4ExtConvertToInitializedFastpathFtraceEventDefaultTypeInternal;
extern Ext4ExtConvertToInitializedFastpathFtraceEventDefaultTypeInternal _Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_;
class Ext4ExtHandleUnwrittenExtentsFtraceEvent;
class Ext4ExtHandleUnwrittenExtentsFtraceEventDefaultTypeInternal;
extern Ext4ExtHandleUnwrittenExtentsFtraceEventDefaultTypeInternal _Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_;
class Ext4ExtInCacheFtraceEvent;
class Ext4ExtInCacheFtraceEventDefaultTypeInternal;
extern Ext4ExtInCacheFtraceEventDefaultTypeInternal _Ext4ExtInCacheFtraceEvent_default_instance_;
class Ext4ExtLoadExtentFtraceEvent;
class Ext4ExtLoadExtentFtraceEventDefaultTypeInternal;
extern Ext4ExtLoadExtentFtraceEventDefaultTypeInternal _Ext4ExtLoadExtentFtraceEvent_default_instance_;
class Ext4ExtMapBlocksEnterFtraceEvent;
class Ext4ExtMapBlocksEnterFtraceEventDefaultTypeInternal;
extern Ext4ExtMapBlocksEnterFtraceEventDefaultTypeInternal _Ext4ExtMapBlocksEnterFtraceEvent_default_instance_;
class Ext4ExtMapBlocksExitFtraceEvent;
class Ext4ExtMapBlocksExitFtraceEventDefaultTypeInternal;
extern Ext4ExtMapBlocksExitFtraceEventDefaultTypeInternal _Ext4ExtMapBlocksExitFtraceEvent_default_instance_;
class Ext4ExtPutInCacheFtraceEvent;
class Ext4ExtPutInCacheFtraceEventDefaultTypeInternal;
extern Ext4ExtPutInCacheFtraceEventDefaultTypeInternal _Ext4ExtPutInCacheFtraceEvent_default_instance_;
class Ext4ExtRemoveSpaceDoneFtraceEvent;
class Ext4ExtRemoveSpaceDoneFtraceEventDefaultTypeInternal;
extern Ext4ExtRemoveSpaceDoneFtraceEventDefaultTypeInternal _Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_;
class Ext4ExtRemoveSpaceFtraceEvent;
class Ext4ExtRemoveSpaceFtraceEventDefaultTypeInternal;
extern Ext4ExtRemoveSpaceFtraceEventDefaultTypeInternal _Ext4ExtRemoveSpaceFtraceEvent_default_instance_;
class Ext4ExtRmIdxFtraceEvent;
class Ext4ExtRmIdxFtraceEventDefaultTypeInternal;
extern Ext4ExtRmIdxFtraceEventDefaultTypeInternal _Ext4ExtRmIdxFtraceEvent_default_instance_;
class Ext4ExtRmLeafFtraceEvent;
class Ext4ExtRmLeafFtraceEventDefaultTypeInternal;
extern Ext4ExtRmLeafFtraceEventDefaultTypeInternal _Ext4ExtRmLeafFtraceEvent_default_instance_;
class Ext4ExtShowExtentFtraceEvent;
class Ext4ExtShowExtentFtraceEventDefaultTypeInternal;
extern Ext4ExtShowExtentFtraceEventDefaultTypeInternal _Ext4ExtShowExtentFtraceEvent_default_instance_;
class Ext4FallocateEnterFtraceEvent;
class Ext4FallocateEnterFtraceEventDefaultTypeInternal;
extern Ext4FallocateEnterFtraceEventDefaultTypeInternal _Ext4FallocateEnterFtraceEvent_default_instance_;
class Ext4FallocateExitFtraceEvent;
class Ext4FallocateExitFtraceEventDefaultTypeInternal;
extern Ext4FallocateExitFtraceEventDefaultTypeInternal _Ext4FallocateExitFtraceEvent_default_instance_;
class Ext4FindDelallocRangeFtraceEvent;
class Ext4FindDelallocRangeFtraceEventDefaultTypeInternal;
extern Ext4FindDelallocRangeFtraceEventDefaultTypeInternal _Ext4FindDelallocRangeFtraceEvent_default_instance_;
class Ext4ForgetFtraceEvent;
class Ext4ForgetFtraceEventDefaultTypeInternal;
extern Ext4ForgetFtraceEventDefaultTypeInternal _Ext4ForgetFtraceEvent_default_instance_;
class Ext4FreeBlocksFtraceEvent;
class Ext4FreeBlocksFtraceEventDefaultTypeInternal;
extern Ext4FreeBlocksFtraceEventDefaultTypeInternal _Ext4FreeBlocksFtraceEvent_default_instance_;
class Ext4FreeInodeFtraceEvent;
class Ext4FreeInodeFtraceEventDefaultTypeInternal;
extern Ext4FreeInodeFtraceEventDefaultTypeInternal _Ext4FreeInodeFtraceEvent_default_instance_;
class Ext4GetImpliedClusterAllocExitFtraceEvent;
class Ext4GetImpliedClusterAllocExitFtraceEventDefaultTypeInternal;
extern Ext4GetImpliedClusterAllocExitFtraceEventDefaultTypeInternal _Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_;
class Ext4GetReservedClusterAllocFtraceEvent;
class Ext4GetReservedClusterAllocFtraceEventDefaultTypeInternal;
extern Ext4GetReservedClusterAllocFtraceEventDefaultTypeInternal _Ext4GetReservedClusterAllocFtraceEvent_default_instance_;
class Ext4IndMapBlocksEnterFtraceEvent;
class Ext4IndMapBlocksEnterFtraceEventDefaultTypeInternal;
extern Ext4IndMapBlocksEnterFtraceEventDefaultTypeInternal _Ext4IndMapBlocksEnterFtraceEvent_default_instance_;
class Ext4IndMapBlocksExitFtraceEvent;
class Ext4IndMapBlocksExitFtraceEventDefaultTypeInternal;
extern Ext4IndMapBlocksExitFtraceEventDefaultTypeInternal _Ext4IndMapBlocksExitFtraceEvent_default_instance_;
class Ext4InsertRangeFtraceEvent;
class Ext4InsertRangeFtraceEventDefaultTypeInternal;
extern Ext4InsertRangeFtraceEventDefaultTypeInternal _Ext4InsertRangeFtraceEvent_default_instance_;
class Ext4InvalidatepageFtraceEvent;
class Ext4InvalidatepageFtraceEventDefaultTypeInternal;
extern Ext4InvalidatepageFtraceEventDefaultTypeInternal _Ext4InvalidatepageFtraceEvent_default_instance_;
class Ext4JournalStartFtraceEvent;
class Ext4JournalStartFtraceEventDefaultTypeInternal;
extern Ext4JournalStartFtraceEventDefaultTypeInternal _Ext4JournalStartFtraceEvent_default_instance_;
class Ext4JournalStartReservedFtraceEvent;
class Ext4JournalStartReservedFtraceEventDefaultTypeInternal;
extern Ext4JournalStartReservedFtraceEventDefaultTypeInternal _Ext4JournalStartReservedFtraceEvent_default_instance_;
class Ext4JournalledInvalidatepageFtraceEvent;
class Ext4JournalledInvalidatepageFtraceEventDefaultTypeInternal;
extern Ext4JournalledInvalidatepageFtraceEventDefaultTypeInternal _Ext4JournalledInvalidatepageFtraceEvent_default_instance_;
class Ext4JournalledWriteEndFtraceEvent;
class Ext4JournalledWriteEndFtraceEventDefaultTypeInternal;
extern Ext4JournalledWriteEndFtraceEventDefaultTypeInternal _Ext4JournalledWriteEndFtraceEvent_default_instance_;
class Ext4LoadInodeBitmapFtraceEvent;
class Ext4LoadInodeBitmapFtraceEventDefaultTypeInternal;
extern Ext4LoadInodeBitmapFtraceEventDefaultTypeInternal _Ext4LoadInodeBitmapFtraceEvent_default_instance_;
class Ext4LoadInodeFtraceEvent;
class Ext4LoadInodeFtraceEventDefaultTypeInternal;
extern Ext4LoadInodeFtraceEventDefaultTypeInternal _Ext4LoadInodeFtraceEvent_default_instance_;
class Ext4MarkInodeDirtyFtraceEvent;
class Ext4MarkInodeDirtyFtraceEventDefaultTypeInternal;
extern Ext4MarkInodeDirtyFtraceEventDefaultTypeInternal _Ext4MarkInodeDirtyFtraceEvent_default_instance_;
class Ext4MbBitmapLoadFtraceEvent;
class Ext4MbBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4MbBitmapLoadFtraceEventDefaultTypeInternal _Ext4MbBitmapLoadFtraceEvent_default_instance_;
class Ext4MbBuddyBitmapLoadFtraceEvent;
class Ext4MbBuddyBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4MbBuddyBitmapLoadFtraceEventDefaultTypeInternal _Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_;
class Ext4MbDiscardPreallocationsFtraceEvent;
class Ext4MbDiscardPreallocationsFtraceEventDefaultTypeInternal;
extern Ext4MbDiscardPreallocationsFtraceEventDefaultTypeInternal _Ext4MbDiscardPreallocationsFtraceEvent_default_instance_;
class Ext4MbNewGroupPaFtraceEvent;
class Ext4MbNewGroupPaFtraceEventDefaultTypeInternal;
extern Ext4MbNewGroupPaFtraceEventDefaultTypeInternal _Ext4MbNewGroupPaFtraceEvent_default_instance_;
class Ext4MbNewInodePaFtraceEvent;
class Ext4MbNewInodePaFtraceEventDefaultTypeInternal;
extern Ext4MbNewInodePaFtraceEventDefaultTypeInternal _Ext4MbNewInodePaFtraceEvent_default_instance_;
class Ext4MbReleaseGroupPaFtraceEvent;
class Ext4MbReleaseGroupPaFtraceEventDefaultTypeInternal;
extern Ext4MbReleaseGroupPaFtraceEventDefaultTypeInternal _Ext4MbReleaseGroupPaFtraceEvent_default_instance_;
class Ext4MbReleaseInodePaFtraceEvent;
class Ext4MbReleaseInodePaFtraceEventDefaultTypeInternal;
extern Ext4MbReleaseInodePaFtraceEventDefaultTypeInternal _Ext4MbReleaseInodePaFtraceEvent_default_instance_;
class Ext4MballocAllocFtraceEvent;
class Ext4MballocAllocFtraceEventDefaultTypeInternal;
extern Ext4MballocAllocFtraceEventDefaultTypeInternal _Ext4MballocAllocFtraceEvent_default_instance_;
class Ext4MballocDiscardFtraceEvent;
class Ext4MballocDiscardFtraceEventDefaultTypeInternal;
extern Ext4MballocDiscardFtraceEventDefaultTypeInternal _Ext4MballocDiscardFtraceEvent_default_instance_;
class Ext4MballocFreeFtraceEvent;
class Ext4MballocFreeFtraceEventDefaultTypeInternal;
extern Ext4MballocFreeFtraceEventDefaultTypeInternal _Ext4MballocFreeFtraceEvent_default_instance_;
class Ext4MballocPreallocFtraceEvent;
class Ext4MballocPreallocFtraceEventDefaultTypeInternal;
extern Ext4MballocPreallocFtraceEventDefaultTypeInternal _Ext4MballocPreallocFtraceEvent_default_instance_;
class Ext4OtherInodeUpdateTimeFtraceEvent;
class Ext4OtherInodeUpdateTimeFtraceEventDefaultTypeInternal;
extern Ext4OtherInodeUpdateTimeFtraceEventDefaultTypeInternal _Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_;
class Ext4PunchHoleFtraceEvent;
class Ext4PunchHoleFtraceEventDefaultTypeInternal;
extern Ext4PunchHoleFtraceEventDefaultTypeInternal _Ext4PunchHoleFtraceEvent_default_instance_;
class Ext4ReadBlockBitmapLoadFtraceEvent;
class Ext4ReadBlockBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4ReadBlockBitmapLoadFtraceEventDefaultTypeInternal _Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_;
class Ext4ReadpageFtraceEvent;
class Ext4ReadpageFtraceEventDefaultTypeInternal;
extern Ext4ReadpageFtraceEventDefaultTypeInternal _Ext4ReadpageFtraceEvent_default_instance_;
class Ext4ReleasepageFtraceEvent;
class Ext4ReleasepageFtraceEventDefaultTypeInternal;
extern Ext4ReleasepageFtraceEventDefaultTypeInternal _Ext4ReleasepageFtraceEvent_default_instance_;
class Ext4RemoveBlocksFtraceEvent;
class Ext4RemoveBlocksFtraceEventDefaultTypeInternal;
extern Ext4RemoveBlocksFtraceEventDefaultTypeInternal _Ext4RemoveBlocksFtraceEvent_default_instance_;
class Ext4RequestBlocksFtraceEvent;
class Ext4RequestBlocksFtraceEventDefaultTypeInternal;
extern Ext4RequestBlocksFtraceEventDefaultTypeInternal _Ext4RequestBlocksFtraceEvent_default_instance_;
class Ext4RequestInodeFtraceEvent;
class Ext4RequestInodeFtraceEventDefaultTypeInternal;
extern Ext4RequestInodeFtraceEventDefaultTypeInternal _Ext4RequestInodeFtraceEvent_default_instance_;
class Ext4SyncFileEnterFtraceEvent;
class Ext4SyncFileEnterFtraceEventDefaultTypeInternal;
extern Ext4SyncFileEnterFtraceEventDefaultTypeInternal _Ext4SyncFileEnterFtraceEvent_default_instance_;
class Ext4SyncFileExitFtraceEvent;
class Ext4SyncFileExitFtraceEventDefaultTypeInternal;
extern Ext4SyncFileExitFtraceEventDefaultTypeInternal _Ext4SyncFileExitFtraceEvent_default_instance_;
class Ext4SyncFsFtraceEvent;
class Ext4SyncFsFtraceEventDefaultTypeInternal;
extern Ext4SyncFsFtraceEventDefaultTypeInternal _Ext4SyncFsFtraceEvent_default_instance_;
class Ext4TrimAllFreeFtraceEvent;
class Ext4TrimAllFreeFtraceEventDefaultTypeInternal;
extern Ext4TrimAllFreeFtraceEventDefaultTypeInternal _Ext4TrimAllFreeFtraceEvent_default_instance_;
class Ext4TrimExtentFtraceEvent;
class Ext4TrimExtentFtraceEventDefaultTypeInternal;
extern Ext4TrimExtentFtraceEventDefaultTypeInternal _Ext4TrimExtentFtraceEvent_default_instance_;
class Ext4TruncateEnterFtraceEvent;
class Ext4TruncateEnterFtraceEventDefaultTypeInternal;
extern Ext4TruncateEnterFtraceEventDefaultTypeInternal _Ext4TruncateEnterFtraceEvent_default_instance_;
class Ext4TruncateExitFtraceEvent;
class Ext4TruncateExitFtraceEventDefaultTypeInternal;
extern Ext4TruncateExitFtraceEventDefaultTypeInternal _Ext4TruncateExitFtraceEvent_default_instance_;
class Ext4UnlinkEnterFtraceEvent;
class Ext4UnlinkEnterFtraceEventDefaultTypeInternal;
extern Ext4UnlinkEnterFtraceEventDefaultTypeInternal _Ext4UnlinkEnterFtraceEvent_default_instance_;
class Ext4UnlinkExitFtraceEvent;
class Ext4UnlinkExitFtraceEventDefaultTypeInternal;
extern Ext4UnlinkExitFtraceEventDefaultTypeInternal _Ext4UnlinkExitFtraceEvent_default_instance_;
class Ext4WriteBeginFtraceEvent;
class Ext4WriteBeginFtraceEventDefaultTypeInternal;
extern Ext4WriteBeginFtraceEventDefaultTypeInternal _Ext4WriteBeginFtraceEvent_default_instance_;
class Ext4WriteEndFtraceEvent;
class Ext4WriteEndFtraceEventDefaultTypeInternal;
extern Ext4WriteEndFtraceEventDefaultTypeInternal _Ext4WriteEndFtraceEvent_default_instance_;
class Ext4WritepageFtraceEvent;
class Ext4WritepageFtraceEventDefaultTypeInternal;
extern Ext4WritepageFtraceEventDefaultTypeInternal _Ext4WritepageFtraceEvent_default_instance_;
class Ext4WritepagesFtraceEvent;
class Ext4WritepagesFtraceEventDefaultTypeInternal;
extern Ext4WritepagesFtraceEventDefaultTypeInternal _Ext4WritepagesFtraceEvent_default_instance_;
class Ext4WritepagesResultFtraceEvent;
class Ext4WritepagesResultFtraceEventDefaultTypeInternal;
extern Ext4WritepagesResultFtraceEventDefaultTypeInternal _Ext4WritepagesResultFtraceEvent_default_instance_;
class Ext4ZeroRangeFtraceEvent;
class Ext4ZeroRangeFtraceEventDefaultTypeInternal;
extern Ext4ZeroRangeFtraceEventDefaultTypeInternal _Ext4ZeroRangeFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocDaBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocateBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4AllocateInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocateInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4CollapseRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4CollapseRangeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaReserveSpaceFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWriteBeginFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWriteEndFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DaWritePagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWritePagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DirectIOEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DirectIOExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DirectIOExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DiscardBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4DropInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DropInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsCacheExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsInsertExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsRemoveExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkCountFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsShrinkFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4EvictInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EvictInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtInCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtInCacheFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtLoadExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtPutInCacheFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRmIdxFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRmLeafFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtShowExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4FallocateEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FallocateEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4FallocateExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FallocateExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FindDelallocRangeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ForgetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ForgetFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4FreeBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FreeBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4FreeInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FreeInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4InsertRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4InsertRangeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4InvalidatepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4InvalidatepageFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4JournalStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalStartFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalStartReservedFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalledWriteEndFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4LoadInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4LoadInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbBitmapLoadFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbNewGroupPaFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbNewInodePaFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MballocAllocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocAllocFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MballocDiscardFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocDiscardFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MballocFreeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocFreeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4MballocPreallocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocPreallocFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4PunchHoleFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4PunchHoleFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ReadpageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReadpageFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ReleasepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReleasepageFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RemoveBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4RequestBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RequestBlocksFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4RequestInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RequestInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFileEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4SyncFileExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFileExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4SyncFsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFsFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TrimAllFreeFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4TrimExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TrimExtentFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4TruncateEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TruncateEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4TruncateExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TruncateExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4UnlinkEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4UnlinkExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4UnlinkExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4WriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WriteBeginFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4WriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WriteEndFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4WritepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepageFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4WritepagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4WritepagesResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepagesResultFtraceEvent>(Arena*);
template<> ::perfetto::protos::Ext4ZeroRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ZeroRangeFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class Ext4DaWriteBeginFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWriteBeginFtraceEvent) */ {
 public:
  Ext4DaWriteBeginFtraceEvent();
  virtual ~Ext4DaWriteBeginFtraceEvent();

  Ext4DaWriteBeginFtraceEvent(const Ext4DaWriteBeginFtraceEvent& from);
  Ext4DaWriteBeginFtraceEvent(Ext4DaWriteBeginFtraceEvent&& from) noexcept
    : Ext4DaWriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWriteBeginFtraceEvent& operator=(const Ext4DaWriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWriteBeginFtraceEvent& operator=(Ext4DaWriteBeginFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaWriteBeginFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaWriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWriteBeginFtraceEvent*>(
               &_Ext4DaWriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ext4DaWriteBeginFtraceEvent& a, Ext4DaWriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWriteBeginFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaWriteBeginFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaWriteBeginFtraceEvent>(nullptr);
  }

  Ext4DaWriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaWriteBeginFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaWriteBeginFtraceEvent& from);
  void MergeFrom(const Ext4DaWriteBeginFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaWriteBeginFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaWriteBeginFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWriteBeginFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaWriteEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWriteEndFtraceEvent) */ {
 public:
  Ext4DaWriteEndFtraceEvent();
  virtual ~Ext4DaWriteEndFtraceEvent();

  Ext4DaWriteEndFtraceEvent(const Ext4DaWriteEndFtraceEvent& from);
  Ext4DaWriteEndFtraceEvent(Ext4DaWriteEndFtraceEvent&& from) noexcept
    : Ext4DaWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWriteEndFtraceEvent& operator=(const Ext4DaWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWriteEndFtraceEvent& operator=(Ext4DaWriteEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaWriteEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWriteEndFtraceEvent*>(
               &_Ext4DaWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ext4DaWriteEndFtraceEvent& a, Ext4DaWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWriteEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaWriteEndFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaWriteEndFtraceEvent>(nullptr);
  }

  Ext4DaWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaWriteEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaWriteEndFtraceEvent& from);
  void MergeFrom(const Ext4DaWriteEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaWriteEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaWriteEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied();
  ::PROTOBUF_NAMESPACE_ID::uint32 copied() const;
  void set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWriteEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copied_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4SyncFileEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFileEnterFtraceEvent) */ {
 public:
  Ext4SyncFileEnterFtraceEvent();
  virtual ~Ext4SyncFileEnterFtraceEvent();

  Ext4SyncFileEnterFtraceEvent(const Ext4SyncFileEnterFtraceEvent& from);
  Ext4SyncFileEnterFtraceEvent(Ext4SyncFileEnterFtraceEvent&& from) noexcept
    : Ext4SyncFileEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFileEnterFtraceEvent& operator=(const Ext4SyncFileEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFileEnterFtraceEvent& operator=(Ext4SyncFileEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4SyncFileEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4SyncFileEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFileEnterFtraceEvent*>(
               &_Ext4SyncFileEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ext4SyncFileEnterFtraceEvent& a, Ext4SyncFileEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFileEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4SyncFileEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4SyncFileEnterFtraceEvent>(nullptr);
  }

  Ext4SyncFileEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4SyncFileEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4SyncFileEnterFtraceEvent& from);
  void MergeFrom(const Ext4SyncFileEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4SyncFileEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4SyncFileEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kParentFieldNumber = 3,
    kDatasyncFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 parent = 3;
  bool has_parent() const;
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::uint64 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 datasync = 4;
  bool has_datasync() const;
  void clear_datasync();
  ::PROTOBUF_NAMESPACE_ID::int32 datasync() const;
  void set_datasync(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFileEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasync_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4SyncFileExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFileExitFtraceEvent) */ {
 public:
  Ext4SyncFileExitFtraceEvent();
  virtual ~Ext4SyncFileExitFtraceEvent();

  Ext4SyncFileExitFtraceEvent(const Ext4SyncFileExitFtraceEvent& from);
  Ext4SyncFileExitFtraceEvent(Ext4SyncFileExitFtraceEvent&& from) noexcept
    : Ext4SyncFileExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFileExitFtraceEvent& operator=(const Ext4SyncFileExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFileExitFtraceEvent& operator=(Ext4SyncFileExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4SyncFileExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4SyncFileExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFileExitFtraceEvent*>(
               &_Ext4SyncFileExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ext4SyncFileExitFtraceEvent& a, Ext4SyncFileExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFileExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4SyncFileExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4SyncFileExitFtraceEvent>(nullptr);
  }

  Ext4SyncFileExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4SyncFileExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4SyncFileExitFtraceEvent& from);
  void MergeFrom(const Ext4SyncFileExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4SyncFileExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4SyncFileExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFileExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4AllocDaBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocDaBlocksFtraceEvent) */ {
 public:
  Ext4AllocDaBlocksFtraceEvent();
  virtual ~Ext4AllocDaBlocksFtraceEvent();

  Ext4AllocDaBlocksFtraceEvent(const Ext4AllocDaBlocksFtraceEvent& from);
  Ext4AllocDaBlocksFtraceEvent(Ext4AllocDaBlocksFtraceEvent&& from) noexcept
    : Ext4AllocDaBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocDaBlocksFtraceEvent& operator=(const Ext4AllocDaBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocDaBlocksFtraceEvent& operator=(Ext4AllocDaBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4AllocDaBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4AllocDaBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocDaBlocksFtraceEvent*>(
               &_Ext4AllocDaBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ext4AllocDaBlocksFtraceEvent& a, Ext4AllocDaBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocDaBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4AllocDaBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4AllocDaBlocksFtraceEvent>(nullptr);
  }

  Ext4AllocDaBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4AllocDaBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4AllocDaBlocksFtraceEvent& from);
  void MergeFrom(const Ext4AllocDaBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4AllocDaBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4AllocDaBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDataBlocksFieldNumber = 3,
    kMetaBlocksFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 data_blocks = 3;
  bool has_data_blocks() const;
  void clear_data_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_blocks() const;
  void set_data_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 meta_blocks = 4;
  bool has_meta_blocks() const;
  void clear_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_blocks() const;
  void set_meta_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocDaBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4AllocateBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocateBlocksFtraceEvent) */ {
 public:
  Ext4AllocateBlocksFtraceEvent();
  virtual ~Ext4AllocateBlocksFtraceEvent();

  Ext4AllocateBlocksFtraceEvent(const Ext4AllocateBlocksFtraceEvent& from);
  Ext4AllocateBlocksFtraceEvent(Ext4AllocateBlocksFtraceEvent&& from) noexcept
    : Ext4AllocateBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocateBlocksFtraceEvent& operator=(const Ext4AllocateBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocateBlocksFtraceEvent& operator=(Ext4AllocateBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4AllocateBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4AllocateBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocateBlocksFtraceEvent*>(
               &_Ext4AllocateBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Ext4AllocateBlocksFtraceEvent& a, Ext4AllocateBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocateBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4AllocateBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4AllocateBlocksFtraceEvent>(nullptr);
  }

  Ext4AllocateBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4AllocateBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4AllocateBlocksFtraceEvent& from);
  void MergeFrom(const Ext4AllocateBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4AllocateBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4AllocateBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kLenFieldNumber = 4,
    kLogicalFieldNumber = 5,
    kLleftFieldNumber = 6,
    kLrightFieldNumber = 7,
    kGoalFieldNumber = 8,
    kPleftFieldNumber = 9,
    kPrightFieldNumber = 10,
    kFlagsFieldNumber = 11,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 logical = 5;
  bool has_logical() const;
  void clear_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 logical() const;
  void set_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lleft = 6;
  bool has_lleft() const;
  void clear_lleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 lleft() const;
  void set_lleft(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lright = 7;
  bool has_lright() const;
  void clear_lright();
  ::PROTOBUF_NAMESPACE_ID::uint32 lright() const;
  void set_lright(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 goal = 8;
  bool has_goal() const;
  void clear_goal();
  ::PROTOBUF_NAMESPACE_ID::uint64 goal() const;
  void set_goal(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pleft = 9;
  bool has_pleft() const;
  void clear_pleft();
  ::PROTOBUF_NAMESPACE_ID::uint64 pleft() const;
  void set_pleft(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pright = 10;
  bool has_pright() const;
  void clear_pright();
  ::PROTOBUF_NAMESPACE_ID::uint64 pright() const;
  void set_pright(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flags = 11;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocateBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 logical_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lleft_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lright_;
  ::PROTOBUF_NAMESPACE_ID::uint64 goal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pleft_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pright_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4AllocateInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocateInodeFtraceEvent) */ {
 public:
  Ext4AllocateInodeFtraceEvent();
  virtual ~Ext4AllocateInodeFtraceEvent();

  Ext4AllocateInodeFtraceEvent(const Ext4AllocateInodeFtraceEvent& from);
  Ext4AllocateInodeFtraceEvent(Ext4AllocateInodeFtraceEvent&& from) noexcept
    : Ext4AllocateInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocateInodeFtraceEvent& operator=(const Ext4AllocateInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocateInodeFtraceEvent& operator=(Ext4AllocateInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4AllocateInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4AllocateInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocateInodeFtraceEvent*>(
               &_Ext4AllocateInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Ext4AllocateInodeFtraceEvent& a, Ext4AllocateInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocateInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4AllocateInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4AllocateInodeFtraceEvent>(nullptr);
  }

  Ext4AllocateInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4AllocateInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4AllocateInodeFtraceEvent& from);
  void MergeFrom(const Ext4AllocateInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4AllocateInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4AllocateInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDirFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 dir = 3;
  bool has_dir() const;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::uint64 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocateInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dir_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4BeginOrderedTruncateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent) */ {
 public:
  Ext4BeginOrderedTruncateFtraceEvent();
  virtual ~Ext4BeginOrderedTruncateFtraceEvent();

  Ext4BeginOrderedTruncateFtraceEvent(const Ext4BeginOrderedTruncateFtraceEvent& from);
  Ext4BeginOrderedTruncateFtraceEvent(Ext4BeginOrderedTruncateFtraceEvent&& from) noexcept
    : Ext4BeginOrderedTruncateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4BeginOrderedTruncateFtraceEvent& operator=(const Ext4BeginOrderedTruncateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4BeginOrderedTruncateFtraceEvent& operator=(Ext4BeginOrderedTruncateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4BeginOrderedTruncateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4BeginOrderedTruncateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4BeginOrderedTruncateFtraceEvent*>(
               &_Ext4BeginOrderedTruncateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ext4BeginOrderedTruncateFtraceEvent& a, Ext4BeginOrderedTruncateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4BeginOrderedTruncateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4BeginOrderedTruncateFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4BeginOrderedTruncateFtraceEvent>(nullptr);
  }

  Ext4BeginOrderedTruncateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4BeginOrderedTruncateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4BeginOrderedTruncateFtraceEvent& from);
  void MergeFrom(const Ext4BeginOrderedTruncateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4BeginOrderedTruncateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNewSizeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 new_size = 3;
  bool has_new_size() const;
  void clear_new_size();
  ::PROTOBUF_NAMESPACE_ID::int64 new_size() const;
  void set_new_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4CollapseRangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4CollapseRangeFtraceEvent) */ {
 public:
  Ext4CollapseRangeFtraceEvent();
  virtual ~Ext4CollapseRangeFtraceEvent();

  Ext4CollapseRangeFtraceEvent(const Ext4CollapseRangeFtraceEvent& from);
  Ext4CollapseRangeFtraceEvent(Ext4CollapseRangeFtraceEvent&& from) noexcept
    : Ext4CollapseRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4CollapseRangeFtraceEvent& operator=(const Ext4CollapseRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4CollapseRangeFtraceEvent& operator=(Ext4CollapseRangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4CollapseRangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4CollapseRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4CollapseRangeFtraceEvent*>(
               &_Ext4CollapseRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Ext4CollapseRangeFtraceEvent& a, Ext4CollapseRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4CollapseRangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4CollapseRangeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4CollapseRangeFtraceEvent>(nullptr);
  }

  Ext4CollapseRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4CollapseRangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4CollapseRangeFtraceEvent& from);
  void MergeFrom(const Ext4CollapseRangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4CollapseRangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4CollapseRangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4CollapseRangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaReleaseSpaceFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent) */ {
 public:
  Ext4DaReleaseSpaceFtraceEvent();
  virtual ~Ext4DaReleaseSpaceFtraceEvent();

  Ext4DaReleaseSpaceFtraceEvent(const Ext4DaReleaseSpaceFtraceEvent& from);
  Ext4DaReleaseSpaceFtraceEvent(Ext4DaReleaseSpaceFtraceEvent&& from) noexcept
    : Ext4DaReleaseSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaReleaseSpaceFtraceEvent& operator=(const Ext4DaReleaseSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaReleaseSpaceFtraceEvent& operator=(Ext4DaReleaseSpaceFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaReleaseSpaceFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaReleaseSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaReleaseSpaceFtraceEvent*>(
               &_Ext4DaReleaseSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Ext4DaReleaseSpaceFtraceEvent& a, Ext4DaReleaseSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaReleaseSpaceFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaReleaseSpaceFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaReleaseSpaceFtraceEvent>(nullptr);
  }

  Ext4DaReleaseSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaReleaseSpaceFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaReleaseSpaceFtraceEvent& from);
  void MergeFrom(const Ext4DaReleaseSpaceFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaReleaseSpaceFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaReleaseSpaceFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kFreedBlocksFieldNumber = 4,
    kReservedDataBlocksFieldNumber = 5,
    kReservedMetaBlocksFieldNumber = 6,
    kAllocatedMetaBlocksFieldNumber = 7,
    kModeFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks() const;
  void set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 freed_blocks = 4;
  bool has_freed_blocks() const;
  void clear_freed_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 freed_blocks() const;
  void set_freed_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reserved_data_blocks = 5;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks() const;
  void set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reserved_meta_blocks = 6;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 allocated_meta_blocks = 7;
  bool has_allocated_meta_blocks() const;
  void clear_allocated_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 allocated_meta_blocks() const;
  void set_allocated_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 mode = 8;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 freed_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 allocated_meta_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaReserveSpaceFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaReserveSpaceFtraceEvent) */ {
 public:
  Ext4DaReserveSpaceFtraceEvent();
  virtual ~Ext4DaReserveSpaceFtraceEvent();

  Ext4DaReserveSpaceFtraceEvent(const Ext4DaReserveSpaceFtraceEvent& from);
  Ext4DaReserveSpaceFtraceEvent(Ext4DaReserveSpaceFtraceEvent&& from) noexcept
    : Ext4DaReserveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaReserveSpaceFtraceEvent& operator=(const Ext4DaReserveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaReserveSpaceFtraceEvent& operator=(Ext4DaReserveSpaceFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaReserveSpaceFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaReserveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaReserveSpaceFtraceEvent*>(
               &_Ext4DaReserveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ext4DaReserveSpaceFtraceEvent& a, Ext4DaReserveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaReserveSpaceFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaReserveSpaceFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaReserveSpaceFtraceEvent>(nullptr);
  }

  Ext4DaReserveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaReserveSpaceFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaReserveSpaceFtraceEvent& from);
  void MergeFrom(const Ext4DaReserveSpaceFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaReserveSpaceFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaReserveSpaceFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kReservedDataBlocksFieldNumber = 4,
    kReservedMetaBlocksFieldNumber = 5,
    kModeFieldNumber = 6,
    kMdNeededFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks() const;
  void set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 reserved_data_blocks = 4;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks() const;
  void set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reserved_meta_blocks = 5;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 md_needed = 7;
  bool has_md_needed() const;
  void clear_md_needed();
  ::PROTOBUF_NAMESPACE_ID::int32 md_needed() const;
  void set_md_needed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaReserveSpaceFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 md_needed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaUpdateReserveSpaceFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent) */ {
 public:
  Ext4DaUpdateReserveSpaceFtraceEvent();
  virtual ~Ext4DaUpdateReserveSpaceFtraceEvent();

  Ext4DaUpdateReserveSpaceFtraceEvent(const Ext4DaUpdateReserveSpaceFtraceEvent& from);
  Ext4DaUpdateReserveSpaceFtraceEvent(Ext4DaUpdateReserveSpaceFtraceEvent&& from) noexcept
    : Ext4DaUpdateReserveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaUpdateReserveSpaceFtraceEvent& operator=(const Ext4DaUpdateReserveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaUpdateReserveSpaceFtraceEvent& operator=(Ext4DaUpdateReserveSpaceFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaUpdateReserveSpaceFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaUpdateReserveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaUpdateReserveSpaceFtraceEvent*>(
               &_Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Ext4DaUpdateReserveSpaceFtraceEvent& a, Ext4DaUpdateReserveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaUpdateReserveSpaceFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaUpdateReserveSpaceFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaUpdateReserveSpaceFtraceEvent>(nullptr);
  }

  Ext4DaUpdateReserveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaUpdateReserveSpaceFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaUpdateReserveSpaceFtraceEvent& from);
  void MergeFrom(const Ext4DaUpdateReserveSpaceFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaUpdateReserveSpaceFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kUsedBlocksFieldNumber = 4,
    kReservedDataBlocksFieldNumber = 5,
    kReservedMetaBlocksFieldNumber = 6,
    kAllocatedMetaBlocksFieldNumber = 7,
    kQuotaClaimFieldNumber = 8,
    kModeFieldNumber = 9,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks() const;
  void set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 used_blocks = 4;
  bool has_used_blocks() const;
  void clear_used_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 used_blocks() const;
  void set_used_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reserved_data_blocks = 5;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks() const;
  void set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reserved_meta_blocks = 6;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 allocated_meta_blocks = 7;
  bool has_allocated_meta_blocks() const;
  void clear_allocated_meta_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 allocated_meta_blocks() const;
  void set_allocated_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 quota_claim = 8;
  bool has_quota_claim() const;
  void clear_quota_claim();
  ::PROTOBUF_NAMESPACE_ID::int32 quota_claim() const;
  void set_quota_claim(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 mode = 9;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 used_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_data_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_meta_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 allocated_meta_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 quota_claim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaWritePagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWritePagesFtraceEvent) */ {
 public:
  Ext4DaWritePagesFtraceEvent();
  virtual ~Ext4DaWritePagesFtraceEvent();

  Ext4DaWritePagesFtraceEvent(const Ext4DaWritePagesFtraceEvent& from);
  Ext4DaWritePagesFtraceEvent(Ext4DaWritePagesFtraceEvent&& from) noexcept
    : Ext4DaWritePagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWritePagesFtraceEvent& operator=(const Ext4DaWritePagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWritePagesFtraceEvent& operator=(Ext4DaWritePagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaWritePagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaWritePagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWritePagesFtraceEvent*>(
               &_Ext4DaWritePagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Ext4DaWritePagesFtraceEvent& a, Ext4DaWritePagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWritePagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaWritePagesFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaWritePagesFtraceEvent>(nullptr);
  }

  Ext4DaWritePagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaWritePagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaWritePagesFtraceEvent& from);
  void MergeFrom(const Ext4DaWritePagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaWritePagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaWritePagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFirstPageFieldNumber = 3,
    kNrToWriteFieldNumber = 4,
    kBBlocknrFieldNumber = 6,
    kSyncModeFieldNumber = 5,
    kBSizeFieldNumber = 7,
    kBStateFieldNumber = 8,
    kIoDoneFieldNumber = 9,
    kPagesWrittenFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 first_page = 3;
  bool has_first_page() const;
  void clear_first_page();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_page() const;
  void set_first_page(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 nr_to_write = 4;
  bool has_nr_to_write() const;
  void clear_nr_to_write();
  ::PROTOBUF_NAMESPACE_ID::int64 nr_to_write() const;
  void set_nr_to_write(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 b_blocknr = 6;
  bool has_b_blocknr() const;
  void clear_b_blocknr();
  ::PROTOBUF_NAMESPACE_ID::uint64 b_blocknr() const;
  void set_b_blocknr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 sync_mode = 5;
  bool has_sync_mode() const;
  void clear_sync_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode() const;
  void set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 b_size = 7;
  bool has_b_size() const;
  void clear_b_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 b_size() const;
  void set_b_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 b_state = 8;
  bool has_b_state() const;
  void clear_b_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 b_state() const;
  void set_b_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 io_done = 9;
  bool has_io_done() const;
  void clear_io_done();
  ::PROTOBUF_NAMESPACE_ID::int32 io_done() const;
  void set_io_done(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pages_written = 10;
  bool has_pages_written() const;
  void clear_pages_written();
  ::PROTOBUF_NAMESPACE_ID::int32 pages_written() const;
  void set_pages_written(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWritePagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_page_;
  ::PROTOBUF_NAMESPACE_ID::int64 nr_to_write_;
  ::PROTOBUF_NAMESPACE_ID::uint64 b_blocknr_;
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 io_done_;
  ::PROTOBUF_NAMESPACE_ID::int32 pages_written_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DaWritePagesExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent) */ {
 public:
  Ext4DaWritePagesExtentFtraceEvent();
  virtual ~Ext4DaWritePagesExtentFtraceEvent();

  Ext4DaWritePagesExtentFtraceEvent(const Ext4DaWritePagesExtentFtraceEvent& from);
  Ext4DaWritePagesExtentFtraceEvent(Ext4DaWritePagesExtentFtraceEvent&& from) noexcept
    : Ext4DaWritePagesExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWritePagesExtentFtraceEvent& operator=(const Ext4DaWritePagesExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWritePagesExtentFtraceEvent& operator=(Ext4DaWritePagesExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DaWritePagesExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DaWritePagesExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWritePagesExtentFtraceEvent*>(
               &_Ext4DaWritePagesExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Ext4DaWritePagesExtentFtraceEvent& a, Ext4DaWritePagesExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWritePagesExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DaWritePagesExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DaWritePagesExtentFtraceEvent>(nullptr);
  }

  Ext4DaWritePagesExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DaWritePagesExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DaWritePagesExtentFtraceEvent& from);
  void MergeFrom(const Ext4DaWritePagesExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DaWritePagesExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DaWritePagesExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DirectIOEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DirectIOEnterFtraceEvent) */ {
 public:
  Ext4DirectIOEnterFtraceEvent();
  virtual ~Ext4DirectIOEnterFtraceEvent();

  Ext4DirectIOEnterFtraceEvent(const Ext4DirectIOEnterFtraceEvent& from);
  Ext4DirectIOEnterFtraceEvent(Ext4DirectIOEnterFtraceEvent&& from) noexcept
    : Ext4DirectIOEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DirectIOEnterFtraceEvent& operator=(const Ext4DirectIOEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DirectIOEnterFtraceEvent& operator=(Ext4DirectIOEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DirectIOEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DirectIOEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DirectIOEnterFtraceEvent*>(
               &_Ext4DirectIOEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Ext4DirectIOEnterFtraceEvent& a, Ext4DirectIOEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DirectIOEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DirectIOEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DirectIOEnterFtraceEvent>(nullptr);
  }

  Ext4DirectIOEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DirectIOEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DirectIOEnterFtraceEvent& from);
  void MergeFrom(const Ext4DirectIOEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DirectIOEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DirectIOEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kRwFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 rw = 5;
  bool has_rw() const;
  void clear_rw();
  ::PROTOBUF_NAMESPACE_ID::int32 rw() const;
  void set_rw(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DirectIOEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 rw_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DirectIOExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DirectIOExitFtraceEvent) */ {
 public:
  Ext4DirectIOExitFtraceEvent();
  virtual ~Ext4DirectIOExitFtraceEvent();

  Ext4DirectIOExitFtraceEvent(const Ext4DirectIOExitFtraceEvent& from);
  Ext4DirectIOExitFtraceEvent(Ext4DirectIOExitFtraceEvent&& from) noexcept
    : Ext4DirectIOExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DirectIOExitFtraceEvent& operator=(const Ext4DirectIOExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DirectIOExitFtraceEvent& operator=(Ext4DirectIOExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DirectIOExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DirectIOExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DirectIOExitFtraceEvent*>(
               &_Ext4DirectIOExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Ext4DirectIOExitFtraceEvent& a, Ext4DirectIOExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DirectIOExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DirectIOExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DirectIOExitFtraceEvent>(nullptr);
  }

  Ext4DirectIOExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DirectIOExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DirectIOExitFtraceEvent& from);
  void MergeFrom(const Ext4DirectIOExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DirectIOExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DirectIOExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kRwFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 rw = 5;
  bool has_rw() const;
  void clear_rw();
  ::PROTOBUF_NAMESPACE_ID::int32 rw() const;
  void set_rw(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DirectIOExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 rw_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DiscardBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DiscardBlocksFtraceEvent) */ {
 public:
  Ext4DiscardBlocksFtraceEvent();
  virtual ~Ext4DiscardBlocksFtraceEvent();

  Ext4DiscardBlocksFtraceEvent(const Ext4DiscardBlocksFtraceEvent& from);
  Ext4DiscardBlocksFtraceEvent(Ext4DiscardBlocksFtraceEvent&& from) noexcept
    : Ext4DiscardBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DiscardBlocksFtraceEvent& operator=(const Ext4DiscardBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DiscardBlocksFtraceEvent& operator=(Ext4DiscardBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DiscardBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DiscardBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DiscardBlocksFtraceEvent*>(
               &_Ext4DiscardBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Ext4DiscardBlocksFtraceEvent& a, Ext4DiscardBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DiscardBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DiscardBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DiscardBlocksFtraceEvent>(nullptr);
  }

  Ext4DiscardBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DiscardBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DiscardBlocksFtraceEvent& from);
  void MergeFrom(const Ext4DiscardBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DiscardBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DiscardBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kBlkFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 blk = 2;
  bool has_blk() const;
  void clear_blk();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk() const;
  void set_blk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DiscardBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DiscardPreallocationsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent) */ {
 public:
  Ext4DiscardPreallocationsFtraceEvent();
  virtual ~Ext4DiscardPreallocationsFtraceEvent();

  Ext4DiscardPreallocationsFtraceEvent(const Ext4DiscardPreallocationsFtraceEvent& from);
  Ext4DiscardPreallocationsFtraceEvent(Ext4DiscardPreallocationsFtraceEvent&& from) noexcept
    : Ext4DiscardPreallocationsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DiscardPreallocationsFtraceEvent& operator=(const Ext4DiscardPreallocationsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DiscardPreallocationsFtraceEvent& operator=(Ext4DiscardPreallocationsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DiscardPreallocationsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DiscardPreallocationsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DiscardPreallocationsFtraceEvent*>(
               &_Ext4DiscardPreallocationsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Ext4DiscardPreallocationsFtraceEvent& a, Ext4DiscardPreallocationsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DiscardPreallocationsFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DiscardPreallocationsFtraceEvent>(nullptr);
  }

  Ext4DiscardPreallocationsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DiscardPreallocationsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DiscardPreallocationsFtraceEvent& from);
  void MergeFrom(const Ext4DiscardPreallocationsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DiscardPreallocationsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DiscardPreallocationsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4DropInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DropInodeFtraceEvent) */ {
 public:
  Ext4DropInodeFtraceEvent();
  virtual ~Ext4DropInodeFtraceEvent();

  Ext4DropInodeFtraceEvent(const Ext4DropInodeFtraceEvent& from);
  Ext4DropInodeFtraceEvent(Ext4DropInodeFtraceEvent&& from) noexcept
    : Ext4DropInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DropInodeFtraceEvent& operator=(const Ext4DropInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DropInodeFtraceEvent& operator=(Ext4DropInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4DropInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4DropInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DropInodeFtraceEvent*>(
               &_Ext4DropInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Ext4DropInodeFtraceEvent& a, Ext4DropInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DropInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4DropInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4DropInodeFtraceEvent>(nullptr);
  }

  Ext4DropInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4DropInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4DropInodeFtraceEvent& from);
  void MergeFrom(const Ext4DropInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4DropInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4DropInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDropFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 drop = 3;
  bool has_drop() const;
  void clear_drop();
  ::PROTOBUF_NAMESPACE_ID::int32 drop() const;
  void set_drop(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DropInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 drop_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsCacheExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsCacheExtentFtraceEvent) */ {
 public:
  Ext4EsCacheExtentFtraceEvent();
  virtual ~Ext4EsCacheExtentFtraceEvent();

  Ext4EsCacheExtentFtraceEvent(const Ext4EsCacheExtentFtraceEvent& from);
  Ext4EsCacheExtentFtraceEvent(Ext4EsCacheExtentFtraceEvent&& from) noexcept
    : Ext4EsCacheExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsCacheExtentFtraceEvent& operator=(const Ext4EsCacheExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsCacheExtentFtraceEvent& operator=(Ext4EsCacheExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsCacheExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsCacheExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsCacheExtentFtraceEvent*>(
               &_Ext4EsCacheExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Ext4EsCacheExtentFtraceEvent& a, Ext4EsCacheExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsCacheExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsCacheExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsCacheExtentFtraceEvent>(nullptr);
  }

  Ext4EsCacheExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsCacheExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsCacheExtentFtraceEvent& from);
  void MergeFrom(const Ext4EsCacheExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsCacheExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsCacheExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsCacheExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsFindDelayedExtentRangeEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent) */ {
 public:
  Ext4EsFindDelayedExtentRangeEnterFtraceEvent();
  virtual ~Ext4EsFindDelayedExtentRangeEnterFtraceEvent();

  Ext4EsFindDelayedExtentRangeEnterFtraceEvent(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from);
  Ext4EsFindDelayedExtentRangeEnterFtraceEvent(Ext4EsFindDelayedExtentRangeEnterFtraceEvent&& from) noexcept
    : Ext4EsFindDelayedExtentRangeEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent& operator=(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent& operator=(Ext4EsFindDelayedExtentRangeEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsFindDelayedExtentRangeEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsFindDelayedExtentRangeEnterFtraceEvent*>(
               &_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent& a, Ext4EsFindDelayedExtentRangeEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(nullptr);
  }

  Ext4EsFindDelayedExtentRangeEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from);
  void MergeFrom(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsFindDelayedExtentRangeExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent) */ {
 public:
  Ext4EsFindDelayedExtentRangeExitFtraceEvent();
  virtual ~Ext4EsFindDelayedExtentRangeExitFtraceEvent();

  Ext4EsFindDelayedExtentRangeExitFtraceEvent(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from);
  Ext4EsFindDelayedExtentRangeExitFtraceEvent(Ext4EsFindDelayedExtentRangeExitFtraceEvent&& from) noexcept
    : Ext4EsFindDelayedExtentRangeExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent& operator=(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent& operator=(Ext4EsFindDelayedExtentRangeExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsFindDelayedExtentRangeExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsFindDelayedExtentRangeExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsFindDelayedExtentRangeExitFtraceEvent*>(
               &_Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Ext4EsFindDelayedExtentRangeExitFtraceEvent& a, Ext4EsFindDelayedExtentRangeExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsFindDelayedExtentRangeExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeExitFtraceEvent>(nullptr);
  }

  Ext4EsFindDelayedExtentRangeExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from);
  void MergeFrom(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsFindDelayedExtentRangeExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 status_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsInsertExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsInsertExtentFtraceEvent) */ {
 public:
  Ext4EsInsertExtentFtraceEvent();
  virtual ~Ext4EsInsertExtentFtraceEvent();

  Ext4EsInsertExtentFtraceEvent(const Ext4EsInsertExtentFtraceEvent& from);
  Ext4EsInsertExtentFtraceEvent(Ext4EsInsertExtentFtraceEvent&& from) noexcept
    : Ext4EsInsertExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsInsertExtentFtraceEvent& operator=(const Ext4EsInsertExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsInsertExtentFtraceEvent& operator=(Ext4EsInsertExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsInsertExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsInsertExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsInsertExtentFtraceEvent*>(
               &_Ext4EsInsertExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Ext4EsInsertExtentFtraceEvent& a, Ext4EsInsertExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsInsertExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsInsertExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsInsertExtentFtraceEvent>(nullptr);
  }

  Ext4EsInsertExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsInsertExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsInsertExtentFtraceEvent& from);
  void MergeFrom(const Ext4EsInsertExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsInsertExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsInsertExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsInsertExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 status_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsLookupExtentEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent) */ {
 public:
  Ext4EsLookupExtentEnterFtraceEvent();
  virtual ~Ext4EsLookupExtentEnterFtraceEvent();

  Ext4EsLookupExtentEnterFtraceEvent(const Ext4EsLookupExtentEnterFtraceEvent& from);
  Ext4EsLookupExtentEnterFtraceEvent(Ext4EsLookupExtentEnterFtraceEvent&& from) noexcept
    : Ext4EsLookupExtentEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsLookupExtentEnterFtraceEvent& operator=(const Ext4EsLookupExtentEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsLookupExtentEnterFtraceEvent& operator=(Ext4EsLookupExtentEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsLookupExtentEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsLookupExtentEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsLookupExtentEnterFtraceEvent*>(
               &_Ext4EsLookupExtentEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Ext4EsLookupExtentEnterFtraceEvent& a, Ext4EsLookupExtentEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsLookupExtentEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsLookupExtentEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsLookupExtentEnterFtraceEvent>(nullptr);
  }

  Ext4EsLookupExtentEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsLookupExtentEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsLookupExtentEnterFtraceEvent& from);
  void MergeFrom(const Ext4EsLookupExtentEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsLookupExtentEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsLookupExtentExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent) */ {
 public:
  Ext4EsLookupExtentExitFtraceEvent();
  virtual ~Ext4EsLookupExtentExitFtraceEvent();

  Ext4EsLookupExtentExitFtraceEvent(const Ext4EsLookupExtentExitFtraceEvent& from);
  Ext4EsLookupExtentExitFtraceEvent(Ext4EsLookupExtentExitFtraceEvent&& from) noexcept
    : Ext4EsLookupExtentExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsLookupExtentExitFtraceEvent& operator=(const Ext4EsLookupExtentExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsLookupExtentExitFtraceEvent& operator=(Ext4EsLookupExtentExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsLookupExtentExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsLookupExtentExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsLookupExtentExitFtraceEvent*>(
               &_Ext4EsLookupExtentExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Ext4EsLookupExtentExitFtraceEvent& a, Ext4EsLookupExtentExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsLookupExtentExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsLookupExtentExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsLookupExtentExitFtraceEvent>(nullptr);
  }

  Ext4EsLookupExtentExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsLookupExtentExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsLookupExtentExitFtraceEvent& from);
  void MergeFrom(const Ext4EsLookupExtentExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsLookupExtentExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsLookupExtentExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
    kFoundFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 found = 7;
  bool has_found() const;
  void clear_found();
  ::PROTOBUF_NAMESPACE_ID::int32 found() const;
  void set_found(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 found_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsRemoveExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsRemoveExtentFtraceEvent) */ {
 public:
  Ext4EsRemoveExtentFtraceEvent();
  virtual ~Ext4EsRemoveExtentFtraceEvent();

  Ext4EsRemoveExtentFtraceEvent(const Ext4EsRemoveExtentFtraceEvent& from);
  Ext4EsRemoveExtentFtraceEvent(Ext4EsRemoveExtentFtraceEvent&& from) noexcept
    : Ext4EsRemoveExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsRemoveExtentFtraceEvent& operator=(const Ext4EsRemoveExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsRemoveExtentFtraceEvent& operator=(Ext4EsRemoveExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsRemoveExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsRemoveExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsRemoveExtentFtraceEvent*>(
               &_Ext4EsRemoveExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Ext4EsRemoveExtentFtraceEvent& a, Ext4EsRemoveExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsRemoveExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsRemoveExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsRemoveExtentFtraceEvent>(nullptr);
  }

  Ext4EsRemoveExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsRemoveExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsRemoveExtentFtraceEvent& from);
  void MergeFrom(const Ext4EsRemoveExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsRemoveExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsRemoveExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::int64 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsRemoveExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 lblk_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsShrinkFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkFtraceEvent) */ {
 public:
  Ext4EsShrinkFtraceEvent();
  virtual ~Ext4EsShrinkFtraceEvent();

  Ext4EsShrinkFtraceEvent(const Ext4EsShrinkFtraceEvent& from);
  Ext4EsShrinkFtraceEvent(Ext4EsShrinkFtraceEvent&& from) noexcept
    : Ext4EsShrinkFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkFtraceEvent& operator=(const Ext4EsShrinkFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkFtraceEvent& operator=(Ext4EsShrinkFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsShrinkFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsShrinkFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkFtraceEvent*>(
               &_Ext4EsShrinkFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Ext4EsShrinkFtraceEvent& a, Ext4EsShrinkFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsShrinkFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsShrinkFtraceEvent>(nullptr);
  }

  Ext4EsShrinkFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsShrinkFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsShrinkFtraceEvent& from);
  void MergeFrom(const Ext4EsShrinkFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsShrinkFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kScanTimeFieldNumber = 3,
    kNrShrunkFieldNumber = 2,
    kNrSkippedFieldNumber = 4,
    kRetriedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 scan_time = 3;
  bool has_scan_time() const;
  void clear_scan_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 scan_time() const;
  void set_scan_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 nr_shrunk = 2;
  bool has_nr_shrunk() const;
  void clear_nr_shrunk();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_shrunk() const;
  void set_nr_shrunk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 nr_skipped = 4;
  bool has_nr_skipped() const;
  void clear_nr_skipped();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_skipped() const;
  void set_nr_skipped(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 retried = 5;
  bool has_retried() const;
  void clear_retried();
  ::PROTOBUF_NAMESPACE_ID::int32 retried() const;
  void set_retried(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 scan_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_shrunk_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_skipped_;
  ::PROTOBUF_NAMESPACE_ID::int32 retried_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsShrinkCountFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkCountFtraceEvent) */ {
 public:
  Ext4EsShrinkCountFtraceEvent();
  virtual ~Ext4EsShrinkCountFtraceEvent();

  Ext4EsShrinkCountFtraceEvent(const Ext4EsShrinkCountFtraceEvent& from);
  Ext4EsShrinkCountFtraceEvent(Ext4EsShrinkCountFtraceEvent&& from) noexcept
    : Ext4EsShrinkCountFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkCountFtraceEvent& operator=(const Ext4EsShrinkCountFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkCountFtraceEvent& operator=(Ext4EsShrinkCountFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsShrinkCountFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsShrinkCountFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkCountFtraceEvent*>(
               &_Ext4EsShrinkCountFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Ext4EsShrinkCountFtraceEvent& a, Ext4EsShrinkCountFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkCountFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsShrinkCountFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsShrinkCountFtraceEvent>(nullptr);
  }

  Ext4EsShrinkCountFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsShrinkCountFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsShrinkCountFtraceEvent& from);
  void MergeFrom(const Ext4EsShrinkCountFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsShrinkCountFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkCountFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrToScanFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 nr_to_scan = 2;
  bool has_nr_to_scan() const;
  void clear_nr_to_scan();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_to_scan() const;
  void set_nr_to_scan(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt() const;
  void set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkCountFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_to_scan_;
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsShrinkScanEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent) */ {
 public:
  Ext4EsShrinkScanEnterFtraceEvent();
  virtual ~Ext4EsShrinkScanEnterFtraceEvent();

  Ext4EsShrinkScanEnterFtraceEvent(const Ext4EsShrinkScanEnterFtraceEvent& from);
  Ext4EsShrinkScanEnterFtraceEvent(Ext4EsShrinkScanEnterFtraceEvent&& from) noexcept
    : Ext4EsShrinkScanEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkScanEnterFtraceEvent& operator=(const Ext4EsShrinkScanEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkScanEnterFtraceEvent& operator=(Ext4EsShrinkScanEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsShrinkScanEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsShrinkScanEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkScanEnterFtraceEvent*>(
               &_Ext4EsShrinkScanEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Ext4EsShrinkScanEnterFtraceEvent& a, Ext4EsShrinkScanEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkScanEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsShrinkScanEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsShrinkScanEnterFtraceEvent>(nullptr);
  }

  Ext4EsShrinkScanEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsShrinkScanEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsShrinkScanEnterFtraceEvent& from);
  void MergeFrom(const Ext4EsShrinkScanEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsShrinkScanEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrToScanFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 nr_to_scan = 2;
  bool has_nr_to_scan() const;
  void clear_nr_to_scan();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_to_scan() const;
  void set_nr_to_scan(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt() const;
  void set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_to_scan_;
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EsShrinkScanExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent) */ {
 public:
  Ext4EsShrinkScanExitFtraceEvent();
  virtual ~Ext4EsShrinkScanExitFtraceEvent();

  Ext4EsShrinkScanExitFtraceEvent(const Ext4EsShrinkScanExitFtraceEvent& from);
  Ext4EsShrinkScanExitFtraceEvent(Ext4EsShrinkScanExitFtraceEvent&& from) noexcept
    : Ext4EsShrinkScanExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkScanExitFtraceEvent& operator=(const Ext4EsShrinkScanExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkScanExitFtraceEvent& operator=(Ext4EsShrinkScanExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EsShrinkScanExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EsShrinkScanExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkScanExitFtraceEvent*>(
               &_Ext4EsShrinkScanExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Ext4EsShrinkScanExitFtraceEvent& a, Ext4EsShrinkScanExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkScanExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EsShrinkScanExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EsShrinkScanExitFtraceEvent>(nullptr);
  }

  Ext4EsShrinkScanExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EsShrinkScanExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EsShrinkScanExitFtraceEvent& from);
  void MergeFrom(const Ext4EsShrinkScanExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EsShrinkScanExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkScanExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrShrunkFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 nr_shrunk = 2;
  bool has_nr_shrunk() const;
  void clear_nr_shrunk();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_shrunk() const;
  void set_nr_shrunk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt() const;
  void set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_shrunk_;
  ::PROTOBUF_NAMESPACE_ID::int32 cache_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4EvictInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EvictInodeFtraceEvent) */ {
 public:
  Ext4EvictInodeFtraceEvent();
  virtual ~Ext4EvictInodeFtraceEvent();

  Ext4EvictInodeFtraceEvent(const Ext4EvictInodeFtraceEvent& from);
  Ext4EvictInodeFtraceEvent(Ext4EvictInodeFtraceEvent&& from) noexcept
    : Ext4EvictInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EvictInodeFtraceEvent& operator=(const Ext4EvictInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EvictInodeFtraceEvent& operator=(Ext4EvictInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4EvictInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4EvictInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EvictInodeFtraceEvent*>(
               &_Ext4EvictInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Ext4EvictInodeFtraceEvent& a, Ext4EvictInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EvictInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4EvictInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4EvictInodeFtraceEvent>(nullptr);
  }

  Ext4EvictInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4EvictInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4EvictInodeFtraceEvent& from);
  void MergeFrom(const Ext4EvictInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4EvictInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4EvictInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNlinkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 nlink = 3;
  bool has_nlink() const;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::int32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EvictInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 nlink_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtConvertToInitializedEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent) */ {
 public:
  Ext4ExtConvertToInitializedEnterFtraceEvent();
  virtual ~Ext4ExtConvertToInitializedEnterFtraceEvent();

  Ext4ExtConvertToInitializedEnterFtraceEvent(const Ext4ExtConvertToInitializedEnterFtraceEvent& from);
  Ext4ExtConvertToInitializedEnterFtraceEvent(Ext4ExtConvertToInitializedEnterFtraceEvent&& from) noexcept
    : Ext4ExtConvertToInitializedEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtConvertToInitializedEnterFtraceEvent& operator=(const Ext4ExtConvertToInitializedEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtConvertToInitializedEnterFtraceEvent& operator=(Ext4ExtConvertToInitializedEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtConvertToInitializedEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtConvertToInitializedEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtConvertToInitializedEnterFtraceEvent*>(
               &_Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Ext4ExtConvertToInitializedEnterFtraceEvent& a, Ext4ExtConvertToInitializedEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtConvertToInitializedEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtConvertToInitializedEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedEnterFtraceEvent>(nullptr);
  }

  Ext4ExtConvertToInitializedEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtConvertToInitializedEnterFtraceEvent& from);
  void MergeFrom(const Ext4ExtConvertToInitializedEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtConvertToInitializedEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kMLblkFieldNumber = 3,
    kMLenFieldNumber = 4,
    kULblkFieldNumber = 5,
    kULenFieldNumber = 6,
    kUPblkFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 m_lblk = 3;
  bool has_m_lblk() const;
  void clear_m_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_lblk() const;
  void set_m_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 m_len = 4;
  bool has_m_len() const;
  void clear_m_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_len() const;
  void set_m_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 u_lblk = 5;
  bool has_u_lblk() const;
  void clear_u_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 u_lblk() const;
  void set_u_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 u_len = 6;
  bool has_u_len() const;
  void clear_u_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 u_len() const;
  void set_u_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 u_pblk = 7;
  bool has_u_pblk() const;
  void clear_u_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 u_pblk() const;
  void set_u_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u_pblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtConvertToInitializedFastpathFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent) */ {
 public:
  Ext4ExtConvertToInitializedFastpathFtraceEvent();
  virtual ~Ext4ExtConvertToInitializedFastpathFtraceEvent();

  Ext4ExtConvertToInitializedFastpathFtraceEvent(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from);
  Ext4ExtConvertToInitializedFastpathFtraceEvent(Ext4ExtConvertToInitializedFastpathFtraceEvent&& from) noexcept
    : Ext4ExtConvertToInitializedFastpathFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtConvertToInitializedFastpathFtraceEvent& operator=(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtConvertToInitializedFastpathFtraceEvent& operator=(Ext4ExtConvertToInitializedFastpathFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtConvertToInitializedFastpathFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtConvertToInitializedFastpathFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtConvertToInitializedFastpathFtraceEvent*>(
               &_Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Ext4ExtConvertToInitializedFastpathFtraceEvent& a, Ext4ExtConvertToInitializedFastpathFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtConvertToInitializedFastpathFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtConvertToInitializedFastpathFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedFastpathFtraceEvent>(nullptr);
  }

  Ext4ExtConvertToInitializedFastpathFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedFastpathFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from);
  void MergeFrom(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtConvertToInitializedFastpathFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kMLblkFieldNumber = 3,
    kMLenFieldNumber = 4,
    kULblkFieldNumber = 5,
    kULenFieldNumber = 6,
    kUPblkFieldNumber = 7,
    kILblkFieldNumber = 8,
    kILenFieldNumber = 9,
    kIPblkFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 m_lblk = 3;
  bool has_m_lblk() const;
  void clear_m_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_lblk() const;
  void set_m_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 m_len = 4;
  bool has_m_len() const;
  void clear_m_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_len() const;
  void set_m_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 u_lblk = 5;
  bool has_u_lblk() const;
  void clear_u_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 u_lblk() const;
  void set_u_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 u_len = 6;
  bool has_u_len() const;
  void clear_u_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 u_len() const;
  void set_u_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 u_pblk = 7;
  bool has_u_pblk() const;
  void clear_u_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 u_pblk() const;
  void set_u_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 i_lblk = 8;
  bool has_i_lblk() const;
  void clear_i_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_lblk() const;
  void set_i_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 i_len = 9;
  bool has_i_len() const;
  void clear_i_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_len() const;
  void set_i_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 i_pblk = 10;
  bool has_i_pblk() const;
  void clear_i_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_pblk() const;
  void set_i_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u_pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_pblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtHandleUnwrittenExtentsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent) */ {
 public:
  Ext4ExtHandleUnwrittenExtentsFtraceEvent();
  virtual ~Ext4ExtHandleUnwrittenExtentsFtraceEvent();

  Ext4ExtHandleUnwrittenExtentsFtraceEvent(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from);
  Ext4ExtHandleUnwrittenExtentsFtraceEvent(Ext4ExtHandleUnwrittenExtentsFtraceEvent&& from) noexcept
    : Ext4ExtHandleUnwrittenExtentsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent& operator=(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent& operator=(Ext4ExtHandleUnwrittenExtentsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtHandleUnwrittenExtentsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtHandleUnwrittenExtentsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtHandleUnwrittenExtentsFtraceEvent*>(
               &_Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Ext4ExtHandleUnwrittenExtentsFtraceEvent& a, Ext4ExtHandleUnwrittenExtentsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtHandleUnwrittenExtentsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtHandleUnwrittenExtentsFtraceEvent>(nullptr);
  }

  Ext4ExtHandleUnwrittenExtentsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtHandleUnwrittenExtentsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from);
  void MergeFrom(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtHandleUnwrittenExtentsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 4,
    kPblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kAllocatedFieldNumber = 7,
    kNewblkFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 allocated = 7;
  bool has_allocated() const;
  void clear_allocated();
  ::PROTOBUF_NAMESPACE_ID::uint32 allocated() const;
  void set_allocated(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 newblk = 8;
  bool has_newblk() const;
  void clear_newblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 newblk() const;
  void set_newblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 allocated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtInCacheFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtInCacheFtraceEvent) */ {
 public:
  Ext4ExtInCacheFtraceEvent();
  virtual ~Ext4ExtInCacheFtraceEvent();

  Ext4ExtInCacheFtraceEvent(const Ext4ExtInCacheFtraceEvent& from);
  Ext4ExtInCacheFtraceEvent(Ext4ExtInCacheFtraceEvent&& from) noexcept
    : Ext4ExtInCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtInCacheFtraceEvent& operator=(const Ext4ExtInCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtInCacheFtraceEvent& operator=(Ext4ExtInCacheFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtInCacheFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtInCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtInCacheFtraceEvent*>(
               &_Ext4ExtInCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Ext4ExtInCacheFtraceEvent& a, Ext4ExtInCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtInCacheFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtInCacheFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtInCacheFtraceEvent>(nullptr);
  }

  Ext4ExtInCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtInCacheFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtInCacheFtraceEvent& from);
  void MergeFrom(const Ext4ExtInCacheFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtInCacheFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtInCacheFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 4;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtInCacheFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtLoadExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtLoadExtentFtraceEvent) */ {
 public:
  Ext4ExtLoadExtentFtraceEvent();
  virtual ~Ext4ExtLoadExtentFtraceEvent();

  Ext4ExtLoadExtentFtraceEvent(const Ext4ExtLoadExtentFtraceEvent& from);
  Ext4ExtLoadExtentFtraceEvent(Ext4ExtLoadExtentFtraceEvent&& from) noexcept
    : Ext4ExtLoadExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtLoadExtentFtraceEvent& operator=(const Ext4ExtLoadExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtLoadExtentFtraceEvent& operator=(Ext4ExtLoadExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtLoadExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtLoadExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtLoadExtentFtraceEvent*>(
               &_Ext4ExtLoadExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Ext4ExtLoadExtentFtraceEvent& a, Ext4ExtLoadExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtLoadExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtLoadExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtLoadExtentFtraceEvent>(nullptr);
  }

  Ext4ExtLoadExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtLoadExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtLoadExtentFtraceEvent& from);
  void MergeFrom(const Ext4ExtLoadExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtLoadExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtLoadExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
    kLblkFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtLoadExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtMapBlocksEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent) */ {
 public:
  Ext4ExtMapBlocksEnterFtraceEvent();
  virtual ~Ext4ExtMapBlocksEnterFtraceEvent();

  Ext4ExtMapBlocksEnterFtraceEvent(const Ext4ExtMapBlocksEnterFtraceEvent& from);
  Ext4ExtMapBlocksEnterFtraceEvent(Ext4ExtMapBlocksEnterFtraceEvent&& from) noexcept
    : Ext4ExtMapBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtMapBlocksEnterFtraceEvent& operator=(const Ext4ExtMapBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtMapBlocksEnterFtraceEvent& operator=(Ext4ExtMapBlocksEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtMapBlocksEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtMapBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtMapBlocksEnterFtraceEvent*>(
               &_Ext4ExtMapBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Ext4ExtMapBlocksEnterFtraceEvent& a, Ext4ExtMapBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtMapBlocksEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksEnterFtraceEvent>(nullptr);
  }

  Ext4ExtMapBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtMapBlocksEnterFtraceEvent& from);
  void MergeFrom(const Ext4ExtMapBlocksEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtMapBlocksEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtMapBlocksExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent) */ {
 public:
  Ext4ExtMapBlocksExitFtraceEvent();
  virtual ~Ext4ExtMapBlocksExitFtraceEvent();

  Ext4ExtMapBlocksExitFtraceEvent(const Ext4ExtMapBlocksExitFtraceEvent& from);
  Ext4ExtMapBlocksExitFtraceEvent(Ext4ExtMapBlocksExitFtraceEvent&& from) noexcept
    : Ext4ExtMapBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtMapBlocksExitFtraceEvent& operator=(const Ext4ExtMapBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtMapBlocksExitFtraceEvent& operator=(Ext4ExtMapBlocksExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtMapBlocksExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtMapBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtMapBlocksExitFtraceEvent*>(
               &_Ext4ExtMapBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Ext4ExtMapBlocksExitFtraceEvent& a, Ext4ExtMapBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtMapBlocksExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksExitFtraceEvent>(nullptr);
  }

  Ext4ExtMapBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtMapBlocksExitFtraceEvent& from);
  void MergeFrom(const Ext4ExtMapBlocksExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtMapBlocksExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 4,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kMflagsFieldNumber = 7,
    kRetFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lblk = 5;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mflags = 7;
  bool has_mflags() const;
  void clear_mflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 mflags() const;
  void set_mflags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mflags_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtPutInCacheFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtPutInCacheFtraceEvent) */ {
 public:
  Ext4ExtPutInCacheFtraceEvent();
  virtual ~Ext4ExtPutInCacheFtraceEvent();

  Ext4ExtPutInCacheFtraceEvent(const Ext4ExtPutInCacheFtraceEvent& from);
  Ext4ExtPutInCacheFtraceEvent(Ext4ExtPutInCacheFtraceEvent&& from) noexcept
    : Ext4ExtPutInCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtPutInCacheFtraceEvent& operator=(const Ext4ExtPutInCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtPutInCacheFtraceEvent& operator=(Ext4ExtPutInCacheFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtPutInCacheFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtPutInCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtPutInCacheFtraceEvent*>(
               &_Ext4ExtPutInCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Ext4ExtPutInCacheFtraceEvent& a, Ext4ExtPutInCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtPutInCacheFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtPutInCacheFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtPutInCacheFtraceEvent>(nullptr);
  }

  Ext4ExtPutInCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtPutInCacheFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtPutInCacheFtraceEvent& from);
  void MergeFrom(const Ext4ExtPutInCacheFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtPutInCacheFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtPutInCacheFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kStartFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 start = 5;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtPutInCacheFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtRemoveSpaceFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent) */ {
 public:
  Ext4ExtRemoveSpaceFtraceEvent();
  virtual ~Ext4ExtRemoveSpaceFtraceEvent();

  Ext4ExtRemoveSpaceFtraceEvent(const Ext4ExtRemoveSpaceFtraceEvent& from);
  Ext4ExtRemoveSpaceFtraceEvent(Ext4ExtRemoveSpaceFtraceEvent&& from) noexcept
    : Ext4ExtRemoveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRemoveSpaceFtraceEvent& operator=(const Ext4ExtRemoveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRemoveSpaceFtraceEvent& operator=(Ext4ExtRemoveSpaceFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtRemoveSpaceFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtRemoveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRemoveSpaceFtraceEvent*>(
               &_Ext4ExtRemoveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Ext4ExtRemoveSpaceFtraceEvent& a, Ext4ExtRemoveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRemoveSpaceFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtRemoveSpaceFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceFtraceEvent>(nullptr);
  }

  Ext4ExtRemoveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtRemoveSpaceFtraceEvent& from);
  void MergeFrom(const Ext4ExtRemoveSpaceFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtRemoveSpaceFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kDepthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 end = 4;
  bool has_end() const;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 depth = 5;
  bool has_depth() const;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtRemoveSpaceDoneFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent) */ {
 public:
  Ext4ExtRemoveSpaceDoneFtraceEvent();
  virtual ~Ext4ExtRemoveSpaceDoneFtraceEvent();

  Ext4ExtRemoveSpaceDoneFtraceEvent(const Ext4ExtRemoveSpaceDoneFtraceEvent& from);
  Ext4ExtRemoveSpaceDoneFtraceEvent(Ext4ExtRemoveSpaceDoneFtraceEvent&& from) noexcept
    : Ext4ExtRemoveSpaceDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRemoveSpaceDoneFtraceEvent& operator=(const Ext4ExtRemoveSpaceDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRemoveSpaceDoneFtraceEvent& operator=(Ext4ExtRemoveSpaceDoneFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtRemoveSpaceDoneFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtRemoveSpaceDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRemoveSpaceDoneFtraceEvent*>(
               &_Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Ext4ExtRemoveSpaceDoneFtraceEvent& a, Ext4ExtRemoveSpaceDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRemoveSpaceDoneFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtRemoveSpaceDoneFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceDoneFtraceEvent>(nullptr);
  }

  Ext4ExtRemoveSpaceDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceDoneFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtRemoveSpaceDoneFtraceEvent& from);
  void MergeFrom(const Ext4ExtRemoveSpaceDoneFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtRemoveSpaceDoneFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kPartialFieldNumber = 6,
    kDepthFieldNumber = 5,
    kEhEntriesFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 end = 4;
  bool has_end() const;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int64 partial = 6;
  bool has_partial() const;
  void clear_partial();
  ::PROTOBUF_NAMESPACE_ID::int64 partial() const;
  void set_partial(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 depth = 5;
  bool has_depth() const;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 eh_entries = 7;
  bool has_eh_entries() const;
  void clear_eh_entries();
  ::PROTOBUF_NAMESPACE_ID::uint32 eh_entries() const;
  void set_eh_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 partial_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eh_entries_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtRmIdxFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRmIdxFtraceEvent) */ {
 public:
  Ext4ExtRmIdxFtraceEvent();
  virtual ~Ext4ExtRmIdxFtraceEvent();

  Ext4ExtRmIdxFtraceEvent(const Ext4ExtRmIdxFtraceEvent& from);
  Ext4ExtRmIdxFtraceEvent(Ext4ExtRmIdxFtraceEvent&& from) noexcept
    : Ext4ExtRmIdxFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRmIdxFtraceEvent& operator=(const Ext4ExtRmIdxFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRmIdxFtraceEvent& operator=(Ext4ExtRmIdxFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtRmIdxFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtRmIdxFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRmIdxFtraceEvent*>(
               &_Ext4ExtRmIdxFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Ext4ExtRmIdxFtraceEvent& a, Ext4ExtRmIdxFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRmIdxFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtRmIdxFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtRmIdxFtraceEvent>(nullptr);
  }

  Ext4ExtRmIdxFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtRmIdxFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtRmIdxFtraceEvent& from);
  void MergeFrom(const Ext4ExtRmIdxFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtRmIdxFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtRmIdxFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRmIdxFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtRmLeafFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRmLeafFtraceEvent) */ {
 public:
  Ext4ExtRmLeafFtraceEvent();
  virtual ~Ext4ExtRmLeafFtraceEvent();

  Ext4ExtRmLeafFtraceEvent(const Ext4ExtRmLeafFtraceEvent& from);
  Ext4ExtRmLeafFtraceEvent(Ext4ExtRmLeafFtraceEvent&& from) noexcept
    : Ext4ExtRmLeafFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRmLeafFtraceEvent& operator=(const Ext4ExtRmLeafFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRmLeafFtraceEvent& operator=(Ext4ExtRmLeafFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtRmLeafFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtRmLeafFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRmLeafFtraceEvent*>(
               &_Ext4ExtRmLeafFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Ext4ExtRmLeafFtraceEvent& a, Ext4ExtRmLeafFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRmLeafFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtRmLeafFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtRmLeafFtraceEvent>(nullptr);
  }

  Ext4ExtRmLeafFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtRmLeafFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtRmLeafFtraceEvent& from);
  void MergeFrom(const Ext4ExtRmLeafFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtRmLeafFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtRmLeafFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPartialFieldNumber = 3,
    kStartFieldNumber = 4,
    kEeLblkFieldNumber = 5,
    kEePblkFieldNumber = 6,
    kEeLenFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 partial = 3;
  bool has_partial() const;
  void clear_partial();
  ::PROTOBUF_NAMESPACE_ID::int64 partial() const;
  void set_partial(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 start = 4;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ee_lblk = 5;
  bool has_ee_lblk() const;
  void clear_ee_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_lblk() const;
  void set_ee_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 ee_pblk = 6;
  bool has_ee_pblk() const;
  void clear_ee_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 ee_pblk() const;
  void set_ee_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ee_len = 7;
  bool has_ee_len() const;
  void clear_ee_len();
  ::PROTOBUF_NAMESPACE_ID::int32 ee_len() const;
  void set_ee_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRmLeafFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 partial_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ee_pblk_;
  ::PROTOBUF_NAMESPACE_ID::int32 ee_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ExtShowExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtShowExtentFtraceEvent) */ {
 public:
  Ext4ExtShowExtentFtraceEvent();
  virtual ~Ext4ExtShowExtentFtraceEvent();

  Ext4ExtShowExtentFtraceEvent(const Ext4ExtShowExtentFtraceEvent& from);
  Ext4ExtShowExtentFtraceEvent(Ext4ExtShowExtentFtraceEvent&& from) noexcept
    : Ext4ExtShowExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtShowExtentFtraceEvent& operator=(const Ext4ExtShowExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtShowExtentFtraceEvent& operator=(Ext4ExtShowExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ExtShowExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ExtShowExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtShowExtentFtraceEvent*>(
               &_Ext4ExtShowExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Ext4ExtShowExtentFtraceEvent& a, Ext4ExtShowExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtShowExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ExtShowExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ExtShowExtentFtraceEvent>(nullptr);
  }

  Ext4ExtShowExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ExtShowExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ExtShowExtentFtraceEvent& from);
  void MergeFrom(const Ext4ExtShowExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ExtShowExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ExtShowExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
    kLblkFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtShowExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4FallocateEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FallocateEnterFtraceEvent) */ {
 public:
  Ext4FallocateEnterFtraceEvent();
  virtual ~Ext4FallocateEnterFtraceEvent();

  Ext4FallocateEnterFtraceEvent(const Ext4FallocateEnterFtraceEvent& from);
  Ext4FallocateEnterFtraceEvent(Ext4FallocateEnterFtraceEvent&& from) noexcept
    : Ext4FallocateEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FallocateEnterFtraceEvent& operator=(const Ext4FallocateEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FallocateEnterFtraceEvent& operator=(Ext4FallocateEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4FallocateEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4FallocateEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FallocateEnterFtraceEvent*>(
               &_Ext4FallocateEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Ext4FallocateEnterFtraceEvent& a, Ext4FallocateEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FallocateEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4FallocateEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4FallocateEnterFtraceEvent>(nullptr);
  }

  Ext4FallocateEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4FallocateEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4FallocateEnterFtraceEvent& from);
  void MergeFrom(const Ext4FallocateEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4FallocateEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4FallocateEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kPosFieldNumber = 6,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 pos = 6;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FallocateEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4FallocateExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FallocateExitFtraceEvent) */ {
 public:
  Ext4FallocateExitFtraceEvent();
  virtual ~Ext4FallocateExitFtraceEvent();

  Ext4FallocateExitFtraceEvent(const Ext4FallocateExitFtraceEvent& from);
  Ext4FallocateExitFtraceEvent(Ext4FallocateExitFtraceEvent&& from) noexcept
    : Ext4FallocateExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FallocateExitFtraceEvent& operator=(const Ext4FallocateExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FallocateExitFtraceEvent& operator=(Ext4FallocateExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4FallocateExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4FallocateExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FallocateExitFtraceEvent*>(
               &_Ext4FallocateExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Ext4FallocateExitFtraceEvent& a, Ext4FallocateExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FallocateExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4FallocateExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4FallocateExitFtraceEvent>(nullptr);
  }

  Ext4FallocateExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4FallocateExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4FallocateExitFtraceEvent& from);
  void MergeFrom(const Ext4FallocateExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4FallocateExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4FallocateExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 blocks = 4;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 5;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FallocateExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4FindDelallocRangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FindDelallocRangeFtraceEvent) */ {
 public:
  Ext4FindDelallocRangeFtraceEvent();
  virtual ~Ext4FindDelallocRangeFtraceEvent();

  Ext4FindDelallocRangeFtraceEvent(const Ext4FindDelallocRangeFtraceEvent& from);
  Ext4FindDelallocRangeFtraceEvent(Ext4FindDelallocRangeFtraceEvent&& from) noexcept
    : Ext4FindDelallocRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FindDelallocRangeFtraceEvent& operator=(const Ext4FindDelallocRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FindDelallocRangeFtraceEvent& operator=(Ext4FindDelallocRangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4FindDelallocRangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4FindDelallocRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FindDelallocRangeFtraceEvent*>(
               &_Ext4FindDelallocRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Ext4FindDelallocRangeFtraceEvent& a, Ext4FindDelallocRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FindDelallocRangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4FindDelallocRangeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4FindDelallocRangeFtraceEvent>(nullptr);
  }

  Ext4FindDelallocRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4FindDelallocRangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4FindDelallocRangeFtraceEvent& from);
  void MergeFrom(const Ext4FindDelallocRangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4FindDelallocRangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4FindDelallocRangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kReverseFieldNumber = 5,
    kFoundFieldNumber = 6,
    kFoundBlkFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 from = 3;
  bool has_from() const;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 to = 4;
  bool has_to() const;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 reverse = 5;
  bool has_reverse() const;
  void clear_reverse();
  ::PROTOBUF_NAMESPACE_ID::int32 reverse() const;
  void set_reverse(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 found = 6;
  bool has_found() const;
  void clear_found();
  ::PROTOBUF_NAMESPACE_ID::int32 found() const;
  void set_found(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 found_blk = 7;
  bool has_found_blk() const;
  void clear_found_blk();
  ::PROTOBUF_NAMESPACE_ID::uint32 found_blk() const;
  void set_found_blk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FindDelallocRangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  ::PROTOBUF_NAMESPACE_ID::int32 reverse_;
  ::PROTOBUF_NAMESPACE_ID::int32 found_;
  ::PROTOBUF_NAMESPACE_ID::uint32 found_blk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ForgetFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ForgetFtraceEvent) */ {
 public:
  Ext4ForgetFtraceEvent();
  virtual ~Ext4ForgetFtraceEvent();

  Ext4ForgetFtraceEvent(const Ext4ForgetFtraceEvent& from);
  Ext4ForgetFtraceEvent(Ext4ForgetFtraceEvent&& from) noexcept
    : Ext4ForgetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ForgetFtraceEvent& operator=(const Ext4ForgetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ForgetFtraceEvent& operator=(Ext4ForgetFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ForgetFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ForgetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ForgetFtraceEvent*>(
               &_Ext4ForgetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Ext4ForgetFtraceEvent& a, Ext4ForgetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ForgetFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ForgetFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ForgetFtraceEvent>(nullptr);
  }

  Ext4ForgetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ForgetFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ForgetFtraceEvent& from);
  void MergeFrom(const Ext4ForgetFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ForgetFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ForgetFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kIsMetadataFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 is_metadata = 4;
  bool has_is_metadata() const;
  void clear_is_metadata();
  ::PROTOBUF_NAMESPACE_ID::int32 is_metadata() const;
  void set_is_metadata(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ForgetFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4FreeBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FreeBlocksFtraceEvent) */ {
 public:
  Ext4FreeBlocksFtraceEvent();
  virtual ~Ext4FreeBlocksFtraceEvent();

  Ext4FreeBlocksFtraceEvent(const Ext4FreeBlocksFtraceEvent& from);
  Ext4FreeBlocksFtraceEvent(Ext4FreeBlocksFtraceEvent&& from) noexcept
    : Ext4FreeBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FreeBlocksFtraceEvent& operator=(const Ext4FreeBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FreeBlocksFtraceEvent& operator=(Ext4FreeBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4FreeBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4FreeBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FreeBlocksFtraceEvent*>(
               &_Ext4FreeBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Ext4FreeBlocksFtraceEvent& a, Ext4FreeBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FreeBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4FreeBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4FreeBlocksFtraceEvent>(nullptr);
  }

  Ext4FreeBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4FreeBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4FreeBlocksFtraceEvent& from);
  void MergeFrom(const Ext4FreeBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4FreeBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4FreeBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kCountFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 count = 4;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FreeBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4FreeInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FreeInodeFtraceEvent) */ {
 public:
  Ext4FreeInodeFtraceEvent();
  virtual ~Ext4FreeInodeFtraceEvent();

  Ext4FreeInodeFtraceEvent(const Ext4FreeInodeFtraceEvent& from);
  Ext4FreeInodeFtraceEvent(Ext4FreeInodeFtraceEvent&& from) noexcept
    : Ext4FreeInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FreeInodeFtraceEvent& operator=(const Ext4FreeInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FreeInodeFtraceEvent& operator=(Ext4FreeInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4FreeInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4FreeInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FreeInodeFtraceEvent*>(
               &_Ext4FreeInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Ext4FreeInodeFtraceEvent& a, Ext4FreeInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FreeInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4FreeInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4FreeInodeFtraceEvent>(nullptr);
  }

  Ext4FreeInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4FreeInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4FreeInodeFtraceEvent& from);
  void MergeFrom(const Ext4FreeInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4FreeInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4FreeInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kUidFieldNumber = 3,
    kGidFieldNumber = 4,
    kBlocksFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 gid = 4;
  bool has_gid() const;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 blocks = 5;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FreeInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4GetImpliedClusterAllocExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent) */ {
 public:
  Ext4GetImpliedClusterAllocExitFtraceEvent();
  virtual ~Ext4GetImpliedClusterAllocExitFtraceEvent();

  Ext4GetImpliedClusterAllocExitFtraceEvent(const Ext4GetImpliedClusterAllocExitFtraceEvent& from);
  Ext4GetImpliedClusterAllocExitFtraceEvent(Ext4GetImpliedClusterAllocExitFtraceEvent&& from) noexcept
    : Ext4GetImpliedClusterAllocExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4GetImpliedClusterAllocExitFtraceEvent& operator=(const Ext4GetImpliedClusterAllocExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4GetImpliedClusterAllocExitFtraceEvent& operator=(Ext4GetImpliedClusterAllocExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4GetImpliedClusterAllocExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4GetImpliedClusterAllocExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4GetImpliedClusterAllocExitFtraceEvent*>(
               &_Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Ext4GetImpliedClusterAllocExitFtraceEvent& a, Ext4GetImpliedClusterAllocExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4GetImpliedClusterAllocExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4GetImpliedClusterAllocExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4GetImpliedClusterAllocExitFtraceEvent>(nullptr);
  }

  Ext4GetImpliedClusterAllocExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4GetImpliedClusterAllocExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4GetImpliedClusterAllocExitFtraceEvent& from);
  void MergeFrom(const Ext4GetImpliedClusterAllocExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4GetImpliedClusterAllocExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kLblkFieldNumber = 3,
    kPblkFieldNumber = 4,
    kLenFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flags = 2;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4GetReservedClusterAllocFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent) */ {
 public:
  Ext4GetReservedClusterAllocFtraceEvent();
  virtual ~Ext4GetReservedClusterAllocFtraceEvent();

  Ext4GetReservedClusterAllocFtraceEvent(const Ext4GetReservedClusterAllocFtraceEvent& from);
  Ext4GetReservedClusterAllocFtraceEvent(Ext4GetReservedClusterAllocFtraceEvent&& from) noexcept
    : Ext4GetReservedClusterAllocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4GetReservedClusterAllocFtraceEvent& operator=(const Ext4GetReservedClusterAllocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4GetReservedClusterAllocFtraceEvent& operator=(Ext4GetReservedClusterAllocFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4GetReservedClusterAllocFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4GetReservedClusterAllocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4GetReservedClusterAllocFtraceEvent*>(
               &_Ext4GetReservedClusterAllocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Ext4GetReservedClusterAllocFtraceEvent& a, Ext4GetReservedClusterAllocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4GetReservedClusterAllocFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4GetReservedClusterAllocFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4GetReservedClusterAllocFtraceEvent>(nullptr);
  }

  Ext4GetReservedClusterAllocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4GetReservedClusterAllocFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4GetReservedClusterAllocFtraceEvent& from);
  void MergeFrom(const Ext4GetReservedClusterAllocFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4GetReservedClusterAllocFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4IndMapBlocksEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent) */ {
 public:
  Ext4IndMapBlocksEnterFtraceEvent();
  virtual ~Ext4IndMapBlocksEnterFtraceEvent();

  Ext4IndMapBlocksEnterFtraceEvent(const Ext4IndMapBlocksEnterFtraceEvent& from);
  Ext4IndMapBlocksEnterFtraceEvent(Ext4IndMapBlocksEnterFtraceEvent&& from) noexcept
    : Ext4IndMapBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4IndMapBlocksEnterFtraceEvent& operator=(const Ext4IndMapBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4IndMapBlocksEnterFtraceEvent& operator=(Ext4IndMapBlocksEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4IndMapBlocksEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4IndMapBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4IndMapBlocksEnterFtraceEvent*>(
               &_Ext4IndMapBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Ext4IndMapBlocksEnterFtraceEvent& a, Ext4IndMapBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4IndMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4IndMapBlocksEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4IndMapBlocksEnterFtraceEvent>(nullptr);
  }

  Ext4IndMapBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4IndMapBlocksEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4IndMapBlocksEnterFtraceEvent& from);
  void MergeFrom(const Ext4IndMapBlocksEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4IndMapBlocksEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4IndMapBlocksExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent) */ {
 public:
  Ext4IndMapBlocksExitFtraceEvent();
  virtual ~Ext4IndMapBlocksExitFtraceEvent();

  Ext4IndMapBlocksExitFtraceEvent(const Ext4IndMapBlocksExitFtraceEvent& from);
  Ext4IndMapBlocksExitFtraceEvent(Ext4IndMapBlocksExitFtraceEvent&& from) noexcept
    : Ext4IndMapBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4IndMapBlocksExitFtraceEvent& operator=(const Ext4IndMapBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4IndMapBlocksExitFtraceEvent& operator=(Ext4IndMapBlocksExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4IndMapBlocksExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4IndMapBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4IndMapBlocksExitFtraceEvent*>(
               &_Ext4IndMapBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Ext4IndMapBlocksExitFtraceEvent& a, Ext4IndMapBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4IndMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4IndMapBlocksExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4IndMapBlocksExitFtraceEvent>(nullptr);
  }

  Ext4IndMapBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4IndMapBlocksExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4IndMapBlocksExitFtraceEvent& from);
  void MergeFrom(const Ext4IndMapBlocksExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4IndMapBlocksExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4IndMapBlocksExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 4,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kMflagsFieldNumber = 7,
    kRetFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk() const;
  void set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lblk = 5;
  bool has_lblk() const;
  void clear_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk() const;
  void set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mflags = 7;
  bool has_mflags() const;
  void clear_mflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 mflags() const;
  void set_mflags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mflags_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4InsertRangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4InsertRangeFtraceEvent) */ {
 public:
  Ext4InsertRangeFtraceEvent();
  virtual ~Ext4InsertRangeFtraceEvent();

  Ext4InsertRangeFtraceEvent(const Ext4InsertRangeFtraceEvent& from);
  Ext4InsertRangeFtraceEvent(Ext4InsertRangeFtraceEvent&& from) noexcept
    : Ext4InsertRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4InsertRangeFtraceEvent& operator=(const Ext4InsertRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4InsertRangeFtraceEvent& operator=(Ext4InsertRangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4InsertRangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4InsertRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4InsertRangeFtraceEvent*>(
               &_Ext4InsertRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Ext4InsertRangeFtraceEvent& a, Ext4InsertRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4InsertRangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4InsertRangeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4InsertRangeFtraceEvent>(nullptr);
  }

  Ext4InsertRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4InsertRangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4InsertRangeFtraceEvent& from);
  void MergeFrom(const Ext4InsertRangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4InsertRangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4InsertRangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4InsertRangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4InvalidatepageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4InvalidatepageFtraceEvent) */ {
 public:
  Ext4InvalidatepageFtraceEvent();
  virtual ~Ext4InvalidatepageFtraceEvent();

  Ext4InvalidatepageFtraceEvent(const Ext4InvalidatepageFtraceEvent& from);
  Ext4InvalidatepageFtraceEvent(Ext4InvalidatepageFtraceEvent&& from) noexcept
    : Ext4InvalidatepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4InvalidatepageFtraceEvent& operator=(const Ext4InvalidatepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4InvalidatepageFtraceEvent& operator=(Ext4InvalidatepageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4InvalidatepageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4InvalidatepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4InvalidatepageFtraceEvent*>(
               &_Ext4InvalidatepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Ext4InvalidatepageFtraceEvent& a, Ext4InvalidatepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4InvalidatepageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4InvalidatepageFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4InvalidatepageFtraceEvent>(nullptr);
  }

  Ext4InvalidatepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4InvalidatepageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4InvalidatepageFtraceEvent& from);
  void MergeFrom(const Ext4InvalidatepageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4InvalidatepageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4InvalidatepageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 offset = 4;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 length = 5;
  bool has_length() const;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4InvalidatepageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4JournalStartFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalStartFtraceEvent) */ {
 public:
  Ext4JournalStartFtraceEvent();
  virtual ~Ext4JournalStartFtraceEvent();

  Ext4JournalStartFtraceEvent(const Ext4JournalStartFtraceEvent& from);
  Ext4JournalStartFtraceEvent(Ext4JournalStartFtraceEvent&& from) noexcept
    : Ext4JournalStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalStartFtraceEvent& operator=(const Ext4JournalStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalStartFtraceEvent& operator=(Ext4JournalStartFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4JournalStartFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4JournalStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalStartFtraceEvent*>(
               &_Ext4JournalStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Ext4JournalStartFtraceEvent& a, Ext4JournalStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalStartFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4JournalStartFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4JournalStartFtraceEvent>(nullptr);
  }

  Ext4JournalStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4JournalStartFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4JournalStartFtraceEvent& from);
  void MergeFrom(const Ext4JournalStartFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4JournalStartFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4JournalStartFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlocksFieldNumber = 3,
    kRsvBlocksFieldNumber = 4,
    kNblocksFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ip = 2;
  bool has_ip() const;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 blocks = 3;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rsv_blocks = 4;
  bool has_rsv_blocks() const;
  void clear_rsv_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 rsv_blocks() const;
  void set_rsv_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 nblocks = 5;
  bool has_nblocks() const;
  void clear_nblocks();
  ::PROTOBUF_NAMESPACE_ID::int32 nblocks() const;
  void set_nblocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalStartFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 rsv_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 nblocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4JournalStartReservedFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalStartReservedFtraceEvent) */ {
 public:
  Ext4JournalStartReservedFtraceEvent();
  virtual ~Ext4JournalStartReservedFtraceEvent();

  Ext4JournalStartReservedFtraceEvent(const Ext4JournalStartReservedFtraceEvent& from);
  Ext4JournalStartReservedFtraceEvent(Ext4JournalStartReservedFtraceEvent&& from) noexcept
    : Ext4JournalStartReservedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalStartReservedFtraceEvent& operator=(const Ext4JournalStartReservedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalStartReservedFtraceEvent& operator=(Ext4JournalStartReservedFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4JournalStartReservedFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4JournalStartReservedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalStartReservedFtraceEvent*>(
               &_Ext4JournalStartReservedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Ext4JournalStartReservedFtraceEvent& a, Ext4JournalStartReservedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalStartReservedFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4JournalStartReservedFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4JournalStartReservedFtraceEvent>(nullptr);
  }

  Ext4JournalStartReservedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4JournalStartReservedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4JournalStartReservedFtraceEvent& from);
  void MergeFrom(const Ext4JournalStartReservedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4JournalStartReservedFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4JournalStartReservedFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ip = 2;
  bool has_ip() const;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 blocks = 3;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalStartReservedFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4JournalledInvalidatepageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent) */ {
 public:
  Ext4JournalledInvalidatepageFtraceEvent();
  virtual ~Ext4JournalledInvalidatepageFtraceEvent();

  Ext4JournalledInvalidatepageFtraceEvent(const Ext4JournalledInvalidatepageFtraceEvent& from);
  Ext4JournalledInvalidatepageFtraceEvent(Ext4JournalledInvalidatepageFtraceEvent&& from) noexcept
    : Ext4JournalledInvalidatepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalledInvalidatepageFtraceEvent& operator=(const Ext4JournalledInvalidatepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalledInvalidatepageFtraceEvent& operator=(Ext4JournalledInvalidatepageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4JournalledInvalidatepageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4JournalledInvalidatepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalledInvalidatepageFtraceEvent*>(
               &_Ext4JournalledInvalidatepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Ext4JournalledInvalidatepageFtraceEvent& a, Ext4JournalledInvalidatepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalledInvalidatepageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4JournalledInvalidatepageFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4JournalledInvalidatepageFtraceEvent>(nullptr);
  }

  Ext4JournalledInvalidatepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4JournalledInvalidatepageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4JournalledInvalidatepageFtraceEvent& from);
  void MergeFrom(const Ext4JournalledInvalidatepageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4JournalledInvalidatepageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 offset = 4;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 length = 5;
  bool has_length() const;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4JournalledWriteEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalledWriteEndFtraceEvent) */ {
 public:
  Ext4JournalledWriteEndFtraceEvent();
  virtual ~Ext4JournalledWriteEndFtraceEvent();

  Ext4JournalledWriteEndFtraceEvent(const Ext4JournalledWriteEndFtraceEvent& from);
  Ext4JournalledWriteEndFtraceEvent(Ext4JournalledWriteEndFtraceEvent&& from) noexcept
    : Ext4JournalledWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalledWriteEndFtraceEvent& operator=(const Ext4JournalledWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalledWriteEndFtraceEvent& operator=(Ext4JournalledWriteEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4JournalledWriteEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4JournalledWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalledWriteEndFtraceEvent*>(
               &_Ext4JournalledWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Ext4JournalledWriteEndFtraceEvent& a, Ext4JournalledWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalledWriteEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4JournalledWriteEndFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4JournalledWriteEndFtraceEvent>(nullptr);
  }

  Ext4JournalledWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4JournalledWriteEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4JournalledWriteEndFtraceEvent& from);
  void MergeFrom(const Ext4JournalledWriteEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4JournalledWriteEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4JournalledWriteEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied();
  ::PROTOBUF_NAMESPACE_ID::uint32 copied() const;
  void set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalledWriteEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copied_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4LoadInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4LoadInodeFtraceEvent) */ {
 public:
  Ext4LoadInodeFtraceEvent();
  virtual ~Ext4LoadInodeFtraceEvent();

  Ext4LoadInodeFtraceEvent(const Ext4LoadInodeFtraceEvent& from);
  Ext4LoadInodeFtraceEvent(Ext4LoadInodeFtraceEvent&& from) noexcept
    : Ext4LoadInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4LoadInodeFtraceEvent& operator=(const Ext4LoadInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4LoadInodeFtraceEvent& operator=(Ext4LoadInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4LoadInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4LoadInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4LoadInodeFtraceEvent*>(
               &_Ext4LoadInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Ext4LoadInodeFtraceEvent& a, Ext4LoadInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4LoadInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4LoadInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4LoadInodeFtraceEvent>(nullptr);
  }

  Ext4LoadInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4LoadInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4LoadInodeFtraceEvent& from);
  void MergeFrom(const Ext4LoadInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4LoadInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4LoadInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4LoadInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4LoadInodeBitmapFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent) */ {
 public:
  Ext4LoadInodeBitmapFtraceEvent();
  virtual ~Ext4LoadInodeBitmapFtraceEvent();

  Ext4LoadInodeBitmapFtraceEvent(const Ext4LoadInodeBitmapFtraceEvent& from);
  Ext4LoadInodeBitmapFtraceEvent(Ext4LoadInodeBitmapFtraceEvent&& from) noexcept
    : Ext4LoadInodeBitmapFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4LoadInodeBitmapFtraceEvent& operator=(const Ext4LoadInodeBitmapFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4LoadInodeBitmapFtraceEvent& operator=(Ext4LoadInodeBitmapFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4LoadInodeBitmapFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4LoadInodeBitmapFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4LoadInodeBitmapFtraceEvent*>(
               &_Ext4LoadInodeBitmapFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Ext4LoadInodeBitmapFtraceEvent& a, Ext4LoadInodeBitmapFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4LoadInodeBitmapFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4LoadInodeBitmapFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4LoadInodeBitmapFtraceEvent>(nullptr);
  }

  Ext4LoadInodeBitmapFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4LoadInodeBitmapFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4LoadInodeBitmapFtraceEvent& from);
  void MergeFrom(const Ext4LoadInodeBitmapFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4LoadInodeBitmapFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4LoadInodeBitmapFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MarkInodeDirtyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent) */ {
 public:
  Ext4MarkInodeDirtyFtraceEvent();
  virtual ~Ext4MarkInodeDirtyFtraceEvent();

  Ext4MarkInodeDirtyFtraceEvent(const Ext4MarkInodeDirtyFtraceEvent& from);
  Ext4MarkInodeDirtyFtraceEvent(Ext4MarkInodeDirtyFtraceEvent&& from) noexcept
    : Ext4MarkInodeDirtyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MarkInodeDirtyFtraceEvent& operator=(const Ext4MarkInodeDirtyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MarkInodeDirtyFtraceEvent& operator=(Ext4MarkInodeDirtyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MarkInodeDirtyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MarkInodeDirtyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MarkInodeDirtyFtraceEvent*>(
               &_Ext4MarkInodeDirtyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Ext4MarkInodeDirtyFtraceEvent& a, Ext4MarkInodeDirtyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MarkInodeDirtyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MarkInodeDirtyFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MarkInodeDirtyFtraceEvent>(nullptr);
  }

  Ext4MarkInodeDirtyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MarkInodeDirtyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MarkInodeDirtyFtraceEvent& from);
  void MergeFrom(const Ext4MarkInodeDirtyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MarkInodeDirtyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MarkInodeDirtyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIpFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ip = 3;
  bool has_ip() const;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ip_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbBitmapLoadFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbBitmapLoadFtraceEvent) */ {
 public:
  Ext4MbBitmapLoadFtraceEvent();
  virtual ~Ext4MbBitmapLoadFtraceEvent();

  Ext4MbBitmapLoadFtraceEvent(const Ext4MbBitmapLoadFtraceEvent& from);
  Ext4MbBitmapLoadFtraceEvent(Ext4MbBitmapLoadFtraceEvent&& from) noexcept
    : Ext4MbBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbBitmapLoadFtraceEvent& operator=(const Ext4MbBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbBitmapLoadFtraceEvent& operator=(Ext4MbBitmapLoadFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbBitmapLoadFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbBitmapLoadFtraceEvent*>(
               &_Ext4MbBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Ext4MbBitmapLoadFtraceEvent& a, Ext4MbBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbBitmapLoadFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbBitmapLoadFtraceEvent>(nullptr);
  }

  Ext4MbBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbBitmapLoadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbBitmapLoadFtraceEvent& from);
  void MergeFrom(const Ext4MbBitmapLoadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbBitmapLoadFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbBitmapLoadFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbBitmapLoadFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbBuddyBitmapLoadFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent) */ {
 public:
  Ext4MbBuddyBitmapLoadFtraceEvent();
  virtual ~Ext4MbBuddyBitmapLoadFtraceEvent();

  Ext4MbBuddyBitmapLoadFtraceEvent(const Ext4MbBuddyBitmapLoadFtraceEvent& from);
  Ext4MbBuddyBitmapLoadFtraceEvent(Ext4MbBuddyBitmapLoadFtraceEvent&& from) noexcept
    : Ext4MbBuddyBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbBuddyBitmapLoadFtraceEvent& operator=(const Ext4MbBuddyBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbBuddyBitmapLoadFtraceEvent& operator=(Ext4MbBuddyBitmapLoadFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbBuddyBitmapLoadFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbBuddyBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbBuddyBitmapLoadFtraceEvent*>(
               &_Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Ext4MbBuddyBitmapLoadFtraceEvent& a, Ext4MbBuddyBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbBuddyBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbBuddyBitmapLoadFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbBuddyBitmapLoadFtraceEvent>(nullptr);
  }

  Ext4MbBuddyBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbBuddyBitmapLoadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbBuddyBitmapLoadFtraceEvent& from);
  void MergeFrom(const Ext4MbBuddyBitmapLoadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbBuddyBitmapLoadFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbDiscardPreallocationsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent) */ {
 public:
  Ext4MbDiscardPreallocationsFtraceEvent();
  virtual ~Ext4MbDiscardPreallocationsFtraceEvent();

  Ext4MbDiscardPreallocationsFtraceEvent(const Ext4MbDiscardPreallocationsFtraceEvent& from);
  Ext4MbDiscardPreallocationsFtraceEvent(Ext4MbDiscardPreallocationsFtraceEvent&& from) noexcept
    : Ext4MbDiscardPreallocationsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbDiscardPreallocationsFtraceEvent& operator=(const Ext4MbDiscardPreallocationsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbDiscardPreallocationsFtraceEvent& operator=(Ext4MbDiscardPreallocationsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbDiscardPreallocationsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbDiscardPreallocationsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbDiscardPreallocationsFtraceEvent*>(
               &_Ext4MbDiscardPreallocationsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Ext4MbDiscardPreallocationsFtraceEvent& a, Ext4MbDiscardPreallocationsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbDiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbDiscardPreallocationsFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbDiscardPreallocationsFtraceEvent>(nullptr);
  }

  Ext4MbDiscardPreallocationsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbDiscardPreallocationsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbDiscardPreallocationsFtraceEvent& from);
  void MergeFrom(const Ext4MbDiscardPreallocationsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbDiscardPreallocationsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNeededFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 needed = 2;
  bool has_needed() const;
  void clear_needed();
  ::PROTOBUF_NAMESPACE_ID::int32 needed() const;
  void set_needed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 needed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbNewGroupPaFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbNewGroupPaFtraceEvent) */ {
 public:
  Ext4MbNewGroupPaFtraceEvent();
  virtual ~Ext4MbNewGroupPaFtraceEvent();

  Ext4MbNewGroupPaFtraceEvent(const Ext4MbNewGroupPaFtraceEvent& from);
  Ext4MbNewGroupPaFtraceEvent(Ext4MbNewGroupPaFtraceEvent&& from) noexcept
    : Ext4MbNewGroupPaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbNewGroupPaFtraceEvent& operator=(const Ext4MbNewGroupPaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbNewGroupPaFtraceEvent& operator=(Ext4MbNewGroupPaFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbNewGroupPaFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbNewGroupPaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbNewGroupPaFtraceEvent*>(
               &_Ext4MbNewGroupPaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Ext4MbNewGroupPaFtraceEvent& a, Ext4MbNewGroupPaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbNewGroupPaFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbNewGroupPaFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbNewGroupPaFtraceEvent>(nullptr);
  }

  Ext4MbNewGroupPaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbNewGroupPaFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbNewGroupPaFtraceEvent& from);
  void MergeFrom(const Ext4MbNewGroupPaFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbNewGroupPaFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbNewGroupPaFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPaPstartFieldNumber = 3,
    kPaLstartFieldNumber = 4,
    kPaLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pa_pstart = 3;
  bool has_pa_pstart() const;
  void clear_pa_pstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart() const;
  void set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pa_lstart = 4;
  bool has_pa_lstart() const;
  void clear_pa_lstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_lstart() const;
  void set_pa_lstart(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 pa_len = 5;
  bool has_pa_len() const;
  void clear_pa_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len() const;
  void set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbNewGroupPaFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_lstart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbNewInodePaFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbNewInodePaFtraceEvent) */ {
 public:
  Ext4MbNewInodePaFtraceEvent();
  virtual ~Ext4MbNewInodePaFtraceEvent();

  Ext4MbNewInodePaFtraceEvent(const Ext4MbNewInodePaFtraceEvent& from);
  Ext4MbNewInodePaFtraceEvent(Ext4MbNewInodePaFtraceEvent&& from) noexcept
    : Ext4MbNewInodePaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbNewInodePaFtraceEvent& operator=(const Ext4MbNewInodePaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbNewInodePaFtraceEvent& operator=(Ext4MbNewInodePaFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbNewInodePaFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbNewInodePaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbNewInodePaFtraceEvent*>(
               &_Ext4MbNewInodePaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Ext4MbNewInodePaFtraceEvent& a, Ext4MbNewInodePaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbNewInodePaFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbNewInodePaFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbNewInodePaFtraceEvent>(nullptr);
  }

  Ext4MbNewInodePaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbNewInodePaFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbNewInodePaFtraceEvent& from);
  void MergeFrom(const Ext4MbNewInodePaFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbNewInodePaFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbNewInodePaFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPaPstartFieldNumber = 3,
    kPaLstartFieldNumber = 4,
    kPaLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pa_pstart = 3;
  bool has_pa_pstart() const;
  void clear_pa_pstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart() const;
  void set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pa_lstart = 4;
  bool has_pa_lstart() const;
  void clear_pa_lstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_lstart() const;
  void set_pa_lstart(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 pa_len = 5;
  bool has_pa_len() const;
  void clear_pa_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len() const;
  void set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbNewInodePaFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_lstart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbReleaseGroupPaFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent) */ {
 public:
  Ext4MbReleaseGroupPaFtraceEvent();
  virtual ~Ext4MbReleaseGroupPaFtraceEvent();

  Ext4MbReleaseGroupPaFtraceEvent(const Ext4MbReleaseGroupPaFtraceEvent& from);
  Ext4MbReleaseGroupPaFtraceEvent(Ext4MbReleaseGroupPaFtraceEvent&& from) noexcept
    : Ext4MbReleaseGroupPaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbReleaseGroupPaFtraceEvent& operator=(const Ext4MbReleaseGroupPaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbReleaseGroupPaFtraceEvent& operator=(Ext4MbReleaseGroupPaFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbReleaseGroupPaFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbReleaseGroupPaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbReleaseGroupPaFtraceEvent*>(
               &_Ext4MbReleaseGroupPaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Ext4MbReleaseGroupPaFtraceEvent& a, Ext4MbReleaseGroupPaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbReleaseGroupPaFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbReleaseGroupPaFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbReleaseGroupPaFtraceEvent>(nullptr);
  }

  Ext4MbReleaseGroupPaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbReleaseGroupPaFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbReleaseGroupPaFtraceEvent& from);
  void MergeFrom(const Ext4MbReleaseGroupPaFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbReleaseGroupPaFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kPaPstartFieldNumber = 2,
    kPaLenFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pa_pstart = 2;
  bool has_pa_pstart() const;
  void clear_pa_pstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart() const;
  void set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 pa_len = 3;
  bool has_pa_len() const;
  void clear_pa_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len() const;
  void set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pa_pstart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pa_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MbReleaseInodePaFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent) */ {
 public:
  Ext4MbReleaseInodePaFtraceEvent();
  virtual ~Ext4MbReleaseInodePaFtraceEvent();

  Ext4MbReleaseInodePaFtraceEvent(const Ext4MbReleaseInodePaFtraceEvent& from);
  Ext4MbReleaseInodePaFtraceEvent(Ext4MbReleaseInodePaFtraceEvent&& from) noexcept
    : Ext4MbReleaseInodePaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbReleaseInodePaFtraceEvent& operator=(const Ext4MbReleaseInodePaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbReleaseInodePaFtraceEvent& operator=(Ext4MbReleaseInodePaFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MbReleaseInodePaFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MbReleaseInodePaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbReleaseInodePaFtraceEvent*>(
               &_Ext4MbReleaseInodePaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Ext4MbReleaseInodePaFtraceEvent& a, Ext4MbReleaseInodePaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbReleaseInodePaFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MbReleaseInodePaFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MbReleaseInodePaFtraceEvent>(nullptr);
  }

  Ext4MbReleaseInodePaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MbReleaseInodePaFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MbReleaseInodePaFtraceEvent& from);
  void MergeFrom(const Ext4MbReleaseInodePaFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MbReleaseInodePaFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MbReleaseInodePaFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MballocAllocFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocAllocFtraceEvent) */ {
 public:
  Ext4MballocAllocFtraceEvent();
  virtual ~Ext4MballocAllocFtraceEvent();

  Ext4MballocAllocFtraceEvent(const Ext4MballocAllocFtraceEvent& from);
  Ext4MballocAllocFtraceEvent(Ext4MballocAllocFtraceEvent&& from) noexcept
    : Ext4MballocAllocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocAllocFtraceEvent& operator=(const Ext4MballocAllocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocAllocFtraceEvent& operator=(Ext4MballocAllocFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MballocAllocFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MballocAllocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocAllocFtraceEvent*>(
               &_Ext4MballocAllocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Ext4MballocAllocFtraceEvent& a, Ext4MballocAllocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocAllocFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MballocAllocFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MballocAllocFtraceEvent>(nullptr);
  }

  Ext4MballocAllocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MballocAllocFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MballocAllocFtraceEvent& from);
  void MergeFrom(const Ext4MballocAllocFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MballocAllocFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MballocAllocFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigLogicalFieldNumber = 3,
    kOrigStartFieldNumber = 4,
    kOrigGroupFieldNumber = 5,
    kOrigLenFieldNumber = 6,
    kGoalLogicalFieldNumber = 7,
    kGoalStartFieldNumber = 8,
    kGoalGroupFieldNumber = 9,
    kGoalLenFieldNumber = 10,
    kResultLogicalFieldNumber = 11,
    kResultStartFieldNumber = 12,
    kResultGroupFieldNumber = 13,
    kResultLenFieldNumber = 14,
    kFoundFieldNumber = 15,
    kGroupsFieldNumber = 16,
    kBuddyFieldNumber = 17,
    kFlagsFieldNumber = 18,
    kTailFieldNumber = 19,
    kCrFieldNumber = 20,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 orig_logical = 3;
  bool has_orig_logical() const;
  void clear_orig_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_logical() const;
  void set_orig_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 orig_start = 4;
  bool has_orig_start() const;
  void clear_orig_start();
  ::PROTOBUF_NAMESPACE_ID::int32 orig_start() const;
  void set_orig_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 orig_group = 5;
  bool has_orig_group() const;
  void clear_orig_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_group() const;
  void set_orig_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 orig_len = 6;
  bool has_orig_len() const;
  void clear_orig_len();
  ::PROTOBUF_NAMESPACE_ID::int32 orig_len() const;
  void set_orig_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 goal_logical = 7;
  bool has_goal_logical() const;
  void clear_goal_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 goal_logical() const;
  void set_goal_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 goal_start = 8;
  bool has_goal_start() const;
  void clear_goal_start();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_start() const;
  void set_goal_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 goal_group = 9;
  bool has_goal_group() const;
  void clear_goal_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 goal_group() const;
  void set_goal_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 goal_len = 10;
  bool has_goal_len() const;
  void clear_goal_len();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_len() const;
  void set_goal_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_logical = 11;
  bool has_result_logical() const;
  void clear_result_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_logical() const;
  void set_result_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_start = 12;
  bool has_result_start() const;
  void clear_result_start();
  ::PROTOBUF_NAMESPACE_ID::int32 result_start() const;
  void set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_group = 13;
  bool has_result_group() const;
  void clear_result_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group() const;
  void set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_len = 14;
  bool has_result_len() const;
  void clear_result_len();
  ::PROTOBUF_NAMESPACE_ID::int32 result_len() const;
  void set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 found = 15;
  bool has_found() const;
  void clear_found();
  ::PROTOBUF_NAMESPACE_ID::uint32 found() const;
  void set_found(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 groups = 16;
  bool has_groups() const;
  void clear_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 groups() const;
  void set_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 buddy = 17;
  bool has_buddy() const;
  void clear_buddy();
  ::PROTOBUF_NAMESPACE_ID::uint32 buddy() const;
  void set_buddy(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 18;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tail = 19;
  bool has_tail() const;
  void clear_tail();
  ::PROTOBUF_NAMESPACE_ID::uint32 tail() const;
  void set_tail(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 cr = 20;
  bool has_cr() const;
  void clear_cr();
  ::PROTOBUF_NAMESPACE_ID::uint32 cr() const;
  void set_cr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocAllocFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_logical_;
  ::PROTOBUF_NAMESPACE_ID::int32 orig_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 orig_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goal_logical_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goal_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_logical_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 found_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buddy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cr_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MballocDiscardFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocDiscardFtraceEvent) */ {
 public:
  Ext4MballocDiscardFtraceEvent();
  virtual ~Ext4MballocDiscardFtraceEvent();

  Ext4MballocDiscardFtraceEvent(const Ext4MballocDiscardFtraceEvent& from);
  Ext4MballocDiscardFtraceEvent(Ext4MballocDiscardFtraceEvent&& from) noexcept
    : Ext4MballocDiscardFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocDiscardFtraceEvent& operator=(const Ext4MballocDiscardFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocDiscardFtraceEvent& operator=(Ext4MballocDiscardFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MballocDiscardFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MballocDiscardFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocDiscardFtraceEvent*>(
               &_Ext4MballocDiscardFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(Ext4MballocDiscardFtraceEvent& a, Ext4MballocDiscardFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocDiscardFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MballocDiscardFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MballocDiscardFtraceEvent>(nullptr);
  }

  Ext4MballocDiscardFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MballocDiscardFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MballocDiscardFtraceEvent& from);
  void MergeFrom(const Ext4MballocDiscardFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MballocDiscardFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MballocDiscardFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kResultStartFieldNumber = 3,
    kResultGroupFieldNumber = 4,
    kResultLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 result_start = 3;
  bool has_result_start() const;
  void clear_result_start();
  ::PROTOBUF_NAMESPACE_ID::int32 result_start() const;
  void set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_group = 4;
  bool has_result_group() const;
  void clear_result_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group() const;
  void set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_len = 5;
  bool has_result_len() const;
  void clear_result_len();
  ::PROTOBUF_NAMESPACE_ID::int32 result_len() const;
  void set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocDiscardFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MballocFreeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocFreeFtraceEvent) */ {
 public:
  Ext4MballocFreeFtraceEvent();
  virtual ~Ext4MballocFreeFtraceEvent();

  Ext4MballocFreeFtraceEvent(const Ext4MballocFreeFtraceEvent& from);
  Ext4MballocFreeFtraceEvent(Ext4MballocFreeFtraceEvent&& from) noexcept
    : Ext4MballocFreeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocFreeFtraceEvent& operator=(const Ext4MballocFreeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocFreeFtraceEvent& operator=(Ext4MballocFreeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MballocFreeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MballocFreeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocFreeFtraceEvent*>(
               &_Ext4MballocFreeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Ext4MballocFreeFtraceEvent& a, Ext4MballocFreeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocFreeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MballocFreeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MballocFreeFtraceEvent>(nullptr);
  }

  Ext4MballocFreeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MballocFreeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MballocFreeFtraceEvent& from);
  void MergeFrom(const Ext4MballocFreeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MballocFreeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MballocFreeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kResultStartFieldNumber = 3,
    kResultGroupFieldNumber = 4,
    kResultLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 result_start = 3;
  bool has_result_start() const;
  void clear_result_start();
  ::PROTOBUF_NAMESPACE_ID::int32 result_start() const;
  void set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_group = 4;
  bool has_result_group() const;
  void clear_result_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group() const;
  void set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_len = 5;
  bool has_result_len() const;
  void clear_result_len();
  ::PROTOBUF_NAMESPACE_ID::int32 result_len() const;
  void set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocFreeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4MballocPreallocFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocPreallocFtraceEvent) */ {
 public:
  Ext4MballocPreallocFtraceEvent();
  virtual ~Ext4MballocPreallocFtraceEvent();

  Ext4MballocPreallocFtraceEvent(const Ext4MballocPreallocFtraceEvent& from);
  Ext4MballocPreallocFtraceEvent(Ext4MballocPreallocFtraceEvent&& from) noexcept
    : Ext4MballocPreallocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocPreallocFtraceEvent& operator=(const Ext4MballocPreallocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocPreallocFtraceEvent& operator=(Ext4MballocPreallocFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4MballocPreallocFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4MballocPreallocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocPreallocFtraceEvent*>(
               &_Ext4MballocPreallocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Ext4MballocPreallocFtraceEvent& a, Ext4MballocPreallocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocPreallocFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4MballocPreallocFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4MballocPreallocFtraceEvent>(nullptr);
  }

  Ext4MballocPreallocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4MballocPreallocFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4MballocPreallocFtraceEvent& from);
  void MergeFrom(const Ext4MballocPreallocFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4MballocPreallocFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4MballocPreallocFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigLogicalFieldNumber = 3,
    kOrigStartFieldNumber = 4,
    kOrigGroupFieldNumber = 5,
    kOrigLenFieldNumber = 6,
    kResultLogicalFieldNumber = 7,
    kResultStartFieldNumber = 8,
    kResultGroupFieldNumber = 9,
    kResultLenFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 orig_logical = 3;
  bool has_orig_logical() const;
  void clear_orig_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_logical() const;
  void set_orig_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 orig_start = 4;
  bool has_orig_start() const;
  void clear_orig_start();
  ::PROTOBUF_NAMESPACE_ID::int32 orig_start() const;
  void set_orig_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 orig_group = 5;
  bool has_orig_group() const;
  void clear_orig_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_group() const;
  void set_orig_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 orig_len = 6;
  bool has_orig_len() const;
  void clear_orig_len();
  ::PROTOBUF_NAMESPACE_ID::int32 orig_len() const;
  void set_orig_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_logical = 7;
  bool has_result_logical() const;
  void clear_result_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_logical() const;
  void set_result_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_start = 8;
  bool has_result_start() const;
  void clear_result_start();
  ::PROTOBUF_NAMESPACE_ID::int32 result_start() const;
  void set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 result_group = 9;
  bool has_result_group() const;
  void clear_result_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group() const;
  void set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_len = 10;
  bool has_result_len() const;
  void clear_result_len();
  ::PROTOBUF_NAMESPACE_ID::int32 result_len() const;
  void set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocPreallocFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_logical_;
  ::PROTOBUF_NAMESPACE_ID::int32 orig_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orig_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 orig_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_logical_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4OtherInodeUpdateTimeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent) */ {
 public:
  Ext4OtherInodeUpdateTimeFtraceEvent();
  virtual ~Ext4OtherInodeUpdateTimeFtraceEvent();

  Ext4OtherInodeUpdateTimeFtraceEvent(const Ext4OtherInodeUpdateTimeFtraceEvent& from);
  Ext4OtherInodeUpdateTimeFtraceEvent(Ext4OtherInodeUpdateTimeFtraceEvent&& from) noexcept
    : Ext4OtherInodeUpdateTimeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4OtherInodeUpdateTimeFtraceEvent& operator=(const Ext4OtherInodeUpdateTimeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4OtherInodeUpdateTimeFtraceEvent& operator=(Ext4OtherInodeUpdateTimeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4OtherInodeUpdateTimeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4OtherInodeUpdateTimeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4OtherInodeUpdateTimeFtraceEvent*>(
               &_Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Ext4OtherInodeUpdateTimeFtraceEvent& a, Ext4OtherInodeUpdateTimeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4OtherInodeUpdateTimeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4OtherInodeUpdateTimeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4OtherInodeUpdateTimeFtraceEvent>(nullptr);
  }

  Ext4OtherInodeUpdateTimeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4OtherInodeUpdateTimeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4OtherInodeUpdateTimeFtraceEvent& from);
  void MergeFrom(const Ext4OtherInodeUpdateTimeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4OtherInodeUpdateTimeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigInoFieldNumber = 3,
    kUidFieldNumber = 4,
    kGidFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 orig_ino = 3;
  bool has_orig_ino() const;
  void clear_orig_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_ino() const;
  void set_orig_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 gid = 5;
  bool has_gid() const;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4PunchHoleFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4PunchHoleFtraceEvent) */ {
 public:
  Ext4PunchHoleFtraceEvent();
  virtual ~Ext4PunchHoleFtraceEvent();

  Ext4PunchHoleFtraceEvent(const Ext4PunchHoleFtraceEvent& from);
  Ext4PunchHoleFtraceEvent(Ext4PunchHoleFtraceEvent&& from) noexcept
    : Ext4PunchHoleFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4PunchHoleFtraceEvent& operator=(const Ext4PunchHoleFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4PunchHoleFtraceEvent& operator=(Ext4PunchHoleFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4PunchHoleFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4PunchHoleFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4PunchHoleFtraceEvent*>(
               &_Ext4PunchHoleFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Ext4PunchHoleFtraceEvent& a, Ext4PunchHoleFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4PunchHoleFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4PunchHoleFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4PunchHoleFtraceEvent>(nullptr);
  }

  Ext4PunchHoleFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4PunchHoleFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4PunchHoleFtraceEvent& from);
  void MergeFrom(const Ext4PunchHoleFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4PunchHoleFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4PunchHoleFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4PunchHoleFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ReadBlockBitmapLoadFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent) */ {
 public:
  Ext4ReadBlockBitmapLoadFtraceEvent();
  virtual ~Ext4ReadBlockBitmapLoadFtraceEvent();

  Ext4ReadBlockBitmapLoadFtraceEvent(const Ext4ReadBlockBitmapLoadFtraceEvent& from);
  Ext4ReadBlockBitmapLoadFtraceEvent(Ext4ReadBlockBitmapLoadFtraceEvent&& from) noexcept
    : Ext4ReadBlockBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReadBlockBitmapLoadFtraceEvent& operator=(const Ext4ReadBlockBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReadBlockBitmapLoadFtraceEvent& operator=(Ext4ReadBlockBitmapLoadFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ReadBlockBitmapLoadFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ReadBlockBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReadBlockBitmapLoadFtraceEvent*>(
               &_Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Ext4ReadBlockBitmapLoadFtraceEvent& a, Ext4ReadBlockBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReadBlockBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ReadBlockBitmapLoadFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ReadBlockBitmapLoadFtraceEvent>(nullptr);
  }

  Ext4ReadBlockBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ReadBlockBitmapLoadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ReadBlockBitmapLoadFtraceEvent& from);
  void MergeFrom(const Ext4ReadBlockBitmapLoadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ReadBlockBitmapLoadFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ReadpageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReadpageFtraceEvent) */ {
 public:
  Ext4ReadpageFtraceEvent();
  virtual ~Ext4ReadpageFtraceEvent();

  Ext4ReadpageFtraceEvent(const Ext4ReadpageFtraceEvent& from);
  Ext4ReadpageFtraceEvent(Ext4ReadpageFtraceEvent&& from) noexcept
    : Ext4ReadpageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReadpageFtraceEvent& operator=(const Ext4ReadpageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReadpageFtraceEvent& operator=(Ext4ReadpageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ReadpageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ReadpageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReadpageFtraceEvent*>(
               &_Ext4ReadpageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Ext4ReadpageFtraceEvent& a, Ext4ReadpageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReadpageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ReadpageFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ReadpageFtraceEvent>(nullptr);
  }

  Ext4ReadpageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ReadpageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ReadpageFtraceEvent& from);
  void MergeFrom(const Ext4ReadpageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ReadpageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ReadpageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReadpageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ReleasepageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReleasepageFtraceEvent) */ {
 public:
  Ext4ReleasepageFtraceEvent();
  virtual ~Ext4ReleasepageFtraceEvent();

  Ext4ReleasepageFtraceEvent(const Ext4ReleasepageFtraceEvent& from);
  Ext4ReleasepageFtraceEvent(Ext4ReleasepageFtraceEvent&& from) noexcept
    : Ext4ReleasepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReleasepageFtraceEvent& operator=(const Ext4ReleasepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReleasepageFtraceEvent& operator=(Ext4ReleasepageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ReleasepageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ReleasepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReleasepageFtraceEvent*>(
               &_Ext4ReleasepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Ext4ReleasepageFtraceEvent& a, Ext4ReleasepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReleasepageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ReleasepageFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ReleasepageFtraceEvent>(nullptr);
  }

  Ext4ReleasepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ReleasepageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ReleasepageFtraceEvent& from);
  void MergeFrom(const Ext4ReleasepageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ReleasepageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ReleasepageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReleasepageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4RemoveBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RemoveBlocksFtraceEvent) */ {
 public:
  Ext4RemoveBlocksFtraceEvent();
  virtual ~Ext4RemoveBlocksFtraceEvent();

  Ext4RemoveBlocksFtraceEvent(const Ext4RemoveBlocksFtraceEvent& from);
  Ext4RemoveBlocksFtraceEvent(Ext4RemoveBlocksFtraceEvent&& from) noexcept
    : Ext4RemoveBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RemoveBlocksFtraceEvent& operator=(const Ext4RemoveBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RemoveBlocksFtraceEvent& operator=(Ext4RemoveBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4RemoveBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4RemoveBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RemoveBlocksFtraceEvent*>(
               &_Ext4RemoveBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Ext4RemoveBlocksFtraceEvent& a, Ext4RemoveBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RemoveBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4RemoveBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4RemoveBlocksFtraceEvent>(nullptr);
  }

  Ext4RemoveBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4RemoveBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4RemoveBlocksFtraceEvent& from);
  void MergeFrom(const Ext4RemoveBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4RemoveBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4RemoveBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kPartialFieldNumber = 5,
    kEePblkFieldNumber = 6,
    kEeLblkFieldNumber = 7,
    kEeLenFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 from = 3;
  bool has_from() const;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 to = 4;
  bool has_to() const;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int64 partial = 5;
  bool has_partial() const;
  void clear_partial();
  ::PROTOBUF_NAMESPACE_ID::int64 partial() const;
  void set_partial(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 ee_pblk = 6;
  bool has_ee_pblk() const;
  void clear_ee_pblk();
  ::PROTOBUF_NAMESPACE_ID::uint64 ee_pblk() const;
  void set_ee_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 ee_lblk = 7;
  bool has_ee_lblk() const;
  void clear_ee_lblk();
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_lblk() const;
  void set_ee_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ee_len = 8;
  bool has_ee_len() const;
  void clear_ee_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_len() const;
  void set_ee_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RemoveBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  ::PROTOBUF_NAMESPACE_ID::int64 partial_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ee_pblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_lblk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ee_len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4RequestBlocksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RequestBlocksFtraceEvent) */ {
 public:
  Ext4RequestBlocksFtraceEvent();
  virtual ~Ext4RequestBlocksFtraceEvent();

  Ext4RequestBlocksFtraceEvent(const Ext4RequestBlocksFtraceEvent& from);
  Ext4RequestBlocksFtraceEvent(Ext4RequestBlocksFtraceEvent&& from) noexcept
    : Ext4RequestBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RequestBlocksFtraceEvent& operator=(const Ext4RequestBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RequestBlocksFtraceEvent& operator=(Ext4RequestBlocksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4RequestBlocksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4RequestBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RequestBlocksFtraceEvent*>(
               &_Ext4RequestBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Ext4RequestBlocksFtraceEvent& a, Ext4RequestBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RequestBlocksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4RequestBlocksFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4RequestBlocksFtraceEvent>(nullptr);
  }

  Ext4RequestBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4RequestBlocksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4RequestBlocksFtraceEvent& from);
  void MergeFrom(const Ext4RequestBlocksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4RequestBlocksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4RequestBlocksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLenFieldNumber = 3,
    kLogicalFieldNumber = 4,
    kLleftFieldNumber = 5,
    kLrightFieldNumber = 6,
    kGoalFieldNumber = 7,
    kPleftFieldNumber = 8,
    kPrightFieldNumber = 9,
    kFlagsFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 len = 3;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 logical = 4;
  bool has_logical() const;
  void clear_logical();
  ::PROTOBUF_NAMESPACE_ID::uint32 logical() const;
  void set_logical(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lleft = 5;
  bool has_lleft() const;
  void clear_lleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 lleft() const;
  void set_lleft(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lright = 6;
  bool has_lright() const;
  void clear_lright();
  ::PROTOBUF_NAMESPACE_ID::uint32 lright() const;
  void set_lright(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 goal = 7;
  bool has_goal() const;
  void clear_goal();
  ::PROTOBUF_NAMESPACE_ID::uint64 goal() const;
  void set_goal(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pleft = 8;
  bool has_pleft() const;
  void clear_pleft();
  ::PROTOBUF_NAMESPACE_ID::uint64 pleft() const;
  void set_pleft(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pright = 9;
  bool has_pright() const;
  void clear_pright();
  ::PROTOBUF_NAMESPACE_ID::uint64 pright() const;
  void set_pright(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 flags = 10;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RequestBlocksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 logical_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lleft_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lright_;
  ::PROTOBUF_NAMESPACE_ID::uint64 goal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pleft_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pright_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4RequestInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RequestInodeFtraceEvent) */ {
 public:
  Ext4RequestInodeFtraceEvent();
  virtual ~Ext4RequestInodeFtraceEvent();

  Ext4RequestInodeFtraceEvent(const Ext4RequestInodeFtraceEvent& from);
  Ext4RequestInodeFtraceEvent(Ext4RequestInodeFtraceEvent&& from) noexcept
    : Ext4RequestInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RequestInodeFtraceEvent& operator=(const Ext4RequestInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RequestInodeFtraceEvent& operator=(Ext4RequestInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4RequestInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4RequestInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RequestInodeFtraceEvent*>(
               &_Ext4RequestInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Ext4RequestInodeFtraceEvent& a, Ext4RequestInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RequestInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4RequestInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4RequestInodeFtraceEvent>(nullptr);
  }

  Ext4RequestInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4RequestInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4RequestInodeFtraceEvent& from);
  void MergeFrom(const Ext4RequestInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4RequestInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4RequestInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kDirFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 dir = 2;
  bool has_dir() const;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::uint64 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RequestInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dir_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4SyncFsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFsFtraceEvent) */ {
 public:
  Ext4SyncFsFtraceEvent();
  virtual ~Ext4SyncFsFtraceEvent();

  Ext4SyncFsFtraceEvent(const Ext4SyncFsFtraceEvent& from);
  Ext4SyncFsFtraceEvent(Ext4SyncFsFtraceEvent&& from) noexcept
    : Ext4SyncFsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFsFtraceEvent& operator=(const Ext4SyncFsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFsFtraceEvent& operator=(Ext4SyncFsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4SyncFsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4SyncFsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFsFtraceEvent*>(
               &_Ext4SyncFsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Ext4SyncFsFtraceEvent& a, Ext4SyncFsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4SyncFsFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4SyncFsFtraceEvent>(nullptr);
  }

  Ext4SyncFsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4SyncFsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4SyncFsFtraceEvent& from);
  void MergeFrom(const Ext4SyncFsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4SyncFsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4SyncFsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kWaitFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 wait = 2;
  bool has_wait() const;
  void clear_wait();
  ::PROTOBUF_NAMESPACE_ID::int32 wait() const;
  void set_wait(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4TrimAllFreeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TrimAllFreeFtraceEvent) */ {
 public:
  Ext4TrimAllFreeFtraceEvent();
  virtual ~Ext4TrimAllFreeFtraceEvent();

  Ext4TrimAllFreeFtraceEvent(const Ext4TrimAllFreeFtraceEvent& from);
  Ext4TrimAllFreeFtraceEvent(Ext4TrimAllFreeFtraceEvent&& from) noexcept
    : Ext4TrimAllFreeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TrimAllFreeFtraceEvent& operator=(const Ext4TrimAllFreeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TrimAllFreeFtraceEvent& operator=(Ext4TrimAllFreeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4TrimAllFreeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4TrimAllFreeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TrimAllFreeFtraceEvent*>(
               &_Ext4TrimAllFreeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Ext4TrimAllFreeFtraceEvent& a, Ext4TrimAllFreeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TrimAllFreeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4TrimAllFreeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4TrimAllFreeFtraceEvent>(nullptr);
  }

  Ext4TrimAllFreeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4TrimAllFreeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4TrimAllFreeFtraceEvent& from);
  void MergeFrom(const Ext4TrimAllFreeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4TrimAllFreeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4TrimAllFreeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevMajorFieldNumber = 1,
    kDevMinorFieldNumber = 2,
    kGroupFieldNumber = 3,
    kStartFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 dev_major = 1;
  bool has_dev_major() const;
  void clear_dev_major();
  ::PROTOBUF_NAMESPACE_ID::int32 dev_major() const;
  void set_dev_major(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dev_minor = 2;
  bool has_dev_minor() const;
  void clear_dev_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 dev_minor() const;
  void set_dev_minor(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 group = 3;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 start = 4;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TrimAllFreeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dev_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 dev_minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4TrimExtentFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TrimExtentFtraceEvent) */ {
 public:
  Ext4TrimExtentFtraceEvent();
  virtual ~Ext4TrimExtentFtraceEvent();

  Ext4TrimExtentFtraceEvent(const Ext4TrimExtentFtraceEvent& from);
  Ext4TrimExtentFtraceEvent(Ext4TrimExtentFtraceEvent&& from) noexcept
    : Ext4TrimExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TrimExtentFtraceEvent& operator=(const Ext4TrimExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TrimExtentFtraceEvent& operator=(Ext4TrimExtentFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4TrimExtentFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4TrimExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TrimExtentFtraceEvent*>(
               &_Ext4TrimExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Ext4TrimExtentFtraceEvent& a, Ext4TrimExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TrimExtentFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4TrimExtentFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4TrimExtentFtraceEvent>(nullptr);
  }

  Ext4TrimExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4TrimExtentFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4TrimExtentFtraceEvent& from);
  void MergeFrom(const Ext4TrimExtentFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4TrimExtentFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4TrimExtentFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevMajorFieldNumber = 1,
    kDevMinorFieldNumber = 2,
    kGroupFieldNumber = 3,
    kStartFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 dev_major = 1;
  bool has_dev_major() const;
  void clear_dev_major();
  ::PROTOBUF_NAMESPACE_ID::int32 dev_major() const;
  void set_dev_major(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dev_minor = 2;
  bool has_dev_minor() const;
  void clear_dev_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 dev_minor() const;
  void set_dev_minor(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 group = 3;
  bool has_group() const;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 start = 4;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TrimExtentFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dev_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 dev_minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4TruncateEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TruncateEnterFtraceEvent) */ {
 public:
  Ext4TruncateEnterFtraceEvent();
  virtual ~Ext4TruncateEnterFtraceEvent();

  Ext4TruncateEnterFtraceEvent(const Ext4TruncateEnterFtraceEvent& from);
  Ext4TruncateEnterFtraceEvent(Ext4TruncateEnterFtraceEvent&& from) noexcept
    : Ext4TruncateEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TruncateEnterFtraceEvent& operator=(const Ext4TruncateEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TruncateEnterFtraceEvent& operator=(Ext4TruncateEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4TruncateEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4TruncateEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TruncateEnterFtraceEvent*>(
               &_Ext4TruncateEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Ext4TruncateEnterFtraceEvent& a, Ext4TruncateEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TruncateEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4TruncateEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4TruncateEnterFtraceEvent>(nullptr);
  }

  Ext4TruncateEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4TruncateEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4TruncateEnterFtraceEvent& from);
  void MergeFrom(const Ext4TruncateEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4TruncateEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4TruncateEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 blocks = 3;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TruncateEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4TruncateExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TruncateExitFtraceEvent) */ {
 public:
  Ext4TruncateExitFtraceEvent();
  virtual ~Ext4TruncateExitFtraceEvent();

  Ext4TruncateExitFtraceEvent(const Ext4TruncateExitFtraceEvent& from);
  Ext4TruncateExitFtraceEvent(Ext4TruncateExitFtraceEvent&& from) noexcept
    : Ext4TruncateExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TruncateExitFtraceEvent& operator=(const Ext4TruncateExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TruncateExitFtraceEvent& operator=(Ext4TruncateExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4TruncateExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4TruncateExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TruncateExitFtraceEvent*>(
               &_Ext4TruncateExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Ext4TruncateExitFtraceEvent& a, Ext4TruncateExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TruncateExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4TruncateExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4TruncateExitFtraceEvent>(nullptr);
  }

  Ext4TruncateExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4TruncateExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4TruncateExitFtraceEvent& from);
  void MergeFrom(const Ext4TruncateExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4TruncateExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4TruncateExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 blocks = 3;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TruncateExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4UnlinkEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4UnlinkEnterFtraceEvent) */ {
 public:
  Ext4UnlinkEnterFtraceEvent();
  virtual ~Ext4UnlinkEnterFtraceEvent();

  Ext4UnlinkEnterFtraceEvent(const Ext4UnlinkEnterFtraceEvent& from);
  Ext4UnlinkEnterFtraceEvent(Ext4UnlinkEnterFtraceEvent&& from) noexcept
    : Ext4UnlinkEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4UnlinkEnterFtraceEvent& operator=(const Ext4UnlinkEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4UnlinkEnterFtraceEvent& operator=(Ext4UnlinkEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4UnlinkEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4UnlinkEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4UnlinkEnterFtraceEvent*>(
               &_Ext4UnlinkEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(Ext4UnlinkEnterFtraceEvent& a, Ext4UnlinkEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4UnlinkEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4UnlinkEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4UnlinkEnterFtraceEvent>(nullptr);
  }

  Ext4UnlinkEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4UnlinkEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4UnlinkEnterFtraceEvent& from);
  void MergeFrom(const Ext4UnlinkEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4UnlinkEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4UnlinkEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kParentFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 parent = 3;
  bool has_parent() const;
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::uint64 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 4;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4UnlinkEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4UnlinkExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4UnlinkExitFtraceEvent) */ {
 public:
  Ext4UnlinkExitFtraceEvent();
  virtual ~Ext4UnlinkExitFtraceEvent();

  Ext4UnlinkExitFtraceEvent(const Ext4UnlinkExitFtraceEvent& from);
  Ext4UnlinkExitFtraceEvent(Ext4UnlinkExitFtraceEvent&& from) noexcept
    : Ext4UnlinkExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4UnlinkExitFtraceEvent& operator=(const Ext4UnlinkExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4UnlinkExitFtraceEvent& operator=(Ext4UnlinkExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4UnlinkExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4UnlinkExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4UnlinkExitFtraceEvent*>(
               &_Ext4UnlinkExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Ext4UnlinkExitFtraceEvent& a, Ext4UnlinkExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4UnlinkExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4UnlinkExitFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4UnlinkExitFtraceEvent>(nullptr);
  }

  Ext4UnlinkExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4UnlinkExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4UnlinkExitFtraceEvent& from);
  void MergeFrom(const Ext4UnlinkExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4UnlinkExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4UnlinkExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4UnlinkExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4WriteBeginFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WriteBeginFtraceEvent) */ {
 public:
  Ext4WriteBeginFtraceEvent();
  virtual ~Ext4WriteBeginFtraceEvent();

  Ext4WriteBeginFtraceEvent(const Ext4WriteBeginFtraceEvent& from);
  Ext4WriteBeginFtraceEvent(Ext4WriteBeginFtraceEvent&& from) noexcept
    : Ext4WriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WriteBeginFtraceEvent& operator=(const Ext4WriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WriteBeginFtraceEvent& operator=(Ext4WriteBeginFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4WriteBeginFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4WriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WriteBeginFtraceEvent*>(
               &_Ext4WriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Ext4WriteBeginFtraceEvent& a, Ext4WriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WriteBeginFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4WriteBeginFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4WriteBeginFtraceEvent>(nullptr);
  }

  Ext4WriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4WriteBeginFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4WriteBeginFtraceEvent& from);
  void MergeFrom(const Ext4WriteBeginFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4WriteBeginFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4WriteBeginFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WriteBeginFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4WriteEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WriteEndFtraceEvent) */ {
 public:
  Ext4WriteEndFtraceEvent();
  virtual ~Ext4WriteEndFtraceEvent();

  Ext4WriteEndFtraceEvent(const Ext4WriteEndFtraceEvent& from);
  Ext4WriteEndFtraceEvent(Ext4WriteEndFtraceEvent&& from) noexcept
    : Ext4WriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WriteEndFtraceEvent& operator=(const Ext4WriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WriteEndFtraceEvent& operator=(Ext4WriteEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4WriteEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4WriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WriteEndFtraceEvent*>(
               &_Ext4WriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Ext4WriteEndFtraceEvent& a, Ext4WriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WriteEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4WriteEndFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4WriteEndFtraceEvent>(nullptr);
  }

  Ext4WriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4WriteEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4WriteEndFtraceEvent& from);
  void MergeFrom(const Ext4WriteEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4WriteEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4WriteEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied();
  ::PROTOBUF_NAMESPACE_ID::uint32 copied() const;
  void set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WriteEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copied_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4WritepageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepageFtraceEvent) */ {
 public:
  Ext4WritepageFtraceEvent();
  virtual ~Ext4WritepageFtraceEvent();

  Ext4WritepageFtraceEvent(const Ext4WritepageFtraceEvent& from);
  Ext4WritepageFtraceEvent(Ext4WritepageFtraceEvent&& from) noexcept
    : Ext4WritepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepageFtraceEvent& operator=(const Ext4WritepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepageFtraceEvent& operator=(Ext4WritepageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4WritepageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4WritepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepageFtraceEvent*>(
               &_Ext4WritepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Ext4WritepageFtraceEvent& a, Ext4WritepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4WritepageFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4WritepageFtraceEvent>(nullptr);
  }

  Ext4WritepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4WritepageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4WritepageFtraceEvent& from);
  void MergeFrom(const Ext4WritepageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4WritepageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4WritepageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4WritepagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepagesFtraceEvent) */ {
 public:
  Ext4WritepagesFtraceEvent();
  virtual ~Ext4WritepagesFtraceEvent();

  Ext4WritepagesFtraceEvent(const Ext4WritepagesFtraceEvent& from);
  Ext4WritepagesFtraceEvent(Ext4WritepagesFtraceEvent&& from) noexcept
    : Ext4WritepagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepagesFtraceEvent& operator=(const Ext4WritepagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepagesFtraceEvent& operator=(Ext4WritepagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4WritepagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4WritepagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepagesFtraceEvent*>(
               &_Ext4WritepagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Ext4WritepagesFtraceEvent& a, Ext4WritepagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4WritepagesFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4WritepagesFtraceEvent>(nullptr);
  }

  Ext4WritepagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4WritepagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4WritepagesFtraceEvent& from);
  void MergeFrom(const Ext4WritepagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4WritepagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4WritepagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNrToWriteFieldNumber = 3,
    kPagesSkippedFieldNumber = 4,
    kRangeStartFieldNumber = 5,
    kRangeEndFieldNumber = 6,
    kWritebackIndexFieldNumber = 7,
    kSyncModeFieldNumber = 8,
    kForKupdateFieldNumber = 9,
    kRangeCyclicFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 nr_to_write = 3;
  bool has_nr_to_write() const;
  void clear_nr_to_write();
  ::PROTOBUF_NAMESPACE_ID::int64 nr_to_write() const;
  void set_nr_to_write(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 pages_skipped = 4;
  bool has_pages_skipped() const;
  void clear_pages_skipped();
  ::PROTOBUF_NAMESPACE_ID::int64 pages_skipped() const;
  void set_pages_skipped(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 range_start = 5;
  bool has_range_start() const;
  void clear_range_start();
  ::PROTOBUF_NAMESPACE_ID::int64 range_start() const;
  void set_range_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 range_end = 6;
  bool has_range_end() const;
  void clear_range_end();
  ::PROTOBUF_NAMESPACE_ID::int64 range_end() const;
  void set_range_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 writeback_index = 7;
  bool has_writeback_index() const;
  void clear_writeback_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 writeback_index() const;
  void set_writeback_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 sync_mode = 8;
  bool has_sync_mode() const;
  void clear_sync_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode() const;
  void set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 for_kupdate = 9;
  bool has_for_kupdate() const;
  void clear_for_kupdate();
  ::PROTOBUF_NAMESPACE_ID::uint32 for_kupdate() const;
  void set_for_kupdate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 range_cyclic = 10;
  bool has_range_cyclic() const;
  void clear_range_cyclic();
  ::PROTOBUF_NAMESPACE_ID::uint32 range_cyclic() const;
  void set_range_cyclic(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 nr_to_write_;
  ::PROTOBUF_NAMESPACE_ID::int64 pages_skipped_;
  ::PROTOBUF_NAMESPACE_ID::int64 range_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 range_end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 writeback_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 for_kupdate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_cyclic_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4WritepagesResultFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepagesResultFtraceEvent) */ {
 public:
  Ext4WritepagesResultFtraceEvent();
  virtual ~Ext4WritepagesResultFtraceEvent();

  Ext4WritepagesResultFtraceEvent(const Ext4WritepagesResultFtraceEvent& from);
  Ext4WritepagesResultFtraceEvent(Ext4WritepagesResultFtraceEvent&& from) noexcept
    : Ext4WritepagesResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepagesResultFtraceEvent& operator=(const Ext4WritepagesResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepagesResultFtraceEvent& operator=(Ext4WritepagesResultFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4WritepagesResultFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4WritepagesResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepagesResultFtraceEvent*>(
               &_Ext4WritepagesResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Ext4WritepagesResultFtraceEvent& a, Ext4WritepagesResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepagesResultFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4WritepagesResultFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4WritepagesResultFtraceEvent>(nullptr);
  }

  Ext4WritepagesResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4WritepagesResultFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4WritepagesResultFtraceEvent& from);
  void MergeFrom(const Ext4WritepagesResultFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4WritepagesResultFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4WritepagesResultFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
    kPagesWrittenFieldNumber = 4,
    kPagesSkippedFieldNumber = 5,
    kWritebackIndexFieldNumber = 6,
    kSyncModeFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pages_written = 4;
  bool has_pages_written() const;
  void clear_pages_written();
  ::PROTOBUF_NAMESPACE_ID::int32 pages_written() const;
  void set_pages_written(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 pages_skipped = 5;
  bool has_pages_skipped() const;
  void clear_pages_skipped();
  ::PROTOBUF_NAMESPACE_ID::int64 pages_skipped() const;
  void set_pages_skipped(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 writeback_index = 6;
  bool has_writeback_index() const;
  void clear_writeback_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 writeback_index() const;
  void set_writeback_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 sync_mode = 7;
  bool has_sync_mode() const;
  void clear_sync_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode() const;
  void set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepagesResultFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 pages_written_;
  ::PROTOBUF_NAMESPACE_ID::int64 pages_skipped_;
  ::PROTOBUF_NAMESPACE_ID::uint64 writeback_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 sync_mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// -------------------------------------------------------------------

class Ext4ZeroRangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ZeroRangeFtraceEvent) */ {
 public:
  Ext4ZeroRangeFtraceEvent();
  virtual ~Ext4ZeroRangeFtraceEvent();

  Ext4ZeroRangeFtraceEvent(const Ext4ZeroRangeFtraceEvent& from);
  Ext4ZeroRangeFtraceEvent(Ext4ZeroRangeFtraceEvent&& from) noexcept
    : Ext4ZeroRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ZeroRangeFtraceEvent& operator=(const Ext4ZeroRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ZeroRangeFtraceEvent& operator=(Ext4ZeroRangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ext4ZeroRangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ext4ZeroRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ZeroRangeFtraceEvent*>(
               &_Ext4ZeroRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Ext4ZeroRangeFtraceEvent& a, Ext4ZeroRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ZeroRangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ext4ZeroRangeFtraceEvent* New() const final {
    return CreateMaybeMessage<Ext4ZeroRangeFtraceEvent>(nullptr);
  }

  Ext4ZeroRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ext4ZeroRangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Ext4ZeroRangeFtraceEvent& from);
  void MergeFrom(const Ext4ZeroRangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ext4ZeroRangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Ext4ZeroRangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ZeroRangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ext4DaWriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWriteBeginFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaWriteBeginFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaWriteBeginFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaWriteBeginFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4DaWriteBeginFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4DaWriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.pos)
  return pos_;
}
inline void Ext4DaWriteBeginFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool Ext4DaWriteBeginFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.len)
  return len_;
}
inline void Ext4DaWriteBeginFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool Ext4DaWriteBeginFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.flags)
  return flags_;
}
inline void Ext4DaWriteBeginFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4DaWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWriteEndFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaWriteEndFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaWriteEndFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaWriteEndFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaWriteEndFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaWriteEndFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4DaWriteEndFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaWriteEndFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4DaWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.pos)
  return pos_;
}
inline void Ext4DaWriteEndFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool Ext4DaWriteEndFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaWriteEndFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.len)
  return len_;
}
inline void Ext4DaWriteEndFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.len)
}

// optional uint32 copied = 5;
inline bool Ext4DaWriteEndFtraceEvent::has_copied() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaWriteEndFtraceEvent::clear_copied() {
  copied_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.copied)
  return copied_;
}
inline void Ext4DaWriteEndFtraceEvent::set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  copied_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.copied)
}

// -------------------------------------------------------------------

// Ext4SyncFileEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFileEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFileEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4SyncFileEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4SyncFileEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFileEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4SyncFileEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.ino)
}

// optional uint64 parent = 3;
inline bool Ext4SyncFileEnterFtraceEvent::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_parent() {
  parent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFileEnterFtraceEvent::parent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.parent)
  return parent_;
}
inline void Ext4SyncFileEnterFtraceEvent::set_parent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  parent_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.parent)
}

// optional int32 datasync = 4;
inline bool Ext4SyncFileEnterFtraceEvent::has_datasync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_datasync() {
  datasync_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4SyncFileEnterFtraceEvent::datasync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.datasync)
  return datasync_;
}
inline void Ext4SyncFileEnterFtraceEvent::set_datasync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  datasync_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.datasync)
}

// -------------------------------------------------------------------

// Ext4SyncFileExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFileExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4SyncFileExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFileExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4SyncFileExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4SyncFileExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4SyncFileExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFileExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4SyncFileExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool Ext4SyncFileExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4SyncFileExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4SyncFileExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4SyncFileExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4AllocDaBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocDaBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocDaBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4AllocDaBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4AllocDaBlocksFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocDaBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.ino)
  return ino_;
}
inline void Ext4AllocDaBlocksFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.ino)
}

// optional uint32 data_blocks = 3;
inline bool Ext4AllocDaBlocksFtraceEvent::has_data_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_data_blocks() {
  data_blocks_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocDaBlocksFtraceEvent::data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.data_blocks)
  return data_blocks_;
}
inline void Ext4AllocDaBlocksFtraceEvent::set_data_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.data_blocks)
}

// optional uint32 meta_blocks = 4;
inline bool Ext4AllocDaBlocksFtraceEvent::has_meta_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_meta_blocks() {
  meta_blocks_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocDaBlocksFtraceEvent::meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.meta_blocks)
  return meta_blocks_;
}
inline void Ext4AllocDaBlocksFtraceEvent::set_meta_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.meta_blocks)
}

// -------------------------------------------------------------------

// Ext4AllocateBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocateBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4AllocateBlocksFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.ino)
  return ino_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.ino)
}

// optional uint64 block = 3;
inline bool Ext4AllocateBlocksFtraceEvent::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.block)
  return block_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.block)
}

// optional uint32 len = 4;
inline bool Ext4AllocateBlocksFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateBlocksFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.len)
  return len_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.len)
}

// optional uint32 logical = 5;
inline bool Ext4AllocateBlocksFtraceEvent::has_logical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_logical() {
  logical_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateBlocksFtraceEvent::logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.logical)
  return logical_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.logical)
}

// optional uint32 lleft = 6;
inline bool Ext4AllocateBlocksFtraceEvent::has_lleft() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_lleft() {
  lleft_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateBlocksFtraceEvent::lleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lleft)
  return lleft_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_lleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lleft_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lleft)
}

// optional uint32 lright = 7;
inline bool Ext4AllocateBlocksFtraceEvent::has_lright() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_lright() {
  lright_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateBlocksFtraceEvent::lright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lright)
  return lright_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_lright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  lright_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lright)
}

// optional uint64 goal = 8;
inline bool Ext4AllocateBlocksFtraceEvent::has_goal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_goal() {
  goal_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::goal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.goal)
  return goal_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_goal(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  goal_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.goal)
}

// optional uint64 pleft = 9;
inline bool Ext4AllocateBlocksFtraceEvent::has_pleft() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_pleft() {
  pleft_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::pleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pleft)
  return pleft_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_pleft(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  pleft_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pleft)
}

// optional uint64 pright = 10;
inline bool Ext4AllocateBlocksFtraceEvent::has_pright() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_pright() {
  pright_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateBlocksFtraceEvent::pright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pright)
  return pright_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_pright(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  pright_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pright)
}

// optional uint32 flags = 11;
inline bool Ext4AllocateBlocksFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.flags)
  return flags_;
}
inline void Ext4AllocateBlocksFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4AllocateInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocateInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4AllocateInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4AllocateInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4AllocateInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4AllocateInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.ino)
  return ino_;
}
inline void Ext4AllocateInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.ino)
}

// optional uint64 dir = 3;
inline bool Ext4AllocateInodeFtraceEvent::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4AllocateInodeFtraceEvent::clear_dir() {
  dir_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4AllocateInodeFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.dir)
  return dir_;
}
inline void Ext4AllocateInodeFtraceEvent::set_dir(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.dir)
}

// optional uint32 mode = 4;
inline bool Ext4AllocateInodeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4AllocateInodeFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4AllocateInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.mode)
  return mode_;
}
inline void Ext4AllocateInodeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4BeginOrderedTruncateFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4BeginOrderedTruncateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.dev)
  return dev_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4BeginOrderedTruncateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.ino)
  return ino_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.ino)
}

// optional int64 new_size = 3;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_new_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_new_size() {
  new_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4BeginOrderedTruncateFtraceEvent::new_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.new_size)
  return new_size_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_new_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  new_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.new_size)
}

// -------------------------------------------------------------------

// Ext4CollapseRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4CollapseRangeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4CollapseRangeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4CollapseRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.dev)
  return dev_;
}
inline void Ext4CollapseRangeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4CollapseRangeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4CollapseRangeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4CollapseRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.ino)
  return ino_;
}
inline void Ext4CollapseRangeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.ino)
}

// optional int64 offset = 3;
inline bool Ext4CollapseRangeFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4CollapseRangeFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4CollapseRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.offset)
  return offset_;
}
inline void Ext4CollapseRangeFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.offset)
}

// optional int64 len = 4;
inline bool Ext4CollapseRangeFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4CollapseRangeFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4CollapseRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.len)
  return len_;
}
inline void Ext4CollapseRangeFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4DaReleaseSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReleaseSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReleaseSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.ino)
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_i_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_i_blocks() {
  i_blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReleaseSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.i_blocks)
  return i_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  i_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.i_blocks)
}

// optional int32 freed_blocks = 4;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_freed_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_freed_blocks() {
  freed_blocks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReleaseSpaceFtraceEvent::freed_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.freed_blocks)
  return freed_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_freed_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  freed_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.freed_blocks)
}

// optional int32 reserved_data_blocks = 5;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_reserved_data_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_reserved_data_blocks() {
  reserved_data_blocks_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReleaseSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_data_blocks)
  return reserved_data_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reserved_data_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_data_blocks)
}

// optional int32 reserved_meta_blocks = 6;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_reserved_meta_blocks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_reserved_meta_blocks() {
  reserved_meta_blocks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReleaseSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_meta_blocks)
  return reserved_meta_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  reserved_meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_meta_blocks)
}

// optional int32 allocated_meta_blocks = 7;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_allocated_meta_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_allocated_meta_blocks() {
  allocated_meta_blocks_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReleaseSpaceFtraceEvent::allocated_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.allocated_meta_blocks)
  return allocated_meta_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_allocated_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  allocated_meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.allocated_meta_blocks)
}

// optional uint32 mode = 8;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaReleaseSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.mode)
  return mode_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4DaReserveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaReserveSpaceFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReserveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaReserveSpaceFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReserveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.ino)
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaReserveSpaceFtraceEvent::has_i_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_i_blocks() {
  i_blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaReserveSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.i_blocks)
  return i_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  i_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.i_blocks)
}

// optional int32 reserved_data_blocks = 4;
inline bool Ext4DaReserveSpaceFtraceEvent::has_reserved_data_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_reserved_data_blocks() {
  reserved_data_blocks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReserveSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_data_blocks)
  return reserved_data_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  reserved_data_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_data_blocks)
}

// optional int32 reserved_meta_blocks = 5;
inline bool Ext4DaReserveSpaceFtraceEvent::has_reserved_meta_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_reserved_meta_blocks() {
  reserved_meta_blocks_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReserveSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_meta_blocks)
  return reserved_meta_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reserved_meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_meta_blocks)
}

// optional uint32 mode = 6;
inline bool Ext4DaReserveSpaceFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaReserveSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.mode)
  return mode_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.mode)
}

// optional int32 md_needed = 7;
inline bool Ext4DaReserveSpaceFtraceEvent::has_md_needed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_md_needed() {
  md_needed_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaReserveSpaceFtraceEvent::md_needed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.md_needed)
  return md_needed_;
}
inline void Ext4DaReserveSpaceFtraceEvent::set_md_needed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  md_needed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.md_needed)
}

// -------------------------------------------------------------------

// Ext4DaUpdateReserveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaUpdateReserveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaUpdateReserveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.ino)
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_i_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_i_blocks() {
  i_blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaUpdateReserveSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.i_blocks)
  return i_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_i_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  i_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.i_blocks)
}

// optional int32 used_blocks = 4;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_used_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_used_blocks() {
  used_blocks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaUpdateReserveSpaceFtraceEvent::used_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.used_blocks)
  return used_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_used_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  used_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.used_blocks)
}

// optional int32 reserved_data_blocks = 5;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_reserved_data_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_reserved_data_blocks() {
  reserved_data_blocks_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaUpdateReserveSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_data_blocks)
  return reserved_data_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_reserved_data_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reserved_data_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_data_blocks)
}

// optional int32 reserved_meta_blocks = 6;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_reserved_meta_blocks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_reserved_meta_blocks() {
  reserved_meta_blocks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaUpdateReserveSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_meta_blocks)
  return reserved_meta_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_reserved_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  reserved_meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_meta_blocks)
}

// optional int32 allocated_meta_blocks = 7;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_allocated_meta_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_allocated_meta_blocks() {
  allocated_meta_blocks_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaUpdateReserveSpaceFtraceEvent::allocated_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.allocated_meta_blocks)
  return allocated_meta_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_allocated_meta_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  allocated_meta_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.allocated_meta_blocks)
}

// optional int32 quota_claim = 8;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_quota_claim() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_quota_claim() {
  quota_claim_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaUpdateReserveSpaceFtraceEvent::quota_claim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.quota_claim)
  return quota_claim_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_quota_claim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  quota_claim_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.quota_claim)
}

// optional uint32 mode = 9;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaUpdateReserveSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.mode)
  return mode_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4DaWritePagesFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWritePagesFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaWritePagesFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaWritePagesFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaWritePagesFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.ino)
}

// optional uint64 first_page = 3;
inline bool Ext4DaWritePagesFtraceEvent::has_first_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_first_page() {
  first_page_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesFtraceEvent::first_page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.first_page)
  return first_page_;
}
inline void Ext4DaWritePagesFtraceEvent::set_first_page(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  first_page_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.first_page)
}

// optional int64 nr_to_write = 4;
inline bool Ext4DaWritePagesFtraceEvent::has_nr_to_write() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_nr_to_write() {
  nr_to_write_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4DaWritePagesFtraceEvent::nr_to_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.nr_to_write)
  return nr_to_write_;
}
inline void Ext4DaWritePagesFtraceEvent::set_nr_to_write(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_to_write_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.nr_to_write)
}

// optional int32 sync_mode = 5;
inline bool Ext4DaWritePagesFtraceEvent::has_sync_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_sync_mode() {
  sync_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaWritePagesFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.sync_mode)
  return sync_mode_;
}
inline void Ext4DaWritePagesFtraceEvent::set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.sync_mode)
}

// optional uint64 b_blocknr = 6;
inline bool Ext4DaWritePagesFtraceEvent::has_b_blocknr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_blocknr() {
  b_blocknr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesFtraceEvent::b_blocknr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_blocknr)
  return b_blocknr_;
}
inline void Ext4DaWritePagesFtraceEvent::set_b_blocknr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  b_blocknr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_blocknr)
}

// optional uint32 b_size = 7;
inline bool Ext4DaWritePagesFtraceEvent::has_b_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_size() {
  b_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWritePagesFtraceEvent::b_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_size)
  return b_size_;
}
inline void Ext4DaWritePagesFtraceEvent::set_b_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  b_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_size)
}

// optional uint32 b_state = 8;
inline bool Ext4DaWritePagesFtraceEvent::has_b_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_state() {
  b_state_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWritePagesFtraceEvent::b_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_state)
  return b_state_;
}
inline void Ext4DaWritePagesFtraceEvent::set_b_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  b_state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_state)
}

// optional int32 io_done = 9;
inline bool Ext4DaWritePagesFtraceEvent::has_io_done() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_io_done() {
  io_done_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaWritePagesFtraceEvent::io_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.io_done)
  return io_done_;
}
inline void Ext4DaWritePagesFtraceEvent::set_io_done(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  io_done_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.io_done)
}

// optional int32 pages_written = 10;
inline bool Ext4DaWritePagesFtraceEvent::has_pages_written() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4DaWritePagesFtraceEvent::clear_pages_written() {
  pages_written_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DaWritePagesFtraceEvent::pages_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.pages_written)
  return pages_written_;
}
inline void Ext4DaWritePagesFtraceEvent::set_pages_written(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  pages_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.pages_written)
}

// -------------------------------------------------------------------

// Ext4DaWritePagesExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.ino)
}

// optional uint64 lblk = 3;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_lblk() {
  lblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DaWritePagesExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWritePagesExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.len)
  return len_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4DaWritePagesExtentFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.flags)
  return flags_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4DirectIOEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DirectIOEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4DirectIOEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DirectIOEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4DirectIOEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4DirectIOEnterFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4DirectIOEnterFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.pos)
  return pos_;
}
inline void Ext4DirectIOEnterFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.pos)
}

// optional uint64 len = 4;
inline bool Ext4DirectIOEnterFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.len)
  return len_;
}
inline void Ext4DirectIOEnterFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.len)
}

// optional int32 rw = 5;
inline bool Ext4DirectIOEnterFtraceEvent::has_rw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_rw() {
  rw_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DirectIOEnterFtraceEvent::rw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.rw)
  return rw_;
}
inline void Ext4DirectIOEnterFtraceEvent::set_rw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rw_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.rw)
}

// -------------------------------------------------------------------

// Ext4DirectIOExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DirectIOExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4DirectIOExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DirectIOExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4DirectIOExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4DirectIOExitFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4DirectIOExitFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.pos)
  return pos_;
}
inline void Ext4DirectIOExitFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.pos)
}

// optional uint64 len = 4;
inline bool Ext4DirectIOExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DirectIOExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.len)
  return len_;
}
inline void Ext4DirectIOExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.len)
}

// optional int32 rw = 5;
inline bool Ext4DirectIOExitFtraceEvent::has_rw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_rw() {
  rw_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DirectIOExitFtraceEvent::rw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.rw)
  return rw_;
}
inline void Ext4DirectIOExitFtraceEvent::set_rw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rw_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.rw)
}

// optional int32 ret = 6;
inline bool Ext4DirectIOExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4DirectIOExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DirectIOExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4DirectIOExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4DiscardBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DiscardBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DiscardBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4DiscardBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.dev)
}

// optional uint64 blk = 2;
inline bool Ext4DiscardBlocksFtraceEvent::has_blk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_blk() {
  blk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DiscardBlocksFtraceEvent::blk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.blk)
  return blk_;
}
inline void Ext4DiscardBlocksFtraceEvent::set_blk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  blk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.blk)
}

// optional uint64 count = 3;
inline bool Ext4DiscardBlocksFtraceEvent::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DiscardBlocksFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.count)
  return count_;
}
inline void Ext4DiscardBlocksFtraceEvent::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.count)
}

// -------------------------------------------------------------------

// Ext4DiscardPreallocationsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DiscardPreallocationsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.dev)
  return dev_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DiscardPreallocationsFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.ino)
  return ino_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.ino)
}

// -------------------------------------------------------------------

// Ext4DropInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DropInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4DropInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DropInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4DropInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4DropInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4DropInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4DropInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.ino)
  return ino_;
}
inline void Ext4DropInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.ino)
}

// optional int32 drop = 3;
inline bool Ext4DropInodeFtraceEvent::has_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4DropInodeFtraceEvent::clear_drop() {
  drop_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4DropInodeFtraceEvent::drop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.drop)
  return drop_;
}
inline void Ext4DropInodeFtraceEvent::set_drop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  drop_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.drop)
}

// -------------------------------------------------------------------

// Ext4EsCacheExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsCacheExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsCacheExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsCacheExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsCacheExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsCacheExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsCacheExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4EsCacheExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsCacheExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.len)
  return len_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.len)
}

// optional uint64 pblk = 5;
inline bool Ext4EsCacheExtentFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsCacheExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.pblk)
}

// optional uint32 status = 6;
inline bool Ext4EsCacheExtentFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsCacheExtentFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.status)
  return status_;
}
inline void Ext4EsCacheExtentFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.status)
}

// -------------------------------------------------------------------

// Ext4EsFindDelayedExtentRangeEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsFindDelayedExtentRangeEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.lblk)
}

// -------------------------------------------------------------------

// Ext4EsFindDelayedExtentRangeExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsFindDelayedExtentRangeExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsFindDelayedExtentRangeExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.len)
  return len_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.len)
}

// optional uint64 pblk = 5;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.pblk)
}

// optional uint64 status = 6;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_status() {
  status_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsFindDelayedExtentRangeExitFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.status)
  return status_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.status)
}

// -------------------------------------------------------------------

// Ext4EsInsertExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsInsertExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsInsertExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsInsertExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsInsertExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsInsertExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsInsertExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4EsInsertExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsInsertExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.len)
  return len_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.len)
}

// optional uint64 pblk = 5;
inline bool Ext4EsInsertExtentFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsInsertExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.pblk)
}

// optional uint64 status = 6;
inline bool Ext4EsInsertExtentFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_status() {
  status_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsInsertExtentFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.status)
  return status_;
}
inline void Ext4EsInsertExtentFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.status)
}

// -------------------------------------------------------------------

// Ext4EsLookupExtentEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsLookupExtentEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.lblk)
}

// -------------------------------------------------------------------

// Ext4EsLookupExtentExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsLookupExtentExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4EsLookupExtentExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.len)
  return len_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.len)
}

// optional uint64 pblk = 5;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.pblk)
}

// optional uint64 status = 6;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_status() {
  status_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsLookupExtentExitFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.status)
  return status_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.status)
}

// optional int32 found = 7;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_found() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_found() {
  found_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsLookupExtentExitFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.found)
  return found_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_found(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  found_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.found)
}

// -------------------------------------------------------------------

// Ext4EsRemoveExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsRemoveExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsRemoveExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsRemoveExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EsRemoveExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsRemoveExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4EsRemoveExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.ino)
}

// optional int64 lblk = 3;
inline bool Ext4EsRemoveExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_lblk() {
  lblk_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4EsRemoveExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4EsRemoveExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.lblk)
}

// optional int64 len = 4;
inline bool Ext4EsRemoveExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4EsRemoveExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.len)
  return len_;
}
inline void Ext4EsRemoveExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4EsShrinkFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsShrinkFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsShrinkFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsShrinkFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.dev)
}

// optional int32 nr_shrunk = 2;
inline bool Ext4EsShrinkFtraceEvent::has_nr_shrunk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsShrinkFtraceEvent::clear_nr_shrunk() {
  nr_shrunk_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkFtraceEvent::nr_shrunk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_shrunk)
  return nr_shrunk_;
}
inline void Ext4EsShrinkFtraceEvent::set_nr_shrunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  nr_shrunk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_shrunk)
}

// optional uint64 scan_time = 3;
inline bool Ext4EsShrinkFtraceEvent::has_scan_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsShrinkFtraceEvent::clear_scan_time() {
  scan_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsShrinkFtraceEvent::scan_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.scan_time)
  return scan_time_;
}
inline void Ext4EsShrinkFtraceEvent::set_scan_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  scan_time_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.scan_time)
}

// optional int32 nr_skipped = 4;
inline bool Ext4EsShrinkFtraceEvent::has_nr_skipped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4EsShrinkFtraceEvent::clear_nr_skipped() {
  nr_skipped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkFtraceEvent::nr_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_skipped)
  return nr_skipped_;
}
inline void Ext4EsShrinkFtraceEvent::set_nr_skipped(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_skipped_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_skipped)
}

// optional int32 retried = 5;
inline bool Ext4EsShrinkFtraceEvent::has_retried() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4EsShrinkFtraceEvent::clear_retried() {
  retried_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkFtraceEvent::retried() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.retried)
  return retried_;
}
inline void Ext4EsShrinkFtraceEvent::set_retried(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  retried_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.retried)
}

// -------------------------------------------------------------------

// Ext4EsShrinkCountFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkCountFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsShrinkCountFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsShrinkCountFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.dev)
}

// optional int32 nr_to_scan = 2;
inline bool Ext4EsShrinkCountFtraceEvent::has_nr_to_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_nr_to_scan() {
  nr_to_scan_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkCountFtraceEvent::nr_to_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.nr_to_scan)
  return nr_to_scan_;
}
inline void Ext4EsShrinkCountFtraceEvent::set_nr_to_scan(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_to_scan_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.nr_to_scan)
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkCountFtraceEvent::has_cache_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_cache_cnt() {
  cache_cnt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkCountFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.cache_cnt)
  return cache_cnt_;
}
inline void Ext4EsShrinkCountFtraceEvent::set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cache_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.cache_cnt)
}

// -------------------------------------------------------------------

// Ext4EsShrinkScanEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsShrinkScanEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.dev)
}

// optional int32 nr_to_scan = 2;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_nr_to_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_nr_to_scan() {
  nr_to_scan_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkScanEnterFtraceEvent::nr_to_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.nr_to_scan)
  return nr_to_scan_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_nr_to_scan(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_to_scan_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.nr_to_scan)
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_cache_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_cache_cnt() {
  cache_cnt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkScanEnterFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.cache_cnt)
  return cache_cnt_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cache_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.cache_cnt)
}

// -------------------------------------------------------------------

// Ext4EsShrinkScanExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EsShrinkScanExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.dev)
}

// optional int32 nr_shrunk = 2;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_nr_shrunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_nr_shrunk() {
  nr_shrunk_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkScanExitFtraceEvent::nr_shrunk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.nr_shrunk)
  return nr_shrunk_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_nr_shrunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_shrunk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.nr_shrunk)
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_cache_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_cache_cnt() {
  cache_cnt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EsShrinkScanExitFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.cache_cnt)
  return cache_cnt_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_cache_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cache_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.cache_cnt)
}

// -------------------------------------------------------------------

// Ext4EvictInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EvictInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4EvictInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EvictInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4EvictInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4EvictInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4EvictInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4EvictInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.ino)
  return ino_;
}
inline void Ext4EvictInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.ino)
}

// optional int32 nlink = 3;
inline bool Ext4EvictInodeFtraceEvent::has_nlink() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4EvictInodeFtraceEvent::clear_nlink() {
  nlink_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4EvictInodeFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.nlink)
  return nlink_;
}
inline void Ext4EvictInodeFtraceEvent::set_nlink(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  nlink_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.nlink)
}

// -------------------------------------------------------------------

// Ext4ExtConvertToInitializedEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.ino)
}

// optional uint32 m_lblk = 3;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_m_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_m_lblk() {
  m_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedEnterFtraceEvent::m_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_lblk)
  return m_lblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_m_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_lblk)
}

// optional uint32 m_len = 4;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_m_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_m_len() {
  m_len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedEnterFtraceEvent::m_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_len)
  return m_len_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_m_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_len)
}

// optional uint32 u_lblk = 5;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_lblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_lblk() {
  u_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedEnterFtraceEvent::u_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_lblk)
  return u_lblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  u_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_lblk)
}

// optional uint32 u_len = 6;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_len() {
  u_len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedEnterFtraceEvent::u_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_len)
  return u_len_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  u_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_len)
}

// optional uint64 u_pblk = 7;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_pblk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_pblk() {
  u_pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedEnterFtraceEvent::u_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_pblk)
  return u_pblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  u_pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_pblk)
}

// -------------------------------------------------------------------

// Ext4ExtConvertToInitializedFastpathFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedFastpathFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedFastpathFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.ino)
}

// optional uint32 m_lblk = 3;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_m_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_m_lblk() {
  m_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::m_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_lblk)
  return m_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_m_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_lblk)
}

// optional uint32 m_len = 4;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_m_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_m_len() {
  m_len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::m_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_len)
  return m_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_m_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_len)
}

// optional uint32 u_lblk = 5;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_lblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_lblk() {
  u_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::u_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_lblk)
  return u_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  u_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_lblk)
}

// optional uint32 u_len = 6;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_len() {
  u_len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::u_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_len)
  return u_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  u_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_len)
}

// optional uint64 u_pblk = 7;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_pblk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_pblk() {
  u_pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedFastpathFtraceEvent::u_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_pblk)
  return u_pblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  u_pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_pblk)
}

// optional uint32 i_lblk = 8;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_lblk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_lblk() {
  i_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::i_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_lblk)
  return i_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  i_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_lblk)
}

// optional uint32 i_len = 9;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_len() {
  i_len_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtConvertToInitializedFastpathFtraceEvent::i_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_len)
  return i_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  i_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_len)
}

// optional uint64 i_pblk = 10;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_pblk() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_pblk() {
  i_pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtConvertToInitializedFastpathFtraceEvent::i_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_pblk)
  return i_pblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  i_pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_pblk)
}

// -------------------------------------------------------------------

// Ext4ExtHandleUnwrittenExtentsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtHandleUnwrittenExtentsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtHandleUnwrittenExtentsFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.ino)
}

// optional int32 flags = 3;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtHandleUnwrittenExtentsFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.flags)
  return flags_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.flags)
}

// optional uint32 lblk = 4;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtHandleUnwrittenExtentsFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.lblk)
}

// optional uint64 pblk = 5;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtHandleUnwrittenExtentsFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.pblk)
}

// optional uint32 len = 6;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtHandleUnwrittenExtentsFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.len)
  return len_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.len)
}

// optional uint32 allocated = 7;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_allocated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_allocated() {
  allocated_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtHandleUnwrittenExtentsFtraceEvent::allocated() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.allocated)
  return allocated_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_allocated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  allocated_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.allocated)
}

// optional uint64 newblk = 8;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_newblk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_newblk() {
  newblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtHandleUnwrittenExtentsFtraceEvent::newblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.newblk)
  return newblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_newblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  newblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.newblk)
}

// -------------------------------------------------------------------

// Ext4ExtInCacheFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtInCacheFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtInCacheFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtInCacheFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtInCacheFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtInCacheFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtInCacheFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtInCacheFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtInCacheFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4ExtInCacheFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtInCacheFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtInCacheFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtInCacheFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.lblk)
}

// optional int32 ret = 4;
inline bool Ext4ExtInCacheFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtInCacheFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtInCacheFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.ret)
  return ret_;
}
inline void Ext4ExtInCacheFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4ExtLoadExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtLoadExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtLoadExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtLoadExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtLoadExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtLoadExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtLoadExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.ino)
}

// optional uint64 pblk = 3;
inline bool Ext4ExtLoadExtentFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtLoadExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4ExtLoadExtentFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.pblk)
}

// optional uint32 lblk = 4;
inline bool Ext4ExtLoadExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtLoadExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtLoadExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.lblk)
}

// -------------------------------------------------------------------

// Ext4ExtMapBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtMapBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtMapBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.len)
  return len_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksEnterFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.flags)
  return flags_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4ExtMapBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtMapBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtMapBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ino)
}

// optional uint32 flags = 3;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.flags)
  return flags_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.flags)
}

// optional uint64 pblk = 4;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtMapBlocksExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.pblk)
}

// optional uint32 lblk = 5;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.lblk)
}

// optional uint32 len = 6;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.len)
  return len_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.len)
}

// optional uint32 mflags = 7;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_mflags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_mflags() {
  mflags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtMapBlocksExitFtraceEvent::mflags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.mflags)
  return mflags_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_mflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  mflags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.mflags)
}

// optional int32 ret = 8;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtMapBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4ExtPutInCacheFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtPutInCacheFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtPutInCacheFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtPutInCacheFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtPutInCacheFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtPutInCacheFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtPutInCacheFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4ExtPutInCacheFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtPutInCacheFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtPutInCacheFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4ExtPutInCacheFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtPutInCacheFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.len)
  return len_;
}
inline void Ext4ExtPutInCacheFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.len)
}

// optional uint64 start = 5;
inline bool Ext4ExtPutInCacheFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtPutInCacheFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.start)
  return start_;
}
inline void Ext4ExtPutInCacheFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.start)
}

// -------------------------------------------------------------------

// Ext4ExtRemoveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRemoveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRemoveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.ino)
}

// optional uint32 start = 3;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_start() {
  start_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRemoveSpaceFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.start)
  return start_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.start)
}

// optional uint32 end = 4;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_end() {
  end_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRemoveSpaceFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.end)
  return end_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.end)
}

// optional int32 depth = 5;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_depth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtRemoveSpaceFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.depth)
  return depth_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.depth)
}

// -------------------------------------------------------------------

// Ext4ExtRemoveSpaceDoneFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRemoveSpaceDoneFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRemoveSpaceDoneFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.ino)
}

// optional uint32 start = 3;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_start() {
  start_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRemoveSpaceDoneFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.start)
  return start_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.start)
}

// optional uint32 end = 4;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_end() {
  end_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRemoveSpaceDoneFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.end)
  return end_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.end)
}

// optional int32 depth = 5;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtRemoveSpaceDoneFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.depth)
  return depth_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.depth)
}

// optional int64 partial = 6;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_partial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_partial() {
  partial_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4ExtRemoveSpaceDoneFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.partial)
  return partial_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_partial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  partial_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.partial)
}

// optional uint32 eh_entries = 7;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_eh_entries() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_eh_entries() {
  eh_entries_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRemoveSpaceDoneFtraceEvent::eh_entries() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.eh_entries)
  return eh_entries_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_eh_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  eh_entries_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.eh_entries)
}

// -------------------------------------------------------------------

// Ext4ExtRmIdxFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRmIdxFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmIdxFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtRmIdxFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtRmIdxFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmIdxFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtRmIdxFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.ino)
}

// optional uint64 pblk = 3;
inline bool Ext4ExtRmIdxFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmIdxFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4ExtRmIdxFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.pblk)
}

// -------------------------------------------------------------------

// Ext4ExtRmLeafFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRmLeafFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmLeafFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtRmLeafFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmLeafFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ino)
}

// optional int64 partial = 3;
inline bool Ext4ExtRmLeafFtraceEvent::has_partial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_partial() {
  partial_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4ExtRmLeafFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.partial)
  return partial_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_partial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  partial_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.partial)
}

// optional uint32 start = 4;
inline bool Ext4ExtRmLeafFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_start() {
  start_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRmLeafFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.start)
  return start_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.start)
}

// optional uint32 ee_lblk = 5;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_lblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_lblk() {
  ee_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtRmLeafFtraceEvent::ee_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_lblk)
  return ee_lblk_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ee_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_lblk)
}

// optional uint64 ee_pblk = 6;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_pblk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_pblk() {
  ee_pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtRmLeafFtraceEvent::ee_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_pblk)
  return ee_pblk_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  ee_pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_pblk)
}

// optional int32 ee_len = 7;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_len() {
  ee_len_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ExtRmLeafFtraceEvent::ee_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_len)
  return ee_len_;
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  ee_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_len)
}

// -------------------------------------------------------------------

// Ext4ExtShowExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtShowExtentFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtShowExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.dev)
  return dev_;
}
inline void Ext4ExtShowExtentFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ExtShowExtentFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtShowExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.ino)
  return ino_;
}
inline void Ext4ExtShowExtentFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.ino)
}

// optional uint64 pblk = 3;
inline bool Ext4ExtShowExtentFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ExtShowExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4ExtShowExtentFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.pblk)
}

// optional uint32 lblk = 4;
inline bool Ext4ExtShowExtentFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtShowExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4ExtShowExtentFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.lblk)
}

// optional uint32 len = 5;
inline bool Ext4ExtShowExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ExtShowExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.len)
  return len_;
}
inline void Ext4ExtShowExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4FallocateEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FallocateEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FallocateEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4FallocateEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4FallocateEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FallocateEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4FallocateEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.ino)
}

// optional int64 offset = 3;
inline bool Ext4FallocateEnterFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4FallocateEnterFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.offset)
  return offset_;
}
inline void Ext4FallocateEnterFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.offset)
}

// optional int64 len = 4;
inline bool Ext4FallocateEnterFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4FallocateEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.len)
  return len_;
}
inline void Ext4FallocateEnterFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.len)
}

// optional int32 mode = 5;
inline bool Ext4FallocateEnterFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4FallocateEnterFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.mode)
  return mode_;
}
inline void Ext4FallocateEnterFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.mode)
}

// optional int64 pos = 6;
inline bool Ext4FallocateEnterFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4FallocateEnterFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4FallocateEnterFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.pos)
  return pos_;
}
inline void Ext4FallocateEnterFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.pos)
}

// -------------------------------------------------------------------

// Ext4FallocateExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FallocateExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4FallocateExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FallocateExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4FallocateExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4FallocateExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4FallocateExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FallocateExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4FallocateExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4FallocateExitFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4FallocateExitFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4FallocateExitFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.pos)
  return pos_;
}
inline void Ext4FallocateExitFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.pos)
}

// optional uint32 blocks = 4;
inline bool Ext4FallocateExitFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4FallocateExitFtraceEvent::clear_blocks() {
  blocks_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FallocateExitFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4FallocateExitFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.blocks)
}

// optional int32 ret = 5;
inline bool Ext4FallocateExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4FallocateExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4FallocateExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4FallocateExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4FindDelallocRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FindDelallocRangeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FindDelallocRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.dev)
  return dev_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4FindDelallocRangeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FindDelallocRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.ino)
  return ino_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.ino)
}

// optional uint32 from = 3;
inline bool Ext4FindDelallocRangeFtraceEvent::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_from() {
  from_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FindDelallocRangeFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.from)
  return from_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  from_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.from)
}

// optional uint32 to = 4;
inline bool Ext4FindDelallocRangeFtraceEvent::has_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_to() {
  to_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FindDelallocRangeFtraceEvent::to() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.to)
  return to_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  to_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.to)
}

// optional int32 reverse = 5;
inline bool Ext4FindDelallocRangeFtraceEvent::has_reverse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_reverse() {
  reverse_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4FindDelallocRangeFtraceEvent::reverse() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.reverse)
  return reverse_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_reverse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reverse_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.reverse)
}

// optional int32 found = 6;
inline bool Ext4FindDelallocRangeFtraceEvent::has_found() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_found() {
  found_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4FindDelallocRangeFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found)
  return found_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_found(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  found_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found)
}

// optional uint32 found_blk = 7;
inline bool Ext4FindDelallocRangeFtraceEvent::has_found_blk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_found_blk() {
  found_blk_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FindDelallocRangeFtraceEvent::found_blk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found_blk)
  return found_blk_;
}
inline void Ext4FindDelallocRangeFtraceEvent::set_found_blk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  found_blk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found_blk)
}

// -------------------------------------------------------------------

// Ext4ForgetFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ForgetFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ForgetFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ForgetFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.dev)
  return dev_;
}
inline void Ext4ForgetFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ForgetFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ForgetFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ForgetFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.ino)
  return ino_;
}
inline void Ext4ForgetFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.ino)
}

// optional uint64 block = 3;
inline bool Ext4ForgetFtraceEvent::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ForgetFtraceEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ForgetFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.block)
  return block_;
}
inline void Ext4ForgetFtraceEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.block)
}

// optional int32 is_metadata = 4;
inline bool Ext4ForgetFtraceEvent::has_is_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ForgetFtraceEvent::clear_is_metadata() {
  is_metadata_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ForgetFtraceEvent::is_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.is_metadata)
  return is_metadata_;
}
inline void Ext4ForgetFtraceEvent::set_is_metadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  is_metadata_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.is_metadata)
}

// optional uint32 mode = 5;
inline bool Ext4ForgetFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ForgetFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ForgetFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.mode)
  return mode_;
}
inline void Ext4ForgetFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4FreeBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FreeBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4FreeBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4FreeBlocksFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.ino)
  return ino_;
}
inline void Ext4FreeBlocksFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.ino)
}

// optional uint64 block = 3;
inline bool Ext4FreeBlocksFtraceEvent::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeBlocksFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.block)
  return block_;
}
inline void Ext4FreeBlocksFtraceEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.block)
}

// optional uint64 count = 4;
inline bool Ext4FreeBlocksFtraceEvent::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeBlocksFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.count)
  return count_;
}
inline void Ext4FreeBlocksFtraceEvent::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.count)
}

// optional int32 flags = 5;
inline bool Ext4FreeBlocksFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4FreeBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.flags)
  return flags_;
}
inline void Ext4FreeBlocksFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.flags)
}

// optional uint32 mode = 6;
inline bool Ext4FreeBlocksFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4FreeBlocksFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FreeBlocksFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.mode)
  return mode_;
}
inline void Ext4FreeBlocksFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4FreeInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FreeInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4FreeInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4FreeInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.ino)
  return ino_;
}
inline void Ext4FreeInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.ino)
}

// optional uint32 uid = 3;
inline bool Ext4FreeInodeFtraceEvent::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_uid() {
  uid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FreeInodeFtraceEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.uid)
  return uid_;
}
inline void Ext4FreeInodeFtraceEvent::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.uid)
}

// optional uint32 gid = 4;
inline bool Ext4FreeInodeFtraceEvent::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_gid() {
  gid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FreeInodeFtraceEvent::gid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.gid)
  return gid_;
}
inline void Ext4FreeInodeFtraceEvent::set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.gid)
}

// optional uint64 blocks = 5;
inline bool Ext4FreeInodeFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4FreeInodeFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4FreeInodeFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.blocks)
}

// optional uint32 mode = 6;
inline bool Ext4FreeInodeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4FreeInodeFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4FreeInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.mode)
  return mode_;
}
inline void Ext4FreeInodeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4GetImpliedClusterAllocExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4GetImpliedClusterAllocExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.dev)
}

// optional uint32 flags = 2;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4GetImpliedClusterAllocExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.flags)
  return flags_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.flags)
}

// optional uint32 lblk = 3;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4GetImpliedClusterAllocExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.lblk)
}

// optional uint64 pblk = 4;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4GetImpliedClusterAllocExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.pblk)
}

// optional uint32 len = 5;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4GetImpliedClusterAllocExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.len)
  return len_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.len)
}

// optional int32 ret = 6;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4GetImpliedClusterAllocExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4GetReservedClusterAllocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4GetReservedClusterAllocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.dev)
  return dev_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4GetReservedClusterAllocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.ino)
  return ino_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4GetReservedClusterAllocFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4GetReservedClusterAllocFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.len)
  return len_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4IndMapBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4IndMapBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4IndMapBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.ino)
}

// optional uint32 lblk = 3;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.lblk)
}

// optional uint32 len = 4;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.len)
  return len_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksEnterFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.flags)
  return flags_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4IndMapBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4IndMapBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4IndMapBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ino)
}

// optional uint32 flags = 3;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.flags)
  return flags_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.flags)
}

// optional uint64 pblk = 4;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_pblk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_pblk() {
  pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4IndMapBlocksExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.pblk)
  return pblk_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.pblk)
}

// optional uint32 lblk = 5;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_lblk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_lblk() {
  lblk_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.lblk)
  return lblk_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.lblk)
}

// optional uint32 len = 6;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.len)
  return len_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.len)
}

// optional uint32 mflags = 7;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_mflags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_mflags() {
  mflags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4IndMapBlocksExitFtraceEvent::mflags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.mflags)
  return mflags_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_mflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  mflags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.mflags)
}

// optional int32 ret = 8;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4IndMapBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4InsertRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4InsertRangeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4InsertRangeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InsertRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.dev)
  return dev_;
}
inline void Ext4InsertRangeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4InsertRangeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4InsertRangeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InsertRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.ino)
  return ino_;
}
inline void Ext4InsertRangeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.ino)
}

// optional int64 offset = 3;
inline bool Ext4InsertRangeFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4InsertRangeFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4InsertRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.offset)
  return offset_;
}
inline void Ext4InsertRangeFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.offset)
}

// optional int64 len = 4;
inline bool Ext4InsertRangeFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4InsertRangeFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4InsertRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.len)
  return len_;
}
inline void Ext4InsertRangeFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4InvalidatepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4InvalidatepageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4InvalidatepageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InvalidatepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.dev)
  return dev_;
}
inline void Ext4InvalidatepageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4InvalidatepageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4InvalidatepageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InvalidatepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.ino)
  return ino_;
}
inline void Ext4InvalidatepageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool Ext4InvalidatepageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4InvalidatepageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InvalidatepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.index)
  return index_;
}
inline void Ext4InvalidatepageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.index)
}

// optional uint64 offset = 4;
inline bool Ext4InvalidatepageFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4InvalidatepageFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4InvalidatepageFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.offset)
  return offset_;
}
inline void Ext4InvalidatepageFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.offset)
}

// optional uint32 length = 5;
inline bool Ext4InvalidatepageFtraceEvent::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4InvalidatepageFtraceEvent::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4InvalidatepageFtraceEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.length)
  return length_;
}
inline void Ext4InvalidatepageFtraceEvent::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  length_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.length)
}

// -------------------------------------------------------------------

// Ext4JournalStartFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalStartFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4JournalStartFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalStartFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.dev)
  return dev_;
}
inline void Ext4JournalStartFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.dev)
}

// optional uint64 ip = 2;
inline bool Ext4JournalStartFtraceEvent::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4JournalStartFtraceEvent::clear_ip() {
  ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalStartFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.ip)
  return ip_;
}
inline void Ext4JournalStartFtraceEvent::set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.ip)
}

// optional int32 blocks = 3;
inline bool Ext4JournalStartFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4JournalStartFtraceEvent::clear_blocks() {
  blocks_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4JournalStartFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4JournalStartFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.blocks)
}

// optional int32 rsv_blocks = 4;
inline bool Ext4JournalStartFtraceEvent::has_rsv_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4JournalStartFtraceEvent::clear_rsv_blocks() {
  rsv_blocks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4JournalStartFtraceEvent::rsv_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.rsv_blocks)
  return rsv_blocks_;
}
inline void Ext4JournalStartFtraceEvent::set_rsv_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  rsv_blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.rsv_blocks)
}

// optional int32 nblocks = 5;
inline bool Ext4JournalStartFtraceEvent::has_nblocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4JournalStartFtraceEvent::clear_nblocks() {
  nblocks_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4JournalStartFtraceEvent::nblocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.nblocks)
  return nblocks_;
}
inline void Ext4JournalStartFtraceEvent::set_nblocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  nblocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.nblocks)
}

// -------------------------------------------------------------------

// Ext4JournalStartReservedFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalStartReservedFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalStartReservedFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.dev)
  return dev_;
}
inline void Ext4JournalStartReservedFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.dev)
}

// optional uint64 ip = 2;
inline bool Ext4JournalStartReservedFtraceEvent::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_ip() {
  ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalStartReservedFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.ip)
  return ip_;
}
inline void Ext4JournalStartReservedFtraceEvent::set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.ip)
}

// optional int32 blocks = 3;
inline bool Ext4JournalStartReservedFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_blocks() {
  blocks_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4JournalStartReservedFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4JournalStartReservedFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.blocks)
}

// -------------------------------------------------------------------

// Ext4JournalledInvalidatepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledInvalidatepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.dev)
  return dev_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledInvalidatepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.ino)
  return ino_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledInvalidatepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.index)
  return index_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.index)
}

// optional uint64 offset = 4;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledInvalidatepageFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.offset)
  return offset_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.offset)
}

// optional uint32 length = 5;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4JournalledInvalidatepageFtraceEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.length)
  return length_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  length_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.length)
}

// -------------------------------------------------------------------

// Ext4JournalledWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalledWriteEndFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.dev)
  return dev_;
}
inline void Ext4JournalledWriteEndFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4JournalledWriteEndFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4JournalledWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.ino)
  return ino_;
}
inline void Ext4JournalledWriteEndFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4JournalledWriteEndFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4JournalledWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.pos)
  return pos_;
}
inline void Ext4JournalledWriteEndFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool Ext4JournalledWriteEndFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4JournalledWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.len)
  return len_;
}
inline void Ext4JournalledWriteEndFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.len)
}

// optional uint32 copied = 5;
inline bool Ext4JournalledWriteEndFtraceEvent::has_copied() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_copied() {
  copied_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4JournalledWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.copied)
  return copied_;
}
inline void Ext4JournalledWriteEndFtraceEvent::set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  copied_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.copied)
}

// -------------------------------------------------------------------

// Ext4LoadInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4LoadInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4LoadInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4LoadInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4LoadInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4LoadInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4LoadInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4LoadInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeFtraceEvent.ino)
  return ino_;
}
inline void Ext4LoadInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeFtraceEvent.ino)
}

// -------------------------------------------------------------------

// Ext4LoadInodeBitmapFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4LoadInodeBitmapFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4LoadInodeBitmapFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4LoadInodeBitmapFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.dev)
  return dev_;
}
inline void Ext4LoadInodeBitmapFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.dev)
}

// optional uint32 group = 2;
inline bool Ext4LoadInodeBitmapFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4LoadInodeBitmapFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4LoadInodeBitmapFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.group)
  return group_;
}
inline void Ext4LoadInodeBitmapFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.group)
}

// -------------------------------------------------------------------

// Ext4MarkInodeDirtyFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MarkInodeDirtyFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.dev)
  return dev_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MarkInodeDirtyFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ino)
  return ino_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ino)
}

// optional uint64 ip = 3;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_ip() {
  ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MarkInodeDirtyFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ip)
  return ip_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ip)
}

// -------------------------------------------------------------------

// Ext4MbBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbBitmapLoadFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbBitmapLoadFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbBitmapLoadFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.dev)
}

// optional uint32 group = 2;
inline bool Ext4MbBitmapLoadFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbBitmapLoadFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.group)
  return group_;
}
inline void Ext4MbBitmapLoadFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.group)
}

// -------------------------------------------------------------------

// Ext4MbBuddyBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbBuddyBitmapLoadFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbBuddyBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.dev)
}

// optional uint32 group = 2;
inline bool Ext4MbBuddyBitmapLoadFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbBuddyBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.group)
  return group_;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.group)
}

// -------------------------------------------------------------------

// Ext4MbDiscardPreallocationsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbDiscardPreallocationsFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbDiscardPreallocationsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.dev)
}

// optional int32 needed = 2;
inline bool Ext4MbDiscardPreallocationsFtraceEvent::has_needed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::clear_needed() {
  needed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MbDiscardPreallocationsFtraceEvent::needed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.needed)
  return needed_;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::set_needed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  needed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.needed)
}

// -------------------------------------------------------------------

// Ext4MbNewGroupPaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbNewGroupPaFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewGroupPaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbNewGroupPaFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MbNewGroupPaFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewGroupPaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.ino)
  return ino_;
}
inline void Ext4MbNewGroupPaFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.ino)
}

// optional uint64 pa_pstart = 3;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_pstart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_pstart() {
  pa_pstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewGroupPaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_pstart)
  return pa_pstart_;
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pa_pstart_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_pstart)
}

// optional uint64 pa_lstart = 4;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_lstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_lstart() {
  pa_lstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewGroupPaFtraceEvent::pa_lstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_lstart)
  return pa_lstart_;
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_lstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  pa_lstart_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_lstart)
}

// optional uint32 pa_len = 5;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_len() {
  pa_len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbNewGroupPaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_len)
  return pa_len_;
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pa_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_len)
}

// -------------------------------------------------------------------

// Ext4MbNewInodePaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbNewInodePaFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewInodePaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbNewInodePaFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MbNewInodePaFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewInodePaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.ino)
  return ino_;
}
inline void Ext4MbNewInodePaFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.ino)
}

// optional uint64 pa_pstart = 3;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_pstart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_pstart() {
  pa_pstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewInodePaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_pstart)
  return pa_pstart_;
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pa_pstart_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_pstart)
}

// optional uint64 pa_lstart = 4;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_lstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_lstart() {
  pa_lstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbNewInodePaFtraceEvent::pa_lstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_lstart)
  return pa_lstart_;
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_lstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  pa_lstart_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_lstart)
}

// optional uint32 pa_len = 5;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_len() {
  pa_len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbNewInodePaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_len)
  return pa_len_;
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pa_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_len)
}

// -------------------------------------------------------------------

// Ext4MbReleaseGroupPaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbReleaseGroupPaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.dev)
}

// optional uint64 pa_pstart = 2;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_pa_pstart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_pa_pstart() {
  pa_pstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbReleaseGroupPaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_pstart)
  return pa_pstart_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_pa_pstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  pa_pstart_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_pstart)
}

// optional uint32 pa_len = 3;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_pa_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_pa_len() {
  pa_len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbReleaseGroupPaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_len)
  return pa_len_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_pa_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pa_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_len)
}

// -------------------------------------------------------------------

// Ext4MbReleaseInodePaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbReleaseInodePaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.dev)
  return dev_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbReleaseInodePaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.ino)
  return ino_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.ino)
}

// optional uint64 block = 3;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_block() {
  block_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MbReleaseInodePaFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.block)
  return block_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.block)
}

// optional uint32 count = 4;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MbReleaseInodePaFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.count)
  return count_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.count)
}

// -------------------------------------------------------------------

// Ext4MballocAllocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocAllocFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocAllocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.dev)
  return dev_;
}
inline void Ext4MballocAllocFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MballocAllocFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocAllocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.ino)
  return ino_;
}
inline void Ext4MballocAllocFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.ino)
}

// optional uint32 orig_logical = 3;
inline bool Ext4MballocAllocFtraceEvent::has_orig_logical() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_logical() {
  orig_logical_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::orig_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_logical)
  return orig_logical_;
}
inline void Ext4MballocAllocFtraceEvent::set_orig_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  orig_logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_logical)
}

// optional int32 orig_start = 4;
inline bool Ext4MballocAllocFtraceEvent::has_orig_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_start() {
  orig_start_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::orig_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_start)
  return orig_start_;
}
inline void Ext4MballocAllocFtraceEvent::set_orig_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  orig_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_start)
}

// optional uint32 orig_group = 5;
inline bool Ext4MballocAllocFtraceEvent::has_orig_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_group() {
  orig_group_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::orig_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_group)
  return orig_group_;
}
inline void Ext4MballocAllocFtraceEvent::set_orig_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  orig_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_group)
}

// optional int32 orig_len = 6;
inline bool Ext4MballocAllocFtraceEvent::has_orig_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_len() {
  orig_len_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::orig_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_len)
  return orig_len_;
}
inline void Ext4MballocAllocFtraceEvent::set_orig_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  orig_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_len)
}

// optional uint32 goal_logical = 7;
inline bool Ext4MballocAllocFtraceEvent::has_goal_logical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_logical() {
  goal_logical_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::goal_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_logical)
  return goal_logical_;
}
inline void Ext4MballocAllocFtraceEvent::set_goal_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  goal_logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_logical)
}

// optional int32 goal_start = 8;
inline bool Ext4MballocAllocFtraceEvent::has_goal_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_start() {
  goal_start_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::goal_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_start)
  return goal_start_;
}
inline void Ext4MballocAllocFtraceEvent::set_goal_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  goal_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_start)
}

// optional uint32 goal_group = 9;
inline bool Ext4MballocAllocFtraceEvent::has_goal_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_group() {
  goal_group_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::goal_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_group)
  return goal_group_;
}
inline void Ext4MballocAllocFtraceEvent::set_goal_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  goal_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_group)
}

// optional int32 goal_len = 10;
inline bool Ext4MballocAllocFtraceEvent::has_goal_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_len() {
  goal_len_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::goal_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_len)
  return goal_len_;
}
inline void Ext4MballocAllocFtraceEvent::set_goal_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  goal_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_len)
}

// optional uint32 result_logical = 11;
inline bool Ext4MballocAllocFtraceEvent::has_result_logical() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_logical() {
  result_logical_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::result_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_logical)
  return result_logical_;
}
inline void Ext4MballocAllocFtraceEvent::set_result_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  result_logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_logical)
}

// optional int32 result_start = 12;
inline bool Ext4MballocAllocFtraceEvent::has_result_start() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_start() {
  result_start_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_start)
  return result_start_;
}
inline void Ext4MballocAllocFtraceEvent::set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  result_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_start)
}

// optional uint32 result_group = 13;
inline bool Ext4MballocAllocFtraceEvent::has_result_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_group() {
  result_group_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_group)
  return result_group_;
}
inline void Ext4MballocAllocFtraceEvent::set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  result_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_group)
}

// optional int32 result_len = 14;
inline bool Ext4MballocAllocFtraceEvent::has_result_len() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_len() {
  result_len_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocAllocFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_len)
  return result_len_;
}
inline void Ext4MballocAllocFtraceEvent::set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  result_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_len)
}

// optional uint32 found = 15;
inline bool Ext4MballocAllocFtraceEvent::has_found() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_found() {
  found_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.found)
  return found_;
}
inline void Ext4MballocAllocFtraceEvent::set_found(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  found_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.found)
}

// optional uint32 groups = 16;
inline bool Ext4MballocAllocFtraceEvent::has_groups() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_groups() {
  groups_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::groups() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.groups)
  return groups_;
}
inline void Ext4MballocAllocFtraceEvent::set_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  groups_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.groups)
}

// optional uint32 buddy = 17;
inline bool Ext4MballocAllocFtraceEvent::has_buddy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_buddy() {
  buddy_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::buddy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.buddy)
  return buddy_;
}
inline void Ext4MballocAllocFtraceEvent::set_buddy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  buddy_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.buddy)
}

// optional uint32 flags = 18;
inline bool Ext4MballocAllocFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.flags)
  return flags_;
}
inline void Ext4MballocAllocFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.flags)
}

// optional uint32 tail = 19;
inline bool Ext4MballocAllocFtraceEvent::has_tail() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_tail() {
  tail_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::tail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.tail)
  return tail_;
}
inline void Ext4MballocAllocFtraceEvent::set_tail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  tail_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.tail)
}

// optional uint32 cr = 20;
inline bool Ext4MballocAllocFtraceEvent::has_cr() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Ext4MballocAllocFtraceEvent::clear_cr() {
  cr_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocAllocFtraceEvent::cr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.cr)
  return cr_;
}
inline void Ext4MballocAllocFtraceEvent::set_cr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  cr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.cr)
}

// -------------------------------------------------------------------

// Ext4MballocDiscardFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocDiscardFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MballocDiscardFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocDiscardFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.dev)
  return dev_;
}
inline void Ext4MballocDiscardFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MballocDiscardFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MballocDiscardFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocDiscardFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.ino)
  return ino_;
}
inline void Ext4MballocDiscardFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.ino)
}

// optional int32 result_start = 3;
inline bool Ext4MballocDiscardFtraceEvent::has_result_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_start() {
  result_start_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocDiscardFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_start)
  return result_start_;
}
inline void Ext4MballocDiscardFtraceEvent::set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  result_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_start)
}

// optional uint32 result_group = 4;
inline bool Ext4MballocDiscardFtraceEvent::has_result_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_group() {
  result_group_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocDiscardFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_group)
  return result_group_;
}
inline void Ext4MballocDiscardFtraceEvent::set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_group)
}

// optional int32 result_len = 5;
inline bool Ext4MballocDiscardFtraceEvent::has_result_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_len() {
  result_len_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocDiscardFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_len)
  return result_len_;
}
inline void Ext4MballocDiscardFtraceEvent::set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  result_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_len)
}

// -------------------------------------------------------------------

// Ext4MballocFreeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocFreeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MballocFreeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocFreeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.dev)
  return dev_;
}
inline void Ext4MballocFreeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MballocFreeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MballocFreeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocFreeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.ino)
  return ino_;
}
inline void Ext4MballocFreeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.ino)
}

// optional int32 result_start = 3;
inline bool Ext4MballocFreeFtraceEvent::has_result_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_start() {
  result_start_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocFreeFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_start)
  return result_start_;
}
inline void Ext4MballocFreeFtraceEvent::set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  result_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_start)
}

// optional uint32 result_group = 4;
inline bool Ext4MballocFreeFtraceEvent::has_result_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_group() {
  result_group_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocFreeFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_group)
  return result_group_;
}
inline void Ext4MballocFreeFtraceEvent::set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_group)
}

// optional int32 result_len = 5;
inline bool Ext4MballocFreeFtraceEvent::has_result_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_len() {
  result_len_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocFreeFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_len)
  return result_len_;
}
inline void Ext4MballocFreeFtraceEvent::set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  result_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_len)
}

// -------------------------------------------------------------------

// Ext4MballocPreallocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocPreallocFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocPreallocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.dev)
  return dev_;
}
inline void Ext4MballocPreallocFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4MballocPreallocFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4MballocPreallocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.ino)
  return ino_;
}
inline void Ext4MballocPreallocFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.ino)
}

// optional uint32 orig_logical = 3;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_logical() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_logical() {
  orig_logical_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocPreallocFtraceEvent::orig_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_logical)
  return orig_logical_;
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  orig_logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_logical)
}

// optional int32 orig_start = 4;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_start() {
  orig_start_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocPreallocFtraceEvent::orig_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_start)
  return orig_start_;
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  orig_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_start)
}

// optional uint32 orig_group = 5;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_group() {
  orig_group_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocPreallocFtraceEvent::orig_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_group)
  return orig_group_;
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  orig_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_group)
}

// optional int32 orig_len = 6;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_len() {
  orig_len_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocPreallocFtraceEvent::orig_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_len)
  return orig_len_;
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  orig_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_len)
}

// optional uint32 result_logical = 7;
inline bool Ext4MballocPreallocFtraceEvent::has_result_logical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_logical() {
  result_logical_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocPreallocFtraceEvent::result_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_logical)
  return result_logical_;
}
inline void Ext4MballocPreallocFtraceEvent::set_result_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  result_logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_logical)
}

// optional int32 result_start = 8;
inline bool Ext4MballocPreallocFtraceEvent::has_result_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_start() {
  result_start_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocPreallocFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_start)
  return result_start_;
}
inline void Ext4MballocPreallocFtraceEvent::set_result_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  result_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_start)
}

// optional uint32 result_group = 9;
inline bool Ext4MballocPreallocFtraceEvent::has_result_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_group() {
  result_group_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4MballocPreallocFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_group)
  return result_group_;
}
inline void Ext4MballocPreallocFtraceEvent::set_result_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  result_group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_group)
}

// optional int32 result_len = 10;
inline bool Ext4MballocPreallocFtraceEvent::has_result_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_len() {
  result_len_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4MballocPreallocFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_len)
  return result_len_;
}
inline void Ext4MballocPreallocFtraceEvent::set_result_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  result_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_len)
}

// -------------------------------------------------------------------

// Ext4OtherInodeUpdateTimeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4OtherInodeUpdateTimeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.dev)
  return dev_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4OtherInodeUpdateTimeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.ino)
  return ino_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.ino)
}

// optional uint64 orig_ino = 3;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_orig_ino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_orig_ino() {
  orig_ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4OtherInodeUpdateTimeFtraceEvent::orig_ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.orig_ino)
  return orig_ino_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_orig_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  orig_ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.orig_ino)
}

// optional uint32 uid = 4;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_uid() {
  uid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4OtherInodeUpdateTimeFtraceEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.uid)
  return uid_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.uid)
}

// optional uint32 gid = 5;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_gid() {
  gid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4OtherInodeUpdateTimeFtraceEvent::gid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.gid)
  return gid_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.gid)
}

// optional uint32 mode = 6;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4OtherInodeUpdateTimeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.mode)
  return mode_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4PunchHoleFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4PunchHoleFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4PunchHoleFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4PunchHoleFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.dev)
  return dev_;
}
inline void Ext4PunchHoleFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4PunchHoleFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4PunchHoleFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4PunchHoleFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.ino)
  return ino_;
}
inline void Ext4PunchHoleFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.ino)
}

// optional int64 offset = 3;
inline bool Ext4PunchHoleFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4PunchHoleFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4PunchHoleFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.offset)
  return offset_;
}
inline void Ext4PunchHoleFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.offset)
}

// optional int64 len = 4;
inline bool Ext4PunchHoleFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4PunchHoleFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4PunchHoleFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.len)
  return len_;
}
inline void Ext4PunchHoleFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.len)
}

// optional int32 mode = 5;
inline bool Ext4PunchHoleFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4PunchHoleFtraceEvent::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4PunchHoleFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.mode)
  return mode_;
}
inline void Ext4PunchHoleFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4ReadBlockBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReadBlockBitmapLoadFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReadBlockBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.dev)
  return dev_;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.dev)
}

// optional uint32 group = 2;
inline bool Ext4ReadBlockBitmapLoadFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4ReadBlockBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.group)
  return group_;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.group)
}

// -------------------------------------------------------------------

// Ext4ReadpageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReadpageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ReadpageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReadpageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.dev)
  return dev_;
}
inline void Ext4ReadpageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ReadpageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ReadpageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReadpageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.ino)
  return ino_;
}
inline void Ext4ReadpageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool Ext4ReadpageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ReadpageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReadpageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.index)
  return index_;
}
inline void Ext4ReadpageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.index)
}

// -------------------------------------------------------------------

// Ext4ReleasepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReleasepageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ReleasepageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReleasepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.dev)
  return dev_;
}
inline void Ext4ReleasepageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ReleasepageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ReleasepageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReleasepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.ino)
  return ino_;
}
inline void Ext4ReleasepageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool Ext4ReleasepageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ReleasepageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ReleasepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.index)
  return index_;
}
inline void Ext4ReleasepageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.index)
}

// -------------------------------------------------------------------

// Ext4RemoveBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RemoveBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RemoveBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4RemoveBlocksFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RemoveBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ino)
  return ino_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ino)
}

// optional uint32 from = 3;
inline bool Ext4RemoveBlocksFtraceEvent::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_from() {
  from_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RemoveBlocksFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.from)
  return from_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  from_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.from)
}

// optional uint32 to = 4;
inline bool Ext4RemoveBlocksFtraceEvent::has_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_to() {
  to_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RemoveBlocksFtraceEvent::to() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.to)
  return to_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  to_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.to)
}

// optional int64 partial = 5;
inline bool Ext4RemoveBlocksFtraceEvent::has_partial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_partial() {
  partial_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4RemoveBlocksFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.partial)
  return partial_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_partial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  partial_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.partial)
}

// optional uint64 ee_pblk = 6;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_pblk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_pblk() {
  ee_pblk_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RemoveBlocksFtraceEvent::ee_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_pblk)
  return ee_pblk_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_pblk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  ee_pblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_pblk)
}

// optional uint32 ee_lblk = 7;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_lblk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_lblk() {
  ee_lblk_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RemoveBlocksFtraceEvent::ee_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_lblk)
  return ee_lblk_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_lblk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ee_lblk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_lblk)
}

// optional uint32 ee_len = 8;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_len() {
  ee_len_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RemoveBlocksFtraceEvent::ee_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_len)
  return ee_len_;
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  ee_len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_len)
}

// -------------------------------------------------------------------

// Ext4RequestBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RequestBlocksFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.dev)
  return dev_;
}
inline void Ext4RequestBlocksFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4RequestBlocksFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.ino)
  return ino_;
}
inline void Ext4RequestBlocksFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.ino)
}

// optional uint32 len = 3;
inline bool Ext4RequestBlocksFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestBlocksFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.len)
  return len_;
}
inline void Ext4RequestBlocksFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.len)
}

// optional uint32 logical = 4;
inline bool Ext4RequestBlocksFtraceEvent::has_logical() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_logical() {
  logical_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestBlocksFtraceEvent::logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.logical)
  return logical_;
}
inline void Ext4RequestBlocksFtraceEvent::set_logical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  logical_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.logical)
}

// optional uint32 lleft = 5;
inline bool Ext4RequestBlocksFtraceEvent::has_lleft() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_lleft() {
  lleft_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestBlocksFtraceEvent::lleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.lleft)
  return lleft_;
}
inline void Ext4RequestBlocksFtraceEvent::set_lleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  lleft_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.lleft)
}

// optional uint32 lright = 6;
inline bool Ext4RequestBlocksFtraceEvent::has_lright() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_lright() {
  lright_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestBlocksFtraceEvent::lright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.lright)
  return lright_;
}
inline void Ext4RequestBlocksFtraceEvent::set_lright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lright_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.lright)
}

// optional uint64 goal = 7;
inline bool Ext4RequestBlocksFtraceEvent::has_goal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_goal() {
  goal_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestBlocksFtraceEvent::goal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.goal)
  return goal_;
}
inline void Ext4RequestBlocksFtraceEvent::set_goal(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  goal_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.goal)
}

// optional uint64 pleft = 8;
inline bool Ext4RequestBlocksFtraceEvent::has_pleft() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_pleft() {
  pleft_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestBlocksFtraceEvent::pleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.pleft)
  return pleft_;
}
inline void Ext4RequestBlocksFtraceEvent::set_pleft(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  pleft_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.pleft)
}

// optional uint64 pright = 9;
inline bool Ext4RequestBlocksFtraceEvent::has_pright() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_pright() {
  pright_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestBlocksFtraceEvent::pright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.pright)
  return pright_;
}
inline void Ext4RequestBlocksFtraceEvent::set_pright(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  pright_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.pright)
}

// optional uint32 flags = 10;
inline bool Ext4RequestBlocksFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4RequestBlocksFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.flags)
  return flags_;
}
inline void Ext4RequestBlocksFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4RequestInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RequestInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4RequestInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.dev)
  return dev_;
}
inline void Ext4RequestInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.dev)
}

// optional uint64 dir = 2;
inline bool Ext4RequestInodeFtraceEvent::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4RequestInodeFtraceEvent::clear_dir() {
  dir_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4RequestInodeFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.dir)
  return dir_;
}
inline void Ext4RequestInodeFtraceEvent::set_dir(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.dir)
}

// optional uint32 mode = 3;
inline bool Ext4RequestInodeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4RequestInodeFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4RequestInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.mode)
  return mode_;
}
inline void Ext4RequestInodeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.mode)
}

// -------------------------------------------------------------------

// Ext4SyncFsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFsFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4SyncFsFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4SyncFsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFsFtraceEvent.dev)
  return dev_;
}
inline void Ext4SyncFsFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFsFtraceEvent.dev)
}

// optional int32 wait = 2;
inline bool Ext4SyncFsFtraceEvent::has_wait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4SyncFsFtraceEvent::clear_wait() {
  wait_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4SyncFsFtraceEvent::wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFsFtraceEvent.wait)
  return wait_;
}
inline void Ext4SyncFsFtraceEvent::set_wait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  wait_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFsFtraceEvent.wait)
}

// -------------------------------------------------------------------

// Ext4TrimAllFreeFtraceEvent

// optional int32 dev_major = 1;
inline bool Ext4TrimAllFreeFtraceEvent::has_dev_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_dev_major() {
  dev_major_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimAllFreeFtraceEvent::dev_major() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_major)
  return dev_major_;
}
inline void Ext4TrimAllFreeFtraceEvent::set_dev_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_major_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_major)
}

// optional int32 dev_minor = 2;
inline bool Ext4TrimAllFreeFtraceEvent::has_dev_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_dev_minor() {
  dev_minor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimAllFreeFtraceEvent::dev_minor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_minor)
  return dev_minor_;
}
inline void Ext4TrimAllFreeFtraceEvent::set_dev_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_minor_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_minor)
}

// optional uint32 group = 3;
inline bool Ext4TrimAllFreeFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4TrimAllFreeFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.group)
  return group_;
}
inline void Ext4TrimAllFreeFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.group)
}

// optional int32 start = 4;
inline bool Ext4TrimAllFreeFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimAllFreeFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.start)
  return start_;
}
inline void Ext4TrimAllFreeFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.start)
}

// optional int32 len = 5;
inline bool Ext4TrimAllFreeFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimAllFreeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.len)
  return len_;
}
inline void Ext4TrimAllFreeFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4TrimExtentFtraceEvent

// optional int32 dev_major = 1;
inline bool Ext4TrimExtentFtraceEvent::has_dev_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4TrimExtentFtraceEvent::clear_dev_major() {
  dev_major_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimExtentFtraceEvent::dev_major() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_major)
  return dev_major_;
}
inline void Ext4TrimExtentFtraceEvent::set_dev_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_major_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_major)
}

// optional int32 dev_minor = 2;
inline bool Ext4TrimExtentFtraceEvent::has_dev_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4TrimExtentFtraceEvent::clear_dev_minor() {
  dev_minor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimExtentFtraceEvent::dev_minor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_minor)
  return dev_minor_;
}
inline void Ext4TrimExtentFtraceEvent::set_dev_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_minor_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_minor)
}

// optional uint32 group = 3;
inline bool Ext4TrimExtentFtraceEvent::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4TrimExtentFtraceEvent::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4TrimExtentFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.group)
  return group_;
}
inline void Ext4TrimExtentFtraceEvent::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  group_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.group)
}

// optional int32 start = 4;
inline bool Ext4TrimExtentFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4TrimExtentFtraceEvent::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimExtentFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.start)
  return start_;
}
inline void Ext4TrimExtentFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.start)
}

// optional int32 len = 5;
inline bool Ext4TrimExtentFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4TrimExtentFtraceEvent::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4TrimExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.len)
  return len_;
}
inline void Ext4TrimExtentFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.len)
}

// -------------------------------------------------------------------

// Ext4TruncateEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4TruncateEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4TruncateEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4TruncateEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4TruncateEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4TruncateEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4TruncateEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.ino)
}

// optional uint64 blocks = 3;
inline bool Ext4TruncateEnterFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4TruncateEnterFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4TruncateEnterFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.blocks)
}

// -------------------------------------------------------------------

// Ext4TruncateExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4TruncateExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4TruncateExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4TruncateExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4TruncateExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4TruncateExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4TruncateExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.ino)
}

// optional uint64 blocks = 3;
inline bool Ext4TruncateExitFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4TruncateExitFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4TruncateExitFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.blocks)
  return blocks_;
}
inline void Ext4TruncateExitFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.blocks)
}

// -------------------------------------------------------------------

// Ext4UnlinkEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4UnlinkEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4UnlinkEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.dev)
  return dev_;
}
inline void Ext4UnlinkEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4UnlinkEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4UnlinkEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.ino)
  return ino_;
}
inline void Ext4UnlinkEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.ino)
}

// optional uint64 parent = 3;
inline bool Ext4UnlinkEnterFtraceEvent::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_parent() {
  parent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4UnlinkEnterFtraceEvent::parent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.parent)
  return parent_;
}
inline void Ext4UnlinkEnterFtraceEvent::set_parent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  parent_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.parent)
}

// optional int64 size = 4;
inline bool Ext4UnlinkEnterFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4UnlinkEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.size)
  return size_;
}
inline void Ext4UnlinkEnterFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.size)
}

// -------------------------------------------------------------------

// Ext4UnlinkExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4UnlinkExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4UnlinkExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4UnlinkExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.dev)
  return dev_;
}
inline void Ext4UnlinkExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4UnlinkExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4UnlinkExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4UnlinkExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.ino)
  return ino_;
}
inline void Ext4UnlinkExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool Ext4UnlinkExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4UnlinkExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4UnlinkExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.ret)
  return ret_;
}
inline void Ext4UnlinkExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// Ext4WriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WriteBeginFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4WriteBeginFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.dev)
  return dev_;
}
inline void Ext4WriteBeginFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4WriteBeginFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4WriteBeginFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.ino)
  return ino_;
}
inline void Ext4WriteBeginFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4WriteBeginFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4WriteBeginFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.pos)
  return pos_;
}
inline void Ext4WriteBeginFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool Ext4WriteBeginFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4WriteBeginFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.len)
  return len_;
}
inline void Ext4WriteBeginFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool Ext4WriteBeginFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4WriteBeginFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.flags)
  return flags_;
}
inline void Ext4WriteBeginFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.flags)
}

// -------------------------------------------------------------------

// Ext4WriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WriteEndFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4WriteEndFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.dev)
  return dev_;
}
inline void Ext4WriteEndFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4WriteEndFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4WriteEndFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.ino)
  return ino_;
}
inline void Ext4WriteEndFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool Ext4WriteEndFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4WriteEndFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.pos)
  return pos_;
}
inline void Ext4WriteEndFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool Ext4WriteEndFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4WriteEndFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.len)
  return len_;
}
inline void Ext4WriteEndFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.len)
}

// optional uint32 copied = 5;
inline bool Ext4WriteEndFtraceEvent::has_copied() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4WriteEndFtraceEvent::clear_copied() {
  copied_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.copied)
  return copied_;
}
inline void Ext4WriteEndFtraceEvent::set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  copied_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.copied)
}

// -------------------------------------------------------------------

// Ext4WritepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4WritepageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.dev)
  return dev_;
}
inline void Ext4WritepageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4WritepageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4WritepageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.ino)
  return ino_;
}
inline void Ext4WritepageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool Ext4WritepageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4WritepageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.index)
  return index_;
}
inline void Ext4WritepageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.index)
}

// -------------------------------------------------------------------

// Ext4WritepagesFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepagesFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.dev)
  return dev_;
}
inline void Ext4WritepagesFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4WritepagesFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.ino)
  return ino_;
}
inline void Ext4WritepagesFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.ino)
}

// optional int64 nr_to_write = 3;
inline bool Ext4WritepagesFtraceEvent::has_nr_to_write() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_nr_to_write() {
  nr_to_write_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WritepagesFtraceEvent::nr_to_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.nr_to_write)
  return nr_to_write_;
}
inline void Ext4WritepagesFtraceEvent::set_nr_to_write(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  nr_to_write_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.nr_to_write)
}

// optional int64 pages_skipped = 4;
inline bool Ext4WritepagesFtraceEvent::has_pages_skipped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_pages_skipped() {
  pages_skipped_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WritepagesFtraceEvent::pages_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.pages_skipped)
  return pages_skipped_;
}
inline void Ext4WritepagesFtraceEvent::set_pages_skipped(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  pages_skipped_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.pages_skipped)
}

// optional int64 range_start = 5;
inline bool Ext4WritepagesFtraceEvent::has_range_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_range_start() {
  range_start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WritepagesFtraceEvent::range_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_start)
  return range_start_;
}
inline void Ext4WritepagesFtraceEvent::set_range_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  range_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_start)
}

// optional int64 range_end = 6;
inline bool Ext4WritepagesFtraceEvent::has_range_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_range_end() {
  range_end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WritepagesFtraceEvent::range_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_end)
  return range_end_;
}
inline void Ext4WritepagesFtraceEvent::set_range_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  range_end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_end)
}

// optional uint64 writeback_index = 7;
inline bool Ext4WritepagesFtraceEvent::has_writeback_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_writeback_index() {
  writeback_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesFtraceEvent::writeback_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.writeback_index)
  return writeback_index_;
}
inline void Ext4WritepagesFtraceEvent::set_writeback_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  writeback_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.writeback_index)
}

// optional int32 sync_mode = 8;
inline bool Ext4WritepagesFtraceEvent::has_sync_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_sync_mode() {
  sync_mode_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4WritepagesFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.sync_mode)
  return sync_mode_;
}
inline void Ext4WritepagesFtraceEvent::set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.sync_mode)
}

// optional uint32 for_kupdate = 9;
inline bool Ext4WritepagesFtraceEvent::has_for_kupdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_for_kupdate() {
  for_kupdate_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WritepagesFtraceEvent::for_kupdate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.for_kupdate)
  return for_kupdate_;
}
inline void Ext4WritepagesFtraceEvent::set_for_kupdate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  for_kupdate_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.for_kupdate)
}

// optional uint32 range_cyclic = 10;
inline bool Ext4WritepagesFtraceEvent::has_range_cyclic() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ext4WritepagesFtraceEvent::clear_range_cyclic() {
  range_cyclic_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ext4WritepagesFtraceEvent::range_cyclic() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_cyclic)
  return range_cyclic_;
}
inline void Ext4WritepagesFtraceEvent::set_range_cyclic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  range_cyclic_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_cyclic)
}

// -------------------------------------------------------------------

// Ext4WritepagesResultFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepagesResultFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesResultFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.dev)
  return dev_;
}
inline void Ext4WritepagesResultFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4WritepagesResultFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesResultFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.ino)
  return ino_;
}
inline void Ext4WritepagesResultFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool Ext4WritepagesResultFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4WritepagesResultFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.ret)
  return ret_;
}
inline void Ext4WritepagesResultFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.ret)
}

// optional int32 pages_written = 4;
inline bool Ext4WritepagesResultFtraceEvent::has_pages_written() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_pages_written() {
  pages_written_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4WritepagesResultFtraceEvent::pages_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_written)
  return pages_written_;
}
inline void Ext4WritepagesResultFtraceEvent::set_pages_written(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pages_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_written)
}

// optional int64 pages_skipped = 5;
inline bool Ext4WritepagesResultFtraceEvent::has_pages_skipped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_pages_skipped() {
  pages_skipped_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4WritepagesResultFtraceEvent::pages_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_skipped)
  return pages_skipped_;
}
inline void Ext4WritepagesResultFtraceEvent::set_pages_skipped(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  pages_skipped_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_skipped)
}

// optional uint64 writeback_index = 6;
inline bool Ext4WritepagesResultFtraceEvent::has_writeback_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_writeback_index() {
  writeback_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4WritepagesResultFtraceEvent::writeback_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.writeback_index)
  return writeback_index_;
}
inline void Ext4WritepagesResultFtraceEvent::set_writeback_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  writeback_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.writeback_index)
}

// optional int32 sync_mode = 7;
inline bool Ext4WritepagesResultFtraceEvent::has_sync_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ext4WritepagesResultFtraceEvent::clear_sync_mode() {
  sync_mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4WritepagesResultFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.sync_mode)
  return sync_mode_;
}
inline void Ext4WritepagesResultFtraceEvent::set_sync_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.sync_mode)
}

// -------------------------------------------------------------------

// Ext4ZeroRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ZeroRangeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ext4ZeroRangeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ZeroRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.dev)
  return dev_;
}
inline void Ext4ZeroRangeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool Ext4ZeroRangeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ext4ZeroRangeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ext4ZeroRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.ino)
  return ino_;
}
inline void Ext4ZeroRangeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.ino)
}

// optional int64 offset = 3;
inline bool Ext4ZeroRangeFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ext4ZeroRangeFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4ZeroRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.offset)
  return offset_;
}
inline void Ext4ZeroRangeFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.offset)
}

// optional int64 len = 4;
inline bool Ext4ZeroRangeFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ext4ZeroRangeFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ext4ZeroRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.len)
  return len_;
}
inline void Ext4ZeroRangeFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.len)
}

// optional int32 mode = 5;
inline bool Ext4ZeroRangeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ext4ZeroRangeFtraceEvent::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ext4ZeroRangeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.mode)
  return mode_;
}
inline void Ext4ZeroRangeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto
