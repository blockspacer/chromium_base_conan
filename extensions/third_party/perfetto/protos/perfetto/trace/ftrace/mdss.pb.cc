// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mdss.proto

#include "protos/perfetto/trace/ftrace/mdss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class MdpCmdKickoffFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCmdKickoffFtraceEvent> _instance;
} _MdpCmdKickoffFtraceEvent_default_instance_;
class MdpCommitFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCommitFtraceEvent> _instance;
} _MdpCommitFtraceEvent_default_instance_;
class MdpPerfSetOtFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfSetOtFtraceEvent> _instance;
} _MdpPerfSetOtFtraceEvent_default_instance_;
class MdpSsppChangeFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpSsppChangeFtraceEvent> _instance;
} _MdpSsppChangeFtraceEvent_default_instance_;
class TracingMarkWriteFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingMarkWriteFtraceEvent> _instance;
} _TracingMarkWriteFtraceEvent_default_instance_;
class MdpCmdPingpongDoneFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCmdPingpongDoneFtraceEvent> _instance;
} _MdpCmdPingpongDoneFtraceEvent_default_instance_;
class MdpCompareBwFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCompareBwFtraceEvent> _instance;
} _MdpCompareBwFtraceEvent_default_instance_;
class MdpPerfSetPanicLutsFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfSetPanicLutsFtraceEvent> _instance;
} _MdpPerfSetPanicLutsFtraceEvent_default_instance_;
class MdpSsppSetFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpSsppSetFtraceEvent> _instance;
} _MdpSsppSetFtraceEvent_default_instance_;
class MdpCmdReadptrDoneFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCmdReadptrDoneFtraceEvent> _instance;
} _MdpCmdReadptrDoneFtraceEvent_default_instance_;
class MdpMisrCrcFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpMisrCrcFtraceEvent> _instance;
} _MdpMisrCrcFtraceEvent_default_instance_;
class MdpPerfSetQosLutsFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfSetQosLutsFtraceEvent> _instance;
} _MdpPerfSetQosLutsFtraceEvent_default_instance_;
class MdpTraceCounterFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpTraceCounterFtraceEvent> _instance;
} _MdpTraceCounterFtraceEvent_default_instance_;
class MdpCmdReleaseBwFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCmdReleaseBwFtraceEvent> _instance;
} _MdpCmdReleaseBwFtraceEvent_default_instance_;
class MdpMixerUpdateFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpMixerUpdateFtraceEvent> _instance;
} _MdpMixerUpdateFtraceEvent_default_instance_;
class MdpPerfSetWmLevelsFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfSetWmLevelsFtraceEvent> _instance;
} _MdpPerfSetWmLevelsFtraceEvent_default_instance_;
class MdpVideoUnderrunDoneFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpVideoUnderrunDoneFtraceEvent> _instance;
} _MdpVideoUnderrunDoneFtraceEvent_default_instance_;
class MdpCmdWaitPingpongFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpCmdWaitPingpongFtraceEvent> _instance;
} _MdpCmdWaitPingpongFtraceEvent_default_instance_;
class MdpPerfPrefillCalcFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfPrefillCalcFtraceEvent> _instance;
} _MdpPerfPrefillCalcFtraceEvent_default_instance_;
class MdpPerfUpdateBusFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdpPerfUpdateBusFtraceEvent> _instance;
} _MdpPerfUpdateBusFtraceEvent_default_instance_;
class RotatorBwAoAsContextFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotatorBwAoAsContextFtraceEvent> _instance;
} _RotatorBwAoAsContextFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCmdKickoffFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCmdKickoffFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCmdKickoffFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCmdPingpongDoneFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCmdReadptrDoneFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCmdReleaseBwFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCmdReleaseBwFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCmdWaitPingpongFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCommitFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCommitFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCommitFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpCompareBwFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpCompareBwFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpCompareBwFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpMisrCrcFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpMisrCrcFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpMisrCrcFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpMixerUpdateFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpMixerUpdateFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpMixerUpdateFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfPrefillCalcFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfSetOtFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfSetOtFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfSetOtFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfSetPanicLutsFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfSetQosLutsFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfSetWmLevelsFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpPerfUpdateBusFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpPerfUpdateBusFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpSsppChangeFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpSsppChangeFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpSsppChangeFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpSsppSetFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpSsppSetFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpSsppSetFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpTraceCounterFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpTraceCounterFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpTraceCounterFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MdpVideoUnderrunDoneFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_RotatorBwAoAsContextFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::RotatorBwAoAsContextFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

static void InitDefaultsscc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingMarkWriteFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::TracingMarkWriteFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingMarkWriteFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void MdpCmdKickoffFtraceEvent::InitAsDefaultInstance() {
}
class MdpCmdKickoffFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCmdKickoffFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kickoff_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MdpCmdKickoffFtraceEvent::MdpCmdKickoffFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCmdKickoffFtraceEvent)
}
MdpCmdKickoffFtraceEvent::MdpCmdKickoffFtraceEvent(const MdpCmdKickoffFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctl_num_, &from.ctl_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&kickoff_cnt_) -
    reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCmdKickoffFtraceEvent)
}

void MdpCmdKickoffFtraceEvent::SharedCtor() {
  ::memset(&ctl_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickoff_cnt_) -
      reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
}

MdpCmdKickoffFtraceEvent::~MdpCmdKickoffFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCmdKickoffFtraceEvent)
  SharedDtor();
}

void MdpCmdKickoffFtraceEvent::SharedDtor() {
}

void MdpCmdKickoffFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCmdKickoffFtraceEvent& MdpCmdKickoffFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCmdKickoffFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ctl_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kickoff_cnt_) -
        reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCmdKickoffFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kickoff_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kickoff_cnt(&has_bits);
          kickoff_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCmdKickoffFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kickoff_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_kickoff_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickoff_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCmdKickoffFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCmdKickoffFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCmdKickoffFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  // optional int32 kickoff_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->kickoff_cnt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCmdKickoffFtraceEvent)
}

size_t MdpCmdKickoffFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ctl_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ctl_num());
    }

    // optional int32 kickoff_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->kickoff_cnt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCmdKickoffFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCmdKickoffFtraceEvent*>(
      &from));
}

void MdpCmdKickoffFtraceEvent::MergeFrom(const MdpCmdKickoffFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ctl_num_ = from.ctl_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      kickoff_cnt_ = from.kickoff_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCmdKickoffFtraceEvent::CopyFrom(const MdpCmdKickoffFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCmdKickoffFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCmdKickoffFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCmdKickoffFtraceEvent::InternalSwap(MdpCmdKickoffFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
  swap(kickoff_cnt_, other->kickoff_cnt_);
}

std::string MdpCmdKickoffFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCmdKickoffFtraceEvent";
}


// ===================================================================

void MdpCommitFtraceEvent::InitAsDefaultInstance() {
}
class MdpCommitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCommitFtraceEvent>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_play_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MdpCommitFtraceEvent::MdpCommitFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCommitFtraceEvent)
}
MdpCommitFtraceEvent::MdpCommitFtraceEvent(const MdpCommitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&clk_rate_) -
    reinterpret_cast<char*>(&num_)) + sizeof(clk_rate_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCommitFtraceEvent)
}

void MdpCommitFtraceEvent::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clk_rate_) -
      reinterpret_cast<char*>(&num_)) + sizeof(clk_rate_));
}

MdpCommitFtraceEvent::~MdpCommitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCommitFtraceEvent)
  SharedDtor();
}

void MdpCommitFtraceEvent::SharedDtor() {
}

void MdpCommitFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCommitFtraceEvent& MdpCommitFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCommitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCommitFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clk_rate_) -
        reinterpret_cast<char*>(&num_)) + sizeof(clk_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCommitFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 play_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_play_cnt(&has_bits);
          play_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 clk_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clk_rate(&has_bits);
          clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCommitFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCommitFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_play_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clk_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_clk_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clk_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bandwidth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bandwidth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCommitFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCommitFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCommitFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCommitFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 play_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->play_cnt(), output);
  }

  // optional uint32 clk_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->clk_rate(), output);
  }

  // optional uint64 bandwidth = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->bandwidth(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCommitFtraceEvent)
}

size_t MdpCommitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCommitFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 play_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->play_cnt());
    }

    // optional uint64 bandwidth = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bandwidth());
    }

    // optional uint32 clk_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->clk_rate());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCommitFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCommitFtraceEvent*>(
      &from));
}

void MdpCommitFtraceEvent::MergeFrom(const MdpCommitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCommitFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      play_cnt_ = from.play_cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000008u) {
      clk_rate_ = from.clk_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCommitFtraceEvent::CopyFrom(const MdpCommitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCommitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCommitFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCommitFtraceEvent::InternalSwap(MdpCommitFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_, other->num_);
  swap(play_cnt_, other->play_cnt_);
  swap(bandwidth_, other->bandwidth_);
  swap(clk_rate_, other->clk_rate_);
}

std::string MdpCommitFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCommitFtraceEvent";
}


// ===================================================================

void MdpPerfSetOtFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfSetOtFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfSetOtFtraceEvent>()._has_bits_);
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rd_lim(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_vbif_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MdpPerfSetOtFtraceEvent::MdpPerfSetOtFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfSetOtFtraceEvent)
}
MdpPerfSetOtFtraceEvent::MdpPerfSetOtFtraceEvent(const MdpPerfSetOtFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pnum_, &from.pnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vbif_rt_) -
    reinterpret_cast<char*>(&pnum_)) + sizeof(is_vbif_rt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfSetOtFtraceEvent)
}

void MdpPerfSetOtFtraceEvent::SharedCtor() {
  ::memset(&pnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vbif_rt_) -
      reinterpret_cast<char*>(&pnum_)) + sizeof(is_vbif_rt_));
}

MdpPerfSetOtFtraceEvent::~MdpPerfSetOtFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfSetOtFtraceEvent)
  SharedDtor();
}

void MdpPerfSetOtFtraceEvent::SharedDtor() {
}

void MdpPerfSetOtFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfSetOtFtraceEvent& MdpPerfSetOtFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfSetOtFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vbif_rt_) -
        reinterpret_cast<char*>(&pnum_)) + sizeof(is_vbif_rt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfSetOtFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xin_id(&has_bits);
          xin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rd_lim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rd_lim(&has_bits);
          rd_lim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 is_vbif_rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_vbif_rt(&has_bits);
          is_vbif_rt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfSetOtFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pnum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xin_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_xin_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rd_lim = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rd_lim(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rd_lim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_vbif_rt = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_vbif_rt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_vbif_rt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfSetOtFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfSetOtFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfSetOtFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->pnum(), output);
  }

  // optional uint32 xin_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->xin_id(), output);
  }

  // optional uint32 rd_lim = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->rd_lim(), output);
  }

  // optional uint32 is_vbif_rt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->is_vbif_rt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfSetOtFtraceEvent)
}

size_t MdpPerfSetOtFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 pnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 xin_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->xin_id());
    }

    // optional uint32 rd_lim = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rd_lim());
    }

    // optional uint32 is_vbif_rt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->is_vbif_rt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfSetOtFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfSetOtFtraceEvent*>(
      &from));
}

void MdpPerfSetOtFtraceEvent::MergeFrom(const MdpPerfSetOtFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      xin_id_ = from.xin_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rd_lim_ = from.rd_lim_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_vbif_rt_ = from.is_vbif_rt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfSetOtFtraceEvent::CopyFrom(const MdpPerfSetOtFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfSetOtFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfSetOtFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfSetOtFtraceEvent::InternalSwap(MdpPerfSetOtFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pnum_, other->pnum_);
  swap(xin_id_, other->xin_id_);
  swap(rd_lim_, other->rd_lim_);
  swap(is_vbif_rt_, other->is_vbif_rt_);
}

std::string MdpPerfSetOtFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfSetOtFtraceEvent";
}


// ===================================================================

void MdpSsppChangeFtraceEvent::InitAsDefaultInstance() {
}
class MdpSsppChangeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpSsppChangeFtraceEvent>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_play_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mixer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_src_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_src_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_src_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_src_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dst_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dst_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dst_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dst_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

MdpSsppChangeFtraceEvent::MdpSsppChangeFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpSsppChangeFtraceEvent)
}
MdpSsppChangeFtraceEvent::MdpSsppChangeFtraceEvent(const MdpSsppChangeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_h_) -
    reinterpret_cast<char*>(&num_)) + sizeof(dst_h_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpSsppChangeFtraceEvent)
}

void MdpSsppChangeFtraceEvent::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_h_) -
      reinterpret_cast<char*>(&num_)) + sizeof(dst_h_));
}

MdpSsppChangeFtraceEvent::~MdpSsppChangeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpSsppChangeFtraceEvent)
  SharedDtor();
}

void MdpSsppChangeFtraceEvent::SharedDtor() {
}

void MdpSsppChangeFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpSsppChangeFtraceEvent& MdpSsppChangeFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpSsppChangeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&img_h_) -
        reinterpret_cast<char*>(&num_)) + sizeof(img_h_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&src_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_h_) -
        reinterpret_cast<char*>(&src_x_)) + sizeof(dst_h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpSsppChangeFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 play_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_play_cnt(&has_bits);
          play_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mixer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mixer(&has_bits);
          mixer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stage(&has_bits);
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_format(&has_bits);
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_img_w(&has_bits);
          img_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_img_h(&has_bits);
          img_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_src_x(&has_bits);
          src_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_src_y(&has_bits);
          src_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_w = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_src_w(&has_bits);
          src_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_h = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_src_h(&has_bits);
          src_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_x = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dst_x(&has_bits);
          dst_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dst_y(&has_bits);
          dst_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_w = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dst_w(&has_bits);
          dst_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_h = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dst_h(&has_bits);
          dst_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpSsppChangeFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_play_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mixer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mixer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 format = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_format(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 img_w = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_img_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 img_h = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_img_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_x = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_src_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_y = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_src_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_w = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_src_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_h = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_src_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_x = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_dst_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_y = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_dst_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_w = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_dst_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_h = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_dst_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpSsppChangeFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpSsppChangeFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpSsppChangeFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 play_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->play_cnt(), output);
  }

  // optional uint32 mixer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mixer(), output);
  }

  // optional uint32 stage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 format = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->format(), output);
  }

  // optional uint32 img_w = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->img_w(), output);
  }

  // optional uint32 img_h = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->img_h(), output);
  }

  // optional uint32 src_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->src_x(), output);
  }

  // optional uint32 src_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->src_y(), output);
  }

  // optional uint32 src_w = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->src_w(), output);
  }

  // optional uint32 src_h = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->src_h(), output);
  }

  // optional uint32 dst_x = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->dst_x(), output);
  }

  // optional uint32 dst_y = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->dst_y(), output);
  }

  // optional uint32 dst_w = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->dst_w(), output);
  }

  // optional uint32 dst_h = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->dst_h(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpSsppChangeFtraceEvent)
}

size_t MdpSsppChangeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 play_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->play_cnt());
    }

    // optional uint32 mixer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mixer());
    }

    // optional uint32 stage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 format = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional uint32 img_w = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->img_w());
    }

    // optional uint32 img_h = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->img_h());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 src_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_x());
    }

    // optional uint32 src_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_y());
    }

    // optional uint32 src_w = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_w());
    }

    // optional uint32 src_h = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_h());
    }

    // optional uint32 dst_x = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_x());
    }

    // optional uint32 dst_y = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_y());
    }

    // optional uint32 dst_w = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_w());
    }

    // optional uint32 dst_h = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_h());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpSsppChangeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpSsppChangeFtraceEvent*>(
      &from));
}

void MdpSsppChangeFtraceEvent::MergeFrom(const MdpSsppChangeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      play_cnt_ = from.play_cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      mixer_ = from.mixer_;
    }
    if (cached_has_bits & 0x00000008u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      img_w_ = from.img_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      img_h_ = from.img_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      src_x_ = from.src_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      src_y_ = from.src_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      src_w_ = from.src_w_;
    }
    if (cached_has_bits & 0x00000800u) {
      src_h_ = from.src_h_;
    }
    if (cached_has_bits & 0x00001000u) {
      dst_x_ = from.dst_x_;
    }
    if (cached_has_bits & 0x00002000u) {
      dst_y_ = from.dst_y_;
    }
    if (cached_has_bits & 0x00004000u) {
      dst_w_ = from.dst_w_;
    }
    if (cached_has_bits & 0x00008000u) {
      dst_h_ = from.dst_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpSsppChangeFtraceEvent::CopyFrom(const MdpSsppChangeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpSsppChangeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpSsppChangeFtraceEvent::IsInitialized() const {
  return true;
}

void MdpSsppChangeFtraceEvent::InternalSwap(MdpSsppChangeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_, other->num_);
  swap(play_cnt_, other->play_cnt_);
  swap(mixer_, other->mixer_);
  swap(stage_, other->stage_);
  swap(flags_, other->flags_);
  swap(format_, other->format_);
  swap(img_w_, other->img_w_);
  swap(img_h_, other->img_h_);
  swap(src_x_, other->src_x_);
  swap(src_y_, other->src_y_);
  swap(src_w_, other->src_w_);
  swap(src_h_, other->src_h_);
  swap(dst_x_, other->dst_x_);
  swap(dst_y_, other->dst_y_);
  swap(dst_w_, other->dst_w_);
  swap(dst_h_, other->dst_h_);
}

std::string MdpSsppChangeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpSsppChangeFtraceEvent";
}


// ===================================================================

void TracingMarkWriteFtraceEvent::InitAsDefaultInstance() {
}
class TracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingMarkWriteFtraceEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TracingMarkWriteFtraceEvent::TracingMarkWriteFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingMarkWriteFtraceEvent)
}
TracingMarkWriteFtraceEvent::TracingMarkWriteFtraceEvent(const TracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_name()) {
    trace_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_begin_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingMarkWriteFtraceEvent)
}

void TracingMarkWriteFtraceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  trace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_begin_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
}

TracingMarkWriteFtraceEvent::~TracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingMarkWriteFtraceEvent)
  SharedDtor();
}

void TracingMarkWriteFtraceEvent::SharedDtor() {
  trace_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingMarkWriteFtraceEvent& TracingMarkWriteFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void TracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trace_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_begin_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trace_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_trace_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trace_begin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trace_begin(&has_bits);
          trace_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingMarkWriteFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trace_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_begin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trace_begin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingMarkWriteFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingMarkWriteFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingMarkWriteFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string trace_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace_name(), output);
  }

  // optional uint32 trace_begin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->trace_begin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingMarkWriteFtraceEvent)
}

size_t TracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string trace_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->trace_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional uint32 trace_begin = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trace_begin());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingMarkWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingMarkWriteFtraceEvent*>(
      &from));
}

void TracingMarkWriteFtraceEvent::MergeFrom(const TracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trace_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_begin_ = from.trace_begin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingMarkWriteFtraceEvent::CopyFrom(const TracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void TracingMarkWriteFtraceEvent::InternalSwap(TracingMarkWriteFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_name_.Swap(&other->trace_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(trace_begin_, other->trace_begin_);
}

std::string TracingMarkWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TracingMarkWriteFtraceEvent";
}


// ===================================================================

void MdpCmdPingpongDoneFtraceEvent::InitAsDefaultInstance() {
}
class MdpCmdPingpongDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCmdPingpongDoneFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intf_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pp_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_koff_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MdpCmdPingpongDoneFtraceEvent::MdpCmdPingpongDoneFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
}
MdpCmdPingpongDoneFtraceEvent::MdpCmdPingpongDoneFtraceEvent(const MdpCmdPingpongDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctl_num_, &from.ctl_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&koff_cnt_) -
    reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
}

void MdpCmdPingpongDoneFtraceEvent::SharedCtor() {
  ::memset(&ctl_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&koff_cnt_) -
      reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
}

MdpCmdPingpongDoneFtraceEvent::~MdpCmdPingpongDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  SharedDtor();
}

void MdpCmdPingpongDoneFtraceEvent::SharedDtor() {
}

void MdpCmdPingpongDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCmdPingpongDoneFtraceEvent& MdpCmdPingpongDoneFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCmdPingpongDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ctl_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&koff_cnt_) -
        reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCmdPingpongDoneFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intf_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_intf_num(&has_bits);
          intf_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pp_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pp_num(&has_bits);
          pp_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 koff_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_koff_cnt(&has_bits);
          koff_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCmdPingpongDoneFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intf_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_intf_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intf_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pp_num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_pp_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pp_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 koff_cnt = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_koff_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &koff_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCmdPingpongDoneFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  // optional uint32 intf_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->intf_num(), output);
  }

  // optional uint32 pp_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->pp_num(), output);
  }

  // optional int32 koff_cnt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->koff_cnt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
}

size_t MdpCmdPingpongDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 ctl_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ctl_num());
    }

    // optional uint32 intf_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->intf_num());
    }

    // optional uint32 pp_num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pp_num());
    }

    // optional int32 koff_cnt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->koff_cnt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCmdPingpongDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCmdPingpongDoneFtraceEvent*>(
      &from));
}

void MdpCmdPingpongDoneFtraceEvent::MergeFrom(const MdpCmdPingpongDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ctl_num_ = from.ctl_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      intf_num_ = from.intf_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      pp_num_ = from.pp_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      koff_cnt_ = from.koff_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCmdPingpongDoneFtraceEvent::CopyFrom(const MdpCmdPingpongDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCmdPingpongDoneFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCmdPingpongDoneFtraceEvent::InternalSwap(MdpCmdPingpongDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
  swap(intf_num_, other->intf_num_);
  swap(pp_num_, other->pp_num_);
  swap(koff_cnt_, other->koff_cnt_);
}

std::string MdpCmdPingpongDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCmdPingpongDoneFtraceEvent";
}


// ===================================================================

void MdpCompareBwFtraceEvent::InitAsDefaultInstance() {
}
class MdpCompareBwFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCompareBwFtraceEvent>()._has_bits_);
  static void set_has_new_ab(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_ib(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_wb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_ab(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_ib(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_wb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_params_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_update_bw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MdpCompareBwFtraceEvent::MdpCompareBwFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCompareBwFtraceEvent)
}
MdpCompareBwFtraceEvent::MdpCompareBwFtraceEvent(const MdpCompareBwFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_ab_, &from.new_ab_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_bw_) -
    reinterpret_cast<char*>(&new_ab_)) + sizeof(update_bw_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCompareBwFtraceEvent)
}

void MdpCompareBwFtraceEvent::SharedCtor() {
  ::memset(&new_ab_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_bw_) -
      reinterpret_cast<char*>(&new_ab_)) + sizeof(update_bw_));
}

MdpCompareBwFtraceEvent::~MdpCompareBwFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCompareBwFtraceEvent)
  SharedDtor();
}

void MdpCompareBwFtraceEvent::SharedDtor() {
}

void MdpCompareBwFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCompareBwFtraceEvent& MdpCompareBwFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCompareBwFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCompareBwFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&new_ab_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_bw_) -
        reinterpret_cast<char*>(&new_ab_)) + sizeof(update_bw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCompareBwFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 new_ab = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_ab(&has_bits);
          new_ab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 new_ib = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_ib(&has_bits);
          new_ib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 new_wb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_wb(&has_bits);
          new_wb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 old_ab = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_old_ab(&has_bits);
          old_ab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 old_ib = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_old_ib(&has_bits);
          old_ib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 old_wb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_old_wb(&has_bits);
          old_wb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 params_changed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_params_changed(&has_bits);
          params_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 update_bw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_update_bw(&has_bits);
          update_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCompareBwFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCompareBwFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_ab = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_new_ab(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_ab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 new_ib = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_new_ib(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_ib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 new_wb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_new_wb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_wb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 old_ab = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_old_ab(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_ab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 old_ib = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_old_ib(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_ib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 old_wb = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_old_wb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_wb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 params_changed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_params_changed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &params_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_bw = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_update_bw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_bw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCompareBwFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCompareBwFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCompareBwFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCompareBwFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 new_ab = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->new_ab(), output);
  }

  // optional uint64 new_ib = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->new_ib(), output);
  }

  // optional uint64 new_wb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->new_wb(), output);
  }

  // optional uint64 old_ab = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->old_ab(), output);
  }

  // optional uint64 old_ib = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->old_ib(), output);
  }

  // optional uint64 old_wb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->old_wb(), output);
  }

  // optional uint32 params_changed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->params_changed(), output);
  }

  // optional uint32 update_bw = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->update_bw(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCompareBwFtraceEvent)
}

size_t MdpCompareBwFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCompareBwFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 new_ab = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->new_ab());
    }

    // optional uint64 new_ib = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->new_ib());
    }

    // optional uint64 new_wb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->new_wb());
    }

    // optional uint64 old_ab = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->old_ab());
    }

    // optional uint64 old_ib = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->old_ib());
    }

    // optional uint64 old_wb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->old_wb());
    }

    // optional uint32 params_changed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->params_changed());
    }

    // optional uint32 update_bw = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->update_bw());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCompareBwFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCompareBwFtraceEvent*>(
      &from));
}

void MdpCompareBwFtraceEvent::MergeFrom(const MdpCompareBwFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCompareBwFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      new_ab_ = from.new_ab_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_ib_ = from.new_ib_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_wb_ = from.new_wb_;
    }
    if (cached_has_bits & 0x00000008u) {
      old_ab_ = from.old_ab_;
    }
    if (cached_has_bits & 0x00000010u) {
      old_ib_ = from.old_ib_;
    }
    if (cached_has_bits & 0x00000020u) {
      old_wb_ = from.old_wb_;
    }
    if (cached_has_bits & 0x00000040u) {
      params_changed_ = from.params_changed_;
    }
    if (cached_has_bits & 0x00000080u) {
      update_bw_ = from.update_bw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCompareBwFtraceEvent::CopyFrom(const MdpCompareBwFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCompareBwFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCompareBwFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCompareBwFtraceEvent::InternalSwap(MdpCompareBwFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_ab_, other->new_ab_);
  swap(new_ib_, other->new_ib_);
  swap(new_wb_, other->new_wb_);
  swap(old_ab_, other->old_ab_);
  swap(old_ib_, other->old_ib_);
  swap(old_wb_, other->old_wb_);
  swap(params_changed_, other->params_changed_);
  swap(update_bw_, other->update_bw_);
}

std::string MdpCompareBwFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCompareBwFtraceEvent";
}


// ===================================================================

void MdpPerfSetPanicLutsFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfSetPanicLutsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfSetPanicLutsFtraceEvent>()._has_bits_);
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fmt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_panic_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_robust_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MdpPerfSetPanicLutsFtraceEvent::MdpPerfSetPanicLutsFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
}
MdpPerfSetPanicLutsFtraceEvent::MdpPerfSetPanicLutsFtraceEvent(const MdpPerfSetPanicLutsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pnum_, &from.pnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&robust_lut_) -
    reinterpret_cast<char*>(&pnum_)) + sizeof(robust_lut_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
}

void MdpPerfSetPanicLutsFtraceEvent::SharedCtor() {
  ::memset(&pnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robust_lut_) -
      reinterpret_cast<char*>(&pnum_)) + sizeof(robust_lut_));
}

MdpPerfSetPanicLutsFtraceEvent::~MdpPerfSetPanicLutsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  SharedDtor();
}

void MdpPerfSetPanicLutsFtraceEvent::SharedDtor() {
}

void MdpPerfSetPanicLutsFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfSetPanicLutsFtraceEvent& MdpPerfSetPanicLutsFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfSetPanicLutsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&robust_lut_) -
        reinterpret_cast<char*>(&pnum_)) + sizeof(robust_lut_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfSetPanicLutsFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fmt(&has_bits);
          fmt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 panic_lut = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_panic_lut(&has_bits);
          panic_lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 robust_lut = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_robust_lut(&has_bits);
          robust_lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfSetPanicLutsFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pnum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fmt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_fmt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 panic_lut = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_panic_lut(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &panic_lut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 robust_lut = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_robust_lut(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robust_lut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfSetPanicLutsFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->pnum(), output);
  }

  // optional uint32 fmt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->fmt(), output);
  }

  // optional uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  // optional uint32 panic_lut = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->panic_lut(), output);
  }

  // optional uint32 robust_lut = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->robust_lut(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
}

size_t MdpPerfSetPanicLutsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 fmt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fmt());
    }

    // optional uint32 mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 panic_lut = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->panic_lut());
    }

    // optional uint32 robust_lut = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->robust_lut());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfSetPanicLutsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfSetPanicLutsFtraceEvent*>(
      &from));
}

void MdpPerfSetPanicLutsFtraceEvent::MergeFrom(const MdpPerfSetPanicLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      fmt_ = from.fmt_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      panic_lut_ = from.panic_lut_;
    }
    if (cached_has_bits & 0x00000010u) {
      robust_lut_ = from.robust_lut_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfSetPanicLutsFtraceEvent::CopyFrom(const MdpPerfSetPanicLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfSetPanicLutsFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfSetPanicLutsFtraceEvent::InternalSwap(MdpPerfSetPanicLutsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pnum_, other->pnum_);
  swap(fmt_, other->fmt_);
  swap(mode_, other->mode_);
  swap(panic_lut_, other->panic_lut_);
  swap(robust_lut_, other->robust_lut_);
}

std::string MdpPerfSetPanicLutsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfSetPanicLutsFtraceEvent";
}


// ===================================================================

void MdpSsppSetFtraceEvent::InitAsDefaultInstance() {
}
class MdpSsppSetFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpSsppSetFtraceEvent>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_play_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mixer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_src_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_src_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_src_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_src_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dst_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dst_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dst_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dst_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

MdpSsppSetFtraceEvent::MdpSsppSetFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpSsppSetFtraceEvent)
}
MdpSsppSetFtraceEvent::MdpSsppSetFtraceEvent(const MdpSsppSetFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_h_) -
    reinterpret_cast<char*>(&num_)) + sizeof(dst_h_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpSsppSetFtraceEvent)
}

void MdpSsppSetFtraceEvent::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_h_) -
      reinterpret_cast<char*>(&num_)) + sizeof(dst_h_));
}

MdpSsppSetFtraceEvent::~MdpSsppSetFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpSsppSetFtraceEvent)
  SharedDtor();
}

void MdpSsppSetFtraceEvent::SharedDtor() {
}

void MdpSsppSetFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpSsppSetFtraceEvent& MdpSsppSetFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpSsppSetFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpSsppSetFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&img_h_) -
        reinterpret_cast<char*>(&num_)) + sizeof(img_h_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&src_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_h_) -
        reinterpret_cast<char*>(&src_x_)) + sizeof(dst_h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpSsppSetFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 play_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_play_cnt(&has_bits);
          play_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mixer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mixer(&has_bits);
          mixer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stage(&has_bits);
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_format(&has_bits);
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_img_w(&has_bits);
          img_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_img_h(&has_bits);
          img_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_src_x(&has_bits);
          src_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_src_y(&has_bits);
          src_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_w = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_src_w(&has_bits);
          src_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_h = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_src_h(&has_bits);
          src_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_x = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dst_x(&has_bits);
          dst_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dst_y(&has_bits);
          dst_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_w = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dst_w(&has_bits);
          dst_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_h = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dst_h(&has_bits);
          dst_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpSsppSetFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpSsppSetFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_play_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mixer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mixer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 format = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_format(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 img_w = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_img_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 img_h = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_img_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_x = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_src_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_y = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_src_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_w = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_src_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_h = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_src_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_x = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_dst_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_y = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_dst_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_w = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_dst_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dst_h = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_dst_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpSsppSetFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpSsppSetFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpSsppSetFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpSsppSetFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 play_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->play_cnt(), output);
  }

  // optional uint32 mixer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mixer(), output);
  }

  // optional uint32 stage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 format = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->format(), output);
  }

  // optional uint32 img_w = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->img_w(), output);
  }

  // optional uint32 img_h = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->img_h(), output);
  }

  // optional uint32 src_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->src_x(), output);
  }

  // optional uint32 src_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->src_y(), output);
  }

  // optional uint32 src_w = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->src_w(), output);
  }

  // optional uint32 src_h = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->src_h(), output);
  }

  // optional uint32 dst_x = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->dst_x(), output);
  }

  // optional uint32 dst_y = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->dst_y(), output);
  }

  // optional uint32 dst_w = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->dst_w(), output);
  }

  // optional uint32 dst_h = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->dst_h(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpSsppSetFtraceEvent)
}

size_t MdpSsppSetFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpSsppSetFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 play_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->play_cnt());
    }

    // optional uint32 mixer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mixer());
    }

    // optional uint32 stage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 format = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional uint32 img_w = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->img_w());
    }

    // optional uint32 img_h = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->img_h());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 src_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_x());
    }

    // optional uint32 src_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_y());
    }

    // optional uint32 src_w = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_w());
    }

    // optional uint32 src_h = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->src_h());
    }

    // optional uint32 dst_x = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_x());
    }

    // optional uint32 dst_y = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_y());
    }

    // optional uint32 dst_w = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_w());
    }

    // optional uint32 dst_h = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dst_h());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpSsppSetFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpSsppSetFtraceEvent*>(
      &from));
}

void MdpSsppSetFtraceEvent::MergeFrom(const MdpSsppSetFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpSsppSetFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      play_cnt_ = from.play_cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      mixer_ = from.mixer_;
    }
    if (cached_has_bits & 0x00000008u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      img_w_ = from.img_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      img_h_ = from.img_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      src_x_ = from.src_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      src_y_ = from.src_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      src_w_ = from.src_w_;
    }
    if (cached_has_bits & 0x00000800u) {
      src_h_ = from.src_h_;
    }
    if (cached_has_bits & 0x00001000u) {
      dst_x_ = from.dst_x_;
    }
    if (cached_has_bits & 0x00002000u) {
      dst_y_ = from.dst_y_;
    }
    if (cached_has_bits & 0x00004000u) {
      dst_w_ = from.dst_w_;
    }
    if (cached_has_bits & 0x00008000u) {
      dst_h_ = from.dst_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpSsppSetFtraceEvent::CopyFrom(const MdpSsppSetFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpSsppSetFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpSsppSetFtraceEvent::IsInitialized() const {
  return true;
}

void MdpSsppSetFtraceEvent::InternalSwap(MdpSsppSetFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_, other->num_);
  swap(play_cnt_, other->play_cnt_);
  swap(mixer_, other->mixer_);
  swap(stage_, other->stage_);
  swap(flags_, other->flags_);
  swap(format_, other->format_);
  swap(img_w_, other->img_w_);
  swap(img_h_, other->img_h_);
  swap(src_x_, other->src_x_);
  swap(src_y_, other->src_y_);
  swap(src_w_, other->src_w_);
  swap(src_h_, other->src_h_);
  swap(dst_x_, other->dst_x_);
  swap(dst_y_, other->dst_y_);
  swap(dst_w_, other->dst_w_);
  swap(dst_h_, other->dst_h_);
}

std::string MdpSsppSetFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpSsppSetFtraceEvent";
}


// ===================================================================

void MdpCmdReadptrDoneFtraceEvent::InitAsDefaultInstance() {
}
class MdpCmdReadptrDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCmdReadptrDoneFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_koff_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MdpCmdReadptrDoneFtraceEvent::MdpCmdReadptrDoneFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
}
MdpCmdReadptrDoneFtraceEvent::MdpCmdReadptrDoneFtraceEvent(const MdpCmdReadptrDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctl_num_, &from.ctl_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&koff_cnt_) -
    reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
}

void MdpCmdReadptrDoneFtraceEvent::SharedCtor() {
  ::memset(&ctl_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&koff_cnt_) -
      reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
}

MdpCmdReadptrDoneFtraceEvent::~MdpCmdReadptrDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  SharedDtor();
}

void MdpCmdReadptrDoneFtraceEvent::SharedDtor() {
}

void MdpCmdReadptrDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCmdReadptrDoneFtraceEvent& MdpCmdReadptrDoneFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCmdReadptrDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ctl_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&koff_cnt_) -
        reinterpret_cast<char*>(&ctl_num_)) + sizeof(koff_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCmdReadptrDoneFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 koff_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_koff_cnt(&has_bits);
          koff_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCmdReadptrDoneFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 koff_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_koff_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &koff_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCmdReadptrDoneFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  // optional int32 koff_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->koff_cnt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
}

size_t MdpCmdReadptrDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ctl_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ctl_num());
    }

    // optional int32 koff_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->koff_cnt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCmdReadptrDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCmdReadptrDoneFtraceEvent*>(
      &from));
}

void MdpCmdReadptrDoneFtraceEvent::MergeFrom(const MdpCmdReadptrDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ctl_num_ = from.ctl_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      koff_cnt_ = from.koff_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCmdReadptrDoneFtraceEvent::CopyFrom(const MdpCmdReadptrDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCmdReadptrDoneFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCmdReadptrDoneFtraceEvent::InternalSwap(MdpCmdReadptrDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
  swap(koff_cnt_, other->koff_cnt_);
}

std::string MdpCmdReadptrDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCmdReadptrDoneFtraceEvent";
}


// ===================================================================

void MdpMisrCrcFtraceEvent::InitAsDefaultInstance() {
}
class MdpMisrCrcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpMisrCrcFtraceEvent>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vsync_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MdpMisrCrcFtraceEvent::MdpMisrCrcFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpMisrCrcFtraceEvent)
}
MdpMisrCrcFtraceEvent::MdpMisrCrcFtraceEvent(const MdpMisrCrcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpMisrCrcFtraceEvent)
}

void MdpMisrCrcFtraceEvent::SharedCtor() {
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(crc_));
}

MdpMisrCrcFtraceEvent::~MdpMisrCrcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpMisrCrcFtraceEvent)
  SharedDtor();
}

void MdpMisrCrcFtraceEvent::SharedDtor() {
}

void MdpMisrCrcFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpMisrCrcFtraceEvent& MdpMisrCrcFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpMisrCrcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&block_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&block_id_)) + sizeof(crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpMisrCrcFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_id(&has_bits);
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vsync_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vsync_cnt(&has_bits);
          vsync_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpMisrCrcFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_block_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vsync_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_vsync_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vsync_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_crc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpMisrCrcFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpMisrCrcFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpMisrCrcFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 block_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  // optional uint32 vsync_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->vsync_cnt(), output);
  }

  // optional uint32 crc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->crc(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpMisrCrcFtraceEvent)
}

size_t MdpMisrCrcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 block_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 vsync_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->vsync_cnt());
    }

    // optional uint32 crc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpMisrCrcFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpMisrCrcFtraceEvent*>(
      &from));
}

void MdpMisrCrcFtraceEvent::MergeFrom(const MdpMisrCrcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      block_id_ = from.block_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vsync_cnt_ = from.vsync_cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpMisrCrcFtraceEvent::CopyFrom(const MdpMisrCrcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpMisrCrcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpMisrCrcFtraceEvent::IsInitialized() const {
  return true;
}

void MdpMisrCrcFtraceEvent::InternalSwap(MdpMisrCrcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_id_, other->block_id_);
  swap(vsync_cnt_, other->vsync_cnt_);
  swap(crc_, other->crc_);
}

std::string MdpMisrCrcFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpMisrCrcFtraceEvent";
}


// ===================================================================

void MdpPerfSetQosLutsFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfSetQosLutsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfSetQosLutsFtraceEvent>()._has_bits_);
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fmt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MdpPerfSetQosLutsFtraceEvent::MdpPerfSetQosLutsFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
}
MdpPerfSetQosLutsFtraceEvent::MdpPerfSetQosLutsFtraceEvent(const MdpPerfSetQosLutsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pnum_, &from.pnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&linear_) -
    reinterpret_cast<char*>(&pnum_)) + sizeof(linear_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
}

void MdpPerfSetQosLutsFtraceEvent::SharedCtor() {
  ::memset(&pnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_) -
      reinterpret_cast<char*>(&pnum_)) + sizeof(linear_));
}

MdpPerfSetQosLutsFtraceEvent::~MdpPerfSetQosLutsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  SharedDtor();
}

void MdpPerfSetQosLutsFtraceEvent::SharedDtor() {
}

void MdpPerfSetQosLutsFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfSetQosLutsFtraceEvent& MdpPerfSetQosLutsFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfSetQosLutsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&pnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linear_) -
        reinterpret_cast<char*>(&pnum_)) + sizeof(linear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfSetQosLutsFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fmt(&has_bits);
          fmt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_intf(&has_bits);
          intf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rot(&has_bits);
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fl(&has_bits);
          fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lut = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lut(&has_bits);
          lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 linear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_linear(&has_bits);
          linear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfSetQosLutsFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pnum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fmt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_fmt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_intf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rot = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_rot(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fl = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_fl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lut = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_lut(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 linear = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_linear(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfSetQosLutsFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->pnum(), output);
  }

  // optional uint32 fmt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->fmt(), output);
  }

  // optional uint32 intf = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->intf(), output);
  }

  // optional uint32 rot = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->rot(), output);
  }

  // optional uint32 fl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->fl(), output);
  }

  // optional uint32 lut = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->lut(), output);
  }

  // optional uint32 linear = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->linear(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
}

size_t MdpPerfSetQosLutsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 pnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 fmt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fmt());
    }

    // optional uint32 intf = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->intf());
    }

    // optional uint32 rot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rot());
    }

    // optional uint32 fl = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fl());
    }

    // optional uint32 lut = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->lut());
    }

    // optional uint32 linear = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->linear());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfSetQosLutsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfSetQosLutsFtraceEvent*>(
      &from));
}

void MdpPerfSetQosLutsFtraceEvent::MergeFrom(const MdpPerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      fmt_ = from.fmt_;
    }
    if (cached_has_bits & 0x00000004u) {
      intf_ = from.intf_;
    }
    if (cached_has_bits & 0x00000008u) {
      rot_ = from.rot_;
    }
    if (cached_has_bits & 0x00000010u) {
      fl_ = from.fl_;
    }
    if (cached_has_bits & 0x00000020u) {
      lut_ = from.lut_;
    }
    if (cached_has_bits & 0x00000040u) {
      linear_ = from.linear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfSetQosLutsFtraceEvent::CopyFrom(const MdpPerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfSetQosLutsFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfSetQosLutsFtraceEvent::InternalSwap(MdpPerfSetQosLutsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pnum_, other->pnum_);
  swap(fmt_, other->fmt_);
  swap(intf_, other->intf_);
  swap(rot_, other->rot_);
  swap(fl_, other->fl_);
  swap(lut_, other->lut_);
  swap(linear_, other->linear_);
}

std::string MdpPerfSetQosLutsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfSetQosLutsFtraceEvent";
}


// ===================================================================

void MdpTraceCounterFtraceEvent::InitAsDefaultInstance() {
}
class MdpTraceCounterFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpTraceCounterFtraceEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_counter_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MdpTraceCounterFtraceEvent::MdpTraceCounterFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpTraceCounterFtraceEvent)
}
MdpTraceCounterFtraceEvent::MdpTraceCounterFtraceEvent(const MdpTraceCounterFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_counter_name()) {
    counter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.counter_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpTraceCounterFtraceEvent)
}

void MdpTraceCounterFtraceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  counter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(value_));
}

MdpTraceCounterFtraceEvent::~MdpTraceCounterFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpTraceCounterFtraceEvent)
  SharedDtor();
}

void MdpTraceCounterFtraceEvent::SharedDtor() {
  counter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MdpTraceCounterFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpTraceCounterFtraceEvent& MdpTraceCounterFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpTraceCounterFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    counter_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpTraceCounterFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string counter_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_counter_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpTraceCounterFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string counter_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_counter_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpTraceCounterFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpTraceCounterFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpTraceCounterFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string counter_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->counter_name(), output);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpTraceCounterFtraceEvent)
}

size_t MdpTraceCounterFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string counter_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->counter_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpTraceCounterFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpTraceCounterFtraceEvent*>(
      &from));
}

void MdpTraceCounterFtraceEvent::MergeFrom(const MdpTraceCounterFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      counter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.counter_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpTraceCounterFtraceEvent::CopyFrom(const MdpTraceCounterFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpTraceCounterFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpTraceCounterFtraceEvent::IsInitialized() const {
  return true;
}

void MdpTraceCounterFtraceEvent::InternalSwap(MdpTraceCounterFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counter_name_.Swap(&other->counter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(value_, other->value_);
}

std::string MdpTraceCounterFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpTraceCounterFtraceEvent";
}


// ===================================================================

void MdpCmdReleaseBwFtraceEvent::InitAsDefaultInstance() {
}
class MdpCmdReleaseBwFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCmdReleaseBwFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MdpCmdReleaseBwFtraceEvent::MdpCmdReleaseBwFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
}
MdpCmdReleaseBwFtraceEvent::MdpCmdReleaseBwFtraceEvent(const MdpCmdReleaseBwFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctl_num_ = from.ctl_num_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
}

void MdpCmdReleaseBwFtraceEvent::SharedCtor() {
  ctl_num_ = 0u;
}

MdpCmdReleaseBwFtraceEvent::~MdpCmdReleaseBwFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  SharedDtor();
}

void MdpCmdReleaseBwFtraceEvent::SharedDtor() {
}

void MdpCmdReleaseBwFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCmdReleaseBwFtraceEvent& MdpCmdReleaseBwFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCmdReleaseBwFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctl_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCmdReleaseBwFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCmdReleaseBwFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCmdReleaseBwFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
}

size_t MdpCmdReleaseBwFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ctl_num = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ctl_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCmdReleaseBwFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCmdReleaseBwFtraceEvent*>(
      &from));
}

void MdpCmdReleaseBwFtraceEvent::MergeFrom(const MdpCmdReleaseBwFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctl_num()) {
    set_ctl_num(from.ctl_num());
  }
}

void MdpCmdReleaseBwFtraceEvent::CopyFrom(const MdpCmdReleaseBwFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCmdReleaseBwFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCmdReleaseBwFtraceEvent::InternalSwap(MdpCmdReleaseBwFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
}

std::string MdpCmdReleaseBwFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCmdReleaseBwFtraceEvent";
}


// ===================================================================

void MdpMixerUpdateFtraceEvent::InitAsDefaultInstance() {
}
class MdpMixerUpdateFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpMixerUpdateFtraceEvent>()._has_bits_);
  static void set_has_mixer_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MdpMixerUpdateFtraceEvent::MdpMixerUpdateFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpMixerUpdateFtraceEvent)
}
MdpMixerUpdateFtraceEvent::MdpMixerUpdateFtraceEvent(const MdpMixerUpdateFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mixer_num_ = from.mixer_num_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpMixerUpdateFtraceEvent)
}

void MdpMixerUpdateFtraceEvent::SharedCtor() {
  mixer_num_ = 0u;
}

MdpMixerUpdateFtraceEvent::~MdpMixerUpdateFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpMixerUpdateFtraceEvent)
  SharedDtor();
}

void MdpMixerUpdateFtraceEvent::SharedDtor() {
}

void MdpMixerUpdateFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpMixerUpdateFtraceEvent& MdpMixerUpdateFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpMixerUpdateFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mixer_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpMixerUpdateFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mixer_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mixer_num(&has_bits);
          mixer_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpMixerUpdateFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mixer_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_mixer_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixer_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpMixerUpdateFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpMixerUpdateFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpMixerUpdateFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mixer_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->mixer_num(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpMixerUpdateFtraceEvent)
}

size_t MdpMixerUpdateFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mixer_num = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->mixer_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpMixerUpdateFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpMixerUpdateFtraceEvent*>(
      &from));
}

void MdpMixerUpdateFtraceEvent::MergeFrom(const MdpMixerUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mixer_num()) {
    set_mixer_num(from.mixer_num());
  }
}

void MdpMixerUpdateFtraceEvent::CopyFrom(const MdpMixerUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpMixerUpdateFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpMixerUpdateFtraceEvent::IsInitialized() const {
  return true;
}

void MdpMixerUpdateFtraceEvent::InternalSwap(MdpMixerUpdateFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mixer_num_, other->mixer_num_);
}

std::string MdpMixerUpdateFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpMixerUpdateFtraceEvent";
}


// ===================================================================

void MdpPerfSetWmLevelsFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfSetWmLevelsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfSetWmLevelsFtraceEvent>()._has_bits_);
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wm0(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wm1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wm2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mb_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mb_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MdpPerfSetWmLevelsFtraceEvent::MdpPerfSetWmLevelsFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
}
MdpPerfSetWmLevelsFtraceEvent::MdpPerfSetWmLevelsFtraceEvent(const MdpPerfSetWmLevelsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pnum_, &from.pnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&mb_size_) -
    reinterpret_cast<char*>(&pnum_)) + sizeof(mb_size_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
}

void MdpPerfSetWmLevelsFtraceEvent::SharedCtor() {
  ::memset(&pnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mb_size_) -
      reinterpret_cast<char*>(&pnum_)) + sizeof(mb_size_));
}

MdpPerfSetWmLevelsFtraceEvent::~MdpPerfSetWmLevelsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  SharedDtor();
}

void MdpPerfSetWmLevelsFtraceEvent::SharedDtor() {
}

void MdpPerfSetWmLevelsFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfSetWmLevelsFtraceEvent& MdpPerfSetWmLevelsFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfSetWmLevelsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mb_size_) -
        reinterpret_cast<char*>(&pnum_)) + sizeof(mb_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfSetWmLevelsFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 use_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_space(&has_bits);
          use_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_priority_bytes(&has_bits);
          priority_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wm0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wm0(&has_bits);
          wm0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wm1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wm1(&has_bits);
          wm1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wm2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wm2(&has_bits);
          wm2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mb_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mb_cnt(&has_bits);
          mb_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mb_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mb_size(&has_bits);
          mb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfSetWmLevelsFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pnum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 use_space = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_use_space(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_priority_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wm0 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_wm0(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wm0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wm1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_wm1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wm1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wm2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_wm2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wm2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mb_cnt = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_mb_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mb_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mb_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_mb_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mb_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfSetWmLevelsFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->pnum(), output);
  }

  // optional uint32 use_space = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->use_space(), output);
  }

  // optional uint32 priority_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->priority_bytes(), output);
  }

  // optional uint32 wm0 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->wm0(), output);
  }

  // optional uint32 wm1 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->wm1(), output);
  }

  // optional uint32 wm2 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->wm2(), output);
  }

  // optional uint32 mb_cnt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->mb_cnt(), output);
  }

  // optional uint32 mb_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->mb_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
}

size_t MdpPerfSetWmLevelsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 pnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 use_space = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->use_space());
    }

    // optional uint32 priority_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->priority_bytes());
    }

    // optional uint32 wm0 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->wm0());
    }

    // optional uint32 wm1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->wm1());
    }

    // optional uint32 wm2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->wm2());
    }

    // optional uint32 mb_cnt = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mb_cnt());
    }

    // optional uint32 mb_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mb_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfSetWmLevelsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfSetWmLevelsFtraceEvent*>(
      &from));
}

void MdpPerfSetWmLevelsFtraceEvent::MergeFrom(const MdpPerfSetWmLevelsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_space_ = from.use_space_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_bytes_ = from.priority_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      wm0_ = from.wm0_;
    }
    if (cached_has_bits & 0x00000010u) {
      wm1_ = from.wm1_;
    }
    if (cached_has_bits & 0x00000020u) {
      wm2_ = from.wm2_;
    }
    if (cached_has_bits & 0x00000040u) {
      mb_cnt_ = from.mb_cnt_;
    }
    if (cached_has_bits & 0x00000080u) {
      mb_size_ = from.mb_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfSetWmLevelsFtraceEvent::CopyFrom(const MdpPerfSetWmLevelsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfSetWmLevelsFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfSetWmLevelsFtraceEvent::InternalSwap(MdpPerfSetWmLevelsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pnum_, other->pnum_);
  swap(use_space_, other->use_space_);
  swap(priority_bytes_, other->priority_bytes_);
  swap(wm0_, other->wm0_);
  swap(wm1_, other->wm1_);
  swap(wm2_, other->wm2_);
  swap(mb_cnt_, other->mb_cnt_);
  swap(mb_size_, other->mb_size_);
}

std::string MdpPerfSetWmLevelsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfSetWmLevelsFtraceEvent";
}


// ===================================================================

void MdpVideoUnderrunDoneFtraceEvent::InitAsDefaultInstance() {
}
class MdpVideoUnderrunDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpVideoUnderrunDoneFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_underrun_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MdpVideoUnderrunDoneFtraceEvent::MdpVideoUnderrunDoneFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
}
MdpVideoUnderrunDoneFtraceEvent::MdpVideoUnderrunDoneFtraceEvent(const MdpVideoUnderrunDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctl_num_, &from.ctl_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&underrun_cnt_) -
    reinterpret_cast<char*>(&ctl_num_)) + sizeof(underrun_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
}

void MdpVideoUnderrunDoneFtraceEvent::SharedCtor() {
  ::memset(&ctl_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underrun_cnt_) -
      reinterpret_cast<char*>(&ctl_num_)) + sizeof(underrun_cnt_));
}

MdpVideoUnderrunDoneFtraceEvent::~MdpVideoUnderrunDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  SharedDtor();
}

void MdpVideoUnderrunDoneFtraceEvent::SharedDtor() {
}

void MdpVideoUnderrunDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpVideoUnderrunDoneFtraceEvent& MdpVideoUnderrunDoneFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpVideoUnderrunDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ctl_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&underrun_cnt_) -
        reinterpret_cast<char*>(&ctl_num_)) + sizeof(underrun_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpVideoUnderrunDoneFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 underrun_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_underrun_cnt(&has_bits);
          underrun_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpVideoUnderrunDoneFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 underrun_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_underrun_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &underrun_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpVideoUnderrunDoneFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  // optional uint32 underrun_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->underrun_cnt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
}

size_t MdpVideoUnderrunDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ctl_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ctl_num());
    }

    // optional uint32 underrun_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->underrun_cnt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpVideoUnderrunDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpVideoUnderrunDoneFtraceEvent*>(
      &from));
}

void MdpVideoUnderrunDoneFtraceEvent::MergeFrom(const MdpVideoUnderrunDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ctl_num_ = from.ctl_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      underrun_cnt_ = from.underrun_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpVideoUnderrunDoneFtraceEvent::CopyFrom(const MdpVideoUnderrunDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpVideoUnderrunDoneFtraceEvent::IsInitialized() const {
  return true;
}

void MdpVideoUnderrunDoneFtraceEvent::InternalSwap(MdpVideoUnderrunDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
  swap(underrun_cnt_, other->underrun_cnt_);
}

std::string MdpVideoUnderrunDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpVideoUnderrunDoneFtraceEvent";
}


// ===================================================================

void MdpCmdWaitPingpongFtraceEvent::InitAsDefaultInstance() {
}
class MdpCmdWaitPingpongFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpCmdWaitPingpongFtraceEvent>()._has_bits_);
  static void set_has_ctl_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kickoff_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MdpCmdWaitPingpongFtraceEvent::MdpCmdWaitPingpongFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
}
MdpCmdWaitPingpongFtraceEvent::MdpCmdWaitPingpongFtraceEvent(const MdpCmdWaitPingpongFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctl_num_, &from.ctl_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&kickoff_cnt_) -
    reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
}

void MdpCmdWaitPingpongFtraceEvent::SharedCtor() {
  ::memset(&ctl_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickoff_cnt_) -
      reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
}

MdpCmdWaitPingpongFtraceEvent::~MdpCmdWaitPingpongFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  SharedDtor();
}

void MdpCmdWaitPingpongFtraceEvent::SharedDtor() {
}

void MdpCmdWaitPingpongFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpCmdWaitPingpongFtraceEvent& MdpCmdWaitPingpongFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpCmdWaitPingpongFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ctl_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kickoff_cnt_) -
        reinterpret_cast<char*>(&ctl_num_)) + sizeof(kickoff_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpCmdWaitPingpongFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ctl_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctl_num(&has_bits);
          ctl_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kickoff_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kickoff_cnt(&has_bits);
          kickoff_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpCmdWaitPingpongFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ctl_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ctl_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctl_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kickoff_cnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_kickoff_cnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickoff_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpCmdWaitPingpongFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ctl_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ctl_num(), output);
  }

  // optional int32 kickoff_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->kickoff_cnt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
}

size_t MdpCmdWaitPingpongFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ctl_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ctl_num());
    }

    // optional int32 kickoff_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->kickoff_cnt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpCmdWaitPingpongFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpCmdWaitPingpongFtraceEvent*>(
      &from));
}

void MdpCmdWaitPingpongFtraceEvent::MergeFrom(const MdpCmdWaitPingpongFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ctl_num_ = from.ctl_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      kickoff_cnt_ = from.kickoff_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpCmdWaitPingpongFtraceEvent::CopyFrom(const MdpCmdWaitPingpongFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpCmdWaitPingpongFtraceEvent::IsInitialized() const {
  return true;
}

void MdpCmdWaitPingpongFtraceEvent::InternalSwap(MdpCmdWaitPingpongFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctl_num_, other->ctl_num_);
  swap(kickoff_cnt_, other->kickoff_cnt_);
}

std::string MdpCmdWaitPingpongFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpCmdWaitPingpongFtraceEvent";
}


// ===================================================================

void MdpPerfPrefillCalcFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfPrefillCalcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfPrefillCalcFtraceEvent>()._has_bits_);
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latency_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y_scaler(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pp_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pp_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_post_sc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fbc_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prefill_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

MdpPerfPrefillCalcFtraceEvent::MdpPerfPrefillCalcFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
}
MdpPerfPrefillCalcFtraceEvent::MdpPerfPrefillCalcFtraceEvent(const MdpPerfPrefillCalcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pnum_, &from.pnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefill_bytes_) -
    reinterpret_cast<char*>(&pnum_)) + sizeof(prefill_bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
}

void MdpPerfPrefillCalcFtraceEvent::SharedCtor() {
  ::memset(&pnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefill_bytes_) -
      reinterpret_cast<char*>(&pnum_)) + sizeof(prefill_bytes_));
}

MdpPerfPrefillCalcFtraceEvent::~MdpPerfPrefillCalcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  SharedDtor();
}

void MdpPerfPrefillCalcFtraceEvent::SharedDtor() {
}

void MdpPerfPrefillCalcFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfPrefillCalcFtraceEvent& MdpPerfPrefillCalcFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfPrefillCalcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&post_sc_) -
        reinterpret_cast<char*>(&pnum_)) + sizeof(post_sc_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&fbc_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefill_bytes_) -
        reinterpret_cast<char*>(&fbc_bytes_)) + sizeof(prefill_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfPrefillCalcFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 latency_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_latency_buf(&has_bits);
          latency_buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ot(&has_bits);
          ot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y_buf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y_buf(&has_bits);
          y_buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y_scaler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_y_scaler(&has_bits);
          y_scaler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pp_lines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pp_lines(&has_bits);
          pp_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pp_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pp_bytes(&has_bits);
          pp_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 post_sc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_post_sc(&has_bits);
          post_sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fbc_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fbc_bytes(&has_bits);
          fbc_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prefill_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_prefill_bytes(&has_bits);
          prefill_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfPrefillCalcFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pnum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 latency_buf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_latency_buf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_buf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ot = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ot(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y_buf = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_y_buf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_buf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y_scaler = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_y_scaler(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_scaler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pp_lines = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_pp_lines(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pp_lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pp_bytes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_pp_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pp_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 post_sc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_post_sc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_sc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fbc_bytes = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_fbc_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fbc_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prefill_bytes = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_prefill_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefill_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfPrefillCalcFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->pnum(), output);
  }

  // optional uint32 latency_buf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->latency_buf(), output);
  }

  // optional uint32 ot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ot(), output);
  }

  // optional uint32 y_buf = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->y_buf(), output);
  }

  // optional uint32 y_scaler = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->y_scaler(), output);
  }

  // optional uint32 pp_lines = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->pp_lines(), output);
  }

  // optional uint32 pp_bytes = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->pp_bytes(), output);
  }

  // optional uint32 post_sc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->post_sc(), output);
  }

  // optional uint32 fbc_bytes = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->fbc_bytes(), output);
  }

  // optional uint32 prefill_bytes = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->prefill_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
}

size_t MdpPerfPrefillCalcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 pnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 latency_buf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->latency_buf());
    }

    // optional uint32 ot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ot());
    }

    // optional uint32 y_buf = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->y_buf());
    }

    // optional uint32 y_scaler = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->y_scaler());
    }

    // optional uint32 pp_lines = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pp_lines());
    }

    // optional uint32 pp_bytes = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pp_bytes());
    }

    // optional uint32 post_sc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->post_sc());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 fbc_bytes = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fbc_bytes());
    }

    // optional uint32 prefill_bytes = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->prefill_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfPrefillCalcFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfPrefillCalcFtraceEvent*>(
      &from));
}

void MdpPerfPrefillCalcFtraceEvent::MergeFrom(const MdpPerfPrefillCalcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      latency_buf_ = from.latency_buf_;
    }
    if (cached_has_bits & 0x00000004u) {
      ot_ = from.ot_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_buf_ = from.y_buf_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_scaler_ = from.y_scaler_;
    }
    if (cached_has_bits & 0x00000020u) {
      pp_lines_ = from.pp_lines_;
    }
    if (cached_has_bits & 0x00000040u) {
      pp_bytes_ = from.pp_bytes_;
    }
    if (cached_has_bits & 0x00000080u) {
      post_sc_ = from.post_sc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      fbc_bytes_ = from.fbc_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      prefill_bytes_ = from.prefill_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfPrefillCalcFtraceEvent::CopyFrom(const MdpPerfPrefillCalcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfPrefillCalcFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfPrefillCalcFtraceEvent::InternalSwap(MdpPerfPrefillCalcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pnum_, other->pnum_);
  swap(latency_buf_, other->latency_buf_);
  swap(ot_, other->ot_);
  swap(y_buf_, other->y_buf_);
  swap(y_scaler_, other->y_scaler_);
  swap(pp_lines_, other->pp_lines_);
  swap(pp_bytes_, other->pp_bytes_);
  swap(post_sc_, other->post_sc_);
  swap(fbc_bytes_, other->fbc_bytes_);
  swap(prefill_bytes_, other->prefill_bytes_);
}

std::string MdpPerfPrefillCalcFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfPrefillCalcFtraceEvent";
}


// ===================================================================

void MdpPerfUpdateBusFtraceEvent::InitAsDefaultInstance() {
}
class MdpPerfUpdateBusFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MdpPerfUpdateBusFtraceEvent>()._has_bits_);
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ab_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ib_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MdpPerfUpdateBusFtraceEvent::MdpPerfUpdateBusFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
}
MdpPerfUpdateBusFtraceEvent::MdpPerfUpdateBusFtraceEvent(const MdpPerfUpdateBusFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ab_quota_, &from.ab_quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_) -
    reinterpret_cast<char*>(&ab_quota_)) + sizeof(client_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
}

void MdpPerfUpdateBusFtraceEvent::SharedCtor() {
  ::memset(&ab_quota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_) -
      reinterpret_cast<char*>(&ab_quota_)) + sizeof(client_));
}

MdpPerfUpdateBusFtraceEvent::~MdpPerfUpdateBusFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  SharedDtor();
}

void MdpPerfUpdateBusFtraceEvent::SharedDtor() {
}

void MdpPerfUpdateBusFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdpPerfUpdateBusFtraceEvent& MdpPerfUpdateBusFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void MdpPerfUpdateBusFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ab_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_) -
        reinterpret_cast<char*>(&ab_quota_)) + sizeof(client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdpPerfUpdateBusFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client(&has_bits);
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ab_quota = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ab_quota(&has_bits);
          ab_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ib_quota = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ib_quota(&has_bits);
          ib_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdpPerfUpdateBusFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_client(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ab_quota = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ab_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ab_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ib_quota = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ib_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ib_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdpPerfUpdateBusFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 client = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->client(), output);
  }

  // optional uint64 ab_quota = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ab_quota(), output);
  }

  // optional uint64 ib_quota = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ib_quota(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
}

size_t MdpPerfUpdateBusFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ab_quota = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ab_quota());
    }

    // optional uint64 ib_quota = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ib_quota());
    }

    // optional int32 client = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->client());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdpPerfUpdateBusFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MdpPerfUpdateBusFtraceEvent*>(
      &from));
}

void MdpPerfUpdateBusFtraceEvent::MergeFrom(const MdpPerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ab_quota_ = from.ab_quota_;
    }
    if (cached_has_bits & 0x00000002u) {
      ib_quota_ = from.ib_quota_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ = from.client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MdpPerfUpdateBusFtraceEvent::CopyFrom(const MdpPerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdpPerfUpdateBusFtraceEvent::IsInitialized() const {
  return true;
}

void MdpPerfUpdateBusFtraceEvent::InternalSwap(MdpPerfUpdateBusFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ab_quota_, other->ab_quota_);
  swap(ib_quota_, other->ib_quota_);
  swap(client_, other->client_);
}

std::string MdpPerfUpdateBusFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MdpPerfUpdateBusFtraceEvent";
}


// ===================================================================

void RotatorBwAoAsContextFtraceEvent::InitAsDefaultInstance() {
}
class RotatorBwAoAsContextFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<RotatorBwAoAsContextFtraceEvent>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RotatorBwAoAsContextFtraceEvent::RotatorBwAoAsContextFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
}
RotatorBwAoAsContextFtraceEvent::RotatorBwAoAsContextFtraceEvent(const RotatorBwAoAsContextFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
}

void RotatorBwAoAsContextFtraceEvent::SharedCtor() {
  state_ = 0u;
}

RotatorBwAoAsContextFtraceEvent::~RotatorBwAoAsContextFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  SharedDtor();
}

void RotatorBwAoAsContextFtraceEvent::SharedDtor() {
}

void RotatorBwAoAsContextFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotatorBwAoAsContextFtraceEvent& RotatorBwAoAsContextFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base);
  return *internal_default_instance();
}


void RotatorBwAoAsContextFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotatorBwAoAsContextFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotatorBwAoAsContextFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotatorBwAoAsContextFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
}

size_t RotatorBwAoAsContextFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotatorBwAoAsContextFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RotatorBwAoAsContextFtraceEvent*>(
      &from));
}

void RotatorBwAoAsContextFtraceEvent::MergeFrom(const RotatorBwAoAsContextFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void RotatorBwAoAsContextFtraceEvent::CopyFrom(const RotatorBwAoAsContextFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotatorBwAoAsContextFtraceEvent::IsInitialized() const {
  return true;
}

void RotatorBwAoAsContextFtraceEvent::InternalSwap(RotatorBwAoAsContextFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

std::string RotatorBwAoAsContextFtraceEvent::GetTypeName() const {
  return "perfetto.protos.RotatorBwAoAsContextFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCmdKickoffFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCmdKickoffFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCmdKickoffFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCommitFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCommitFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCommitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfSetOtFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfSetOtFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfSetOtFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpSsppChangeFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpSsppChangeFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpSsppChangeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::TracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCompareBwFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCompareBwFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCompareBwFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpSsppSetFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpSsppSetFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpSsppSetFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpMisrCrcFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpMisrCrcFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpMisrCrcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpTraceCounterFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpTraceCounterFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpTraceCounterFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCmdReleaseBwFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCmdReleaseBwFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpMixerUpdateFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpMixerUpdateFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpMixerUpdateFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MdpPerfUpdateBusFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MdpPerfUpdateBusFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::RotatorBwAoAsContextFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::RotatorBwAoAsContextFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
