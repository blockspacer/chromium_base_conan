// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class FtraceEvent;
class MaliTracingMarkWriteFtraceEvent;
class G2dTracingMarkWriteFtraceEvent;
class DpuTracingMarkWriteFtraceEvent;
class FastrpcDmaStatFtraceEvent;
class CpuhpLatencyFtraceEvent;
class CpuhpEnterFtraceEvent;
class CpuhpMultiEnterFtraceEvent;
class CpuhpExitFtraceEvent;
class CdevUpdateFtraceEvent;
class ThermalTemperatureFtraceEvent;
class GpuMemTotalFtraceEvent;
class ScmCallEndFtraceEvent;
class ScmCallStartFtraceEvent;
class IonBufferDestroyFtraceEvent;
class IonBufferCreateFtraceEvent;
class IonStatFtraceEvent;
class MarkVictimFtraceEvent;
class SdeTracingMarkWriteFtraceEvent;
class GpuFrequencyFtraceEvent;
class ZeroFtraceEvent;
class SysExitFtraceEvent;
class SysEnterFtraceEvent;
class MmEventRecordFtraceEvent;
class GenericFtraceEvent;
class GenericFtraceEvent_Field;
class OomScoreAdjUpdateFtraceEvent;
class SignalGenerateFtraceEvent;
class SignalDeliverFtraceEvent;
class BinderTransactionAllocBufFtraceEvent;
class ClkSetRateFtraceEvent;
class ClkDisableFtraceEvent;
class ClkEnableFtraceEvent;
class FenceSignaledFtraceEvent;
class FenceEnableSignalFtraceEvent;
class FenceDestroyFtraceEvent;
class FenceInitFtraceEvent;
class IonHeapGrowFtraceEvent;
class IonHeapShrinkFtraceEvent;
class RssStatFtraceEvent;
class MmPagePcpuDrainFtraceEvent;
class MmPageFreeBatchedFtraceEvent;
class MmPageFreeFtraceEvent;
class MmPageAllocZoneLockedFtraceEvent;
class MmPageAllocExtfragFtraceEvent;
class MmPageAllocFtraceEvent;
class MigrateRetryFtraceEvent;
class MigratePagesStartFtraceEvent;
class MigratePagesEndFtraceEvent;
class KmemCacheFreeFtraceEvent;
class KmemCacheAllocNodeFtraceEvent;
class KmemCacheAllocFtraceEvent;
class KmallocNodeFtraceEvent;
class KmallocFtraceEvent;
class KfreeFtraceEvent;
class IonSecureCmaShrinkPoolStartFtraceEvent;
class IonSecureCmaShrinkPoolEndFtraceEvent;
class IonSecureCmaAllocateStartFtraceEvent;
class IonSecureCmaAllocateEndFtraceEvent;
class IonSecureCmaAddToPoolStartFtraceEvent;
class IonSecureCmaAddToPoolEndFtraceEvent;
class IonPrefetchingFtraceEvent;
class IonCpSecureBufferStartFtraceEvent;
class IonCpSecureBufferEndFtraceEvent;
class IonCpAllocRetryFtraceEvent;
class IonAllocBufferStartFtraceEvent;
class IonAllocBufferFallbackFtraceEvent;
class IonAllocBufferFailFtraceEvent;
class IonAllocBufferEndFtraceEvent;
class IommuSecPtblMapRangeStartFtraceEvent;
class IommuSecPtblMapRangeEndFtraceEvent;
class IommuMapRangeFtraceEvent;
class DmaAllocContiguousRetryFtraceEvent;
class AllocPagesSysStartFtraceEvent;
class AllocPagesSysFailFtraceEvent;
class AllocPagesSysEndFtraceEvent;
class AllocPagesIommuStartFtraceEvent;
class AllocPagesIommuFailFtraceEvent;
class AllocPagesIommuEndFtraceEvent;
class F2fsWriteEndFtraceEvent;
class F2fsWriteCheckpointFtraceEvent;
class F2fsWriteBeginFtraceEvent;
class F2fsVmPageMkwriteFtraceEvent;
class F2fsUnlinkExitFtraceEvent;
class F2fsUnlinkEnterFtraceEvent;
class F2fsTruncatePartialNodesFtraceEvent;
class F2fsTruncateNodesExitFtraceEvent;
class F2fsTruncateNodesEnterFtraceEvent;
class F2fsTruncateNodeFtraceEvent;
class F2fsTruncateInodeBlocksExitFtraceEvent;
class F2fsTruncateInodeBlocksEnterFtraceEvent;
class F2fsTruncateDataBlocksRangeFtraceEvent;
class F2fsTruncateBlocksExitFtraceEvent;
class F2fsTruncateBlocksEnterFtraceEvent;
class F2fsTruncateFtraceEvent;
class F2fsSyncFsFtraceEvent;
class F2fsSyncFileExitFtraceEvent;
class F2fsSyncFileEnterFtraceEvent;
class F2fsSubmitWritePageFtraceEvent;
class F2fsSetPageDirtyFtraceEvent;
class F2fsReserveNewBlockFtraceEvent;
class F2fsReadpageFtraceEvent;
class F2fsNewInodeFtraceEvent;
class F2fsIgetExitFtraceEvent;
class F2fsIgetFtraceEvent;
class F2fsGetVictimFtraceEvent;
class F2fsGetDataBlockFtraceEvent;
class F2fsFallocateFtraceEvent;
class F2fsEvictInodeFtraceEvent;
class F2fsDoSubmitBioFtraceEvent;
class SchedProcessWaitFtraceEvent;
class SchedProcessHangFtraceEvent;
class SchedProcessFreeFtraceEvent;
class SchedProcessForkFtraceEvent;
class SchedProcessExitFtraceEvent;
class SchedProcessExecFtraceEvent;
class TaskRenameFtraceEvent;
class TaskNewtaskFtraceEvent;
class Ext4ZeroRangeFtraceEvent;
class Ext4WritepagesResultFtraceEvent;
class Ext4WritepagesFtraceEvent;
class Ext4WritepageFtraceEvent;
class Ext4WriteEndFtraceEvent;
class Ext4WriteBeginFtraceEvent;
class Ext4UnlinkExitFtraceEvent;
class Ext4UnlinkEnterFtraceEvent;
class Ext4TruncateExitFtraceEvent;
class Ext4TruncateEnterFtraceEvent;
class Ext4TrimExtentFtraceEvent;
class Ext4TrimAllFreeFtraceEvent;
class Ext4SyncFsFtraceEvent;
class Ext4RequestInodeFtraceEvent;
class Ext4RequestBlocksFtraceEvent;
class Ext4RemoveBlocksFtraceEvent;
class Ext4ReleasepageFtraceEvent;
class Ext4ReadpageFtraceEvent;
class Ext4ReadBlockBitmapLoadFtraceEvent;
class Ext4PunchHoleFtraceEvent;
class Ext4OtherInodeUpdateTimeFtraceEvent;
class Ext4MballocPreallocFtraceEvent;
class Ext4MballocFreeFtraceEvent;
class Ext4MballocDiscardFtraceEvent;
class Ext4MballocAllocFtraceEvent;
class Ext4MbReleaseInodePaFtraceEvent;
class Ext4MbReleaseGroupPaFtraceEvent;
class Ext4MbNewInodePaFtraceEvent;
class Ext4MbNewGroupPaFtraceEvent;
class Ext4MbDiscardPreallocationsFtraceEvent;
class Ext4MbBuddyBitmapLoadFtraceEvent;
class Ext4MbBitmapLoadFtraceEvent;
class Ext4MarkInodeDirtyFtraceEvent;
class Ext4LoadInodeBitmapFtraceEvent;
class Ext4LoadInodeFtraceEvent;
class Ext4JournalledWriteEndFtraceEvent;
class Ext4JournalledInvalidatepageFtraceEvent;
class Ext4JournalStartReservedFtraceEvent;
class Ext4JournalStartFtraceEvent;
class Ext4InvalidatepageFtraceEvent;
class Ext4InsertRangeFtraceEvent;
class Ext4IndMapBlocksExitFtraceEvent;
class Ext4IndMapBlocksEnterFtraceEvent;
class Ext4GetReservedClusterAllocFtraceEvent;
class Ext4GetImpliedClusterAllocExitFtraceEvent;
class Ext4FreeInodeFtraceEvent;
class Ext4FreeBlocksFtraceEvent;
class Ext4ForgetFtraceEvent;
class Ext4FindDelallocRangeFtraceEvent;
class Ext4FallocateExitFtraceEvent;
class Ext4FallocateEnterFtraceEvent;
class Ext4ExtShowExtentFtraceEvent;
class Ext4ExtRmLeafFtraceEvent;
class Ext4ExtRmIdxFtraceEvent;
class Ext4ExtRemoveSpaceDoneFtraceEvent;
class Ext4ExtRemoveSpaceFtraceEvent;
class Ext4ExtPutInCacheFtraceEvent;
class Ext4ExtMapBlocksExitFtraceEvent;
class Ext4ExtMapBlocksEnterFtraceEvent;
class Ext4ExtLoadExtentFtraceEvent;
class Ext4ExtInCacheFtraceEvent;
class Ext4ExtHandleUnwrittenExtentsFtraceEvent;
class Ext4ExtConvertToInitializedFastpathFtraceEvent;
class Ext4ExtConvertToInitializedEnterFtraceEvent;
class Ext4EvictInodeFtraceEvent;
class Ext4EsShrinkScanExitFtraceEvent;
class Ext4EsShrinkScanEnterFtraceEvent;
class Ext4EsShrinkCountFtraceEvent;
class Ext4EsShrinkFtraceEvent;
class Ext4EsRemoveExtentFtraceEvent;
class Ext4EsLookupExtentExitFtraceEvent;
class Ext4EsLookupExtentEnterFtraceEvent;
class Ext4EsInsertExtentFtraceEvent;
class Ext4EsFindDelayedExtentRangeExitFtraceEvent;
class Ext4EsFindDelayedExtentRangeEnterFtraceEvent;
class Ext4EsCacheExtentFtraceEvent;
class Ext4DropInodeFtraceEvent;
class Ext4DiscardPreallocationsFtraceEvent;
class Ext4DiscardBlocksFtraceEvent;
class Ext4DirectIOExitFtraceEvent;
class Ext4DirectIOEnterFtraceEvent;
class Ext4DaWritePagesExtentFtraceEvent;
class Ext4DaWritePagesFtraceEvent;
class Ext4DaUpdateReserveSpaceFtraceEvent;
class Ext4DaReserveSpaceFtraceEvent;
class Ext4DaReleaseSpaceFtraceEvent;
class Ext4CollapseRangeFtraceEvent;
class Ext4BeginOrderedTruncateFtraceEvent;
class Ext4AllocateInodeFtraceEvent;
class Ext4AllocateBlocksFtraceEvent;
class Ext4AllocDaBlocksFtraceEvent;
class BlockUnplugFtraceEvent;
class BlockTouchBufferFtraceEvent;
class BlockSplitFtraceEvent;
class BlockSleeprqFtraceEvent;
class BlockRqRequeueFtraceEvent;
class BlockRqRemapFtraceEvent;
class BlockRqInsertFtraceEvent;
class BlockRqCompleteFtraceEvent;
class BlockRqAbortFtraceEvent;
class BlockPlugFtraceEvent;
class BlockGetrqFtraceEvent;
class BlockDirtyBufferFtraceEvent;
class BlockBioRemapFtraceEvent;
class BlockBioQueueFtraceEvent;
class BlockBioFrontmergeFtraceEvent;
class BlockBioCompleteFtraceEvent;
class BlockBioBounceFtraceEvent;
class BlockBioBackmergeFtraceEvent;
class SchedWakeupNewFtraceEvent;
class SuspendResumeFtraceEvent;
class MmCompactionWakeupKcompactdFtraceEvent;
class MmCompactionTryToCompactPagesFtraceEvent;
class MmCompactionSuitableFtraceEvent;
class MmCompactionMigratepagesFtraceEvent;
class MmCompactionKcompactdWakeFtraceEvent;
class MmCompactionKcompactdSleepFtraceEvent;
class MmCompactionIsolateMigratepagesFtraceEvent;
class MmCompactionIsolateFreepagesFtraceEvent;
class MmCompactionFinishedFtraceEvent;
class MmCompactionEndFtraceEvent;
class MmCompactionDeferResetFtraceEvent;
class MmCompactionDeferredFtraceEvent;
class MmCompactionDeferCompactionFtraceEvent;
class MmCompactionBeginFtraceEvent;
class MmFilemapDeleteFromPageCacheFtraceEvent;
class MmFilemapAddToPageCacheFtraceEvent;
class RotatorBwAoAsContextFtraceEvent;
class MdpPerfUpdateBusFtraceEvent;
class MdpPerfPrefillCalcFtraceEvent;
class MdpCmdWaitPingpongFtraceEvent;
class MdpVideoUnderrunDoneFtraceEvent;
class MdpPerfSetWmLevelsFtraceEvent;
class MdpMixerUpdateFtraceEvent;
class MdpCmdReleaseBwFtraceEvent;
class MdpTraceCounterFtraceEvent;
class MdpPerfSetQosLutsFtraceEvent;
class MdpMisrCrcFtraceEvent;
class MdpCmdReadptrDoneFtraceEvent;
class MdpSsppSetFtraceEvent;
class MdpPerfSetPanicLutsFtraceEvent;
class MdpCompareBwFtraceEvent;
class MdpCmdPingpongDoneFtraceEvent;
class TracingMarkWriteFtraceEvent;
class MdpSsppChangeFtraceEvent;
class MdpPerfSetOtFtraceEvent;
class MdpCommitFtraceEvent;
class MdpCmdKickoffFtraceEvent;
class CgroupSetupRootFtraceEvent;
class CgroupRenameFtraceEvent;
class CgroupReleaseFtraceEvent;
class CgroupDestroyRootFtraceEvent;
class CgroupTransferTasksFtraceEvent;
class CgroupRmdirFtraceEvent;
class CgroupRemountFtraceEvent;
class CgroupMkdirFtraceEvent;
class CgroupAttachTaskFtraceEvent;
class RegulatorSetVoltageCompleteFtraceEvent;
class RegulatorSetVoltageFtraceEvent;
class RegulatorEnableDelayFtraceEvent;
class RegulatorEnableCompleteFtraceEvent;
class RegulatorEnableFtraceEvent;
class RegulatorDisableCompleteFtraceEvent;
class RegulatorDisableFtraceEvent;
class WorkqueueQueueWorkFtraceEvent;
class WorkqueueExecuteStartFtraceEvent;
class WorkqueueExecuteEndFtraceEvent;
class WorkqueueActivateWorkFtraceEvent;
class BinderUnlockFtraceEvent;
class BinderLockedFtraceEvent;
class BinderLockFtraceEvent;
class BinderSetPriorityFtraceEvent;
class BinderTransactionReceivedFtraceEvent;
class BinderTransactionFtraceEvent;
class MmVmscanKswapdSleepFtraceEvent;
class MmVmscanKswapdWakeFtraceEvent;
class MmVmscanDirectReclaimEndFtraceEvent;
class MmVmscanDirectReclaimBeginFtraceEvent;
class BlockRqIssueFtraceEvent;
class Ext4SyncFileExitFtraceEvent;
class Ext4SyncFileEnterFtraceEvent;
class Ext4DaWriteEndFtraceEvent;
class Ext4DaWriteBeginFtraceEvent;
class SyncWaitFtraceEvent;
class SyncTimelineFtraceEvent;
class SyncPtFtraceEvent;
class IrqHandlerExitFtraceEvent;
class IrqHandlerEntryFtraceEvent;
class LowmemoryKillFtraceEvent;
class SmbusReplyFtraceEvent;
class SmbusResultFtraceEvent;
class SmbusWriteFtraceEvent;
class SmbusReadFtraceEvent;
class I2cReplyFtraceEvent;
class I2cResultFtraceEvent;
class I2cWriteFtraceEvent;
class I2cReadFtraceEvent;
class SoftirqRaiseFtraceEvent;
class SoftirqExitFtraceEvent;
class SoftirqEntryFtraceEvent;
class IpiRaiseFtraceEvent;
class IpiExitFtraceEvent;
class IpiEntryFtraceEvent;
class SchedWakingFtraceEvent;
class SchedCpuHotplugFtraceEvent;
class SchedBlockedReasonFtraceEvent;
class SchedWakeupFtraceEvent;
class ClockSetRateFtraceEvent;
class ClockDisableFtraceEvent;
class ClockEnableFtraceEvent;
class CpuIdleFtraceEvent;
class CpuFrequencyLimitsFtraceEvent;
class CpuFrequencyFtraceEvent;
class SchedSwitchFtraceEvent;
class PrintFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT FtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTimestampFieldNumber = 1,
    kPidFieldNumber = 2,
    kPrintFieldNumber = 3,
    kSchedSwitchFieldNumber = 4,
    kCpuFrequencyFieldNumber = 11,
    kCpuFrequencyLimitsFieldNumber = 12,
    kCpuIdleFieldNumber = 13,
    kClockEnableFieldNumber = 14,
    kClockDisableFieldNumber = 15,
    kClockSetRateFieldNumber = 16,
    kSchedWakeupFieldNumber = 17,
    kSchedBlockedReasonFieldNumber = 18,
    kSchedCpuHotplugFieldNumber = 19,
    kSchedWakingFieldNumber = 20,
    kIpiEntryFieldNumber = 21,
    kIpiExitFieldNumber = 22,
    kIpiRaiseFieldNumber = 23,
    kSoftirqEntryFieldNumber = 24,
    kSoftirqExitFieldNumber = 25,
    kSoftirqRaiseFieldNumber = 26,
    kI2cReadFieldNumber = 27,
    kI2cWriteFieldNumber = 28,
    kI2cResultFieldNumber = 29,
    kI2cReplyFieldNumber = 30,
    kSmbusReadFieldNumber = 31,
    kSmbusWriteFieldNumber = 32,
    kSmbusResultFieldNumber = 33,
    kSmbusReplyFieldNumber = 34,
    kLowmemoryKillFieldNumber = 35,
    kIrqHandlerEntryFieldNumber = 36,
    kIrqHandlerExitFieldNumber = 37,
    kSyncPtFieldNumber = 38,
    kSyncTimelineFieldNumber = 39,
    kSyncWaitFieldNumber = 40,
    kExt4DaWriteBeginFieldNumber = 41,
    kExt4DaWriteEndFieldNumber = 42,
    kExt4SyncFileEnterFieldNumber = 43,
    kExt4SyncFileExitFieldNumber = 44,
    kBlockRqIssueFieldNumber = 45,
    kMmVmscanDirectReclaimBeginFieldNumber = 46,
    kMmVmscanDirectReclaimEndFieldNumber = 47,
    kMmVmscanKswapdWakeFieldNumber = 48,
    kMmVmscanKswapdSleepFieldNumber = 49,
    kBinderTransactionFieldNumber = 50,
    kBinderTransactionReceivedFieldNumber = 51,
    kBinderSetPriorityFieldNumber = 52,
    kBinderLockFieldNumber = 53,
    kBinderLockedFieldNumber = 54,
    kBinderUnlockFieldNumber = 55,
    kWorkqueueActivateWorkFieldNumber = 56,
    kWorkqueueExecuteEndFieldNumber = 57,
    kWorkqueueExecuteStartFieldNumber = 58,
    kWorkqueueQueueWorkFieldNumber = 59,
    kRegulatorDisableFieldNumber = 60,
    kRegulatorDisableCompleteFieldNumber = 61,
    kRegulatorEnableFieldNumber = 62,
    kRegulatorEnableCompleteFieldNumber = 63,
    kRegulatorEnableDelayFieldNumber = 64,
    kRegulatorSetVoltageFieldNumber = 65,
    kRegulatorSetVoltageCompleteFieldNumber = 66,
    kCgroupAttachTaskFieldNumber = 67,
    kCgroupMkdirFieldNumber = 68,
    kCgroupRemountFieldNumber = 69,
    kCgroupRmdirFieldNumber = 70,
    kCgroupTransferTasksFieldNumber = 71,
    kCgroupDestroyRootFieldNumber = 72,
    kCgroupReleaseFieldNumber = 73,
    kCgroupRenameFieldNumber = 74,
    kCgroupSetupRootFieldNumber = 75,
    kMdpCmdKickoffFieldNumber = 76,
    kMdpCommitFieldNumber = 77,
    kMdpPerfSetOtFieldNumber = 78,
    kMdpSsppChangeFieldNumber = 79,
    kTracingMarkWriteFieldNumber = 80,
    kMdpCmdPingpongDoneFieldNumber = 81,
    kMdpCompareBwFieldNumber = 82,
    kMdpPerfSetPanicLutsFieldNumber = 83,
    kMdpSsppSetFieldNumber = 84,
    kMdpCmdReadptrDoneFieldNumber = 85,
    kMdpMisrCrcFieldNumber = 86,
    kMdpPerfSetQosLutsFieldNumber = 87,
    kMdpTraceCounterFieldNumber = 88,
    kMdpCmdReleaseBwFieldNumber = 89,
    kMdpMixerUpdateFieldNumber = 90,
    kMdpPerfSetWmLevelsFieldNumber = 91,
    kMdpVideoUnderrunDoneFieldNumber = 92,
    kMdpCmdWaitPingpongFieldNumber = 93,
    kMdpPerfPrefillCalcFieldNumber = 94,
    kMdpPerfUpdateBusFieldNumber = 95,
    kRotatorBwAoAsContextFieldNumber = 96,
    kMmFilemapAddToPageCacheFieldNumber = 97,
    kMmFilemapDeleteFromPageCacheFieldNumber = 98,
    kMmCompactionBeginFieldNumber = 99,
    kMmCompactionDeferCompactionFieldNumber = 100,
    kMmCompactionDeferredFieldNumber = 101,
    kMmCompactionDeferResetFieldNumber = 102,
    kMmCompactionEndFieldNumber = 103,
    kMmCompactionFinishedFieldNumber = 104,
    kMmCompactionIsolateFreepagesFieldNumber = 105,
    kMmCompactionIsolateMigratepagesFieldNumber = 106,
    kMmCompactionKcompactdSleepFieldNumber = 107,
    kMmCompactionKcompactdWakeFieldNumber = 108,
    kMmCompactionMigratepagesFieldNumber = 109,
    kMmCompactionSuitableFieldNumber = 110,
    kMmCompactionTryToCompactPagesFieldNumber = 111,
    kMmCompactionWakeupKcompactdFieldNumber = 112,
    kSuspendResumeFieldNumber = 113,
    kSchedWakeupNewFieldNumber = 114,
    kBlockBioBackmergeFieldNumber = 115,
    kBlockBioBounceFieldNumber = 116,
    kBlockBioCompleteFieldNumber = 117,
    kBlockBioFrontmergeFieldNumber = 118,
    kBlockBioQueueFieldNumber = 119,
    kBlockBioRemapFieldNumber = 120,
    kBlockDirtyBufferFieldNumber = 121,
    kBlockGetrqFieldNumber = 122,
    kBlockPlugFieldNumber = 123,
    kBlockRqAbortFieldNumber = 124,
    kBlockRqCompleteFieldNumber = 125,
    kBlockRqInsertFieldNumber = 126,
    kBlockRqRemapFieldNumber = 128,
    kBlockRqRequeueFieldNumber = 129,
    kBlockSleeprqFieldNumber = 130,
    kBlockSplitFieldNumber = 131,
    kBlockTouchBufferFieldNumber = 132,
    kBlockUnplugFieldNumber = 133,
    kExt4AllocDaBlocksFieldNumber = 134,
    kExt4AllocateBlocksFieldNumber = 135,
    kExt4AllocateInodeFieldNumber = 136,
    kExt4BeginOrderedTruncateFieldNumber = 137,
    kExt4CollapseRangeFieldNumber = 138,
    kExt4DaReleaseSpaceFieldNumber = 139,
    kExt4DaReserveSpaceFieldNumber = 140,
    kExt4DaUpdateReserveSpaceFieldNumber = 141,
    kExt4DaWritePagesFieldNumber = 142,
    kExt4DaWritePagesExtentFieldNumber = 143,
    kExt4DirectIOEnterFieldNumber = 144,
    kExt4DirectIOExitFieldNumber = 145,
    kExt4DiscardBlocksFieldNumber = 146,
    kExt4DiscardPreallocationsFieldNumber = 147,
    kExt4DropInodeFieldNumber = 148,
    kExt4EsCacheExtentFieldNumber = 149,
    kExt4EsFindDelayedExtentRangeEnterFieldNumber = 150,
    kExt4EsFindDelayedExtentRangeExitFieldNumber = 151,
    kExt4EsInsertExtentFieldNumber = 152,
    kExt4EsLookupExtentEnterFieldNumber = 153,
    kExt4EsLookupExtentExitFieldNumber = 154,
    kExt4EsRemoveExtentFieldNumber = 155,
    kExt4EsShrinkFieldNumber = 156,
    kExt4EsShrinkCountFieldNumber = 157,
    kExt4EsShrinkScanEnterFieldNumber = 158,
    kExt4EsShrinkScanExitFieldNumber = 159,
    kExt4EvictInodeFieldNumber = 160,
    kExt4ExtConvertToInitializedEnterFieldNumber = 161,
    kExt4ExtConvertToInitializedFastpathFieldNumber = 162,
    kExt4ExtHandleUnwrittenExtentsFieldNumber = 163,
    kExt4ExtInCacheFieldNumber = 164,
    kExt4ExtLoadExtentFieldNumber = 165,
    kExt4ExtMapBlocksEnterFieldNumber = 166,
    kExt4ExtMapBlocksExitFieldNumber = 167,
    kExt4ExtPutInCacheFieldNumber = 168,
    kExt4ExtRemoveSpaceFieldNumber = 169,
    kExt4ExtRemoveSpaceDoneFieldNumber = 170,
    kExt4ExtRmIdxFieldNumber = 171,
    kExt4ExtRmLeafFieldNumber = 172,
    kExt4ExtShowExtentFieldNumber = 173,
    kExt4FallocateEnterFieldNumber = 174,
    kExt4FallocateExitFieldNumber = 175,
    kExt4FindDelallocRangeFieldNumber = 176,
    kExt4ForgetFieldNumber = 177,
    kExt4FreeBlocksFieldNumber = 178,
    kExt4FreeInodeFieldNumber = 179,
    kExt4GetImpliedClusterAllocExitFieldNumber = 180,
    kExt4GetReservedClusterAllocFieldNumber = 181,
    kExt4IndMapBlocksEnterFieldNumber = 182,
    kExt4IndMapBlocksExitFieldNumber = 183,
    kExt4InsertRangeFieldNumber = 184,
    kExt4InvalidatepageFieldNumber = 185,
    kExt4JournalStartFieldNumber = 186,
    kExt4JournalStartReservedFieldNumber = 187,
    kExt4JournalledInvalidatepageFieldNumber = 188,
    kExt4JournalledWriteEndFieldNumber = 189,
    kExt4LoadInodeFieldNumber = 190,
    kExt4LoadInodeBitmapFieldNumber = 191,
    kExt4MarkInodeDirtyFieldNumber = 192,
    kExt4MbBitmapLoadFieldNumber = 193,
    kExt4MbBuddyBitmapLoadFieldNumber = 194,
    kExt4MbDiscardPreallocationsFieldNumber = 195,
    kExt4MbNewGroupPaFieldNumber = 196,
    kExt4MbNewInodePaFieldNumber = 197,
    kExt4MbReleaseGroupPaFieldNumber = 198,
    kExt4MbReleaseInodePaFieldNumber = 199,
    kExt4MballocAllocFieldNumber = 200,
    kExt4MballocDiscardFieldNumber = 201,
    kExt4MballocFreeFieldNumber = 202,
    kExt4MballocPreallocFieldNumber = 203,
    kExt4OtherInodeUpdateTimeFieldNumber = 204,
    kExt4PunchHoleFieldNumber = 205,
    kExt4ReadBlockBitmapLoadFieldNumber = 206,
    kExt4ReadpageFieldNumber = 207,
    kExt4ReleasepageFieldNumber = 208,
    kExt4RemoveBlocksFieldNumber = 209,
    kExt4RequestBlocksFieldNumber = 210,
    kExt4RequestInodeFieldNumber = 211,
    kExt4SyncFsFieldNumber = 212,
    kExt4TrimAllFreeFieldNumber = 213,
    kExt4TrimExtentFieldNumber = 214,
    kExt4TruncateEnterFieldNumber = 215,
    kExt4TruncateExitFieldNumber = 216,
    kExt4UnlinkEnterFieldNumber = 217,
    kExt4UnlinkExitFieldNumber = 218,
    kExt4WriteBeginFieldNumber = 219,
    kExt4WriteEndFieldNumber = 230,
    kExt4WritepageFieldNumber = 231,
    kExt4WritepagesFieldNumber = 232,
    kExt4WritepagesResultFieldNumber = 233,
    kExt4ZeroRangeFieldNumber = 234,
    kTaskNewtaskFieldNumber = 235,
    kTaskRenameFieldNumber = 236,
    kSchedProcessExecFieldNumber = 237,
    kSchedProcessExitFieldNumber = 238,
    kSchedProcessForkFieldNumber = 239,
    kSchedProcessFreeFieldNumber = 240,
    kSchedProcessHangFieldNumber = 241,
    kSchedProcessWaitFieldNumber = 242,
    kF2fsDoSubmitBioFieldNumber = 243,
    kF2fsEvictInodeFieldNumber = 244,
    kF2fsFallocateFieldNumber = 245,
    kF2fsGetDataBlockFieldNumber = 246,
    kF2fsGetVictimFieldNumber = 247,
    kF2fsIgetFieldNumber = 248,
    kF2fsIgetExitFieldNumber = 249,
    kF2fsNewInodeFieldNumber = 250,
    kF2fsReadpageFieldNumber = 251,
    kF2fsReserveNewBlockFieldNumber = 252,
    kF2fsSetPageDirtyFieldNumber = 253,
    kF2fsSubmitWritePageFieldNumber = 254,
    kF2fsSyncFileEnterFieldNumber = 255,
    kF2fsSyncFileExitFieldNumber = 256,
    kF2fsSyncFsFieldNumber = 257,
    kF2fsTruncateFieldNumber = 258,
    kF2fsTruncateBlocksEnterFieldNumber = 259,
    kF2fsTruncateBlocksExitFieldNumber = 260,
    kF2fsTruncateDataBlocksRangeFieldNumber = 261,
    kF2fsTruncateInodeBlocksEnterFieldNumber = 262,
    kF2fsTruncateInodeBlocksExitFieldNumber = 263,
    kF2fsTruncateNodeFieldNumber = 264,
    kF2fsTruncateNodesEnterFieldNumber = 265,
    kF2fsTruncateNodesExitFieldNumber = 266,
    kF2fsTruncatePartialNodesFieldNumber = 267,
    kF2fsUnlinkEnterFieldNumber = 268,
    kF2fsUnlinkExitFieldNumber = 269,
    kF2fsVmPageMkwriteFieldNumber = 270,
    kF2fsWriteBeginFieldNumber = 271,
    kF2fsWriteCheckpointFieldNumber = 272,
    kF2fsWriteEndFieldNumber = 273,
    kAllocPagesIommuEndFieldNumber = 274,
    kAllocPagesIommuFailFieldNumber = 275,
    kAllocPagesIommuStartFieldNumber = 276,
    kAllocPagesSysEndFieldNumber = 277,
    kAllocPagesSysFailFieldNumber = 278,
    kAllocPagesSysStartFieldNumber = 279,
    kDmaAllocContiguousRetryFieldNumber = 280,
    kIommuMapRangeFieldNumber = 281,
    kIommuSecPtblMapRangeEndFieldNumber = 282,
    kIommuSecPtblMapRangeStartFieldNumber = 283,
    kIonAllocBufferEndFieldNumber = 284,
    kIonAllocBufferFailFieldNumber = 285,
    kIonAllocBufferFallbackFieldNumber = 286,
    kIonAllocBufferStartFieldNumber = 287,
    kIonCpAllocRetryFieldNumber = 288,
    kIonCpSecureBufferEndFieldNumber = 289,
    kIonCpSecureBufferStartFieldNumber = 290,
    kIonPrefetchingFieldNumber = 291,
    kIonSecureCmaAddToPoolEndFieldNumber = 292,
    kIonSecureCmaAddToPoolStartFieldNumber = 293,
    kIonSecureCmaAllocateEndFieldNumber = 294,
    kIonSecureCmaAllocateStartFieldNumber = 295,
    kIonSecureCmaShrinkPoolEndFieldNumber = 296,
    kIonSecureCmaShrinkPoolStartFieldNumber = 297,
    kKfreeFieldNumber = 298,
    kKmallocFieldNumber = 299,
    kKmallocNodeFieldNumber = 300,
    kKmemCacheAllocFieldNumber = 301,
    kKmemCacheAllocNodeFieldNumber = 302,
    kKmemCacheFreeFieldNumber = 303,
    kMigratePagesEndFieldNumber = 304,
    kMigratePagesStartFieldNumber = 305,
    kMigrateRetryFieldNumber = 306,
    kMmPageAllocFieldNumber = 307,
    kMmPageAllocExtfragFieldNumber = 308,
    kMmPageAllocZoneLockedFieldNumber = 309,
    kMmPageFreeFieldNumber = 310,
    kMmPageFreeBatchedFieldNumber = 311,
    kMmPagePcpuDrainFieldNumber = 312,
    kRssStatFieldNumber = 313,
    kIonHeapShrinkFieldNumber = 314,
    kIonHeapGrowFieldNumber = 315,
    kFenceInitFieldNumber = 316,
    kFenceDestroyFieldNumber = 317,
    kFenceEnableSignalFieldNumber = 318,
    kFenceSignaledFieldNumber = 319,
    kClkEnableFieldNumber = 320,
    kClkDisableFieldNumber = 321,
    kClkSetRateFieldNumber = 322,
    kBinderTransactionAllocBufFieldNumber = 323,
    kSignalDeliverFieldNumber = 324,
    kSignalGenerateFieldNumber = 325,
    kOomScoreAdjUpdateFieldNumber = 326,
    kGenericFieldNumber = 327,
    kMmEventRecordFieldNumber = 328,
    kSysEnterFieldNumber = 329,
    kSysExitFieldNumber = 330,
    kZeroFieldNumber = 331,
    kGpuFrequencyFieldNumber = 332,
    kSdeTracingMarkWriteFieldNumber = 333,
    kMarkVictimFieldNumber = 334,
    kIonStatFieldNumber = 335,
    kIonBufferCreateFieldNumber = 336,
    kIonBufferDestroyFieldNumber = 337,
    kScmCallStartFieldNumber = 338,
    kScmCallEndFieldNumber = 339,
    kGpuMemTotalFieldNumber = 340,
    kThermalTemperatureFieldNumber = 341,
    kCdevUpdateFieldNumber = 342,
    kCpuhpExitFieldNumber = 343,
    kCpuhpMultiEnterFieldNumber = 344,
    kCpuhpEnterFieldNumber = 345,
    kCpuhpLatencyFieldNumber = 346,
    kFastrpcDmaStatFieldNumber = 347,
    kDpuTracingMarkWriteFieldNumber = 348,
    kG2dTracingMarkWriteFieldNumber = 349,
    kMaliTracingMarkWriteFieldNumber = 350,
  };

  FtraceEvent();
  ~FtraceEvent() override;
  FtraceEvent(FtraceEvent&&) noexcept;
  FtraceEvent& operator=(FtraceEvent&&);
  FtraceEvent(const FtraceEvent&);
  FtraceEvent& operator=(const FtraceEvent&);
  bool operator==(const FtraceEvent&) const;
  bool operator!=(const FtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_timestamp() const { return _has_field_[1]; }
  uint64_t timestamp() const { return timestamp_; }
  void set_timestamp(uint64_t value) { timestamp_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  uint32_t pid() const { return pid_; }
  void set_pid(uint32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_print() const { return _has_field_[3]; }
  const PrintFtraceEvent& print() const { return *print_; }
  PrintFtraceEvent* mutable_print() { _has_field_.set(3); return print_.get(); }

  bool has_sched_switch() const { return _has_field_[4]; }
  const SchedSwitchFtraceEvent& sched_switch() const { return *sched_switch_; }
  SchedSwitchFtraceEvent* mutable_sched_switch() { _has_field_.set(4); return sched_switch_.get(); }

  bool has_cpu_frequency() const { return _has_field_[11]; }
  const CpuFrequencyFtraceEvent& cpu_frequency() const { return *cpu_frequency_; }
  CpuFrequencyFtraceEvent* mutable_cpu_frequency() { _has_field_.set(11); return cpu_frequency_.get(); }

  bool has_cpu_frequency_limits() const { return _has_field_[12]; }
  const CpuFrequencyLimitsFtraceEvent& cpu_frequency_limits() const { return *cpu_frequency_limits_; }
  CpuFrequencyLimitsFtraceEvent* mutable_cpu_frequency_limits() { _has_field_.set(12); return cpu_frequency_limits_.get(); }

  bool has_cpu_idle() const { return _has_field_[13]; }
  const CpuIdleFtraceEvent& cpu_idle() const { return *cpu_idle_; }
  CpuIdleFtraceEvent* mutable_cpu_idle() { _has_field_.set(13); return cpu_idle_.get(); }

  bool has_clock_enable() const { return _has_field_[14]; }
  const ClockEnableFtraceEvent& clock_enable() const { return *clock_enable_; }
  ClockEnableFtraceEvent* mutable_clock_enable() { _has_field_.set(14); return clock_enable_.get(); }

  bool has_clock_disable() const { return _has_field_[15]; }
  const ClockDisableFtraceEvent& clock_disable() const { return *clock_disable_; }
  ClockDisableFtraceEvent* mutable_clock_disable() { _has_field_.set(15); return clock_disable_.get(); }

  bool has_clock_set_rate() const { return _has_field_[16]; }
  const ClockSetRateFtraceEvent& clock_set_rate() const { return *clock_set_rate_; }
  ClockSetRateFtraceEvent* mutable_clock_set_rate() { _has_field_.set(16); return clock_set_rate_.get(); }

  bool has_sched_wakeup() const { return _has_field_[17]; }
  const SchedWakeupFtraceEvent& sched_wakeup() const { return *sched_wakeup_; }
  SchedWakeupFtraceEvent* mutable_sched_wakeup() { _has_field_.set(17); return sched_wakeup_.get(); }

  bool has_sched_blocked_reason() const { return _has_field_[18]; }
  const SchedBlockedReasonFtraceEvent& sched_blocked_reason() const { return *sched_blocked_reason_; }
  SchedBlockedReasonFtraceEvent* mutable_sched_blocked_reason() { _has_field_.set(18); return sched_blocked_reason_.get(); }

  bool has_sched_cpu_hotplug() const { return _has_field_[19]; }
  const SchedCpuHotplugFtraceEvent& sched_cpu_hotplug() const { return *sched_cpu_hotplug_; }
  SchedCpuHotplugFtraceEvent* mutable_sched_cpu_hotplug() { _has_field_.set(19); return sched_cpu_hotplug_.get(); }

  bool has_sched_waking() const { return _has_field_[20]; }
  const SchedWakingFtraceEvent& sched_waking() const { return *sched_waking_; }
  SchedWakingFtraceEvent* mutable_sched_waking() { _has_field_.set(20); return sched_waking_.get(); }

  bool has_ipi_entry() const { return _has_field_[21]; }
  const IpiEntryFtraceEvent& ipi_entry() const { return *ipi_entry_; }
  IpiEntryFtraceEvent* mutable_ipi_entry() { _has_field_.set(21); return ipi_entry_.get(); }

  bool has_ipi_exit() const { return _has_field_[22]; }
  const IpiExitFtraceEvent& ipi_exit() const { return *ipi_exit_; }
  IpiExitFtraceEvent* mutable_ipi_exit() { _has_field_.set(22); return ipi_exit_.get(); }

  bool has_ipi_raise() const { return _has_field_[23]; }
  const IpiRaiseFtraceEvent& ipi_raise() const { return *ipi_raise_; }
  IpiRaiseFtraceEvent* mutable_ipi_raise() { _has_field_.set(23); return ipi_raise_.get(); }

  bool has_softirq_entry() const { return _has_field_[24]; }
  const SoftirqEntryFtraceEvent& softirq_entry() const { return *softirq_entry_; }
  SoftirqEntryFtraceEvent* mutable_softirq_entry() { _has_field_.set(24); return softirq_entry_.get(); }

  bool has_softirq_exit() const { return _has_field_[25]; }
  const SoftirqExitFtraceEvent& softirq_exit() const { return *softirq_exit_; }
  SoftirqExitFtraceEvent* mutable_softirq_exit() { _has_field_.set(25); return softirq_exit_.get(); }

  bool has_softirq_raise() const { return _has_field_[26]; }
  const SoftirqRaiseFtraceEvent& softirq_raise() const { return *softirq_raise_; }
  SoftirqRaiseFtraceEvent* mutable_softirq_raise() { _has_field_.set(26); return softirq_raise_.get(); }

  bool has_i2c_read() const { return _has_field_[27]; }
  const I2cReadFtraceEvent& i2c_read() const { return *i2c_read_; }
  I2cReadFtraceEvent* mutable_i2c_read() { _has_field_.set(27); return i2c_read_.get(); }

  bool has_i2c_write() const { return _has_field_[28]; }
  const I2cWriteFtraceEvent& i2c_write() const { return *i2c_write_; }
  I2cWriteFtraceEvent* mutable_i2c_write() { _has_field_.set(28); return i2c_write_.get(); }

  bool has_i2c_result() const { return _has_field_[29]; }
  const I2cResultFtraceEvent& i2c_result() const { return *i2c_result_; }
  I2cResultFtraceEvent* mutable_i2c_result() { _has_field_.set(29); return i2c_result_.get(); }

  bool has_i2c_reply() const { return _has_field_[30]; }
  const I2cReplyFtraceEvent& i2c_reply() const { return *i2c_reply_; }
  I2cReplyFtraceEvent* mutable_i2c_reply() { _has_field_.set(30); return i2c_reply_.get(); }

  bool has_smbus_read() const { return _has_field_[31]; }
  const SmbusReadFtraceEvent& smbus_read() const { return *smbus_read_; }
  SmbusReadFtraceEvent* mutable_smbus_read() { _has_field_.set(31); return smbus_read_.get(); }

  bool has_smbus_write() const { return _has_field_[32]; }
  const SmbusWriteFtraceEvent& smbus_write() const { return *smbus_write_; }
  SmbusWriteFtraceEvent* mutable_smbus_write() { _has_field_.set(32); return smbus_write_.get(); }

  bool has_smbus_result() const { return _has_field_[33]; }
  const SmbusResultFtraceEvent& smbus_result() const { return *smbus_result_; }
  SmbusResultFtraceEvent* mutable_smbus_result() { _has_field_.set(33); return smbus_result_.get(); }

  bool has_smbus_reply() const { return _has_field_[34]; }
  const SmbusReplyFtraceEvent& smbus_reply() const { return *smbus_reply_; }
  SmbusReplyFtraceEvent* mutable_smbus_reply() { _has_field_.set(34); return smbus_reply_.get(); }

  bool has_lowmemory_kill() const { return _has_field_[35]; }
  const LowmemoryKillFtraceEvent& lowmemory_kill() const { return *lowmemory_kill_; }
  LowmemoryKillFtraceEvent* mutable_lowmemory_kill() { _has_field_.set(35); return lowmemory_kill_.get(); }

  bool has_irq_handler_entry() const { return _has_field_[36]; }
  const IrqHandlerEntryFtraceEvent& irq_handler_entry() const { return *irq_handler_entry_; }
  IrqHandlerEntryFtraceEvent* mutable_irq_handler_entry() { _has_field_.set(36); return irq_handler_entry_.get(); }

  bool has_irq_handler_exit() const { return _has_field_[37]; }
  const IrqHandlerExitFtraceEvent& irq_handler_exit() const { return *irq_handler_exit_; }
  IrqHandlerExitFtraceEvent* mutable_irq_handler_exit() { _has_field_.set(37); return irq_handler_exit_.get(); }

  bool has_sync_pt() const { return _has_field_[38]; }
  const SyncPtFtraceEvent& sync_pt() const { return *sync_pt_; }
  SyncPtFtraceEvent* mutable_sync_pt() { _has_field_.set(38); return sync_pt_.get(); }

  bool has_sync_timeline() const { return _has_field_[39]; }
  const SyncTimelineFtraceEvent& sync_timeline() const { return *sync_timeline_; }
  SyncTimelineFtraceEvent* mutable_sync_timeline() { _has_field_.set(39); return sync_timeline_.get(); }

  bool has_sync_wait() const { return _has_field_[40]; }
  const SyncWaitFtraceEvent& sync_wait() const { return *sync_wait_; }
  SyncWaitFtraceEvent* mutable_sync_wait() { _has_field_.set(40); return sync_wait_.get(); }

  bool has_ext4_da_write_begin() const { return _has_field_[41]; }
  const Ext4DaWriteBeginFtraceEvent& ext4_da_write_begin() const { return *ext4_da_write_begin_; }
  Ext4DaWriteBeginFtraceEvent* mutable_ext4_da_write_begin() { _has_field_.set(41); return ext4_da_write_begin_.get(); }

  bool has_ext4_da_write_end() const { return _has_field_[42]; }
  const Ext4DaWriteEndFtraceEvent& ext4_da_write_end() const { return *ext4_da_write_end_; }
  Ext4DaWriteEndFtraceEvent* mutable_ext4_da_write_end() { _has_field_.set(42); return ext4_da_write_end_.get(); }

  bool has_ext4_sync_file_enter() const { return _has_field_[43]; }
  const Ext4SyncFileEnterFtraceEvent& ext4_sync_file_enter() const { return *ext4_sync_file_enter_; }
  Ext4SyncFileEnterFtraceEvent* mutable_ext4_sync_file_enter() { _has_field_.set(43); return ext4_sync_file_enter_.get(); }

  bool has_ext4_sync_file_exit() const { return _has_field_[44]; }
  const Ext4SyncFileExitFtraceEvent& ext4_sync_file_exit() const { return *ext4_sync_file_exit_; }
  Ext4SyncFileExitFtraceEvent* mutable_ext4_sync_file_exit() { _has_field_.set(44); return ext4_sync_file_exit_.get(); }

  bool has_block_rq_issue() const { return _has_field_[45]; }
  const BlockRqIssueFtraceEvent& block_rq_issue() const { return *block_rq_issue_; }
  BlockRqIssueFtraceEvent* mutable_block_rq_issue() { _has_field_.set(45); return block_rq_issue_.get(); }

  bool has_mm_vmscan_direct_reclaim_begin() const { return _has_field_[46]; }
  const MmVmscanDirectReclaimBeginFtraceEvent& mm_vmscan_direct_reclaim_begin() const { return *mm_vmscan_direct_reclaim_begin_; }
  MmVmscanDirectReclaimBeginFtraceEvent* mutable_mm_vmscan_direct_reclaim_begin() { _has_field_.set(46); return mm_vmscan_direct_reclaim_begin_.get(); }

  bool has_mm_vmscan_direct_reclaim_end() const { return _has_field_[47]; }
  const MmVmscanDirectReclaimEndFtraceEvent& mm_vmscan_direct_reclaim_end() const { return *mm_vmscan_direct_reclaim_end_; }
  MmVmscanDirectReclaimEndFtraceEvent* mutable_mm_vmscan_direct_reclaim_end() { _has_field_.set(47); return mm_vmscan_direct_reclaim_end_.get(); }

  bool has_mm_vmscan_kswapd_wake() const { return _has_field_[48]; }
  const MmVmscanKswapdWakeFtraceEvent& mm_vmscan_kswapd_wake() const { return *mm_vmscan_kswapd_wake_; }
  MmVmscanKswapdWakeFtraceEvent* mutable_mm_vmscan_kswapd_wake() { _has_field_.set(48); return mm_vmscan_kswapd_wake_.get(); }

  bool has_mm_vmscan_kswapd_sleep() const { return _has_field_[49]; }
  const MmVmscanKswapdSleepFtraceEvent& mm_vmscan_kswapd_sleep() const { return *mm_vmscan_kswapd_sleep_; }
  MmVmscanKswapdSleepFtraceEvent* mutable_mm_vmscan_kswapd_sleep() { _has_field_.set(49); return mm_vmscan_kswapd_sleep_.get(); }

  bool has_binder_transaction() const { return _has_field_[50]; }
  const BinderTransactionFtraceEvent& binder_transaction() const { return *binder_transaction_; }
  BinderTransactionFtraceEvent* mutable_binder_transaction() { _has_field_.set(50); return binder_transaction_.get(); }

  bool has_binder_transaction_received() const { return _has_field_[51]; }
  const BinderTransactionReceivedFtraceEvent& binder_transaction_received() const { return *binder_transaction_received_; }
  BinderTransactionReceivedFtraceEvent* mutable_binder_transaction_received() { _has_field_.set(51); return binder_transaction_received_.get(); }

  bool has_binder_set_priority() const { return _has_field_[52]; }
  const BinderSetPriorityFtraceEvent& binder_set_priority() const { return *binder_set_priority_; }
  BinderSetPriorityFtraceEvent* mutable_binder_set_priority() { _has_field_.set(52); return binder_set_priority_.get(); }

  bool has_binder_lock() const { return _has_field_[53]; }
  const BinderLockFtraceEvent& binder_lock() const { return *binder_lock_; }
  BinderLockFtraceEvent* mutable_binder_lock() { _has_field_.set(53); return binder_lock_.get(); }

  bool has_binder_locked() const { return _has_field_[54]; }
  const BinderLockedFtraceEvent& binder_locked() const { return *binder_locked_; }
  BinderLockedFtraceEvent* mutable_binder_locked() { _has_field_.set(54); return binder_locked_.get(); }

  bool has_binder_unlock() const { return _has_field_[55]; }
  const BinderUnlockFtraceEvent& binder_unlock() const { return *binder_unlock_; }
  BinderUnlockFtraceEvent* mutable_binder_unlock() { _has_field_.set(55); return binder_unlock_.get(); }

  bool has_workqueue_activate_work() const { return _has_field_[56]; }
  const WorkqueueActivateWorkFtraceEvent& workqueue_activate_work() const { return *workqueue_activate_work_; }
  WorkqueueActivateWorkFtraceEvent* mutable_workqueue_activate_work() { _has_field_.set(56); return workqueue_activate_work_.get(); }

  bool has_workqueue_execute_end() const { return _has_field_[57]; }
  const WorkqueueExecuteEndFtraceEvent& workqueue_execute_end() const { return *workqueue_execute_end_; }
  WorkqueueExecuteEndFtraceEvent* mutable_workqueue_execute_end() { _has_field_.set(57); return workqueue_execute_end_.get(); }

  bool has_workqueue_execute_start() const { return _has_field_[58]; }
  const WorkqueueExecuteStartFtraceEvent& workqueue_execute_start() const { return *workqueue_execute_start_; }
  WorkqueueExecuteStartFtraceEvent* mutable_workqueue_execute_start() { _has_field_.set(58); return workqueue_execute_start_.get(); }

  bool has_workqueue_queue_work() const { return _has_field_[59]; }
  const WorkqueueQueueWorkFtraceEvent& workqueue_queue_work() const { return *workqueue_queue_work_; }
  WorkqueueQueueWorkFtraceEvent* mutable_workqueue_queue_work() { _has_field_.set(59); return workqueue_queue_work_.get(); }

  bool has_regulator_disable() const { return _has_field_[60]; }
  const RegulatorDisableFtraceEvent& regulator_disable() const { return *regulator_disable_; }
  RegulatorDisableFtraceEvent* mutable_regulator_disable() { _has_field_.set(60); return regulator_disable_.get(); }

  bool has_regulator_disable_complete() const { return _has_field_[61]; }
  const RegulatorDisableCompleteFtraceEvent& regulator_disable_complete() const { return *regulator_disable_complete_; }
  RegulatorDisableCompleteFtraceEvent* mutable_regulator_disable_complete() { _has_field_.set(61); return regulator_disable_complete_.get(); }

  bool has_regulator_enable() const { return _has_field_[62]; }
  const RegulatorEnableFtraceEvent& regulator_enable() const { return *regulator_enable_; }
  RegulatorEnableFtraceEvent* mutable_regulator_enable() { _has_field_.set(62); return regulator_enable_.get(); }

  bool has_regulator_enable_complete() const { return _has_field_[63]; }
  const RegulatorEnableCompleteFtraceEvent& regulator_enable_complete() const { return *regulator_enable_complete_; }
  RegulatorEnableCompleteFtraceEvent* mutable_regulator_enable_complete() { _has_field_.set(63); return regulator_enable_complete_.get(); }

  bool has_regulator_enable_delay() const { return _has_field_[64]; }
  const RegulatorEnableDelayFtraceEvent& regulator_enable_delay() const { return *regulator_enable_delay_; }
  RegulatorEnableDelayFtraceEvent* mutable_regulator_enable_delay() { _has_field_.set(64); return regulator_enable_delay_.get(); }

  bool has_regulator_set_voltage() const { return _has_field_[65]; }
  const RegulatorSetVoltageFtraceEvent& regulator_set_voltage() const { return *regulator_set_voltage_; }
  RegulatorSetVoltageFtraceEvent* mutable_regulator_set_voltage() { _has_field_.set(65); return regulator_set_voltage_.get(); }

  bool has_regulator_set_voltage_complete() const { return _has_field_[66]; }
  const RegulatorSetVoltageCompleteFtraceEvent& regulator_set_voltage_complete() const { return *regulator_set_voltage_complete_; }
  RegulatorSetVoltageCompleteFtraceEvent* mutable_regulator_set_voltage_complete() { _has_field_.set(66); return regulator_set_voltage_complete_.get(); }

  bool has_cgroup_attach_task() const { return _has_field_[67]; }
  const CgroupAttachTaskFtraceEvent& cgroup_attach_task() const { return *cgroup_attach_task_; }
  CgroupAttachTaskFtraceEvent* mutable_cgroup_attach_task() { _has_field_.set(67); return cgroup_attach_task_.get(); }

  bool has_cgroup_mkdir() const { return _has_field_[68]; }
  const CgroupMkdirFtraceEvent& cgroup_mkdir() const { return *cgroup_mkdir_; }
  CgroupMkdirFtraceEvent* mutable_cgroup_mkdir() { _has_field_.set(68); return cgroup_mkdir_.get(); }

  bool has_cgroup_remount() const { return _has_field_[69]; }
  const CgroupRemountFtraceEvent& cgroup_remount() const { return *cgroup_remount_; }
  CgroupRemountFtraceEvent* mutable_cgroup_remount() { _has_field_.set(69); return cgroup_remount_.get(); }

  bool has_cgroup_rmdir() const { return _has_field_[70]; }
  const CgroupRmdirFtraceEvent& cgroup_rmdir() const { return *cgroup_rmdir_; }
  CgroupRmdirFtraceEvent* mutable_cgroup_rmdir() { _has_field_.set(70); return cgroup_rmdir_.get(); }

  bool has_cgroup_transfer_tasks() const { return _has_field_[71]; }
  const CgroupTransferTasksFtraceEvent& cgroup_transfer_tasks() const { return *cgroup_transfer_tasks_; }
  CgroupTransferTasksFtraceEvent* mutable_cgroup_transfer_tasks() { _has_field_.set(71); return cgroup_transfer_tasks_.get(); }

  bool has_cgroup_destroy_root() const { return _has_field_[72]; }
  const CgroupDestroyRootFtraceEvent& cgroup_destroy_root() const { return *cgroup_destroy_root_; }
  CgroupDestroyRootFtraceEvent* mutable_cgroup_destroy_root() { _has_field_.set(72); return cgroup_destroy_root_.get(); }

  bool has_cgroup_release() const { return _has_field_[73]; }
  const CgroupReleaseFtraceEvent& cgroup_release() const { return *cgroup_release_; }
  CgroupReleaseFtraceEvent* mutable_cgroup_release() { _has_field_.set(73); return cgroup_release_.get(); }

  bool has_cgroup_rename() const { return _has_field_[74]; }
  const CgroupRenameFtraceEvent& cgroup_rename() const { return *cgroup_rename_; }
  CgroupRenameFtraceEvent* mutable_cgroup_rename() { _has_field_.set(74); return cgroup_rename_.get(); }

  bool has_cgroup_setup_root() const { return _has_field_[75]; }
  const CgroupSetupRootFtraceEvent& cgroup_setup_root() const { return *cgroup_setup_root_; }
  CgroupSetupRootFtraceEvent* mutable_cgroup_setup_root() { _has_field_.set(75); return cgroup_setup_root_.get(); }

  bool has_mdp_cmd_kickoff() const { return _has_field_[76]; }
  const MdpCmdKickoffFtraceEvent& mdp_cmd_kickoff() const { return *mdp_cmd_kickoff_; }
  MdpCmdKickoffFtraceEvent* mutable_mdp_cmd_kickoff() { _has_field_.set(76); return mdp_cmd_kickoff_.get(); }

  bool has_mdp_commit() const { return _has_field_[77]; }
  const MdpCommitFtraceEvent& mdp_commit() const { return *mdp_commit_; }
  MdpCommitFtraceEvent* mutable_mdp_commit() { _has_field_.set(77); return mdp_commit_.get(); }

  bool has_mdp_perf_set_ot() const { return _has_field_[78]; }
  const MdpPerfSetOtFtraceEvent& mdp_perf_set_ot() const { return *mdp_perf_set_ot_; }
  MdpPerfSetOtFtraceEvent* mutable_mdp_perf_set_ot() { _has_field_.set(78); return mdp_perf_set_ot_.get(); }

  bool has_mdp_sspp_change() const { return _has_field_[79]; }
  const MdpSsppChangeFtraceEvent& mdp_sspp_change() const { return *mdp_sspp_change_; }
  MdpSsppChangeFtraceEvent* mutable_mdp_sspp_change() { _has_field_.set(79); return mdp_sspp_change_.get(); }

  bool has_tracing_mark_write() const { return _has_field_[80]; }
  const TracingMarkWriteFtraceEvent& tracing_mark_write() const { return *tracing_mark_write_; }
  TracingMarkWriteFtraceEvent* mutable_tracing_mark_write() { _has_field_.set(80); return tracing_mark_write_.get(); }

  bool has_mdp_cmd_pingpong_done() const { return _has_field_[81]; }
  const MdpCmdPingpongDoneFtraceEvent& mdp_cmd_pingpong_done() const { return *mdp_cmd_pingpong_done_; }
  MdpCmdPingpongDoneFtraceEvent* mutable_mdp_cmd_pingpong_done() { _has_field_.set(81); return mdp_cmd_pingpong_done_.get(); }

  bool has_mdp_compare_bw() const { return _has_field_[82]; }
  const MdpCompareBwFtraceEvent& mdp_compare_bw() const { return *mdp_compare_bw_; }
  MdpCompareBwFtraceEvent* mutable_mdp_compare_bw() { _has_field_.set(82); return mdp_compare_bw_.get(); }

  bool has_mdp_perf_set_panic_luts() const { return _has_field_[83]; }
  const MdpPerfSetPanicLutsFtraceEvent& mdp_perf_set_panic_luts() const { return *mdp_perf_set_panic_luts_; }
  MdpPerfSetPanicLutsFtraceEvent* mutable_mdp_perf_set_panic_luts() { _has_field_.set(83); return mdp_perf_set_panic_luts_.get(); }

  bool has_mdp_sspp_set() const { return _has_field_[84]; }
  const MdpSsppSetFtraceEvent& mdp_sspp_set() const { return *mdp_sspp_set_; }
  MdpSsppSetFtraceEvent* mutable_mdp_sspp_set() { _has_field_.set(84); return mdp_sspp_set_.get(); }

  bool has_mdp_cmd_readptr_done() const { return _has_field_[85]; }
  const MdpCmdReadptrDoneFtraceEvent& mdp_cmd_readptr_done() const { return *mdp_cmd_readptr_done_; }
  MdpCmdReadptrDoneFtraceEvent* mutable_mdp_cmd_readptr_done() { _has_field_.set(85); return mdp_cmd_readptr_done_.get(); }

  bool has_mdp_misr_crc() const { return _has_field_[86]; }
  const MdpMisrCrcFtraceEvent& mdp_misr_crc() const { return *mdp_misr_crc_; }
  MdpMisrCrcFtraceEvent* mutable_mdp_misr_crc() { _has_field_.set(86); return mdp_misr_crc_.get(); }

  bool has_mdp_perf_set_qos_luts() const { return _has_field_[87]; }
  const MdpPerfSetQosLutsFtraceEvent& mdp_perf_set_qos_luts() const { return *mdp_perf_set_qos_luts_; }
  MdpPerfSetQosLutsFtraceEvent* mutable_mdp_perf_set_qos_luts() { _has_field_.set(87); return mdp_perf_set_qos_luts_.get(); }

  bool has_mdp_trace_counter() const { return _has_field_[88]; }
  const MdpTraceCounterFtraceEvent& mdp_trace_counter() const { return *mdp_trace_counter_; }
  MdpTraceCounterFtraceEvent* mutable_mdp_trace_counter() { _has_field_.set(88); return mdp_trace_counter_.get(); }

  bool has_mdp_cmd_release_bw() const { return _has_field_[89]; }
  const MdpCmdReleaseBwFtraceEvent& mdp_cmd_release_bw() const { return *mdp_cmd_release_bw_; }
  MdpCmdReleaseBwFtraceEvent* mutable_mdp_cmd_release_bw() { _has_field_.set(89); return mdp_cmd_release_bw_.get(); }

  bool has_mdp_mixer_update() const { return _has_field_[90]; }
  const MdpMixerUpdateFtraceEvent& mdp_mixer_update() const { return *mdp_mixer_update_; }
  MdpMixerUpdateFtraceEvent* mutable_mdp_mixer_update() { _has_field_.set(90); return mdp_mixer_update_.get(); }

  bool has_mdp_perf_set_wm_levels() const { return _has_field_[91]; }
  const MdpPerfSetWmLevelsFtraceEvent& mdp_perf_set_wm_levels() const { return *mdp_perf_set_wm_levels_; }
  MdpPerfSetWmLevelsFtraceEvent* mutable_mdp_perf_set_wm_levels() { _has_field_.set(91); return mdp_perf_set_wm_levels_.get(); }

  bool has_mdp_video_underrun_done() const { return _has_field_[92]; }
  const MdpVideoUnderrunDoneFtraceEvent& mdp_video_underrun_done() const { return *mdp_video_underrun_done_; }
  MdpVideoUnderrunDoneFtraceEvent* mutable_mdp_video_underrun_done() { _has_field_.set(92); return mdp_video_underrun_done_.get(); }

  bool has_mdp_cmd_wait_pingpong() const { return _has_field_[93]; }
  const MdpCmdWaitPingpongFtraceEvent& mdp_cmd_wait_pingpong() const { return *mdp_cmd_wait_pingpong_; }
  MdpCmdWaitPingpongFtraceEvent* mutable_mdp_cmd_wait_pingpong() { _has_field_.set(93); return mdp_cmd_wait_pingpong_.get(); }

  bool has_mdp_perf_prefill_calc() const { return _has_field_[94]; }
  const MdpPerfPrefillCalcFtraceEvent& mdp_perf_prefill_calc() const { return *mdp_perf_prefill_calc_; }
  MdpPerfPrefillCalcFtraceEvent* mutable_mdp_perf_prefill_calc() { _has_field_.set(94); return mdp_perf_prefill_calc_.get(); }

  bool has_mdp_perf_update_bus() const { return _has_field_[95]; }
  const MdpPerfUpdateBusFtraceEvent& mdp_perf_update_bus() const { return *mdp_perf_update_bus_; }
  MdpPerfUpdateBusFtraceEvent* mutable_mdp_perf_update_bus() { _has_field_.set(95); return mdp_perf_update_bus_.get(); }

  bool has_rotator_bw_ao_as_context() const { return _has_field_[96]; }
  const RotatorBwAoAsContextFtraceEvent& rotator_bw_ao_as_context() const { return *rotator_bw_ao_as_context_; }
  RotatorBwAoAsContextFtraceEvent* mutable_rotator_bw_ao_as_context() { _has_field_.set(96); return rotator_bw_ao_as_context_.get(); }

  bool has_mm_filemap_add_to_page_cache() const { return _has_field_[97]; }
  const MmFilemapAddToPageCacheFtraceEvent& mm_filemap_add_to_page_cache() const { return *mm_filemap_add_to_page_cache_; }
  MmFilemapAddToPageCacheFtraceEvent* mutable_mm_filemap_add_to_page_cache() { _has_field_.set(97); return mm_filemap_add_to_page_cache_.get(); }

  bool has_mm_filemap_delete_from_page_cache() const { return _has_field_[98]; }
  const MmFilemapDeleteFromPageCacheFtraceEvent& mm_filemap_delete_from_page_cache() const { return *mm_filemap_delete_from_page_cache_; }
  MmFilemapDeleteFromPageCacheFtraceEvent* mutable_mm_filemap_delete_from_page_cache() { _has_field_.set(98); return mm_filemap_delete_from_page_cache_.get(); }

  bool has_mm_compaction_begin() const { return _has_field_[99]; }
  const MmCompactionBeginFtraceEvent& mm_compaction_begin() const { return *mm_compaction_begin_; }
  MmCompactionBeginFtraceEvent* mutable_mm_compaction_begin() { _has_field_.set(99); return mm_compaction_begin_.get(); }

  bool has_mm_compaction_defer_compaction() const { return _has_field_[100]; }
  const MmCompactionDeferCompactionFtraceEvent& mm_compaction_defer_compaction() const { return *mm_compaction_defer_compaction_; }
  MmCompactionDeferCompactionFtraceEvent* mutable_mm_compaction_defer_compaction() { _has_field_.set(100); return mm_compaction_defer_compaction_.get(); }

  bool has_mm_compaction_deferred() const { return _has_field_[101]; }
  const MmCompactionDeferredFtraceEvent& mm_compaction_deferred() const { return *mm_compaction_deferred_; }
  MmCompactionDeferredFtraceEvent* mutable_mm_compaction_deferred() { _has_field_.set(101); return mm_compaction_deferred_.get(); }

  bool has_mm_compaction_defer_reset() const { return _has_field_[102]; }
  const MmCompactionDeferResetFtraceEvent& mm_compaction_defer_reset() const { return *mm_compaction_defer_reset_; }
  MmCompactionDeferResetFtraceEvent* mutable_mm_compaction_defer_reset() { _has_field_.set(102); return mm_compaction_defer_reset_.get(); }

  bool has_mm_compaction_end() const { return _has_field_[103]; }
  const MmCompactionEndFtraceEvent& mm_compaction_end() const { return *mm_compaction_end_; }
  MmCompactionEndFtraceEvent* mutable_mm_compaction_end() { _has_field_.set(103); return mm_compaction_end_.get(); }

  bool has_mm_compaction_finished() const { return _has_field_[104]; }
  const MmCompactionFinishedFtraceEvent& mm_compaction_finished() const { return *mm_compaction_finished_; }
  MmCompactionFinishedFtraceEvent* mutable_mm_compaction_finished() { _has_field_.set(104); return mm_compaction_finished_.get(); }

  bool has_mm_compaction_isolate_freepages() const { return _has_field_[105]; }
  const MmCompactionIsolateFreepagesFtraceEvent& mm_compaction_isolate_freepages() const { return *mm_compaction_isolate_freepages_; }
  MmCompactionIsolateFreepagesFtraceEvent* mutable_mm_compaction_isolate_freepages() { _has_field_.set(105); return mm_compaction_isolate_freepages_.get(); }

  bool has_mm_compaction_isolate_migratepages() const { return _has_field_[106]; }
  const MmCompactionIsolateMigratepagesFtraceEvent& mm_compaction_isolate_migratepages() const { return *mm_compaction_isolate_migratepages_; }
  MmCompactionIsolateMigratepagesFtraceEvent* mutable_mm_compaction_isolate_migratepages() { _has_field_.set(106); return mm_compaction_isolate_migratepages_.get(); }

  bool has_mm_compaction_kcompactd_sleep() const { return _has_field_[107]; }
  const MmCompactionKcompactdSleepFtraceEvent& mm_compaction_kcompactd_sleep() const { return *mm_compaction_kcompactd_sleep_; }
  MmCompactionKcompactdSleepFtraceEvent* mutable_mm_compaction_kcompactd_sleep() { _has_field_.set(107); return mm_compaction_kcompactd_sleep_.get(); }

  bool has_mm_compaction_kcompactd_wake() const { return _has_field_[108]; }
  const MmCompactionKcompactdWakeFtraceEvent& mm_compaction_kcompactd_wake() const { return *mm_compaction_kcompactd_wake_; }
  MmCompactionKcompactdWakeFtraceEvent* mutable_mm_compaction_kcompactd_wake() { _has_field_.set(108); return mm_compaction_kcompactd_wake_.get(); }

  bool has_mm_compaction_migratepages() const { return _has_field_[109]; }
  const MmCompactionMigratepagesFtraceEvent& mm_compaction_migratepages() const { return *mm_compaction_migratepages_; }
  MmCompactionMigratepagesFtraceEvent* mutable_mm_compaction_migratepages() { _has_field_.set(109); return mm_compaction_migratepages_.get(); }

  bool has_mm_compaction_suitable() const { return _has_field_[110]; }
  const MmCompactionSuitableFtraceEvent& mm_compaction_suitable() const { return *mm_compaction_suitable_; }
  MmCompactionSuitableFtraceEvent* mutable_mm_compaction_suitable() { _has_field_.set(110); return mm_compaction_suitable_.get(); }

  bool has_mm_compaction_try_to_compact_pages() const { return _has_field_[111]; }
  const MmCompactionTryToCompactPagesFtraceEvent& mm_compaction_try_to_compact_pages() const { return *mm_compaction_try_to_compact_pages_; }
  MmCompactionTryToCompactPagesFtraceEvent* mutable_mm_compaction_try_to_compact_pages() { _has_field_.set(111); return mm_compaction_try_to_compact_pages_.get(); }

  bool has_mm_compaction_wakeup_kcompactd() const { return _has_field_[112]; }
  const MmCompactionWakeupKcompactdFtraceEvent& mm_compaction_wakeup_kcompactd() const { return *mm_compaction_wakeup_kcompactd_; }
  MmCompactionWakeupKcompactdFtraceEvent* mutable_mm_compaction_wakeup_kcompactd() { _has_field_.set(112); return mm_compaction_wakeup_kcompactd_.get(); }

  bool has_suspend_resume() const { return _has_field_[113]; }
  const SuspendResumeFtraceEvent& suspend_resume() const { return *suspend_resume_; }
  SuspendResumeFtraceEvent* mutable_suspend_resume() { _has_field_.set(113); return suspend_resume_.get(); }

  bool has_sched_wakeup_new() const { return _has_field_[114]; }
  const SchedWakeupNewFtraceEvent& sched_wakeup_new() const { return *sched_wakeup_new_; }
  SchedWakeupNewFtraceEvent* mutable_sched_wakeup_new() { _has_field_.set(114); return sched_wakeup_new_.get(); }

  bool has_block_bio_backmerge() const { return _has_field_[115]; }
  const BlockBioBackmergeFtraceEvent& block_bio_backmerge() const { return *block_bio_backmerge_; }
  BlockBioBackmergeFtraceEvent* mutable_block_bio_backmerge() { _has_field_.set(115); return block_bio_backmerge_.get(); }

  bool has_block_bio_bounce() const { return _has_field_[116]; }
  const BlockBioBounceFtraceEvent& block_bio_bounce() const { return *block_bio_bounce_; }
  BlockBioBounceFtraceEvent* mutable_block_bio_bounce() { _has_field_.set(116); return block_bio_bounce_.get(); }

  bool has_block_bio_complete() const { return _has_field_[117]; }
  const BlockBioCompleteFtraceEvent& block_bio_complete() const { return *block_bio_complete_; }
  BlockBioCompleteFtraceEvent* mutable_block_bio_complete() { _has_field_.set(117); return block_bio_complete_.get(); }

  bool has_block_bio_frontmerge() const { return _has_field_[118]; }
  const BlockBioFrontmergeFtraceEvent& block_bio_frontmerge() const { return *block_bio_frontmerge_; }
  BlockBioFrontmergeFtraceEvent* mutable_block_bio_frontmerge() { _has_field_.set(118); return block_bio_frontmerge_.get(); }

  bool has_block_bio_queue() const { return _has_field_[119]; }
  const BlockBioQueueFtraceEvent& block_bio_queue() const { return *block_bio_queue_; }
  BlockBioQueueFtraceEvent* mutable_block_bio_queue() { _has_field_.set(119); return block_bio_queue_.get(); }

  bool has_block_bio_remap() const { return _has_field_[120]; }
  const BlockBioRemapFtraceEvent& block_bio_remap() const { return *block_bio_remap_; }
  BlockBioRemapFtraceEvent* mutable_block_bio_remap() { _has_field_.set(120); return block_bio_remap_.get(); }

  bool has_block_dirty_buffer() const { return _has_field_[121]; }
  const BlockDirtyBufferFtraceEvent& block_dirty_buffer() const { return *block_dirty_buffer_; }
  BlockDirtyBufferFtraceEvent* mutable_block_dirty_buffer() { _has_field_.set(121); return block_dirty_buffer_.get(); }

  bool has_block_getrq() const { return _has_field_[122]; }
  const BlockGetrqFtraceEvent& block_getrq() const { return *block_getrq_; }
  BlockGetrqFtraceEvent* mutable_block_getrq() { _has_field_.set(122); return block_getrq_.get(); }

  bool has_block_plug() const { return _has_field_[123]; }
  const BlockPlugFtraceEvent& block_plug() const { return *block_plug_; }
  BlockPlugFtraceEvent* mutable_block_plug() { _has_field_.set(123); return block_plug_.get(); }

  bool has_block_rq_abort() const { return _has_field_[124]; }
  const BlockRqAbortFtraceEvent& block_rq_abort() const { return *block_rq_abort_; }
  BlockRqAbortFtraceEvent* mutable_block_rq_abort() { _has_field_.set(124); return block_rq_abort_.get(); }

  bool has_block_rq_complete() const { return _has_field_[125]; }
  const BlockRqCompleteFtraceEvent& block_rq_complete() const { return *block_rq_complete_; }
  BlockRqCompleteFtraceEvent* mutable_block_rq_complete() { _has_field_.set(125); return block_rq_complete_.get(); }

  bool has_block_rq_insert() const { return _has_field_[126]; }
  const BlockRqInsertFtraceEvent& block_rq_insert() const { return *block_rq_insert_; }
  BlockRqInsertFtraceEvent* mutable_block_rq_insert() { _has_field_.set(126); return block_rq_insert_.get(); }

  bool has_block_rq_remap() const { return _has_field_[128]; }
  const BlockRqRemapFtraceEvent& block_rq_remap() const { return *block_rq_remap_; }
  BlockRqRemapFtraceEvent* mutable_block_rq_remap() { _has_field_.set(128); return block_rq_remap_.get(); }

  bool has_block_rq_requeue() const { return _has_field_[129]; }
  const BlockRqRequeueFtraceEvent& block_rq_requeue() const { return *block_rq_requeue_; }
  BlockRqRequeueFtraceEvent* mutable_block_rq_requeue() { _has_field_.set(129); return block_rq_requeue_.get(); }

  bool has_block_sleeprq() const { return _has_field_[130]; }
  const BlockSleeprqFtraceEvent& block_sleeprq() const { return *block_sleeprq_; }
  BlockSleeprqFtraceEvent* mutable_block_sleeprq() { _has_field_.set(130); return block_sleeprq_.get(); }

  bool has_block_split() const { return _has_field_[131]; }
  const BlockSplitFtraceEvent& block_split() const { return *block_split_; }
  BlockSplitFtraceEvent* mutable_block_split() { _has_field_.set(131); return block_split_.get(); }

  bool has_block_touch_buffer() const { return _has_field_[132]; }
  const BlockTouchBufferFtraceEvent& block_touch_buffer() const { return *block_touch_buffer_; }
  BlockTouchBufferFtraceEvent* mutable_block_touch_buffer() { _has_field_.set(132); return block_touch_buffer_.get(); }

  bool has_block_unplug() const { return _has_field_[133]; }
  const BlockUnplugFtraceEvent& block_unplug() const { return *block_unplug_; }
  BlockUnplugFtraceEvent* mutable_block_unplug() { _has_field_.set(133); return block_unplug_.get(); }

  bool has_ext4_alloc_da_blocks() const { return _has_field_[134]; }
  const Ext4AllocDaBlocksFtraceEvent& ext4_alloc_da_blocks() const { return *ext4_alloc_da_blocks_; }
  Ext4AllocDaBlocksFtraceEvent* mutable_ext4_alloc_da_blocks() { _has_field_.set(134); return ext4_alloc_da_blocks_.get(); }

  bool has_ext4_allocate_blocks() const { return _has_field_[135]; }
  const Ext4AllocateBlocksFtraceEvent& ext4_allocate_blocks() const { return *ext4_allocate_blocks_; }
  Ext4AllocateBlocksFtraceEvent* mutable_ext4_allocate_blocks() { _has_field_.set(135); return ext4_allocate_blocks_.get(); }

  bool has_ext4_allocate_inode() const { return _has_field_[136]; }
  const Ext4AllocateInodeFtraceEvent& ext4_allocate_inode() const { return *ext4_allocate_inode_; }
  Ext4AllocateInodeFtraceEvent* mutable_ext4_allocate_inode() { _has_field_.set(136); return ext4_allocate_inode_.get(); }

  bool has_ext4_begin_ordered_truncate() const { return _has_field_[137]; }
  const Ext4BeginOrderedTruncateFtraceEvent& ext4_begin_ordered_truncate() const { return *ext4_begin_ordered_truncate_; }
  Ext4BeginOrderedTruncateFtraceEvent* mutable_ext4_begin_ordered_truncate() { _has_field_.set(137); return ext4_begin_ordered_truncate_.get(); }

  bool has_ext4_collapse_range() const { return _has_field_[138]; }
  const Ext4CollapseRangeFtraceEvent& ext4_collapse_range() const { return *ext4_collapse_range_; }
  Ext4CollapseRangeFtraceEvent* mutable_ext4_collapse_range() { _has_field_.set(138); return ext4_collapse_range_.get(); }

  bool has_ext4_da_release_space() const { return _has_field_[139]; }
  const Ext4DaReleaseSpaceFtraceEvent& ext4_da_release_space() const { return *ext4_da_release_space_; }
  Ext4DaReleaseSpaceFtraceEvent* mutable_ext4_da_release_space() { _has_field_.set(139); return ext4_da_release_space_.get(); }

  bool has_ext4_da_reserve_space() const { return _has_field_[140]; }
  const Ext4DaReserveSpaceFtraceEvent& ext4_da_reserve_space() const { return *ext4_da_reserve_space_; }
  Ext4DaReserveSpaceFtraceEvent* mutable_ext4_da_reserve_space() { _has_field_.set(140); return ext4_da_reserve_space_.get(); }

  bool has_ext4_da_update_reserve_space() const { return _has_field_[141]; }
  const Ext4DaUpdateReserveSpaceFtraceEvent& ext4_da_update_reserve_space() const { return *ext4_da_update_reserve_space_; }
  Ext4DaUpdateReserveSpaceFtraceEvent* mutable_ext4_da_update_reserve_space() { _has_field_.set(141); return ext4_da_update_reserve_space_.get(); }

  bool has_ext4_da_write_pages() const { return _has_field_[142]; }
  const Ext4DaWritePagesFtraceEvent& ext4_da_write_pages() const { return *ext4_da_write_pages_; }
  Ext4DaWritePagesFtraceEvent* mutable_ext4_da_write_pages() { _has_field_.set(142); return ext4_da_write_pages_.get(); }

  bool has_ext4_da_write_pages_extent() const { return _has_field_[143]; }
  const Ext4DaWritePagesExtentFtraceEvent& ext4_da_write_pages_extent() const { return *ext4_da_write_pages_extent_; }
  Ext4DaWritePagesExtentFtraceEvent* mutable_ext4_da_write_pages_extent() { _has_field_.set(143); return ext4_da_write_pages_extent_.get(); }

  bool has_ext4_direct_io_enter() const { return _has_field_[144]; }
  const Ext4DirectIOEnterFtraceEvent& ext4_direct_io_enter() const { return *ext4_direct_io_enter_; }
  Ext4DirectIOEnterFtraceEvent* mutable_ext4_direct_io_enter() { _has_field_.set(144); return ext4_direct_io_enter_.get(); }

  bool has_ext4_direct_io_exit() const { return _has_field_[145]; }
  const Ext4DirectIOExitFtraceEvent& ext4_direct_io_exit() const { return *ext4_direct_io_exit_; }
  Ext4DirectIOExitFtraceEvent* mutable_ext4_direct_io_exit() { _has_field_.set(145); return ext4_direct_io_exit_.get(); }

  bool has_ext4_discard_blocks() const { return _has_field_[146]; }
  const Ext4DiscardBlocksFtraceEvent& ext4_discard_blocks() const { return *ext4_discard_blocks_; }
  Ext4DiscardBlocksFtraceEvent* mutable_ext4_discard_blocks() { _has_field_.set(146); return ext4_discard_blocks_.get(); }

  bool has_ext4_discard_preallocations() const { return _has_field_[147]; }
  const Ext4DiscardPreallocationsFtraceEvent& ext4_discard_preallocations() const { return *ext4_discard_preallocations_; }
  Ext4DiscardPreallocationsFtraceEvent* mutable_ext4_discard_preallocations() { _has_field_.set(147); return ext4_discard_preallocations_.get(); }

  bool has_ext4_drop_inode() const { return _has_field_[148]; }
  const Ext4DropInodeFtraceEvent& ext4_drop_inode() const { return *ext4_drop_inode_; }
  Ext4DropInodeFtraceEvent* mutable_ext4_drop_inode() { _has_field_.set(148); return ext4_drop_inode_.get(); }

  bool has_ext4_es_cache_extent() const { return _has_field_[149]; }
  const Ext4EsCacheExtentFtraceEvent& ext4_es_cache_extent() const { return *ext4_es_cache_extent_; }
  Ext4EsCacheExtentFtraceEvent* mutable_ext4_es_cache_extent() { _has_field_.set(149); return ext4_es_cache_extent_.get(); }

  bool has_ext4_es_find_delayed_extent_range_enter() const { return _has_field_[150]; }
  const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& ext4_es_find_delayed_extent_range_enter() const { return *ext4_es_find_delayed_extent_range_enter_; }
  Ext4EsFindDelayedExtentRangeEnterFtraceEvent* mutable_ext4_es_find_delayed_extent_range_enter() { _has_field_.set(150); return ext4_es_find_delayed_extent_range_enter_.get(); }

  bool has_ext4_es_find_delayed_extent_range_exit() const { return _has_field_[151]; }
  const Ext4EsFindDelayedExtentRangeExitFtraceEvent& ext4_es_find_delayed_extent_range_exit() const { return *ext4_es_find_delayed_extent_range_exit_; }
  Ext4EsFindDelayedExtentRangeExitFtraceEvent* mutable_ext4_es_find_delayed_extent_range_exit() { _has_field_.set(151); return ext4_es_find_delayed_extent_range_exit_.get(); }

  bool has_ext4_es_insert_extent() const { return _has_field_[152]; }
  const Ext4EsInsertExtentFtraceEvent& ext4_es_insert_extent() const { return *ext4_es_insert_extent_; }
  Ext4EsInsertExtentFtraceEvent* mutable_ext4_es_insert_extent() { _has_field_.set(152); return ext4_es_insert_extent_.get(); }

  bool has_ext4_es_lookup_extent_enter() const { return _has_field_[153]; }
  const Ext4EsLookupExtentEnterFtraceEvent& ext4_es_lookup_extent_enter() const { return *ext4_es_lookup_extent_enter_; }
  Ext4EsLookupExtentEnterFtraceEvent* mutable_ext4_es_lookup_extent_enter() { _has_field_.set(153); return ext4_es_lookup_extent_enter_.get(); }

  bool has_ext4_es_lookup_extent_exit() const { return _has_field_[154]; }
  const Ext4EsLookupExtentExitFtraceEvent& ext4_es_lookup_extent_exit() const { return *ext4_es_lookup_extent_exit_; }
  Ext4EsLookupExtentExitFtraceEvent* mutable_ext4_es_lookup_extent_exit() { _has_field_.set(154); return ext4_es_lookup_extent_exit_.get(); }

  bool has_ext4_es_remove_extent() const { return _has_field_[155]; }
  const Ext4EsRemoveExtentFtraceEvent& ext4_es_remove_extent() const { return *ext4_es_remove_extent_; }
  Ext4EsRemoveExtentFtraceEvent* mutable_ext4_es_remove_extent() { _has_field_.set(155); return ext4_es_remove_extent_.get(); }

  bool has_ext4_es_shrink() const { return _has_field_[156]; }
  const Ext4EsShrinkFtraceEvent& ext4_es_shrink() const { return *ext4_es_shrink_; }
  Ext4EsShrinkFtraceEvent* mutable_ext4_es_shrink() { _has_field_.set(156); return ext4_es_shrink_.get(); }

  bool has_ext4_es_shrink_count() const { return _has_field_[157]; }
  const Ext4EsShrinkCountFtraceEvent& ext4_es_shrink_count() const { return *ext4_es_shrink_count_; }
  Ext4EsShrinkCountFtraceEvent* mutable_ext4_es_shrink_count() { _has_field_.set(157); return ext4_es_shrink_count_.get(); }

  bool has_ext4_es_shrink_scan_enter() const { return _has_field_[158]; }
  const Ext4EsShrinkScanEnterFtraceEvent& ext4_es_shrink_scan_enter() const { return *ext4_es_shrink_scan_enter_; }
  Ext4EsShrinkScanEnterFtraceEvent* mutable_ext4_es_shrink_scan_enter() { _has_field_.set(158); return ext4_es_shrink_scan_enter_.get(); }

  bool has_ext4_es_shrink_scan_exit() const { return _has_field_[159]; }
  const Ext4EsShrinkScanExitFtraceEvent& ext4_es_shrink_scan_exit() const { return *ext4_es_shrink_scan_exit_; }
  Ext4EsShrinkScanExitFtraceEvent* mutable_ext4_es_shrink_scan_exit() { _has_field_.set(159); return ext4_es_shrink_scan_exit_.get(); }

  bool has_ext4_evict_inode() const { return _has_field_[160]; }
  const Ext4EvictInodeFtraceEvent& ext4_evict_inode() const { return *ext4_evict_inode_; }
  Ext4EvictInodeFtraceEvent* mutable_ext4_evict_inode() { _has_field_.set(160); return ext4_evict_inode_.get(); }

  bool has_ext4_ext_convert_to_initialized_enter() const { return _has_field_[161]; }
  const Ext4ExtConvertToInitializedEnterFtraceEvent& ext4_ext_convert_to_initialized_enter() const { return *ext4_ext_convert_to_initialized_enter_; }
  Ext4ExtConvertToInitializedEnterFtraceEvent* mutable_ext4_ext_convert_to_initialized_enter() { _has_field_.set(161); return ext4_ext_convert_to_initialized_enter_.get(); }

  bool has_ext4_ext_convert_to_initialized_fastpath() const { return _has_field_[162]; }
  const Ext4ExtConvertToInitializedFastpathFtraceEvent& ext4_ext_convert_to_initialized_fastpath() const { return *ext4_ext_convert_to_initialized_fastpath_; }
  Ext4ExtConvertToInitializedFastpathFtraceEvent* mutable_ext4_ext_convert_to_initialized_fastpath() { _has_field_.set(162); return ext4_ext_convert_to_initialized_fastpath_.get(); }

  bool has_ext4_ext_handle_unwritten_extents() const { return _has_field_[163]; }
  const Ext4ExtHandleUnwrittenExtentsFtraceEvent& ext4_ext_handle_unwritten_extents() const { return *ext4_ext_handle_unwritten_extents_; }
  Ext4ExtHandleUnwrittenExtentsFtraceEvent* mutable_ext4_ext_handle_unwritten_extents() { _has_field_.set(163); return ext4_ext_handle_unwritten_extents_.get(); }

  bool has_ext4_ext_in_cache() const { return _has_field_[164]; }
  const Ext4ExtInCacheFtraceEvent& ext4_ext_in_cache() const { return *ext4_ext_in_cache_; }
  Ext4ExtInCacheFtraceEvent* mutable_ext4_ext_in_cache() { _has_field_.set(164); return ext4_ext_in_cache_.get(); }

  bool has_ext4_ext_load_extent() const { return _has_field_[165]; }
  const Ext4ExtLoadExtentFtraceEvent& ext4_ext_load_extent() const { return *ext4_ext_load_extent_; }
  Ext4ExtLoadExtentFtraceEvent* mutable_ext4_ext_load_extent() { _has_field_.set(165); return ext4_ext_load_extent_.get(); }

  bool has_ext4_ext_map_blocks_enter() const { return _has_field_[166]; }
  const Ext4ExtMapBlocksEnterFtraceEvent& ext4_ext_map_blocks_enter() const { return *ext4_ext_map_blocks_enter_; }
  Ext4ExtMapBlocksEnterFtraceEvent* mutable_ext4_ext_map_blocks_enter() { _has_field_.set(166); return ext4_ext_map_blocks_enter_.get(); }

  bool has_ext4_ext_map_blocks_exit() const { return _has_field_[167]; }
  const Ext4ExtMapBlocksExitFtraceEvent& ext4_ext_map_blocks_exit() const { return *ext4_ext_map_blocks_exit_; }
  Ext4ExtMapBlocksExitFtraceEvent* mutable_ext4_ext_map_blocks_exit() { _has_field_.set(167); return ext4_ext_map_blocks_exit_.get(); }

  bool has_ext4_ext_put_in_cache() const { return _has_field_[168]; }
  const Ext4ExtPutInCacheFtraceEvent& ext4_ext_put_in_cache() const { return *ext4_ext_put_in_cache_; }
  Ext4ExtPutInCacheFtraceEvent* mutable_ext4_ext_put_in_cache() { _has_field_.set(168); return ext4_ext_put_in_cache_.get(); }

  bool has_ext4_ext_remove_space() const { return _has_field_[169]; }
  const Ext4ExtRemoveSpaceFtraceEvent& ext4_ext_remove_space() const { return *ext4_ext_remove_space_; }
  Ext4ExtRemoveSpaceFtraceEvent* mutable_ext4_ext_remove_space() { _has_field_.set(169); return ext4_ext_remove_space_.get(); }

  bool has_ext4_ext_remove_space_done() const { return _has_field_[170]; }
  const Ext4ExtRemoveSpaceDoneFtraceEvent& ext4_ext_remove_space_done() const { return *ext4_ext_remove_space_done_; }
  Ext4ExtRemoveSpaceDoneFtraceEvent* mutable_ext4_ext_remove_space_done() { _has_field_.set(170); return ext4_ext_remove_space_done_.get(); }

  bool has_ext4_ext_rm_idx() const { return _has_field_[171]; }
  const Ext4ExtRmIdxFtraceEvent& ext4_ext_rm_idx() const { return *ext4_ext_rm_idx_; }
  Ext4ExtRmIdxFtraceEvent* mutable_ext4_ext_rm_idx() { _has_field_.set(171); return ext4_ext_rm_idx_.get(); }

  bool has_ext4_ext_rm_leaf() const { return _has_field_[172]; }
  const Ext4ExtRmLeafFtraceEvent& ext4_ext_rm_leaf() const { return *ext4_ext_rm_leaf_; }
  Ext4ExtRmLeafFtraceEvent* mutable_ext4_ext_rm_leaf() { _has_field_.set(172); return ext4_ext_rm_leaf_.get(); }

  bool has_ext4_ext_show_extent() const { return _has_field_[173]; }
  const Ext4ExtShowExtentFtraceEvent& ext4_ext_show_extent() const { return *ext4_ext_show_extent_; }
  Ext4ExtShowExtentFtraceEvent* mutable_ext4_ext_show_extent() { _has_field_.set(173); return ext4_ext_show_extent_.get(); }

  bool has_ext4_fallocate_enter() const { return _has_field_[174]; }
  const Ext4FallocateEnterFtraceEvent& ext4_fallocate_enter() const { return *ext4_fallocate_enter_; }
  Ext4FallocateEnterFtraceEvent* mutable_ext4_fallocate_enter() { _has_field_.set(174); return ext4_fallocate_enter_.get(); }

  bool has_ext4_fallocate_exit() const { return _has_field_[175]; }
  const Ext4FallocateExitFtraceEvent& ext4_fallocate_exit() const { return *ext4_fallocate_exit_; }
  Ext4FallocateExitFtraceEvent* mutable_ext4_fallocate_exit() { _has_field_.set(175); return ext4_fallocate_exit_.get(); }

  bool has_ext4_find_delalloc_range() const { return _has_field_[176]; }
  const Ext4FindDelallocRangeFtraceEvent& ext4_find_delalloc_range() const { return *ext4_find_delalloc_range_; }
  Ext4FindDelallocRangeFtraceEvent* mutable_ext4_find_delalloc_range() { _has_field_.set(176); return ext4_find_delalloc_range_.get(); }

  bool has_ext4_forget() const { return _has_field_[177]; }
  const Ext4ForgetFtraceEvent& ext4_forget() const { return *ext4_forget_; }
  Ext4ForgetFtraceEvent* mutable_ext4_forget() { _has_field_.set(177); return ext4_forget_.get(); }

  bool has_ext4_free_blocks() const { return _has_field_[178]; }
  const Ext4FreeBlocksFtraceEvent& ext4_free_blocks() const { return *ext4_free_blocks_; }
  Ext4FreeBlocksFtraceEvent* mutable_ext4_free_blocks() { _has_field_.set(178); return ext4_free_blocks_.get(); }

  bool has_ext4_free_inode() const { return _has_field_[179]; }
  const Ext4FreeInodeFtraceEvent& ext4_free_inode() const { return *ext4_free_inode_; }
  Ext4FreeInodeFtraceEvent* mutable_ext4_free_inode() { _has_field_.set(179); return ext4_free_inode_.get(); }

  bool has_ext4_get_implied_cluster_alloc_exit() const { return _has_field_[180]; }
  const Ext4GetImpliedClusterAllocExitFtraceEvent& ext4_get_implied_cluster_alloc_exit() const { return *ext4_get_implied_cluster_alloc_exit_; }
  Ext4GetImpliedClusterAllocExitFtraceEvent* mutable_ext4_get_implied_cluster_alloc_exit() { _has_field_.set(180); return ext4_get_implied_cluster_alloc_exit_.get(); }

  bool has_ext4_get_reserved_cluster_alloc() const { return _has_field_[181]; }
  const Ext4GetReservedClusterAllocFtraceEvent& ext4_get_reserved_cluster_alloc() const { return *ext4_get_reserved_cluster_alloc_; }
  Ext4GetReservedClusterAllocFtraceEvent* mutable_ext4_get_reserved_cluster_alloc() { _has_field_.set(181); return ext4_get_reserved_cluster_alloc_.get(); }

  bool has_ext4_ind_map_blocks_enter() const { return _has_field_[182]; }
  const Ext4IndMapBlocksEnterFtraceEvent& ext4_ind_map_blocks_enter() const { return *ext4_ind_map_blocks_enter_; }
  Ext4IndMapBlocksEnterFtraceEvent* mutable_ext4_ind_map_blocks_enter() { _has_field_.set(182); return ext4_ind_map_blocks_enter_.get(); }

  bool has_ext4_ind_map_blocks_exit() const { return _has_field_[183]; }
  const Ext4IndMapBlocksExitFtraceEvent& ext4_ind_map_blocks_exit() const { return *ext4_ind_map_blocks_exit_; }
  Ext4IndMapBlocksExitFtraceEvent* mutable_ext4_ind_map_blocks_exit() { _has_field_.set(183); return ext4_ind_map_blocks_exit_.get(); }

  bool has_ext4_insert_range() const { return _has_field_[184]; }
  const Ext4InsertRangeFtraceEvent& ext4_insert_range() const { return *ext4_insert_range_; }
  Ext4InsertRangeFtraceEvent* mutable_ext4_insert_range() { _has_field_.set(184); return ext4_insert_range_.get(); }

  bool has_ext4_invalidatepage() const { return _has_field_[185]; }
  const Ext4InvalidatepageFtraceEvent& ext4_invalidatepage() const { return *ext4_invalidatepage_; }
  Ext4InvalidatepageFtraceEvent* mutable_ext4_invalidatepage() { _has_field_.set(185); return ext4_invalidatepage_.get(); }

  bool has_ext4_journal_start() const { return _has_field_[186]; }
  const Ext4JournalStartFtraceEvent& ext4_journal_start() const { return *ext4_journal_start_; }
  Ext4JournalStartFtraceEvent* mutable_ext4_journal_start() { _has_field_.set(186); return ext4_journal_start_.get(); }

  bool has_ext4_journal_start_reserved() const { return _has_field_[187]; }
  const Ext4JournalStartReservedFtraceEvent& ext4_journal_start_reserved() const { return *ext4_journal_start_reserved_; }
  Ext4JournalStartReservedFtraceEvent* mutable_ext4_journal_start_reserved() { _has_field_.set(187); return ext4_journal_start_reserved_.get(); }

  bool has_ext4_journalled_invalidatepage() const { return _has_field_[188]; }
  const Ext4JournalledInvalidatepageFtraceEvent& ext4_journalled_invalidatepage() const { return *ext4_journalled_invalidatepage_; }
  Ext4JournalledInvalidatepageFtraceEvent* mutable_ext4_journalled_invalidatepage() { _has_field_.set(188); return ext4_journalled_invalidatepage_.get(); }

  bool has_ext4_journalled_write_end() const { return _has_field_[189]; }
  const Ext4JournalledWriteEndFtraceEvent& ext4_journalled_write_end() const { return *ext4_journalled_write_end_; }
  Ext4JournalledWriteEndFtraceEvent* mutable_ext4_journalled_write_end() { _has_field_.set(189); return ext4_journalled_write_end_.get(); }

  bool has_ext4_load_inode() const { return _has_field_[190]; }
  const Ext4LoadInodeFtraceEvent& ext4_load_inode() const { return *ext4_load_inode_; }
  Ext4LoadInodeFtraceEvent* mutable_ext4_load_inode() { _has_field_.set(190); return ext4_load_inode_.get(); }

  bool has_ext4_load_inode_bitmap() const { return _has_field_[191]; }
  const Ext4LoadInodeBitmapFtraceEvent& ext4_load_inode_bitmap() const { return *ext4_load_inode_bitmap_; }
  Ext4LoadInodeBitmapFtraceEvent* mutable_ext4_load_inode_bitmap() { _has_field_.set(191); return ext4_load_inode_bitmap_.get(); }

  bool has_ext4_mark_inode_dirty() const { return _has_field_[192]; }
  const Ext4MarkInodeDirtyFtraceEvent& ext4_mark_inode_dirty() const { return *ext4_mark_inode_dirty_; }
  Ext4MarkInodeDirtyFtraceEvent* mutable_ext4_mark_inode_dirty() { _has_field_.set(192); return ext4_mark_inode_dirty_.get(); }

  bool has_ext4_mb_bitmap_load() const { return _has_field_[193]; }
  const Ext4MbBitmapLoadFtraceEvent& ext4_mb_bitmap_load() const { return *ext4_mb_bitmap_load_; }
  Ext4MbBitmapLoadFtraceEvent* mutable_ext4_mb_bitmap_load() { _has_field_.set(193); return ext4_mb_bitmap_load_.get(); }

  bool has_ext4_mb_buddy_bitmap_load() const { return _has_field_[194]; }
  const Ext4MbBuddyBitmapLoadFtraceEvent& ext4_mb_buddy_bitmap_load() const { return *ext4_mb_buddy_bitmap_load_; }
  Ext4MbBuddyBitmapLoadFtraceEvent* mutable_ext4_mb_buddy_bitmap_load() { _has_field_.set(194); return ext4_mb_buddy_bitmap_load_.get(); }

  bool has_ext4_mb_discard_preallocations() const { return _has_field_[195]; }
  const Ext4MbDiscardPreallocationsFtraceEvent& ext4_mb_discard_preallocations() const { return *ext4_mb_discard_preallocations_; }
  Ext4MbDiscardPreallocationsFtraceEvent* mutable_ext4_mb_discard_preallocations() { _has_field_.set(195); return ext4_mb_discard_preallocations_.get(); }

  bool has_ext4_mb_new_group_pa() const { return _has_field_[196]; }
  const Ext4MbNewGroupPaFtraceEvent& ext4_mb_new_group_pa() const { return *ext4_mb_new_group_pa_; }
  Ext4MbNewGroupPaFtraceEvent* mutable_ext4_mb_new_group_pa() { _has_field_.set(196); return ext4_mb_new_group_pa_.get(); }

  bool has_ext4_mb_new_inode_pa() const { return _has_field_[197]; }
  const Ext4MbNewInodePaFtraceEvent& ext4_mb_new_inode_pa() const { return *ext4_mb_new_inode_pa_; }
  Ext4MbNewInodePaFtraceEvent* mutable_ext4_mb_new_inode_pa() { _has_field_.set(197); return ext4_mb_new_inode_pa_.get(); }

  bool has_ext4_mb_release_group_pa() const { return _has_field_[198]; }
  const Ext4MbReleaseGroupPaFtraceEvent& ext4_mb_release_group_pa() const { return *ext4_mb_release_group_pa_; }
  Ext4MbReleaseGroupPaFtraceEvent* mutable_ext4_mb_release_group_pa() { _has_field_.set(198); return ext4_mb_release_group_pa_.get(); }

  bool has_ext4_mb_release_inode_pa() const { return _has_field_[199]; }
  const Ext4MbReleaseInodePaFtraceEvent& ext4_mb_release_inode_pa() const { return *ext4_mb_release_inode_pa_; }
  Ext4MbReleaseInodePaFtraceEvent* mutable_ext4_mb_release_inode_pa() { _has_field_.set(199); return ext4_mb_release_inode_pa_.get(); }

  bool has_ext4_mballoc_alloc() const { return _has_field_[200]; }
  const Ext4MballocAllocFtraceEvent& ext4_mballoc_alloc() const { return *ext4_mballoc_alloc_; }
  Ext4MballocAllocFtraceEvent* mutable_ext4_mballoc_alloc() { _has_field_.set(200); return ext4_mballoc_alloc_.get(); }

  bool has_ext4_mballoc_discard() const { return _has_field_[201]; }
  const Ext4MballocDiscardFtraceEvent& ext4_mballoc_discard() const { return *ext4_mballoc_discard_; }
  Ext4MballocDiscardFtraceEvent* mutable_ext4_mballoc_discard() { _has_field_.set(201); return ext4_mballoc_discard_.get(); }

  bool has_ext4_mballoc_free() const { return _has_field_[202]; }
  const Ext4MballocFreeFtraceEvent& ext4_mballoc_free() const { return *ext4_mballoc_free_; }
  Ext4MballocFreeFtraceEvent* mutable_ext4_mballoc_free() { _has_field_.set(202); return ext4_mballoc_free_.get(); }

  bool has_ext4_mballoc_prealloc() const { return _has_field_[203]; }
  const Ext4MballocPreallocFtraceEvent& ext4_mballoc_prealloc() const { return *ext4_mballoc_prealloc_; }
  Ext4MballocPreallocFtraceEvent* mutable_ext4_mballoc_prealloc() { _has_field_.set(203); return ext4_mballoc_prealloc_.get(); }

  bool has_ext4_other_inode_update_time() const { return _has_field_[204]; }
  const Ext4OtherInodeUpdateTimeFtraceEvent& ext4_other_inode_update_time() const { return *ext4_other_inode_update_time_; }
  Ext4OtherInodeUpdateTimeFtraceEvent* mutable_ext4_other_inode_update_time() { _has_field_.set(204); return ext4_other_inode_update_time_.get(); }

  bool has_ext4_punch_hole() const { return _has_field_[205]; }
  const Ext4PunchHoleFtraceEvent& ext4_punch_hole() const { return *ext4_punch_hole_; }
  Ext4PunchHoleFtraceEvent* mutable_ext4_punch_hole() { _has_field_.set(205); return ext4_punch_hole_.get(); }

  bool has_ext4_read_block_bitmap_load() const { return _has_field_[206]; }
  const Ext4ReadBlockBitmapLoadFtraceEvent& ext4_read_block_bitmap_load() const { return *ext4_read_block_bitmap_load_; }
  Ext4ReadBlockBitmapLoadFtraceEvent* mutable_ext4_read_block_bitmap_load() { _has_field_.set(206); return ext4_read_block_bitmap_load_.get(); }

  bool has_ext4_readpage() const { return _has_field_[207]; }
  const Ext4ReadpageFtraceEvent& ext4_readpage() const { return *ext4_readpage_; }
  Ext4ReadpageFtraceEvent* mutable_ext4_readpage() { _has_field_.set(207); return ext4_readpage_.get(); }

  bool has_ext4_releasepage() const { return _has_field_[208]; }
  const Ext4ReleasepageFtraceEvent& ext4_releasepage() const { return *ext4_releasepage_; }
  Ext4ReleasepageFtraceEvent* mutable_ext4_releasepage() { _has_field_.set(208); return ext4_releasepage_.get(); }

  bool has_ext4_remove_blocks() const { return _has_field_[209]; }
  const Ext4RemoveBlocksFtraceEvent& ext4_remove_blocks() const { return *ext4_remove_blocks_; }
  Ext4RemoveBlocksFtraceEvent* mutable_ext4_remove_blocks() { _has_field_.set(209); return ext4_remove_blocks_.get(); }

  bool has_ext4_request_blocks() const { return _has_field_[210]; }
  const Ext4RequestBlocksFtraceEvent& ext4_request_blocks() const { return *ext4_request_blocks_; }
  Ext4RequestBlocksFtraceEvent* mutable_ext4_request_blocks() { _has_field_.set(210); return ext4_request_blocks_.get(); }

  bool has_ext4_request_inode() const { return _has_field_[211]; }
  const Ext4RequestInodeFtraceEvent& ext4_request_inode() const { return *ext4_request_inode_; }
  Ext4RequestInodeFtraceEvent* mutable_ext4_request_inode() { _has_field_.set(211); return ext4_request_inode_.get(); }

  bool has_ext4_sync_fs() const { return _has_field_[212]; }
  const Ext4SyncFsFtraceEvent& ext4_sync_fs() const { return *ext4_sync_fs_; }
  Ext4SyncFsFtraceEvent* mutable_ext4_sync_fs() { _has_field_.set(212); return ext4_sync_fs_.get(); }

  bool has_ext4_trim_all_free() const { return _has_field_[213]; }
  const Ext4TrimAllFreeFtraceEvent& ext4_trim_all_free() const { return *ext4_trim_all_free_; }
  Ext4TrimAllFreeFtraceEvent* mutable_ext4_trim_all_free() { _has_field_.set(213); return ext4_trim_all_free_.get(); }

  bool has_ext4_trim_extent() const { return _has_field_[214]; }
  const Ext4TrimExtentFtraceEvent& ext4_trim_extent() const { return *ext4_trim_extent_; }
  Ext4TrimExtentFtraceEvent* mutable_ext4_trim_extent() { _has_field_.set(214); return ext4_trim_extent_.get(); }

  bool has_ext4_truncate_enter() const { return _has_field_[215]; }
  const Ext4TruncateEnterFtraceEvent& ext4_truncate_enter() const { return *ext4_truncate_enter_; }
  Ext4TruncateEnterFtraceEvent* mutable_ext4_truncate_enter() { _has_field_.set(215); return ext4_truncate_enter_.get(); }

  bool has_ext4_truncate_exit() const { return _has_field_[216]; }
  const Ext4TruncateExitFtraceEvent& ext4_truncate_exit() const { return *ext4_truncate_exit_; }
  Ext4TruncateExitFtraceEvent* mutable_ext4_truncate_exit() { _has_field_.set(216); return ext4_truncate_exit_.get(); }

  bool has_ext4_unlink_enter() const { return _has_field_[217]; }
  const Ext4UnlinkEnterFtraceEvent& ext4_unlink_enter() const { return *ext4_unlink_enter_; }
  Ext4UnlinkEnterFtraceEvent* mutable_ext4_unlink_enter() { _has_field_.set(217); return ext4_unlink_enter_.get(); }

  bool has_ext4_unlink_exit() const { return _has_field_[218]; }
  const Ext4UnlinkExitFtraceEvent& ext4_unlink_exit() const { return *ext4_unlink_exit_; }
  Ext4UnlinkExitFtraceEvent* mutable_ext4_unlink_exit() { _has_field_.set(218); return ext4_unlink_exit_.get(); }

  bool has_ext4_write_begin() const { return _has_field_[219]; }
  const Ext4WriteBeginFtraceEvent& ext4_write_begin() const { return *ext4_write_begin_; }
  Ext4WriteBeginFtraceEvent* mutable_ext4_write_begin() { _has_field_.set(219); return ext4_write_begin_.get(); }

  bool has_ext4_write_end() const { return _has_field_[230]; }
  const Ext4WriteEndFtraceEvent& ext4_write_end() const { return *ext4_write_end_; }
  Ext4WriteEndFtraceEvent* mutable_ext4_write_end() { _has_field_.set(230); return ext4_write_end_.get(); }

  bool has_ext4_writepage() const { return _has_field_[231]; }
  const Ext4WritepageFtraceEvent& ext4_writepage() const { return *ext4_writepage_; }
  Ext4WritepageFtraceEvent* mutable_ext4_writepage() { _has_field_.set(231); return ext4_writepage_.get(); }

  bool has_ext4_writepages() const { return _has_field_[232]; }
  const Ext4WritepagesFtraceEvent& ext4_writepages() const { return *ext4_writepages_; }
  Ext4WritepagesFtraceEvent* mutable_ext4_writepages() { _has_field_.set(232); return ext4_writepages_.get(); }

  bool has_ext4_writepages_result() const { return _has_field_[233]; }
  const Ext4WritepagesResultFtraceEvent& ext4_writepages_result() const { return *ext4_writepages_result_; }
  Ext4WritepagesResultFtraceEvent* mutable_ext4_writepages_result() { _has_field_.set(233); return ext4_writepages_result_.get(); }

  bool has_ext4_zero_range() const { return _has_field_[234]; }
  const Ext4ZeroRangeFtraceEvent& ext4_zero_range() const { return *ext4_zero_range_; }
  Ext4ZeroRangeFtraceEvent* mutable_ext4_zero_range() { _has_field_.set(234); return ext4_zero_range_.get(); }

  bool has_task_newtask() const { return _has_field_[235]; }
  const TaskNewtaskFtraceEvent& task_newtask() const { return *task_newtask_; }
  TaskNewtaskFtraceEvent* mutable_task_newtask() { _has_field_.set(235); return task_newtask_.get(); }

  bool has_task_rename() const { return _has_field_[236]; }
  const TaskRenameFtraceEvent& task_rename() const { return *task_rename_; }
  TaskRenameFtraceEvent* mutable_task_rename() { _has_field_.set(236); return task_rename_.get(); }

  bool has_sched_process_exec() const { return _has_field_[237]; }
  const SchedProcessExecFtraceEvent& sched_process_exec() const { return *sched_process_exec_; }
  SchedProcessExecFtraceEvent* mutable_sched_process_exec() { _has_field_.set(237); return sched_process_exec_.get(); }

  bool has_sched_process_exit() const { return _has_field_[238]; }
  const SchedProcessExitFtraceEvent& sched_process_exit() const { return *sched_process_exit_; }
  SchedProcessExitFtraceEvent* mutable_sched_process_exit() { _has_field_.set(238); return sched_process_exit_.get(); }

  bool has_sched_process_fork() const { return _has_field_[239]; }
  const SchedProcessForkFtraceEvent& sched_process_fork() const { return *sched_process_fork_; }
  SchedProcessForkFtraceEvent* mutable_sched_process_fork() { _has_field_.set(239); return sched_process_fork_.get(); }

  bool has_sched_process_free() const { return _has_field_[240]; }
  const SchedProcessFreeFtraceEvent& sched_process_free() const { return *sched_process_free_; }
  SchedProcessFreeFtraceEvent* mutable_sched_process_free() { _has_field_.set(240); return sched_process_free_.get(); }

  bool has_sched_process_hang() const { return _has_field_[241]; }
  const SchedProcessHangFtraceEvent& sched_process_hang() const { return *sched_process_hang_; }
  SchedProcessHangFtraceEvent* mutable_sched_process_hang() { _has_field_.set(241); return sched_process_hang_.get(); }

  bool has_sched_process_wait() const { return _has_field_[242]; }
  const SchedProcessWaitFtraceEvent& sched_process_wait() const { return *sched_process_wait_; }
  SchedProcessWaitFtraceEvent* mutable_sched_process_wait() { _has_field_.set(242); return sched_process_wait_.get(); }

  bool has_f2fs_do_submit_bio() const { return _has_field_[243]; }
  const F2fsDoSubmitBioFtraceEvent& f2fs_do_submit_bio() const { return *f2fs_do_submit_bio_; }
  F2fsDoSubmitBioFtraceEvent* mutable_f2fs_do_submit_bio() { _has_field_.set(243); return f2fs_do_submit_bio_.get(); }

  bool has_f2fs_evict_inode() const { return _has_field_[244]; }
  const F2fsEvictInodeFtraceEvent& f2fs_evict_inode() const { return *f2fs_evict_inode_; }
  F2fsEvictInodeFtraceEvent* mutable_f2fs_evict_inode() { _has_field_.set(244); return f2fs_evict_inode_.get(); }

  bool has_f2fs_fallocate() const { return _has_field_[245]; }
  const F2fsFallocateFtraceEvent& f2fs_fallocate() const { return *f2fs_fallocate_; }
  F2fsFallocateFtraceEvent* mutable_f2fs_fallocate() { _has_field_.set(245); return f2fs_fallocate_.get(); }

  bool has_f2fs_get_data_block() const { return _has_field_[246]; }
  const F2fsGetDataBlockFtraceEvent& f2fs_get_data_block() const { return *f2fs_get_data_block_; }
  F2fsGetDataBlockFtraceEvent* mutable_f2fs_get_data_block() { _has_field_.set(246); return f2fs_get_data_block_.get(); }

  bool has_f2fs_get_victim() const { return _has_field_[247]; }
  const F2fsGetVictimFtraceEvent& f2fs_get_victim() const { return *f2fs_get_victim_; }
  F2fsGetVictimFtraceEvent* mutable_f2fs_get_victim() { _has_field_.set(247); return f2fs_get_victim_.get(); }

  bool has_f2fs_iget() const { return _has_field_[248]; }
  const F2fsIgetFtraceEvent& f2fs_iget() const { return *f2fs_iget_; }
  F2fsIgetFtraceEvent* mutable_f2fs_iget() { _has_field_.set(248); return f2fs_iget_.get(); }

  bool has_f2fs_iget_exit() const { return _has_field_[249]; }
  const F2fsIgetExitFtraceEvent& f2fs_iget_exit() const { return *f2fs_iget_exit_; }
  F2fsIgetExitFtraceEvent* mutable_f2fs_iget_exit() { _has_field_.set(249); return f2fs_iget_exit_.get(); }

  bool has_f2fs_new_inode() const { return _has_field_[250]; }
  const F2fsNewInodeFtraceEvent& f2fs_new_inode() const { return *f2fs_new_inode_; }
  F2fsNewInodeFtraceEvent* mutable_f2fs_new_inode() { _has_field_.set(250); return f2fs_new_inode_.get(); }

  bool has_f2fs_readpage() const { return _has_field_[251]; }
  const F2fsReadpageFtraceEvent& f2fs_readpage() const { return *f2fs_readpage_; }
  F2fsReadpageFtraceEvent* mutable_f2fs_readpage() { _has_field_.set(251); return f2fs_readpage_.get(); }

  bool has_f2fs_reserve_new_block() const { return _has_field_[252]; }
  const F2fsReserveNewBlockFtraceEvent& f2fs_reserve_new_block() const { return *f2fs_reserve_new_block_; }
  F2fsReserveNewBlockFtraceEvent* mutable_f2fs_reserve_new_block() { _has_field_.set(252); return f2fs_reserve_new_block_.get(); }

  bool has_f2fs_set_page_dirty() const { return _has_field_[253]; }
  const F2fsSetPageDirtyFtraceEvent& f2fs_set_page_dirty() const { return *f2fs_set_page_dirty_; }
  F2fsSetPageDirtyFtraceEvent* mutable_f2fs_set_page_dirty() { _has_field_.set(253); return f2fs_set_page_dirty_.get(); }

  bool has_f2fs_submit_write_page() const { return _has_field_[254]; }
  const F2fsSubmitWritePageFtraceEvent& f2fs_submit_write_page() const { return *f2fs_submit_write_page_; }
  F2fsSubmitWritePageFtraceEvent* mutable_f2fs_submit_write_page() { _has_field_.set(254); return f2fs_submit_write_page_.get(); }

  bool has_f2fs_sync_file_enter() const { return _has_field_[255]; }
  const F2fsSyncFileEnterFtraceEvent& f2fs_sync_file_enter() const { return *f2fs_sync_file_enter_; }
  F2fsSyncFileEnterFtraceEvent* mutable_f2fs_sync_file_enter() { _has_field_.set(255); return f2fs_sync_file_enter_.get(); }

  bool has_f2fs_sync_file_exit() const { return _has_field_[256]; }
  const F2fsSyncFileExitFtraceEvent& f2fs_sync_file_exit() const { return *f2fs_sync_file_exit_; }
  F2fsSyncFileExitFtraceEvent* mutable_f2fs_sync_file_exit() { _has_field_.set(256); return f2fs_sync_file_exit_.get(); }

  bool has_f2fs_sync_fs() const { return _has_field_[257]; }
  const F2fsSyncFsFtraceEvent& f2fs_sync_fs() const { return *f2fs_sync_fs_; }
  F2fsSyncFsFtraceEvent* mutable_f2fs_sync_fs() { _has_field_.set(257); return f2fs_sync_fs_.get(); }

  bool has_f2fs_truncate() const { return _has_field_[258]; }
  const F2fsTruncateFtraceEvent& f2fs_truncate() const { return *f2fs_truncate_; }
  F2fsTruncateFtraceEvent* mutable_f2fs_truncate() { _has_field_.set(258); return f2fs_truncate_.get(); }

  bool has_f2fs_truncate_blocks_enter() const { return _has_field_[259]; }
  const F2fsTruncateBlocksEnterFtraceEvent& f2fs_truncate_blocks_enter() const { return *f2fs_truncate_blocks_enter_; }
  F2fsTruncateBlocksEnterFtraceEvent* mutable_f2fs_truncate_blocks_enter() { _has_field_.set(259); return f2fs_truncate_blocks_enter_.get(); }

  bool has_f2fs_truncate_blocks_exit() const { return _has_field_[260]; }
  const F2fsTruncateBlocksExitFtraceEvent& f2fs_truncate_blocks_exit() const { return *f2fs_truncate_blocks_exit_; }
  F2fsTruncateBlocksExitFtraceEvent* mutable_f2fs_truncate_blocks_exit() { _has_field_.set(260); return f2fs_truncate_blocks_exit_.get(); }

  bool has_f2fs_truncate_data_blocks_range() const { return _has_field_[261]; }
  const F2fsTruncateDataBlocksRangeFtraceEvent& f2fs_truncate_data_blocks_range() const { return *f2fs_truncate_data_blocks_range_; }
  F2fsTruncateDataBlocksRangeFtraceEvent* mutable_f2fs_truncate_data_blocks_range() { _has_field_.set(261); return f2fs_truncate_data_blocks_range_.get(); }

  bool has_f2fs_truncate_inode_blocks_enter() const { return _has_field_[262]; }
  const F2fsTruncateInodeBlocksEnterFtraceEvent& f2fs_truncate_inode_blocks_enter() const { return *f2fs_truncate_inode_blocks_enter_; }
  F2fsTruncateInodeBlocksEnterFtraceEvent* mutable_f2fs_truncate_inode_blocks_enter() { _has_field_.set(262); return f2fs_truncate_inode_blocks_enter_.get(); }

  bool has_f2fs_truncate_inode_blocks_exit() const { return _has_field_[263]; }
  const F2fsTruncateInodeBlocksExitFtraceEvent& f2fs_truncate_inode_blocks_exit() const { return *f2fs_truncate_inode_blocks_exit_; }
  F2fsTruncateInodeBlocksExitFtraceEvent* mutable_f2fs_truncate_inode_blocks_exit() { _has_field_.set(263); return f2fs_truncate_inode_blocks_exit_.get(); }

  bool has_f2fs_truncate_node() const { return _has_field_[264]; }
  const F2fsTruncateNodeFtraceEvent& f2fs_truncate_node() const { return *f2fs_truncate_node_; }
  F2fsTruncateNodeFtraceEvent* mutable_f2fs_truncate_node() { _has_field_.set(264); return f2fs_truncate_node_.get(); }

  bool has_f2fs_truncate_nodes_enter() const { return _has_field_[265]; }
  const F2fsTruncateNodesEnterFtraceEvent& f2fs_truncate_nodes_enter() const { return *f2fs_truncate_nodes_enter_; }
  F2fsTruncateNodesEnterFtraceEvent* mutable_f2fs_truncate_nodes_enter() { _has_field_.set(265); return f2fs_truncate_nodes_enter_.get(); }

  bool has_f2fs_truncate_nodes_exit() const { return _has_field_[266]; }
  const F2fsTruncateNodesExitFtraceEvent& f2fs_truncate_nodes_exit() const { return *f2fs_truncate_nodes_exit_; }
  F2fsTruncateNodesExitFtraceEvent* mutable_f2fs_truncate_nodes_exit() { _has_field_.set(266); return f2fs_truncate_nodes_exit_.get(); }

  bool has_f2fs_truncate_partial_nodes() const { return _has_field_[267]; }
  const F2fsTruncatePartialNodesFtraceEvent& f2fs_truncate_partial_nodes() const { return *f2fs_truncate_partial_nodes_; }
  F2fsTruncatePartialNodesFtraceEvent* mutable_f2fs_truncate_partial_nodes() { _has_field_.set(267); return f2fs_truncate_partial_nodes_.get(); }

  bool has_f2fs_unlink_enter() const { return _has_field_[268]; }
  const F2fsUnlinkEnterFtraceEvent& f2fs_unlink_enter() const { return *f2fs_unlink_enter_; }
  F2fsUnlinkEnterFtraceEvent* mutable_f2fs_unlink_enter() { _has_field_.set(268); return f2fs_unlink_enter_.get(); }

  bool has_f2fs_unlink_exit() const { return _has_field_[269]; }
  const F2fsUnlinkExitFtraceEvent& f2fs_unlink_exit() const { return *f2fs_unlink_exit_; }
  F2fsUnlinkExitFtraceEvent* mutable_f2fs_unlink_exit() { _has_field_.set(269); return f2fs_unlink_exit_.get(); }

  bool has_f2fs_vm_page_mkwrite() const { return _has_field_[270]; }
  const F2fsVmPageMkwriteFtraceEvent& f2fs_vm_page_mkwrite() const { return *f2fs_vm_page_mkwrite_; }
  F2fsVmPageMkwriteFtraceEvent* mutable_f2fs_vm_page_mkwrite() { _has_field_.set(270); return f2fs_vm_page_mkwrite_.get(); }

  bool has_f2fs_write_begin() const { return _has_field_[271]; }
  const F2fsWriteBeginFtraceEvent& f2fs_write_begin() const { return *f2fs_write_begin_; }
  F2fsWriteBeginFtraceEvent* mutable_f2fs_write_begin() { _has_field_.set(271); return f2fs_write_begin_.get(); }

  bool has_f2fs_write_checkpoint() const { return _has_field_[272]; }
  const F2fsWriteCheckpointFtraceEvent& f2fs_write_checkpoint() const { return *f2fs_write_checkpoint_; }
  F2fsWriteCheckpointFtraceEvent* mutable_f2fs_write_checkpoint() { _has_field_.set(272); return f2fs_write_checkpoint_.get(); }

  bool has_f2fs_write_end() const { return _has_field_[273]; }
  const F2fsWriteEndFtraceEvent& f2fs_write_end() const { return *f2fs_write_end_; }
  F2fsWriteEndFtraceEvent* mutable_f2fs_write_end() { _has_field_.set(273); return f2fs_write_end_.get(); }

  bool has_alloc_pages_iommu_end() const { return _has_field_[274]; }
  const AllocPagesIommuEndFtraceEvent& alloc_pages_iommu_end() const { return *alloc_pages_iommu_end_; }
  AllocPagesIommuEndFtraceEvent* mutable_alloc_pages_iommu_end() { _has_field_.set(274); return alloc_pages_iommu_end_.get(); }

  bool has_alloc_pages_iommu_fail() const { return _has_field_[275]; }
  const AllocPagesIommuFailFtraceEvent& alloc_pages_iommu_fail() const { return *alloc_pages_iommu_fail_; }
  AllocPagesIommuFailFtraceEvent* mutable_alloc_pages_iommu_fail() { _has_field_.set(275); return alloc_pages_iommu_fail_.get(); }

  bool has_alloc_pages_iommu_start() const { return _has_field_[276]; }
  const AllocPagesIommuStartFtraceEvent& alloc_pages_iommu_start() const { return *alloc_pages_iommu_start_; }
  AllocPagesIommuStartFtraceEvent* mutable_alloc_pages_iommu_start() { _has_field_.set(276); return alloc_pages_iommu_start_.get(); }

  bool has_alloc_pages_sys_end() const { return _has_field_[277]; }
  const AllocPagesSysEndFtraceEvent& alloc_pages_sys_end() const { return *alloc_pages_sys_end_; }
  AllocPagesSysEndFtraceEvent* mutable_alloc_pages_sys_end() { _has_field_.set(277); return alloc_pages_sys_end_.get(); }

  bool has_alloc_pages_sys_fail() const { return _has_field_[278]; }
  const AllocPagesSysFailFtraceEvent& alloc_pages_sys_fail() const { return *alloc_pages_sys_fail_; }
  AllocPagesSysFailFtraceEvent* mutable_alloc_pages_sys_fail() { _has_field_.set(278); return alloc_pages_sys_fail_.get(); }

  bool has_alloc_pages_sys_start() const { return _has_field_[279]; }
  const AllocPagesSysStartFtraceEvent& alloc_pages_sys_start() const { return *alloc_pages_sys_start_; }
  AllocPagesSysStartFtraceEvent* mutable_alloc_pages_sys_start() { _has_field_.set(279); return alloc_pages_sys_start_.get(); }

  bool has_dma_alloc_contiguous_retry() const { return _has_field_[280]; }
  const DmaAllocContiguousRetryFtraceEvent& dma_alloc_contiguous_retry() const { return *dma_alloc_contiguous_retry_; }
  DmaAllocContiguousRetryFtraceEvent* mutable_dma_alloc_contiguous_retry() { _has_field_.set(280); return dma_alloc_contiguous_retry_.get(); }

  bool has_iommu_map_range() const { return _has_field_[281]; }
  const IommuMapRangeFtraceEvent& iommu_map_range() const { return *iommu_map_range_; }
  IommuMapRangeFtraceEvent* mutable_iommu_map_range() { _has_field_.set(281); return iommu_map_range_.get(); }

  bool has_iommu_sec_ptbl_map_range_end() const { return _has_field_[282]; }
  const IommuSecPtblMapRangeEndFtraceEvent& iommu_sec_ptbl_map_range_end() const { return *iommu_sec_ptbl_map_range_end_; }
  IommuSecPtblMapRangeEndFtraceEvent* mutable_iommu_sec_ptbl_map_range_end() { _has_field_.set(282); return iommu_sec_ptbl_map_range_end_.get(); }

  bool has_iommu_sec_ptbl_map_range_start() const { return _has_field_[283]; }
  const IommuSecPtblMapRangeStartFtraceEvent& iommu_sec_ptbl_map_range_start() const { return *iommu_sec_ptbl_map_range_start_; }
  IommuSecPtblMapRangeStartFtraceEvent* mutable_iommu_sec_ptbl_map_range_start() { _has_field_.set(283); return iommu_sec_ptbl_map_range_start_.get(); }

  bool has_ion_alloc_buffer_end() const { return _has_field_[284]; }
  const IonAllocBufferEndFtraceEvent& ion_alloc_buffer_end() const { return *ion_alloc_buffer_end_; }
  IonAllocBufferEndFtraceEvent* mutable_ion_alloc_buffer_end() { _has_field_.set(284); return ion_alloc_buffer_end_.get(); }

  bool has_ion_alloc_buffer_fail() const { return _has_field_[285]; }
  const IonAllocBufferFailFtraceEvent& ion_alloc_buffer_fail() const { return *ion_alloc_buffer_fail_; }
  IonAllocBufferFailFtraceEvent* mutable_ion_alloc_buffer_fail() { _has_field_.set(285); return ion_alloc_buffer_fail_.get(); }

  bool has_ion_alloc_buffer_fallback() const { return _has_field_[286]; }
  const IonAllocBufferFallbackFtraceEvent& ion_alloc_buffer_fallback() const { return *ion_alloc_buffer_fallback_; }
  IonAllocBufferFallbackFtraceEvent* mutable_ion_alloc_buffer_fallback() { _has_field_.set(286); return ion_alloc_buffer_fallback_.get(); }

  bool has_ion_alloc_buffer_start() const { return _has_field_[287]; }
  const IonAllocBufferStartFtraceEvent& ion_alloc_buffer_start() const { return *ion_alloc_buffer_start_; }
  IonAllocBufferStartFtraceEvent* mutable_ion_alloc_buffer_start() { _has_field_.set(287); return ion_alloc_buffer_start_.get(); }

  bool has_ion_cp_alloc_retry() const { return _has_field_[288]; }
  const IonCpAllocRetryFtraceEvent& ion_cp_alloc_retry() const { return *ion_cp_alloc_retry_; }
  IonCpAllocRetryFtraceEvent* mutable_ion_cp_alloc_retry() { _has_field_.set(288); return ion_cp_alloc_retry_.get(); }

  bool has_ion_cp_secure_buffer_end() const { return _has_field_[289]; }
  const IonCpSecureBufferEndFtraceEvent& ion_cp_secure_buffer_end() const { return *ion_cp_secure_buffer_end_; }
  IonCpSecureBufferEndFtraceEvent* mutable_ion_cp_secure_buffer_end() { _has_field_.set(289); return ion_cp_secure_buffer_end_.get(); }

  bool has_ion_cp_secure_buffer_start() const { return _has_field_[290]; }
  const IonCpSecureBufferStartFtraceEvent& ion_cp_secure_buffer_start() const { return *ion_cp_secure_buffer_start_; }
  IonCpSecureBufferStartFtraceEvent* mutable_ion_cp_secure_buffer_start() { _has_field_.set(290); return ion_cp_secure_buffer_start_.get(); }

  bool has_ion_prefetching() const { return _has_field_[291]; }
  const IonPrefetchingFtraceEvent& ion_prefetching() const { return *ion_prefetching_; }
  IonPrefetchingFtraceEvent* mutable_ion_prefetching() { _has_field_.set(291); return ion_prefetching_.get(); }

  bool has_ion_secure_cma_add_to_pool_end() const { return _has_field_[292]; }
  const IonSecureCmaAddToPoolEndFtraceEvent& ion_secure_cma_add_to_pool_end() const { return *ion_secure_cma_add_to_pool_end_; }
  IonSecureCmaAddToPoolEndFtraceEvent* mutable_ion_secure_cma_add_to_pool_end() { _has_field_.set(292); return ion_secure_cma_add_to_pool_end_.get(); }

  bool has_ion_secure_cma_add_to_pool_start() const { return _has_field_[293]; }
  const IonSecureCmaAddToPoolStartFtraceEvent& ion_secure_cma_add_to_pool_start() const { return *ion_secure_cma_add_to_pool_start_; }
  IonSecureCmaAddToPoolStartFtraceEvent* mutable_ion_secure_cma_add_to_pool_start() { _has_field_.set(293); return ion_secure_cma_add_to_pool_start_.get(); }

  bool has_ion_secure_cma_allocate_end() const { return _has_field_[294]; }
  const IonSecureCmaAllocateEndFtraceEvent& ion_secure_cma_allocate_end() const { return *ion_secure_cma_allocate_end_; }
  IonSecureCmaAllocateEndFtraceEvent* mutable_ion_secure_cma_allocate_end() { _has_field_.set(294); return ion_secure_cma_allocate_end_.get(); }

  bool has_ion_secure_cma_allocate_start() const { return _has_field_[295]; }
  const IonSecureCmaAllocateStartFtraceEvent& ion_secure_cma_allocate_start() const { return *ion_secure_cma_allocate_start_; }
  IonSecureCmaAllocateStartFtraceEvent* mutable_ion_secure_cma_allocate_start() { _has_field_.set(295); return ion_secure_cma_allocate_start_.get(); }

  bool has_ion_secure_cma_shrink_pool_end() const { return _has_field_[296]; }
  const IonSecureCmaShrinkPoolEndFtraceEvent& ion_secure_cma_shrink_pool_end() const { return *ion_secure_cma_shrink_pool_end_; }
  IonSecureCmaShrinkPoolEndFtraceEvent* mutable_ion_secure_cma_shrink_pool_end() { _has_field_.set(296); return ion_secure_cma_shrink_pool_end_.get(); }

  bool has_ion_secure_cma_shrink_pool_start() const { return _has_field_[297]; }
  const IonSecureCmaShrinkPoolStartFtraceEvent& ion_secure_cma_shrink_pool_start() const { return *ion_secure_cma_shrink_pool_start_; }
  IonSecureCmaShrinkPoolStartFtraceEvent* mutable_ion_secure_cma_shrink_pool_start() { _has_field_.set(297); return ion_secure_cma_shrink_pool_start_.get(); }

  bool has_kfree() const { return _has_field_[298]; }
  const KfreeFtraceEvent& kfree() const { return *kfree_; }
  KfreeFtraceEvent* mutable_kfree() { _has_field_.set(298); return kfree_.get(); }

  bool has_kmalloc() const { return _has_field_[299]; }
  const KmallocFtraceEvent& kmalloc() const { return *kmalloc_; }
  KmallocFtraceEvent* mutable_kmalloc() { _has_field_.set(299); return kmalloc_.get(); }

  bool has_kmalloc_node() const { return _has_field_[300]; }
  const KmallocNodeFtraceEvent& kmalloc_node() const { return *kmalloc_node_; }
  KmallocNodeFtraceEvent* mutable_kmalloc_node() { _has_field_.set(300); return kmalloc_node_.get(); }

  bool has_kmem_cache_alloc() const { return _has_field_[301]; }
  const KmemCacheAllocFtraceEvent& kmem_cache_alloc() const { return *kmem_cache_alloc_; }
  KmemCacheAllocFtraceEvent* mutable_kmem_cache_alloc() { _has_field_.set(301); return kmem_cache_alloc_.get(); }

  bool has_kmem_cache_alloc_node() const { return _has_field_[302]; }
  const KmemCacheAllocNodeFtraceEvent& kmem_cache_alloc_node() const { return *kmem_cache_alloc_node_; }
  KmemCacheAllocNodeFtraceEvent* mutable_kmem_cache_alloc_node() { _has_field_.set(302); return kmem_cache_alloc_node_.get(); }

  bool has_kmem_cache_free() const { return _has_field_[303]; }
  const KmemCacheFreeFtraceEvent& kmem_cache_free() const { return *kmem_cache_free_; }
  KmemCacheFreeFtraceEvent* mutable_kmem_cache_free() { _has_field_.set(303); return kmem_cache_free_.get(); }

  bool has_migrate_pages_end() const { return _has_field_[304]; }
  const MigratePagesEndFtraceEvent& migrate_pages_end() const { return *migrate_pages_end_; }
  MigratePagesEndFtraceEvent* mutable_migrate_pages_end() { _has_field_.set(304); return migrate_pages_end_.get(); }

  bool has_migrate_pages_start() const { return _has_field_[305]; }
  const MigratePagesStartFtraceEvent& migrate_pages_start() const { return *migrate_pages_start_; }
  MigratePagesStartFtraceEvent* mutable_migrate_pages_start() { _has_field_.set(305); return migrate_pages_start_.get(); }

  bool has_migrate_retry() const { return _has_field_[306]; }
  const MigrateRetryFtraceEvent& migrate_retry() const { return *migrate_retry_; }
  MigrateRetryFtraceEvent* mutable_migrate_retry() { _has_field_.set(306); return migrate_retry_.get(); }

  bool has_mm_page_alloc() const { return _has_field_[307]; }
  const MmPageAllocFtraceEvent& mm_page_alloc() const { return *mm_page_alloc_; }
  MmPageAllocFtraceEvent* mutable_mm_page_alloc() { _has_field_.set(307); return mm_page_alloc_.get(); }

  bool has_mm_page_alloc_extfrag() const { return _has_field_[308]; }
  const MmPageAllocExtfragFtraceEvent& mm_page_alloc_extfrag() const { return *mm_page_alloc_extfrag_; }
  MmPageAllocExtfragFtraceEvent* mutable_mm_page_alloc_extfrag() { _has_field_.set(308); return mm_page_alloc_extfrag_.get(); }

  bool has_mm_page_alloc_zone_locked() const { return _has_field_[309]; }
  const MmPageAllocZoneLockedFtraceEvent& mm_page_alloc_zone_locked() const { return *mm_page_alloc_zone_locked_; }
  MmPageAllocZoneLockedFtraceEvent* mutable_mm_page_alloc_zone_locked() { _has_field_.set(309); return mm_page_alloc_zone_locked_.get(); }

  bool has_mm_page_free() const { return _has_field_[310]; }
  const MmPageFreeFtraceEvent& mm_page_free() const { return *mm_page_free_; }
  MmPageFreeFtraceEvent* mutable_mm_page_free() { _has_field_.set(310); return mm_page_free_.get(); }

  bool has_mm_page_free_batched() const { return _has_field_[311]; }
  const MmPageFreeBatchedFtraceEvent& mm_page_free_batched() const { return *mm_page_free_batched_; }
  MmPageFreeBatchedFtraceEvent* mutable_mm_page_free_batched() { _has_field_.set(311); return mm_page_free_batched_.get(); }

  bool has_mm_page_pcpu_drain() const { return _has_field_[312]; }
  const MmPagePcpuDrainFtraceEvent& mm_page_pcpu_drain() const { return *mm_page_pcpu_drain_; }
  MmPagePcpuDrainFtraceEvent* mutable_mm_page_pcpu_drain() { _has_field_.set(312); return mm_page_pcpu_drain_.get(); }

  bool has_rss_stat() const { return _has_field_[313]; }
  const RssStatFtraceEvent& rss_stat() const { return *rss_stat_; }
  RssStatFtraceEvent* mutable_rss_stat() { _has_field_.set(313); return rss_stat_.get(); }

  bool has_ion_heap_shrink() const { return _has_field_[314]; }
  const IonHeapShrinkFtraceEvent& ion_heap_shrink() const { return *ion_heap_shrink_; }
  IonHeapShrinkFtraceEvent* mutable_ion_heap_shrink() { _has_field_.set(314); return ion_heap_shrink_.get(); }

  bool has_ion_heap_grow() const { return _has_field_[315]; }
  const IonHeapGrowFtraceEvent& ion_heap_grow() const { return *ion_heap_grow_; }
  IonHeapGrowFtraceEvent* mutable_ion_heap_grow() { _has_field_.set(315); return ion_heap_grow_.get(); }

  bool has_fence_init() const { return _has_field_[316]; }
  const FenceInitFtraceEvent& fence_init() const { return *fence_init_; }
  FenceInitFtraceEvent* mutable_fence_init() { _has_field_.set(316); return fence_init_.get(); }

  bool has_fence_destroy() const { return _has_field_[317]; }
  const FenceDestroyFtraceEvent& fence_destroy() const { return *fence_destroy_; }
  FenceDestroyFtraceEvent* mutable_fence_destroy() { _has_field_.set(317); return fence_destroy_.get(); }

  bool has_fence_enable_signal() const { return _has_field_[318]; }
  const FenceEnableSignalFtraceEvent& fence_enable_signal() const { return *fence_enable_signal_; }
  FenceEnableSignalFtraceEvent* mutable_fence_enable_signal() { _has_field_.set(318); return fence_enable_signal_.get(); }

  bool has_fence_signaled() const { return _has_field_[319]; }
  const FenceSignaledFtraceEvent& fence_signaled() const { return *fence_signaled_; }
  FenceSignaledFtraceEvent* mutable_fence_signaled() { _has_field_.set(319); return fence_signaled_.get(); }

  bool has_clk_enable() const { return _has_field_[320]; }
  const ClkEnableFtraceEvent& clk_enable() const { return *clk_enable_; }
  ClkEnableFtraceEvent* mutable_clk_enable() { _has_field_.set(320); return clk_enable_.get(); }

  bool has_clk_disable() const { return _has_field_[321]; }
  const ClkDisableFtraceEvent& clk_disable() const { return *clk_disable_; }
  ClkDisableFtraceEvent* mutable_clk_disable() { _has_field_.set(321); return clk_disable_.get(); }

  bool has_clk_set_rate() const { return _has_field_[322]; }
  const ClkSetRateFtraceEvent& clk_set_rate() const { return *clk_set_rate_; }
  ClkSetRateFtraceEvent* mutable_clk_set_rate() { _has_field_.set(322); return clk_set_rate_.get(); }

  bool has_binder_transaction_alloc_buf() const { return _has_field_[323]; }
  const BinderTransactionAllocBufFtraceEvent& binder_transaction_alloc_buf() const { return *binder_transaction_alloc_buf_; }
  BinderTransactionAllocBufFtraceEvent* mutable_binder_transaction_alloc_buf() { _has_field_.set(323); return binder_transaction_alloc_buf_.get(); }

  bool has_signal_deliver() const { return _has_field_[324]; }
  const SignalDeliverFtraceEvent& signal_deliver() const { return *signal_deliver_; }
  SignalDeliverFtraceEvent* mutable_signal_deliver() { _has_field_.set(324); return signal_deliver_.get(); }

  bool has_signal_generate() const { return _has_field_[325]; }
  const SignalGenerateFtraceEvent& signal_generate() const { return *signal_generate_; }
  SignalGenerateFtraceEvent* mutable_signal_generate() { _has_field_.set(325); return signal_generate_.get(); }

  bool has_oom_score_adj_update() const { return _has_field_[326]; }
  const OomScoreAdjUpdateFtraceEvent& oom_score_adj_update() const { return *oom_score_adj_update_; }
  OomScoreAdjUpdateFtraceEvent* mutable_oom_score_adj_update() { _has_field_.set(326); return oom_score_adj_update_.get(); }

  bool has_generic() const { return _has_field_[327]; }
  const GenericFtraceEvent& generic() const { return *generic_; }
  GenericFtraceEvent* mutable_generic() { _has_field_.set(327); return generic_.get(); }

  bool has_mm_event_record() const { return _has_field_[328]; }
  const MmEventRecordFtraceEvent& mm_event_record() const { return *mm_event_record_; }
  MmEventRecordFtraceEvent* mutable_mm_event_record() { _has_field_.set(328); return mm_event_record_.get(); }

  bool has_sys_enter() const { return _has_field_[329]; }
  const SysEnterFtraceEvent& sys_enter() const { return *sys_enter_; }
  SysEnterFtraceEvent* mutable_sys_enter() { _has_field_.set(329); return sys_enter_.get(); }

  bool has_sys_exit() const { return _has_field_[330]; }
  const SysExitFtraceEvent& sys_exit() const { return *sys_exit_; }
  SysExitFtraceEvent* mutable_sys_exit() { _has_field_.set(330); return sys_exit_.get(); }

  bool has_zero() const { return _has_field_[331]; }
  const ZeroFtraceEvent& zero() const { return *zero_; }
  ZeroFtraceEvent* mutable_zero() { _has_field_.set(331); return zero_.get(); }

  bool has_gpu_frequency() const { return _has_field_[332]; }
  const GpuFrequencyFtraceEvent& gpu_frequency() const { return *gpu_frequency_; }
  GpuFrequencyFtraceEvent* mutable_gpu_frequency() { _has_field_.set(332); return gpu_frequency_.get(); }

  bool has_sde_tracing_mark_write() const { return _has_field_[333]; }
  const SdeTracingMarkWriteFtraceEvent& sde_tracing_mark_write() const { return *sde_tracing_mark_write_; }
  SdeTracingMarkWriteFtraceEvent* mutable_sde_tracing_mark_write() { _has_field_.set(333); return sde_tracing_mark_write_.get(); }

  bool has_mark_victim() const { return _has_field_[334]; }
  const MarkVictimFtraceEvent& mark_victim() const { return *mark_victim_; }
  MarkVictimFtraceEvent* mutable_mark_victim() { _has_field_.set(334); return mark_victim_.get(); }

  bool has_ion_stat() const { return _has_field_[335]; }
  const IonStatFtraceEvent& ion_stat() const { return *ion_stat_; }
  IonStatFtraceEvent* mutable_ion_stat() { _has_field_.set(335); return ion_stat_.get(); }

  bool has_ion_buffer_create() const { return _has_field_[336]; }
  const IonBufferCreateFtraceEvent& ion_buffer_create() const { return *ion_buffer_create_; }
  IonBufferCreateFtraceEvent* mutable_ion_buffer_create() { _has_field_.set(336); return ion_buffer_create_.get(); }

  bool has_ion_buffer_destroy() const { return _has_field_[337]; }
  const IonBufferDestroyFtraceEvent& ion_buffer_destroy() const { return *ion_buffer_destroy_; }
  IonBufferDestroyFtraceEvent* mutable_ion_buffer_destroy() { _has_field_.set(337); return ion_buffer_destroy_.get(); }

  bool has_scm_call_start() const { return _has_field_[338]; }
  const ScmCallStartFtraceEvent& scm_call_start() const { return *scm_call_start_; }
  ScmCallStartFtraceEvent* mutable_scm_call_start() { _has_field_.set(338); return scm_call_start_.get(); }

  bool has_scm_call_end() const { return _has_field_[339]; }
  const ScmCallEndFtraceEvent& scm_call_end() const { return *scm_call_end_; }
  ScmCallEndFtraceEvent* mutable_scm_call_end() { _has_field_.set(339); return scm_call_end_.get(); }

  bool has_gpu_mem_total() const { return _has_field_[340]; }
  const GpuMemTotalFtraceEvent& gpu_mem_total() const { return *gpu_mem_total_; }
  GpuMemTotalFtraceEvent* mutable_gpu_mem_total() { _has_field_.set(340); return gpu_mem_total_.get(); }

  bool has_thermal_temperature() const { return _has_field_[341]; }
  const ThermalTemperatureFtraceEvent& thermal_temperature() const { return *thermal_temperature_; }
  ThermalTemperatureFtraceEvent* mutable_thermal_temperature() { _has_field_.set(341); return thermal_temperature_.get(); }

  bool has_cdev_update() const { return _has_field_[342]; }
  const CdevUpdateFtraceEvent& cdev_update() const { return *cdev_update_; }
  CdevUpdateFtraceEvent* mutable_cdev_update() { _has_field_.set(342); return cdev_update_.get(); }

  bool has_cpuhp_exit() const { return _has_field_[343]; }
  const CpuhpExitFtraceEvent& cpuhp_exit() const { return *cpuhp_exit_; }
  CpuhpExitFtraceEvent* mutable_cpuhp_exit() { _has_field_.set(343); return cpuhp_exit_.get(); }

  bool has_cpuhp_multi_enter() const { return _has_field_[344]; }
  const CpuhpMultiEnterFtraceEvent& cpuhp_multi_enter() const { return *cpuhp_multi_enter_; }
  CpuhpMultiEnterFtraceEvent* mutable_cpuhp_multi_enter() { _has_field_.set(344); return cpuhp_multi_enter_.get(); }

  bool has_cpuhp_enter() const { return _has_field_[345]; }
  const CpuhpEnterFtraceEvent& cpuhp_enter() const { return *cpuhp_enter_; }
  CpuhpEnterFtraceEvent* mutable_cpuhp_enter() { _has_field_.set(345); return cpuhp_enter_.get(); }

  bool has_cpuhp_latency() const { return _has_field_[346]; }
  const CpuhpLatencyFtraceEvent& cpuhp_latency() const { return *cpuhp_latency_; }
  CpuhpLatencyFtraceEvent* mutable_cpuhp_latency() { _has_field_.set(346); return cpuhp_latency_.get(); }

  bool has_fastrpc_dma_stat() const { return _has_field_[347]; }
  const FastrpcDmaStatFtraceEvent& fastrpc_dma_stat() const { return *fastrpc_dma_stat_; }
  FastrpcDmaStatFtraceEvent* mutable_fastrpc_dma_stat() { _has_field_.set(347); return fastrpc_dma_stat_.get(); }

  bool has_dpu_tracing_mark_write() const { return _has_field_[348]; }
  const DpuTracingMarkWriteFtraceEvent& dpu_tracing_mark_write() const { return *dpu_tracing_mark_write_; }
  DpuTracingMarkWriteFtraceEvent* mutable_dpu_tracing_mark_write() { _has_field_.set(348); return dpu_tracing_mark_write_.get(); }

  bool has_g2d_tracing_mark_write() const { return _has_field_[349]; }
  const G2dTracingMarkWriteFtraceEvent& g2d_tracing_mark_write() const { return *g2d_tracing_mark_write_; }
  G2dTracingMarkWriteFtraceEvent* mutable_g2d_tracing_mark_write() { _has_field_.set(349); return g2d_tracing_mark_write_.get(); }

  bool has_mali_tracing_mark_write() const { return _has_field_[350]; }
  const MaliTracingMarkWriteFtraceEvent& mali_tracing_mark_write() const { return *mali_tracing_mark_write_; }
  MaliTracingMarkWriteFtraceEvent* mutable_mali_tracing_mark_write() { _has_field_.set(350); return mali_tracing_mark_write_.get(); }

 private:
  uint64_t timestamp_{};
  uint32_t pid_{};
  ::protozero::CopyablePtr<PrintFtraceEvent> print_;
  ::protozero::CopyablePtr<SchedSwitchFtraceEvent> sched_switch_;
  ::protozero::CopyablePtr<CpuFrequencyFtraceEvent> cpu_frequency_;
  ::protozero::CopyablePtr<CpuFrequencyLimitsFtraceEvent> cpu_frequency_limits_;
  ::protozero::CopyablePtr<CpuIdleFtraceEvent> cpu_idle_;
  ::protozero::CopyablePtr<ClockEnableFtraceEvent> clock_enable_;
  ::protozero::CopyablePtr<ClockDisableFtraceEvent> clock_disable_;
  ::protozero::CopyablePtr<ClockSetRateFtraceEvent> clock_set_rate_;
  ::protozero::CopyablePtr<SchedWakeupFtraceEvent> sched_wakeup_;
  ::protozero::CopyablePtr<SchedBlockedReasonFtraceEvent> sched_blocked_reason_;
  ::protozero::CopyablePtr<SchedCpuHotplugFtraceEvent> sched_cpu_hotplug_;
  ::protozero::CopyablePtr<SchedWakingFtraceEvent> sched_waking_;
  ::protozero::CopyablePtr<IpiEntryFtraceEvent> ipi_entry_;
  ::protozero::CopyablePtr<IpiExitFtraceEvent> ipi_exit_;
  ::protozero::CopyablePtr<IpiRaiseFtraceEvent> ipi_raise_;
  ::protozero::CopyablePtr<SoftirqEntryFtraceEvent> softirq_entry_;
  ::protozero::CopyablePtr<SoftirqExitFtraceEvent> softirq_exit_;
  ::protozero::CopyablePtr<SoftirqRaiseFtraceEvent> softirq_raise_;
  ::protozero::CopyablePtr<I2cReadFtraceEvent> i2c_read_;
  ::protozero::CopyablePtr<I2cWriteFtraceEvent> i2c_write_;
  ::protozero::CopyablePtr<I2cResultFtraceEvent> i2c_result_;
  ::protozero::CopyablePtr<I2cReplyFtraceEvent> i2c_reply_;
  ::protozero::CopyablePtr<SmbusReadFtraceEvent> smbus_read_;
  ::protozero::CopyablePtr<SmbusWriteFtraceEvent> smbus_write_;
  ::protozero::CopyablePtr<SmbusResultFtraceEvent> smbus_result_;
  ::protozero::CopyablePtr<SmbusReplyFtraceEvent> smbus_reply_;
  ::protozero::CopyablePtr<LowmemoryKillFtraceEvent> lowmemory_kill_;
  ::protozero::CopyablePtr<IrqHandlerEntryFtraceEvent> irq_handler_entry_;
  ::protozero::CopyablePtr<IrqHandlerExitFtraceEvent> irq_handler_exit_;
  ::protozero::CopyablePtr<SyncPtFtraceEvent> sync_pt_;
  ::protozero::CopyablePtr<SyncTimelineFtraceEvent> sync_timeline_;
  ::protozero::CopyablePtr<SyncWaitFtraceEvent> sync_wait_;
  ::protozero::CopyablePtr<Ext4DaWriteBeginFtraceEvent> ext4_da_write_begin_;
  ::protozero::CopyablePtr<Ext4DaWriteEndFtraceEvent> ext4_da_write_end_;
  ::protozero::CopyablePtr<Ext4SyncFileEnterFtraceEvent> ext4_sync_file_enter_;
  ::protozero::CopyablePtr<Ext4SyncFileExitFtraceEvent> ext4_sync_file_exit_;
  ::protozero::CopyablePtr<BlockRqIssueFtraceEvent> block_rq_issue_;
  ::protozero::CopyablePtr<MmVmscanDirectReclaimBeginFtraceEvent> mm_vmscan_direct_reclaim_begin_;
  ::protozero::CopyablePtr<MmVmscanDirectReclaimEndFtraceEvent> mm_vmscan_direct_reclaim_end_;
  ::protozero::CopyablePtr<MmVmscanKswapdWakeFtraceEvent> mm_vmscan_kswapd_wake_;
  ::protozero::CopyablePtr<MmVmscanKswapdSleepFtraceEvent> mm_vmscan_kswapd_sleep_;
  ::protozero::CopyablePtr<BinderTransactionFtraceEvent> binder_transaction_;
  ::protozero::CopyablePtr<BinderTransactionReceivedFtraceEvent> binder_transaction_received_;
  ::protozero::CopyablePtr<BinderSetPriorityFtraceEvent> binder_set_priority_;
  ::protozero::CopyablePtr<BinderLockFtraceEvent> binder_lock_;
  ::protozero::CopyablePtr<BinderLockedFtraceEvent> binder_locked_;
  ::protozero::CopyablePtr<BinderUnlockFtraceEvent> binder_unlock_;
  ::protozero::CopyablePtr<WorkqueueActivateWorkFtraceEvent> workqueue_activate_work_;
  ::protozero::CopyablePtr<WorkqueueExecuteEndFtraceEvent> workqueue_execute_end_;
  ::protozero::CopyablePtr<WorkqueueExecuteStartFtraceEvent> workqueue_execute_start_;
  ::protozero::CopyablePtr<WorkqueueQueueWorkFtraceEvent> workqueue_queue_work_;
  ::protozero::CopyablePtr<RegulatorDisableFtraceEvent> regulator_disable_;
  ::protozero::CopyablePtr<RegulatorDisableCompleteFtraceEvent> regulator_disable_complete_;
  ::protozero::CopyablePtr<RegulatorEnableFtraceEvent> regulator_enable_;
  ::protozero::CopyablePtr<RegulatorEnableCompleteFtraceEvent> regulator_enable_complete_;
  ::protozero::CopyablePtr<RegulatorEnableDelayFtraceEvent> regulator_enable_delay_;
  ::protozero::CopyablePtr<RegulatorSetVoltageFtraceEvent> regulator_set_voltage_;
  ::protozero::CopyablePtr<RegulatorSetVoltageCompleteFtraceEvent> regulator_set_voltage_complete_;
  ::protozero::CopyablePtr<CgroupAttachTaskFtraceEvent> cgroup_attach_task_;
  ::protozero::CopyablePtr<CgroupMkdirFtraceEvent> cgroup_mkdir_;
  ::protozero::CopyablePtr<CgroupRemountFtraceEvent> cgroup_remount_;
  ::protozero::CopyablePtr<CgroupRmdirFtraceEvent> cgroup_rmdir_;
  ::protozero::CopyablePtr<CgroupTransferTasksFtraceEvent> cgroup_transfer_tasks_;
  ::protozero::CopyablePtr<CgroupDestroyRootFtraceEvent> cgroup_destroy_root_;
  ::protozero::CopyablePtr<CgroupReleaseFtraceEvent> cgroup_release_;
  ::protozero::CopyablePtr<CgroupRenameFtraceEvent> cgroup_rename_;
  ::protozero::CopyablePtr<CgroupSetupRootFtraceEvent> cgroup_setup_root_;
  ::protozero::CopyablePtr<MdpCmdKickoffFtraceEvent> mdp_cmd_kickoff_;
  ::protozero::CopyablePtr<MdpCommitFtraceEvent> mdp_commit_;
  ::protozero::CopyablePtr<MdpPerfSetOtFtraceEvent> mdp_perf_set_ot_;
  ::protozero::CopyablePtr<MdpSsppChangeFtraceEvent> mdp_sspp_change_;
  ::protozero::CopyablePtr<TracingMarkWriteFtraceEvent> tracing_mark_write_;
  ::protozero::CopyablePtr<MdpCmdPingpongDoneFtraceEvent> mdp_cmd_pingpong_done_;
  ::protozero::CopyablePtr<MdpCompareBwFtraceEvent> mdp_compare_bw_;
  ::protozero::CopyablePtr<MdpPerfSetPanicLutsFtraceEvent> mdp_perf_set_panic_luts_;
  ::protozero::CopyablePtr<MdpSsppSetFtraceEvent> mdp_sspp_set_;
  ::protozero::CopyablePtr<MdpCmdReadptrDoneFtraceEvent> mdp_cmd_readptr_done_;
  ::protozero::CopyablePtr<MdpMisrCrcFtraceEvent> mdp_misr_crc_;
  ::protozero::CopyablePtr<MdpPerfSetQosLutsFtraceEvent> mdp_perf_set_qos_luts_;
  ::protozero::CopyablePtr<MdpTraceCounterFtraceEvent> mdp_trace_counter_;
  ::protozero::CopyablePtr<MdpCmdReleaseBwFtraceEvent> mdp_cmd_release_bw_;
  ::protozero::CopyablePtr<MdpMixerUpdateFtraceEvent> mdp_mixer_update_;
  ::protozero::CopyablePtr<MdpPerfSetWmLevelsFtraceEvent> mdp_perf_set_wm_levels_;
  ::protozero::CopyablePtr<MdpVideoUnderrunDoneFtraceEvent> mdp_video_underrun_done_;
  ::protozero::CopyablePtr<MdpCmdWaitPingpongFtraceEvent> mdp_cmd_wait_pingpong_;
  ::protozero::CopyablePtr<MdpPerfPrefillCalcFtraceEvent> mdp_perf_prefill_calc_;
  ::protozero::CopyablePtr<MdpPerfUpdateBusFtraceEvent> mdp_perf_update_bus_;
  ::protozero::CopyablePtr<RotatorBwAoAsContextFtraceEvent> rotator_bw_ao_as_context_;
  ::protozero::CopyablePtr<MmFilemapAddToPageCacheFtraceEvent> mm_filemap_add_to_page_cache_;
  ::protozero::CopyablePtr<MmFilemapDeleteFromPageCacheFtraceEvent> mm_filemap_delete_from_page_cache_;
  ::protozero::CopyablePtr<MmCompactionBeginFtraceEvent> mm_compaction_begin_;
  ::protozero::CopyablePtr<MmCompactionDeferCompactionFtraceEvent> mm_compaction_defer_compaction_;
  ::protozero::CopyablePtr<MmCompactionDeferredFtraceEvent> mm_compaction_deferred_;
  ::protozero::CopyablePtr<MmCompactionDeferResetFtraceEvent> mm_compaction_defer_reset_;
  ::protozero::CopyablePtr<MmCompactionEndFtraceEvent> mm_compaction_end_;
  ::protozero::CopyablePtr<MmCompactionFinishedFtraceEvent> mm_compaction_finished_;
  ::protozero::CopyablePtr<MmCompactionIsolateFreepagesFtraceEvent> mm_compaction_isolate_freepages_;
  ::protozero::CopyablePtr<MmCompactionIsolateMigratepagesFtraceEvent> mm_compaction_isolate_migratepages_;
  ::protozero::CopyablePtr<MmCompactionKcompactdSleepFtraceEvent> mm_compaction_kcompactd_sleep_;
  ::protozero::CopyablePtr<MmCompactionKcompactdWakeFtraceEvent> mm_compaction_kcompactd_wake_;
  ::protozero::CopyablePtr<MmCompactionMigratepagesFtraceEvent> mm_compaction_migratepages_;
  ::protozero::CopyablePtr<MmCompactionSuitableFtraceEvent> mm_compaction_suitable_;
  ::protozero::CopyablePtr<MmCompactionTryToCompactPagesFtraceEvent> mm_compaction_try_to_compact_pages_;
  ::protozero::CopyablePtr<MmCompactionWakeupKcompactdFtraceEvent> mm_compaction_wakeup_kcompactd_;
  ::protozero::CopyablePtr<SuspendResumeFtraceEvent> suspend_resume_;
  ::protozero::CopyablePtr<SchedWakeupNewFtraceEvent> sched_wakeup_new_;
  ::protozero::CopyablePtr<BlockBioBackmergeFtraceEvent> block_bio_backmerge_;
  ::protozero::CopyablePtr<BlockBioBounceFtraceEvent> block_bio_bounce_;
  ::protozero::CopyablePtr<BlockBioCompleteFtraceEvent> block_bio_complete_;
  ::protozero::CopyablePtr<BlockBioFrontmergeFtraceEvent> block_bio_frontmerge_;
  ::protozero::CopyablePtr<BlockBioQueueFtraceEvent> block_bio_queue_;
  ::protozero::CopyablePtr<BlockBioRemapFtraceEvent> block_bio_remap_;
  ::protozero::CopyablePtr<BlockDirtyBufferFtraceEvent> block_dirty_buffer_;
  ::protozero::CopyablePtr<BlockGetrqFtraceEvent> block_getrq_;
  ::protozero::CopyablePtr<BlockPlugFtraceEvent> block_plug_;
  ::protozero::CopyablePtr<BlockRqAbortFtraceEvent> block_rq_abort_;
  ::protozero::CopyablePtr<BlockRqCompleteFtraceEvent> block_rq_complete_;
  ::protozero::CopyablePtr<BlockRqInsertFtraceEvent> block_rq_insert_;
  ::protozero::CopyablePtr<BlockRqRemapFtraceEvent> block_rq_remap_;
  ::protozero::CopyablePtr<BlockRqRequeueFtraceEvent> block_rq_requeue_;
  ::protozero::CopyablePtr<BlockSleeprqFtraceEvent> block_sleeprq_;
  ::protozero::CopyablePtr<BlockSplitFtraceEvent> block_split_;
  ::protozero::CopyablePtr<BlockTouchBufferFtraceEvent> block_touch_buffer_;
  ::protozero::CopyablePtr<BlockUnplugFtraceEvent> block_unplug_;
  ::protozero::CopyablePtr<Ext4AllocDaBlocksFtraceEvent> ext4_alloc_da_blocks_;
  ::protozero::CopyablePtr<Ext4AllocateBlocksFtraceEvent> ext4_allocate_blocks_;
  ::protozero::CopyablePtr<Ext4AllocateInodeFtraceEvent> ext4_allocate_inode_;
  ::protozero::CopyablePtr<Ext4BeginOrderedTruncateFtraceEvent> ext4_begin_ordered_truncate_;
  ::protozero::CopyablePtr<Ext4CollapseRangeFtraceEvent> ext4_collapse_range_;
  ::protozero::CopyablePtr<Ext4DaReleaseSpaceFtraceEvent> ext4_da_release_space_;
  ::protozero::CopyablePtr<Ext4DaReserveSpaceFtraceEvent> ext4_da_reserve_space_;
  ::protozero::CopyablePtr<Ext4DaUpdateReserveSpaceFtraceEvent> ext4_da_update_reserve_space_;
  ::protozero::CopyablePtr<Ext4DaWritePagesFtraceEvent> ext4_da_write_pages_;
  ::protozero::CopyablePtr<Ext4DaWritePagesExtentFtraceEvent> ext4_da_write_pages_extent_;
  ::protozero::CopyablePtr<Ext4DirectIOEnterFtraceEvent> ext4_direct_io_enter_;
  ::protozero::CopyablePtr<Ext4DirectIOExitFtraceEvent> ext4_direct_io_exit_;
  ::protozero::CopyablePtr<Ext4DiscardBlocksFtraceEvent> ext4_discard_blocks_;
  ::protozero::CopyablePtr<Ext4DiscardPreallocationsFtraceEvent> ext4_discard_preallocations_;
  ::protozero::CopyablePtr<Ext4DropInodeFtraceEvent> ext4_drop_inode_;
  ::protozero::CopyablePtr<Ext4EsCacheExtentFtraceEvent> ext4_es_cache_extent_;
  ::protozero::CopyablePtr<Ext4EsFindDelayedExtentRangeEnterFtraceEvent> ext4_es_find_delayed_extent_range_enter_;
  ::protozero::CopyablePtr<Ext4EsFindDelayedExtentRangeExitFtraceEvent> ext4_es_find_delayed_extent_range_exit_;
  ::protozero::CopyablePtr<Ext4EsInsertExtentFtraceEvent> ext4_es_insert_extent_;
  ::protozero::CopyablePtr<Ext4EsLookupExtentEnterFtraceEvent> ext4_es_lookup_extent_enter_;
  ::protozero::CopyablePtr<Ext4EsLookupExtentExitFtraceEvent> ext4_es_lookup_extent_exit_;
  ::protozero::CopyablePtr<Ext4EsRemoveExtentFtraceEvent> ext4_es_remove_extent_;
  ::protozero::CopyablePtr<Ext4EsShrinkFtraceEvent> ext4_es_shrink_;
  ::protozero::CopyablePtr<Ext4EsShrinkCountFtraceEvent> ext4_es_shrink_count_;
  ::protozero::CopyablePtr<Ext4EsShrinkScanEnterFtraceEvent> ext4_es_shrink_scan_enter_;
  ::protozero::CopyablePtr<Ext4EsShrinkScanExitFtraceEvent> ext4_es_shrink_scan_exit_;
  ::protozero::CopyablePtr<Ext4EvictInodeFtraceEvent> ext4_evict_inode_;
  ::protozero::CopyablePtr<Ext4ExtConvertToInitializedEnterFtraceEvent> ext4_ext_convert_to_initialized_enter_;
  ::protozero::CopyablePtr<Ext4ExtConvertToInitializedFastpathFtraceEvent> ext4_ext_convert_to_initialized_fastpath_;
  ::protozero::CopyablePtr<Ext4ExtHandleUnwrittenExtentsFtraceEvent> ext4_ext_handle_unwritten_extents_;
  ::protozero::CopyablePtr<Ext4ExtInCacheFtraceEvent> ext4_ext_in_cache_;
  ::protozero::CopyablePtr<Ext4ExtLoadExtentFtraceEvent> ext4_ext_load_extent_;
  ::protozero::CopyablePtr<Ext4ExtMapBlocksEnterFtraceEvent> ext4_ext_map_blocks_enter_;
  ::protozero::CopyablePtr<Ext4ExtMapBlocksExitFtraceEvent> ext4_ext_map_blocks_exit_;
  ::protozero::CopyablePtr<Ext4ExtPutInCacheFtraceEvent> ext4_ext_put_in_cache_;
  ::protozero::CopyablePtr<Ext4ExtRemoveSpaceFtraceEvent> ext4_ext_remove_space_;
  ::protozero::CopyablePtr<Ext4ExtRemoveSpaceDoneFtraceEvent> ext4_ext_remove_space_done_;
  ::protozero::CopyablePtr<Ext4ExtRmIdxFtraceEvent> ext4_ext_rm_idx_;
  ::protozero::CopyablePtr<Ext4ExtRmLeafFtraceEvent> ext4_ext_rm_leaf_;
  ::protozero::CopyablePtr<Ext4ExtShowExtentFtraceEvent> ext4_ext_show_extent_;
  ::protozero::CopyablePtr<Ext4FallocateEnterFtraceEvent> ext4_fallocate_enter_;
  ::protozero::CopyablePtr<Ext4FallocateExitFtraceEvent> ext4_fallocate_exit_;
  ::protozero::CopyablePtr<Ext4FindDelallocRangeFtraceEvent> ext4_find_delalloc_range_;
  ::protozero::CopyablePtr<Ext4ForgetFtraceEvent> ext4_forget_;
  ::protozero::CopyablePtr<Ext4FreeBlocksFtraceEvent> ext4_free_blocks_;
  ::protozero::CopyablePtr<Ext4FreeInodeFtraceEvent> ext4_free_inode_;
  ::protozero::CopyablePtr<Ext4GetImpliedClusterAllocExitFtraceEvent> ext4_get_implied_cluster_alloc_exit_;
  ::protozero::CopyablePtr<Ext4GetReservedClusterAllocFtraceEvent> ext4_get_reserved_cluster_alloc_;
  ::protozero::CopyablePtr<Ext4IndMapBlocksEnterFtraceEvent> ext4_ind_map_blocks_enter_;
  ::protozero::CopyablePtr<Ext4IndMapBlocksExitFtraceEvent> ext4_ind_map_blocks_exit_;
  ::protozero::CopyablePtr<Ext4InsertRangeFtraceEvent> ext4_insert_range_;
  ::protozero::CopyablePtr<Ext4InvalidatepageFtraceEvent> ext4_invalidatepage_;
  ::protozero::CopyablePtr<Ext4JournalStartFtraceEvent> ext4_journal_start_;
  ::protozero::CopyablePtr<Ext4JournalStartReservedFtraceEvent> ext4_journal_start_reserved_;
  ::protozero::CopyablePtr<Ext4JournalledInvalidatepageFtraceEvent> ext4_journalled_invalidatepage_;
  ::protozero::CopyablePtr<Ext4JournalledWriteEndFtraceEvent> ext4_journalled_write_end_;
  ::protozero::CopyablePtr<Ext4LoadInodeFtraceEvent> ext4_load_inode_;
  ::protozero::CopyablePtr<Ext4LoadInodeBitmapFtraceEvent> ext4_load_inode_bitmap_;
  ::protozero::CopyablePtr<Ext4MarkInodeDirtyFtraceEvent> ext4_mark_inode_dirty_;
  ::protozero::CopyablePtr<Ext4MbBitmapLoadFtraceEvent> ext4_mb_bitmap_load_;
  ::protozero::CopyablePtr<Ext4MbBuddyBitmapLoadFtraceEvent> ext4_mb_buddy_bitmap_load_;
  ::protozero::CopyablePtr<Ext4MbDiscardPreallocationsFtraceEvent> ext4_mb_discard_preallocations_;
  ::protozero::CopyablePtr<Ext4MbNewGroupPaFtraceEvent> ext4_mb_new_group_pa_;
  ::protozero::CopyablePtr<Ext4MbNewInodePaFtraceEvent> ext4_mb_new_inode_pa_;
  ::protozero::CopyablePtr<Ext4MbReleaseGroupPaFtraceEvent> ext4_mb_release_group_pa_;
  ::protozero::CopyablePtr<Ext4MbReleaseInodePaFtraceEvent> ext4_mb_release_inode_pa_;
  ::protozero::CopyablePtr<Ext4MballocAllocFtraceEvent> ext4_mballoc_alloc_;
  ::protozero::CopyablePtr<Ext4MballocDiscardFtraceEvent> ext4_mballoc_discard_;
  ::protozero::CopyablePtr<Ext4MballocFreeFtraceEvent> ext4_mballoc_free_;
  ::protozero::CopyablePtr<Ext4MballocPreallocFtraceEvent> ext4_mballoc_prealloc_;
  ::protozero::CopyablePtr<Ext4OtherInodeUpdateTimeFtraceEvent> ext4_other_inode_update_time_;
  ::protozero::CopyablePtr<Ext4PunchHoleFtraceEvent> ext4_punch_hole_;
  ::protozero::CopyablePtr<Ext4ReadBlockBitmapLoadFtraceEvent> ext4_read_block_bitmap_load_;
  ::protozero::CopyablePtr<Ext4ReadpageFtraceEvent> ext4_readpage_;
  ::protozero::CopyablePtr<Ext4ReleasepageFtraceEvent> ext4_releasepage_;
  ::protozero::CopyablePtr<Ext4RemoveBlocksFtraceEvent> ext4_remove_blocks_;
  ::protozero::CopyablePtr<Ext4RequestBlocksFtraceEvent> ext4_request_blocks_;
  ::protozero::CopyablePtr<Ext4RequestInodeFtraceEvent> ext4_request_inode_;
  ::protozero::CopyablePtr<Ext4SyncFsFtraceEvent> ext4_sync_fs_;
  ::protozero::CopyablePtr<Ext4TrimAllFreeFtraceEvent> ext4_trim_all_free_;
  ::protozero::CopyablePtr<Ext4TrimExtentFtraceEvent> ext4_trim_extent_;
  ::protozero::CopyablePtr<Ext4TruncateEnterFtraceEvent> ext4_truncate_enter_;
  ::protozero::CopyablePtr<Ext4TruncateExitFtraceEvent> ext4_truncate_exit_;
  ::protozero::CopyablePtr<Ext4UnlinkEnterFtraceEvent> ext4_unlink_enter_;
  ::protozero::CopyablePtr<Ext4UnlinkExitFtraceEvent> ext4_unlink_exit_;
  ::protozero::CopyablePtr<Ext4WriteBeginFtraceEvent> ext4_write_begin_;
  ::protozero::CopyablePtr<Ext4WriteEndFtraceEvent> ext4_write_end_;
  ::protozero::CopyablePtr<Ext4WritepageFtraceEvent> ext4_writepage_;
  ::protozero::CopyablePtr<Ext4WritepagesFtraceEvent> ext4_writepages_;
  ::protozero::CopyablePtr<Ext4WritepagesResultFtraceEvent> ext4_writepages_result_;
  ::protozero::CopyablePtr<Ext4ZeroRangeFtraceEvent> ext4_zero_range_;
  ::protozero::CopyablePtr<TaskNewtaskFtraceEvent> task_newtask_;
  ::protozero::CopyablePtr<TaskRenameFtraceEvent> task_rename_;
  ::protozero::CopyablePtr<SchedProcessExecFtraceEvent> sched_process_exec_;
  ::protozero::CopyablePtr<SchedProcessExitFtraceEvent> sched_process_exit_;
  ::protozero::CopyablePtr<SchedProcessForkFtraceEvent> sched_process_fork_;
  ::protozero::CopyablePtr<SchedProcessFreeFtraceEvent> sched_process_free_;
  ::protozero::CopyablePtr<SchedProcessHangFtraceEvent> sched_process_hang_;
  ::protozero::CopyablePtr<SchedProcessWaitFtraceEvent> sched_process_wait_;
  ::protozero::CopyablePtr<F2fsDoSubmitBioFtraceEvent> f2fs_do_submit_bio_;
  ::protozero::CopyablePtr<F2fsEvictInodeFtraceEvent> f2fs_evict_inode_;
  ::protozero::CopyablePtr<F2fsFallocateFtraceEvent> f2fs_fallocate_;
  ::protozero::CopyablePtr<F2fsGetDataBlockFtraceEvent> f2fs_get_data_block_;
  ::protozero::CopyablePtr<F2fsGetVictimFtraceEvent> f2fs_get_victim_;
  ::protozero::CopyablePtr<F2fsIgetFtraceEvent> f2fs_iget_;
  ::protozero::CopyablePtr<F2fsIgetExitFtraceEvent> f2fs_iget_exit_;
  ::protozero::CopyablePtr<F2fsNewInodeFtraceEvent> f2fs_new_inode_;
  ::protozero::CopyablePtr<F2fsReadpageFtraceEvent> f2fs_readpage_;
  ::protozero::CopyablePtr<F2fsReserveNewBlockFtraceEvent> f2fs_reserve_new_block_;
  ::protozero::CopyablePtr<F2fsSetPageDirtyFtraceEvent> f2fs_set_page_dirty_;
  ::protozero::CopyablePtr<F2fsSubmitWritePageFtraceEvent> f2fs_submit_write_page_;
  ::protozero::CopyablePtr<F2fsSyncFileEnterFtraceEvent> f2fs_sync_file_enter_;
  ::protozero::CopyablePtr<F2fsSyncFileExitFtraceEvent> f2fs_sync_file_exit_;
  ::protozero::CopyablePtr<F2fsSyncFsFtraceEvent> f2fs_sync_fs_;
  ::protozero::CopyablePtr<F2fsTruncateFtraceEvent> f2fs_truncate_;
  ::protozero::CopyablePtr<F2fsTruncateBlocksEnterFtraceEvent> f2fs_truncate_blocks_enter_;
  ::protozero::CopyablePtr<F2fsTruncateBlocksExitFtraceEvent> f2fs_truncate_blocks_exit_;
  ::protozero::CopyablePtr<F2fsTruncateDataBlocksRangeFtraceEvent> f2fs_truncate_data_blocks_range_;
  ::protozero::CopyablePtr<F2fsTruncateInodeBlocksEnterFtraceEvent> f2fs_truncate_inode_blocks_enter_;
  ::protozero::CopyablePtr<F2fsTruncateInodeBlocksExitFtraceEvent> f2fs_truncate_inode_blocks_exit_;
  ::protozero::CopyablePtr<F2fsTruncateNodeFtraceEvent> f2fs_truncate_node_;
  ::protozero::CopyablePtr<F2fsTruncateNodesEnterFtraceEvent> f2fs_truncate_nodes_enter_;
  ::protozero::CopyablePtr<F2fsTruncateNodesExitFtraceEvent> f2fs_truncate_nodes_exit_;
  ::protozero::CopyablePtr<F2fsTruncatePartialNodesFtraceEvent> f2fs_truncate_partial_nodes_;
  ::protozero::CopyablePtr<F2fsUnlinkEnterFtraceEvent> f2fs_unlink_enter_;
  ::protozero::CopyablePtr<F2fsUnlinkExitFtraceEvent> f2fs_unlink_exit_;
  ::protozero::CopyablePtr<F2fsVmPageMkwriteFtraceEvent> f2fs_vm_page_mkwrite_;
  ::protozero::CopyablePtr<F2fsWriteBeginFtraceEvent> f2fs_write_begin_;
  ::protozero::CopyablePtr<F2fsWriteCheckpointFtraceEvent> f2fs_write_checkpoint_;
  ::protozero::CopyablePtr<F2fsWriteEndFtraceEvent> f2fs_write_end_;
  ::protozero::CopyablePtr<AllocPagesIommuEndFtraceEvent> alloc_pages_iommu_end_;
  ::protozero::CopyablePtr<AllocPagesIommuFailFtraceEvent> alloc_pages_iommu_fail_;
  ::protozero::CopyablePtr<AllocPagesIommuStartFtraceEvent> alloc_pages_iommu_start_;
  ::protozero::CopyablePtr<AllocPagesSysEndFtraceEvent> alloc_pages_sys_end_;
  ::protozero::CopyablePtr<AllocPagesSysFailFtraceEvent> alloc_pages_sys_fail_;
  ::protozero::CopyablePtr<AllocPagesSysStartFtraceEvent> alloc_pages_sys_start_;
  ::protozero::CopyablePtr<DmaAllocContiguousRetryFtraceEvent> dma_alloc_contiguous_retry_;
  ::protozero::CopyablePtr<IommuMapRangeFtraceEvent> iommu_map_range_;
  ::protozero::CopyablePtr<IommuSecPtblMapRangeEndFtraceEvent> iommu_sec_ptbl_map_range_end_;
  ::protozero::CopyablePtr<IommuSecPtblMapRangeStartFtraceEvent> iommu_sec_ptbl_map_range_start_;
  ::protozero::CopyablePtr<IonAllocBufferEndFtraceEvent> ion_alloc_buffer_end_;
  ::protozero::CopyablePtr<IonAllocBufferFailFtraceEvent> ion_alloc_buffer_fail_;
  ::protozero::CopyablePtr<IonAllocBufferFallbackFtraceEvent> ion_alloc_buffer_fallback_;
  ::protozero::CopyablePtr<IonAllocBufferStartFtraceEvent> ion_alloc_buffer_start_;
  ::protozero::CopyablePtr<IonCpAllocRetryFtraceEvent> ion_cp_alloc_retry_;
  ::protozero::CopyablePtr<IonCpSecureBufferEndFtraceEvent> ion_cp_secure_buffer_end_;
  ::protozero::CopyablePtr<IonCpSecureBufferStartFtraceEvent> ion_cp_secure_buffer_start_;
  ::protozero::CopyablePtr<IonPrefetchingFtraceEvent> ion_prefetching_;
  ::protozero::CopyablePtr<IonSecureCmaAddToPoolEndFtraceEvent> ion_secure_cma_add_to_pool_end_;
  ::protozero::CopyablePtr<IonSecureCmaAddToPoolStartFtraceEvent> ion_secure_cma_add_to_pool_start_;
  ::protozero::CopyablePtr<IonSecureCmaAllocateEndFtraceEvent> ion_secure_cma_allocate_end_;
  ::protozero::CopyablePtr<IonSecureCmaAllocateStartFtraceEvent> ion_secure_cma_allocate_start_;
  ::protozero::CopyablePtr<IonSecureCmaShrinkPoolEndFtraceEvent> ion_secure_cma_shrink_pool_end_;
  ::protozero::CopyablePtr<IonSecureCmaShrinkPoolStartFtraceEvent> ion_secure_cma_shrink_pool_start_;
  ::protozero::CopyablePtr<KfreeFtraceEvent> kfree_;
  ::protozero::CopyablePtr<KmallocFtraceEvent> kmalloc_;
  ::protozero::CopyablePtr<KmallocNodeFtraceEvent> kmalloc_node_;
  ::protozero::CopyablePtr<KmemCacheAllocFtraceEvent> kmem_cache_alloc_;
  ::protozero::CopyablePtr<KmemCacheAllocNodeFtraceEvent> kmem_cache_alloc_node_;
  ::protozero::CopyablePtr<KmemCacheFreeFtraceEvent> kmem_cache_free_;
  ::protozero::CopyablePtr<MigratePagesEndFtraceEvent> migrate_pages_end_;
  ::protozero::CopyablePtr<MigratePagesStartFtraceEvent> migrate_pages_start_;
  ::protozero::CopyablePtr<MigrateRetryFtraceEvent> migrate_retry_;
  ::protozero::CopyablePtr<MmPageAllocFtraceEvent> mm_page_alloc_;
  ::protozero::CopyablePtr<MmPageAllocExtfragFtraceEvent> mm_page_alloc_extfrag_;
  ::protozero::CopyablePtr<MmPageAllocZoneLockedFtraceEvent> mm_page_alloc_zone_locked_;
  ::protozero::CopyablePtr<MmPageFreeFtraceEvent> mm_page_free_;
  ::protozero::CopyablePtr<MmPageFreeBatchedFtraceEvent> mm_page_free_batched_;
  ::protozero::CopyablePtr<MmPagePcpuDrainFtraceEvent> mm_page_pcpu_drain_;
  ::protozero::CopyablePtr<RssStatFtraceEvent> rss_stat_;
  ::protozero::CopyablePtr<IonHeapShrinkFtraceEvent> ion_heap_shrink_;
  ::protozero::CopyablePtr<IonHeapGrowFtraceEvent> ion_heap_grow_;
  ::protozero::CopyablePtr<FenceInitFtraceEvent> fence_init_;
  ::protozero::CopyablePtr<FenceDestroyFtraceEvent> fence_destroy_;
  ::protozero::CopyablePtr<FenceEnableSignalFtraceEvent> fence_enable_signal_;
  ::protozero::CopyablePtr<FenceSignaledFtraceEvent> fence_signaled_;
  ::protozero::CopyablePtr<ClkEnableFtraceEvent> clk_enable_;
  ::protozero::CopyablePtr<ClkDisableFtraceEvent> clk_disable_;
  ::protozero::CopyablePtr<ClkSetRateFtraceEvent> clk_set_rate_;
  ::protozero::CopyablePtr<BinderTransactionAllocBufFtraceEvent> binder_transaction_alloc_buf_;
  ::protozero::CopyablePtr<SignalDeliverFtraceEvent> signal_deliver_;
  ::protozero::CopyablePtr<SignalGenerateFtraceEvent> signal_generate_;
  ::protozero::CopyablePtr<OomScoreAdjUpdateFtraceEvent> oom_score_adj_update_;
  ::protozero::CopyablePtr<GenericFtraceEvent> generic_;
  ::protozero::CopyablePtr<MmEventRecordFtraceEvent> mm_event_record_;
  ::protozero::CopyablePtr<SysEnterFtraceEvent> sys_enter_;
  ::protozero::CopyablePtr<SysExitFtraceEvent> sys_exit_;
  ::protozero::CopyablePtr<ZeroFtraceEvent> zero_;
  ::protozero::CopyablePtr<GpuFrequencyFtraceEvent> gpu_frequency_;
  ::protozero::CopyablePtr<SdeTracingMarkWriteFtraceEvent> sde_tracing_mark_write_;
  ::protozero::CopyablePtr<MarkVictimFtraceEvent> mark_victim_;
  ::protozero::CopyablePtr<IonStatFtraceEvent> ion_stat_;
  ::protozero::CopyablePtr<IonBufferCreateFtraceEvent> ion_buffer_create_;
  ::protozero::CopyablePtr<IonBufferDestroyFtraceEvent> ion_buffer_destroy_;
  ::protozero::CopyablePtr<ScmCallStartFtraceEvent> scm_call_start_;
  ::protozero::CopyablePtr<ScmCallEndFtraceEvent> scm_call_end_;
  ::protozero::CopyablePtr<GpuMemTotalFtraceEvent> gpu_mem_total_;
  ::protozero::CopyablePtr<ThermalTemperatureFtraceEvent> thermal_temperature_;
  ::protozero::CopyablePtr<CdevUpdateFtraceEvent> cdev_update_;
  ::protozero::CopyablePtr<CpuhpExitFtraceEvent> cpuhp_exit_;
  ::protozero::CopyablePtr<CpuhpMultiEnterFtraceEvent> cpuhp_multi_enter_;
  ::protozero::CopyablePtr<CpuhpEnterFtraceEvent> cpuhp_enter_;
  ::protozero::CopyablePtr<CpuhpLatencyFtraceEvent> cpuhp_latency_;
  ::protozero::CopyablePtr<FastrpcDmaStatFtraceEvent> fastrpc_dma_stat_;
  ::protozero::CopyablePtr<DpuTracingMarkWriteFtraceEvent> dpu_tracing_mark_write_;
  ::protozero::CopyablePtr<G2dTracingMarkWriteFtraceEvent> g2d_tracing_mark_write_;
  ::protozero::CopyablePtr<MaliTracingMarkWriteFtraceEvent> mali_tracing_mark_write_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<351> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_EVENT_PROTO_CPP_H_
