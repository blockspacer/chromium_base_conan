// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/i2c.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class I2cReadFtraceEvent;
class I2cReadFtraceEventDefaultTypeInternal;
extern I2cReadFtraceEventDefaultTypeInternal _I2cReadFtraceEvent_default_instance_;
class I2cReplyFtraceEvent;
class I2cReplyFtraceEventDefaultTypeInternal;
extern I2cReplyFtraceEventDefaultTypeInternal _I2cReplyFtraceEvent_default_instance_;
class I2cResultFtraceEvent;
class I2cResultFtraceEventDefaultTypeInternal;
extern I2cResultFtraceEventDefaultTypeInternal _I2cResultFtraceEvent_default_instance_;
class I2cWriteFtraceEvent;
class I2cWriteFtraceEventDefaultTypeInternal;
extern I2cWriteFtraceEventDefaultTypeInternal _I2cWriteFtraceEvent_default_instance_;
class SmbusReadFtraceEvent;
class SmbusReadFtraceEventDefaultTypeInternal;
extern SmbusReadFtraceEventDefaultTypeInternal _SmbusReadFtraceEvent_default_instance_;
class SmbusReplyFtraceEvent;
class SmbusReplyFtraceEventDefaultTypeInternal;
extern SmbusReplyFtraceEventDefaultTypeInternal _SmbusReplyFtraceEvent_default_instance_;
class SmbusResultFtraceEvent;
class SmbusResultFtraceEventDefaultTypeInternal;
extern SmbusResultFtraceEventDefaultTypeInternal _SmbusResultFtraceEvent_default_instance_;
class SmbusWriteFtraceEvent;
class SmbusWriteFtraceEventDefaultTypeInternal;
extern SmbusWriteFtraceEventDefaultTypeInternal _SmbusWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::I2cReadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cReadFtraceEvent>(Arena*);
template<> ::perfetto::protos::I2cReplyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cReplyFtraceEvent>(Arena*);
template<> ::perfetto::protos::I2cResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cResultFtraceEvent>(Arena*);
template<> ::perfetto::protos::I2cWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cWriteFtraceEvent>(Arena*);
template<> ::perfetto::protos::SmbusReadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusReadFtraceEvent>(Arena*);
template<> ::perfetto::protos::SmbusReplyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusReplyFtraceEvent>(Arena*);
template<> ::perfetto::protos::SmbusResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusResultFtraceEvent>(Arena*);
template<> ::perfetto::protos::SmbusWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class I2cReadFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cReadFtraceEvent) */ {
 public:
  I2cReadFtraceEvent();
  virtual ~I2cReadFtraceEvent();

  I2cReadFtraceEvent(const I2cReadFtraceEvent& from);
  I2cReadFtraceEvent(I2cReadFtraceEvent&& from) noexcept
    : I2cReadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cReadFtraceEvent& operator=(const I2cReadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cReadFtraceEvent& operator=(I2cReadFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const I2cReadFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I2cReadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cReadFtraceEvent*>(
               &_I2cReadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(I2cReadFtraceEvent& a, I2cReadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cReadFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I2cReadFtraceEvent* New() const final {
    return CreateMaybeMessage<I2cReadFtraceEvent>(nullptr);
  }

  I2cReadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I2cReadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const I2cReadFtraceEvent& from);
  void MergeFrom(const I2cReadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(I2cReadFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.I2cReadFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr() const;
  void set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cReadFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class I2cWriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cWriteFtraceEvent) */ {
 public:
  I2cWriteFtraceEvent();
  virtual ~I2cWriteFtraceEvent();

  I2cWriteFtraceEvent(const I2cWriteFtraceEvent& from);
  I2cWriteFtraceEvent(I2cWriteFtraceEvent&& from) noexcept
    : I2cWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cWriteFtraceEvent& operator=(const I2cWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cWriteFtraceEvent& operator=(I2cWriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const I2cWriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I2cWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cWriteFtraceEvent*>(
               &_I2cWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(I2cWriteFtraceEvent& a, I2cWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cWriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I2cWriteFtraceEvent* New() const final {
    return CreateMaybeMessage<I2cWriteFtraceEvent>(nullptr);
  }

  I2cWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I2cWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const I2cWriteFtraceEvent& from);
  void MergeFrom(const I2cWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(I2cWriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.I2cWriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
    kBufFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr() const;
  void set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 buf = 6;
  bool has_buf() const;
  void clear_buf();
  ::PROTOBUF_NAMESPACE_ID::uint32 buf() const;
  void set_buf(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cWriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class I2cResultFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cResultFtraceEvent) */ {
 public:
  I2cResultFtraceEvent();
  virtual ~I2cResultFtraceEvent();

  I2cResultFtraceEvent(const I2cResultFtraceEvent& from);
  I2cResultFtraceEvent(I2cResultFtraceEvent&& from) noexcept
    : I2cResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cResultFtraceEvent& operator=(const I2cResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cResultFtraceEvent& operator=(I2cResultFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const I2cResultFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I2cResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cResultFtraceEvent*>(
               &_I2cResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(I2cResultFtraceEvent& a, I2cResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cResultFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I2cResultFtraceEvent* New() const final {
    return CreateMaybeMessage<I2cResultFtraceEvent>(nullptr);
  }

  I2cResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I2cResultFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const I2cResultFtraceEvent& from);
  void MergeFrom(const I2cResultFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(I2cResultFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.I2cResultFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kNrMsgsFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 nr_msgs = 2;
  bool has_nr_msgs() const;
  void clear_nr_msgs();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_msgs() const;
  void set_nr_msgs(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cResultFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_msgs_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class I2cReplyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cReplyFtraceEvent) */ {
 public:
  I2cReplyFtraceEvent();
  virtual ~I2cReplyFtraceEvent();

  I2cReplyFtraceEvent(const I2cReplyFtraceEvent& from);
  I2cReplyFtraceEvent(I2cReplyFtraceEvent&& from) noexcept
    : I2cReplyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cReplyFtraceEvent& operator=(const I2cReplyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cReplyFtraceEvent& operator=(I2cReplyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const I2cReplyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I2cReplyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cReplyFtraceEvent*>(
               &_I2cReplyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(I2cReplyFtraceEvent& a, I2cReplyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cReplyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I2cReplyFtraceEvent* New() const final {
    return CreateMaybeMessage<I2cReplyFtraceEvent>(nullptr);
  }

  I2cReplyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I2cReplyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const I2cReplyFtraceEvent& from);
  void MergeFrom(const I2cReplyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(I2cReplyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.I2cReplyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
    kBufFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr() const;
  void set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 buf = 6;
  bool has_buf() const;
  void clear_buf();
  ::PROTOBUF_NAMESPACE_ID::uint32 buf() const;
  void set_buf(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cReplyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class SmbusReadFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusReadFtraceEvent) */ {
 public:
  SmbusReadFtraceEvent();
  virtual ~SmbusReadFtraceEvent();

  SmbusReadFtraceEvent(const SmbusReadFtraceEvent& from);
  SmbusReadFtraceEvent(SmbusReadFtraceEvent&& from) noexcept
    : SmbusReadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusReadFtraceEvent& operator=(const SmbusReadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusReadFtraceEvent& operator=(SmbusReadFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmbusReadFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmbusReadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusReadFtraceEvent*>(
               &_SmbusReadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SmbusReadFtraceEvent& a, SmbusReadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusReadFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmbusReadFtraceEvent* New() const final {
    return CreateMaybeMessage<SmbusReadFtraceEvent>(nullptr);
  }

  SmbusReadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmbusReadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmbusReadFtraceEvent& from);
  void MergeFrom(const SmbusReadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmbusReadFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmbusReadFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kAddrFieldNumber = 3,
    kCommandFieldNumber = 4,
    kProtocolFieldNumber = 5,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 flags = 2;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 protocol = 5;
  bool has_protocol() const;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusReadFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class SmbusWriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusWriteFtraceEvent) */ {
 public:
  SmbusWriteFtraceEvent();
  virtual ~SmbusWriteFtraceEvent();

  SmbusWriteFtraceEvent(const SmbusWriteFtraceEvent& from);
  SmbusWriteFtraceEvent(SmbusWriteFtraceEvent&& from) noexcept
    : SmbusWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusWriteFtraceEvent& operator=(const SmbusWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusWriteFtraceEvent& operator=(SmbusWriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmbusWriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmbusWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusWriteFtraceEvent*>(
               &_SmbusWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SmbusWriteFtraceEvent& a, SmbusWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusWriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmbusWriteFtraceEvent* New() const final {
    return CreateMaybeMessage<SmbusWriteFtraceEvent>(nullptr);
  }

  SmbusWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmbusWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmbusWriteFtraceEvent& from);
  void MergeFrom(const SmbusWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmbusWriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmbusWriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kCommandFieldNumber = 4,
    kLenFieldNumber = 5,
    kProtocolFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 protocol = 6;
  bool has_protocol() const;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusWriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class SmbusResultFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusResultFtraceEvent) */ {
 public:
  SmbusResultFtraceEvent();
  virtual ~SmbusResultFtraceEvent();

  SmbusResultFtraceEvent(const SmbusResultFtraceEvent& from);
  SmbusResultFtraceEvent(SmbusResultFtraceEvent&& from) noexcept
    : SmbusResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusResultFtraceEvent& operator=(const SmbusResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusResultFtraceEvent& operator=(SmbusResultFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmbusResultFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmbusResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusResultFtraceEvent*>(
               &_SmbusResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SmbusResultFtraceEvent& a, SmbusResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusResultFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmbusResultFtraceEvent* New() const final {
    return CreateMaybeMessage<SmbusResultFtraceEvent>(nullptr);
  }

  SmbusResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmbusResultFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmbusResultFtraceEvent& from);
  void MergeFrom(const SmbusResultFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmbusResultFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmbusResultFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kReadWriteFieldNumber = 4,
    kCommandFieldNumber = 5,
    kResFieldNumber = 6,
    kProtocolFieldNumber = 7,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 read_write = 4;
  bool has_read_write() const;
  void clear_read_write();
  ::PROTOBUF_NAMESPACE_ID::uint32 read_write() const;
  void set_read_write(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 command = 5;
  bool has_command() const;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 res = 6;
  bool has_res() const;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 protocol = 7;
  bool has_protocol() const;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusResultFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 read_write_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// -------------------------------------------------------------------

class SmbusReplyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusReplyFtraceEvent) */ {
 public:
  SmbusReplyFtraceEvent();
  virtual ~SmbusReplyFtraceEvent();

  SmbusReplyFtraceEvent(const SmbusReplyFtraceEvent& from);
  SmbusReplyFtraceEvent(SmbusReplyFtraceEvent&& from) noexcept
    : SmbusReplyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusReplyFtraceEvent& operator=(const SmbusReplyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusReplyFtraceEvent& operator=(SmbusReplyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmbusReplyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmbusReplyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusReplyFtraceEvent*>(
               &_SmbusReplyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SmbusReplyFtraceEvent& a, SmbusReplyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusReplyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmbusReplyFtraceEvent* New() const final {
    return CreateMaybeMessage<SmbusReplyFtraceEvent>(nullptr);
  }

  SmbusReplyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmbusReplyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmbusReplyFtraceEvent& from);
  void MergeFrom(const SmbusReplyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmbusReplyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmbusReplyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kCommandFieldNumber = 4,
    kLenFieldNumber = 5,
    kProtocolFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr() const;
  void set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 protocol = 6;
  bool has_protocol() const;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusReplyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adapter_nr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// I2cReadFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cReadFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void I2cReadFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I2cReadFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void I2cReadFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.adapter_nr)
}

// optional uint32 msg_nr = 2;
inline bool I2cReadFtraceEvent::has_msg_nr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void I2cReadFtraceEvent::clear_msg_nr() {
  msg_nr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReadFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.msg_nr)
  return msg_nr_;
}
inline void I2cReadFtraceEvent::set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.msg_nr)
}

// optional uint32 addr = 3;
inline bool I2cReadFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void I2cReadFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReadFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.addr)
  return addr_;
}
inline void I2cReadFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.addr)
}

// optional uint32 flags = 4;
inline bool I2cReadFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void I2cReadFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReadFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.flags)
  return flags_;
}
inline void I2cReadFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.flags)
}

// optional uint32 len = 5;
inline bool I2cReadFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void I2cReadFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReadFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.len)
  return len_;
}
inline void I2cReadFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.len)
}

// -------------------------------------------------------------------

// I2cWriteFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cWriteFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void I2cWriteFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I2cWriteFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void I2cWriteFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.adapter_nr)
}

// optional uint32 msg_nr = 2;
inline bool I2cWriteFtraceEvent::has_msg_nr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void I2cWriteFtraceEvent::clear_msg_nr() {
  msg_nr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cWriteFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.msg_nr)
  return msg_nr_;
}
inline void I2cWriteFtraceEvent::set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.msg_nr)
}

// optional uint32 addr = 3;
inline bool I2cWriteFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void I2cWriteFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cWriteFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.addr)
  return addr_;
}
inline void I2cWriteFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.addr)
}

// optional uint32 flags = 4;
inline bool I2cWriteFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void I2cWriteFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cWriteFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.flags)
  return flags_;
}
inline void I2cWriteFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.flags)
}

// optional uint32 len = 5;
inline bool I2cWriteFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void I2cWriteFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cWriteFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.len)
  return len_;
}
inline void I2cWriteFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.len)
}

// optional uint32 buf = 6;
inline bool I2cWriteFtraceEvent::has_buf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void I2cWriteFtraceEvent::clear_buf() {
  buf_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cWriteFtraceEvent::buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.buf)
  return buf_;
}
inline void I2cWriteFtraceEvent::set_buf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  buf_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.buf)
}

// -------------------------------------------------------------------

// I2cResultFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cResultFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void I2cResultFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I2cResultFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void I2cResultFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.adapter_nr)
}

// optional uint32 nr_msgs = 2;
inline bool I2cResultFtraceEvent::has_nr_msgs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void I2cResultFtraceEvent::clear_nr_msgs() {
  nr_msgs_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cResultFtraceEvent::nr_msgs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.nr_msgs)
  return nr_msgs_;
}
inline void I2cResultFtraceEvent::set_nr_msgs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_msgs_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.nr_msgs)
}

// optional int32 ret = 3;
inline bool I2cResultFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void I2cResultFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I2cResultFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.ret)
  return ret_;
}
inline void I2cResultFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.ret)
}

// -------------------------------------------------------------------

// I2cReplyFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cReplyFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void I2cReplyFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I2cReplyFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void I2cReplyFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.adapter_nr)
}

// optional uint32 msg_nr = 2;
inline bool I2cReplyFtraceEvent::has_msg_nr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void I2cReplyFtraceEvent::clear_msg_nr() {
  msg_nr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReplyFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.msg_nr)
  return msg_nr_;
}
inline void I2cReplyFtraceEvent::set_msg_nr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.msg_nr)
}

// optional uint32 addr = 3;
inline bool I2cReplyFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void I2cReplyFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReplyFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.addr)
  return addr_;
}
inline void I2cReplyFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.addr)
}

// optional uint32 flags = 4;
inline bool I2cReplyFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void I2cReplyFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReplyFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.flags)
  return flags_;
}
inline void I2cReplyFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.flags)
}

// optional uint32 len = 5;
inline bool I2cReplyFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void I2cReplyFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReplyFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.len)
  return len_;
}
inline void I2cReplyFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.len)
}

// optional uint32 buf = 6;
inline bool I2cReplyFtraceEvent::has_buf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void I2cReplyFtraceEvent::clear_buf() {
  buf_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 I2cReplyFtraceEvent::buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.buf)
  return buf_;
}
inline void I2cReplyFtraceEvent::set_buf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  buf_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.buf)
}

// -------------------------------------------------------------------

// SmbusReadFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusReadFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmbusReadFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SmbusReadFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void SmbusReadFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.adapter_nr)
}

// optional uint32 flags = 2;
inline bool SmbusReadFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmbusReadFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReadFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.flags)
  return flags_;
}
inline void SmbusReadFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.flags)
}

// optional uint32 addr = 3;
inline bool SmbusReadFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmbusReadFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReadFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.addr)
  return addr_;
}
inline void SmbusReadFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.addr)
}

// optional uint32 command = 4;
inline bool SmbusReadFtraceEvent::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmbusReadFtraceEvent::clear_command() {
  command_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReadFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.command)
  return command_;
}
inline void SmbusReadFtraceEvent::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  command_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.command)
}

// optional uint32 protocol = 5;
inline bool SmbusReadFtraceEvent::has_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmbusReadFtraceEvent::clear_protocol() {
  protocol_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReadFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.protocol)
  return protocol_;
}
inline void SmbusReadFtraceEvent::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.protocol)
}

// -------------------------------------------------------------------

// SmbusWriteFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusWriteFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SmbusWriteFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void SmbusWriteFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.adapter_nr)
}

// optional uint32 addr = 2;
inline bool SmbusWriteFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusWriteFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.addr)
  return addr_;
}
inline void SmbusWriteFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.addr)
}

// optional uint32 flags = 3;
inline bool SmbusWriteFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusWriteFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.flags)
  return flags_;
}
inline void SmbusWriteFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.flags)
}

// optional uint32 command = 4;
inline bool SmbusWriteFtraceEvent::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_command() {
  command_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusWriteFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.command)
  return command_;
}
inline void SmbusWriteFtraceEvent::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  command_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.command)
}

// optional uint32 len = 5;
inline bool SmbusWriteFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusWriteFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.len)
  return len_;
}
inline void SmbusWriteFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.len)
}

// optional uint32 protocol = 6;
inline bool SmbusWriteFtraceEvent::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmbusWriteFtraceEvent::clear_protocol() {
  protocol_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusWriteFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.protocol)
  return protocol_;
}
inline void SmbusWriteFtraceEvent::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.protocol)
}

// -------------------------------------------------------------------

// SmbusResultFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusResultFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmbusResultFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SmbusResultFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void SmbusResultFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.adapter_nr)
}

// optional uint32 addr = 2;
inline bool SmbusResultFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmbusResultFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusResultFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.addr)
  return addr_;
}
inline void SmbusResultFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.addr)
}

// optional uint32 flags = 3;
inline bool SmbusResultFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmbusResultFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusResultFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.flags)
  return flags_;
}
inline void SmbusResultFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.flags)
}

// optional uint32 read_write = 4;
inline bool SmbusResultFtraceEvent::has_read_write() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmbusResultFtraceEvent::clear_read_write() {
  read_write_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusResultFtraceEvent::read_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.read_write)
  return read_write_;
}
inline void SmbusResultFtraceEvent::set_read_write(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  read_write_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.read_write)
}

// optional uint32 command = 5;
inline bool SmbusResultFtraceEvent::has_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmbusResultFtraceEvent::clear_command() {
  command_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusResultFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.command)
  return command_;
}
inline void SmbusResultFtraceEvent::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  command_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.command)
}

// optional int32 res = 6;
inline bool SmbusResultFtraceEvent::has_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmbusResultFtraceEvent::clear_res() {
  res_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SmbusResultFtraceEvent::res() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.res)
  return res_;
}
inline void SmbusResultFtraceEvent::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  res_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.res)
}

// optional uint32 protocol = 7;
inline bool SmbusResultFtraceEvent::has_protocol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SmbusResultFtraceEvent::clear_protocol() {
  protocol_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusResultFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.protocol)
  return protocol_;
}
inline void SmbusResultFtraceEvent::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.protocol)
}

// -------------------------------------------------------------------

// SmbusReplyFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusReplyFtraceEvent::has_adapter_nr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_adapter_nr() {
  adapter_nr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SmbusReplyFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.adapter_nr)
  return adapter_nr_;
}
inline void SmbusReplyFtraceEvent::set_adapter_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_nr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.adapter_nr)
}

// optional uint32 addr = 2;
inline bool SmbusReplyFtraceEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_addr() {
  addr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReplyFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.addr)
  return addr_;
}
inline void SmbusReplyFtraceEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.addr)
}

// optional uint32 flags = 3;
inline bool SmbusReplyFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReplyFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.flags)
  return flags_;
}
inline void SmbusReplyFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.flags)
}

// optional uint32 command = 4;
inline bool SmbusReplyFtraceEvent::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_command() {
  command_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReplyFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.command)
  return command_;
}
inline void SmbusReplyFtraceEvent::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  command_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.command)
}

// optional uint32 len = 5;
inline bool SmbusReplyFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReplyFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.len)
  return len_;
}
inline void SmbusReplyFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.len)
}

// optional uint32 protocol = 6;
inline bool SmbusReplyFtraceEvent::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmbusReplyFtraceEvent::clear_protocol() {
  protocol_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmbusReplyFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.protocol)
  return protocol_;
}
inline void SmbusReplyFtraceEvent::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto
