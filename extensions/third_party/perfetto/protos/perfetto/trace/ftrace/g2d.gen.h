// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_G2D_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_G2D_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class G2dTracingMarkWriteFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT G2dTracingMarkWriteFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kNameFieldNumber = 4,
    kTypeFieldNumber = 5,
    kValueFieldNumber = 6,
  };

  G2dTracingMarkWriteFtraceEvent();
  ~G2dTracingMarkWriteFtraceEvent() override;
  G2dTracingMarkWriteFtraceEvent(G2dTracingMarkWriteFtraceEvent&&) noexcept;
  G2dTracingMarkWriteFtraceEvent& operator=(G2dTracingMarkWriteFtraceEvent&&);
  G2dTracingMarkWriteFtraceEvent(const G2dTracingMarkWriteFtraceEvent&);
  G2dTracingMarkWriteFtraceEvent& operator=(const G2dTracingMarkWriteFtraceEvent&);
  bool operator==(const G2dTracingMarkWriteFtraceEvent&) const;
  bool operator!=(const G2dTracingMarkWriteFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_name() const { return _has_field_[4]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(4); }

  bool has_type() const { return _has_field_[5]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(5); }

  bool has_value() const { return _has_field_[6]; }
  int32_t value() const { return value_; }
  void set_value(int32_t value) { value_ = value; _has_field_.set(6); }

 private:
  int32_t pid_{};
  std::string name_{};
  uint32_t type_{};
  int32_t value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_G2D_PROTO_CPP_H_
